#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract graphic entity SymbolObject {
#  abstract transient CanariRect objectRect ;
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

graphic entity SymbolPin : SymbolObject {
  property @signature Int xPin default 9_154_00 ;
  property @signature Int yPin default 9_154_00 ;
  property @signature Int xLabel default 9_154_00 ;
  property @signature Int yLabel default 11_440_00 ;
  property @signature Int xNumber default 9_154_00 ;
  property @signature Int yNumber default 6_868_00 ;
  property @signature String label default "?" ;
  property @signature String number default "" ;
  property @signature Bool pinIsVisibleInSchematics default yes ;
  
  transient EBShape objectDisplay dependsFrom
     self.xPin, self.yPin, 
     self.xLabel, self.yLabel, 
     self.xNumber, self.yNumber, 
     self.label, self.number,
     prefs.symbolColor, prefs.pinNameFont
  ;

  transient EBShape selectionDisplay dependsFrom
     self.xPin, self.yPin, 
     self.xLabel, self.yLabel, 
     self.xNumber, self.yNumber
     #self.text, prefs.pinNameFont
  ;
  
#  transient CanariRect objectRect dependsFrom
#     self.xPin, self.yPin, 
#     self.xLabel, self.yLabel, 
#     self.xNumber, self.yNumber, 
#     self.label, self.number,
#     prefs.symbolColor, prefs.pinNameFont
#  ;

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

graphic entity SymbolText : SymbolObject {
  property @signature Int x default 2_286_00 ;
  property @signature Int y default 2_286_00 ;
  property @signature String text default "text" ;
  
  transient EBShape objectDisplay dependsFrom
     self.x, self.y, self.text,
     prefs.symbolColor, prefs.pinNameFont
  ;

  transient EBShape selectionDisplay dependsFrom
     self.x, self.y, self.text, prefs.pinNameFont
  ;

#  transient CanariRect objectRect dependsFrom
#     self.x, self.y, self.text,
#     prefs.symbolColor, prefs.pinNameFont
#  ;
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

graphic entity SymbolSolidRect : SymbolObject {
  property @signature Int x default 2_286_00 ;
  property @signature Int y default 2_286_00 ;
  property @signature Int width default 9_154_00 ;
  property @signature Int height default 9_154_00 ;
  
  transient EBShape objectDisplay dependsFrom
     self.x, self.y, self.width, self.height,
     prefs.symbolColor, prefs.symbolDrawingWidthMultipliedByTen
  ;
  transient EBShape selectionDisplay dependsFrom
     self.x, self.y, self.width, self.height
  ;
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

graphic entity SymbolOval : SymbolObject {
  property @signature Int x default 2_286_00 ;
  property @signature Int y default 2_286_00 ;
  property @signature Int width default 9_154_00 ;
  property @signature Int height default 9_154_00 ;
  
  transient EBShape objectDisplay dependsFrom
     self.x, self.y, self.width, self.height,
     prefs.symbolColor, prefs.symbolDrawingWidthMultipliedByTen
  ;
  transient EBShape selectionDisplay dependsFrom
     self.x, self.y, self.width, self.height
  ;
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

graphic entity SymbolBezierCurve : SymbolObject {
  property @signature Int x1 default 2_286_00 ;
  property @signature Int y1 default 9_154_00 ;
  property @signature Int x2 default 2_286_00 ;
  property @signature Int y2 default 2_286_00 ;
  property @signature Int cpx1 default 9_154_00 ;
  property @signature Int cpy1 default 9_154_00 ;
  property @signature Int cpx2 default 9_154_00 ;
  property @signature Int cpy2 default 2_286_00 ;
  
  transient EBShape objectDisplay dependsFrom
     self.x1, self.y1, self.x2, self.y2,
     self.cpx1, self.cpy1, self.cpx2, self.cpy2,
     prefs.symbolColor, prefs.symbolDrawingWidthMultipliedByTen
  ;
  transient EBShape selectionDisplay dependsFrom
    self.x1, self.y1, self.x2, self.y2,
    self.cpx1, self.cpy1, self.cpx2, self.cpy2
  ;
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

graphic entity SymbolSegment : SymbolObject {
  property @signature Int x1 default 2_286_00 ;
  property @signature Int y1 default 2_286_00 ;
  property @signature Int x2 default 9_154_00 ;
  property @signature Int y2 default 9_154_00 ;
  
  transient EBShape objectDisplay dependsFrom
     self.x1, self.y1, self.x2, self.y2, prefs.symbolColor, prefs.symbolDrawingWidthMultipliedByTen
  ;
  transient EBShape selectionDisplay dependsFrom self.x1, self.y1, self.x2, self.y2 ;
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

entity SymbolRoot {
#--- Selected page index
  property Int selectedPageIndex default 0 ;

#--- Selected inspector
  property Int selectedInspector default 0 ;

#--- Comment
  property @signature String comments default "" ;

#--- Grid and display inspector
  property Bool horizontalFlip default no ;
  property Bool verticalFlip default no ;
  property GridStyle gridStyle default line ;
  property Int gridStep default 4 ;

#--- Symbol definition
  toMany @cascading @signature SymbolObject symbolObjects ;
}



#----------------------------------------------------------------------------*
##     S Y M B O L    D O C U M E N T                                         *
##----------------------------------------------------------------------------*
#
#graphicClassForEntity SymbolGraphicEntity controlledBy PMSymbolGraphicArrayController {
#} {
#}
#
##----------------------------------------------------------------------------*
#
#graphicArrayControllerClass PMSymbolGraphicArrayController forEntity SymbolGraphicEntity {
#  inspectorForEntity TextForSymbolEntity ;
#  inspectorForEntity PinForSymbolEntity ;
#}
#
##----------------------------------------------------------------------------*
#
#graphicClassForEntity PinForSymbolEntity {
#  attribute origin : EBPoint := EBZeroPoint storedBy .stringForOrigin ;
#  attribute pinNumberDisplayOrigin : EBPoint := EBZeroPoint storedBy .stringForPinNumberDisplayOrigin ;
#  attribute pinNameDisplayOrigin : EBPoint := EBZeroPoint storedBy .stringForPinNameDisplayOrigin ;
#} {
#  transient displayPinName : boolean observe .pinNameIsDisplayedInSchematics ;
#
#  shape symbolPinShape : PMSymbolPinShape [
#   .origin,
#   PMSymbolPreferences.root.symbolColor,
#   PMSymbolPreferences.root.drawingWidthMultipliedByTen,
#   PMGeneralPreferences.root.selectionHiliteColor,
#   PMGeneralPreferences.root.hiliteWidthMultipliedByTen
#  ] ;
#
#  shape pinNumberDisplay : PMSymbolPinNumberShape [
#   PMSymbolPreferences.root.pinNameFont,
#   .pinNumberDisplayOrigin,
#   .pinNumberDisplayAlignment,
#   PMGeneralPreferences.root.selectionHiliteColor,
#   PMGeneralPreferences.root.hiliteWidthMultipliedByTen
#  ] ;
#
#  shape symbolNameShape : PMSymbolPinNameShape [
#    .pinName,
#    .pinNameIsDisplayedInSchematics,
#    PMSymbolPreferences.root.pinNameFont,
#    .pinNameDisplayOrigin,
#    .pinNameDisplayAlignment,
#    PMGeneralPreferences.root.selectionHiliteColor,
#    PMGeneralPreferences.root.hiliteWidthMultipliedByTen
#  ] ;
#
#  onMouseDraggedForCreation .origin := mouseDraggedEBLocationInGrid ;
#  onMouseDraggedForCreation .pinNumberDisplayOrigin := offsetEBPoint (mouseDraggedEBLocationInGrid, EBMakeSize (0, 2286 * 100)) ; # 100 mil above
#  onMouseDraggedForCreation .pinNameDisplayOrigin := offsetEBPoint (mouseDraggedEBLocationInGrid, EBMakeSize (0, 0 - 2286 * 100)) ; # 100 mil below
#
#  translate .origin ;
#  translate .pinNumberDisplayOrigin ;
#  translate .pinNameDisplayOrigin ;
#
#  knob .pinNumberDisplayOrigin style circularKnob cursor PMGeneralPreferences.upDownRightLeftCursor {
#   .pinNumberDisplayOrigin := mouseDraggedEBLocationInGrid ;
#  }
#
#  knobIf .displayPinName : .pinNameDisplayOrigin style circularKnob cursor PMGeneralPreferences.upDownRightLeftCursor {
#    .pinNameDisplayOrigin := mouseDraggedEBLocationInGrid ;
#  }
#
#  knob .origin cursor PMGeneralPreferences.upDownRightLeftCursor {
#    .origin := mouseDraggedEBLocationInGrid ;
#    .pinNumberDisplayOrigin := offsetEBPoint (.pinNumberDisplayOrigin, mouseDraggedEBDeltaInGrid) ;
#    .pinNameDisplayOrigin := offsetEBPoint (.pinNameDisplayOrigin, mouseDraggedEBDeltaInGrid) ;
#  }
#
#  geometry .origin ;
#
#  snap .origin := snappedEBPoint (.origin) ;
#  snap .pinNumberDisplayOrigin := snappedEBPoint (.pinNumberDisplayOrigin) ;
#  snap .pinNameDisplayOrigin := snappedEBPoint (.pinNameDisplayOrigin) ;
#
#  flip .origin := flippedEBPoint (.origin) ;
#  flip .pinNumberDisplayOrigin := flippedEBPoint (.pinNumberDisplayOrigin) ;
#  flip .pinNameDisplayOrigin := flippedEBPoint (. pinNameDisplayOrigin) ;
#
#  rotate .origin := rotatedEBPoint (.origin) ;
#  rotate .pinNumberDisplayOrigin := rotatedEBPoint (.pinNumberDisplayOrigin) ;
#  rotate .pinNameDisplayOrigin := rotatedEBPoint (.pinNameDisplayOrigin) ;
#}
#
##----------------------------------------------------------------------------*
#
#graphicClassForEntity TextForSymbolEntity {
#  attribute origin : EBPoint := EBZeroPoint storedBy .stringForOrigin ;
#} {
#
#  shape textShape : PMSymbolTextShape [
#    PMSymbolPreferences.root.pinNameFont,
#    .text,
#    PMSymbolPreferences.root.symbolColor,
#    .origin,
#    .displayAlignment,
#    PMGeneralPreferences.root.selectionHiliteColor,
#    PMGeneralPreferences.root.hiliteWidthMultipliedByTen
#  ] ;
#
#  onMouseDraggedForCreation .origin := mouseDraggedEBLocationInGrid ;
#
#  translate .origin ;
#
#  knob .origin style circularKnob cursor PMGeneralPreferences.upDownRightLeftCursor {
#   .origin := mouseDraggedEBLocationInGrid ;
#  }
#
#  geometry .origin ;
#
#  snap .origin := snappedEBPoint (.origin) ;
#}
#
##----------------------------------------------------------------------------*
#
#graphicClassForEntity BezierCurveForSymbolEntity {
#  attribute p1 : EBPoint := EBZeroPoint storedBy .stringForP1 ;
#  attribute p2 : EBPoint := EBZeroPoint storedBy .stringForP2 ;
#  attribute controlP1 : EBPoint := EBZeroPoint storedBy .stringForControlP1 ;
#  attribute controlP2 : EBPoint := EBZeroPoint storedBy .stringForControlP2 ;
#} {
#  shape bezierShape : PMBezierCurveShape [
#   .p1, .p2, .controlP1, .controlP2,
#   PMSymbolPreferences.root.symbolColor,
#   PMSymbolPreferences.root.drawingWidthMultipliedByTen,
#   PMGeneralPreferences.root.selectionHiliteColor,
#   PMGeneralPreferences.root.hiliteWidthMultipliedByTen,
#   PMSymbolPreferences.root.dotColorOfSymbolGrid
#  ] ;
#
#  onMouseDraggedForCreation .p1 := topLeftOfEBRect (makeEBRectFromEBPoints (mouseDownEBLocationInGrid, mouseDraggedEBLocationInGrid)) ;
#  onMouseDraggedForCreation .p2 := bottomLeftOfEBRect (makeEBRectFromEBPoints (mouseDownEBLocationInGrid, mouseDraggedEBLocationInGrid)) ;
#  onMouseDraggedForCreation .controlP1 := topRightOfEBRect (makeEBRectFromEBPoints (mouseDownEBLocationInGrid, mouseDraggedEBLocationInGrid)) ;
#  onMouseDraggedForCreation .controlP2 := bottomRightOfEBRect (makeEBRectFromEBPoints (mouseDownEBLocationInGrid, mouseDraggedEBLocationInGrid)) ;
#
#  translate .p1 ;
#  translate .p2 ;
#  translate .controlP2 ;
#  translate .controlP1 ;
#
#  knob .p1 cursor PMGeneralPreferences.upDownRightLeftCursor { .p1 := mouseDraggedEBLocationInGrid ; }
#  knob .p2 cursor PMGeneralPreferences.upDownRightLeftCursor { .p2 := mouseDraggedEBLocationInGrid ; }
#  knob .controlP2 cursor PMGeneralPreferences.upDownRightLeftCursor { .controlP2 := mouseDraggedEBLocationInGrid ; }
#  knob .controlP1 cursor PMGeneralPreferences.upDownRightLeftCursor { .controlP1 := mouseDraggedEBLocationInGrid ; }
#
#  geometry .p1 ;
#  geometry .p2 ;
#  geometry .controlP2 ;
#  geometry .controlP1 ;
#
#  snap .p1 := snappedEBPoint (.p1) ;
#  snap .p2 := snappedEBPoint (.p2) ;
#  snap .controlP2 := snappedEBPoint (.controlP2) ;
#  snap .controlP1 := snappedEBPoint (.controlP1) ;
#
#  flip .p1 := flippedEBPoint (.p1) ;
#  flip .p2 := flippedEBPoint (.p2) ;
#  flip .controlP2 := flippedEBPoint (.controlP2) ;
#  flip .controlP1 := flippedEBPoint (.controlP1) ;
#
#  rotate .p1 := rotatedEBPoint (.p1) ;
#  rotate .p2 := rotatedEBPoint (.p2) ;
#  rotate .controlP2 := rotatedEBPoint (.controlP2) ;
#  rotate .controlP1 := rotatedEBPoint (.controlP1) ;
#}
#
##----------------------------------------------------------------------------*
#
#graphicClassForEntity SegmentForSymbolEntity {
#  attribute p1 : EBPoint := EBZeroPoint storedBy .stringForP1 ;
#  attribute p2 : EBPoint := EBZeroPoint storedBy .stringForP2 ;
#} {
#  shape segmentShape : PMSegmentShape [
#   .p1, .p2,
#   PMSymbolPreferences.root.symbolColor,
#   PMSymbolPreferences.root.drawingWidthMultipliedByTen,
#   PMGeneralPreferences.root.selectionHiliteColor,
#   PMGeneralPreferences.root.hiliteWidthMultipliedByTen
#  ] ;
#
#  onMouseDraggedForCreation .p1 := mouseDownEBLocationInGrid ;
#  onMouseDraggedForCreation .p2 := pointFromEBPointsAndDirectionGridOption (mouseDownEBLocationInGrid, mouseDraggedEBLocationInGrid, NSShiftKey) ;
#
#  translate .p1 ;
#  translate .p2 ;
#
#  knob .p1 cursor PMGeneralPreferences.upDownRightLeftCursor {
#   .p1 := pointFromEBPointsAndDirectionGridOption (.p2, mouseDraggedEBLocationInGrid, NSShiftKey) ;
#  }
#  knob .p2 cursor PMGeneralPreferences.upDownRightLeftCursor {
#   .p2 := pointFromEBPointsAndDirectionGridOption (.p1, mouseDraggedEBLocationInGrid, NSShiftKey) ;
#  }
#
#  geometry .p1 ;
#  geometry .p2 ;
#
#  snap .p1 := snappedEBPoint (.p1) ;
#  snap .p2 := snappedEBPoint (.p2) ;
#
#  flip .p1 := flippedEBPoint (.p1) ;
#  flip .p2 := flippedEBPoint (.p2) ;
#
#  rotate .p1 := rotatedEBPoint (.p1) ;
#  rotate .p2 := rotatedEBPoint (.p2) ;
#}
#
##----------------------------------------------------------------------------*
#
#graphicClassForEntity FramedOvalForSymbolEntity {
#  attribute r : EBRect := EBEmptyRect storedBy .stringForRect ;
#} {
#  shape ovalShape : PMFramedOvalShape [
#   .r,
#   PMSymbolPreferences.root.symbolColor,
#   PMSymbolPreferences.root.drawingWidthMultipliedByTen,
#   PMGeneralPreferences.root.selectionHiliteColor,
#   PMGeneralPreferences.root.hiliteWidthMultipliedByTen
#  ] ;
#
#  onMouseDraggedForCreation .r := makeEBRectFromEBPoints (mouseDownEBLocationInGrid, mouseDraggedEBLocationInGrid) ;
#
#  translate .r ;
#
#  knob bottomLeftOfEBRect (.r) cursor PMGeneralPreferences.slashArrowsCursor {
#    .r := makeEBRectFromEBPoints (mouseDraggedEBLocationInGrid, topRightOfEBRect (.r)) ;
#  }
#  knob bottomRightOfEBRect (.r) cursor PMGeneralPreferences.reverseSlashArrowsCursor {
#    .r := makeEBRectFromEBPoints (mouseDraggedEBLocationInGrid, topLeftOfEBRect (.r)) ;
#  }
#  knob topLeftOfEBRect (.r) cursor PMGeneralPreferences.reverseSlashArrowsCursor {
#    .r := makeEBRectFromEBPoints (mouseDraggedEBLocationInGrid, bottomRightOfEBRect (.r)) ;
#  }
#  knob topRightOfEBRect (.r) cursor PMGeneralPreferences.slashArrowsCursor {
#    .r := makeEBRectFromEBPoints (mouseDraggedEBLocationInGrid, bottomLeftOfEBRect (.r)) ;
#  }
#
#  geometry .r ;
#
#  snap .r := snappedEBRect (.r) ;
#
#  flip .r := flippedEBRect (.r) ;
#
#  rotate .r := rotatedEBRect (.r) ;
#}
#
##----------------------------------------------------------------------------*
#
#graphicClassForEntity SolidRectForSymbolEntity {
#  attribute r : EBRect := EBEmptyRect storedBy .stringForRect ;
#} {
#  shape solidRectShape : PMSolidRectShape [
#   .r,
#   PMSymbolPreferences.root.symbolColor,
#   PMGeneralPreferences.root.selectionHiliteColor,
#   PMGeneralPreferences.root.hiliteWidthMultipliedByTen
#  ] ;
#
#  onMouseDraggedForCreation .r := makeEBRectFromEBPoints (mouseDownEBLocationInGrid, mouseDraggedEBLocationInGrid) ;
#
#  translate .r ;
#
#  knob bottomLeftOfEBRect (.r) cursor PMGeneralPreferences.slashArrowsCursor {
#    .r := makeEBRectFromEBPoints (mouseDraggedEBLocationInGrid, topRightOfEBRect (.r)) ;
#  }
#  knob bottomRightOfEBRect (.r) cursor PMGeneralPreferences.reverseSlashArrowsCursor {
#    .r := makeEBRectFromEBPoints (mouseDraggedEBLocationInGrid, topLeftOfEBRect (.r)) ;
#  }
#  knob topLeftOfEBRect (.r) cursor PMGeneralPreferences.reverseSlashArrowsCursor {
#    .r := makeEBRectFromEBPoints (mouseDraggedEBLocationInGrid, bottomRightOfEBRect (.r)) ;
#  }
#  knob topRightOfEBRect (.r) cursor PMGeneralPreferences.slashArrowsCursor {
#    .r := makeEBRectFromEBPoints (mouseDraggedEBLocationInGrid, bottomLeftOfEBRect (.r)) ;
#  }
#
#  geometry .r ;
#
#  snap .r := snappedEBRect (.r) ;
#
#  flip .r := flippedEBRect (.r) ;
#
#  rotate .r := rotatedEBRect (.r) ;
#}
#
##----------------------------------------------------------------------------*
#
#classForEntity SymbolRootEntity {
#}{
#  setObserver pinObserver observe .symbolGraphics ;
#  transient symbolStatusMessage : NSData
#     observe :pinObserver.PinForSymbolEntity.pinName, :pinObserver.PinForSymbolEntity.origin ;
#
#  transient computedStatus : integer32 observe .symbolStatusMessage ;
#  transient objectParameterForSymbolDisplay : NSObject observe .displaysShadows ;
#  transient alwaysFalse : boolean ;
#  transient signatureHexString : NSString observe .signature ;
#}
#
##----------------------------------------------------------------------------*
#
#binaryDocument PMSymbolDocument implements <EBGraphicArrayControllerDelegationProtocol> root SymbolRootEntity {
##--- Segmented Control Tab
#  outlet segmentedControl : PMSegmentedControl $selectedIndex root.selectedTab ;
#
##--- Status Signaling
#  outlet statusImageView  : PMStatusImage $statusValue root.computedStatus $binaryDataForToolTip root.symbolStatusMessage ;
#  outlet statusTextView : NSTextView $data root.symbolStatusMessage  $editable root.alwaysFalse ;
#
##--- Symbols graphics
#  controller symbolGraphicsController : PMSymbolGraphicArrayController
#    $contentSet root.symbolGraphics
#    $userObjectParameterForDisplay root.objectParameterForSymbolDisplay
#  forView .symbolView ;
#
##--- Pin Inspector
#  outlet pinInspectorView : NSView ;
#  outlet pinVisibleInSchematicsCheckBox : NSButton $value .symbolGraphicsController.selectedPinForSymbolEntity.pinNameIsDisplayedInSchematics ;
#  outlet pinNameTextField : NSTextField $value .symbolGraphicsController.selectedPinForSymbolEntity.pinName ;
#  outlet pinNumberDisplayAlignmentPopupButton : NSPopUpButton $selectedIndex .symbolGraphicsController.selectedPinForSymbolEntity.pinNumberDisplayAlignment ;
#  outlet pinNameDisplayAlignmentPopupButton : NSPopUpButton $selectedIndex .symbolGraphicsController.selectedPinForSymbolEntity.pinNameDisplayAlignment ;
#
##--- Text Inspector
#  outlet textInspectorView : NSView ;
#  outlet textValueTextField : NSTextField $value .symbolGraphicsController.selectedTextForSymbolEntity.text ;
#  outlet textDisplayAlignmentPopupButton : NSPopUpButton $selectedIndex .symbolGraphicsController.selectedTextForSymbolEntity.displayAlignment ;
#
##--- Grid Inspector
#  outlet symbolGridInspectorView : NSView ;
#  controller symbolMeasurementController : EBMeasurementController
#   $measurementUnitFactor root.symbolMeasurementUnitsFactor
#   $valueInEBUnit root.symbolGrid
#  ;
#  outlet symbolGridStylePopUpButton : NSPopUpButton $selectedIndex root.symbolGridStyle;
#  outlet symbolGridStepPopUpButton : NSPopUpButton $selectedTag root.symbolGridFactor;
#  outlet symbolGridTextField : NSTextField $value .symbolMeasurementController.valueInUnitFactor ;
#  outlet symbolMeasurementUnitsFactorPopUpButton : NSPopUpButton $selectedTag root.symbolMeasurementUnitsFactor ;
#
##--- Zoom and Flip Inspector
#  outlet symbolZoomFlipInspectorView : NSView ;
#  outlet symbolHorizontalFlipButton : NSButton $value root.symbolHorizontalFlip;
#  outlet symbolVerticalFlipButton : NSButton $value root.symbolVerticalFlip;
#
##--- Display Inspector
#  outlet displayInspectorView : NSView ;
#  outlet displaysShadowsCheckbox : NSButton $value root.displaysShadows ;
#
##--- Symbol View
#  outlet addSymbolLineButton : PMDraggingSourceButton ;
#  outlet addSymbolBezierCurveButton : PMDraggingSourceButton ;
#  outlet addSymbolCircleButton : PMDraggingSourceButton ;
#  outlet addSymbolSolidRectButton : PMDraggingSourceButton ;
#  outlet addSymbolTextButton : PMDraggingSourceButton ;
#  outlet addSymbolPinButton : PMDraggingSourceButton ;
#
##--- Matrix for Symbol Inspector
#  outlet symbolInspectorSegmentedControl : NSSegmentedControl ;
#  outlet symbolInspectorViewOutlet : NSView ;
#
#  outlet selectedObjectInspectorBaseView : NSView ;
#  outlet symbolView : EBView
#    $backgroundColor PMSymbolPreferences.root.symbolBackgroundColor
#    $gridStyle root.symbolGridStyle
#    $gridFactor  root.symbolGridFactor
#    $placementGrid root.symbolGrid
#    $displayedGridStep root.symbolGrid
#    $zoom root.symbolZoom
#    $verticalFlip root.symbolVerticalFlip
#    $horizontalFlip root.symbolHorizontalFlip
#    $measurementUnitsFactor root.symbolMeasurementUnitsFactor
#    $shouldAntialias PMGeneralPreferences.root.antiAliasing
#    $gridDotColor PMSymbolPreferences.root.dotColorOfSymbolGrid
#    $gridLineColor PMSymbolPreferences.root.lineColorOfSymbolGrid
#    inspectorView selectedObjectInspectorBaseView ;
#    inspector PinForSymbolEntity -> .pinInspectorView ;
#    inspector TextForSymbolEntity -> .textInspectorView ;
#  ;
#  outlet symbolScrollView : NSScrollView (PM_scroll_view_with_placards) ;
#
##--------------- Infos Tab
##--- Comments
#  outlet commentTextView : NSTextView $value root.comments {NSContinuouslyUpdatesValue:yes} ;
#
##--- Signature
#  outlet symbolSignatureTextField : NSTextField $value root.signatureHexString ;
#
##--- Version
#  outlet versionTextField : NSTextField $value root.versionNumber ;
#
##--- Reset
#  action resetVersionAndHistoryAction ;
#  outlet resetVersionAndHistoryButton : NSButton $run .resetVersionAndHistoryAction ;
#}
#
##----------------------------------------------------------------------------*
