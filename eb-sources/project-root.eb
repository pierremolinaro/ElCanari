#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#     P R O J E C T    R O O T
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

entity ProjectRoot {
  toMany FontInProject mFonts ;
  toMany DeviceInProject mDevices ;
  toMany ComponentInProject mComponents ;
  toMany NetClassInProject mNetClasses ;

  property Int mSelectedPageIndex default 0 ;
  
  transient StringArray deviceNames dependsFrom self.mDevices.all.mDeviceName ;
}
  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   Font
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

entity FontInProject {
  property String mFontName default "" ;
  property Int mFontVersion default 0 ;
  property String mDescriptiveString default "" ;
  
  
  transient String versionString dependsFrom self.mFontVersion ;
  transient String sizeString dependsFrom self.mDescriptiveString ;
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   Device
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

entity DeviceInProject {
  property String mDeviceName default "" ;
  property String mPrefix default "" ;
  property Int mDeviceVersion default 0 ;
  property Data mDeviceFileData default empty ;

  toMany DevicePackageInProject mPackages ;
  toMany DeviceSymbolInstanceInProject mSymbols ;
  toMany ComponentInProject mComponents inverse toOne mDevice ;
  toMany DevicePadAssignmentInProject mPadAssignments ;

  transient String versionString dependsFrom self.mDeviceVersion ;
  transient String sizeString dependsFrom self.mDeviceFileData ;
  transient Bool canExport dependsFrom self.mDeviceFileData ;
  transient Bool canRemove dependsFrom self.mComponents.count ;
  transient StringArray packageNames dependsFrom self.mPackages.all.mPackageName ;
  transient TwoStringArray symbolNames dependsFrom self.mSymbols.all.pinQualifiedNames ;
  transient ThreeStringArray pinPadAssignments dependsFrom self.mPadAssignments.all.pinPadAssignment ;
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

entity DevicePackageInProject {
  toMany DeviceMasterPadInProject mMasterPads ;

  property String mPackageName default "" ;
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

entity DeviceMasterPadInProject {
  toMany DeviceSlavePadInProject mSlavePads ;

  property Int mCenterX default 0 ;
  property Int mCenterY default 0 ;
  property Int mWidth default 114_300 ;
  property Int mHeight default 228_600 ;
  property Int mHoleDiameter default 57_150 ;
  property PadShape mShape default octo ;
  property PadStyle mStyle default traversing ;
  property  String mName default "" ;
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

entity DeviceSlavePadInProject {
  property Int mCenterX default 0 ;
  property Int mCenterY default 0 ;
  property Int mWidth default 114_300 ;
  property Int mHeight default 228_600 ;
  property Int mHoleDiameter default 57_150 ;
  property PadShape mShape default octo ;
  property SlavePadStyle mStyle default traversing ;
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

entity DeviceSymbolInstanceInProject {
  toOne DeviceSymbolTypeInProject mSymbolType ;
  toMany DevicePinInProject mPins ;

  transient TwoStringArray pinQualifiedNames dependsFrom self.mPins.all.pinQualifiedName ;
  
  transient String symbolTypeName dependsFrom self.mSymbolType.one.mSymbolTypeName ;
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

entity DeviceSymbolTypeInProject {
  property String mSymbolTypeName default "" ;
  
  property NSBezierPath mStrokeBezierPath default empty ;
  property NSBezierPath mFilledBezierPath default empty ;
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

entity DevicePinInProject {
  property String mPinName default "" ;
  property String mSymbolInstanceName default "" ;

  property Int mPinX default 0 ;
  property Int mPinY default 0 ;

  property Int mXName default 0 ;
  property Int mYName default 0 ;

  property HorizontalAlignment mNameHorizontalAlignment default center ;
  property Bool mPinNameIsDisplayedInSchematics default yes ;

  property Int mXNumber default 0 ;
  property Int mYNumber default 0 ;
  property HorizontalAlignment mNumberHorizontalAlignment default center ;

  transient PinQualifiedNameStruct pinQualifiedName dependsFrom self.mSymbolInstanceName, self.mPinName ;
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

entity ComponentInProject {
  toOne DeviceInProject mDevice inverse toMany mComponents ;
  toOne DevicePackageInProject mSelectedPackage ;
  
  property String mNamePrefix default "" ;
  property Int mNameIndex default 0 ;
  property String mComponentValue default "" ;
  
  transient String componentName dependsFrom self.mNamePrefix, self.mNameIndex ;
  transient String deviceName dependsFrom self.mDevice.one.mDeviceName ;
  transient String selectedPackageName dependsFrom self.mSelectedPackage.one.mPackageName ;
  
  transient StringArray availablePackages dependsFrom self.mDevice.one.packageNames ;
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

entity DevicePadAssignmentInProject {
  property String mPadName default "" ;
  toOne DevicePinInProject mPin ; # Is nil if pad is NC

  transient ThreeStrings pinPadAssignment dependsFrom self.mPadName, self.mPin.one.mSymbolInstanceName, self.mPin.one.mPinName ;
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   Net class
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

entity NetClassInProject {
  property String mNetClassName default "Default" ;
  property NSColor mNetClassColor default brown ;
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#  transient moreThanOneNetClass : boolean observe .netClasses ;
#  transient noAttachedArtworkFile : boolean observe .artworkFileName ;
#  transient alwaysFalse : boolean ;
#  transient moreThanOneSheet : boolean observe .sheets ;
#
#  objectObserver selectedSheetObserver observe .selectedSheet ;
#  transient sheetCanBeMovedDown : boolean observe :selectedSheetObserver.SheetEntity.sheetIndex ;
#  transient sheetCanBeMovedUp : boolean observe :selectedSheetObserver.SheetEntity.sheetIndex, .sheets ;
#
#  setObserver sheetObserver observe .sheets ;
#  transient boardUnsignedParameters : integer32 observe
#    .showComponentSidePadInBoard, .showSolderSidePadInBoard,
#    .showPadNumberInBoard, .showComponentSideRestrictRectangles,
#    .showSolderSideRestrictRectangles, .showComponentSideLegend, 
#    .showComponentSideLayout, .showSolderSideLayout, .showSolderSideLegend,
#    .boardLineWidth, .showBoardLimits, .boardClearance,
#    PMBoardPreferences.root.boardLimitsColor, .showBoardClearance,
#    PMBoardPreferences.root.errorBackgroundColor, PMBoardPreferences.root.warningBackgroundColor,
#    PMBoardPreferences.root.drawErrorBackground, PMBoardPreferences.root.drawWarningBackground
#  ;
#
#  setObserver symbolObserver observe .symbolsInProject ;
#
#  transient hasSymbolsToInsertInSchematics : boolean observe :symbolObserver.SymbolInProjectEntity.sheet ; 
#
#  transient sheetArray : NSArray observe
#    :sheetObserver.SheetEntity.sheetErrorCount,
#    :sheetObserver.SheetEntity.sheetWarningCount,
#    :sheetObserver.SheetEntity.sheetTitleWithIndex
#  ;
#
#  setObserver componentObserver observe .components ;
#  transient componentArray : NSArray observe
#    :componentObserver.ComponentInProjectEntity.projectForBoardGraphics,
#    :componentObserver.ComponentInProjectEntity.componentName
#  ;
#
#  transient componentSelectedPackageNameArray : NSArray observe
#    :componentObserver.ComponentInProjectEntity.selectedPackageName,
#    :componentObserver.ComponentInProjectEntity.isNotPlacedOnBoard
#  ;
#
#  transient stringForRenamingNetIsValid : boolean observe .stringForRenamingNet ;
#  transient buttonTitleForRenamingNet : NSString observe .stringForRenamingNet ;
#  transient errorMessageForRenamingNet : NSString observe .stringForRenamingNet ;
#
#  setObserver boardGraphicsObserver observe .boardGraphics ;
#
#  setObserver netObserver observe .nets ;
#  transient onePinNetCount : integer32 observe
#    :netObserver.NetEntity.connectedPinsCount
#  ;
#
#  transient netNameArray : NSArray observe :netObserver.NetEntity.netName ;
#
#  transient availableDevicesMenuItems : NSArray observe .devicesInLibrary ;
# 
#  transient numberOfPackageToInsertTitle : NSString observe :componentObserver.ComponentInProjectEntity.isNotPlacedOnBoard ;
#
#  transient numberOfSymbolsToInsertTitle : NSString observe :symbolObserver.SymbolInProjectEntity.isNotPlacedOnSchematics ;
#
#  transient boardStatusDictionary : NSDictionary observe
#    :componentObserver.ComponentInProjectEntity.triggerForErrorAndWarningsInBoard,
#    :boardGraphicsObserver.TrackInBoardEntity.triggerForErrorAndWarningsInBoard,
#    :symbolObserver.SymbolInProjectEntity.triggerForErrorAndWarningsInBoard ;
#
#  transient errorCountInBoard : integer32 observe .boardStatusDictionary ; 
#  transient errorCountInBoardString : NSString observe .errorCountInBoard ; 
#  transient errorMessageInBoardString : NSString observe .errorCountInBoard ; 
#
#  transient warningCountInBoard : integer32 observe .boardStatusDictionary ; 
#  transient warningCountInBoardString : NSString observe .warningCountInBoard ;
#  transient warningMessageInBoardString : NSString observe .warningCountInBoard ;
#
#  transient schematicsStatus : integer32 observe .sheetArray, :symbolObserver.SymbolInProjectEntity.isNotPlacedOnSchematics, .onePinNetCount ;
#  transient schematicsStatusToolTipString : NSString observe .schematicsStatus ;
#
#  transient boardStatus : integer32 observe
#    .warningCountInBoard,
#    .errorCountInBoard,
#    :componentObserver.ComponentInProjectEntity.isNotPlacedOnBoard
#  ;
#
#  transient boardStatusToolTipString : NSString observe .boardStatus ;
#
#  transient designRuleCheckStatusCode : integer32 observe .boardStatus, .artworkFileName, .designRuleCheckStatus ;
#
#  transient designRuleCheckToolTipString : NSString observe .designRuleCheckStatusCode ;
#
#  transient segmentCountString : NSString observe :boardGraphicsObserver.TrackInBoardEntity.p1 ;
# 
#  transient traceLength : integer32 observe :boardGraphicsObserver.TrackInBoardEntity.p1, :boardGraphicsObserver.TrackInBoardEntity.p2 ;
# 
#  transient viaCountString : NSString observe :boardGraphicsObserver.ConnectorInBoardEntity.isVia ;
#
#  transient horizontalDensityDictionary : NSDictionary observe .showHorizontalDensity, .boardStatusDictionary ;
#
#  transient verticalDensityDictionary : NSDictionary observe .showVerticalDensity, .boardStatusDictionary ;
#
#  transient rastnest : NSBezierPath observe
#    .showRastnest,
#    .boardStatusDictionary,
#    .selectedNetForShowingRastnest,
#    :boardGraphicsObserver.PassingPointInBoardEntity.location,
#    :boardGraphicsObserver.PassingPointInBoardEntity.net
#  ;
#
#  transient componentCountString : NSString observe .components ;
#
#  transient netCountString : NSString observe .nets ;
#
#  transient schematicsSheetNumberingString : NSString observe
#    :selectedSheetObserver.SheetEntity.sheetIndex,
#    .sheets
#  ;
#  
#  transient paperCustomSizeTextFieldEnabled : boolean observe .schematicsPaperSizeChoice ;
#}

#----------------------------------------------------------------------------*

#classForEntity PinForSymbolTypeInProjectEntity {
#  attribute origin : EBPoint := EBZeroPoint storedBy .stringForOrigin ;
#  attribute pinNumberDisplayOrigin : EBPoint := EBZeroPoint storedBy .stringForPinNumberDisplayOrigin ;
#  attribute pinNameDisplayOrigin : EBPoint := EBZeroPoint storedBy .stringForPinNameDisplayOrigin ;
#}{
#
#}

#----------------------------------------------------------------------------*

#classForEntity TextForSymbolInProjectEntity {
#  attribute origin : EBPoint := EBZeroPoint storedBy .stringForOrigin ;
#}{
#}
#
#----------------------------------------------------------------------------*

#classForEntity SymbolTypeInProjectEntity {
#  attribute strokeBezierPath : NSBezierPath := nil storedBy .stringForStrokeBezierPath ;
#  attribute filledBezierPath : NSBezierPath := nil storedBy .stringForFilledBezierPath ;
#}{
#  transient instanceCount : integer32 observe .instances ;
#  transient hasNoInstance : boolean observe .instances ;
#
#  setObserver textsObserver observe .texts ;
#
#  transient textArray : NSArray observe
#    :textsObserver.TextForSymbolInProjectEntity.text
#  ;
#}

#----------------------------------------------------------------------------*

#classForEntity SymbolInstanceInProjectEntity {
#}{
#  objectObserver symbolTypeObserver observe .symbolType ;
#
##--- Symbol Type Name
#  transient symbolTypeName : NSString observe :symbolTypeObserver.SymbolTypeInProjectEntity.symbolTypeName ;
#  transient strokeBezierPathForSymbol : NSBezierPath observe :symbolTypeObserver.SymbolTypeInProjectEntity.strokeBezierPath ;
#  transient filledBezierPathForSymbol : NSBezierPath observe :symbolTypeObserver.SymbolTypeInProjectEntity.filledBezierPath ;
#  transient textArray : NSArray observe :symbolTypeObserver.SymbolTypeInProjectEntity.textArray ;
#}

#----------------------------------------------------------------------------*

#classForEntity PinPadDeviceInProjectEntity {
#}{
#  objectObserver pinForSymbolObserver observe .symbolPin ;
#  transient pinName : NSString observe :pinForSymbolObserver.PinForSymbolTypeInProjectEntity.pinName ;
#
#  objectObserver symbolInstanceObserver observe .symbol ;
#  transient symbolName : NSString observe :symbolInstanceObserver.SymbolInstanceInProjectEntity.symbolInstanceName ;
#
#  objectObserver representantObserver observe .padRepresentant ;
#  transient padQualifiedName : NSString observe :representantObserver.PadRepresentantInProjectEntity.padQualifiedName ;
#}

#----------------------------------------------------------------------------*

#classForEntity PadRepresentantInProjectEntity {
#}{
#  transient padQualifiedName : NSString observe .zoneName, .padNumber ;
#
#  objectObserver pinPadDeviceObserver observe .pin ;
#  transient pinName : NSString observe :pinPadDeviceObserver.PinPadDeviceInProjectEntity.pinName ;
#  transient symbolName : NSString observe :pinPadDeviceObserver.PinPadDeviceInProjectEntity.symbolName ;
#}

#----------------------------------------------------------------------------*

#classForEntity MasterPadInProjectEntity {
#  attribute padCenter : EBPoint := EBZeroPoint storedBy .stringForCenter ;
#  attribute padSize : EBSize := 118872:228600 storedBy .stringForPadSize ;
#}{
#  
#  objectObserver padRepresentantObserver observe .representant ;
#  transient padQualifiedName : NSString observe
#   :padRepresentantObserver.PadRepresentantInProjectEntity.padQualifiedName ;
#}

#----------------------------------------------------------------------------*

#classForEntity SlavePadInProjectEntity {
#  attribute padCenter : EBPoint := EBZeroPoint storedBy .stringForCenter ;
#  attribute padSize : EBSize := 118872:228600 storedBy .stringForPadSize ;
#}{
#  objectObserver masterPadObserver observe .masterPad ;
#  transient padQualifiedName : NSString observe :masterPadObserver.MasterPadInProjectEntity.padQualifiedName ;
#}

#----------------------------------------------------------------------------*

#classForEntity PackageTypeInProjectEntity {
#  attribute strokeBezierPath : NSBezierPath := nil storedBy .stringForStrokeBezierPath ;
#  attribute arrayOfFilledBezierPathForComponentSidePads : NSArray := nil storedBy .dataForArrayOfFilledBezierPathForComponentSidePads ;
#  attribute arrayOfFilledBezierPathForSolderSidePads : NSArray := nil storedBy .dataForArrayOfFilledBezierPathForSolderSidePads ;
#  attribute relativeOrigin : EBPoint := EBZeroPoint storedBy .stringForRelativeOrigin ;
#}{
#  setObserver padObserver observe .pads ;
#
#  transient firstPadLocation : EBPoint observe :padObserver.MasterPadInProjectEntity.padCenter ;
#
#  transient padArray : NSArray observe .firstPadLocation,
#   :padObserver.MasterPadInProjectEntity.padQualifiedName ;
#
##--- The array of bezier paths that are filled for drawing component side pads
#  transient filledBezierPathForComponentSidePadsArray : NSArray observe .pads ;
##--- The array of bezier paths that are filled for drawing solder side pads
#  transient filledBezierPathForSolderSidePadsArray : NSArray observe .pads ;
#
#  action editPackageTypeAction ;
#  action resetPackageTypeVersionAction ;
#}

#----------------------------------------------------------------------------*

#graphicClassForEntity NCConnectionPointEntity {
#}{
#  objectObserver pinPadObserver observe .pinInProject ;
#
#  transient absoluteNSLocation : NSPoint observe :pinPadObserver.PinInProjectPadInBoardEntity.pinInSchematicsAbsoluteNSLocation ;
#  transient symbolDirection : integer32 observe :pinPadObserver.PinInProjectPadInBoardEntity.symbolDirection ;
#  
#  transient absoluteDirection : integer32 observe .symbolDirection , .relativeDirection ;
#
#  shape ncShape : PMNCShape [
#   .absoluteNSLocation,
#   .absoluteDirection,
#   PMSchematicPreferences.root.connectionColor,
#   PMSchematicPreferences.root.symbolDrawingWidthMultipliedByTen,
#   PMGeneralPreferences.root.selectionHiliteColor,
#   PMGeneralPreferences.root.hiliteWidthMultipliedByTen,
#   PMSymbolPreferences.root.pinNameFont
#  ] ;
#
#  geometry .absoluteNSLocation ;
#
#  rotate .relativeDirection := rotatedDirection (.relativeDirection) ;
#}

#----------------------------------------------------------------------------*

#classForEntity PinInProjectPadInBoardEntity {
#  attribute padLocation : EBPoint := EBZeroPoint storedBy .stringForPadLocation ;
#}{
#  objectObserver pointObserver observe .pointInSheet ;
#  transient isConnected : boolean observe :pointObserver.PointInSheetEntity.connectionKind ;
#
#  objectObserver netObserver observe .net ;
#  objectObserver symbolInProjectObserver observe .symbol ;
#
#  transient geometricNSCenterOfSymbol : NSPoint observe :symbolInProjectObserver.SymbolInProjectEntity.geometricCenterOfSymbol ;
#  transient symbolDirection : integer32 observe :symbolInProjectObserver.SymbolInProjectEntity.direction ;
#
#  objectObserver pinObserver observe .pinInProject ;
#
#  transient pinName : NSString observe :pinObserver.PinPadDeviceInProjectEntity.pinName ;
#  transient padString : NSString observe :pinObserver.PinPadDeviceInProjectEntity.padQualifiedName ;
#
#  transient fullPinNameForSchematics : NSString observe
#    .pinName,
#    :symbolInProjectObserver.SymbolInProjectEntity.symbolInstanceName,
#    :symbolInProjectObserver.SymbolInProjectEntity.componentName
#  ;
#
#  transient netName : NSString observe :netObserver.NetEntity.netName ;
#
#  transient pinInSchematicsAbsoluteNSLocation : NSPoint observe .geometricNSCenterOfSymbol, .symbolDirection ;
#
#  action pinDidMoveAction observe .geometricNSCenterOfSymbol, .symbolDirection ;
#}

#----------------------------------------------------------------------------*

#graphicClassForEntity SymbolInProjectEntity {
#  attribute originForComponentValueString : EBPoint := EBZeroPoint storedBy .stringForOriginForComponentValueString ;
#  attribute originForComponentNameString : EBPoint := EBZeroPoint storedBy .stringForOriginForComponentNameString ;
#  attribute geometricCenterOfSymbol : EBPoint := EBZeroPoint storedBy .stringForGeometricCenterOfSymbol ;
#} {
#  objectObserver componentObserver observe .component ;
#  objectObserver symbolInstanceObserver observe .symbolInstanceInDevice ;
#
#  transient componentName : NSString observe :componentObserver.ComponentInProjectEntity.componentName ;
#  transient componentValue : NSString observe :componentObserver.ComponentInProjectEntity.componentValue ;
#
#  transient strokeBezierPathForSymbol : NSBezierPath observe :symbolInstanceObserver.SymbolInstanceInProjectEntity.strokeBezierPathForSymbol ;
#  transient filledBezierPathForSymbol : NSBezierPath observe :symbolInstanceObserver.SymbolInstanceInProjectEntity.filledBezierPathForSymbol ;
#  transient textArray : NSArray observe :symbolInstanceObserver.SymbolInstanceInProjectEntity.textArray ;
#
#  transient geometricNSCenterOfSymbol : NSPoint observe .geometricCenterOfSymbol ;
#
#  transient symbolInstanceName : NSString observe :symbolInstanceObserver.SymbolInstanceInProjectEntity.symbolInstanceName ;
#  transient symbolTypeName : NSString observe :symbolInstanceObserver.SymbolInstanceInProjectEntity.symbolTypeName ;
#  
#  transient nameForUnplacedSymbolTableView : NSString observe .componentName, .symbolInstanceName, .componentValue ;
#
#  transient componentNameWithSymbolName : NSString observe .componentName, .symbolInstanceName ;
#
#  transient isNotPlacedOnSchematics : boolean observe .sheet ;
#  transient isNotPlacedOnBoard : boolean observe :componentObserver.ComponentInProjectEntity.isNotPlacedOnBoard ;
#
##--- The pin array
#  setObserver pinObserver observe .pins ;
#  transient pinInstanceArray : NSArray observe
#   :pinObserver.PinInProjectPadInBoardEntity.pinName,
#   :pinObserver.PinInProjectPadInBoardEntity.isConnected,
#   :pinObserver.PinInProjectPadInBoardEntity.padString ;
#
#  transient triggerForErrorAndWarningsInBoard : boolean observe
#   :pinObserver.PinInProjectPadInBoardEntity.net
#  ;
#
#  shape symbolShape : PMSymbolInSchematicsShape [
#    .geometricCenterOfSymbol,
#    .direction,
#    PMSchematicPreferences.root.symbolColor,
#    .isNotPlacedOnBoard,
#    PMSchematicPreferences.root.symbolColorForUnplacedComponents,
#    .textArray,
#    .strokeBezierPathForSymbol,
#    PMSchematicPreferences.root.symbolDrawingWidthMultipliedByTen,
#    .filledBezierPathForSymbol,
#    PMGeneralPreferences.root.selectionHiliteColor,
#    PMGeneralPreferences.root.hiliteWidthMultipliedByTen,
#    .pinInstanceArray,
#    PMSchematicPreferences.root.pinNameColor,
#    PMSchematicPreferences.root.pinNameFont,
#    PMSchematicPreferences.root.pinNumberColor,
#    PMSchematicPreferences.root.pinNumberFont
#  ] ;
#
#  shape valueShape : PMComponentValueInSchematicsShape [
#    .componentValue,
#    .componentValueIsVisible,
#    PMSymbolPreferences.root.pinNameFont,
#    .originForComponentValueString,
#    PMGeneralPreferences.root.selectionHiliteColor,
#    PMGeneralPreferences.root.hiliteWidthMultipliedByTen
#  ] ;
#
#  shape nameShape : PMComponentNameInSchematicsShape [
#    .componentNameWithSymbolName,
#    PMSymbolPreferences.root.pinNameFont,
#    .originForComponentNameString,
#    PMGeneralPreferences.root.selectionHiliteColor,
#    PMGeneralPreferences.root.hiliteWidthMultipliedByTen
#  ] ;
#
#  translate .geometricCenterOfSymbol ;
#  translate .originForComponentValueString ;
#  translate .originForComponentNameString ;
#
#  onMouseDraggedForCreation .geometricCenterOfSymbol := mouseDraggedEBLocationInGrid ;
#  onMouseDraggedForCreation .direction := 0 ;
#  onMouseDraggedForCreation .originForComponentValueString :=
#    offsetEBPoint (mouseDraggedEBLocationInGrid, EBMakeSize (228600, 228600)) ;
#  onMouseDraggedForCreation .originForComponentNameString :=
#    offsetEBPoint (mouseDraggedEBLocationInGrid, EBMakeSize (457200, 457200)) ;
#
#  knobIf .componentValueIsVisible : .originForComponentValueString style circularKnob cursor PMGeneralPreferences.upDownRightLeftCursor {
#    .originForComponentValueString := mouseDraggedEBLocationInGrid ;
#  }
#
#  knob .originForComponentNameString style circularKnob cursor PMGeneralPreferences.upDownRightLeftCursor {
#    .originForComponentNameString := mouseDraggedEBLocationInGrid ;
#  }
#
#  knob .geometricCenterOfSymbol cursor PMGeneralPreferences.upDownRightLeftCursor {
#    .geometricCenterOfSymbol := mouseDraggedEBLocationInGrid ;
#    .originForComponentValueString := offsetEBPoint (.originForComponentValueString, mouseDraggedEBDelta) ;
#    .originForComponentNameString := offsetEBPoint (.originForComponentNameString, mouseDraggedEBDelta) ;
#  }
#
#  geometry .geometricCenterOfSymbol ;
#
#  rotate .originForComponentValueString := rotatedEBPoint (.originForComponentValueString) ;
#  rotate .originForComponentNameString := rotatedEBPoint (.originForComponentNameString) ;
#  rotate .geometricCenterOfSymbol := rotatedEBPoint (.geometricCenterOfSymbol) ;
#  rotate .direction := rotatedDirection (.direction) ;
#
#  action componentNameOrComponentValueDidChangeAction observe .componentName, .componentValue ;
#
#  transient triggerSchematicsStatus : boolean observe
#   .geometricCenterOfSymbol,
#   .direction,
#   :pinObserver.PinInProjectPadInBoardEntity.ncPoint
#  ;
#}

#----------------------------------------------------------------------------*

#classForEntity NetEntity {
#}{
#  objectObserver netClassObserver observe .netClass ;
#  transient netClassTrackWidth : integer32 observe :netClassObserver.NetClassEntity.netClassTrackWidth ;
#  transient netClassName : NSString observe :netClassObserver.NetClassEntity.netClassName ;
#  transient netClassColor : NSColor observe :netClassObserver.NetClassEntity.netClassColor ;
#  transient netClassViaHoleDiameter : integer32 observe :netClassObserver.NetClassEntity.netClassViaHoleDiameter ;
#  transient netClassViaPadDiameter : integer32 observe :netClassObserver.NetClassEntity.netClassViaPadDiameter ;
#
#  setObserver pinObserver observe .padsInBoard ;
#  transient connectedPinsCountString : NSString observe :pinObserver.PinInProjectPadInBoardEntity.fullPinNameForSchematics ;
#  transient connectedPinsCount : integer32 observe :pinObserver.PinInProjectPadInBoardEntity.fullPinNameForSchematics ;
#}

#----------------------------------------------------------------------------*

#outletClass PMSchematicsView : EBView {
#  binding $schematicsTitle : NSString ;
#  binding $schematicsSheetTitle : NSString ;
#  binding $schematicsSheetNumber : NSString ;
#  binding $schematicsVersion : NSString ;
#  binding $schematicsDate : NSDate ;
#  binding $schematicsStatusDictionary : NSDictionary ;
#}

#----------------------------------------------------------------------------*

#outletClass PMBoardView : EBView {
#  binding $showBoardLimits : boolean ;
#  binding $showBoardClearance : boolean ;
#  binding $boardLineWidth : integer32 ;
#  binding $boardWidth : integer32 ;
#  binding $boardHeight : integer32 ;
#  binding $boardClearance : integer32 ;
#  binding $boardLimitsColor : NSColor ;
#  binding $boardSideClearanceColor : NSColor ;
#  binding $errorColor : NSColor ;
#  binding $warningColor : NSColor ;
#  binding $boardStatusDictionary : NSDictionary ;
#  binding $horizontalDensityDictionary : NSDictionary ;
#  binding $verticalDensityDictionary : NSDictionary ;
#  binding $radiusOfWarningOrErrorOvals : integer32 ;
#  binding $horizontalDensityDisplayTransparency : double ;
#  binding $verticalDensityDisplayTransparency : double ;
#  binding $rastnest : NSBezierPath ;
#}

#----------------------------------------------------------------------------*

#classForEntity NetClassEntity {
#  attribute netClassColor : NSColor := blueColor storedBy .dataForNetClassColor ;
#}{
#  transient wireCountString : NSString observe .nets ;
#  transient canBeRemoved : boolean observe .nets ;
#  action netClassTrackWidthInDisplayUnitDidChangeAction observe .netClassTrackWidthInDisplayUnit ;
#  action netClassViaHoleDiameterInDisplayUnitDidChangeAction observe .netClassViaHoleDiameterInDisplayUnit ;
#  action netClassViaPadDiameterInDisplayUnitDidChangeAction observe .netClassViaPadDiameterInDisplayUnit ;
#  action displayUnitDidChangeAction observe .displayUnit ;
#}

#----------------------------------------------------------------------------*

#graphicClassForEntity ComponentInProjectEntity {
##--- Package Origin
#  attribute origin : EBPoint := EBZeroPoint storedBy .stringForOrigin ;
##--- Component Name Origin
#  attribute componentNameOrigin : EBPoint := EBZeroPoint storedBy .stringForOriginForComponentName ;
##--- Component Value Origin
#  attribute componentValueOrigin : EBPoint := EBZeroPoint storedBy .stringForOriginForComponentValue ;
#} {
##--- Observers
#  objectObserver selectedPackageObserver observe .usedPackage ;
#  objectObserver deviceObserver observe .device ;
#
#  transient componentName : NSString observe .actualPrefix, .actualIndex ;
#  transient deviceName : NSString observe :deviceObserver.DeviceInProjectEntity.deviceName ;
#  transient componentNameForInsertionTableView : NSString observe .componentName, .componentValue, .deviceName ;
#
#  transient triggerForErrorAndWarningsInBoard : boolean observe .usedPackage, .origin, .rotationInDegrees ;
#
##--- is placed in board
#  transient isNotPlacedOnBoard : boolean observe .projectForBoardGraphics ;
#
##--- The bezier path that is stroke for drawing legend
#  transient strokeBezierPathForLegend : NSBezierPath observe :selectedPackageObserver.PackageTypeInProjectEntity.strokeBezierPath ;
##--- The array of bezier paths that are filled for drawing component side pads
#  transient filledBezierPathForComponentSidePadsArray : NSArray observe :selectedPackageObserver.PackageTypeInProjectEntity.filledBezierPathForComponentSidePadsArray ;
##--- The array of bezier paths that are filled for drawing solder side pads
#  transient filledBezierPathForSolderSidePadsArray : NSArray observe :selectedPackageObserver.PackageTypeInProjectEntity.filledBezierPathForSolderSidePadsArray ;
##--- The array of NSValued'ed PadStruct that represent the pad centers and index
#  transient padArray : NSArray observe
#   :selectedPackageObserver.PackageTypeInProjectEntity.firstPadLocation,
#   :selectedPackageObserver.PackageTypeInProjectEntity.padArray ;
##--- The package name
#  transient selectedPackageName : NSString observe :selectedPackageObserver.PackageTypeInProjectEntity.packageTypeName ;
##--- Is in board string
#  transient isInBoardString : NSString observe .projectForBoardGraphics ;
##--- symbols in schematics string
#  setObserver symbolObserver observe .symbols ;
#  transient symbolsInSchematicsString : NSString observe :symbolObserver.SymbolInProjectEntity.sheet ;
##--- Component Name Bezier Path
#  transient componentNameBezierPath : NSBezierPath observe
#    .componentNameOrigin, .fontForComponentName, .fontSizeForComponentName, .componentName ;
##--- Component Value Bezier Path
#  transient componentValueBezierPath : NSBezierPath observe
#    .componentValueOrigin, .fontForComponentValue, .fontSizeForComponentValue, .componentValue ;
#
#  transient firstPadLocation : EBPoint observe :selectedPackageObserver.PackageTypeInProjectEntity.firstPadLocation ;
#
#  action updatePadLocationAction observe .origin, .rotationInDegrees, :selectedPackageObserver.PackageTypeInProjectEntity.padArray ;
#
#  shape packageShape : PMPackageInBoardShape [
#    .origin,
#    .firstPadLocation,
#    .rotationInDegrees,
#    .padArray,
#    PMBoardPreferences.root.padNumberFont,
#    PMBoardPreferences.root.padNumberColor,
#    .strokeBezierPathForLegend,
#    PMBoardPreferences.root.packageDrawingWidthMultpliedByTen,
#    .filledBezierPathForComponentSidePadsArray,
#    .filledBezierPathForSolderSidePadsArray,
#    PMBoardPreferences.root.componentSideLegendColor,
#    PMBoardPreferences.root.solderSideLegendColor,
#    .onComponentSideInBoard,
#    PMBoardPreferences.root.componentSidePadColor,
#    PMBoardPreferences.root.solderSidePadColor,
#    PMGeneralPreferences.root.selectionHiliteColor,
#    PMGeneralPreferences.root.hiliteWidthMultipliedByTen,
#    .componentNameBezierPath,
#    .componentNameOrigin,
#    .componentNameIsVisible,
#    .componentValueBezierPath,
#    .componentValueOrigin,
#    .componentValueIsVisible,
#    .componentNameDirection,
#    .componentValueDirection
#  ] ;
#
#  geometry .origin ;
#  onMouseDraggedForCreation .origin := mouseDraggedEBLocationInGrid ;
#  onMouseDraggedForCreation .componentNameOrigin := offsetEBPoint (mouseDraggedEBLocationInGrid, EBMakeSize (228600, 228600)) ; # 100 mils
#  onMouseDraggedForCreation .componentValueOrigin := offsetEBPoint (mouseDraggedEBLocationInGrid, EBMakeSize (457200, 457200)) ; # 200 mils
#  onMouseDraggedForCreation .rotationInDegrees := 0.0 ;
#  translate .origin ;
#  translate .componentNameOrigin ;
#  translate .componentValueOrigin ;
#  snap .origin := snappedEBPoint (.origin) ;
#  rotate .rotationInDegrees := rotatedAngleInDegrees (.rotationInDegrees) ;
#
##--- Component Name Knob
#  knobIf .componentNameIsVisible : .componentNameOrigin style circularKnob cursor PMGeneralPreferences.upDownRightLeftCursor {
#    .componentNameOrigin := mouseDraggedEBLocationInGrid ;
#  }
##--- Component Value Knob
#  knobIf .componentValueIsVisible : .componentValueOrigin style circularKnob cursor PMGeneralPreferences.upDownRightLeftCursor {
#    .componentValueOrigin := mouseDraggedEBLocationInGrid ;
#  }
##--- Package Rotation Knob
#  knob pointByRotatingNSPoint (toNSPoint (.origin), 36.0, .rotationInDegrees)
#    style circularKnob cursor PMGeneralPreferences.upDownRightLeftCursor
#  {
#    .rotationInDegrees := angleInDegreesBetweenNSPoints (toNSPoint (.origin), mouseDraggedNSLocation) ;
#  }
##--- Package origin knob
#  knob .origin cursor PMGeneralPreferences.upDownRightLeftCursor {
#    .origin := mouseDraggedEBLocationInGrid ;
#    .componentNameOrigin := offsetEBPoint (.componentNameOrigin, mouseDraggedEBDelta) ;
#    .componentValueOrigin := offsetEBPoint (.componentValueOrigin, mouseDraggedEBDelta) ;
#  }
#}

#----------------------------------------------------------------------------*

#graphicClassForEntity UnifiedRestrictRectangleEntity {
#  attribute rectangle : EBRect := EBZeroRect storedBy .stringForRect ;
#} {
#
#  transient componentSideCheckboxEnabled : boolean observe .sides ;  
#  transient solderSideCheckboxEnabled : boolean observe .sides ;  
#  
#  transientWithSetter restrictRectangleOnComponentSide : boolean observe .sides ;  
#  transientWithSetter restrictRectangleOnSolderSide : boolean observe .sides ;  
#  
#  shape restrictRectShape : PMUnifiedRestrictRectangleShape [
#   .rectangle,
#   .restrictRectangleOnComponentSide,
#   .restrictRectangleOnSolderSide,
#   PMBoardPreferences.root.componentSideRestrictRectangleColor,
#   PMBoardPreferences.root.solderSideRestrictRectangleColor
#  ] ;
#
#  onMouseDraggedForCreation .rectangle := makeEBRectFromEBPoints  (mouseDownEBLocationInGrid, mouseDraggedEBLocationInGrid) ;
#
#  knob bottomLeftOfEBRect (.rectangle) cursor PMGeneralPreferences.slashArrowsCursor {
#    .rectangle := makeEBRectFromEBPoints (mouseDraggedEBLocationInGrid, topRightOfEBRect (.rectangle)) ;
#  }
#  knob bottomRightOfEBRect (.rectangle) cursor PMGeneralPreferences.reverseSlashArrowsCursor {
#    .rectangle := makeEBRectFromEBPoints (mouseDraggedEBLocationInGrid, topLeftOfEBRect (.rectangle)) ;
#  }
#  knob topLeftOfEBRect (.rectangle) cursor PMGeneralPreferences.reverseSlashArrowsCursor {
#    .rectangle := makeEBRectFromEBPoints (mouseDraggedEBLocationInGrid, bottomRightOfEBRect (.rectangle)) ;
#  }
#  knob topRightOfEBRect (.rectangle) cursor PMGeneralPreferences.slashArrowsCursor {
#    .rectangle := makeEBRectFromEBPoints (mouseDraggedEBLocationInGrid, bottomLeftOfEBRect (.rectangle)) ;
#  }
#
#  geometry .rectangle ;
#
#  translate .rectangle ;
#
#  snap .rectangle := snappedEBRect (.rectangle) ;
#
#  flip .rectangle := flippedEBRect (.rectangle) ;
#
#  rotate .rectangle := rotatedEBRect (.rectangle) ;
#}
#
##----------------------------------------------------------------------------*
#
#classForEntity DeviceInProjectEntity {
#
#}{
#  transient componentCount : integer32 observe .components ;
#  transient deviceIsNotUsed : boolean observe .components ;
#  transient fileDataNotEmpty : boolean observe .deviceFileData ;
#}
#
##----------------------------------------------------------------------------*
#
#classForEntity SheetEntity {
#
#}{
#  setObserver pointObserver observe .points ;
# 
# setObserver graphicObserver observe .graphics ;
#
#  transient sheetStatusDictionary : NSDictionary observe
#    :pointObserver.PointInSheetEntity.location,
#    :pointObserver.PointInSheetEntity.connectionKind,
#    :graphicObserver.SymbolInProjectEntity.triggerSchematicsStatus
#  ;
#
#  transient sheetWarningCount : integer32 observe .sheetStatusDictionary ;
#  transient sheetErrorCount : integer32 observe .sheetStatusDictionary ;
#  transient sheetTitleWithIndex : NSString observe .sheetIndex, .sheetTitle ;
#}
#
##----------------------------------------------------------------------------*
#
#classForEntity FontInProjectEntity {
#}{
#  transient textInBoardCount : integer32 observe .textsInBoards ;
#  transient componentNamesCount : integer32 observe .componentNames ;
#  transient componentValuesCount : integer32 observe .componentValues ;
#  transient fontIsNotUsed : boolean observe .textsInBoards, .componentNames, .componentValues ;
#
#  action editFontAction ;
#  action resetFontVersionAction ;
#
#  action fontDataDidChangeAction observe .fontCharacterDefinitionString, .fontSegmentDefinitionString ;
#}
#
##----------------------------------------------------------------------------*
#
#graphicClassForEntity PassingPointInBoardEntity {
#  attribute location : EBPoint := EBZeroPoint storedBy .stringForLocation ;
#}{
#
#  shape pointShape : PMPassingPointInBoardShape [
#    .location,
#    .side,
#    PMBoardPreferences.root.componentSidePadColor,
#    PMBoardPreferences.root.solderSidePadColor,
#    PMGeneralPreferences.root.selectionHiliteColor,
#    PMGeneralPreferences.root.hiliteWidthMultipliedByTen
#  ] ;
#  
#  translate .location ;
#
#  knob .location cursor PMGeneralPreferences.upDownRightLeftCursor {
#    .location := mouseDraggedEBLocationInGrid ;
#  }
#
#  snap .location := snappedEBPoint (.location) ;
#}
#
##----------------------------------------------------------------------------*
#
#graphicClassForEntity ConnectorInBoardEntity {
#  attribute location : EBPoint := EBZeroPoint storedBy .stringForLocation ;
#}{
#  setObserver tracksP1observer observe .tracksP1 ;
#
#  setObserver tracksP2observer observe .tracksP2 ;
#
#  transient triggerTrackLocationLock : boolean observe
#    :tracksP1observer.TrackInBoardEntity.manualPositionLockForP1,
#    :tracksP2observer.TrackInBoardEntity.manualPositionLockForP2
#  ;
#
#  transient isVia : boolean observe :tracksP1observer.TrackInBoardEntity.side, :tracksP2observer.TrackInBoardEntity.side ;
#
#  transient netName : NSString observe
#     :tracksP1observer.TrackInBoardEntity.netName,
#     :tracksP2observer.TrackInBoardEntity.netName
#  ;
#
#  transient netClassName : NSString observe :tracksP1observer.TrackInBoardEntity.netClassName, :tracksP2observer.TrackInBoardEntity.netClassName ;
#
#  transient holeDiameterFromNetClass : integer32 observe :tracksP1observer.TrackInBoardEntity.netClassViaHoleDiameter, :tracksP2observer.TrackInBoardEntity.netClassViaHoleDiameter ;
#
#  transient padDiameterFromNetClass : integer32 observe :tracksP1observer.TrackInBoardEntity.netClassViaPadDiameter, :tracksP2observer.TrackInBoardEntity.netClassViaPadDiameter ;
#
#  transient actualHoleDiameter : integer32 observe .useCustomHoleDiameter, .customHoleDiameter, .holeDiameterFromNetClass ; 
#
#  transient actualPadDiameter : integer32 observe .useCustomPadDiameter, .customPadDiameter, .padDiameterFromNetClass ; 
#
#  shape viaShape : PMViaInBoardShape [
#    .location,
#    .isVia,
#    .actualHoleDiameter,
#    .actualPadDiameter,
#    PMBoardPreferences.root.componentSidePadColor,
#    PMBoardPreferences.root.solderSidePadColor,
#    PMGeneralPreferences.root.selectionHiliteColor,
#    PMGeneralPreferences.root.hiliteWidthMultipliedByTen
#  ] ;
#}
#
##----------------------------------------------------------------------------*
#
#graphicClassForEntity TrackInBoardEntity {
#  attribute p1 : EBPoint := EBZeroPoint storedBy .stringForP1 ;
#  attribute p2 : EBPoint := EBZeroPoint storedBy .stringForP2 ;
#}{
#  objectObserver netObserver observe .net ;
#  transient netClassTrackWidth : integer32 observe :netObserver.NetEntity.netClassTrackWidth ;
#  transient netClassName : NSString observe :netObserver.NetEntity.netClassName ;
#  transient netClassViaHoleDiameter : integer32 observe :netObserver.NetEntity.netClassViaHoleDiameter ;
#  transient netClassViaPadDiameter : integer32 observe :netObserver.NetEntity.netClassViaPadDiameter ;
#  transient netName : NSString observe :netObserver.NetEntity.netName ;
#  transient hasNet : boolean observe .netName ;
#
#  action p1DidMoveAction observe .p1 ;
#
#  action p2DidMoveAction observe .p2 ;
#
#  transient directionInDegrees : double observe .p1, .p2 ;
#
#  transient noPadConnectedToP1 : boolean observe .padConnectedToP1 ;
#
#  transient noPadConnectedToP2 : boolean observe .padConnectedToP2 ;
#
#  objectObserver connectorConnectedToP1Observer observe .connectorConnectedToP1 ;
#
#  objectObserver connectorConnectedToP2Observer observe .connectorConnectedToP2 ;
#
#  transient p1OrConnectedTrackPointsAreLock : boolean observe
#    .manualPositionLockForP1,
#    :connectorConnectedToP1Observer.ConnectorInBoardEntity.triggerTrackLocationLock ;
#
#  transient p2OrConnectedTrackPointsAreLock : boolean observe
#    .manualPositionLockForP2,
#    :connectorConnectedToP2Observer.ConnectorInBoardEntity.triggerTrackLocationLock ;
#
#  transient p1CanMove : boolean observe .noPadConnectedToP1, .p1OrConnectedTrackPointsAreLock ;
#
#  transient p2CanMove : boolean observe .noPadConnectedToP2, .p2OrConnectedTrackPointsAreLock ;
#
#  transient actualTrackWidth : integer32 observe .useCustomTrackWidth, .customTrackWidth, .netClassTrackWidth ;
#
#  transient actualTrackWidthMeasurementUnit : integer32 
#    observe .useCustomTrackWidth, .customTrackWidthMeasurementUnit, .defaultTrackWidthMeasurementUnit
#  ;
#
#  shape trackShape : PMTrackInBoardShape [
#    .p1,
#    .p2,
#    .side,
#    .actualTrackWidth,
#    PMBoardPreferences.root.componentSideLayoutColor,
#    PMBoardPreferences.root.solderSideLayoutColor,
#    PMGeneralPreferences.root.selectionHiliteColor,
#    PMGeneralPreferences.root.hiliteWidthMultipliedByTen
#  ] ;
#
#  onMouseDraggedForCreation .p1 := mouseDownEBLocation ;
#  onMouseDraggedForCreation .p2 := mouseDraggedEBLocation ;
#
#  knobIf .p1CanMove : .p1 cursor PMGeneralPreferences.upDownRightLeftCursor {
#    .p1 := [.directionIsLockDuringKnobDragging
#            ? toEBPoint (pointByRotatingNSPoint (toNSPoint (.p2), distanceBetweenNSPoints (toNSPoint (.p2), mouseDraggedNSLocationInGrid), angleInDegreesBetweenNSPoints (toNSPoint (.p2), toNSPoint (.p1))))
#            : pointFromEBPointsAndDirectionGridOption (.p2, mouseDraggedEBLocationInGrid, NSShiftKey)
#           ] ;
#  }
#  knobIf .p2CanMove : .p2 cursor PMGeneralPreferences.upDownRightLeftCursor {
#    .p2 := [.directionIsLockDuringKnobDragging
#            ? toEBPoint (pointByRotatingNSPoint (toNSPoint (.p1), distanceBetweenNSPoints (toNSPoint (.p1), mouseDraggedNSLocationInGrid), angleInDegreesBetweenNSPoints (toNSPoint (.p1), toNSPoint (.p2))))
#            : pointFromEBPointsAndDirectionGridOption (.p1, mouseDraggedEBLocationInGrid, NSShiftKey)
#           ] ;
#  }
#
#  translate .p1 ;
#  translate .p2 ;
#
#  transient triggerForErrorAndWarningsInBoard : boolean observe
#    .p1, .p2,
#    .padConnectedToP1, .padConnectedToP2,
#    .connectorConnectedToP1, .connectorConnectedToP2 ;
#}
#
##----------------------------------------------------------------------------*
#
#graphicClassForEntity LineInBoardEntity {
#  attribute point1 : EBPoint := EBZeroPoint storedBy .p1 ;
#  attribute point2 : EBPoint := EBZeroPoint storedBy .p2 ;
#}{
#  onMouseDraggedForCreation .point1 := mouseDownEBLocationInGrid ;
#  onMouseDraggedForCreation .point2 := mouseDraggedEBLocationInGrid ;
#
#  knob .point1 cursor PMGeneralPreferences.upDownRightLeftCursor {
#    .point1 := mouseDraggedEBLocationInGrid ;
#  }
#
#  knob .point2 cursor PMGeneralPreferences.upDownRightLeftCursor {
#    .point2 := mouseDraggedEBLocationInGrid ;
#  }
#
#  translate .point1 ;
#  translate .point2 ;
#
#  snap .point1 := snappedEBPoint (.point1) ;
#  snap .point2 := snappedEBPoint (.point2) ;
#
#  shape lineInBoardShape : PMSegmentInBoardShape [
#    .point1,
#    .point2,
#    .side,
#    PMBoardPreferences.root.componentSideLegendColor,
#    PMBoardPreferences.root.solderSideLegendColor,
#    .width,
#    PMGeneralPreferences.root.selectionHiliteColor,
#    PMGeneralPreferences.root.hiliteWidthMultipliedByTen
#  ] ;
#
#}
#
##----------------------------------------------------------------------------*
#
#graphicClassForEntity TextInBoardEntity {
#  attribute origin : EBPoint := EBZeroPoint storedBy .stringForOrigin ;
#}{
#  transient textBezierPath : NSBezierPath observe .text, .font, .fontSize ;
#
#  shape textInBoardShape : PMTextInBoardShape [
#   .origin,
#   .direction,
#   .side,
#   .textBezierPath,
#   PMBoardPreferences.root.componentSideLegendColor,
#   PMBoardPreferences.root.componentSideLayoutColor,
#   PMBoardPreferences.root.solderSideLayoutColor,
#   PMBoardPreferences.root.solderSideLegendColor
#  ] ;
#
#  onMouseDraggedForCreation .origin := mouseDraggedEBLocationInGrid ;
#
#  knob .origin cursor PMGeneralPreferences.upDownRightLeftCursor {
#    .origin := mouseDraggedEBLocationInGrid ;
#  }
#
#  knob pointByRotatingNSPoint (toNSPoint (.origin), NSWidth (bezierPathBounds (.textBezierPath)) / 2.0, .direction)
#  style circularKnob
#  cursor PMGeneralPreferences.upDownRightLeftCursor {
#    .direction := angleInDegreesBetweenNSPoints (toNSPoint (.origin), mouseDraggedNSLocation) ;
#  }
#
#  geometry .origin ;
#
#  translate .origin ;
#
#  snap .origin := snappedEBPoint (.origin) ;
#}
#
##----------------------------------------------------------------------------*
#
#graphicClassForEntity SimpleWireEntity {
#} {
#
#  objectObserver netObserver observe .net ;
#  transient netClassColor : NSColor observe :netObserver.NetEntity.netClassColor ;
#  transient netName : NSString observe :netObserver.NetEntity.netName ;
#
#  objectObserver point1Observer observe .point1 ;
#  transient point1Location : EBPoint observe :point1Observer.PointInSheetEntity.location ;
#  transient point1ConnectionKind : integer32 observe :point1Observer.PointInSheetEntity.connectionKind ;
#
#  objectObserver point2Observer observe .point2 ;
#  transient point2Location : EBPoint observe :point2Observer.PointInSheetEntity.location ;
#  transient point2ConnectionKind : integer32 observe :point2Observer.PointInSheetEntity.connectionKind ;
#
#  shape wireShape : PMSimpleWireShape [
#    .point1Location,
#    .point1ConnectionKind,
#    .point2Location,
#    .point2ConnectionKind,
#    .netClassColor, # Wire Color
#    PMSymbolPreferences.root.drawingWidthMultipliedByTen,
#    PMGeneralPreferences.root.selectionHiliteColor,
#    PMGeneralPreferences.root.hiliteWidthMultipliedByTen
#  ] ;
#
#  transient point1CanMove : boolean observe :point1Observer.PointInSheetEntity.pointCanMove ;
#  transient point2CanMove : boolean observe :point2Observer.PointInSheetEntity.pointCanMove ;
#  
#  action renameNetFromUserAction ;
#  action insulateNetFromUserAction ;
#  action mergeNetFromUserAction ;
#}
#
##----------------------------------------------------------------------------*
#
#graphicClassForEntity SchematicLabelEntity {
#} {
#  objectObserver pointObserver observe .point ;
#  transient pointLocation : EBPoint observe :pointObserver.PointInSheetEntity.location ;
#  transient pointConnectionKind : integer32 observe :pointObserver.PointInSheetEntity.connectionKind ;
#  transient pointCanMove : boolean observe :pointObserver.PointInSheetEntity.pointCanMove ;
#
#  objectObserver netObserver observe .net ;
#  transient netName : NSString observe :netObserver.NetEntity.netName ;
#
#  shape labelShape : PMLabelShapeShape [
#    .pointLocation,
#    .direction,
#    .pointConnectionKind,
#    PMSchematicPreferences.root.symbolColor,
#    PMSymbolPreferences.root.drawingWidthMultipliedByTen,
#    PMGeneralPreferences.root.selectionHiliteColor,
#    PMGeneralPreferences.root.hiliteWidthMultipliedByTen,
#    .netName,
#    PMSymbolPreferences.root.pinNameFont
#  ] ;
#
#  geometry .pointLocation ;
#
#  rotate .direction := rotatedDirection (.direction) ;
#
#  action renameNetFromUserAction ;
#  action insulateNetFromUserAction ;
#  action mergeNetFromUserAction ;
#}
#
##----------------------------------------------------------------------------*
#
#protocol <PMDragSymbolImageFromRowProviderProtocol> {}
#
##----------------------------------------------------------------------------*
#
#protocol <PMDragPackageImageFromRowProviderProtocol> {}

#----------------------------------------------------------------------------*
