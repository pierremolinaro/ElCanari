//----------------------------------------------------------------------------------------------------------------------
//     P R O J E C T    D O C U M E N T
//----------------------------------------------------------------------------------------------------------------------

document ProjectDocument root ProjectRoot {
//--- Selected Page
  outlet CanariSegmentedControl mPageSegmentedControl $selectedPage root.mSelectedPageIndex ;
  outlet NSView mMasterView ;
  outlet CanariViewWithKeyView mComponentsPageView ;
  outlet CanariViewWithKeyView mLibraryPageView ;
  outlet CanariViewWithKeyView mSchematicsPageView ;
  outlet CanariViewWithKeyView mNetClassesPageView ;
  outlet CanariViewWithKeyView mNetListPageView ;
  outlet CanariViewWithKeyView mBoardBorderPageView ;
  outlet CanariViewWithKeyView mBoardObjectsPageView ;
  outlet CanariViewWithKeyView mProductPageView ;

//--- Issues
  outlet EBImageObserverView mSchematicStatusImageViewInToolbar
    $image root.schematicStatusImage
    $tooltip root.schematicStatusMessage
  ;

//---------------------- Components Tab
  action addComponentAction ;
  outlet EBButton mAddComponentButton $run addComponentAction ;

  outlet CanariNewComponentFromDevicePullDownButton mNewComponentFromDevicePullDownButton
    $deviceNames root.deviceNames ;

  action duplicateSelectedComponentsAction ;
  outlet EBButton mDuplicateSelectedComponentsActionButton
    $run duplicateSelectedComponentsAction
    $enabled #componentController.selectedArray.count > 0
  ;

  action removeSelectedComponentsAction ;
  outlet EBButton mRemoveSelectedComponentsActionButton
    $run removeSelectedComponentsAction
    $enabled #componentController.selectedArray.count > 0
  ;

  action changePackageOfSelectedComponentsAction ;
  transient Bool canChangePackage dependsFrom #componentController.selectedArray.all.availablePackages ;
  outlet EBButton mChangePackageOfSelectedComponentsActionButton
    $run changePackageOfSelectedComponentsAction
    $enabled self.canChangePackage
  ;
  outlet NSPanel mChangePackagePanel ;
  outlet EBPopUpButton mChangePackagePopUpButton ;
  outlet NSTextField mChangePackageComponentListTextField ;


  action changeValueOfSelectedComponentsAction ;
  outlet EBButton mChangeValueOfSelectedComponentsActionButton
    $run changeValueOfSelectedComponentsAction
    $enabled #componentController.selectedArray.count > 0
  ;
  outlet NSPanel mChangeValuePanel ;
  outlet CanariComboBox mChangeComponentValueComboxBox ;
  outlet NSTextField mChangeValueComponentListTextField ;
  outlet NSButton mChangeValueValidationButton ;


  outlet EBButton mRenameComponentButton $enabled #componentController.selectedArray.count == 1 ; // Action targeted in IB
  outlet NSPanel mRenameComponentPanel ;
  outlet NSTextField mCurrentComponentNameTextField ;
  outlet NSTextField mRenameComponentErrorMessageTextField ;
  outlet CanariComboBox mRenameComponentPrefixComboxBox ;
  outlet NSPopUpButton mRenameComponentIndexesPopUpButton ;
  outlet NSButton mRenameComponentValidationButton ;

  tableViewController #componentController {allowsEmptySelection:yes, allowsMultipleSelection:yes} root.mComponents {
     column "name" sort componentName EBTextObserverField $valueObserver self.componentName
     column "device" sort deviceName EBTextObserverField $valueObserver self.deviceName
     column "package" sort selectedPackageName EBTextObserverField $valueObserver self.selectedPackageName
     column "value" sort mComponentValue EBTextField $value self.mComponentValue { sendContinously : no }
     column "inSchematics" sort placementInSchematic EBTextObserverField $valueObserver self.placementInSchematic
     column "inBoard" sort componentIsPlacedInBoardString EBTextObserverField $valueObserver self.componentIsPlacedInBoardString
  }
  outlet EBTableView mComponentTableView $tableValue #componentController ;

  transient String componentCount dependsFrom root.mComponents.count ;
  outlet EBTextObserverField mComponentCountTextField $valueObserver self.componentCount ;

//---------------------- Net Class Tab
  tableViewController #netClassController {allowsEmptySelection:yes, allowsMultipleSelection:yes} root.mNetClasses {
    column "name" EBTextObserverField $valueObserver self.mNetClassName
    column "netcolor" EBTextObserverField $backColor self.mNetClassColor
    column "width" EBTextObserverField $valueObserver self.netWidth
    column "hole" EBTextObserverField $valueObserver self.viaHoleDiameter
    column "pad" EBTextObserverField $valueObserver self.viaPadDiameter
    column "used" EBTextObserverField $valueObserver self.netUsage
  }
  outlet EBTableView mNetClassTableView $tableValue #netClassController ;

  action addNetClassAction ;
  outlet EBButton mAddNetClassButton $run addNetClassAction ;
  outlet NSPanel mAddNetClassPanel ;
  outlet EBTextField mAddNetClassTextField ;
  outlet NSTextField mAddNetClassErrorMessageTextField ;
  outlet CanariDimensionTextField mNetClassWidthDimensionTextField ;
  outlet EBPopUpButton mNetClassWidthUnitPopUpButton ;
  outlet CanariDimensionTextField mNetClassHoleDiameterDimensionTextField ;
  outlet EBPopUpButton mNetClassHoleDiameterUnitPopUpButton ;
  outlet CanariDimensionTextField mNetClassPadDiameterDimensionTextField ;
  outlet EBPopUpButton mNetClassPadDiameterUnitPopUpButton ;
  outlet EBColorWell mNetClassColorWell ;
  outlet NSButton mAddNetClassValidationButton ;

  action removeNetClassAction ;
  transient Bool canRemoveNetClasses dependsFrom root.mNetClasses.count, #netClassController.selectedArray.all.canRemove ;
  outlet EBButton mRemoveNetClassButton
    $run removeNetClassAction
    $enabled self.canRemoveNetClasses
  ;

  action editNetClassAction ;
  outlet EBButton mEditNetClassButton $run editNetClassAction $enabled #netClassController.selectedArray.count == 1 ;

//---------------------- Library Tab
  action addFontAction ;
  outlet EBButton mAddFontButton $run addFontAction ;

  action editFontAction ;
  outlet EBButton mEditFontButton $run editFontAction $enabled #projectFontController.selectedArray.count > 0 ;

  action updateFontAction ;
  outlet EBButton mUpdateFontButton $run updateFontAction $enabled #projectFontController.selectedArray.count > 0 ;

  action removeFontAction ;
  outlet EBButton mRemoveFontButton $run removeFontAction $enabled #projectFontController.selectedArray.count > 0 ;

  action resetFontVersionAction ;
  outlet EBButton mResetFontVersionButton $run resetFontVersionAction $enabled #projectFontController.selectedArray.count > 0 ;

  tableViewController #projectFontController {allowsEmptySelection:no, allowsMultipleSelection:no} root.mFonts {
     column "name" EBTextObserverField $valueObserver self.mFontName
     column "version" EBTextObserverField $valueObserver self.versionString
     column "size" EBTextObserverField $valueObserver self.sizeString
     column "texts" EBIntObserverField $valueObserver self.mTexts.count {autoFormatter : yes}
     column "names" EBIntObserverField $valueObserver self.mComponentNames.count {autoFormatter : yes}
     column "values" EBIntObserverField $valueObserver self.mComponentValues.count {autoFormatter : yes}
  }
  outlet EBTableView mFontLibraryTableView $tableValue #projectFontController ;

//--- Devices
  action resetDeviceVersionAction ;
  outlet EBButton mResetDeviceVersionButton
    $run resetDeviceVersionAction
    $enabled #projectDeviceController.selectedArray.count > 0
  ;

  transient Bool canRemoveSelectedDevices dependsFrom #projectDeviceController.selectedArray.all.canRemove ;
  action removeDeviceAction ;
  outlet EBButton mRemoveDeviceButton
    $run removeDeviceAction
    $enabled self.canRemoveSelectedDevices
  ;

  action editDeviceAction ;
  outlet EBButton mEditDeviceButton
    $run editDeviceAction
    $enabled #projectDeviceController.selectedArray.count > 0
  ;

  action exportDeviceAction ;
  outlet EBButton mExportDeviceButton
    $run exportDeviceAction
    $enabled #projectDeviceController.selectedArray.count > 0
  ;

  action updateDeviceAction ;
  outlet EBButton mUpdateDeviceButton
    $run updateDeviceAction
    $enabled #projectDeviceController.selectedArray.count > 0
  ;

  tableViewController #projectDeviceController {allowsEmptySelection:yes, allowsMultipleSelection:yes} root.mDevices {
     column "name" EBTextObserverField $valueObserver self.mDeviceName
     column "version" EBTextObserverField $valueObserver self.versionString
     column "size" EBTextObserverField $valueObserver self.sizeString
     column "componentCount" EBIntObserverField $valueObserver self.mComponents.count {autoFormatter:yes}
  }
  outlet EBTableView mDeviceLibraryTableView $tableValue #projectDeviceController ;

  transient StringArray selectedDevicePackageNames dependsFrom #projectDeviceController.selectedArray.all.packageNames ;
  outlet StringArrayTableView mDevicePackageTableView $array self.selectedDevicePackageNames ;

  transient TwoStringArray selectedDeviceSymbolNames dependsFrom
    #projectDeviceController.selectedArray.all.symbolAndTypesNames ;
  outlet TwoStringArrayTableView mDeviceSymbolTableView $array self.selectedDeviceSymbolNames ;

  transient ThreeStringArray pinPadAssignments dependsFrom #projectDeviceController.selectedArray.all.pinPadAssignments ;
  outlet ThreeStringArrayTableView mPinPadAssignmentTableView $array self.pinPadAssignments ;

//---------------------- Schematics Tab
  outlet CanariSegmentedControl mSchematicsInspectorSegmentedControl $selectedPage root.mSelectedSchematicInspector ;
  outlet NSView mBaseSchematicsInspectorView ;
  outlet CanariViewWithKeyView mSelectedObjectsSchematicsInspectorView ;
  outlet CanariViewWithKeyView mHotKeysSchematicInspectorView ;
  outlet CanariViewWithKeyView mGridZoomSchematicsInspectorView ;
  outlet CanariViewWithKeyView mUnplacedSymbolsSchematicsInspectorView ;
  outlet CanariViewWithKeyView mSchematicsSheetsInspectorView ;

  outlet CanariDragSourceButton mAddCommentButton ;
  outlet CanariDragSourceButton mAddWireButton ;

  outlet NSPanel mMoveSelectedObjectsToSheetPanel ;
  outlet EBPopUpButton mMoveSelectedObjectsToSheetPopUpButton ;

//  outlet EBTextObserverField mConnexionErrorTextField $valueObserver root.connexionErrorString ;
//  outlet EBTextObserverField mConnexionWarningTextField $valueObserver root.connexionWarningString ;

//--- Contextual menus
  outlet NSPanel mMergeSeveralSubnetsPanel ;
  outlet EBPopUpButton mMergeSeveralSubnetsPopUpButton ;
  
  outlet NSPanel mExchangeSymbolPanel ;
  outlet EBPopUpButton mExchangeSymbolPopUpButton ;
  
//--- Schematic inconsistent error
  outlet NSPanel mInconsistentSchematicErrorPanel ;
  outlet NSTextView mInconsistentSchematicErrorTextView ;

//--- Hot keys inspector
  outlet NSTextField mConnectSchematicHotKeyTextField ;
  outlet NSTextField mDisconnectSchematicHotKeyTextField ;
  outlet NSTextField mAddWirePointSchematicHotKeyTextField ;
  outlet NSTextField mRemoveWirePointSchematicHotKeyTextField ;
  outlet NSTextField mAddLeftLabelSchematicHotKeyTextField ;
  outlet NSTextField mAddRightLabelSchematicHotKeyTextField ;
  outlet NSTextField mAddTopLabelSchematicHotKeyTextField ;
  outlet NSTextField mAddBottomSchematicHotKeyTextField ;
  outlet NSTextField mAddNCSchematicHotKeyTextField ;
  outlet NSTextField mDisconnectAllSymbolPinsSchematicHotKeyTextField ;
  outlet NSTextField mConnectAllSymbolPinsSchematicHotKeyTextField ;
  outlet NSTextField mAddNCToAllSymbolPinsSchematicHotKeyTextField ;
  outlet NSTextField mExchangeSymbolSchematicHotKeyTextField ;
   
//--- Unplaced symbols inspector
  outlet CanariDragSourceTableView mUnplacedSymbolsTableView $models root.unplacedSymbols ;
  transient Int unplacedSymbolsCount dependsFrom root.unplacedSymbols ;
  transient String unplacedSymbolsCountString dependsFrom self.unplacedSymbolsCount ;
  outlet EBTextObserverField mUnplacedSymbolsTextField $valueObserver self.unplacedSymbolsCountString ;

//--- Grid and Flip inspector
  outlet EBSwitch mSchematicsHorizontalFlipSwitch $value root.mSchematicHorizontalFlip ;
  outlet EBSwitch mSchematicsVerticalFlipSwitch $value root.mSchematicVerticalFlip ;
  outlet EBPopUpButton mSchematicsGridStylePopUpButton $selectedIndex root.mSchematicGridStyle ;
  outlet EBPopUpButton mSchematicsGridDisplayFactorPopUpButton $selectedTag root.mSchematicGridDisplayFactor ;

//--- Sheet inspector
  outlet EBTextField mSchematicsTitleTextField $value root.mSchematicTitle {sendContinously : yes} ;
  outlet EBTextField mSchematicsVersionTextField $value root.mSchematicVersion {sendContinously : yes} ;
  outlet CanariEnumSegmentedControl mSchematicsSheetOrientationSegmentedControl
    $selectedSegment root.mSchematicSheetOrientation
  ;
  outlet EBTextField mSelectedSheetTitleTextField $value root.selectedSheetTitle {sendContinously : yes} ;

  outlet EBPopUpButton mSheetPopUpButton ; // All bindings done programmatically
  outlet EBButton mSheetUpButton ; // All bindings done programmatically
  outlet EBButton mSheetDownButton ; // All bindings done programmatically

  action newSheetAction ;
  outlet EBButton mNewSheetButton $run newSheetAction ;

  action removeSheetAction ;
  outlet EBButton mRemoveSheetButton $run removeSheetAction $enabled root.mSheets.count > 1 ;


  action setDateToNowAction ;
  outlet EBButton mSetDateToNowButton $run setDateToNowAction ;

  action openSetDateDialogAction ;
  outlet EBButton mOpenSetDateDialogButton $run openSetDateDialogAction ;
  outlet NSPanel mSetDatePanel ;
  outlet NSDatePicker mSchematicsDatePicker ;

//--- Schematics view
  arrayController #schematicObjectsController : root.selectedSheetObjects ;

  outlet EBGraphicView mSchematicsView
    $underObjectsDisplay root.schematicBackgroundDisplay
    $overObjectsDisplay root.connectedPoints
    $horizontalFlip root.mSchematicHorizontalFlip
    $verticalFlip root.mSchematicVerticalFlip
    $graphicController #schematicObjectsController
    $gridStyle root.mSchematicGridStyle
    $gridDisplayFactor root.mSchematicGridDisplayFactor
    $gridLineColor prefs.lineColorOfSymbolGrid
    $gridCrossColor prefs.crossColorOfSymbolGrid
    $zoom root.mSchematicZoom
//    $backColor prefs.symbolBackgroundColor
//    $xPlacardUnit root.xPlacardUnit
//    $yPlacardUnit root.yPlacardUnit
  ;

  outlet EBScrollView mSchematicsScrollView ;

//--- Selected Wire In schematics
  outlet CanariViewWithKeyView mSchematicsWireInspectorView ;
  selectionController WireInSchematic #wireInSchematicSelectionController :
    #schematicObjectsController.selectedArray
  ;

  outlet EBTextObserverField mWireNetNameTextField
    $valueObserver #wireInSchematicSelectionController.netName
  ;

  outlet EBButton mWireRenameNetButton // Action set in IB
    $enabled (#wireInSchematicSelectionController.selectedArray.count == 1) & #wireInSchematicSelectionController.hasNet
  ;

  outlet EBButton mWireRenameNetWithUniqueNewNameButton // Action set in IB
    $enabled (#wireInSchematicSelectionController.selectedArray.count > 0) & #wireInSchematicSelectionController.hasNet
  ;
  
  outlet EBButton mSchematicWireMergeSubnetButton  // Action set in IB
    $enabled (#wireInSchematicSelectionController.selectedArray.count == 1) & #wireInSchematicSelectionController.hasNet
  ;

  outlet EBButton mSchematicWireInsulateSubnetButton  // Action set in IB
    $enabled (#wireInSchematicSelectionController.selectedArray.count == 1) & #wireInSchematicSelectionController.hasNet
  ;
  
  outlet EBPopUpButton mSchematicWireNetClassButton ;

//--- Selected NC In schematics
  outlet CanariViewWithKeyView mNCInSchematicsInspectorView ;
  selectionController NCInSchematic #ncInSchematicSelectionController :
    #schematicObjectsController.selectedArray
  ;

  outlet CanariQuadrantSegmentedControl mNCRotationSegmentedControl
     $quadrant #ncInSchematicSelectionController.mOrientation ;

//--- Selected comment in schematic inspector
  outlet CanariViewWithKeyView mCommentInSchematicsInspectorView ;
  selectionController CommentInSchematic #commentInSchematicSelectionController :
    #schematicObjectsController.selectedArray
  ;

  outlet EBTextField mCommentInSchematicsTextField
    $value #commentInSchematicSelectionController.mComment {sendContinously : yes}
  ;

//--- Selected label in schematic inspector
  outlet CanariViewWithKeyView mSchematicsLabelInspectorView ;
  selectionController LabelInSchematic #schematicLabelSelectionController :
    #schematicObjectsController.selectedArray
  ;

  outlet CanariQuadrantSegmentedControl mSchematicsLabelRotationSegmentedControl
     $quadrant #schematicLabelSelectionController.mOrientation ;

  outlet EBTextObserverField mSchematicsLabelNetNameTextField
    $valueObserver #schematicLabelSelectionController.netName
  ;

  outlet EBButton mSchematicsLabelRenameNetButton // Action set in IB
    $enabled #schematicLabelSelectionController.selectedArray.count == 1
  ;
  
  outlet EBButton mSchematicLabelMergeSubnetButton  // Action set in IB
    $enabled #schematicLabelSelectionController.selectedArray.count == 1
  ;
  outlet NSPanel mMergeNetDialog ;
  outlet EBPopUpButton mMergeNetPopUpButton ;
  
  outlet EBButton mSchematicLabelInsulateSubnetButton  // Action set in IB
    $enabled #schematicLabelSelectionController.selectedArray.count == 1
  ;
  
  outlet EBPopUpButton mSchematicLabelNetClassButton ;

//--- Selected symbol in schematic inspector
  outlet CanariViewWithKeyView mComponentSymbolInspectorView ;
  selectionController ComponentSymbolInProject #componentSymbolSelectionController :
    #schematicObjectsController.selectedArray
  ;

  outlet EBSwitch mComponentSymbolShowComponentValueSwitch
    $value #componentSymbolSelectionController.mDisplayComponentValue
  ;
  outlet EBTextObserverField mComponentSymbolComponentNameTextField
    $valueObserver #componentSymbolSelectionController.componentName
  ;

  outlet EBButton mRenameComponentFromComponentSymbolButton // Action set in IB
    $enabled #schematicObjectsController.selectedArray.count == 1
  ;

  outlet EBTextField mComponentSymbolValueTextField
    $value #componentSymbolSelectionController.componentValueProxy {sendContinously : yes}
  ;

  outlet EBTextObserverField mComponentSymbolDeviceNameTextField
    $valueObserver #componentSymbolSelectionController.deviceName
  ;

  outlet EBTextObserverField mComponentSymbolTypeNameTextField
    $valueObserver #componentSymbolSelectionController.mSymbolTypeName
  ;

  outlet EBTextObserverField mComponentSymbolInstanceNameTextField
    $valueObserver #componentSymbolSelectionController.mSymbolInstanceName
  ;

  outlet CanariQuadrantSegmentedControl mSymbolRotationSegmentedControl
     $quadrant #componentSymbolSelectionController.mRotation ;

  outlet EBSwitch mSymbolMirrorSwitch $value #componentSymbolSelectionController.mMirror ;

//---------------------- Net Tab
  outlet CanariNetInfoTableView mNetInfoTableView $netInfo root.netsDescription ;

  transient String netCountString dependsFrom root.netsDescription ;
  
  outlet EBTextObserverField mNetCountTextField $valueObserver self.netCountString ;
  
  transient Int netCount dependsFrom root.netsDescription ;
  
  outlet EBButton mRenameNetInNetTabButton $enabled self.netCount > 0 ; // Action set in IB
  outlet NSPanel mRenameNetPanel ;
  outlet EBTextField mRenameNetTextField ;
  outlet EBTextField mRenameNetErrorTextField ;
  outlet EBButton mRenameNetOkButton ;

  
  outlet EBButton mSelectNetClassInNetTabButton $enabled self.netCount > 0 ; // Action set in IB
  outlet NSPanel mSelectNetClassPanel ;
  outlet EBPopUpButton mSelectNetClassPopUpButton ;

  outlet NSImageView mNetWarningImageView $hidden root.netWarningCount == 0 ;
  
  outlet EBIntObserverField mNetWarningTextField
    $valueObserver root.netWarningCount {autoFormatter: yes}
    $hidden root.netWarningCount == 0
  ;

//----------------- Board limits tab
  arrayController #boardCurveObjectsController : root.mBorderCurves ;

  outlet EBGraphicView mBoardLimitsView
    $underObjectsDisplay root.boarderViewBackground
//    $overObjectsDisplay root.connectedPoints
    $horizontalFlip root.mBoardLimitsHorizontalFlip
    $verticalFlip root.mBoardLimitsVerticalFlip
    $graphicController #boardCurveObjectsController
    $gridStyle root.mBoardLimitsGridStyle
    $gridDisplayFactor root.mBoardLimitsGridDisplayFactor
    $gridLineColor prefs.lineColorGridForBoard
    $gridCrossColor prefs.crossColorGridForBoard
    $zoom root.mBoardLimitsZoom
    $backColor prefs.boardBackgroundColorForBoard
    $mouseGrid root.mBoardLimitsGridStep
    $gridStep root.mBoardLimitsGridStep
    $arrowKeyMagnitude root.mBoardLimitsGridStep
    $shiftArrowKeyMagnitude root.boardLimitsGridStepMultipliedByDisplayFactor
    $xPlacardUnit root.mBoardLimitsGridStepUnit
    $yPlacardUnit root.mBoardLimitsGridStepUnit
  ;

//--- Inspectors
  outlet CanariSegmentedControl mBoardLimitsInspectorSegmentedControl $selectedPage root.mBoardLimitsSelectedInspector ;
  outlet NSView mBaseBoardLimitsInspectorView ;
  outlet CanariViewWithKeyView mSelectedObjectsBoardLimitsInspectorView ;
  outlet CanariViewWithKeyView mGridZoomBoardLimitsInspectorView ;
  outlet CanariViewWithKeyView mOperationBoardLimitsInspectorView ;

//--- Limit Curve inspector view
  selectionController BorderCurve #boardCurveSelectionController :
    #boardCurveObjectsController.selectedArray
  ;
  outlet CanariViewWithKeyView mSelectedBoardLimitInspectorView ;
  outlet EBPopUpButton mSelectedLimitDisplayUnitPopUp $selectedTag root.mBoardSelectedCurveDisplayUnit ;

  outlet EBTextObserverField mBoardCurveX1TextField $valueObserver #boardCurveSelectionController.p1Xstring ;
  outlet EBTextObserverField mBoardCurveY1TextField $valueObserver #boardCurveSelectionController.p1Ystring ;
  outlet EBTextObserverField mBoardCurveX2TextField $valueObserver #boardCurveSelectionController.p2Xstring ;
  outlet EBTextObserverField mBoardCurveY2TextField $valueObserver #boardCurveSelectionController.p2Ystring ;

  outlet EBPopUpButton mSelectedLimitShapePopUpButton $selectedIndex #boardCurveSelectionController.mShape ;

  outlet EBTextObserverField mBoardCurveCPX1TextField $valueObserver #boardCurveSelectionController.cp1Xstring ;
  outlet EBTextObserverField mBoardCurveCPY1TextField $valueObserver #boardCurveSelectionController.cp1Ystring ;
  outlet EBTextObserverField mBoardCurveCPX2TextField $valueObserver #boardCurveSelectionController.cp2Xstring ;
  outlet EBTextObserverField mBoardCurveCPY2TextField $valueObserver #boardCurveSelectionController.cp2Ystring ;

  outlet NSView mLimitCurveBezierControlPointsView $hidden #boardCurveSelectionController.isLine ;
  
//--- Grid and Flip inspector
  outlet EBSwitch mBoardLimitsHorizontalFlipSwitch $value root.mBoardLimitsHorizontalFlip ;
  outlet EBSwitch mBoardLimitsVerticalFlipSwitch $value root.mBoardLimitsVerticalFlip ;
  outlet EBPopUpButton mBoardLimitsGridStylePopUpButton $selectedIndex root.mBoardLimitsGridStyle ;
  outlet EBPopUpButton mBoardLimitsGridDisplayFactorPopUpButton $selectedTag root.mBoardLimitsGridDisplayFactor ;

  outlet EBPopUpButton mBoardLimitsGridUnitPopUp $selectedTag root.mBoardLimitsGridStepUnit ;
  outlet CanariDimensionTextField mBoardLimitsGridTextField
     $dimensionAndUnit root.mBoardLimitsGridStep, root.mBoardLimitsGridStepUnit
  ;
  
//--- Operation Inspector
  outlet EBTextObserverField mBoardLimitsElementCountTextField $valueObserver root.borderElementCountString ;  

  outlet EBTextObserverField mBoardLimitPointsTopTextField $valueObserver root.boardLimitPointsTop ;
  outlet EBTextObserverField mBoardLimitPointsBottomTextField $valueObserver root.boardLimitPointsBottom ;
  outlet EBTextObserverField mBoardLimitPointsLeftTextField $valueObserver root.boardLimitPointsLeft ;
  outlet EBTextObserverField mBoardLimitPointsRightTextField $valueObserver root.boardLimitPointsRight ;  

  outlet EBPopUpButton mBoardPointsBoundingBoxUnitPopUp $selectedTag root.mBoardPointsBoundingBoxUnit ;

  outlet EBTextObserverField mBoardLimitBorderTopTextField $valueObserver root.boardLimitBorderTop ;
  outlet EBTextObserverField mBoardLimitBorderBottomTextField $valueObserver root.boardLimitBorderBottom ;
  outlet EBTextObserverField mBoardLimitBorderLeftTextField $valueObserver root.boardLimitBorderLeft ;
  outlet EBTextObserverField mBoardLimitBorderRightTextField $valueObserver root.boardLimitBorderRight ;  

  outlet EBPopUpButton mBoardLimitsBoundingBoxUnitPopUp $selectedTag root.mBoardLimitsBoundingBoxUnit ;

  outlet EBPopUpButton mBoardLimitsWidthUnitPopUp $selectedTag root.mBoardLimitsWidthUnit ;
  outlet CanariDimensionTextField mBoardLimitsWidthTextField
     $dimensionAndUnit root.mBoardLimitsWidth, root.mBoardLimitsWidthUnit
  ;

  outlet EBPopUpButton mBoardClearanceUnitPopUp $selectedTag root.mBoardClearanceUnit ;
  outlet CanariDimensionTextField mBoardClearanceTextField
     $dimensionAndUnit root.mBoardClearance, root.mBoardClearanceUnit
  ;

//----------------- Board Object tab
  outlet CanariSegmentedControl mBoardInspectorSegmentedControl $selectedPage root.mBoardSelectedInspector ;
  outlet NSView mBaseBoardInspectorView ;
  outlet CanariViewWithKeyView mSelectedObjectsBoardInspectorView ;
  outlet CanariViewWithKeyView mUnplacedPackagesBoardInspectorView ;
  outlet CanariViewWithKeyView mGridZoomBoardInspectorView ;
  outlet CanariViewWithKeyView mDisplayBoardInspectorView ;
  outlet CanariViewWithKeyView mRouterBoardInspectorView ;
  outlet CanariViewWithKeyView mERCBoardInspectorView ;

  outlet CanariDragSourceButton mAddRestrictRectangleButton ;
  outlet CanariDragSourceImageButton mAddTextInBoardButton ;

  outlet CanariDragSourceTableView mUnplacedPackageTableView $models root.unplacedPackages ;
  transient Int unplacedPackageCount dependsFrom root.unplacedPackages ;
  transient String unplacedPackagesCountString dependsFrom self.unplacedPackageCount ;
  outlet EBTextObserverField mUnplacedPackagesCountTextField $valueObserver self.unplacedPackagesCountString ;

  arrayController #boardObjectsController : root.mBoardObjects ;

  outlet EBScrollView mBoardScrollView ;

  outlet EBGraphicView mBoardView
    $underObjectsDisplay root.boardBackground
//    $overObjectsDisplay root.connectedPoints
    $horizontalFlip root.mBoardHorizontalFlip
    $verticalFlip root.mBoardVerticalFlip
    $graphicController #boardObjectsController
    $gridStyle root.mBoardGridStyle
    $gridDisplayFactor root.mBoardGridDisplayFactor
    $gridLineColor prefs.lineColorGridForBoard
    $gridCrossColor prefs.crossColorGridForBoard
    $zoom root.mBoardZoom
    $backColor prefs.boardBackgroundColorForBoard
    $mouseGrid root.mBoardGridStep
    $gridStep root.mBoardGridStep
    $arrowKeyMagnitude root.mBoardGridStep
    $shiftArrowKeyMagnitude root.boardGridStepMultipliedByDisplayFactor
    $xPlacardUnit root.mBoardGridStepUnit
    $yPlacardUnit root.mBoardGridStepUnit
  ;

//--- Grid and Flip inspector
  outlet EBSwitch mBoardHorizontalFlipSwitch $value root.mBoardHorizontalFlip ;
  outlet EBSwitch mBoardVerticalFlipSwitch $value root.mBoardVerticalFlip ;
  outlet EBPopUpButton mBoardGridStylePopUpButton $selectedIndex root.mBoardGridStyle ;
  outlet EBPopUpButton mBoardGridDisplayFactorPopUpButton $selectedTag root.mBoardGridDisplayFactor ;
  
  outlet EBPopUpButton mBoardGridUnitPopUp $selectedTag root.mBoardGridStepUnit ;
  outlet CanariDimensionTextField mBoardGridTextField
     $dimensionAndUnit root.mBoardGridStep, root.mBoardGridStepUnit
  ;

//--- Restrict rectangle inspector
  outlet CanariViewWithKeyView mRestrictRectangleInspectorView ;
  selectionController BoardRestrictRectangle #restrictRectangleSelectionController :
    #boardObjectsController.selectedArray
  ;

  outlet EBSwitch mFrontRestrictRectangleSwitch
    $value #restrictRectangleSelectionController.mIsInFrontLayer
    $enabled #restrictRectangleSelectionController.mIsInBackLayer
  ;

  outlet EBSwitch mBackRestrictRectangleSwitch
    $value #restrictRectangleSelectionController.mIsInBackLayer
    $enabled #restrictRectangleSelectionController.mIsInFrontLayer
  ;

//--- Text inspector
  outlet CanariViewWithKeyView mBoardTextInspectorView ;
  selectionController BoardText #boardTextSelectionController :
    #boardObjectsController.selectedArray
  ;

  outlet EBTextField mBoardTextTextField $value #boardTextSelectionController.mText {sendContinously : yes} ;

  outlet EBDoubleField mBoardTextFontSizeField
    $value #boardTextSelectionController.mFontSize {sendContinously : no, autoFormatter : no}
  ;

  outlet EBPopUpButton mBoardTextLayerPopUpButton $selectedIndex #boardTextSelectionController.mLayer ;

  outlet EBPopUpButton mBoardTextHorizontalAlignmentPopUpButton
    $selectedIndex #boardTextSelectionController.mHorizontalAlignment
  ;

  outlet EBPopUpButton mBoardTextVerticalAlignmentPopUpButton
    $selectedIndex #boardTextSelectionController.mVerticalAlignment
  ;
  
  outlet CanariAngleTextField mBoardTextRotationTextField $angle #boardTextSelectionController.mRotation ;
  outlet CanariAngleSlider mBoardTextRotationSlider $angle #boardTextSelectionController.mRotation ;
  
  outlet CanariBoardTextFontPopUpButton mBoardTextFontPopUpButton ;
  
  outlet EBDoubleField mBoardTextWeightTextField
    $value #boardTextSelectionController.mWeight { sendContinously : no, autoFormatter: no}
  ;
  
  outlet EBSwitch mBoardTextObliqueSwitch $value #boardTextSelectionController.mOblique ;

//--- Component inspector
  outlet CanariViewWithKeyView mComponentInBoardInspectorView ;
  selectionController ComponentInProject #componentInBoardSelectionController :
    #boardObjectsController.selectedArray
  ;

  outlet EBPopUpButton mComponentInBoardCenterXPopUp $selectedTag #componentInBoardSelectionController.mXUnit ;
  outlet CanariDimensionTextField mComponentInBoardCenterXTextField
     $dimensionAndUnit #componentInBoardSelectionController.mX, #componentInBoardSelectionController.mXUnit
  ;

  outlet EBPopUpButton mComponentInBoardCenterYPopUp $selectedTag #componentInBoardSelectionController.mYUnit ;
  outlet CanariDimensionTextField mComponentInBoardCenterYTextField
     $dimensionAndUnit #componentInBoardSelectionController.mY, #componentInBoardSelectionController.mYUnit
  ;

  outlet CanariAngleTextField mBoardComponentRotationTextField $angle #componentInBoardSelectionController.mRotation ;
  outlet CanariAngleSlider mBoardComponentRotationSlider $angle #componentInBoardSelectionController.mRotation ;

  outlet EBPopUpButton mBoardComponentSidePopUpButton $selectedIndex #componentInBoardSelectionController.mSide ;

  outlet EBSwitch mDisplayComponentNameSwitch $value #componentInBoardSelectionController.mNameIsVisibleInBoard ;
  outlet EBDoubleField mComponentNameFontSizeField
    $value #componentInBoardSelectionController.mNameFontSize {sendContinously : no, autoFormatter : no}
  ;

  outlet CanariAngleTextField mComponentNameRotationTextField $angle #componentInBoardSelectionController.mNameRotation ;
  outlet CanariAngleSlider mComponentNameRotationSlider $angle #componentInBoardSelectionController.mNameRotation ;

  outlet EBTextObserverField mBoardComponentNameTextField $valueObserver #componentInBoardSelectionController.componentName ;

  outlet CanariBoardComponentNameFontPopUpButton mBoardComponentNameFontPopUpButton ;


  outlet EBSwitch mDisplayComponentValueSwitch $value #componentInBoardSelectionController.mValueIsVisibleInBoard ;
  outlet EBDoubleField mComponentValueFontSizeField
    $value #componentInBoardSelectionController.mValueFontSize {sendContinously : no, autoFormatter : no}
  ;

  outlet CanariAngleTextField mComponentValueRotationTextField $angle #componentInBoardSelectionController.mValueRotation ;
  outlet CanariAngleSlider mComponentValueRotationSlider $angle #componentInBoardSelectionController.mValueRotation ;

  outlet EBTextField mBoardComponentValueTextField
     $value #componentInBoardSelectionController.mComponentValue {sendContinously : yes};

//--- Display inspector
  outlet EBSwitch mDisplayFrontPadsSwitch $value root.mDisplayFrontPads ;
  outlet EBColorWell mDisplayFrontPadsColorWell $color prefs.frontSidePadColorForBoard {sendContinously:yes} ;

  outlet EBSwitch mDisplayBackPadsSwitch $value root.mDisplayBackPads ;
  outlet EBColorWell mDisplayBackPadsColorWell $color prefs.backSidePadColorForBoard {sendContinously:yes} ;

  outlet EBSwitch mDisplayPadNumbersSwitch $value root.mDisplayPadNumbers ;
  outlet EBColorWell mDisplayPadNumbersColorWell $color prefs.padNumberColorForBoard {sendContinously:yes} ;

  outlet EBSwitch mDisplayFrontLegendSwitch $value root.mDisplayFrontLegend ;
  outlet EBColorWell mDisplayFrontLegendColorWell $color prefs.frontSideLegendColorForBoard {sendContinously:yes} ;

  outlet EBSwitch mDisplayBackLegendSwitch $value root.mDisplayBackLegend ;
  outlet EBColorWell mDisplayBackLegendColorWell $color prefs.backSideLegendColorForBoard {sendContinously:yes} ;

  outlet EBSwitch mDisplayFrontLayoutSwitch $value root.mDisplayFrontLayout ;
  outlet EBColorWell mDisplayFrontLayoutColorWell $color prefs.frontSideLayoutColorForBoard {sendContinously:yes} ;

  outlet EBSwitch mDisplayBackLayoutSwitch $value root.mDisplayBackLayout ;
  outlet EBColorWell mDisplayBackLayoutColorWell $color prefs.backSideLayoutColorForBoard {sendContinously:yes} ;

  outlet EBSwitch mDisplayFrontRestrictRectanglesSwitch $value root.mDisplayFrontRestrictRectangles ;
  outlet EBColorWell mDisplayFrontRestrictRectanglesColorWell $color prefs.frontSideRestrictRectangleColorForBoard {sendContinously:yes} ;

  outlet EBSwitch mDisplayBackRestrictRectanglesSwitch $value root.mDisplayBackRestrictRectangles ;
  outlet EBColorWell mDisplayBackRestrictRectanglesColorWell $color prefs.backSideRestrictRectangleColorForBoard {sendContinously:yes} ;

  outlet EBColorWell mDisplayBoardLimitsColorWell $color prefs.boardLimitsColorForBoard {sendContinously:yes} ;

  outlet EBColorWell mDisplayBoardClearanceColorWell $color prefs.boardClearanceColorForBoard {sendContinously:yes} ;

  outlet EBColorWell mBoardBackgroundColorWell $color prefs.boardBackgroundColorForBoard {sendContinously:yes} ;
}

//----------------------------------------------------------------------------------------------------------------------
