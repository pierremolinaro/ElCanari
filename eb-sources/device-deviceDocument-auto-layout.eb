//----------------------------------------------------------------------------------------------------------------------
//     D E V I C E    D O C U M E N T
//----------------------------------------------------------------------------------------------------------------------

autoLayoutDocument AutoLayoutDeviceDocument root DeviceRoot stackView mDocumentMainView {

//······················································································································
//   MAIN VIEW
//······················································································································

  stackView mPageMasterView vStack { }
 
  stackView mDocumentMainView vStack set (spacing: 0) {
    hStack set (margins: 8) {
      vStack {
        SegmentedControlWithPages (documentView: stackView mPageMasterView, equalWidth: no, small: no) {
          addPage (title: "Description", tooltip: "Device Description", pageView: stackView mDescriptionPage)
          addPage (title: "Symbols", tooltip: "Device Symbols", pageView: stackView mSymbolsPage)
          addPage (title: "Packages", tooltip: "Device Available Packages", pageView: stackView mPackagesPage)
          addPage (title: "Assignments", tooltip: "Pin / Pad Assignments", pageView: stackView mAssignmentsPage)
          addPage (title: "Library", tooltip: "Device Embedded Library", pageView: stackView mLibraryPage)
          addPage (title: "Infos", tooltip: "Device Informations", pageView: stackView mInfosPage)
          $selectedPage root.mSelectedPageIndex
        }
        hStack { space StaticLabel (title: "Page", bold: no, small: yes) space }
      }
      vStack {
        SignatureField (small : no) { $signature signature }
        StaticLabel (title: "Signature", bold: no, small: yes) { set (alignment: .center)  makeWidthExpandable () }
      }
      vStack {
        VersionField (small : no) { $version version $versionShouldChange versionShouldChange }
        StaticLabel (title: "Version", bold: no, small: yes) { set (alignment: .center) makeWidthExpandable () }
      }
      space
      vStack {
        hStack { space ImageObserverView (small: no) { $image self.mStatusImage $tooltip self.mStatusMessage } space }
        StaticLabel (title: "Status", bold: no, small: yes) { set (alignment: .center) }
      }
    }
    separator
    stackViewRef mPageMasterView
  }

  transient NSImage mStatusImage dependsFrom root.issues ;
  transient String mStatusMessage dependsFrom root.issues ;
  transient MetadataStatus mMetadataStatus dependsFrom root.issues ;

//······················································································································
//   DESCRIPTION
//······················································································································

  stackView mDescriptionPage vStack { }

  outlet EBTextField mTitleTextField $value root.mTitle (sendContinously: yes) ;

  outlet DeviceDroppableImageView mRepresentationImageView $imageData root.mImageData ;

  action pasteImageAction ;
  outlet EBButton mPasteImageButton $run pasteImageAction ;

  action copyImageAction ;
  outlet EBButton mCopyImageButton $run copyImageAction $enabled root.imageIsValid ;

  action removeImageAction ;
  outlet EBButton mRemoveImageButton $run removeImageAction $enabled root.imageIsValid ;

  autolayout tableViewController #documentationController (allowsEmptySelection:no, allowsMultipleSelection:no) root.mDocs {
//     column "name" EBTextObserverField $valueObserver self.mFileName
//     column "size" EBIntObserverField $valueObserver self.fileSize (autoFormatter : yes)
  }


//  outlet DeviceDocumentationTableView mDocumentationTableView $tableValue #documentationController ;

  outlet EBButton mRemoveSelectedDocButton
    $run #documentationController.remove
    $enabled #documentationController.selectedArray.count > 0
  ;

  action showDocAction ;
  outlet EBButton mShowDocButton
    $run showDocAction
    $enabled #documentationController.selectedArray.count > 0
  ;

  action saveDocAction ;
  outlet EBButton mSaveDocButton
    $run saveDocAction
    $enabled #documentationController.selectedArray.count > 0
  ;


//······················································································································
//   SYMBOLS
//······················································································································

  stackView mSymbolsPage vStack { }

  action addSymbolFromLibraryAction ;
  outlet EBButton mAddSymbolFromLibraryButton $run addSymbolFromLibraryAction ;

  arrayController #symbolDisplayController : root.mSymbolInstances ;
  selectionController SymbolInstanceInDevice #symbolInstanceSelection : #symbolDisplayController.selectedArray ;

  outlet EBEnclosingGraphicView mComposedSymbolView
    $horizontalFlip root.mSymbolDisplayHorizontalFlip
    $verticalFlip root.mSymbolDisplayVerticalFlip
    $graphicController #symbolDisplayController
    $zoom root.mSymbolDisplayZoom
  ;

  outlet EBSwitch mSymbolDisplayHorizontalFlipSwitch $value root.mSymbolDisplayHorizontalFlip ;
  outlet EBSwitch mSymbolDisplayVerticalFlipSwitch $value root.mSymbolDisplayVerticalFlip ;

//  outlet AddSymbolInstancePullDownButton mAddSymbolInstancePullDownButton
//    $enabled root.mSymbolTypes.count > 0
//    $symbolTypeNames root.symbolTypeNames
//  ;

  outlet EBTextObserverView mInconsistentSymbolNameMessageTextView
    $valueObserver root.inconsistentSymbolNameSetMessage
  ;

  outlet NSScrollView mInconsistentSymbolNameMessageScrollView
    $hidden root.symbolNameAreConsistent
  ;

  outlet NSTextField mSymbolErrorMessageTitleTextField
    $hidden root.symbolNameAreConsistent
  ;

  outlet EBTextObserverField mSymbolTypeTextField
//     $tooltip mSymbolInstanceSelection.symbolTypeName
     $valueObserver #symbolInstanceSelection.symbolTypeName
   ;

  outlet EBTextField mSymbolNameTextField $value #symbolInstanceSelection.mInstanceName  (sendContinously : yes) ;

//······················································································································
//   PACKAGES
//······················································································································

  stackView mPackagesPage vStack { }

  action addPackageFromLibraryAction ;
  outlet EBButton mAddPackageFromLibraryButton $run addPackageFromLibraryAction ;

  arrayController #packageDisplayController : root.mPackages ;

  outlet EBEnclosingGraphicView mComposedPackageView
    $horizontalFlip root.mPackageDisplayHorizontalFlip
    $verticalFlip root.mPackageDisplayVerticalFlip
    $graphicController #packageDisplayController
    $zoom root.mPackageDisplayZoom
  ;

  outlet EBSwitch mPackageDisplayHorizontalFlipSwitch $value root.mPackageDisplayHorizontalFlip ;
  outlet EBSwitch mPackageDisplayVerticalFlipSwitch $value root.mPackageDisplayVerticalFlip ;

  outlet EBSwitch mShowPackagesSwitch $value root.mShowPackages ;
  outlet EBColorWell mPackagesColorWell $color prefs.packageColor (sendContinously:no) ;

  outlet EBSwitch mShowPackagePadNumbersSwitch $value root.mShowPackagePadNumbers ;
  outlet EBColorWell mPackageNumbersColorWell $color prefs.padNumberColor (sendContinously:no) ;

  outlet EBSwitch mShowPackageFrontPadsSwitch $value root.mShowPackageFrontPads ;
  outlet EBColorWell mPackageFrontPadsColorWell $color prefs.frontSidePadColor (sendContinously:no) ;

  outlet EBSwitch mShowPackageBackPadsSwitch $value root.mShowPackageBackPads ;
  outlet EBColorWell mPackageBackPadsColorWell $color prefs.backSidePadColor (sendContinously:no) ;

  outlet EBTextObserverView mInconsistentPackagePadNameSetsMessageTextView
    $valueObserver root.inconsistentPackagePadNameSetsMessage
  ;

  outlet NSScrollView mInconsistentPackagePadNameSetsMessageScrollView
    $hidden root.packagePadNameSetsAreConsistent
  ;

//······················································································································
//   LIBRARY
//······················································································································

  action resetSymbolsAndPackagesVersion ;
  action updateSymbolsAndPackagesAction ;

  autolayout
  tableViewController #symbolTypeController (allowsEmptySelection:no, allowsMultipleSelection:no) root.mSymbolTypes {
    column versionString (title: "Version", minWidth: 60, maxWidth: 60, headerAlignment: .center, contentAlignment: .center) sortkey versionString
    column instanceCount (title: "Instances", minWidth: 60, maxWidth: 60, headerAlignment: .center, contentAlignment: .center) sortkey instanceCount
    column mTypeName (title: "Symbol", minWidth: 100, maxWidth: 4000, headerAlignment: .left, contentAlignment: .left) sortkey mTypeName
    column documentSizeString (title: "Size", minWidth: 100, maxWidth: 100, headerAlignment: .left, contentAlignment: .left)
  }

  selectionController SymbolTypeInDevice #symbolTypeSelection : #symbolTypeController.selectedArray ;

  autolayout
  tableViewController #packageController (allowsEmptySelection:no, allowsMultipleSelection:no) root.mPackages {
    column versionString (title: "Version", minWidth: 60, maxWidth: 60, headerAlignment: .center, contentAlignment: .center) sortkey versionString
    column mName (title: "Package", minWidth: 100, maxWidth: 4000, headerAlignment: .left, contentAlignment: .left) sortkey mName
    column documentSizeString (title: "Size", minWidth: 100, maxWidth: 100, headerAlignment: .left, contentAlignment: .left)
  }

  stackView mLibraryPage vStack set (margins: 20) {
    hStack {
      Button (title: "Reset Symbols and Packages Version and Signature", small: yes) {
        $run resetSymbolsAndPackagesVersion
        $enabled (root.mPackages.count > 0) & (root.mSymbolTypes.count > 0)
      }
      Button (title: "Update Symbols and Packages", small: yes) {
        $run updateSymbolsAndPackagesAction
        $enabled (root.mPackages.count > 0) & (root.mSymbolTypes.count > 0)
      }
      space
    }
    vStack equalHeight () {
      vStack {
        hStack { StaticLabel (title: "Embedded Symbols", bold: yes, small: yes) space }
        hStack {
          TableView (small: yes, addControlButtons: no) { $tableValue #symbolTypeController }
          vStack {
            Button (title: "Reset Version", small: yes) {
              makeWidthExpandable ()
              $run resetSelectedSymbolVersion
              $enabled #symbolTypeController.selectedArray.count > 0
            }
            Button (title: "Update", small: yes) {
              makeWidthExpandable ()
              $run updateSelectedSymbols
              $enabled #symbolTypeController.selectedArray.count > 0
            }
            Button (title: "Export…", small: yes) {
              makeWidthExpandable ()
              $run exportSelectedSymbols
              $enabled #symbolTypeController.selectedArray.count > 0
            }
            Button (title: "Edit", small: yes) {
              makeWidthExpandable ()
              $run editSelectedSymbols
              $enabled #symbolTypeController.selectedArray.count > 0
            }
            Button (title: "Remove", small: yes) {
              makeWidthExpandable ()
              $run removeUselessSymbolTypeAction
              $enabled (#symbolTypeController.selectedArray.count == 1) & (#symbolTypeSelection.instanceCount == 0)
            }
            space
          }
        }
      }
      vStack {
        hStack { StaticLabel (title: "Embedded Packages", bold: yes, small: yes) space }
        hStack { 
          TableView (small: yes, addControlButtons: no) { $tableValue #packageController }
          vStack {
            Button (title: "Reset Version", small: yes) {
              makeWidthExpandable ()
              $run resetSelectedPackageVersion         
              $enabled #packageController.selectedArray.count > 0
            }
            Button (title: "Update", small: yes) {
              makeWidthExpandable ()
              $run updateSelectedPackages
              $enabled #packageController.selectedArray.count > 0
            }
            Button (title: "Export…", small: yes) {
              makeWidthExpandable ()
              $run exportSelectedPackages
              $enabled #packageController.selectedArray.count > 0
            }
            Button (title: "Edit", small: yes) {
              makeWidthExpandable ()
              $run editSelectedPackages
              $enabled #packageController.selectedArray.count > 0
            }
            space
          }
        }
      }
    }
  }

//--- Symbols
  action resetSelectedSymbolVersion ;
  action editSelectedSymbols ;
  action exportSelectedSymbols ;
  action updateSelectedSymbols ;
  action removeUselessSymbolTypeAction ;

//--- Packages
  action resetSelectedPackageVersion ;
  action editSelectedPackages ;
  action exportSelectedPackages ;
  action updateSelectedPackages ;

//······················································································································
//   ASSIGNMENTS
//······················································································································

  stackView mAssignmentsPage vStack { }

  transient String assignmentInhibitionMessage
    dependsFrom root.inconsistentPackagePadNameSetsMessage, root.inconsistentSymbolNameSetMessage
  ;

  outlet EBTextObserverField mInconsistentPadNameSetTextField
    $valueObserver self.assignmentInhibitionMessage
    $hidden root.packagePadNameSetsAreConsistent & root.symbolNameAreConsistent
  ;

  outlet NSSplitView mAssignmentSplitView
    $hidden !root.packagePadNameSetsAreConsistent | !root.symbolNameAreConsistent
  ;

  outlet UnconnectedPadsInDeviceTableView mUnconnectedPadsInDeviceTableView
    $unconnectedPads root.unconnectedPads
  ;

  outlet UnconnectedSymbolPinsInDeviceTableView mUnconnectedSymbolPinsInDeviceTableView
    $unconnectedPins root.unconnectedPins
  ;

  outlet AssignedPadProxysInDeviceTableView mAssignedPadProxyTableView
    $assignedPadProxies root.assignedPadProxies
  ;

  transient Bool hasUnconnectedPad dependsFrom root.unconnectedPads ;
  transient Bool hasUnconnectedPin dependsFrom root.unconnectedPins ;

  action performBindAction ;
  outlet EBButton mBindButton $run performBindAction $enabled self.hasUnconnectedPad & self.hasUnconnectedPin ;

  action performNCAction ;
  outlet EBButton mNCButton $run performNCAction $enabled self.hasUnconnectedPad ;

  transient Bool hasAssignedPadProxies dependsFrom root.assignedPadProxies ;

  action performUnbindAction ;
  outlet EBButton mUnbindButton $run performUnbindAction $enabled self.hasAssignedPadProxies ;

  action performUnbindAllAction ;
  outlet EBButton mUnbindAllButton $run performUnbindAllAction $enabled self.hasAssignedPadProxies ;

//······················································································································
//   INFOS
//······················································································································

  stackView mInfosPage vStack set (leftMargin: 20) set (rightMargin: 20) set (bottomMargin: 20) set (topMargin: 8) {
    hStack setFirstBaselineAlignment () {
      StaticLabel (title: "Device Prefix", bold: no, small: yes) { set (width: 84) }
      TextField (width: 56, small: yes) { $value root.mPrefix (sendContinously : yes) }
      StaticLabel (title: "This field only accepts lowercase abd uppercase ASCII letters.", bold: no, small: yes)
      space
      Button (title: "Reset Version and Signature", small: yes) { $run resetVersionAction }
    }
    vStack equalHeight () {
      hStack {
        vStack set (width: 84) { StaticLabel (title: "Status", bold: no, small: yes) space }
        TextObserverView { $observedValue self.mStatusMessage }
      }
      hStack {
        vStack set (width: 84) { StaticLabel (title: "Comments", bold: no, small: yes) space }
        TextView { $value root.mComments }
      }
    }
  }

  action resetVersionAction ;

}

//----------------------------------------------------------------------------*
