//----------------------------------------------------------------------------------------------------------------------
//     D E V I C E    D O C U M E N T
//----------------------------------------------------------------------------------------------------------------------

autoLayoutDocument AutoLayoutDeviceDocument root DeviceRoot stackView mDocumentMainView {

//······················································································································
//   MAIN VIEW
//······················································································································

  stackView mPageMasterView vStack { }
 
  stackView mDocumentMainView vStack set (spacing: 0) {
    hStack set (margins: 8) {
      vStack {
        SegmentedControlWithPages (documentView: stackView mPageMasterView, equalWidth: no, small: no) {
          addPage (title: "Description", tooltip: "Device Description", pageView: stackView mDescriptionPage)
          addPage (title: "Symbols", tooltip: "Device Symbols", pageView: stackView mSymbolsPage)
          addPage (title: "Packages", tooltip: "Device Available Packages", pageView: stackView mPackagesPage)
          addPage (title: "Assignments", tooltip: "Pin / Pad Assignments", pageView: stackView mAssignmentsPage)
          addPage (title: "Library", tooltip: "Device Embedded Library", pageView: stackView mLibraryPage)
          addPage (title: "Infos", tooltip: "Device Informations", pageView: stackView mInfosPage)
          $selectedPage root.mSelectedPageIndex
        }
        hStack { space StaticLabel (title: "Page", bold: no, small: yes) space }
      }
      vStack {
        SignatureField (small : no) { $signature signature }
        StaticLabel (title: "Signature", bold: no, small: yes) { set (alignment: .center)  makeWidthExpandable () }
      }
      vStack {
        VersionField (small : no) { $version version $versionShouldChange versionShouldChange }
        StaticLabel (title: "Version", bold: no, small: yes) { set (alignment: .center) makeWidthExpandable () }
      }
      space
      vStack {
        hStack { space ImageObserverView (small: no) { $image self.mStatusImage $tooltip self.mStatusMessage } space }
        StaticLabel (title: "Status", bold: no, small: yes) { set (alignment: .center) }
      }
    }
    separator
    stackViewRef mPageMasterView
  }

  transient NSImage mStatusImage dependsFrom root.issues ;
  transient String mStatusMessage dependsFrom root.issues ;
  transient MetadataStatus mMetadataStatus dependsFrom root.issues ;

//······················································································································
//   DESCRIPTION
//······················································································································

  stackView mDescriptionPage vStack set (margins: 16) set (spacing: 12) {
    TextField (width: 70, small: no) {
      makeWidthExpandable ()
      set (alignment: .left)
      $value root.mTitle (sendContinously: yes)
    }
    hStack set (spacing: 12) {
      CanariDeviceDroppableImageView (width: 240) { $imageData root.mImageData }
      vStack {
        hStack { StaticLabel (title: "PDF Documentation", bold: no, small: no) space }
        TableView (small: no, addControlButtons: no) [configurator documentationTableView] { $tableValue #documentationController }
        hStack {
          Button (title: "-", small: yes) {
            $run removeDocumentationAction
            $enabled #documentationController.selectedArray.count > 0
          }
          Button (title: "Show Documentation", small: yes) {
            $run showDocAction
            $enabled #documentationController.selectedArray.count > 0
          }
          Button (title: "Save as…", small: yes) {
            $run saveDocAction
            $enabled #documentationController.selectedArray.count > 0
          }
          space
        }
      }
    }
  }


  autolayout
  tableViewController #documentationController (allowsEmptySelection:yes, allowsMultipleSelection:no) root.mDocs {
    column mFileName (title: "File Name", minWidth: 100, maxWidth: 4000, headerAlignment: .left, contentAlignment: .left) sortkey mFileName
    column fileSize (title: "Size (bytes)", minWidth: 120, maxWidth: 120, headerAlignment: .right, contentAlignment: .right) sortkey fileSize
  }

  action removeDocumentationAction ;
  action showDocAction ;
  action saveDocAction ;

//······················································································································
//   SYMBOLS
//······················································································································

  stackView mSymbolsPage hStack {
    vStack set (width: 250) set (margins: 8) {
      StaticLabel (title: "Add Symbol From", bold: yes, small: yes) { set (alignment: .left) makeWidthExpandable () }
      hStack {
        Button (title: "File Library…", small: yes) { $run addSymbolFromLibraryAction }
        CanariAddSymbolInstancePullDownButton [configurator addSymbolInstancePullDownButton] {
          $enabled root.mSymbolTypes.count > 0
          $symbolTypeNames root.symbolTypeNames
        }
        space
      }
      StaticLabel (title: "Flip", bold: yes, small: yes) { set (alignment: .left) makeWidthExpandable () }
      hStack {
        Switch (title: "Horizontal Flip", small: yes) { $value root.mSymbolDisplayHorizontalFlip }
        Switch (title: "Vertical Flip", small: yes) { $value root.mSymbolDisplayVerticalFlip }
        space
      }
      StaticLabel (title: "Symbol Type", bold: yes, small: yes) { set (alignment: .left) makeWidthExpandable () }
      TextObserverField (bold: yes, small: yes) {
        set (alignment: .center)
        makeWidthExpandable ()
        $observedValue #symbolInstanceSelection.symbolTypeName
      }      
      StaticLabel (title: "Symbol Name", bold: yes, small: yes) { set (alignment: .left) makeWidthExpandable () }
      TextField (width: 70, small: yes) {
        makeWidthExpandable ()
        $value #symbolInstanceSelection.mInstanceName  (sendContinously : yes)
      }
      StaticLabel (title: "Symbol Errors", bold: yes, small: yes) { set (alignment: .left) makeWidthExpandable () }
      TextObserverView { setRedTextColor () $observedValue root.inconsistentSymbolNameSetMessage }
      space
    }
    separator
    GraphicView (minZoom: 10, maxZoom: 4000) {
      $horizontalFlip root.mSymbolDisplayHorizontalFlip
      $verticalFlip root.mSymbolDisplayVerticalFlip
      $graphicController #symbolDisplayController
      $zoom root.mSymbolDisplayZoom
    }
  }    

  arrayController #symbolDisplayController : root.mSymbolInstances ;
  selectionController SymbolInstanceInDevice #symbolInstanceSelection : #symbolDisplayController.selectedArray ;

  action addSymbolFromLibraryAction ;

//······················································································································
//   PACKAGES
//······················································································································

  stackView mPackagesPage hStack {
    vStack set (width: 250) set (margins: 8) {
      hStack {
        Button (title: "Add Package From File Library…", small: yes) {
          makeWidthExpandable ()
          $run addPackageFromLibraryAction
        }
      }
      hStack {
        Switch (title: "Horizontal Flip", small: yes) { $value root.mPackageDisplayHorizontalFlip }
        space
      }
      hStack {
        Switch (title: "Horizontal Flip", small: yes) { $value root.mPackageDisplayHorizontalFlip }
        space
      }
      hStack setCenterYAlignment () {
        ColorWell { $color prefs.packageColor (sendContinously: no) }
        Switch (title: "Display Packages", small: yes) { $value root.mShowPackages }
        space
      }
      hStack setCenterYAlignment () {
        ColorWell { $color prefs.padNumberColor (sendContinously: no) }
        Switch (title: "Display Pad Numbers", small: yes) { $value root.mShowPackagePadNumbers }
        space
      }
      hStack setCenterYAlignment () {
        ColorWell { $color prefs.frontSidePadColor (sendContinously: no) }
        Switch (title: "Display Front Side Pads", small: yes) { $value root.mShowPackageFrontPads }
        space
      }
      hStack setCenterYAlignment () {
        ColorWell { $color prefs.backSidePadColor (sendContinously: no) }
        Switch (title: "Display Back Side Pads", small: yes) { $value root.mShowPackageBackPads }
        space
      }
      space
    }
    separator
    GraphicView (minZoom: 10, maxZoom: 4000) {
      $horizontalFlip root.mPackageDisplayHorizontalFlip
      $verticalFlip root.mPackageDisplayVerticalFlip
      $graphicController #packageDisplayController
      $zoom root.mPackageDisplayZoom
    }
  }    


  action addPackageFromLibraryAction ;
  arrayController #packageDisplayController : root.mPackages ;

//······················································································································
//   LIBRARY
//······················································································································

  action resetSymbolsAndPackagesVersion ;
  action updateSymbolsAndPackagesAction ;

  autolayout
  tableViewController #symbolTypeController (allowsEmptySelection:no, allowsMultipleSelection:no) root.mSymbolTypes {
    column versionString (title: "Version", minWidth: 60, maxWidth: 60, headerAlignment: .center, contentAlignment: .center) sortkey versionString
    column instanceCount (title: "Instances", minWidth: 80, maxWidth: 80, headerAlignment: .center, contentAlignment: .center) sortkey instanceCount
    column mTypeName (title: "Symbol", minWidth: 100, maxWidth: 4000, headerAlignment: .left, contentAlignment: .left) sortkey mTypeName
    column documentSize (title: "Size (bytes)", minWidth: 100, maxWidth: 100, headerAlignment: .center, contentAlignment: .right) sortkey documentSize
  }

  selectionController SymbolTypeInDevice #symbolTypeSelection : #symbolTypeController.selectedArray ;

  autolayout
  tableViewController #packageController (allowsEmptySelection:no, allowsMultipleSelection:no) root.mPackages {
    column versionString (title: "Version", minWidth: 60, maxWidth: 60, headerAlignment: .center, contentAlignment: .center) sortkey versionString
    column mName (title: "Package", minWidth: 100, maxWidth: 4000, headerAlignment: .left, contentAlignment: .left) sortkey mName
    column documentSize (title: "Size (bytes)", minWidth: 100, maxWidth: 100, headerAlignment: .center, contentAlignment: .right) sortkey documentSize
  }

  stackView mLibraryPage vStack set (margins: 20) {
    hStack {
      Button (title: "Reset Symbols and Packages Version and Signature", small: yes) {
        $run resetSymbolsAndPackagesVersion
        $enabled (root.mPackages.count > 0) | (root.mSymbolTypes.count > 0)
      }
      Button (title: "Update Symbols and Packages", small: yes) {
        $run updateSymbolsAndPackagesAction
        $enabled (root.mPackages.count > 0) | (root.mSymbolTypes.count > 0)
      }
      space
    }
    vStack equalHeight () {
      vStack {
        hStack { StaticLabel (title: "Embedded Symbols", bold: yes, small: yes) space }
        hStack {
          TableView (small: yes, addControlButtons: no) { $tableValue #symbolTypeController }
          vStack {
            Button (title: "Reset Version", small: yes) {
              makeWidthExpandable ()
              $run resetSelectedSymbolVersion
              $enabled #symbolTypeController.selectedArray.count > 0
            }
            Button (title: "Update", small: yes) {
              makeWidthExpandable ()
              $run updateSelectedSymbols
              $enabled #symbolTypeController.selectedArray.count > 0
            }
            Button (title: "Export…", small: yes) {
              makeWidthExpandable ()
              $run exportSelectedSymbols
              $enabled #symbolTypeController.selectedArray.count > 0
            }
            Button (title: "Edit", small: yes) {
              makeWidthExpandable ()
              $run editSelectedSymbols
              $enabled #symbolTypeController.selectedArray.count > 0
            }
            Button (title: "Remove", small: yes) {
              makeWidthExpandable ()
              $run removeUselessSymbolTypeAction
              $enabled (#symbolTypeController.selectedArray.count == 1) & (#symbolTypeSelection.instanceCount == 0)
            }
            space
          }
        }
      }
      vStack {
        hStack { StaticLabel (title: "Embedded Packages", bold: yes, small: yes) space }
        hStack { 
          TableView (small: yes, addControlButtons: no) { $tableValue #packageController }
          vStack {
            Button (title: "Reset Version", small: yes) {
              makeWidthExpandable ()
              $run resetSelectedPackageVersion         
              $enabled #packageController.selectedArray.count > 0
            }
            Button (title: "Update", small: yes) {
              makeWidthExpandable ()
              $run updateSelectedPackages
              $enabled #packageController.selectedArray.count > 0
            }
            Button (title: "Export…", small: yes) {
              makeWidthExpandable ()
              $run exportSelectedPackages
              $enabled #packageController.selectedArray.count > 0
            }
            Button (title: "Edit", small: yes) {
              makeWidthExpandable ()
              $run editSelectedPackages
              $enabled #packageController.selectedArray.count > 0
            }
            space
          }
        }
      }
    }
  }

//--- Symbols
  action resetSelectedSymbolVersion ;
  action editSelectedSymbols ;
  action exportSelectedSymbols ;
  action updateSelectedSymbols ;
  action removeUselessSymbolTypeAction ;

//--- Packages
  action resetSelectedPackageVersion ;
  action editSelectedPackages ;
  action exportSelectedPackages ;
  action updateSelectedPackages ;

//······················································································································
//   ASSIGNMENTS
//······················································································································

  stackView mAssignmentsPage hStack set (margins: 8) {
    hStack $hidden !root.packagePadNameSetsAreConsistent | !root.symbolNameAreConsistent {
      vStack set (minWidth: 100) {
        StaticLabel (title: "Unassigned Pads", bold: yes, small: no) { set (alignment: .center) makeWidthExpandable () }
        CanariUnconnectedSymbolPadsInDeviceTableView [outlet mUnconnectedPadsInDeviceTableView] {
          $unconnectedPads root.unconnectedPads
        }
      }
      vStack set (minWidth: 200) {
        StaticLabel (title: "Unassigned Pins", bold: yes, small: no) { set (alignment: .center) makeWidthExpandable () }
        CanariUnconnectedSymbolPinsInDeviceTableView [outlet mUnconnectedSymbolPinsInDeviceTableView] {
          $unconnectedPins root.unconnectedPins
        }
      }
      vStack {
        space
        Button (title: "- Bind →", small: no) {
          makeWidthExpandable ()
          $run performBindAction
          $enabled self.hasUnconnectedPad & self.hasUnconnectedPin
        }
        Button (title: "- NC →", small: no) {
          makeWidthExpandable ()
          $run performNCAction
          $enabled self.hasUnconnectedPad
        }
        space
        Button (title: "← Unbind -", small: no) {
          makeWidthExpandable ()
          $run performUnbindAction
          $enabled self.hasAssignedPadProxies
        }
        Button (title: "← Unbind All -", small: no) {
          makeWidthExpandable ()
          $run performUnbindAllAction
          $enabled self.hasAssignedPadProxies
        }
        space
      }
      vStack set (minWidth: 300) {
        StaticLabel (title: "Assignments", bold: yes, small: no) { set (alignment: .center) makeWidthExpandable () }
        CanariAssignedPadProxysInDeviceTableView [outlet mAssignedPadProxyTableView] {
          $assignedPadProxies root.assignedPadProxies
        }
      }
    }
    hStack $hidden root.packagePadNameSetsAreConsistent & root.symbolNameAreConsistent {
      space
      vStack {
        space
        TextObserverField (bold: yes, small: no) { setRedTextColor () $observedValue self.assignmentInhibitionMessage }
        space
      }
      space
    }
  }

  transient Bool hasUnconnectedPad dependsFrom root.unconnectedPads ;
  transient Bool hasUnconnectedPin dependsFrom root.unconnectedPins ;
  transient Bool hasAssignedPadProxies dependsFrom root.assignedPadProxies ;
  transient String assignmentInhibitionMessage
    dependsFrom root.inconsistentPackagePadNameSetsMessage, root.inconsistentSymbolNameSetMessage
  ;

  action performBindAction ;
  action performNCAction ;
  action performUnbindAction ;
  action performUnbindAllAction ;

//······················································································································
//   INFOS
//······················································································································

  stackView mInfosPage vStack set (leftMargin: 20) set (rightMargin: 20) set (bottomMargin: 20) set (topMargin: 8) {
    hStack setFirstBaselineAlignment () {
      StaticLabel (title: "Device Prefix", bold: no, small: yes) { set (width: 84) }
      TextField (width: 56, small: yes) { $value root.mPrefix (sendContinously : yes) }
      StaticLabel (title: "This field only accepts lowercase abd uppercase ASCII letters.", bold: no, small: yes)
      space
      Button (title: "Reset Version and Signature", small: yes) { $run resetVersionAction }
    }
    vStack equalHeight () {
      hStack {
        vStack set (width: 84) { StaticLabel (title: "Status", bold: no, small: yes) space }
        TextObserverView { $observedValue self.mStatusMessage }
      }
      hStack {
        vStack set (width: 84) { StaticLabel (title: "Comments", bold: no, small: yes) space }
        TextView { $value root.mComments }
      }
    }
  }

  action resetVersionAction ;

}

//----------------------------------------------------------------------------*
