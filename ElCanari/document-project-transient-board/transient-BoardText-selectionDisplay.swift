//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func transient_BoardText_selectionDisplay (
       _ self_mX : Int,                    
       _ self_mY : Int,                    
       _ self_mLayer : BoardTextLayer,     
       _ self_mText : String,              
       _ self_mFontSize : Int,             
       _ self_mFont_descriptor : BoardFontDescriptor?
) -> EBShape {
//--- START OF USER ZONE 2
        let s = (self_mText == "") ? "Empty" : self_mText
        let bp = NSBezierPath ()
        let startX = canariUnitToCocoa (self_mX)
        var x = startX
        let startY = canariUnitToCocoa (self_mY)
        let fontFactor = CGFloat (self_mFontSize) / CGFloat (self_mFont_descriptor!.nominalSize)
        for character in s.unicodeScalars {
          if let characterDescriptor = self_mFont_descriptor?.dictionary [character.value] {
            for segment in characterDescriptor.segments {
              let x1 = CGFloat (segment.x1) * fontFactor
              let y1 = CGFloat (segment.y1) * fontFactor
              let x2 = CGFloat (segment.x2) * fontFactor
              let y2 = CGFloat (segment.y2) * fontFactor
              bp.move (to: NSPoint (x: x + x1, y: startY + y1))
              bp.line (to: NSPoint (x: x + x2, y: startY + y2))
            }
            x += CGFloat (characterDescriptor.advancement) * fontFactor
          }
        }
        bp.lineWidth = fontFactor * 2.0
        bp.lineCapStyle = .round
        bp.lineJoinStyle = .round
    //    let bounds = bp.bounds
        let textShape = EBStrokeBezierPathShape ([bp], .black)
      //--- Background
        let backgroundBP = NSBezierPath (rect: textShape.boundingBox.insetBy(dx: -1.0, dy: -1.0))
        let shape = EBShape ()
        shape.append (EBFilledBezierPathShape ([backgroundBP], .white))
        backgroundBP.lineWidth = 1.0
        backgroundBP.lineCapStyle = .round
        backgroundBP.lineJoinStyle = .round
        shape.append (EBStrokeBezierPathShape ([backgroundBP], .green))
        shape.append (textShape)
      //--- Knob
        shape.append (EBKnobShape (at: CGPoint (x: startX, y: startY), index: BOARD_TEXT_ORIGIN, .rect, 2.0))
      //---
        return shape
//--- END OF USER ZONE 2
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
