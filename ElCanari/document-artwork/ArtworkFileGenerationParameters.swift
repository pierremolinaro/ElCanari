//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ArtworkFileGenerationParameters : EBManagedObject,
  ArtworkFileGenerationParameters_drawBoardLimits,
  ArtworkFileGenerationParameters_drawComponentNamesTopSide,
  ArtworkFileGenerationParameters_drawComponentNamesBottomSide,
  ArtworkFileGenerationParameters_drawComponentValuesTopSide,
  ArtworkFileGenerationParameters_drawComponentValuesBottomSide,
  ArtworkFileGenerationParameters_drawPackageLegendTopSide,
  ArtworkFileGenerationParameters_drawPackageLegendBottomSide,
  ArtworkFileGenerationParameters_drawPadHolesInPDF,
  ArtworkFileGenerationParameters_drawPadsTopSide,
  ArtworkFileGenerationParameters_drawPadsBottomSide,
  ArtworkFileGenerationParameters_drawTextsLayoutTopSide,
  ArtworkFileGenerationParameters_drawTextsLayoutBottomSide,
  ArtworkFileGenerationParameters_drawTextsLegendTopSide,
  ArtworkFileGenerationParameters_drawTextsLegendBottomSide,
  ArtworkFileGenerationParameters_drawTracksTopSide,
  ArtworkFileGenerationParameters_drawTracksBottomSide,
  ArtworkFileGenerationParameters_drawVias,
  ArtworkFileGenerationParameters_fileExtension,
  ArtworkFileGenerationParameters_horizontalMirror,
  ArtworkFileGenerationParameters_name,
  ArtworkFileGenerationParameters_measurementUnitForPadHoleInPDF,
  ArtworkFileGenerationParameters_padHoleDiameterInPDF {

  //····················································································································
  //   Accessing drawBoardLimits stored property
  //····················································································································

  var drawBoardLimits_value : Bool {
    get {
      return self.drawBoardLimits.propval
    }
    set {
      self.drawBoardLimits.setProp (newValue)
    }
  }

  var drawBoardLimits_prop : EBSelection <Bool> {
    get {
      return self.drawBoardLimits.prop
    }
  }

  //····················································································································
  //   Accessing drawComponentNamesTopSide stored property
  //····················································································································

  var drawComponentNamesTopSide_value : Bool {
    get {
      return self.drawComponentNamesTopSide.propval
    }
    set {
      self.drawComponentNamesTopSide.setProp (newValue)
    }
  }

  var drawComponentNamesTopSide_prop : EBSelection <Bool> {
    get {
      return self.drawComponentNamesTopSide.prop
    }
  }

  //····················································································································
  //   Accessing drawComponentNamesBottomSide stored property
  //····················································································································

  var drawComponentNamesBottomSide_value : Bool {
    get {
      return self.drawComponentNamesBottomSide.propval
    }
    set {
      self.drawComponentNamesBottomSide.setProp (newValue)
    }
  }

  var drawComponentNamesBottomSide_prop : EBSelection <Bool> {
    get {
      return self.drawComponentNamesBottomSide.prop
    }
  }

  //····················································································································
  //   Accessing drawComponentValuesTopSide stored property
  //····················································································································

  var drawComponentValuesTopSide_value : Bool {
    get {
      return self.drawComponentValuesTopSide.propval
    }
    set {
      self.drawComponentValuesTopSide.setProp (newValue)
    }
  }

  var drawComponentValuesTopSide_prop : EBSelection <Bool> {
    get {
      return self.drawComponentValuesTopSide.prop
    }
  }

  //····················································································································
  //   Accessing drawComponentValuesBottomSide stored property
  //····················································································································

  var drawComponentValuesBottomSide_value : Bool {
    get {
      return self.drawComponentValuesBottomSide.propval
    }
    set {
      self.drawComponentValuesBottomSide.setProp (newValue)
    }
  }

  var drawComponentValuesBottomSide_prop : EBSelection <Bool> {
    get {
      return self.drawComponentValuesBottomSide.prop
    }
  }

  //····················································································································
  //   Accessing drawPackageLegendTopSide stored property
  //····················································································································

  var drawPackageLegendTopSide_value : Bool {
    get {
      return self.drawPackageLegendTopSide.propval
    }
    set {
      self.drawPackageLegendTopSide.setProp (newValue)
    }
  }

  var drawPackageLegendTopSide_prop : EBSelection <Bool> {
    get {
      return self.drawPackageLegendTopSide.prop
    }
  }

  //····················································································································
  //   Accessing drawPackageLegendBottomSide stored property
  //····················································································································

  var drawPackageLegendBottomSide_value : Bool {
    get {
      return self.drawPackageLegendBottomSide.propval
    }
    set {
      self.drawPackageLegendBottomSide.setProp (newValue)
    }
  }

  var drawPackageLegendBottomSide_prop : EBSelection <Bool> {
    get {
      return self.drawPackageLegendBottomSide.prop
    }
  }

  //····················································································································
  //   Accessing drawPadHolesInPDF stored property
  //····················································································································

  var drawPadHolesInPDF_value : Bool {
    get {
      return self.drawPadHolesInPDF.propval
    }
    set {
      self.drawPadHolesInPDF.setProp (newValue)
    }
  }

  var drawPadHolesInPDF_prop : EBSelection <Bool> {
    get {
      return self.drawPadHolesInPDF.prop
    }
  }

  //····················································································································
  //   Accessing drawPadsTopSide stored property
  //····················································································································

  var drawPadsTopSide_value : Bool {
    get {
      return self.drawPadsTopSide.propval
    }
    set {
      self.drawPadsTopSide.setProp (newValue)
    }
  }

  var drawPadsTopSide_prop : EBSelection <Bool> {
    get {
      return self.drawPadsTopSide.prop
    }
  }

  //····················································································································
  //   Accessing drawPadsBottomSide stored property
  //····················································································································

  var drawPadsBottomSide_value : Bool {
    get {
      return self.drawPadsBottomSide.propval
    }
    set {
      self.drawPadsBottomSide.setProp (newValue)
    }
  }

  var drawPadsBottomSide_prop : EBSelection <Bool> {
    get {
      return self.drawPadsBottomSide.prop
    }
  }

  //····················································································································
  //   Accessing drawTextsLayoutTopSide stored property
  //····················································································································

  var drawTextsLayoutTopSide_value : Bool {
    get {
      return self.drawTextsLayoutTopSide.propval
    }
    set {
      self.drawTextsLayoutTopSide.setProp (newValue)
    }
  }

  var drawTextsLayoutTopSide_prop : EBSelection <Bool> {
    get {
      return self.drawTextsLayoutTopSide.prop
    }
  }

  //····················································································································
  //   Accessing drawTextsLayoutBottomSide stored property
  //····················································································································

  var drawTextsLayoutBottomSide_value : Bool {
    get {
      return self.drawTextsLayoutBottomSide.propval
    }
    set {
      self.drawTextsLayoutBottomSide.setProp (newValue)
    }
  }

  var drawTextsLayoutBottomSide_prop : EBSelection <Bool> {
    get {
      return self.drawTextsLayoutBottomSide.prop
    }
  }

  //····················································································································
  //   Accessing drawTextsLegendTopSide stored property
  //····················································································································

  var drawTextsLegendTopSide_value : Bool {
    get {
      return self.drawTextsLegendTopSide.propval
    }
    set {
      self.drawTextsLegendTopSide.setProp (newValue)
    }
  }

  var drawTextsLegendTopSide_prop : EBSelection <Bool> {
    get {
      return self.drawTextsLegendTopSide.prop
    }
  }

  //····················································································································
  //   Accessing drawTextsLegendBottomSide stored property
  //····················································································································

  var drawTextsLegendBottomSide_value : Bool {
    get {
      return self.drawTextsLegendBottomSide.propval
    }
    set {
      self.drawTextsLegendBottomSide.setProp (newValue)
    }
  }

  var drawTextsLegendBottomSide_prop : EBSelection <Bool> {
    get {
      return self.drawTextsLegendBottomSide.prop
    }
  }

  //····················································································································
  //   Accessing drawTracksTopSide stored property
  //····················································································································

  var drawTracksTopSide_value : Bool {
    get {
      return self.drawTracksTopSide.propval
    }
    set {
      self.drawTracksTopSide.setProp (newValue)
    }
  }

  var drawTracksTopSide_prop : EBSelection <Bool> {
    get {
      return self.drawTracksTopSide.prop
    }
  }

  //····················································································································
  //   Accessing drawTracksBottomSide stored property
  //····················································································································

  var drawTracksBottomSide_value : Bool {
    get {
      return self.drawTracksBottomSide.propval
    }
    set {
      self.drawTracksBottomSide.setProp (newValue)
    }
  }

  var drawTracksBottomSide_prop : EBSelection <Bool> {
    get {
      return self.drawTracksBottomSide.prop
    }
  }

  //····················································································································
  //   Accessing drawVias stored property
  //····················································································································

  var drawVias_value : Bool {
    get {
      return self.drawVias.propval
    }
    set {
      self.drawVias.setProp (newValue)
    }
  }

  var drawVias_prop : EBSelection <Bool> {
    get {
      return self.drawVias.prop
    }
  }

  //····················································································································
  //   Accessing fileExtension stored property
  //····················································································································

  var fileExtension_value : String {
    get {
      return self.fileExtension.propval
    }
    set {
      self.fileExtension.setProp (newValue)
    }
  }

  var fileExtension_prop : EBSelection <String> {
    get {
      return self.fileExtension.prop
    }
  }

  //····················································································································
  //   Accessing horizontalMirror stored property
  //····················································································································

  var horizontalMirror_value : Bool {
    get {
      return self.horizontalMirror.propval
    }
    set {
      self.horizontalMirror.setProp (newValue)
    }
  }

  var horizontalMirror_prop : EBSelection <Bool> {
    get {
      return self.horizontalMirror.prop
    }
  }

  //····················································································································
  //   Accessing name stored property
  //····················································································································

  var name_value : String {
    get {
      return self.name.propval
    }
    set {
      self.name.setProp (newValue)
    }
  }

  var name_prop : EBSelection <String> {
    get {
      return self.name.prop
    }
  }

  //····················································································································
  //   Accessing measurementUnitForPadHoleInPDF stored property
  //····················································································································

  var measurementUnitForPadHoleInPDF_value : Int {
    get {
      return self.measurementUnitForPadHoleInPDF.propval
    }
    set {
      self.measurementUnitForPadHoleInPDF.setProp (newValue)
    }
  }

  var measurementUnitForPadHoleInPDF_prop : EBSelection <Int> {
    get {
      return self.measurementUnitForPadHoleInPDF.prop
    }
  }

  //····················································································································
  //   Accessing padHoleDiameterInPDF stored property
  //····················································································································

  var padHoleDiameterInPDF_value : Int {
    get {
      return self.padHoleDiameterInPDF.propval
    }
    set {
      self.padHoleDiameterInPDF.setProp (newValue)
    }
  }

  var padHoleDiameterInPDF_prop : EBSelection <Int> {
    get {
      return self.padHoleDiameterInPDF.prop
    }
  }

  //····················································································································
  //    Stored Properties
  //····················································································································

  var drawBoardLimits = EBStoredProperty_Bool (false)
  var drawComponentNamesTopSide = EBStoredProperty_Bool (false)
  var drawComponentNamesBottomSide = EBStoredProperty_Bool (false)
  var drawComponentValuesTopSide = EBStoredProperty_Bool (false)
  var drawComponentValuesBottomSide = EBStoredProperty_Bool (false)
  var drawPackageLegendTopSide = EBStoredProperty_Bool (false)
  var drawPackageLegendBottomSide = EBStoredProperty_Bool (false)
  var drawPadHolesInPDF = EBStoredProperty_Bool (false)
  var drawPadsTopSide = EBStoredProperty_Bool (false)
  var drawPadsBottomSide = EBStoredProperty_Bool (false)
  var drawTextsLayoutTopSide = EBStoredProperty_Bool (false)
  var drawTextsLayoutBottomSide = EBStoredProperty_Bool (false)
  var drawTextsLegendTopSide = EBStoredProperty_Bool (false)
  var drawTextsLegendBottomSide = EBStoredProperty_Bool (false)
  var drawTracksTopSide = EBStoredProperty_Bool (false)
  var drawTracksBottomSide = EBStoredProperty_Bool (false)
  var drawVias = EBStoredProperty_Bool (false)
  var fileExtension = EBStoredProperty_String ("?")
  var horizontalMirror = EBStoredProperty_Bool (false)
  var name = EBStoredProperty_String ("Unnamed")
  var measurementUnitForPadHoleInPDF = EBStoredProperty_Int (90000)
  var padHoleDiameterInPDF = EBStoredProperty_Int (90000)

  //····················································································································
  //    Transient properties
  //····················································································································


  //····················································································································
  //    Relationships
  //····················································································································


  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
  //--- Install property observers for transients
  //--- Install undoers for properties
    self.drawBoardLimits.undoManager = undoManager ()
    self.drawComponentNamesTopSide.undoManager = undoManager ()
    self.drawComponentNamesBottomSide.undoManager = undoManager ()
    self.drawComponentValuesTopSide.undoManager = undoManager ()
    self.drawComponentValuesBottomSide.undoManager = undoManager ()
    self.drawPackageLegendTopSide.undoManager = undoManager ()
    self.drawPackageLegendBottomSide.undoManager = undoManager ()
    self.drawPadHolesInPDF.undoManager = undoManager ()
    self.drawPadsTopSide.undoManager = undoManager ()
    self.drawPadsBottomSide.undoManager = undoManager ()
    self.drawTextsLayoutTopSide.undoManager = undoManager ()
    self.drawTextsLayoutBottomSide.undoManager = undoManager ()
    self.drawTextsLegendTopSide.undoManager = undoManager ()
    self.drawTextsLegendBottomSide.undoManager = undoManager ()
    self.drawTracksTopSide.undoManager = undoManager ()
    self.drawTracksBottomSide.undoManager = undoManager ()
    self.drawVias.undoManager = undoManager ()
    self.fileExtension.undoManager = undoManager ()
    self.horizontalMirror.undoManager = undoManager ()
    self.name.undoManager = undoManager ()
    self.measurementUnitForPadHoleInPDF.undoManager = undoManager ()
    self.padHoleDiameterInPDF.undoManager = undoManager ()
  //--- Install owner for relationships
  //--- register properties for handling signature
    drawBoardLimits.setSignatureObserver (observer: self)
    drawComponentNamesBottomSide.setSignatureObserver (observer: self)
    drawComponentNamesTopSide.setSignatureObserver (observer: self)
    drawComponentValuesBottomSide.setSignatureObserver (observer: self)
    drawComponentValuesTopSide.setSignatureObserver (observer: self)
    drawPackageLegendBottomSide.setSignatureObserver (observer: self)
    drawPackageLegendTopSide.setSignatureObserver (observer: self)
    drawPadHolesInPDF.setSignatureObserver (observer: self)
    drawPadsBottomSide.setSignatureObserver (observer: self)
    drawPadsTopSide.setSignatureObserver (observer: self)
    drawTextsLayoutBottomSide.setSignatureObserver (observer: self)
    drawTextsLayoutTopSide.setSignatureObserver (observer: self)
    drawTextsLegendBottomSide.setSignatureObserver (observer: self)
    drawTextsLegendTopSide.setSignatureObserver (observer: self)
    drawTracksBottomSide.setSignatureObserver (observer: self)
    drawTracksTopSide.setSignatureObserver (observer: self)
    drawVias.setSignatureObserver (observer: self)
    fileExtension.setSignatureObserver (observer: self)
    horizontalMirror.setSignatureObserver (observer: self)
    measurementUnitForPadHoleInPDF.setSignatureObserver (observer: self)
    name.setSignatureObserver (observer: self)
    padHoleDiameterInPDF.setSignatureObserver (observer: self)
  }

  //····················································································································

  deinit {
  //--- Remove observers
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "drawBoardLimits",
      idx:self.drawBoardLimits.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawBoardLimits.mObserverExplorer,
      valueExplorer:&self.drawBoardLimits.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawComponentNamesTopSide",
      idx:self.drawComponentNamesTopSide.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawComponentNamesTopSide.mObserverExplorer,
      valueExplorer:&self.drawComponentNamesTopSide.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawComponentNamesBottomSide",
      idx:self.drawComponentNamesBottomSide.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawComponentNamesBottomSide.mObserverExplorer,
      valueExplorer:&self.drawComponentNamesBottomSide.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawComponentValuesTopSide",
      idx:self.drawComponentValuesTopSide.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawComponentValuesTopSide.mObserverExplorer,
      valueExplorer:&self.drawComponentValuesTopSide.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawComponentValuesBottomSide",
      idx:self.drawComponentValuesBottomSide.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawComponentValuesBottomSide.mObserverExplorer,
      valueExplorer:&self.drawComponentValuesBottomSide.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPackageLegendTopSide",
      idx:self.drawPackageLegendTopSide.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawPackageLegendTopSide.mObserverExplorer,
      valueExplorer:&self.drawPackageLegendTopSide.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPackageLegendBottomSide",
      idx:self.drawPackageLegendBottomSide.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawPackageLegendBottomSide.mObserverExplorer,
      valueExplorer:&self.drawPackageLegendBottomSide.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPadHolesInPDF",
      idx:self.drawPadHolesInPDF.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawPadHolesInPDF.mObserverExplorer,
      valueExplorer:&self.drawPadHolesInPDF.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPadsTopSide",
      idx:self.drawPadsTopSide.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawPadsTopSide.mObserverExplorer,
      valueExplorer:&self.drawPadsTopSide.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPadsBottomSide",
      idx:self.drawPadsBottomSide.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawPadsBottomSide.mObserverExplorer,
      valueExplorer:&self.drawPadsBottomSide.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTextsLayoutTopSide",
      idx:self.drawTextsLayoutTopSide.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawTextsLayoutTopSide.mObserverExplorer,
      valueExplorer:&self.drawTextsLayoutTopSide.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTextsLayoutBottomSide",
      idx:self.drawTextsLayoutBottomSide.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawTextsLayoutBottomSide.mObserverExplorer,
      valueExplorer:&self.drawTextsLayoutBottomSide.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTextsLegendTopSide",
      idx:self.drawTextsLegendTopSide.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawTextsLegendTopSide.mObserverExplorer,
      valueExplorer:&self.drawTextsLegendTopSide.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTextsLegendBottomSide",
      idx:self.drawTextsLegendBottomSide.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawTextsLegendBottomSide.mObserverExplorer,
      valueExplorer:&self.drawTextsLegendBottomSide.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTracksTopSide",
      idx:self.drawTracksTopSide.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawTracksTopSide.mObserverExplorer,
      valueExplorer:&self.drawTracksTopSide.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTracksBottomSide",
      idx:self.drawTracksBottomSide.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawTracksBottomSide.mObserverExplorer,
      valueExplorer:&self.drawTracksBottomSide.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawVias",
      idx:self.drawVias.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawVias.mObserverExplorer,
      valueExplorer:&self.drawVias.mValueExplorer
    )
    createEntryForPropertyNamed (
      "fileExtension",
      idx:self.fileExtension.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.fileExtension.mObserverExplorer,
      valueExplorer:&self.fileExtension.mValueExplorer
    )
    createEntryForPropertyNamed (
      "horizontalMirror",
      idx:self.horizontalMirror.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.horizontalMirror.mObserverExplorer,
      valueExplorer:&self.horizontalMirror.mValueExplorer
    )
    createEntryForPropertyNamed (
      "name",
      idx:self.name.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.name.mObserverExplorer,
      valueExplorer:&self.name.mValueExplorer
    )
    createEntryForPropertyNamed (
      "measurementUnitForPadHoleInPDF",
      idx:self.measurementUnitForPadHoleInPDF.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.measurementUnitForPadHoleInPDF.mObserverExplorer,
      valueExplorer:&self.measurementUnitForPadHoleInPDF.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padHoleDiameterInPDF",
      idx:self.padHoleDiameterInPDF.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padHoleDiameterInPDF.mObserverExplorer,
      valueExplorer:&self.padHoleDiameterInPDF.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.drawBoardLimits.mObserverExplorer = nil
    self.drawBoardLimits.mValueExplorer = nil
    self.drawComponentNamesTopSide.mObserverExplorer = nil
    self.drawComponentNamesTopSide.mValueExplorer = nil
    self.drawComponentNamesBottomSide.mObserverExplorer = nil
    self.drawComponentNamesBottomSide.mValueExplorer = nil
    self.drawComponentValuesTopSide.mObserverExplorer = nil
    self.drawComponentValuesTopSide.mValueExplorer = nil
    self.drawComponentValuesBottomSide.mObserverExplorer = nil
    self.drawComponentValuesBottomSide.mValueExplorer = nil
    self.drawPackageLegendTopSide.mObserverExplorer = nil
    self.drawPackageLegendTopSide.mValueExplorer = nil
    self.drawPackageLegendBottomSide.mObserverExplorer = nil
    self.drawPackageLegendBottomSide.mValueExplorer = nil
    self.drawPadHolesInPDF.mObserverExplorer = nil
    self.drawPadHolesInPDF.mValueExplorer = nil
    self.drawPadsTopSide.mObserverExplorer = nil
    self.drawPadsTopSide.mValueExplorer = nil
    self.drawPadsBottomSide.mObserverExplorer = nil
    self.drawPadsBottomSide.mValueExplorer = nil
    self.drawTextsLayoutTopSide.mObserverExplorer = nil
    self.drawTextsLayoutTopSide.mValueExplorer = nil
    self.drawTextsLayoutBottomSide.mObserverExplorer = nil
    self.drawTextsLayoutBottomSide.mValueExplorer = nil
    self.drawTextsLegendTopSide.mObserverExplorer = nil
    self.drawTextsLegendTopSide.mValueExplorer = nil
    self.drawTextsLegendBottomSide.mObserverExplorer = nil
    self.drawTextsLegendBottomSide.mValueExplorer = nil
    self.drawTracksTopSide.mObserverExplorer = nil
    self.drawTracksTopSide.mValueExplorer = nil
    self.drawTracksBottomSide.mObserverExplorer = nil
    self.drawTracksBottomSide.mValueExplorer = nil
    self.drawVias.mObserverExplorer = nil
    self.drawVias.mValueExplorer = nil
    self.fileExtension.mObserverExplorer = nil
    self.fileExtension.mValueExplorer = nil
    self.horizontalMirror.mObserverExplorer = nil
    self.horizontalMirror.mValueExplorer = nil
    self.name.mObserverExplorer = nil
    self.name.mValueExplorer = nil
    self.measurementUnitForPadHoleInPDF.mObserverExplorer = nil
    self.measurementUnitForPadHoleInPDF.mValueExplorer = nil
    self.padHoleDiameterInPDF.mObserverExplorer = nil
    self.padHoleDiameterInPDF.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.drawBoardLimits.storeIn (dictionary: ioDictionary, forKey: "drawBoardLimits")
    self.drawComponentNamesTopSide.storeIn (dictionary: ioDictionary, forKey: "drawComponentNamesTopSide")
    self.drawComponentNamesBottomSide.storeIn (dictionary: ioDictionary, forKey: "drawComponentNamesBottomSide")
    self.drawComponentValuesTopSide.storeIn (dictionary: ioDictionary, forKey: "drawComponentValuesTopSide")
    self.drawComponentValuesBottomSide.storeIn (dictionary: ioDictionary, forKey: "drawComponentValuesBottomSide")
    self.drawPackageLegendTopSide.storeIn (dictionary: ioDictionary, forKey: "drawPackageLegendTopSide")
    self.drawPackageLegendBottomSide.storeIn (dictionary: ioDictionary, forKey: "drawPackageLegendBottomSide")
    self.drawPadHolesInPDF.storeIn (dictionary: ioDictionary, forKey: "drawPadHolesInPDF")
    self.drawPadsTopSide.storeIn (dictionary: ioDictionary, forKey: "drawPadsTopSide")
    self.drawPadsBottomSide.storeIn (dictionary: ioDictionary, forKey: "drawPadsBottomSide")
    self.drawTextsLayoutTopSide.storeIn (dictionary: ioDictionary, forKey: "drawTextsLayoutTopSide")
    self.drawTextsLayoutBottomSide.storeIn (dictionary: ioDictionary, forKey: "drawTextsLayoutBottomSide")
    self.drawTextsLegendTopSide.storeIn (dictionary: ioDictionary, forKey: "drawTextsLegendTopSide")
    self.drawTextsLegendBottomSide.storeIn (dictionary: ioDictionary, forKey: "drawTextsLegendBottomSide")
    self.drawTracksTopSide.storeIn (dictionary: ioDictionary, forKey: "drawTracksTopSide")
    self.drawTracksBottomSide.storeIn (dictionary: ioDictionary, forKey: "drawTracksBottomSide")
    self.drawVias.storeIn (dictionary: ioDictionary, forKey: "drawVias")
    self.fileExtension.storeIn (dictionary: ioDictionary, forKey: "fileExtension")
    self.horizontalMirror.storeIn (dictionary: ioDictionary, forKey: "horizontalMirror")
    self.name.storeIn (dictionary: ioDictionary, forKey: "name")
    self.measurementUnitForPadHoleInPDF.storeIn (dictionary: ioDictionary, forKey: "measurementUnitForPadHoleInPDF")
    self.padHoleDiameterInPDF.storeIn (dictionary: ioDictionary, forKey: "padHoleDiameterInPDF")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.drawBoardLimits.readFrom (dictionary: inDictionary, forKey:"drawBoardLimits")
    self.drawComponentNamesTopSide.readFrom (dictionary: inDictionary, forKey:"drawComponentNamesTopSide")
    self.drawComponentNamesBottomSide.readFrom (dictionary: inDictionary, forKey:"drawComponentNamesBottomSide")
    self.drawComponentValuesTopSide.readFrom (dictionary: inDictionary, forKey:"drawComponentValuesTopSide")
    self.drawComponentValuesBottomSide.readFrom (dictionary: inDictionary, forKey:"drawComponentValuesBottomSide")
    self.drawPackageLegendTopSide.readFrom (dictionary: inDictionary, forKey:"drawPackageLegendTopSide")
    self.drawPackageLegendBottomSide.readFrom (dictionary: inDictionary, forKey:"drawPackageLegendBottomSide")
    self.drawPadHolesInPDF.readFrom (dictionary: inDictionary, forKey:"drawPadHolesInPDF")
    self.drawPadsTopSide.readFrom (dictionary: inDictionary, forKey:"drawPadsTopSide")
    self.drawPadsBottomSide.readFrom (dictionary: inDictionary, forKey:"drawPadsBottomSide")
    self.drawTextsLayoutTopSide.readFrom (dictionary: inDictionary, forKey:"drawTextsLayoutTopSide")
    self.drawTextsLayoutBottomSide.readFrom (dictionary: inDictionary, forKey:"drawTextsLayoutBottomSide")
    self.drawTextsLegendTopSide.readFrom (dictionary: inDictionary, forKey:"drawTextsLegendTopSide")
    self.drawTextsLegendBottomSide.readFrom (dictionary: inDictionary, forKey:"drawTextsLegendBottomSide")
    self.drawTracksTopSide.readFrom (dictionary: inDictionary, forKey:"drawTracksTopSide")
    self.drawTracksBottomSide.readFrom (dictionary: inDictionary, forKey:"drawTracksBottomSide")
    self.drawVias.readFrom (dictionary: inDictionary, forKey:"drawVias")
    self.fileExtension.readFrom (dictionary: inDictionary, forKey:"fileExtension")
    self.horizontalMirror.readFrom (dictionary: inDictionary, forKey:"horizontalMirror")
    self.name.readFrom (dictionary: inDictionary, forKey:"name")
    self.measurementUnitForPadHoleInPDF.readFrom (dictionary: inDictionary, forKey:"measurementUnitForPadHoleInPDF")
    self.padHoleDiameterInPDF.readFrom (dictionary: inDictionary, forKey:"padHoleDiameterInPDF")
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (drawBoardLimits.signature ())
    crc.accumulateUInt32 (drawComponentNamesBottomSide.signature ())
    crc.accumulateUInt32 (drawComponentNamesTopSide.signature ())
    crc.accumulateUInt32 (drawComponentValuesBottomSide.signature ())
    crc.accumulateUInt32 (drawComponentValuesTopSide.signature ())
    crc.accumulateUInt32 (drawPackageLegendBottomSide.signature ())
    crc.accumulateUInt32 (drawPackageLegendTopSide.signature ())
    crc.accumulateUInt32 (drawPadHolesInPDF.signature ())
    crc.accumulateUInt32 (drawPadsBottomSide.signature ())
    crc.accumulateUInt32 (drawPadsTopSide.signature ())
    crc.accumulateUInt32 (drawTextsLayoutBottomSide.signature ())
    crc.accumulateUInt32 (drawTextsLayoutTopSide.signature ())
    crc.accumulateUInt32 (drawTextsLegendBottomSide.signature ())
    crc.accumulateUInt32 (drawTextsLegendTopSide.signature ())
    crc.accumulateUInt32 (drawTracksBottomSide.signature ())
    crc.accumulateUInt32 (drawTracksTopSide.signature ())
    crc.accumulateUInt32 (drawVias.signature ())
    crc.accumulateUInt32 (fileExtension.signature ())
    crc.accumulateUInt32 (horizontalMirror.signature ())
    crc.accumulateUInt32 (measurementUnitForPadHoleInPDF.signature ())
    crc.accumulateUInt32 (name.signature ())
    crc.accumulateUInt32 (padHoleDiameterInPDF.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ArtworkFileGenerationParameters : ReadOnlyAbstractArrayProperty <ArtworkFileGenerationParameters> {

  //····················································································································
  //   Observers of 'drawBoardLimits' stored property
  //····················································································································

  private var mObserversOf_drawBoardLimits = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawBoardLimits (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawBoardLimits.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawBoardLimits.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawBoardLimits (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawBoardLimits.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawBoardLimits.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawBoardLimits_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawBoardLimits {
        managedObject.drawBoardLimits.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawBoardLimits_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawBoardLimits {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawBoardLimits.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawComponentNamesTopSide' stored property
  //····················································································································

  private var mObserversOf_drawComponentNamesTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawComponentNamesTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawComponentNamesTopSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentNamesTopSide.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawComponentNamesTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawComponentNamesTopSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentNamesTopSide.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawComponentNamesTopSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawComponentNamesTopSide {
        managedObject.drawComponentNamesTopSide.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawComponentNamesTopSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawComponentNamesTopSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawComponentNamesTopSide.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawComponentNamesBottomSide' stored property
  //····················································································································

  private var mObserversOf_drawComponentNamesBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawComponentNamesBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawComponentNamesBottomSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentNamesBottomSide.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawComponentNamesBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawComponentNamesBottomSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentNamesBottomSide.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawComponentNamesBottomSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawComponentNamesBottomSide {
        managedObject.drawComponentNamesBottomSide.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawComponentNamesBottomSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawComponentNamesBottomSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawComponentNamesBottomSide.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawComponentValuesTopSide' stored property
  //····················································································································

  private var mObserversOf_drawComponentValuesTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawComponentValuesTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawComponentValuesTopSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentValuesTopSide.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawComponentValuesTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawComponentValuesTopSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentValuesTopSide.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawComponentValuesTopSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawComponentValuesTopSide {
        managedObject.drawComponentValuesTopSide.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawComponentValuesTopSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawComponentValuesTopSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawComponentValuesTopSide.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawComponentValuesBottomSide' stored property
  //····················································································································

  private var mObserversOf_drawComponentValuesBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawComponentValuesBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawComponentValuesBottomSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentValuesBottomSide.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawComponentValuesBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawComponentValuesBottomSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentValuesBottomSide.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawComponentValuesBottomSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawComponentValuesBottomSide {
        managedObject.drawComponentValuesBottomSide.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawComponentValuesBottomSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawComponentValuesBottomSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawComponentValuesBottomSide.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawPackageLegendTopSide' stored property
  //····················································································································

  private var mObserversOf_drawPackageLegendTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawPackageLegendTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawPackageLegendTopSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPackageLegendTopSide.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawPackageLegendTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawPackageLegendTopSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPackageLegendTopSide.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawPackageLegendTopSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawPackageLegendTopSide {
        managedObject.drawPackageLegendTopSide.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawPackageLegendTopSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawPackageLegendTopSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawPackageLegendTopSide.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawPackageLegendBottomSide' stored property
  //····················································································································

  private var mObserversOf_drawPackageLegendBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawPackageLegendBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawPackageLegendBottomSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPackageLegendBottomSide.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawPackageLegendBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawPackageLegendBottomSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPackageLegendBottomSide.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawPackageLegendBottomSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawPackageLegendBottomSide {
        managedObject.drawPackageLegendBottomSide.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawPackageLegendBottomSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawPackageLegendBottomSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawPackageLegendBottomSide.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawPadHolesInPDF' stored property
  //····················································································································

  private var mObserversOf_drawPadHolesInPDF = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawPadHolesInPDF (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawPadHolesInPDF.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadHolesInPDF.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawPadHolesInPDF (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawPadHolesInPDF.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadHolesInPDF.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawPadHolesInPDF_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawPadHolesInPDF {
        managedObject.drawPadHolesInPDF.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawPadHolesInPDF_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawPadHolesInPDF {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawPadHolesInPDF.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawPadsTopSide' stored property
  //····················································································································

  private var mObserversOf_drawPadsTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawPadsTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawPadsTopSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadsTopSide.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawPadsTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawPadsTopSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadsTopSide.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawPadsTopSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawPadsTopSide {
        managedObject.drawPadsTopSide.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawPadsTopSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawPadsTopSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawPadsTopSide.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawPadsBottomSide' stored property
  //····················································································································

  private var mObserversOf_drawPadsBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawPadsBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawPadsBottomSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadsBottomSide.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawPadsBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawPadsBottomSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadsBottomSide.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawPadsBottomSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawPadsBottomSide {
        managedObject.drawPadsBottomSide.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawPadsBottomSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawPadsBottomSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawPadsBottomSide.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTextsLayoutTopSide' stored property
  //····················································································································

  private var mObserversOf_drawTextsLayoutTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTextsLayoutTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawTextsLayoutTopSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLayoutTopSide.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTextsLayoutTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawTextsLayoutTopSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLayoutTopSide.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTextsLayoutTopSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawTextsLayoutTopSide {
        managedObject.drawTextsLayoutTopSide.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTextsLayoutTopSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawTextsLayoutTopSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawTextsLayoutTopSide.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTextsLayoutBottomSide' stored property
  //····················································································································

  private var mObserversOf_drawTextsLayoutBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTextsLayoutBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawTextsLayoutBottomSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLayoutBottomSide.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTextsLayoutBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawTextsLayoutBottomSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLayoutBottomSide.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTextsLayoutBottomSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawTextsLayoutBottomSide {
        managedObject.drawTextsLayoutBottomSide.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTextsLayoutBottomSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawTextsLayoutBottomSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawTextsLayoutBottomSide.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTextsLegendTopSide' stored property
  //····················································································································

  private var mObserversOf_drawTextsLegendTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTextsLegendTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawTextsLegendTopSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLegendTopSide.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTextsLegendTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawTextsLegendTopSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLegendTopSide.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTextsLegendTopSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawTextsLegendTopSide {
        managedObject.drawTextsLegendTopSide.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTextsLegendTopSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawTextsLegendTopSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawTextsLegendTopSide.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTextsLegendBottomSide' stored property
  //····················································································································

  private var mObserversOf_drawTextsLegendBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTextsLegendBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawTextsLegendBottomSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLegendBottomSide.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTextsLegendBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawTextsLegendBottomSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLegendBottomSide.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTextsLegendBottomSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawTextsLegendBottomSide {
        managedObject.drawTextsLegendBottomSide.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTextsLegendBottomSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawTextsLegendBottomSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawTextsLegendBottomSide.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTracksTopSide' stored property
  //····················································································································

  private var mObserversOf_drawTracksTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTracksTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawTracksTopSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksTopSide.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTracksTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawTracksTopSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksTopSide.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTracksTopSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawTracksTopSide {
        managedObject.drawTracksTopSide.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTracksTopSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawTracksTopSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawTracksTopSide.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTracksBottomSide' stored property
  //····················································································································

  private var mObserversOf_drawTracksBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTracksBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawTracksBottomSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksBottomSide.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTracksBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawTracksBottomSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksBottomSide.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTracksBottomSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawTracksBottomSide {
        managedObject.drawTracksBottomSide.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTracksBottomSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawTracksBottomSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawTracksBottomSide.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawVias' stored property
  //····················································································································

  private var mObserversOf_drawVias = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawVias (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawVias.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawVias.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawVias (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawVias.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawVias.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawVias_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawVias {
        managedObject.drawVias.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawVias_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawVias {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawVias.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'fileExtension' stored property
  //····················································································································

  private var mObserversOf_fileExtension = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_fileExtension (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_fileExtension.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.fileExtension.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_fileExtension (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_fileExtension.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.fileExtension.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_fileExtension_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_fileExtension {
        managedObject.fileExtension.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_fileExtension_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_fileExtension {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.fileExtension.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'horizontalMirror' stored property
  //····················································································································

  private var mObserversOf_horizontalMirror = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_horizontalMirror (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_horizontalMirror.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.horizontalMirror.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_horizontalMirror (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_horizontalMirror.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.horizontalMirror.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_horizontalMirror_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_horizontalMirror {
        managedObject.horizontalMirror.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_horizontalMirror_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_horizontalMirror {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.horizontalMirror.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_name.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_name.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_name_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_name {
        managedObject.name.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_name_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_name {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.name.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'measurementUnitForPadHoleInPDF' stored property
  //····················································································································

  private var mObserversOf_measurementUnitForPadHoleInPDF = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_measurementUnitForPadHoleInPDF (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_measurementUnitForPadHoleInPDF.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.measurementUnitForPadHoleInPDF.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_measurementUnitForPadHoleInPDF (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_measurementUnitForPadHoleInPDF.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.measurementUnitForPadHoleInPDF.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_measurementUnitForPadHoleInPDF_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_measurementUnitForPadHoleInPDF {
        managedObject.measurementUnitForPadHoleInPDF.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_measurementUnitForPadHoleInPDF_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_measurementUnitForPadHoleInPDF {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.measurementUnitForPadHoleInPDF.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padHoleDiameterInPDF' stored property
  //····················································································································

  private var mObserversOf_padHoleDiameterInPDF = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padHoleDiameterInPDF (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_padHoleDiameterInPDF.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padHoleDiameterInPDF.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padHoleDiameterInPDF (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_padHoleDiameterInPDF.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padHoleDiameterInPDF.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padHoleDiameterInPDF_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_padHoleDiameterInPDF {
        managedObject.padHoleDiameterInPDF.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padHoleDiameterInPDF_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_padHoleDiameterInPDF {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.padHoleDiameterInPDF.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_ArtworkFileGenerationParameters : ReadOnlyArrayOf_ArtworkFileGenerationParameters {

  var readModelFunction : Optional<() -> EBSelection < [ArtworkFileGenerationParameters] > >

  private var prop_cache : EBSelection < [ArtworkFileGenerationParameters] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <ArtworkFileGenerationParameters> ()

  override var prop : EBSelection < [ArtworkFileGenerationParameters] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <ArtworkFileGenerationParameters>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <ArtworkFileGenerationParameters> ()
        case .single (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_drawBoardLimits_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawComponentNamesTopSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawComponentNamesBottomSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawComponentValuesTopSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawComponentValuesBottomSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawPackageLegendTopSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawPackageLegendBottomSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawPadHolesInPDF_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawPadsTopSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawPadsBottomSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawTextsLayoutTopSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawTextsLayoutBottomSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawTextsLegendTopSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawTextsLegendBottomSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawTracksTopSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawTracksBottomSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawVias_fromElementsOfSet (removedSet)
        removeEBObserversOf_fileExtension_fromElementsOfSet (removedSet)
        removeEBObserversOf_horizontalMirror_fromElementsOfSet (removedSet)
        removeEBObserversOf_name_fromElementsOfSet (removedSet)
        removeEBObserversOf_measurementUnitForPadHoleInPDF_fromElementsOfSet (removedSet)
        removeEBObserversOf_padHoleDiameterInPDF_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_drawBoardLimits_toElementsOfSet (addedSet)
        addEBObserversOf_drawComponentNamesTopSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawComponentNamesBottomSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawComponentValuesTopSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawComponentValuesBottomSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawPackageLegendTopSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawPackageLegendBottomSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawPadHolesInPDF_toElementsOfSet (addedSet)
        addEBObserversOf_drawPadsTopSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawPadsBottomSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawTextsLayoutTopSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawTextsLayoutBottomSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawTextsLegendTopSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawTextsLegendBottomSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawTracksTopSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawTracksBottomSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawVias_toElementsOfSet (addedSet)
        addEBObserversOf_fileExtension_toElementsOfSet (addedSet)
        addEBObserversOf_horizontalMirror_toElementsOfSet (addedSet)
        addEBObserversOf_name_toElementsOfSet (addedSet)
        addEBObserversOf_measurementUnitForPadHoleInPDF_toElementsOfSet (addedSet)
        addEBObserversOf_padHoleDiameterInPDF_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawBoardLimits : class {
  var drawBoardLimits : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawComponentNamesTopSide : class {
  var drawComponentNamesTopSide : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawComponentNamesBottomSide : class {
  var drawComponentNamesBottomSide : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawComponentValuesTopSide : class {
  var drawComponentValuesTopSide : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawComponentValuesBottomSide : class {
  var drawComponentValuesBottomSide : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPackageLegendTopSide : class {
  var drawPackageLegendTopSide : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPackageLegendBottomSide : class {
  var drawPackageLegendBottomSide : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPadHolesInPDF : class {
  var drawPadHolesInPDF : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPadsTopSide : class {
  var drawPadsTopSide : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPadsBottomSide : class {
  var drawPadsBottomSide : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTextsLayoutTopSide : class {
  var drawTextsLayoutTopSide : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTextsLayoutBottomSide : class {
  var drawTextsLayoutBottomSide : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTextsLegendTopSide : class {
  var drawTextsLegendTopSide : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTextsLegendBottomSide : class {
  var drawTextsLegendBottomSide : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTracksTopSide : class {
  var drawTracksTopSide : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTracksBottomSide : class {
  var drawTracksBottomSide : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawVias : class {
  var drawVias : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_fileExtension : class {
  var fileExtension : EBStoredProperty_String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_horizontalMirror : class {
  var horizontalMirror : EBStoredProperty_Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_name : class {
  var name : EBStoredProperty_String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_measurementUnitForPadHoleInPDF : class {
  var measurementUnitForPadHoleInPDF : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_padHoleDiameterInPDF : class {
  var padHoleDiameterInPDF : EBStoredProperty_Int { get }
}


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

