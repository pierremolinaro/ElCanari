//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(PMArtworkDocument) class PMArtworkDocument : EBManagedDocument {

  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var mAddGenerationFileButton : EBButton?
  @IBOutlet var mCommentTextView : EBTextView?
  @IBOutlet var mDataTableView : EBTableView?
  @IBOutlet var mDimensionForPadHoleInPDFTextField : CanariDimensionTextField?
  @IBOutlet var mDrawBoardInternalLimitsSwitch : EBSwitch?
  @IBOutlet var mDrawBoardLimitsSwitch : EBSwitch?
  @IBOutlet var mDrawComponentNamesBottomSideSwitch : EBSwitch?
  @IBOutlet var mDrawComponentNamesTopSideSwitch : EBSwitch?
  @IBOutlet var mDrawComponentValuesBottomSideSwitch : EBSwitch?
  @IBOutlet var mDrawComponentValuesTopSideSwitch : EBSwitch?
  @IBOutlet var mDrawPackageLegendBottomSideSwitch : EBSwitch?
  @IBOutlet var mDrawPackageLegendTopSideSwitch : EBSwitch?
  @IBOutlet var mDrawPadHolesInPDFSwitch : EBSwitch?
  @IBOutlet var mDrawPadsBottomSideSwitch : EBSwitch?
  @IBOutlet var mDrawPadsTopSideSwitch : EBSwitch?
  @IBOutlet var mDrawTextsLayoutBottomSideSwitch : EBSwitch?
  @IBOutlet var mDrawTextsLayoutTopSideSwitch : EBSwitch?
  @IBOutlet var mDrawTextsLegendBottomSideSwitch : EBSwitch?
  @IBOutlet var mDrawTextsLegendTopSideSwitch : EBSwitch?
  @IBOutlet var mDrawTracksBottomSidSwitche : EBSwitch?
  @IBOutlet var mDrawTracksTopSideSwitch : EBSwitch?
  @IBOutlet var mDrawViasSwitch : EBSwitch?
  @IBOutlet var mDrillDataFileExtensionTextField : EBTextField?
  @IBOutlet var mExtensionTextField : EBTextField?
  @IBOutlet var mGeneratedFileCountTextField : EBTextObserverField?
  @IBOutlet var mHorizontalMirrorSwitch : EBSwitch?
  @IBOutlet var mMeasurementUnitForPadHoleInPDFPopUp : EBPopUpButton?
  @IBOutlet var mMinPPTPTTTWdisplayUnitTextField : CanariDimensionTextField?
  @IBOutlet var mMinPPTPTTTWinEBUnitPopUp : EBPopUpButton?
  @IBOutlet var mOARUnitPopUp : EBPopUpButton?
  @IBOutlet var mOARValueTextField : CanariDimensionTextField?
  @IBOutlet var mOtherSignatureTextField : CanariSignatureField?
  @IBOutlet var mPHDUnitPopUp : EBPopUpButton?
  @IBOutlet var mPHDValueTextField : CanariDimensionTextField?
  @IBOutlet var mPadHoleDefinitionView : NSView?
  @IBOutlet var mRemoveGenerationFileButton : EBButton?
  @IBOutlet var mSegmentedControl : CanariSegmentedControl?
  @IBOutlet var mSignatureTextField : CanariSignatureField?
  @IBOutlet var mStatusImageViewInToolbar : EBImageObserverView?
  @IBOutlet var mVersionField : CanariVersionField?
  @IBOutlet var mVersionFieldInToolbar : CanariVersionField?
  @IBOutlet var minValueForBoardLimitTextField : CanariDimensionTextField?
  @IBOutlet var minValueForBoardLimitUnitPopUp : EBPopUpButton?
  @IBOutlet var resetVersionAndSignatureButton : EBButton?

  //····················································································································
  //    Properties
  //····················································································································


  //····················································································································
  //    Transient properties
  //····················································································································

  var mGeneratedFileCountString_property = EBTransientProperty_String ()
  var mGeneratedFileCountString_property_selection : EBSelection <String> {
    return self.mGeneratedFileCountString_property.prop
  }

  var mStatusImage_property = EBTransientProperty_NSImage ()
  var mStatusImage_property_selection : EBSelection <NSImage> {
    return self.mStatusImage_property.prop
  }

  var mStatusMessage_property = EBTransientProperty_String ()
  var mStatusMessage_property_selection : EBSelection <String> {
    return self.mStatusMessage_property.prop
  }

  var documentFilePath_property = EBTransientProperty_String ()
  var documentFilePath_property_selection : EBSelection <String> {
    return self.documentFilePath_property.prop
  }


  //····················································································································
  //    Transient arraies
  //····················································································································


  //····················································································································
  //    Array Controllers
  //····················································································································

  var mDataController = ArrayController_PMArtworkDocument_mDataController ()

  //····················································································································
  //    Selection Controllers
  //····················································································································

  var mDataSelection = SelectionController_PMArtworkDocument_mDataSelection ()

  //····················································································································
  //    Document file path
  //····················································································································
  // Cette méthode est appelée après tout enregistrement, qu'il y ait changement de nom ou pas.

  override var fileModificationDate : Date? {
    get {
      return super.fileModificationDate
    }
    set{
      super.fileModificationDate = newValue
      self.documentFilePath_property.postEvent ()
    }
  }

  //····················································································································

  func computeTransient_documentFilePath () -> String {
    var documentFilePath = ""
    if let url = self.fileURL {
      documentFilePath = url.path
    }
    return documentFilePath
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    mDataController.addExplorer (name: "mDataController", y:&y, view:view)
    mDataSelection.addExplorer (name: "mDataSelection", y:&y, view:view)
    super.populateExplorerWindow (&y, view:view)
  }

  //····················································································································
  //    windowNibName
  //····················································································································

  #if swift(>=4)
    override var windowNibName : NSNib.Name {
      return NSNib.Name ("PMArtworkDocument")
    }
  #else
    override var windowNibName : String {
      return "PMArtworkDocument"
    }
  #endif
  
  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override func rootEntityClassName () -> String {
    return "ArtworkRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  var rootObject : ArtworkRoot { get { return mRootObject as! ArtworkRoot } }

  //····················································································································
  //    windowControllerDidLoadNib
  //····················································································································

  override func windowControllerDidLoadNib (_ aController: NSWindowController) {
  //--------------------------- Outlet checking
    if nil == mAddGenerationFileButton {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mAddGenerationFileButton' outlet is nil") ;
//    }else if !mAddGenerationFileButton!.isKindOfClass (EBButton) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mAddGenerationFileButton' outlet is not an instance of 'EBButton'") ;
    }
    if nil == mCommentTextView {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mCommentTextView' outlet is nil") ;
//    }else if !mCommentTextView!.isKindOfClass (EBTextView) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mCommentTextView' outlet is not an instance of 'EBTextView'") ;
    }
    if nil == mDataTableView {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mDataTableView' outlet is nil") ;
//    }else if !mDataTableView!.isKindOfClass (EBTableView) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mDataTableView' outlet is not an instance of 'EBTableView'") ;
    }
    if nil == mDimensionForPadHoleInPDFTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mDimensionForPadHoleInPDFTextField' outlet is nil") ;
//    }else if !mDimensionForPadHoleInPDFTextField!.isKindOfClass (CanariDimensionTextField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mDimensionForPadHoleInPDFTextField' outlet is not an instance of 'CanariDimensionTextField'") ;
    }
    if nil == mDrawBoardInternalLimitsSwitch {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mDrawBoardInternalLimitsSwitch' outlet is nil") ;
//    }else if !mDrawBoardInternalLimitsSwitch!.isKindOfClass (EBSwitch) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mDrawBoardInternalLimitsSwitch' outlet is not an instance of 'EBSwitch'") ;
    }
    if nil == mDrawBoardLimitsSwitch {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mDrawBoardLimitsSwitch' outlet is nil") ;
//    }else if !mDrawBoardLimitsSwitch!.isKindOfClass (EBSwitch) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mDrawBoardLimitsSwitch' outlet is not an instance of 'EBSwitch'") ;
    }
    if nil == mDrawComponentNamesBottomSideSwitch {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mDrawComponentNamesBottomSideSwitch' outlet is nil") ;
//    }else if !mDrawComponentNamesBottomSideSwitch!.isKindOfClass (EBSwitch) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mDrawComponentNamesBottomSideSwitch' outlet is not an instance of 'EBSwitch'") ;
    }
    if nil == mDrawComponentNamesTopSideSwitch {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mDrawComponentNamesTopSideSwitch' outlet is nil") ;
//    }else if !mDrawComponentNamesTopSideSwitch!.isKindOfClass (EBSwitch) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mDrawComponentNamesTopSideSwitch' outlet is not an instance of 'EBSwitch'") ;
    }
    if nil == mDrawComponentValuesBottomSideSwitch {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mDrawComponentValuesBottomSideSwitch' outlet is nil") ;
//    }else if !mDrawComponentValuesBottomSideSwitch!.isKindOfClass (EBSwitch) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mDrawComponentValuesBottomSideSwitch' outlet is not an instance of 'EBSwitch'") ;
    }
    if nil == mDrawComponentValuesTopSideSwitch {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mDrawComponentValuesTopSideSwitch' outlet is nil") ;
//    }else if !mDrawComponentValuesTopSideSwitch!.isKindOfClass (EBSwitch) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mDrawComponentValuesTopSideSwitch' outlet is not an instance of 'EBSwitch'") ;
    }
    if nil == mDrawPackageLegendBottomSideSwitch {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mDrawPackageLegendBottomSideSwitch' outlet is nil") ;
//    }else if !mDrawPackageLegendBottomSideSwitch!.isKindOfClass (EBSwitch) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mDrawPackageLegendBottomSideSwitch' outlet is not an instance of 'EBSwitch'") ;
    }
    if nil == mDrawPackageLegendTopSideSwitch {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mDrawPackageLegendTopSideSwitch' outlet is nil") ;
//    }else if !mDrawPackageLegendTopSideSwitch!.isKindOfClass (EBSwitch) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mDrawPackageLegendTopSideSwitch' outlet is not an instance of 'EBSwitch'") ;
    }
    if nil == mDrawPadHolesInPDFSwitch {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mDrawPadHolesInPDFSwitch' outlet is nil") ;
//    }else if !mDrawPadHolesInPDFSwitch!.isKindOfClass (EBSwitch) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mDrawPadHolesInPDFSwitch' outlet is not an instance of 'EBSwitch'") ;
    }
    if nil == mDrawPadsBottomSideSwitch {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mDrawPadsBottomSideSwitch' outlet is nil") ;
//    }else if !mDrawPadsBottomSideSwitch!.isKindOfClass (EBSwitch) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mDrawPadsBottomSideSwitch' outlet is not an instance of 'EBSwitch'") ;
    }
    if nil == mDrawPadsTopSideSwitch {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mDrawPadsTopSideSwitch' outlet is nil") ;
//    }else if !mDrawPadsTopSideSwitch!.isKindOfClass (EBSwitch) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mDrawPadsTopSideSwitch' outlet is not an instance of 'EBSwitch'") ;
    }
    if nil == mDrawTextsLayoutBottomSideSwitch {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mDrawTextsLayoutBottomSideSwitch' outlet is nil") ;
//    }else if !mDrawTextsLayoutBottomSideSwitch!.isKindOfClass (EBSwitch) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mDrawTextsLayoutBottomSideSwitch' outlet is not an instance of 'EBSwitch'") ;
    }
    if nil == mDrawTextsLayoutTopSideSwitch {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mDrawTextsLayoutTopSideSwitch' outlet is nil") ;
//    }else if !mDrawTextsLayoutTopSideSwitch!.isKindOfClass (EBSwitch) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mDrawTextsLayoutTopSideSwitch' outlet is not an instance of 'EBSwitch'") ;
    }
    if nil == mDrawTextsLegendBottomSideSwitch {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mDrawTextsLegendBottomSideSwitch' outlet is nil") ;
//    }else if !mDrawTextsLegendBottomSideSwitch!.isKindOfClass (EBSwitch) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mDrawTextsLegendBottomSideSwitch' outlet is not an instance of 'EBSwitch'") ;
    }
    if nil == mDrawTextsLegendTopSideSwitch {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mDrawTextsLegendTopSideSwitch' outlet is nil") ;
//    }else if !mDrawTextsLegendTopSideSwitch!.isKindOfClass (EBSwitch) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mDrawTextsLegendTopSideSwitch' outlet is not an instance of 'EBSwitch'") ;
    }
    if nil == mDrawTracksBottomSidSwitche {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mDrawTracksBottomSidSwitche' outlet is nil") ;
//    }else if !mDrawTracksBottomSidSwitche!.isKindOfClass (EBSwitch) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mDrawTracksBottomSidSwitche' outlet is not an instance of 'EBSwitch'") ;
    }
    if nil == mDrawTracksTopSideSwitch {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mDrawTracksTopSideSwitch' outlet is nil") ;
//    }else if !mDrawTracksTopSideSwitch!.isKindOfClass (EBSwitch) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mDrawTracksTopSideSwitch' outlet is not an instance of 'EBSwitch'") ;
    }
    if nil == mDrawViasSwitch {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mDrawViasSwitch' outlet is nil") ;
//    }else if !mDrawViasSwitch!.isKindOfClass (EBSwitch) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mDrawViasSwitch' outlet is not an instance of 'EBSwitch'") ;
    }
    if nil == mDrillDataFileExtensionTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mDrillDataFileExtensionTextField' outlet is nil") ;
//    }else if !mDrillDataFileExtensionTextField!.isKindOfClass (EBTextField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mDrillDataFileExtensionTextField' outlet is not an instance of 'EBTextField'") ;
    }
    if nil == mExtensionTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mExtensionTextField' outlet is nil") ;
//    }else if !mExtensionTextField!.isKindOfClass (EBTextField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mExtensionTextField' outlet is not an instance of 'EBTextField'") ;
    }
    if nil == mGeneratedFileCountTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mGeneratedFileCountTextField' outlet is nil") ;
//    }else if !mGeneratedFileCountTextField!.isKindOfClass (EBTextObserverField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mGeneratedFileCountTextField' outlet is not an instance of 'EBTextObserverField'") ;
    }
    if nil == mHorizontalMirrorSwitch {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mHorizontalMirrorSwitch' outlet is nil") ;
//    }else if !mHorizontalMirrorSwitch!.isKindOfClass (EBSwitch) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mHorizontalMirrorSwitch' outlet is not an instance of 'EBSwitch'") ;
    }
    if nil == mMeasurementUnitForPadHoleInPDFPopUp {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mMeasurementUnitForPadHoleInPDFPopUp' outlet is nil") ;
//    }else if !mMeasurementUnitForPadHoleInPDFPopUp!.isKindOfClass (EBPopUpButton) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mMeasurementUnitForPadHoleInPDFPopUp' outlet is not an instance of 'EBPopUpButton'") ;
    }
    if nil == mMinPPTPTTTWdisplayUnitTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mMinPPTPTTTWdisplayUnitTextField' outlet is nil") ;
//    }else if !mMinPPTPTTTWdisplayUnitTextField!.isKindOfClass (CanariDimensionTextField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mMinPPTPTTTWdisplayUnitTextField' outlet is not an instance of 'CanariDimensionTextField'") ;
    }
    if nil == mMinPPTPTTTWinEBUnitPopUp {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mMinPPTPTTTWinEBUnitPopUp' outlet is nil") ;
//    }else if !mMinPPTPTTTWinEBUnitPopUp!.isKindOfClass (EBPopUpButton) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mMinPPTPTTTWinEBUnitPopUp' outlet is not an instance of 'EBPopUpButton'") ;
    }
    if nil == mOARUnitPopUp {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mOARUnitPopUp' outlet is nil") ;
//    }else if !mOARUnitPopUp!.isKindOfClass (EBPopUpButton) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mOARUnitPopUp' outlet is not an instance of 'EBPopUpButton'") ;
    }
    if nil == mOARValueTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mOARValueTextField' outlet is nil") ;
//    }else if !mOARValueTextField!.isKindOfClass (CanariDimensionTextField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mOARValueTextField' outlet is not an instance of 'CanariDimensionTextField'") ;
    }
    if nil == mOtherSignatureTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mOtherSignatureTextField' outlet is nil") ;
//    }else if !mOtherSignatureTextField!.isKindOfClass (CanariSignatureField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mOtherSignatureTextField' outlet is not an instance of 'CanariSignatureField'") ;
    }
    if nil == mPHDUnitPopUp {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mPHDUnitPopUp' outlet is nil") ;
//    }else if !mPHDUnitPopUp!.isKindOfClass (EBPopUpButton) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mPHDUnitPopUp' outlet is not an instance of 'EBPopUpButton'") ;
    }
    if nil == mPHDValueTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mPHDValueTextField' outlet is nil") ;
//    }else if !mPHDValueTextField!.isKindOfClass (CanariDimensionTextField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mPHDValueTextField' outlet is not an instance of 'CanariDimensionTextField'") ;
    }
    if nil == mPadHoleDefinitionView {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mPadHoleDefinitionView' outlet is nil") ;
//    }else if !mPadHoleDefinitionView!.isKindOfClass (NSView) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mPadHoleDefinitionView' outlet is not an instance of 'NSView'") ;
    }
    if nil == mRemoveGenerationFileButton {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mRemoveGenerationFileButton' outlet is nil") ;
//    }else if !mRemoveGenerationFileButton!.isKindOfClass (EBButton) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mRemoveGenerationFileButton' outlet is not an instance of 'EBButton'") ;
    }
    if nil == mSegmentedControl {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mSegmentedControl' outlet is nil") ;
//    }else if !mSegmentedControl!.isKindOfClass (CanariSegmentedControl) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mSegmentedControl' outlet is not an instance of 'CanariSegmentedControl'") ;
    }
    if nil == mSignatureTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mSignatureTextField' outlet is nil") ;
//    }else if !mSignatureTextField!.isKindOfClass (CanariSignatureField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mSignatureTextField' outlet is not an instance of 'CanariSignatureField'") ;
    }
    if nil == mStatusImageViewInToolbar {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mStatusImageViewInToolbar' outlet is nil") ;
//    }else if !mStatusImageViewInToolbar!.isKindOfClass (EBImageObserverView) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mStatusImageViewInToolbar' outlet is not an instance of 'EBImageObserverView'") ;
    }
    if nil == mVersionField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mVersionField' outlet is nil") ;
//    }else if !mVersionField!.isKindOfClass (CanariVersionField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mVersionField' outlet is not an instance of 'CanariVersionField'") ;
    }
    if nil == mVersionFieldInToolbar {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'mVersionFieldInToolbar' outlet is nil") ;
//    }else if !mVersionFieldInToolbar!.isKindOfClass (CanariVersionField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'mVersionFieldInToolbar' outlet is not an instance of 'CanariVersionField'") ;
    }
    if nil == minValueForBoardLimitTextField {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'minValueForBoardLimitTextField' outlet is nil") ;
//    }else if !minValueForBoardLimitTextField!.isKindOfClass (CanariDimensionTextField) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'minValueForBoardLimitTextField' outlet is not an instance of 'CanariDimensionTextField'") ;
    }
    if nil == minValueForBoardLimitUnitPopUp {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'minValueForBoardLimitUnitPopUp' outlet is nil") ;
//    }else if !minValueForBoardLimitUnitPopUp!.isKindOfClass (EBPopUpButton) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'minValueForBoardLimitUnitPopUp' outlet is not an instance of 'EBPopUpButton'") ;
    }
    if nil == resetVersionAndSignatureButton {
      presentErrorWindow (file: #file,
                              line: #line,
                              errorMessage: "the 'resetVersionAndSignatureButton' outlet is nil") ;
//    }else if !resetVersionAndSignatureButton!.isKindOfClass (EBButton) {
//      presentErrorWindow (file: #file,
//                              line: #line,
//                              errorMessage: "the 'resetVersionAndSignatureButton' outlet is not an instance of 'EBButton'") ;
    }
  //--------------------------- Array controllers
    self.mDataController.bind_modelAndView (
      model: self.rootObject.fileGenerationParameterArray_property,
      tableViewArray: [mDataTableView!],
      ebView: nil,
      managedObjectContext: self.managedObjectContext (),
      file: #file,
      line: #line
    )
  //--------------------------- Selection controllers
    mDataSelection.bind_selection (
      model: mDataController.selectedArray_property,
      file: #file,
      line: #line
    )
  //--------------------------- Transient compute functions
    self.mGeneratedFileCountString_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDataController.sortedArray_property.count_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mDataController.sortedArray_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PMArtworkDocument_mGeneratedFileCountString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mStatusImage_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.rootObject.fileGenerationParameterArray_property_selection.kind ()
        kind &= unwSelf.rootObject.fileGenerationParameterArray_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.rootObject.fileGenerationParameterArray_property_selection, unwSelf.rootObject.fileGenerationParameterArray_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_PMArtworkDocument_mStatusImage (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mStatusMessage_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.rootObject.fileGenerationParameterArray_property_selection.kind ()
        kind &= unwSelf.rootObject.fileGenerationParameterArray_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.rootObject.fileGenerationParameterArray_property_selection, unwSelf.rootObject.fileGenerationParameterArray_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_PMArtworkDocument_mStatusMessage (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.documentFilePath_property.readModelFunction = { return .single (self.computeTransient_documentFilePath ()) }
  //--------------------------- Install property observers for transients
    self.mDataController.sortedArray_property.count_property.addEBObserver (self.mGeneratedFileCountString_property)
    self.rootObject.fileGenerationParameterArray_property.addEBObserverOf_fileExtension (self.mStatusImage_property)
    self.rootObject.fileGenerationParameterArray_property.addEBObserverOf_name (self.mStatusImage_property)
    self.rootObject.fileGenerationParameterArray_property.addEBObserverOf_fileExtension (self.mStatusMessage_property)
    self.rootObject.fileGenerationParameterArray_property.addEBObserverOf_name (self.mStatusMessage_property)
  //--------------------------- Install regular bindings
    mSegmentedControl?.bind_selectedPage (self.rootObject.selectedTab_property, file: #file, line: #line)
    mMinPPTPTTTWinEBUnitPopUp?.bind_selectedTag (self.rootObject.minPPTPTTTWdisplayUnit_property, file: #file, line: #line)
    mMinPPTPTTTWdisplayUnitTextField?.bind_dimensionAndUnit (self.rootObject.minPPTPTTTW_property, self.rootObject.minPPTPTTTWdisplayUnit_property, file: #file, line: #line)
    mOARUnitPopUp?.bind_selectedTag (self.rootObject.minValueForOARdisplayUnit_property, file: #file, line: #line)
    mOARValueTextField?.bind_dimensionAndUnit (self.rootObject.minValueForOARinEBUnit_property, self.rootObject.minValueForOARdisplayUnit_property, file: #file, line: #line)
    mPHDUnitPopUp?.bind_selectedTag (self.rootObject.minValueForPHDdisplayUnit_property, file: #file, line: #line)
    mPHDValueTextField?.bind_dimensionAndUnit (self.rootObject.minValueForPHDinEBUnit_property, self.rootObject.minValueForPHDdisplayUnit_property, file: #file, line: #line)
    minValueForBoardLimitUnitPopUp?.bind_selectedTag (self.rootObject.minValueForBoardLimitWidthDisplayUnit_property, file: #file, line: #line)
    minValueForBoardLimitTextField?.bind_dimensionAndUnit (self.rootObject.minValueForBoardLimitWidth_property, self.rootObject.minValueForBoardLimitWidthDisplayUnit_property, file: #file, line: #line)
    mDrillDataFileExtensionTextField?.bind_value (self.rootObject.drillDataFileExtension_property, file: #file, line: #line, sendContinously:false)
    mExtensionTextField?.bind_value (self.mDataSelection.fileExtension_property, file: #file, line: #line, sendContinously:false)
    mDrawBoardInternalLimitsSwitch?.bind_value (self.mDataSelection.drawInternalBoardLimits_property, file: #file, line: #line)
    mDrawBoardLimitsSwitch?.bind_value (self.mDataSelection.drawBoardLimits_property, file: #file, line: #line)
    mDrawComponentValuesTopSideSwitch?.bind_value (self.mDataSelection.drawComponentValuesTopSide_property, file: #file, line: #line)
    mDrawComponentValuesBottomSideSwitch?.bind_value (self.mDataSelection.drawComponentValuesBottomSide_property, file: #file, line: #line)
    mDrawComponentNamesTopSideSwitch?.bind_value (self.mDataSelection.drawComponentNamesTopSide_property, file: #file, line: #line)
    mDrawComponentNamesBottomSideSwitch?.bind_value (self.mDataSelection.drawComponentNamesBottomSide_property, file: #file, line: #line)
    mDrawPackageLegendTopSideSwitch?.bind_value (self.mDataSelection.drawPackageLegendTopSide_property, file: #file, line: #line)
    mDrawPackageLegendBottomSideSwitch?.bind_value (self.mDataSelection.drawPackageLegendBottomSide_property, file: #file, line: #line)
    mDrawPadHolesInPDFSwitch?.bind_value (self.mDataSelection.drawPadHolesInPDF_property, file: #file, line: #line)
    mDrawPadsTopSideSwitch?.bind_value (self.mDataSelection.drawPadsTopSide_property, file: #file, line: #line)
    mDrawPadsBottomSideSwitch?.bind_value (self.mDataSelection.drawPadsBottomSide_property, file: #file, line: #line)
    mDrawTextsLayoutTopSideSwitch?.bind_value (self.mDataSelection.drawTextsLayoutTopSide_property, file: #file, line: #line)
    mDrawTextsLayoutBottomSideSwitch?.bind_value (self.mDataSelection.drawTextsLayoutBottomSide_property, file: #file, line: #line)
    mDrawTextsLegendTopSideSwitch?.bind_value (self.mDataSelection.drawTextsLegendTopSide_property, file: #file, line: #line)
    mDrawTextsLegendBottomSideSwitch?.bind_value (self.mDataSelection.drawTextsLegendBottomSide_property, file: #file, line: #line)
    mDrawTracksTopSideSwitch?.bind_value (self.mDataSelection.drawTracksTopSide_property, file: #file, line: #line)
    mDrawTracksBottomSidSwitche?.bind_value (self.mDataSelection.drawTracksBottomSide_property, file: #file, line: #line)
    mDrawViasSwitch?.bind_value (self.mDataSelection.drawVias_property, file: #file, line: #line)
    mHorizontalMirrorSwitch?.bind_value (self.mDataSelection.horizontalMirror_property, file: #file, line: #line)
    mMeasurementUnitForPadHoleInPDFPopUp?.bind_selectedTag (self.mDataSelection.measurementUnitForPadHoleInPDF_property, file: #file, line: #line)
    mDimensionForPadHoleInPDFTextField?.bind_dimensionAndUnit (self.mDataSelection.padHoleDiameterInPDF_property, self.mDataSelection.measurementUnitForPadHoleInPDF_property, file: #file, line: #line)
    mGeneratedFileCountTextField?.bind_valueObserver (self.mGeneratedFileCountString_property, file: #file, line: #line)
    mCommentTextView?.bind_value (self.rootObject.comments_property, file: #file, line: #line)
    mSignatureTextField?.bind_signature (self.signatureObserver_property, file: #file, line: #line)
    mOtherSignatureTextField?.bind_signature (self.signatureObserver_property, file: #file, line: #line)
    mVersionField?.bind_version (self.versionObserver_property, file: #file, line: #line)
    mVersionField?.bind_versionShouldChange (self.versionShouldChangeObserver_property, file: #file, line: #line)
    mVersionFieldInToolbar?.bind_version (self.versionObserver_property, file: #file, line: #line)
    mVersionFieldInToolbar?.bind_versionShouldChange (self.versionShouldChangeObserver_property, file: #file, line: #line)
    mStatusImageViewInToolbar?.bind_image (self.mStatusImage_property, file: #file, line: #line)
    mStatusImageViewInToolbar?.bind_tooltip (self.mStatusMessage_property, file: #file, line: #line)
  //--------------------------- Install multiple bindings
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction:{
          return (self.mDataController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet:self.mRemoveGenerationFileButton
      )
      self.mDataController.selectedArray_property.count_property.addEBObserver (controller)
      mController_mRemoveGenerationFileButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction:{
          return !self.mDataSelection.drawPadHolesInPDF_property_selection
        },
        outlet:self.mPadHoleDefinitionView
      )
      self.mDataSelection.drawPadHolesInPDF_property.addEBObserver (controller)
      mController_mPadHoleDefinitionView_hidden = controller
    }
  //--------------------------- Set targets / actions
    mAddGenerationFileButton?.target = mDataController
    mAddGenerationFileButton?.action = #selector (ArrayController_PMArtworkDocument_mDataController.add (_:))
    mRemoveGenerationFileButton?.target = mDataController
    mRemoveGenerationFileButton?.action = #selector (ArrayController_PMArtworkDocument_mDataController.remove (_:))
    resetVersionAndSignatureButton?.target = self
    resetVersionAndSignatureButton?.action = #selector (PMArtworkDocument.resetVersionAndSignatureAction (_:))
  //--------------------------- Update display
    super.windowControllerDidLoadNib (aController)
    flushOutletEvents ()
  }

  //····················································································································
  //   removeWindowController
  //····················································································································

  override func removeUserInterface () {
  //--------------------------- Unbind regular bindings
    mSegmentedControl?.unbind_selectedPage ()
    mMinPPTPTTTWinEBUnitPopUp?.unbind_selectedTag ()
    mMinPPTPTTTWdisplayUnitTextField?.unbind_dimensionAndUnit ()
    mOARUnitPopUp?.unbind_selectedTag ()
    mOARValueTextField?.unbind_dimensionAndUnit ()
    mPHDUnitPopUp?.unbind_selectedTag ()
    mPHDValueTextField?.unbind_dimensionAndUnit ()
    minValueForBoardLimitUnitPopUp?.unbind_selectedTag ()
    minValueForBoardLimitTextField?.unbind_dimensionAndUnit ()
    mDrillDataFileExtensionTextField?.unbind_value ()
    mExtensionTextField?.unbind_value ()
    mDrawBoardInternalLimitsSwitch?.unbind_value ()
    mDrawBoardLimitsSwitch?.unbind_value ()
    mDrawComponentValuesTopSideSwitch?.unbind_value ()
    mDrawComponentValuesBottomSideSwitch?.unbind_value ()
    mDrawComponentNamesTopSideSwitch?.unbind_value ()
    mDrawComponentNamesBottomSideSwitch?.unbind_value ()
    mDrawPackageLegendTopSideSwitch?.unbind_value ()
    mDrawPackageLegendBottomSideSwitch?.unbind_value ()
    mDrawPadHolesInPDFSwitch?.unbind_value ()
    mDrawPadsTopSideSwitch?.unbind_value ()
    mDrawPadsBottomSideSwitch?.unbind_value ()
    mDrawTextsLayoutTopSideSwitch?.unbind_value ()
    mDrawTextsLayoutBottomSideSwitch?.unbind_value ()
    mDrawTextsLegendTopSideSwitch?.unbind_value ()
    mDrawTextsLegendBottomSideSwitch?.unbind_value ()
    mDrawTracksTopSideSwitch?.unbind_value ()
    mDrawTracksBottomSidSwitche?.unbind_value ()
    mDrawViasSwitch?.unbind_value ()
    mHorizontalMirrorSwitch?.unbind_value ()
    mMeasurementUnitForPadHoleInPDFPopUp?.unbind_selectedTag ()
    mDimensionForPadHoleInPDFTextField?.unbind_dimensionAndUnit ()
    mGeneratedFileCountTextField?.unbind_valueObserver ()
    mCommentTextView?.unbind_value ()
    mSignatureTextField?.unbind_signature ()
    mOtherSignatureTextField?.unbind_signature ()
    mVersionField?.unbind_version ()
    mVersionField?.unbind_versionShouldChange ()
    mVersionFieldInToolbar?.unbind_version ()
    mVersionFieldInToolbar?.unbind_versionShouldChange ()
    mStatusImageViewInToolbar?.unbind_image ()
    mStatusImageViewInToolbar?.unbind_tooltip ()
  //--------------------------- Unbind multiple bindings
    self.mDataController.selectedArray_property.count_property.removeEBObserver (mController_mRemoveGenerationFileButton_enabled!)
    mController_mRemoveGenerationFileButton_enabled = nil
    self.mDataSelection.drawPadHolesInPDF_property.removeEBObserver (mController_mPadHoleDefinitionView_hidden!)
    mController_mPadHoleDefinitionView_hidden = nil
  //--------------------------- Uninstall compute functions for transients
    self.mGeneratedFileCountString_property.readModelFunction = nil
    self.mStatusImage_property.readModelFunction = nil
    self.mStatusMessage_property.readModelFunction = nil
    self.documentFilePath_property.readModelFunction = nil
  //--------------------------- Unbind array controllers
    mDataController.unbind_modelAndView ()
  //--------------------------- Unbind selection controllers
    mDataSelection.unbind_selection ()
  //--------------------------- Uninstall property observers for transients
    self.mDataController.sortedArray_property.count_property.removeEBObserver (self.mGeneratedFileCountString_property)
    self.rootObject.fileGenerationParameterArray_property.removeEBObserverOf_fileExtension (self.mStatusImage_property)
    self.rootObject.fileGenerationParameterArray_property.removeEBObserverOf_name (self.mStatusImage_property)
    self.rootObject.fileGenerationParameterArray_property.removeEBObserverOf_fileExtension (self.mStatusMessage_property)
    self.rootObject.fileGenerationParameterArray_property.removeEBObserverOf_name (self.mStatusMessage_property)
  //--------------------------- Remove targets / actions
    mAddGenerationFileButton?.target = nil
    mRemoveGenerationFileButton?.target = nil
    resetVersionAndSignatureButton?.target = nil
  //--------------------------- Clean up outlets
    self.mAddGenerationFileButton?.ebCleanUp ()
    self.mCommentTextView?.ebCleanUp ()
    self.mDataTableView?.ebCleanUp ()
    self.mDimensionForPadHoleInPDFTextField?.ebCleanUp ()
    self.mDrawBoardInternalLimitsSwitch?.ebCleanUp ()
    self.mDrawBoardLimitsSwitch?.ebCleanUp ()
    self.mDrawComponentNamesBottomSideSwitch?.ebCleanUp ()
    self.mDrawComponentNamesTopSideSwitch?.ebCleanUp ()
    self.mDrawComponentValuesBottomSideSwitch?.ebCleanUp ()
    self.mDrawComponentValuesTopSideSwitch?.ebCleanUp ()
    self.mDrawPackageLegendBottomSideSwitch?.ebCleanUp ()
    self.mDrawPackageLegendTopSideSwitch?.ebCleanUp ()
    self.mDrawPadHolesInPDFSwitch?.ebCleanUp ()
    self.mDrawPadsBottomSideSwitch?.ebCleanUp ()
    self.mDrawPadsTopSideSwitch?.ebCleanUp ()
    self.mDrawTextsLayoutBottomSideSwitch?.ebCleanUp ()
    self.mDrawTextsLayoutTopSideSwitch?.ebCleanUp ()
    self.mDrawTextsLegendBottomSideSwitch?.ebCleanUp ()
    self.mDrawTextsLegendTopSideSwitch?.ebCleanUp ()
    self.mDrawTracksBottomSidSwitche?.ebCleanUp ()
    self.mDrawTracksTopSideSwitch?.ebCleanUp ()
    self.mDrawViasSwitch?.ebCleanUp ()
    self.mDrillDataFileExtensionTextField?.ebCleanUp ()
    self.mExtensionTextField?.ebCleanUp ()
    self.mGeneratedFileCountTextField?.ebCleanUp ()
    self.mHorizontalMirrorSwitch?.ebCleanUp ()
    self.mMeasurementUnitForPadHoleInPDFPopUp?.ebCleanUp ()
    self.mMinPPTPTTTWdisplayUnitTextField?.ebCleanUp ()
    self.mMinPPTPTTTWinEBUnitPopUp?.ebCleanUp ()
    self.mOARUnitPopUp?.ebCleanUp ()
    self.mOARValueTextField?.ebCleanUp ()
    self.mOtherSignatureTextField?.ebCleanUp ()
    self.mPHDUnitPopUp?.ebCleanUp ()
    self.mPHDValueTextField?.ebCleanUp ()
    self.mPadHoleDefinitionView?.ebCleanUp ()
    self.mRemoveGenerationFileButton?.ebCleanUp ()
    self.mSegmentedControl?.ebCleanUp ()
    self.mSignatureTextField?.ebCleanUp ()
    self.mStatusImageViewInToolbar?.ebCleanUp ()
    self.mVersionField?.ebCleanUp ()
    self.mVersionFieldInToolbar?.ebCleanUp ()
    self.minValueForBoardLimitTextField?.ebCleanUp ()
    self.minValueForBoardLimitUnitPopUp?.ebCleanUp ()
    self.resetVersionAndSignatureButton?.ebCleanUp ()
  }

  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

  private var mController_mRemoveGenerationFileButton_enabled : MultipleBindingController_enabled? = nil
  private var mController_mPadHoleDefinitionView_hidden : MultipleBindingController_hidden? = nil

  //····················································································································

}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

