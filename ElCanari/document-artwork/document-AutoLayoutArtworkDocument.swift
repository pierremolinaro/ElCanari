//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(AutoLayoutArtworkDocument) class AutoLayoutArtworkDocument : EBAutoLayoutManagedDocument, NSToolbarDelegate {

  //····················································································································
  //   Array controller: mDataController
  //····················································································································

  var mDataController = Controller_AutoLayoutArtworkDocument_mDataController ()

  //····················································································································
  //   Selection controller: mDataSelection
  //····················································································································

  var mDataSelection = SelectionController_AutoLayoutArtworkDocument_mDataSelection ()

  //····················································································································
  //   Transient property: mStatusMessage
  //····················································································································

  final let mStatusMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var mStatusMessage : String? {
    switch self.mStatusMessage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mGeneratedFileCountString
  //····················································································································

  final let mGeneratedFileCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var mGeneratedFileCountString : String? {
    switch self.mGeneratedFileCountString_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: documentFilePath
  //····················································································································

  final let documentFilePath_property = EBTransientProperty_String ()

  //····················································································································

  final var documentFilePath : String? {
    switch self.documentFilePath_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mStatusImage
  //····················································································································

  final let mStatusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var mStatusImage : NSImage? {
    switch self.mStatusImage_property.selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    Outlets
  //····················································································································


  //····················································································································
  //    Outlets
  //····················································································································


  //····················································································································
  //    Multiple bindings controllers
  //····················································································································


  //····················································································································
  //    Document file path
  //····················································································································
  // Cette méthode est appelée après tout enregistrement, qu'il y ait changement de nom ou pas.

  override final var fileModificationDate : Date? {
    get {
      return super.fileModificationDate
    }
    set{
      super.fileModificationDate = newValue
      self.documentFilePath_property.postEvent ()
    }
  }

  //····················································································································

  final func computeTransient_documentFilePath () -> String {
    var documentFilePath = ""
    if let url = self.fileURL {
      documentFilePath = url.path
    }
    return documentFilePath
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
  //--- Array controller property: mDataController
    self.mDataController.addExplorer (name: "mDataController", y:&y, view:view)
  //--- Selection controller property: mDataSelection
    self.mDataSelection.addExplorer (name: "mDataSelection", y:&y, view:view)
  //---
    super.populateExplorerWindow (&y, view:view)
  }

  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override final func rootEntityClassName () -> String {
    return "ArtworkRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  final var rootObject : ArtworkRoot { return self.mRootObject as! ArtworkRoot }

  //····················································································································
  //    VIEW mPageMasterView
  //····················································································································

  lazy var mPageMasterView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mDocumentMainView
  //····················································································································

  lazy var mDocumentMainView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: 0)
    let view_0 = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
      do{
        let view_0_0_0 = AutoLayoutSegmentedControlWithPages (documentView: self.mPageMasterView, equalWidth: false, small: false)
          .addPage (title: "Minima", tooltip: "Minima Editor", pageView: self.mMinimaPage)
          .addPage (title: "Drill", tooltip: "Drill Editor", pageView: self.mDrillPage)
          .addPage (title: "Data", tooltip: "DataEditor", pageView: self.mDataPage)
          .addPage (title: "Infos", tooltip: "Artwork Informations", pageView: self.mInfosPage)
          .bind_selectedPage (self.rootObject.selectedTab_property)
        view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_0_1_0 = AutoLayoutFlexibleSpace ()
          view_0_0_1.appendView (view_0_0_1_0)
          let view_0_0_1_1 = AutoLayoutStaticLabel (title: "Page", bold: false, small: true)
          view_0_0_1.appendView (view_0_0_1_1)
          let view_0_0_1_2 = AutoLayoutFlexibleSpace ()
          view_0_0_1.appendView (view_0_0_1_2)
        }
        view_0_0.appendView (view_0_0_1)
      }
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView ()
      do{
        let view_0_1_0 = AutoLayoutSignatureField (small: false)
          .bind_signature (self.signatureObserver_property)
        view_0_1.appendView (view_0_1_0)
        let view_0_1_1 = AutoLayoutStaticLabel (title: "Signature", bold: false, small: true)
          .set (alignment: .center)
          .expandableWidth ()
        view_0_1.appendView (view_0_1_1)
      }
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutVerticalStackView ()
      do{
        let view_0_2_0 = AutoLayoutVersionField (small: false)
          .bind_version (self.versionObserver_property)
          .bind_versionShouldChange (self.versionShouldChangeObserver_property)
        view_0_2.appendView (view_0_2_0)
        let view_0_2_1 = AutoLayoutStaticLabel (title: "Version", bold: false, small: true)
          .set (alignment: .center)
          .expandableWidth ()
        view_0_2.appendView (view_0_2_1)
      }
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutVerticalStackView ()
      do{
        let view_0_4_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_4_0_0 = AutoLayoutFlexibleSpace ()
          view_0_4_0.appendView (view_0_4_0_0)
          let view_0_4_0_1 = AutoLayoutImageObserverView (small: false)
            .bind_image (self.mStatusImage_property)
            .bind_tooltip (self.mStatusMessage_property)
          view_0_4_0.appendView (view_0_4_0_1)
          let view_0_4_0_2 = AutoLayoutFlexibleSpace ()
          view_0_4_0.appendView (view_0_4_0_2)
        }
        view_0_4.appendView (view_0_4_0)
        let view_0_4_1 = AutoLayoutStaticLabel (title: "Status", bold: false, small: true)
          .set (alignment: .center)
        view_0_4.appendView (view_0_4_1)
      }
      view_0.appendView (view_0_4)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    vStackView.appendView (view_1)
    let view_2 = mPageMasterView
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mMinimaPage
  //····················································································································

  lazy var mMinimaPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (margins: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView ()
      do{
        let view_0_1_0 = AutoLayoutFlexibleSpace ()
        view_0_1.appendView (view_0_1_0)
        let view_0_1_1 = AutoLayoutStaticLabel (title: "PP: Pad to Pad Distance", bold: false, small: true)
          .set (alignment: .left)
          .expandableWidth ()
        view_0_1.appendView (view_0_1_1)
        let view_0_1_2 = AutoLayoutStaticLabel (title: "TP: Track to Pad Distance", bold: false, small: true)
          .set (alignment: .left)
          .expandableWidth ()
        view_0_1.appendView (view_0_1_2)
        let view_0_1_3 = AutoLayoutStaticLabel (title: "TT: Track to Track Distance", bold: false, small: true)
          .set (alignment: .left)
          .expandableWidth ()
        view_0_1.appendView (view_0_1_3)
        let view_0_1_4 = AutoLayoutStaticLabel (title: "TW: Track Width", bold: false, small: true)
          .set (alignment: .left)
          .expandableWidth ()
        view_0_1.appendView (view_0_1_4)
        let view_0_1_5 = AutoLayoutStaticLabel (title: "PHD: Production Hole Diameter (tool size)", bold: false, small: true)
          .set (alignment: .left)
          .expandableWidth ()
        view_0_1.appendView (view_0_1_5)
        let view_0_1_6 = AutoLayoutStaticLabel (title: "OAR: Outer Annular Ring", bold: false, small: true)
          .set (alignment: .left)
          .expandableWidth ()
        view_0_1.appendView (view_0_1_6)
        let view_0_1_7 = AutoLayoutStaticLabel (title: "OAR is equal to (pad diameter - PHD) / 2", bold: false, small: true)
          .set (alignment: .left)
          .expandableWidth ()
        view_0_1.appendView (view_0_1_7)
        let view_0_1_8 = AutoLayoutFlexibleSpace ()
        view_0_1.appendView (view_0_1_8)
      }
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutStaticImageView (name: "artwork")
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_4)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_1)
    let view_2 = AutoLayoutHorizontalStackView ()
    do{
      let view_2_0 = AutoLayoutFlexibleSpace ()
      view_2.appendView (view_2_0)
      let view_2_1 = AutoLayoutTwoColumnsGridView ()
        .set (leftMargin: 20)
        .set (rightMargin: 20)
        .set (topMargin: 8)
        .addFirstBaseLineAligned (left: self.computeImplicitView_0 (), right: self.computeImplicitView_1 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_2 (), right: self.computeImplicitView_3 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_4 (), right: self.computeImplicitView_5 ())
        .addFirstBaseLineAligned (left: self.computeImplicitView_6 (), right: self.computeImplicitView_7 ())
      view_2.appendView (view_2_1)
      let view_2_2 = AutoLayoutFlexibleSpace ()
      view_2.appendView (view_2_2)
    }
    vStackView.appendView (view_2)
    let view_3 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_3)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mDrillPage
  //····················································································································

  lazy var mDrillPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    let view_0 = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
      .setFirstBaselineAlignment ()
    do{
      let view_0_0 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutStaticLabel (title: "Drill File Extension", bold: false, small: false)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutTextField (width: 56, small: false)
        .bind_value (self.rootObject.drillDataFileExtension_property, sendContinously:false)
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_3)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutFlexibleSpace ()
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mDataPage
  //····················································································································

  lazy var mDataPage : AutoLayoutHorizontalStackView = {
    let hStackView = AutoLayoutHorizontalStackView ()
      .set (leftMargin: 8)
      .set (rightMargin: 8)
    let view_0 = AutoLayoutVerticalStackView ()
      .set (topMargin: 8)
    do{
      let view_0_0 = AutoLayoutLabel (bold: true, small: true)
        .bind_title (self.mGeneratedFileCountString_property)
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutTableView (small: true, addControlButtons: true)
      self.mDataController.bind_tableView (view_0_1)
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_2)
    }
    hStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView.VerticalSeparator ()
    hStackView.appendView (view_1)
    let view_2 = AutoLayoutVerticalStackView ()
      .set (topMargin: 8)
    do{
      let view_2_0 = AutoLayoutHorizontalStackView ()
        .setFirstBaselineAlignment ()
      do{
        let view_2_0_0 = AutoLayoutStaticLabel (title: "File Extension", bold: true, small: true)
        view_2_0.appendView (view_2_0_0)
        let view_2_0_1 = AutoLayoutTextField (width: 150, small: true)
          .bind_value (self.mDataSelection.fileExtension_property, sendContinously:false)
        view_2_0.appendView (view_2_0_1)
        let view_2_0_2 = AutoLayoutFlexibleSpace ()
        view_2_0.appendView (view_2_0_2)
      }
      view_2.appendView (view_2_0)
      let view_2_1 = AutoLayoutHorizontalStackView ()
      do{
        let view_2_1_0 = AutoLayoutStaticLabel (title: "Front Side Elements", bold: true, small: true)
        view_2_1.appendView (view_2_1_0)
        let view_2_1_1 = AutoLayoutFlexibleSpace ()
        view_2_1.appendView (view_2_1_1)
      }
      view_2.appendView (view_2_1)
      let view_2_2 = AutoLayoutHorizontalStackView ()
        .set (leftMargin: 20)
      do{
        let view_2_2_0 = AutoLayoutSwitch (title: "Legend Front Side Texts", small: true)
          .bind_value (self.mDataSelection.drawTextsLegendTopSide_property)
        view_2_2.appendView (view_2_2_0)
        let view_2_2_1 = AutoLayoutFlexibleSpace ()
        view_2_2.appendView (view_2_2_1)
      }
      view_2.appendView (view_2_2)
      let view_2_3 = AutoLayoutHorizontalStackView ()
        .set (leftMargin: 20)
      do{
        let view_2_3_0 = AutoLayoutSwitch (title: "Layout Front Side Texts", small: true)
          .bind_value (self.mDataSelection.drawTextsLayoutTopSide_property)
        view_2_3.appendView (view_2_3_0)
        let view_2_3_1 = AutoLayoutFlexibleSpace ()
        view_2_3.appendView (view_2_3_1)
      }
      view_2.appendView (view_2_3)
      let view_2_4 = AutoLayoutHorizontalStackView ()
        .set (leftMargin: 20)
      do{
        let view_2_4_0 = AutoLayoutSwitch (title: "Front Side Tracks", small: true)
          .bind_value (self.mDataSelection.drawTracksTopSide_property)
        view_2_4.appendView (view_2_4_0)
        let view_2_4_1 = AutoLayoutFlexibleSpace ()
        view_2_4.appendView (view_2_4_1)
      }
      view_2.appendView (view_2_4)
      let view_2_5 = AutoLayoutHorizontalStackView ()
        .set (leftMargin: 20)
      do{
        let view_2_5_0 = AutoLayoutSwitch (title: "Front Side Pads", small: true)
          .bind_value (self.mDataSelection.drawPadsTopSide_property)
        view_2_5.appendView (view_2_5_0)
        let view_2_5_1 = AutoLayoutFlexibleSpace ()
        view_2_5.appendView (view_2_5_1)
      }
      view_2.appendView (view_2_5)
      let view_2_6 = AutoLayoutHorizontalStackView ()
        .set (leftMargin: 20)
      do{
        let view_2_6_0 = AutoLayoutSwitch (title: "Front Side Component Names", small: true)
          .bind_value (self.mDataSelection.drawComponentNamesTopSide_property)
        view_2_6.appendView (view_2_6_0)
        let view_2_6_1 = AutoLayoutFlexibleSpace ()
        view_2_6.appendView (view_2_6_1)
      }
      view_2.appendView (view_2_6)
      let view_2_7 = AutoLayoutHorizontalStackView ()
        .set (leftMargin: 20)
      do{
        let view_2_7_0 = AutoLayoutSwitch (title: "Front Side Component Values", small: true)
          .bind_value (self.mDataSelection.drawComponentValuesTopSide_property)
        view_2_7.appendView (view_2_7_0)
        let view_2_7_1 = AutoLayoutFlexibleSpace ()
        view_2_7.appendView (view_2_7_1)
      }
      view_2.appendView (view_2_7)
      let view_2_8 = AutoLayoutHorizontalStackView ()
        .set (leftMargin: 20)
      do{
        let view_2_8_0 = AutoLayoutSwitch (title: "Front Side Package Legends", small: true)
          .bind_value (self.mDataSelection.drawPackageLegendTopSide_property)
        view_2_8.appendView (view_2_8_0)
        let view_2_8_1 = AutoLayoutFlexibleSpace ()
        view_2_8.appendView (view_2_8_1)
      }
      view_2.appendView (view_2_8)
      let view_2_9 = AutoLayoutHorizontalStackView ()
      do{
        let view_2_9_0 = AutoLayoutStaticLabel (title: "Back Side Elements", bold: true, small: true)
        view_2_9.appendView (view_2_9_0)
        let view_2_9_1 = AutoLayoutFlexibleSpace ()
        view_2_9.appendView (view_2_9_1)
      }
      view_2.appendView (view_2_9)
      let view_2_10 = AutoLayoutHorizontalStackView ()
        .set (leftMargin: 20)
      do{
        let view_2_10_0 = AutoLayoutSwitch (title: "Legend Back Side Texts", small: true)
          .bind_value (self.mDataSelection.drawTextsLegendBottomSide_property)
        view_2_10.appendView (view_2_10_0)
        let view_2_10_1 = AutoLayoutFlexibleSpace ()
        view_2_10.appendView (view_2_10_1)
      }
      view_2.appendView (view_2_10)
      let view_2_11 = AutoLayoutHorizontalStackView ()
        .set (leftMargin: 20)
      do{
        let view_2_11_0 = AutoLayoutSwitch (title: "Layout Back Side Texts", small: true)
          .bind_value (self.mDataSelection.drawTextsLayoutBottomSide_property)
        view_2_11.appendView (view_2_11_0)
        let view_2_11_1 = AutoLayoutFlexibleSpace ()
        view_2_11.appendView (view_2_11_1)
      }
      view_2.appendView (view_2_11)
      let view_2_12 = AutoLayoutHorizontalStackView ()
        .set (leftMargin: 20)
      do{
        let view_2_12_0 = AutoLayoutSwitch (title: "Back Side Tracks", small: true)
          .bind_value (self.mDataSelection.drawTracksBottomSide_property)
        view_2_12.appendView (view_2_12_0)
        let view_2_12_1 = AutoLayoutFlexibleSpace ()
        view_2_12.appendView (view_2_12_1)
      }
      view_2.appendView (view_2_12)
      let view_2_13 = AutoLayoutHorizontalStackView ()
        .set (leftMargin: 20)
      do{
        let view_2_13_0 = AutoLayoutSwitch (title: "Back Side Pads", small: true)
          .bind_value (self.mDataSelection.drawPadsBottomSide_property)
        view_2_13.appendView (view_2_13_0)
        let view_2_13_1 = AutoLayoutFlexibleSpace ()
        view_2_13.appendView (view_2_13_1)
      }
      view_2.appendView (view_2_13)
      let view_2_14 = AutoLayoutHorizontalStackView ()
        .set (leftMargin: 20)
      do{
        let view_2_14_0 = AutoLayoutSwitch (title: "Back Side Component Names", small: true)
          .bind_value (self.mDataSelection.drawComponentNamesBottomSide_property)
        view_2_14.appendView (view_2_14_0)
        let view_2_14_1 = AutoLayoutFlexibleSpace ()
        view_2_14.appendView (view_2_14_1)
      }
      view_2.appendView (view_2_14)
      let view_2_15 = AutoLayoutHorizontalStackView ()
        .set (leftMargin: 20)
      do{
        let view_2_15_0 = AutoLayoutSwitch (title: "Back Side Component Values", small: true)
          .bind_value (self.mDataSelection.drawComponentValuesBottomSide_property)
        view_2_15.appendView (view_2_15_0)
        let view_2_15_1 = AutoLayoutFlexibleSpace ()
        view_2_15.appendView (view_2_15_1)
      }
      view_2.appendView (view_2_15)
      let view_2_16 = AutoLayoutHorizontalStackView ()
        .set (leftMargin: 20)
      do{
        let view_2_16_0 = AutoLayoutSwitch (title: "Back Side Package Legends", small: true)
          .bind_value (self.mDataSelection.drawPackageLegendBottomSide_property)
        view_2_16.appendView (view_2_16_0)
        let view_2_16_1 = AutoLayoutFlexibleSpace ()
        view_2_16.appendView (view_2_16_1)
      }
      view_2.appendView (view_2_16)
      let view_2_17 = AutoLayoutHorizontalStackView ()
      do{
        let view_2_17_0 = AutoLayoutStaticLabel (title: "Back Side Elements", bold: true, small: true)
        view_2_17.appendView (view_2_17_0)
        let view_2_17_1 = AutoLayoutFlexibleSpace ()
        view_2_17.appendView (view_2_17_1)
      }
      view_2.appendView (view_2_17)
      let view_2_18 = AutoLayoutHorizontalStackView ()
        .set (leftMargin: 20)
      do{
        let view_2_18_0 = AutoLayoutSwitch (title: "Vias", small: true)
          .bind_value (self.mDataSelection.drawVias_property)
        view_2_18.appendView (view_2_18_0)
        let view_2_18_1 = AutoLayoutFlexibleSpace ()
        view_2_18.appendView (view_2_18_1)
      }
      view_2.appendView (view_2_18)
      let view_2_19 = AutoLayoutHorizontalStackView ()
        .set (leftMargin: 20)
      do{
        let view_2_19_0 = AutoLayoutSwitch (title: "Internal Board Limits", small: true)
          .bind_value (self.mDataSelection.drawInternalBoardLimits_property)
        view_2_19.appendView (view_2_19_0)
        let view_2_19_1 = AutoLayoutFlexibleSpace ()
        view_2_19.appendView (view_2_19_1)
      }
      view_2.appendView (view_2_19)
      let view_2_20 = AutoLayoutHorizontalStackView ()
        .set (leftMargin: 20)
      do{
        let view_2_20_0 = AutoLayoutSwitch (title: "Board Limits", small: true)
          .bind_value (self.mDataSelection.drawBoardLimits_property)
        view_2_20.appendView (view_2_20_0)
        let view_2_20_1 = AutoLayoutFlexibleSpace ()
        view_2_20.appendView (view_2_20_1)
      }
      view_2.appendView (view_2_20)
      let view_2_21 = AutoLayoutHorizontalStackView ()
        .set (leftMargin: 20)
        .setFirstBaselineAlignment ()
      do{
        let view_2_21_0 = AutoLayoutSwitch (title: "Pad Holes in PDF file, with diameter", small: true)
          .bind_value (self.mDataSelection.drawPadHolesInPDF_property)
        view_2_21.appendView (view_2_21_0)
        let view_2_21_1 = AutoLayoutCanariDimensionAndPopUp (small: true)
          .bind_dimensionAndUnit (self.mDataSelection.padHoleDiameterInPDF_property, self.mDataSelection.measurementUnitForPadHoleInPDF_property)
          .bind_enabled (.id (self.mDataSelection.drawPadHolesInPDF_property))
        view_2_21.appendView (view_2_21_1)
        let view_2_21_2 = AutoLayoutFlexibleSpace ()
        view_2_21.appendView (view_2_21_2)
      }
      view_2.appendView (view_2_21)
      let view_2_22 = AutoLayoutHorizontalStackView ()
      do{
        let view_2_22_0 = AutoLayoutStaticLabel (title: "Option", bold: true, small: true)
        view_2_22.appendView (view_2_22_0)
        let view_2_22_1 = AutoLayoutFlexibleSpace ()
        view_2_22.appendView (view_2_22_1)
      }
      view_2.appendView (view_2_22)
      let view_2_23 = AutoLayoutHorizontalStackView ()
        .set (leftMargin: 20)
      do{
        let view_2_23_0 = AutoLayoutSwitch (title: "Horizontal Mirror", small: true)
          .bind_value (self.mDataSelection.horizontalMirror_property)
        view_2_23.appendView (view_2_23_0)
        let view_2_23_1 = AutoLayoutFlexibleSpace ()
        view_2_23.appendView (view_2_23_1)
      }
      view_2.appendView (view_2_23)
      let view_2_24 = AutoLayoutFlexibleSpace ()
      view_2.appendView (view_2_24)
    }
    hStackView.appendView (view_2)
    return hStackView
  } ()

  //····················································································································
  //    VIEW mInfosPage
  //····················································································································

  lazy var mInfosPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (leftMargin: 20)
      .set (rightMargin: 20)
      .set (bottomMargin: 20)
      .set (topMargin: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "Reset Version and Signature", small: true)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutArtworkDocument.resetVersionAndSignatureAction (_:))
        )
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_1)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutVerticalStackView ()
      do{
        let view_1_0_0 = AutoLayoutStaticLabel (title: "Comments", bold: false, small: false)
        view_1_0.appendView (view_1_0_0)
        let view_1_0_1 = AutoLayoutFlexibleSpace ()
        view_1_0.appendView (view_1_0_1)
      }
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutTextView ()
        .bind_value (self.rootObject.comments_property)
      view_1.appendView (view_1_1)
    }
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    IMPLICIT VIEW 0
  //····················································································································

  fileprivate final func computeImplicitView_0 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for PP, TP, TT and TW", bold: false, small: false)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 1
  //····················································································································

  fileprivate final func computeImplicitView_1 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (small: true)
      .bind_dimensionAndUnit (self.rootObject.minPPTPTTTW_property, self.rootObject.minPPTPTTTWdisplayUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 2
  //····················································································································

  fileprivate final func computeImplicitView_2 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for PHD", bold: false, small: false)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 3
  //····················································································································

  fileprivate final func computeImplicitView_3 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (small: true)
      .bind_dimensionAndUnit (self.rootObject.minValueForPHDinEBUnit_property, self.rootObject.minValueForPHDdisplayUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 4
  //····················································································································

  fileprivate final func computeImplicitView_4 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for OAR", bold: false, small: false)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 5
  //····················································································································

  fileprivate final func computeImplicitView_5 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (small: true)
      .bind_dimensionAndUnit (self.rootObject.minValueForOARinEBUnit_property, self.rootObject.minValueForOARdisplayUnit_property)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 6
  //····················································································································

  fileprivate final func computeImplicitView_6 () -> NSView {
    let view = AutoLayoutStaticLabel (title: "Minimum Value for Board Limit Width", bold: false, small: false)
    return view
  }

  //····················································································································
  //    IMPLICIT VIEW 7
  //····················································································································

  fileprivate final func computeImplicitView_7 () -> NSView {
    let view = AutoLayoutCanariDimensionAndPopUp (small: true)
      .bind_dimensionAndUnit (self.rootObject.minValueForBoardLimitWidth_property, self.rootObject.minValueForBoardLimitWidthDisplayUnit_property)
    return view
  }

  //····················································································································
  //    Build User Interface
  //····················································································································

  override func ebBuildUserInterface () {
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.mDocumentMainView
  //--- Call outlet linkers
  //--- Assign main view to window
    self.windowForSheet?.contentView = mainView
  }

  //····················································································································
  //    Toolbar
  //····················································································································

  final func toolbarAllowedItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return self.toolbarDefaultItemIdentifiers (toolbar)
  }

  //····················································································································

  final func toolbarDefaultItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return []
  }

  //····················································································································

  final func toolbar (_ toolbar: NSToolbar,
                      itemForItemIdentifier itemIdentifier: NSToolbarItem.Identifier,
                      willBeInsertedIntoToolbar flag: Bool) -> NSToolbarItem? {
    switch itemIdentifier.rawValue {
    default :
      return nil
    }
  }

  //····················································································································
  //    check outlet connections
  //····················································································································

//  private func checkOutletConnections () {
//    let start = Date ()
//    if LOG_OPERATION_DURATION {
//      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
//      Swift.print ("Check outlet connections \(durationMS) ms")
//    }
//  }

  //····················································································································

  final private func configureProperties () {
    let start = Date ()
    var opIdx = 0
  //--- Array controller property: mDataController
    self.mDataController.bind_model (self.rootObject.fileGenerationParameterArray_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mDataSelection
    self.mDataSelection.bind_selection (model: self.mDataController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: mStatusMessage
    self.mStatusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.fileGenerationParameterArray_property.selection, unwSelf.rootObject.fileGenerationParameterArray_property.selection) {
        case (.single (let v0), .single (let v1)) :
          return .single (transient_AutoLayoutArtworkDocument_mStatusMessage (v0, v1))
        case (.multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.fileGenerationParameterArray_property.addEBObserverOf_fileExtension (self.mStatusMessage_property)
    self.rootObject.fileGenerationParameterArray_property.addEBObserverOf_name (self.mStatusMessage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: mGeneratedFileCountString
    self.mGeneratedFileCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.mDataController.sortedArray_property.count_property.selection) {
        case (.single (let v0)) :
          return .single (transient_AutoLayoutArtworkDocument_mGeneratedFileCountString (v0))
        case (.multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.mDataController.sortedArray_property.count_property.addEBObserver (self.mGeneratedFileCountString_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: mStatusImage
    self.mStatusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch (unwSelf.rootObject.fileGenerationParameterArray_property.selection, unwSelf.rootObject.fileGenerationParameterArray_property.selection) {
        case (.single (let v0), .single (let v1)) :
          return .single (transient_AutoLayoutArtworkDocument_mStatusImage (v0, v1))
        case (.multiple, .multiple) :
          return .multiple
        default :
          return .empty
        }
      }else{
        return .empty
      }
    }
    self.rootObject.fileGenerationParameterArray_property.addEBObserverOf_fileExtension (self.mStatusImage_property)
    self.rootObject.fileGenerationParameterArray_property.addEBObserverOf_name (self.mStatusImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Configure properties \(durationMS) ms")
    }
  }

  //····················································································································

/*  final private func installBindings () {
    let start = Date ()
  //--------------------------- Install table view bindings
  //--------------------------- Install ebView bindings
  //--------------------------- Install regular bindings
  //--------------------------- Install multiple bindings
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Install bindings \(durationMS) ms")
    }
  } */

  //····················································································································

/*  final private func setTargetsAndActions () {
     let start = Date ()
   //--------------------------- Set targets / actions
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Set target and actions \(durationMS) ms")
    }
  } */

  //····················································································································
  //   removeUserInterface
  //····················································································································

  override func removeUserInterface () {
    super.removeUserInterface ()
  //--------------------------- Clean up auto layout views
    self.mPageMasterView.ebCleanUp ()
    self.mDocumentMainView.ebCleanUp ()
    self.mMinimaPage.ebCleanUp ()
    self.mDrillPage.ebCleanUp ()
    self.mDataPage.ebCleanUp ()
    self.mInfosPage.ebCleanUp ()
    let toolbarItems = self.windowForSheet?.toolbar?.items ?? []
    for item in toolbarItems {
      item.view?.ebCleanUp ()
    }
  //--------------------------- Unbind regular bindings
  //--------------------------- Unbind multiple bindings
  //--------------------------- Unbind array controllers
  //--- Array controller property: mDataController
    self.mDataController.unbind_model ()
  //--- Selection controller property: mDataSelection
    self.mDataSelection.unbind_selection ()
    // self.rootObject.fileGenerationParameterArray_property.removeEBObserverOf_fileExtension (self.mStatusMessage_property)
    // self.rootObject.fileGenerationParameterArray_property.removeEBObserverOf_name (self.mStatusMessage_property)
    // self.mDataController.sortedArray_property.count_property.removeEBObserver (self.mGeneratedFileCountString_property)
    // self.rootObject.fileGenerationParameterArray_property.removeEBObserverOf_fileExtension (self.mStatusImage_property)
    // self.rootObject.fileGenerationParameterArray_property.removeEBObserverOf_name (self.mStatusImage_property)
  //--------------------------- Remove targets / actions
  //--------------------------- Clean up outlets
  //--------------------------- Detach outlets
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

