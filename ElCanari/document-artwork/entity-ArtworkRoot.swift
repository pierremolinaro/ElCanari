//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ArtworkRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ArtworkRoot : EBManagedObject,
  ArtworkRoot_selectedTab,
  ArtworkRoot_comments,
  ArtworkRoot_minPP_TP_TT_TW_displayUnit,
  ArtworkRoot_minPP_TP_TT_TW_inEBUnit,
  ArtworkRoot_minValueForOARdisplayUnit,
  ArtworkRoot_minValueForOARinEBUnit,
  ArtworkRoot_minValueForPHDdisplayUnit,
  ArtworkRoot_minValueForPHDinEBUnit,
  ArtworkRoot_drillDataFormat,
  ArtworkRoot_drillDataFileExtension,
  ArtworkRoot_drillListFileExtension,
  ArtworkRoot_drillToolListFileExtension {

  //····················································································································
  //   Accessing selectedTab stored property
  //····················································································································

  var selectedTab : Int {
    get {
      return self.selectedTab_property.propval
    }
    set {
      self.selectedTab_property.setProp (newValue)
    }
  }

  var selectedTab_property_selection : EBSelection <Int> {
    get {
      return self.selectedTab_property.prop
    }
  }

  //····················································································································
  //   Accessing comments stored property
  //····················································································································

  var comments : String {
    get {
      return self.comments_property.propval
    }
    set {
      self.comments_property.setProp (newValue)
    }
  }

  var comments_property_selection : EBSelection <String> {
    get {
      return self.comments_property.prop
    }
  }

  //····················································································································
  //   Accessing minPP_TP_TT_TW_displayUnit stored property
  //····················································································································

  var minPP_TP_TT_TW_displayUnit : Int {
    get {
      return self.minPP_TP_TT_TW_displayUnit_property.propval
    }
    set {
      self.minPP_TP_TT_TW_displayUnit_property.setProp (newValue)
    }
  }

  var minPP_TP_TT_TW_displayUnit_property_selection : EBSelection <Int> {
    get {
      return self.minPP_TP_TT_TW_displayUnit_property.prop
    }
  }

  //····················································································································
  //   Accessing minPP_TP_TT_TW_inEBUnit stored property
  //····················································································································

  var minPP_TP_TT_TW_inEBUnit : Int {
    get {
      return self.minPP_TP_TT_TW_inEBUnit_property.propval
    }
    set {
      self.minPP_TP_TT_TW_inEBUnit_property.setProp (newValue)
    }
  }

  var minPP_TP_TT_TW_inEBUnit_property_selection : EBSelection <Int> {
    get {
      return self.minPP_TP_TT_TW_inEBUnit_property.prop
    }
  }

  //····················································································································
  //   Accessing minValueForOARdisplayUnit stored property
  //····················································································································

  var minValueForOARdisplayUnit : Int {
    get {
      return self.minValueForOARdisplayUnit_property.propval
    }
    set {
      self.minValueForOARdisplayUnit_property.setProp (newValue)
    }
  }

  var minValueForOARdisplayUnit_property_selection : EBSelection <Int> {
    get {
      return self.minValueForOARdisplayUnit_property.prop
    }
  }

  //····················································································································
  //   Accessing minValueForOARinEBUnit stored property
  //····················································································································

  var minValueForOARinEBUnit : Int {
    get {
      return self.minValueForOARinEBUnit_property.propval
    }
    set {
      self.minValueForOARinEBUnit_property.setProp (newValue)
    }
  }

  var minValueForOARinEBUnit_property_selection : EBSelection <Int> {
    get {
      return self.minValueForOARinEBUnit_property.prop
    }
  }

  //····················································································································
  //   Accessing minValueForPHDdisplayUnit stored property
  //····················································································································

  var minValueForPHDdisplayUnit : Int {
    get {
      return self.minValueForPHDdisplayUnit_property.propval
    }
    set {
      self.minValueForPHDdisplayUnit_property.setProp (newValue)
    }
  }

  var minValueForPHDdisplayUnit_property_selection : EBSelection <Int> {
    get {
      return self.minValueForPHDdisplayUnit_property.prop
    }
  }

  //····················································································································
  //   Accessing minValueForPHDinEBUnit stored property
  //····················································································································

  var minValueForPHDinEBUnit : Int {
    get {
      return self.minValueForPHDinEBUnit_property.propval
    }
    set {
      self.minValueForPHDinEBUnit_property.setProp (newValue)
    }
  }

  var minValueForPHDinEBUnit_property_selection : EBSelection <Int> {
    get {
      return self.minValueForPHDinEBUnit_property.prop
    }
  }

  //····················································································································
  //   Accessing drillDataFormat stored property
  //····················································································································

  var drillDataFormat : DrillDataFormatEnum {
    get {
      return self.drillDataFormat_property.propval
    }
    set {
      self.drillDataFormat_property.setProp (newValue)
    }
  }

  var drillDataFormat_property_selection : EBSelection <DrillDataFormatEnum> {
    get {
      return self.drillDataFormat_property.prop
    }
  }

  //····················································································································
  //   Accessing drillDataFileExtension stored property
  //····················································································································

  var drillDataFileExtension : String {
    get {
      return self.drillDataFileExtension_property.propval
    }
    set {
      self.drillDataFileExtension_property.setProp (newValue)
    }
  }

  var drillDataFileExtension_property_selection : EBSelection <String> {
    get {
      return self.drillDataFileExtension_property.prop
    }
  }

  //····················································································································
  //   Accessing drillListFileExtension stored property
  //····················································································································

  var drillListFileExtension : String {
    get {
      return self.drillListFileExtension_property.propval
    }
    set {
      self.drillListFileExtension_property.setProp (newValue)
    }
  }

  var drillListFileExtension_property_selection : EBSelection <String> {
    get {
      return self.drillListFileExtension_property.prop
    }
  }

  //····················································································································
  //   Accessing drillToolListFileExtension stored property
  //····················································································································

  var drillToolListFileExtension : String {
    get {
      return self.drillToolListFileExtension_property.propval
    }
    set {
      self.drillToolListFileExtension_property.setProp (newValue)
    }
  }

  var drillToolListFileExtension_property_selection : EBSelection <String> {
    get {
      return self.drillToolListFileExtension_property.prop
    }
  }

  //····················································································································
  //   Accessing fileGenerationParameterArray toMany relationship
  //····················································································································

  var fileGenerationParameterArray_property_selection : EBSelection < [ArtworkFileGenerationParameters] > {
    get {
      return self.fileGenerationParameterArray_property.prop
    }
  }

  //····················································································································
  //    Stored Properties
  //····················································································································

  var selectedTab_property = EBStoredProperty_Int (0)
  var comments_property = EBStoredProperty_String ("")
  var minPP_TP_TT_TW_displayUnit_property = EBStoredProperty_Int (90)
  var minPP_TP_TT_TW_inEBUnit_property = EBStoredProperty_Int (18000)
  var minValueForOARdisplayUnit_property = EBStoredProperty_Int (90)
  var minValueForOARinEBUnit_property = EBStoredProperty_Int (18000)
  var minValueForPHDdisplayUnit_property = EBStoredProperty_Int (90)
  var minValueForPHDinEBUnit_property = EBStoredProperty_Int (18000)
  var drillDataFormat_property = EBStoredProperty_DrillDataFormatEnum (DrillDataFormatEnum.excellon)
  var drillDataFileExtension_property = EBStoredProperty_String ("drf")
  var drillListFileExtension_property = EBStoredProperty_String ("drd")
  var drillToolListFileExtension_property = EBStoredProperty_String ("drl")

  //····················································································································
  //    Transient properties
  //····················································································································


  //····················································································································
  //    Relationships
  //····················································································································

  var fileGenerationParameterArray_property = ToManyRelationship_ArtworkRoot_fileGenerationParameterArray ()

  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
  //--- Install property observers for transients
  //--- Install undoers for properties
    self.selectedTab_property.undoManager = undoManager ()
    self.comments_property.undoManager = undoManager ()
    self.minPP_TP_TT_TW_displayUnit_property.undoManager = undoManager ()
    self.minPP_TP_TT_TW_inEBUnit_property.undoManager = undoManager ()
    self.minValueForOARdisplayUnit_property.undoManager = undoManager ()
    self.minValueForOARinEBUnit_property.undoManager = undoManager ()
    self.minValueForPHDdisplayUnit_property.undoManager = undoManager ()
    self.minValueForPHDinEBUnit_property.undoManager = undoManager ()
    self.drillDataFormat_property.undoManager = undoManager ()
    self.drillDataFileExtension_property.undoManager = undoManager ()
    self.drillListFileExtension_property.undoManager = undoManager ()
    self.drillToolListFileExtension_property.undoManager = undoManager ()
  //--- Install owner for relationships
    self.fileGenerationParameterArray_property.owner = self
  //--- register properties for handling signature
    self.comments_property.setSignatureObserver (observer:self)
    self.drillDataFileExtension_property.setSignatureObserver (observer:self)
    self.drillDataFormat_property.setSignatureObserver (observer:self)
    self.drillListFileExtension_property.setSignatureObserver (observer:self)
    self.drillToolListFileExtension_property.setSignatureObserver (observer:self)
    self.fileGenerationParameterArray_property.setSignatureObserver (observer:self)
    self.minPP_TP_TT_TW_inEBUnit_property.setSignatureObserver (observer:self)
    self.minValueForOARinEBUnit_property.setSignatureObserver (observer:self)
    self.minValueForPHDinEBUnit_property.setSignatureObserver (observer:self)
  }

  //····················································································································

  deinit {
  //--- Remove observers
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "selectedTab",
      idx:self.selectedTab_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedTab_property.mObserverExplorer,
      valueExplorer:&self.selectedTab_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "comments",
      idx:self.comments_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.comments_property.mObserverExplorer,
      valueExplorer:&self.comments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minPP_TP_TT_TW_displayUnit",
      idx:self.minPP_TP_TT_TW_displayUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minPP_TP_TT_TW_displayUnit_property.mObserverExplorer,
      valueExplorer:&self.minPP_TP_TT_TW_displayUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minPP_TP_TT_TW_inEBUnit",
      idx:self.minPP_TP_TT_TW_inEBUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minPP_TP_TT_TW_inEBUnit_property.mObserverExplorer,
      valueExplorer:&self.minPP_TP_TT_TW_inEBUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minValueForOARdisplayUnit",
      idx:self.minValueForOARdisplayUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minValueForOARdisplayUnit_property.mObserverExplorer,
      valueExplorer:&self.minValueForOARdisplayUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minValueForOARinEBUnit",
      idx:self.minValueForOARinEBUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minValueForOARinEBUnit_property.mObserverExplorer,
      valueExplorer:&self.minValueForOARinEBUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minValueForPHDdisplayUnit",
      idx:self.minValueForPHDdisplayUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minValueForPHDdisplayUnit_property.mObserverExplorer,
      valueExplorer:&self.minValueForPHDdisplayUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minValueForPHDinEBUnit",
      idx:self.minValueForPHDinEBUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minValueForPHDinEBUnit_property.mObserverExplorer,
      valueExplorer:&self.minValueForPHDinEBUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drillDataFormat",
      idx:self.drillDataFormat_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drillDataFormat_property.mObserverExplorer,
      valueExplorer:&self.drillDataFormat_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drillDataFileExtension",
      idx:self.drillDataFileExtension_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drillDataFileExtension_property.mObserverExplorer,
      valueExplorer:&self.drillDataFileExtension_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drillListFileExtension",
      idx:self.drillListFileExtension_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drillListFileExtension_property.mObserverExplorer,
      valueExplorer:&self.drillListFileExtension_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drillToolListFileExtension",
      idx:self.drillToolListFileExtension_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drillToolListFileExtension_property.mObserverExplorer,
      valueExplorer:&self.drillToolListFileExtension_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "fileGenerationParameterArray",
      idx:fileGenerationParameterArray_property.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&fileGenerationParameterArray_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.selectedTab_property.mObserverExplorer = nil
    self.selectedTab_property.mValueExplorer = nil
    self.comments_property.mObserverExplorer = nil
    self.comments_property.mValueExplorer = nil
    self.minPP_TP_TT_TW_displayUnit_property.mObserverExplorer = nil
    self.minPP_TP_TT_TW_displayUnit_property.mValueExplorer = nil
    self.minPP_TP_TT_TW_inEBUnit_property.mObserverExplorer = nil
    self.minPP_TP_TT_TW_inEBUnit_property.mValueExplorer = nil
    self.minValueForOARdisplayUnit_property.mObserverExplorer = nil
    self.minValueForOARdisplayUnit_property.mValueExplorer = nil
    self.minValueForOARinEBUnit_property.mObserverExplorer = nil
    self.minValueForOARinEBUnit_property.mValueExplorer = nil
    self.minValueForPHDdisplayUnit_property.mObserverExplorer = nil
    self.minValueForPHDdisplayUnit_property.mValueExplorer = nil
    self.minValueForPHDinEBUnit_property.mObserverExplorer = nil
    self.minValueForPHDinEBUnit_property.mValueExplorer = nil
    self.drillDataFormat_property.mObserverExplorer = nil
    self.drillDataFormat_property.mValueExplorer = nil
    self.drillDataFileExtension_property.mObserverExplorer = nil
    self.drillDataFileExtension_property.mValueExplorer = nil
    self.drillListFileExtension_property.mObserverExplorer = nil
    self.drillListFileExtension_property.mValueExplorer = nil
    self.drillToolListFileExtension_property.mObserverExplorer = nil
    self.drillToolListFileExtension_property.mValueExplorer = nil
    self.fileGenerationParameterArray_property.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.selectedTab_property.storeIn (dictionary: ioDictionary, forKey: "selectedTab")
    self.comments_property.storeIn (dictionary: ioDictionary, forKey: "comments")
    self.minPP_TP_TT_TW_displayUnit_property.storeIn (dictionary: ioDictionary, forKey: "minPP_TP_TT_TW_displayUnit")
    self.minPP_TP_TT_TW_inEBUnit_property.storeIn (dictionary: ioDictionary, forKey: "minPP_TP_TT_TW_inEBUnit")
    self.minValueForOARdisplayUnit_property.storeIn (dictionary: ioDictionary, forKey: "minValueForOARdisplayUnit")
    self.minValueForOARinEBUnit_property.storeIn (dictionary: ioDictionary, forKey: "minValueForOARinEBUnit")
    self.minValueForPHDdisplayUnit_property.storeIn (dictionary: ioDictionary, forKey: "minValueForPHDdisplayUnit")
    self.minValueForPHDinEBUnit_property.storeIn (dictionary: ioDictionary, forKey: "minValueForPHDinEBUnit")
    self.drillDataFormat_property.storeIn (dictionary: ioDictionary, forKey: "drillDataFormat")
    self.drillDataFileExtension_property.storeIn (dictionary: ioDictionary, forKey: "drillDataFileExtension")
    self.drillListFileExtension_property.storeIn (dictionary: ioDictionary, forKey: "drillListFileExtension")
    self.drillToolListFileExtension_property.storeIn (dictionary: ioDictionary, forKey: "drillToolListFileExtension")
    store (managedObjectArray: fileGenerationParameterArray_property.propval as NSArray, relationshipName:"fileGenerationParameterArray", intoDictionary: ioDictionary) ;
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.selectedTab_property.readFrom (dictionary: inDictionary, forKey:"selectedTab")
    self.comments_property.readFrom (dictionary: inDictionary, forKey:"comments")
    self.minPP_TP_TT_TW_displayUnit_property.readFrom (dictionary: inDictionary, forKey:"minPP_TP_TT_TW_displayUnit")
    self.minPP_TP_TT_TW_inEBUnit_property.readFrom (dictionary: inDictionary, forKey:"minPP_TP_TT_TW_inEBUnit")
    self.minValueForOARdisplayUnit_property.readFrom (dictionary: inDictionary, forKey:"minValueForOARdisplayUnit")
    self.minValueForOARinEBUnit_property.readFrom (dictionary: inDictionary, forKey:"minValueForOARinEBUnit")
    self.minValueForPHDdisplayUnit_property.readFrom (dictionary: inDictionary, forKey:"minValueForPHDdisplayUnit")
    self.minValueForPHDinEBUnit_property.readFrom (dictionary: inDictionary, forKey:"minValueForPHDinEBUnit")
    self.drillDataFormat_property.readFrom (dictionary: inDictionary, forKey:"drillDataFormat")
    self.drillDataFileExtension_property.readFrom (dictionary: inDictionary, forKey:"drillDataFileExtension")
    self.drillListFileExtension_property.readFrom (dictionary: inDictionary, forKey:"drillListFileExtension")
    self.drillToolListFileExtension_property.readFrom (dictionary: inDictionary, forKey:"drillToolListFileExtension")
    self.fileGenerationParameterArray_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "fileGenerationParameterArray",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [ArtworkFileGenerationParameters])
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
    do{
      let objects = self.fileGenerationParameterArray_property.propval
      self.fileGenerationParameterArray_property.setProp ([])
      self.managedObjectContext ()?.internalRemoveManagedObjects (objects, &ioObjectsToRemove) // Cascade removing from moc
    }
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   resetToManyRelationships
  //····················································································································

  override func resetToManyRelationships () {
    super.resetToManyRelationships ()
    self.fileGenerationParameterArray_property.setProp ([])
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
    for managedObject : EBManagedObject in self.fileGenerationParameterArray_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.comments_property.signature ())
    crc.accumulateUInt32 (self.drillDataFileExtension_property.signature ())
    crc.accumulateUInt32 (self.drillDataFormat_property.signature ())
    crc.accumulateUInt32 (self.drillListFileExtension_property.signature ())
    crc.accumulateUInt32 (self.drillToolListFileExtension_property.signature ())
    crc.accumulateUInt32 (self.fileGenerationParameterArray_property.signature ())
    crc.accumulateUInt32 (self.minPP_TP_TT_TW_inEBUnit_property.signature ())
    crc.accumulateUInt32 (self.minValueForOARinEBUnit_property.signature ())
    crc.accumulateUInt32 (self.minValueForPHDinEBUnit_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ArtworkRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ArtworkRoot : ReadOnlyAbstractArrayProperty <ArtworkRoot> {

  //····················································································································
  //   Observers of 'selectedTab' stored property
  //····················································································································

  private var mObserversOf_selectedTab = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedTab (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_selectedTab.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedTab_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedTab (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_selectedTab.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedTab_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedTab_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_selectedTab {
        managedObject.selectedTab_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedTab_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for observer in mObserversOf_selectedTab {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedTab_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'comments' stored property
  //····················································································································

  private var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_comments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.comments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_comments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.comments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_comments_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_comments {
        managedObject.comments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_comments_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for observer in mObserversOf_comments {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.comments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minPP_TP_TT_TW_displayUnit' stored property
  //····················································································································

  private var mObserversOf_minPP_TP_TT_TW_displayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minPP_TP_TT_TW_displayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_minPP_TP_TT_TW_displayUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minPP_TP_TT_TW_displayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minPP_TP_TT_TW_displayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_minPP_TP_TT_TW_displayUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minPP_TP_TT_TW_displayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minPP_TP_TT_TW_displayUnit_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_minPP_TP_TT_TW_displayUnit {
        managedObject.minPP_TP_TT_TW_displayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minPP_TP_TT_TW_displayUnit_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for observer in mObserversOf_minPP_TP_TT_TW_displayUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minPP_TP_TT_TW_displayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minPP_TP_TT_TW_inEBUnit' stored property
  //····················································································································

  private var mObserversOf_minPP_TP_TT_TW_inEBUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minPP_TP_TT_TW_inEBUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_minPP_TP_TT_TW_inEBUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minPP_TP_TT_TW_inEBUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minPP_TP_TT_TW_inEBUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_minPP_TP_TT_TW_inEBUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minPP_TP_TT_TW_inEBUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minPP_TP_TT_TW_inEBUnit_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_minPP_TP_TT_TW_inEBUnit {
        managedObject.minPP_TP_TT_TW_inEBUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minPP_TP_TT_TW_inEBUnit_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for observer in mObserversOf_minPP_TP_TT_TW_inEBUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minPP_TP_TT_TW_inEBUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForOARdisplayUnit' stored property
  //····················································································································

  private var mObserversOf_minValueForOARdisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForOARdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_minValueForOARdisplayUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForOARdisplayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForOARdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_minValueForOARdisplayUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForOARdisplayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForOARdisplayUnit_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_minValueForOARdisplayUnit {
        managedObject.minValueForOARdisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForOARdisplayUnit_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for observer in mObserversOf_minValueForOARdisplayUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForOARdisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForOARinEBUnit' stored property
  //····················································································································

  private var mObserversOf_minValueForOARinEBUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForOARinEBUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_minValueForOARinEBUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForOARinEBUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForOARinEBUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_minValueForOARinEBUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForOARinEBUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForOARinEBUnit_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_minValueForOARinEBUnit {
        managedObject.minValueForOARinEBUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForOARinEBUnit_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for observer in mObserversOf_minValueForOARinEBUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForOARinEBUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForPHDdisplayUnit' stored property
  //····················································································································

  private var mObserversOf_minValueForPHDdisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForPHDdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_minValueForPHDdisplayUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForPHDdisplayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForPHDdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_minValueForPHDdisplayUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForPHDdisplayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForPHDdisplayUnit_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_minValueForPHDdisplayUnit {
        managedObject.minValueForPHDdisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForPHDdisplayUnit_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for observer in mObserversOf_minValueForPHDdisplayUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForPHDdisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForPHDinEBUnit' stored property
  //····················································································································

  private var mObserversOf_minValueForPHDinEBUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForPHDinEBUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_minValueForPHDinEBUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForPHDinEBUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForPHDinEBUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_minValueForPHDinEBUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForPHDinEBUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForPHDinEBUnit_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_minValueForPHDinEBUnit {
        managedObject.minValueForPHDinEBUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForPHDinEBUnit_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for observer in mObserversOf_minValueForPHDinEBUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForPHDinEBUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drillDataFormat' stored property
  //····················································································································

  private var mObserversOf_drillDataFormat = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drillDataFormat (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drillDataFormat.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drillDataFormat_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillDataFormat (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drillDataFormat.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drillDataFormat_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drillDataFormat_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_drillDataFormat {
        managedObject.drillDataFormat_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drillDataFormat_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for observer in mObserversOf_drillDataFormat {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drillDataFormat_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drillDataFileExtension' stored property
  //····················································································································

  private var mObserversOf_drillDataFileExtension = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drillDataFileExtension (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drillDataFileExtension.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drillDataFileExtension_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillDataFileExtension (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drillDataFileExtension.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drillDataFileExtension_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drillDataFileExtension_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_drillDataFileExtension {
        managedObject.drillDataFileExtension_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drillDataFileExtension_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for observer in mObserversOf_drillDataFileExtension {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drillDataFileExtension_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drillListFileExtension' stored property
  //····················································································································

  private var mObserversOf_drillListFileExtension = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drillListFileExtension (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drillListFileExtension.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drillListFileExtension_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillListFileExtension (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drillListFileExtension.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drillListFileExtension_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drillListFileExtension_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_drillListFileExtension {
        managedObject.drillListFileExtension_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drillListFileExtension_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for observer in mObserversOf_drillListFileExtension {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drillListFileExtension_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drillToolListFileExtension' stored property
  //····················································································································

  private var mObserversOf_drillToolListFileExtension = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drillToolListFileExtension (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drillToolListFileExtension.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drillToolListFileExtension_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillToolListFileExtension (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drillToolListFileExtension.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drillToolListFileExtension_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drillToolListFileExtension_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      for observer in mObserversOf_drillToolListFileExtension {
        managedObject.drillToolListFileExtension_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drillToolListFileExtension_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for observer in mObserversOf_drillToolListFileExtension {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drillToolListFileExtension_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_ArtworkRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_ArtworkRoot : ReadOnlyArrayOf_ArtworkRoot {

  var readModelFunction : Optional<() -> EBSelection < [ArtworkRoot] > >

  private var prop_cache : EBSelection < [ArtworkRoot] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <ArtworkRoot> ()

  override var prop : EBSelection < [ArtworkRoot] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <ArtworkRoot>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <ArtworkRoot> ()
        case .single (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_selectedTab_fromElementsOfSet (removedSet)
        removeEBObserversOf_comments_fromElementsOfSet (removedSet)
        removeEBObserversOf_minPP_TP_TT_TW_displayUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_minPP_TP_TT_TW_inEBUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_minValueForOARdisplayUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_minValueForOARinEBUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_minValueForPHDdisplayUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_minValueForPHDinEBUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_drillDataFormat_fromElementsOfSet (removedSet)
        removeEBObserversOf_drillDataFileExtension_fromElementsOfSet (removedSet)
        removeEBObserversOf_drillListFileExtension_fromElementsOfSet (removedSet)
        removeEBObserversOf_drillToolListFileExtension_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_selectedTab_toElementsOfSet (addedSet)
        addEBObserversOf_comments_toElementsOfSet (addedSet)
        addEBObserversOf_minPP_TP_TT_TW_displayUnit_toElementsOfSet (addedSet)
        addEBObserversOf_minPP_TP_TT_TW_inEBUnit_toElementsOfSet (addedSet)
        addEBObserversOf_minValueForOARdisplayUnit_toElementsOfSet (addedSet)
        addEBObserversOf_minValueForOARinEBUnit_toElementsOfSet (addedSet)
        addEBObserversOf_minValueForPHDdisplayUnit_toElementsOfSet (addedSet)
        addEBObserversOf_minValueForPHDinEBUnit_toElementsOfSet (addedSet)
        addEBObserversOf_drillDataFormat_toElementsOfSet (addedSet)
        addEBObserversOf_drillDataFileExtension_toElementsOfSet (addedSet)
        addEBObserversOf_drillListFileExtension_toElementsOfSet (addedSet)
        addEBObserversOf_drillToolListFileExtension_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_selectedTab : class {
  var selectedTab : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_comments : class {
  var comments : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_minPP_TP_TT_TW_displayUnit : class {
  var minPP_TP_TT_TW_displayUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_minPP_TP_TT_TW_inEBUnit : class {
  var minPP_TP_TT_TW_inEBUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_minValueForOARdisplayUnit : class {
  var minValueForOARdisplayUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_minValueForOARinEBUnit : class {
  var minValueForOARinEBUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_minValueForPHDdisplayUnit : class {
  var minValueForPHDdisplayUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_minValueForPHDinEBUnit : class {
  var minValueForPHDinEBUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_drillDataFormat : class {
  var drillDataFormat : DrillDataFormatEnum { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_drillDataFileExtension : class {
  var drillDataFileExtension : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_drillListFileExtension : class {
  var drillListFileExtension : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_drillToolListFileExtension : class {
  var drillToolListFileExtension : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: fileGenerationParameterArray
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_ArtworkRoot_fileGenerationParameterArray : ReadOnlyArrayOf_ArtworkFileGenerationParameters {

  //····················································································································
 
  func setProp (_ value :  [ArtworkFileGenerationParameters]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: fileGenerationParameterArray
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_ArtworkRoot_fileGenerationParameterArray :
ToManyRelationshipReadWrite_ArtworkRoot_fileGenerationParameterArray, EBSignatureObserverProtocol {
  weak var owner : ArtworkRoot?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <ArtworkFileGenerationParameters> ()
  private var mValue = [ArtworkFileGenerationParameters] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
        }
        removeEBObserversOf_drawBoardLimits_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawComponentNamesBottomSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawComponentNamesTopSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawComponentValuesBottomSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawComponentValuesTopSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawPackageLegendBottomSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawPackageLegendTopSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawPadHolesInPDF_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawPadsBottomSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawPadsTopSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawTextsLayoutBottomSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawTextsLayoutTopSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawTextsLegendBottomSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawTextsLegendTopSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawTracksBottomSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawTracksTopSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawVias_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_fileExtension_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_horizontalMirror_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_measurementUnitForPadHoleInPDF_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_name_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_padHoleDiameterInPDF_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : ArtworkFileGenerationParameters in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
        }
        addEBObserversOf_drawBoardLimits_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawComponentNamesBottomSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawComponentNamesTopSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawComponentValuesBottomSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawComponentValuesTopSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawPackageLegendBottomSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawPackageLegendTopSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawPadHolesInPDF_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawPadsBottomSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawPadsTopSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawTextsLayoutBottomSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawTextsLayoutTopSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawTextsLegendBottomSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawTextsLegendTopSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawTracksBottomSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawTracksTopSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawVias_toElementsOfSet (addedObjectSet)
        addEBObserversOf_fileExtension_toElementsOfSet (addedObjectSet)
        addEBObserversOf_horizontalMirror_toElementsOfSet (addedObjectSet)
        addEBObserversOf_measurementUnitForPadHoleInPDF_toElementsOfSet (addedObjectSet)
        addEBObserversOf_name_toElementsOfSet (addedObjectSet)
        addEBObserversOf_padHoleDiameterInPDF_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [ArtworkFileGenerationParameters] > { return .single (mValue) }

  override func setProp (_ inValue : [ArtworkFileGenerationParameters]) { mValue = inValue }

  var propval : [ArtworkFileGenerationParameters] { return mValue }

  //····················································································································

  func performUndo (_ oldValue : [ArtworkFileGenerationParameters]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : ArtworkFileGenerationParameters) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : ArtworkFileGenerationParameters) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

