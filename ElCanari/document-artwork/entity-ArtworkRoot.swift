//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_selectedTab : class {
  var selectedTab : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_comments : class {
  var comments : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_minPPTPTTTWdisplayUnit : class {
  var minPPTPTTTWdisplayUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_minPPTPTTTW : class {
  var minPPTPTTTW : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_minValueForOARdisplayUnit : class {
  var minValueForOARdisplayUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_minValueForOARinEBUnit : class {
  var minValueForOARinEBUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_minValueForPHDdisplayUnit : class {
  var minValueForPHDdisplayUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_minValueForPHDinEBUnit : class {
  var minValueForPHDinEBUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_minValueForBoardLimitWidthDisplayUnit : class {
  var minValueForBoardLimitWidthDisplayUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_minValueForBoardLimitWidth : class {
  var minValueForBoardLimitWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRoot_drillDataFileExtension : class {
  var drillDataFileExtension : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ArtworkRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ArtworkRoot : EBManagedObject,
         ArtworkRoot_selectedTab,
         ArtworkRoot_comments,
         ArtworkRoot_minPPTPTTTWdisplayUnit,
         ArtworkRoot_minPPTPTTTW,
         ArtworkRoot_minValueForOARdisplayUnit,
         ArtworkRoot_minValueForOARinEBUnit,
         ArtworkRoot_minValueForPHDdisplayUnit,
         ArtworkRoot_minValueForPHDinEBUnit,
         ArtworkRoot_minValueForBoardLimitWidthDisplayUnit,
         ArtworkRoot_minValueForBoardLimitWidth,
         ArtworkRoot_drillDataFileExtension {

  //····················································································································
  //   Atomic property: selectedTab
  //····················································································································

  let selectedTab_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var selectedTab : Int {
    get { return self.selectedTab_property.propval }
    set { self.selectedTab_property.setProp (newValue) }
  }

  //····················································································································

  var selectedTab_property_selection : EBSelection <Int> { return self.selectedTab_property.prop }

  //····················································································································
  //   Atomic property: comments
  //····················································································································

  let comments_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var comments : String {
    get { return self.comments_property.propval }
    set { self.comments_property.setProp (newValue) }
  }

  //····················································································································

  var comments_property_selection : EBSelection <String> { return self.comments_property.prop }

  //····················································································································
  //   Atomic property: minPPTPTTTWdisplayUnit
  //····················································································································

  let minPPTPTTTWdisplayUnit_property = EBStoredProperty_Int (defaultValue: 90)

  //····················································································································

  var minPPTPTTTWdisplayUnit : Int {
    get { return self.minPPTPTTTWdisplayUnit_property.propval }
    set { self.minPPTPTTTWdisplayUnit_property.setProp (newValue) }
  }

  //····················································································································

  var minPPTPTTTWdisplayUnit_property_selection : EBSelection <Int> { return self.minPPTPTTTWdisplayUnit_property.prop }

  //····················································································································
  //   Atomic property: minPPTPTTTW
  //····················································································································

  let minPPTPTTTW_property = EBStoredProperty_Int (defaultValue: 18000)

  //····················································································································

  var minPPTPTTTW : Int {
    get { return self.minPPTPTTTW_property.propval }
    set { self.minPPTPTTTW_property.setProp (newValue) }
  }

  //····················································································································

  var minPPTPTTTW_property_selection : EBSelection <Int> { return self.minPPTPTTTW_property.prop }

  //····················································································································
  //   Atomic property: minValueForOARdisplayUnit
  //····················································································································

  let minValueForOARdisplayUnit_property = EBStoredProperty_Int (defaultValue: 90)

  //····················································································································

  var minValueForOARdisplayUnit : Int {
    get { return self.minValueForOARdisplayUnit_property.propval }
    set { self.minValueForOARdisplayUnit_property.setProp (newValue) }
  }

  //····················································································································

  var minValueForOARdisplayUnit_property_selection : EBSelection <Int> { return self.minValueForOARdisplayUnit_property.prop }

  //····················································································································
  //   Atomic property: minValueForOARinEBUnit
  //····················································································································

  let minValueForOARinEBUnit_property = EBStoredProperty_Int (defaultValue: 18000)

  //····················································································································

  var minValueForOARinEBUnit : Int {
    get { return self.minValueForOARinEBUnit_property.propval }
    set { self.minValueForOARinEBUnit_property.setProp (newValue) }
  }

  //····················································································································

  var minValueForOARinEBUnit_property_selection : EBSelection <Int> { return self.minValueForOARinEBUnit_property.prop }

  //····················································································································
  //   Atomic property: minValueForPHDdisplayUnit
  //····················································································································

  let minValueForPHDdisplayUnit_property = EBStoredProperty_Int (defaultValue: 90)

  //····················································································································

  var minValueForPHDdisplayUnit : Int {
    get { return self.minValueForPHDdisplayUnit_property.propval }
    set { self.minValueForPHDdisplayUnit_property.setProp (newValue) }
  }

  //····················································································································

  var minValueForPHDdisplayUnit_property_selection : EBSelection <Int> { return self.minValueForPHDdisplayUnit_property.prop }

  //····················································································································
  //   Atomic property: minValueForPHDinEBUnit
  //····················································································································

  let minValueForPHDinEBUnit_property = EBStoredProperty_Int (defaultValue: 18000)

  //····················································································································

  var minValueForPHDinEBUnit : Int {
    get { return self.minValueForPHDinEBUnit_property.propval }
    set { self.minValueForPHDinEBUnit_property.setProp (newValue) }
  }

  //····················································································································

  var minValueForPHDinEBUnit_property_selection : EBSelection <Int> { return self.minValueForPHDinEBUnit_property.prop }

  //····················································································································
  //   Atomic property: minValueForBoardLimitWidthDisplayUnit
  //····················································································································

  let minValueForBoardLimitWidthDisplayUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var minValueForBoardLimitWidthDisplayUnit : Int {
    get { return self.minValueForBoardLimitWidthDisplayUnit_property.propval }
    set { self.minValueForBoardLimitWidthDisplayUnit_property.setProp (newValue) }
  }

  //····················································································································

  var minValueForBoardLimitWidthDisplayUnit_property_selection : EBSelection <Int> { return self.minValueForBoardLimitWidthDisplayUnit_property.prop }

  //····················································································································
  //   Atomic property: minValueForBoardLimitWidth
  //····················································································································

  let minValueForBoardLimitWidth_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var minValueForBoardLimitWidth : Int {
    get { return self.minValueForBoardLimitWidth_property.propval }
    set { self.minValueForBoardLimitWidth_property.setProp (newValue) }
  }

  //····················································································································

  var minValueForBoardLimitWidth_property_selection : EBSelection <Int> { return self.minValueForBoardLimitWidth_property.prop }

  //····················································································································
  //   Atomic property: drillDataFileExtension
  //····················································································································

  let drillDataFileExtension_property = EBStoredProperty_String (defaultValue: "drf")

  //····················································································································

  var drillDataFileExtension : String {
    get { return self.drillDataFileExtension_property.propval }
    set { self.drillDataFileExtension_property.setProp (newValue) }
  }

  //····················································································································

  var drillDataFileExtension_property_selection : EBSelection <String> { return self.drillDataFileExtension_property.prop }

  //····················································································································
  //   To many property: fileGenerationParameterArray
  //····················································································································

  let fileGenerationParameterArray_property = StoredArrayOf_ArtworkFileGenerationParameters ()

  //····················································································································

  var fileGenerationParameterArray_property_selection : EBSelection < [ArtworkFileGenerationParameters] > {
    return self.fileGenerationParameterArray_property.prop
  }

  //····················································································································

  var fileGenerationParameterArray : [ArtworkFileGenerationParameters] {
    get { return self.fileGenerationParameterArray_property.propval }
    set { self.fileGenerationParameterArray_property.setProp (newValue) }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: selectedTab
    self.selectedTab_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: comments
    self.comments_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: minPPTPTTTWdisplayUnit
    self.minPPTPTTTWdisplayUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: minPPTPTTTW
    self.minPPTPTTTW_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: minValueForOARdisplayUnit
    self.minValueForOARdisplayUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: minValueForOARinEBUnit
    self.minValueForOARinEBUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: minValueForPHDdisplayUnit
    self.minValueForPHDdisplayUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: minValueForPHDinEBUnit
    self.minValueForPHDinEBUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: minValueForBoardLimitWidthDisplayUnit
    self.minValueForBoardLimitWidthDisplayUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: minValueForBoardLimitWidth
    self.minValueForBoardLimitWidth_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drillDataFileExtension
    self.drillDataFileExtension_property.ebUndoManager = self.ebUndoManager
  //--- To many property: fileGenerationParameterArray (no option)
    self.fileGenerationParameterArray_property.ebUndoManager = self.ebUndoManager
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.comments_property.setSignatureObserver (observer: self)
    self.drillDataFileExtension_property.setSignatureObserver (observer: self)
    self.fileGenerationParameterArray_property.setSignatureObserver (observer: self)
    self.minPPTPTTTW_property.setSignatureObserver (observer: self)
    self.minValueForBoardLimitWidth_property.setSignatureObserver (observer: self)
    self.minValueForOARinEBUnit_property.setSignatureObserver (observer: self)
    self.minValueForPHDinEBUnit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- Unregister properties for handling signature
    self.comments_property.setSignatureObserver (observer: nil)
    self.drillDataFileExtension_property.setSignatureObserver (observer: nil)
    self.fileGenerationParameterArray_property.setSignatureObserver (observer: nil)
    self.minPPTPTTTW_property.setSignatureObserver (observer: nil)
    self.minValueForBoardLimitWidth_property.setSignatureObserver (observer: nil)
    self.minValueForOARinEBUnit_property.setSignatureObserver (observer: nil)
    self.minValueForPHDinEBUnit_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "selectedTab",
      idx:self.selectedTab_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedTab_property.mObserverExplorer,
      valueExplorer:&self.selectedTab_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "comments",
      idx:self.comments_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.comments_property.mObserverExplorer,
      valueExplorer:&self.comments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minPPTPTTTWdisplayUnit",
      idx:self.minPPTPTTTWdisplayUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minPPTPTTTWdisplayUnit_property.mObserverExplorer,
      valueExplorer:&self.minPPTPTTTWdisplayUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minPPTPTTTW",
      idx:self.minPPTPTTTW_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minPPTPTTTW_property.mObserverExplorer,
      valueExplorer:&self.minPPTPTTTW_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minValueForOARdisplayUnit",
      idx:self.minValueForOARdisplayUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minValueForOARdisplayUnit_property.mObserverExplorer,
      valueExplorer:&self.minValueForOARdisplayUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minValueForOARinEBUnit",
      idx:self.minValueForOARinEBUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minValueForOARinEBUnit_property.mObserverExplorer,
      valueExplorer:&self.minValueForOARinEBUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minValueForPHDdisplayUnit",
      idx:self.minValueForPHDdisplayUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minValueForPHDdisplayUnit_property.mObserverExplorer,
      valueExplorer:&self.minValueForPHDdisplayUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minValueForPHDinEBUnit",
      idx:self.minValueForPHDinEBUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minValueForPHDinEBUnit_property.mObserverExplorer,
      valueExplorer:&self.minValueForPHDinEBUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minValueForBoardLimitWidthDisplayUnit",
      idx:self.minValueForBoardLimitWidthDisplayUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minValueForBoardLimitWidthDisplayUnit_property.mObserverExplorer,
      valueExplorer:&self.minValueForBoardLimitWidthDisplayUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minValueForBoardLimitWidth",
      idx:self.minValueForBoardLimitWidth_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minValueForBoardLimitWidth_property.mObserverExplorer,
      valueExplorer:&self.minValueForBoardLimitWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drillDataFileExtension",
      idx:self.drillDataFileExtension_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drillDataFileExtension_property.mObserverExplorer,
      valueExplorer:&self.drillDataFileExtension_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "fileGenerationParameterArray",
      idx:fileGenerationParameterArray_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&fileGenerationParameterArray_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: selectedTab
    self.selectedTab_property.mObserverExplorer = nil
    self.selectedTab_property.mValueExplorer = nil
  //--- Atomic property: comments
    self.comments_property.mObserverExplorer = nil
    self.comments_property.mValueExplorer = nil
  //--- Atomic property: minPPTPTTTWdisplayUnit
    self.minPPTPTTTWdisplayUnit_property.mObserverExplorer = nil
    self.minPPTPTTTWdisplayUnit_property.mValueExplorer = nil
  //--- Atomic property: minPPTPTTTW
    self.minPPTPTTTW_property.mObserverExplorer = nil
    self.minPPTPTTTW_property.mValueExplorer = nil
  //--- Atomic property: minValueForOARdisplayUnit
    self.minValueForOARdisplayUnit_property.mObserverExplorer = nil
    self.minValueForOARdisplayUnit_property.mValueExplorer = nil
  //--- Atomic property: minValueForOARinEBUnit
    self.minValueForOARinEBUnit_property.mObserverExplorer = nil
    self.minValueForOARinEBUnit_property.mValueExplorer = nil
  //--- Atomic property: minValueForPHDdisplayUnit
    self.minValueForPHDdisplayUnit_property.mObserverExplorer = nil
    self.minValueForPHDdisplayUnit_property.mValueExplorer = nil
  //--- Atomic property: minValueForPHDinEBUnit
    self.minValueForPHDinEBUnit_property.mObserverExplorer = nil
    self.minValueForPHDinEBUnit_property.mValueExplorer = nil
  //--- Atomic property: minValueForBoardLimitWidthDisplayUnit
    self.minValueForBoardLimitWidthDisplayUnit_property.mObserverExplorer = nil
    self.minValueForBoardLimitWidthDisplayUnit_property.mValueExplorer = nil
  //--- Atomic property: minValueForBoardLimitWidth
    self.minValueForBoardLimitWidth_property.mObserverExplorer = nil
    self.minValueForBoardLimitWidth_property.mValueExplorer = nil
  //--- Atomic property: drillDataFileExtension
    self.drillDataFileExtension_property.mObserverExplorer = nil
    self.drillDataFileExtension_property.mValueExplorer = nil
  //--- To many property: fileGenerationParameterArray
    self.fileGenerationParameterArray_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.fileGenerationParameterArray_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: selectedTab
    self.selectedTab_property.storeIn (dictionary: ioDictionary, forKey:"selectedTab")
  //--- Atomic property: comments
    self.comments_property.storeIn (dictionary: ioDictionary, forKey:"comments")
  //--- Atomic property: minPPTPTTTWdisplayUnit
    self.minPPTPTTTWdisplayUnit_property.storeIn (dictionary: ioDictionary, forKey:"minPPTPTTTWdisplayUnit")
  //--- Atomic property: minPPTPTTTW
    self.minPPTPTTTW_property.storeIn (dictionary: ioDictionary, forKey:"minPPTPTTTW")
  //--- Atomic property: minValueForOARdisplayUnit
    self.minValueForOARdisplayUnit_property.storeIn (dictionary: ioDictionary, forKey:"minValueForOARdisplayUnit")
  //--- Atomic property: minValueForOARinEBUnit
    self.minValueForOARinEBUnit_property.storeIn (dictionary: ioDictionary, forKey:"minValueForOARinEBUnit")
  //--- Atomic property: minValueForPHDdisplayUnit
    self.minValueForPHDdisplayUnit_property.storeIn (dictionary: ioDictionary, forKey:"minValueForPHDdisplayUnit")
  //--- Atomic property: minValueForPHDinEBUnit
    self.minValueForPHDinEBUnit_property.storeIn (dictionary: ioDictionary, forKey:"minValueForPHDinEBUnit")
  //--- Atomic property: minValueForBoardLimitWidthDisplayUnit
    self.minValueForBoardLimitWidthDisplayUnit_property.storeIn (dictionary: ioDictionary, forKey:"minValueForBoardLimitWidthDisplayUnit")
  //--- Atomic property: minValueForBoardLimitWidth
    self.minValueForBoardLimitWidth_property.storeIn (dictionary: ioDictionary, forKey:"minValueForBoardLimitWidth")
  //--- Atomic property: drillDataFileExtension
    self.drillDataFileExtension_property.storeIn (dictionary: ioDictionary, forKey:"drillDataFileExtension")
  //--- To many property: fileGenerationParameterArray
    self.store (
      managedObjectArray: self.fileGenerationParameterArray_property.propval,
      relationshipName: "fileGenerationParameterArray",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: fileGenerationParameterArray
    self.fileGenerationParameterArray_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "fileGenerationParameterArray",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [ArtworkFileGenerationParameters])
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: selectedTab
    self.selectedTab_property.readFrom (dictionary: inDictionary, forKey:"selectedTab")
  //--- Atomic property: comments
    self.comments_property.readFrom (dictionary: inDictionary, forKey:"comments")
  //--- Atomic property: minPPTPTTTWdisplayUnit
    self.minPPTPTTTWdisplayUnit_property.readFrom (dictionary: inDictionary, forKey:"minPPTPTTTWdisplayUnit")
  //--- Atomic property: minPPTPTTTW
    self.minPPTPTTTW_property.readFrom (dictionary: inDictionary, forKey:"minPPTPTTTW")
  //--- Atomic property: minValueForOARdisplayUnit
    self.minValueForOARdisplayUnit_property.readFrom (dictionary: inDictionary, forKey:"minValueForOARdisplayUnit")
  //--- Atomic property: minValueForOARinEBUnit
    self.minValueForOARinEBUnit_property.readFrom (dictionary: inDictionary, forKey:"minValueForOARinEBUnit")
  //--- Atomic property: minValueForPHDdisplayUnit
    self.minValueForPHDdisplayUnit_property.readFrom (dictionary: inDictionary, forKey:"minValueForPHDdisplayUnit")
  //--- Atomic property: minValueForPHDinEBUnit
    self.minValueForPHDinEBUnit_property.readFrom (dictionary: inDictionary, forKey:"minValueForPHDinEBUnit")
  //--- Atomic property: minValueForBoardLimitWidthDisplayUnit
    self.minValueForBoardLimitWidthDisplayUnit_property.readFrom (dictionary: inDictionary, forKey:"minValueForBoardLimitWidthDisplayUnit")
  //--- Atomic property: minValueForBoardLimitWidth
    self.minValueForBoardLimitWidth_property.readFrom (dictionary: inDictionary, forKey:"minValueForBoardLimitWidth")
  //--- Atomic property: drillDataFileExtension
    self.drillDataFileExtension_property.readFrom (dictionary: inDictionary, forKey:"drillDataFileExtension")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: fileGenerationParameterArray
    for managedObject in self.fileGenerationParameterArray_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: fileGenerationParameterArray
    for managedObject in self.fileGenerationParameterArray_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.comments_property.signature ())
    crc.accumulateUInt32 (self.drillDataFileExtension_property.signature ())
    crc.accumulateUInt32 (self.fileGenerationParameterArray_property.signature ())
    crc.accumulateUInt32 (self.minPPTPTTTW_property.signature ())
    crc.accumulateUInt32 (self.minValueForBoardLimitWidth_property.signature ())
    crc.accumulateUInt32 (self.minValueForOARinEBUnit_property.signature ())
    crc.accumulateUInt32 (self.minValueForPHDinEBUnit_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ArtworkRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ArtworkRoot : ReadOnlyAbstractArrayProperty <ArtworkRoot> {

  //····················································································································
  //   Observers of 'selectedTab' stored property
  //····················································································································

  private var mObserversOf_selectedTab = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedTab (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedTab.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedTab_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedTab (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedTab.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedTab_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedTab_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedTab.apply { (_ observer : EBEvent) in
        managedObject.selectedTab_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedTab_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    self.mObserversOf_selectedTab.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedTab_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'comments' stored property
  //····················································································································

  private var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_comments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.comments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_comments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.comments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_comments_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      self.mObserversOf_comments.apply { (_ observer : EBEvent) in
        managedObject.comments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_comments_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    self.mObserversOf_comments.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.comments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minPPTPTTTWdisplayUnit' stored property
  //····················································································································

  private var mObserversOf_minPPTPTTTWdisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minPPTPTTTWdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTWdisplayUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minPPTPTTTWdisplayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minPPTPTTTWdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTWdisplayUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minPPTPTTTWdisplayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minPPTPTTTWdisplayUnit_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minPPTPTTTWdisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.minPPTPTTTWdisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minPPTPTTTWdisplayUnit_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    self.mObserversOf_minPPTPTTTWdisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minPPTPTTTWdisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minPPTPTTTW' stored property
  //····················································································································

  private var mObserversOf_minPPTPTTTW = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minPPTPTTTW (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTW.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minPPTPTTTW_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minPPTPTTTW (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTW.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minPPTPTTTW_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minPPTPTTTW_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minPPTPTTTW.apply { (_ observer : EBEvent) in
        managedObject.minPPTPTTTW_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minPPTPTTTW_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    self.mObserversOf_minPPTPTTTW.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minPPTPTTTW_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForOARdisplayUnit' stored property
  //····················································································································

  private var mObserversOf_minValueForOARdisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForOARdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForOARdisplayUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForOARdisplayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForOARdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForOARdisplayUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForOARdisplayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForOARdisplayUnit_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minValueForOARdisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForOARdisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForOARdisplayUnit_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    self.mObserversOf_minValueForOARdisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForOARdisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForOARinEBUnit' stored property
  //····················································································································

  private var mObserversOf_minValueForOARinEBUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForOARinEBUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForOARinEBUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForOARinEBUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForOARinEBUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForOARinEBUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForOARinEBUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForOARinEBUnit_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minValueForOARinEBUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForOARinEBUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForOARinEBUnit_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    self.mObserversOf_minValueForOARinEBUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForOARinEBUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForPHDdisplayUnit' stored property
  //····················································································································

  private var mObserversOf_minValueForPHDdisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForPHDdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForPHDdisplayUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForPHDdisplayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForPHDdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForPHDdisplayUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForPHDdisplayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForPHDdisplayUnit_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minValueForPHDdisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForPHDdisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForPHDdisplayUnit_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    self.mObserversOf_minValueForPHDdisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForPHDdisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForPHDinEBUnit' stored property
  //····················································································································

  private var mObserversOf_minValueForPHDinEBUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForPHDinEBUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForPHDinEBUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForPHDinEBUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForPHDinEBUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForPHDinEBUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForPHDinEBUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForPHDinEBUnit_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minValueForPHDinEBUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForPHDinEBUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForPHDinEBUnit_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    self.mObserversOf_minValueForPHDinEBUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForPHDinEBUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForBoardLimitWidthDisplayUnit' stored property
  //····················································································································

  private var mObserversOf_minValueForBoardLimitWidthDisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForBoardLimitWidthDisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForBoardLimitWidthDisplayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForBoardLimitWidthDisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForBoardLimitWidthDisplayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForBoardLimitWidthDisplayUnit_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForBoardLimitWidthDisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForBoardLimitWidthDisplayUnit_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForBoardLimitWidthDisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForBoardLimitWidth' stored property
  //····················································································································

  private var mObserversOf_minValueForBoardLimitWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForBoardLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForBoardLimitWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForBoardLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.minValueForBoardLimitWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForBoardLimitWidth_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minValueForBoardLimitWidth.apply { (_ observer : EBEvent) in
        managedObject.minValueForBoardLimitWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForBoardLimitWidth_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    self.mObserversOf_minValueForBoardLimitWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForBoardLimitWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drillDataFileExtension' stored property
  //····················································································································

  private var mObserversOf_drillDataFileExtension = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drillDataFileExtension (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drillDataFileExtension.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drillDataFileExtension_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillDataFileExtension (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drillDataFileExtension.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drillDataFileExtension_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drillDataFileExtension_toElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    for managedObject in inSet {
      self.mObserversOf_drillDataFileExtension.apply { (_ observer : EBEvent) in
        managedObject.drillDataFileExtension_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drillDataFileExtension_fromElementsOfSet (_ inSet : Set<ArtworkRoot>) {
    self.mObserversOf_drillDataFileExtension.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drillDataFileExtension_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_ArtworkRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_ArtworkRoot : ReadOnlyArrayOf_ArtworkRoot {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [ArtworkRoot] > > = nil

  //····················································································································

  override var propset : Set <ArtworkRoot> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [ArtworkRoot] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [ArtworkRoot] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  private var mSet = Set <ArtworkRoot> ()

  //····················································································································

  private var mCachedValue : EBSelection < [ArtworkRoot] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      let cachedValue = unwrappedComputeFunction ()
      self.mCachedValue = cachedValue
      let newSet : Set <ArtworkRoot>
      switch cachedValue {
      case .multiple, .empty :
        newSet = Set <ArtworkRoot> ()
      case .single (let array) :
        newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_selectedTab_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_comments_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_minPPTPTTTWdisplayUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_minPPTPTTTW_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_minValueForOARdisplayUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_minValueForOARinEBUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_minValueForPHDdisplayUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_minValueForPHDinEBUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_minValueForBoardLimitWidthDisplayUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_minValueForBoardLimitWidth_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_drillDataFileExtension_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_selectedTab_toElementsOfSet (addedSet)
      self.addEBObserversOf_comments_toElementsOfSet (addedSet)
      self.addEBObserversOf_minPPTPTTTWdisplayUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_minPPTPTTTW_toElementsOfSet (addedSet)
      self.addEBObserversOf_minValueForOARdisplayUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_minValueForOARinEBUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_minValueForPHDdisplayUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_minValueForPHDinEBUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_minValueForBoardLimitWidthDisplayUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_minValueForBoardLimitWidth_toElementsOfSet (addedSet)
      self.addEBObserversOf_drillDataFileExtension_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: ArtworkRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_ArtworkRoot : ReadOnlyArrayOf_ArtworkRoot {

  //····················································································································
 
  func setProp (_ value :  [ArtworkRoot]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_ArtworkRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_ArtworkRoot : ReadWriteArrayOf_ArtworkRoot {

  //····················································································································

  private var mModel : ReadWriteArrayOf_ArtworkRoot? = nil

  //····················································································································

  func bind (_ inModel : ReadWriteArrayOf_ArtworkRoot) {
    self.unbind ()
    self.mModel = inModel
    inModel.addEBObserver (self)
  }

  //····················································································································

  func unbind () {
    if let model = self.mModel {
      model.removeEBObserver (self)
      self.mModel = nil
    }
  }

  //····················································································································

  override func setProp (_ inArrayValue :  [ArtworkRoot]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [ArtworkRoot] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: ArtworkRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_ArtworkRoot : ReadWriteArrayOf_ArtworkRoot, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : ArtworkRoot) -> Void > = nil
  var resetOppositeRelationship : Optional < (_ inManagedObject : ArtworkRoot) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [ArtworkRoot] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "ArtworkRoot") as? ArtworkRoot {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <ArtworkRoot> ()
  private var mValue = [ArtworkRoot] () {
    didSet {
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.resetOppositeRelationship? (managedObject)
            managedObject.selectedTab_property.mSetterDelegate = nil
            managedObject.comments_property.mSetterDelegate = nil
            managedObject.minPPTPTTTWdisplayUnit_property.mSetterDelegate = nil
            managedObject.minPPTPTTTW_property.mSetterDelegate = nil
            managedObject.minValueForOARdisplayUnit_property.mSetterDelegate = nil
            managedObject.minValueForOARinEBUnit_property.mSetterDelegate = nil
            managedObject.minValueForPHDdisplayUnit_property.mSetterDelegate = nil
            managedObject.minValueForPHDinEBUnit_property.mSetterDelegate = nil
            managedObject.minValueForBoardLimitWidthDisplayUnit_property.mSetterDelegate = nil
            managedObject.minValueForBoardLimitWidth_property.mSetterDelegate = nil
            managedObject.drillDataFileExtension_property.mSetterDelegate = nil
          }
        //--- Remove observers of stored properties
          self.removeEBObserversOf_selectedTab_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_comments_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_minPPTPTTTWdisplayUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_minPPTPTTTW_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_minValueForOARdisplayUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_minValueForOARinEBUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_minValueForPHDdisplayUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_minValueForPHDinEBUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_minValueForBoardLimitWidthDisplayUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_minValueForBoardLimitWidth_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_drillDataFileExtension_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of transient properties
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : ArtworkRoot in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
            managedObject.selectedTab_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.comments_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.minPPTPTTTWdisplayUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.minPPTPTTTW_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.minValueForOARdisplayUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.minValueForOARinEBUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.minValueForPHDdisplayUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.minValueForPHDinEBUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.minValueForBoardLimitWidthDisplayUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.minValueForBoardLimitWidth_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.drillDataFileExtension_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
        //--- Add observers of stored properties
          self.addEBObserversOf_selectedTab_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_comments_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_minPPTPTTTWdisplayUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_minPPTPTTTW_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_minValueForOARdisplayUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_minValueForOARinEBUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_minValueForPHDdisplayUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_minValueForPHDinEBUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_minValueForBoardLimitWidthDisplayUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_minValueForBoardLimitWidth_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_drillDataFileExtension_toElementsOfSet (addedObjectSet)
        //--- Add observers of transient properties
        }
      //--- Notify observers
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [ArtworkRoot] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [ArtworkRoot]) { self.mValue = inValue }

  //····················································································································

  override var propval : [ArtworkRoot] { return self.mValue }

  //····················································································································

  override var propset : Set <ArtworkRoot> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [ArtworkRoot]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : ArtworkRoot) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : ArtworkRoot) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
