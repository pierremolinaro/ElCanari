//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(ArtworkDocument) class ArtworkDocument : EBManagedDocument {

  //····················································································································
  //   Array controller: mDataController
  //····················································································································

  var mDataController = Controller_ArtworkDocument_mDataController ()

  //····················································································································
  //   Selection controller: mDataSelection
  //····················································································································

  var mDataSelection = SelectionController_ArtworkDocument_mDataSelection ()

  //····················································································································
  //   Transient property: documentFilePath
  //····················································································································

  let documentFilePath_property = EBTransientProperty_String ()

  //····················································································································

  var documentFilePath_property_selection : EBSelection <String> {
    return self.documentFilePath_property.prop
  }

  //····················································································································

  var documentFilePath : String? {
    switch self.documentFilePath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mGeneratedFileCountString
  //····················································································································

  let mGeneratedFileCountString_property = EBTransientProperty_String ()

  //····················································································································

  var mGeneratedFileCountString_property_selection : EBSelection <String> {
    return self.mGeneratedFileCountString_property.prop
  }

  //····················································································································

  var mGeneratedFileCountString : String? {
    switch self.mGeneratedFileCountString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mStatusImage
  //····················································································································

  let mStatusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  var mStatusImage_property_selection : EBSelection <NSImage> {
    return self.mStatusImage_property.prop
  }

  //····················································································································

  var mStatusImage : NSImage? {
    switch self.mStatusImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mStatusMessage
  //····················································································································

  let mStatusMessage_property = EBTransientProperty_String ()

  //····················································································································

  var mStatusMessage_property_selection : EBSelection <String> {
    return self.mStatusMessage_property.prop
  }

  //····················································································································

  var mStatusMessage : String? {
    switch self.mStatusMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }


  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var mAddGenerationFileButton : EBButton?
  @IBOutlet var mCommentTextView : EBTextView?
  @IBOutlet var mDataPageView : CanariViewWithKeyView?
  @IBOutlet var mDataTableView : EBTableView?
  @IBOutlet var mDimensionForPadHoleInPDFTextField : CanariDimensionTextField?
  @IBOutlet var mDrawBoardInternalLimitsSwitch : EBSwitch?
  @IBOutlet var mDrawBoardLimitsSwitch : EBSwitch?
  @IBOutlet var mDrawComponentNamesBottomSideSwitch : EBSwitch?
  @IBOutlet var mDrawComponentNamesTopSideSwitch : EBSwitch?
  @IBOutlet var mDrawComponentValuesBottomSideSwitch : EBSwitch?
  @IBOutlet var mDrawComponentValuesTopSideSwitch : EBSwitch?
  @IBOutlet var mDrawPackageLegendBottomSideSwitch : EBSwitch?
  @IBOutlet var mDrawPackageLegendTopSideSwitch : EBSwitch?
  @IBOutlet var mDrawPadHolesInPDFSwitch : EBSwitch?
  @IBOutlet var mDrawPadsBottomSideSwitch : EBSwitch?
  @IBOutlet var mDrawPadsTopSideSwitch : EBSwitch?
  @IBOutlet var mDrawTextsLayoutBottomSideSwitch : EBSwitch?
  @IBOutlet var mDrawTextsLayoutTopSideSwitch : EBSwitch?
  @IBOutlet var mDrawTextsLegendBottomSideSwitch : EBSwitch?
  @IBOutlet var mDrawTextsLegendTopSideSwitch : EBSwitch?
  @IBOutlet var mDrawTracksBottomSidSwitche : EBSwitch?
  @IBOutlet var mDrawTracksTopSideSwitch : EBSwitch?
  @IBOutlet var mDrawViasSwitch : EBSwitch?
  @IBOutlet var mDrillDataFileExtensionTextField : EBTextField?
  @IBOutlet var mDrillPageView : CanariViewWithKeyView?
  @IBOutlet var mExtensionTextField : EBTextField?
  @IBOutlet var mGeneratedFileCountTextField : EBTextObserverField?
  @IBOutlet var mHorizontalMirrorSwitch : EBSwitch?
  @IBOutlet var mInfosPageView : CanariViewWithKeyView?
  @IBOutlet var mMasterView : NSView?
  @IBOutlet var mMeasurementUnitForPadHoleInPDFPopUp : EBPopUpButton?
  @IBOutlet var mMinPPTPTTTWdisplayUnitTextField : CanariDimensionTextField?
  @IBOutlet var mMinPPTPTTTWinEBUnitPopUp : EBPopUpButton?
  @IBOutlet var mMinimaPageView : CanariViewWithKeyView?
  @IBOutlet var mOARUnitPopUp : EBPopUpButton?
  @IBOutlet var mOARValueTextField : CanariDimensionTextField?
  @IBOutlet var mOtherSignatureTextField : CanariSignatureField?
  @IBOutlet var mPHDUnitPopUp : EBPopUpButton?
  @IBOutlet var mPHDValueTextField : CanariDimensionTextField?
  @IBOutlet var mPadHoleDefinitionView : NSView?
  @IBOutlet var mRemoveGenerationFileButton : EBButton?
  @IBOutlet var mSegmentedControl : CanariSegmentedControl?
  @IBOutlet var mSignatureTextField : CanariSignatureField?
  @IBOutlet var mStatusImageViewInToolbar : EBImageObserverView?
  @IBOutlet var mVersionField : CanariVersionField?
  @IBOutlet var mVersionFieldInToolbar : CanariVersionField?
  @IBOutlet var minValueForBoardLimitTextField : CanariDimensionTextField?
  @IBOutlet var minValueForBoardLimitUnitPopUp : EBPopUpButton?
  @IBOutlet var resetVersionAndSignatureButton : EBButton?

  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

  var mController_mRemoveGenerationFileButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mPadHoleDefinitionView_hidden : MultipleBindingController_hidden? = nil

  //····················································································································
  //    Document file path
  //····················································································································
  // Cette méthode est appelée après tout enregistrement, qu'il y ait changement de nom ou pas.

  override var fileModificationDate : Date? {
    get {
      return super.fileModificationDate
    }
    set{
      super.fileModificationDate = newValue
      self.documentFilePath_property.postEvent ()
    }
  }

  //····················································································································

  func computeTransient_documentFilePath () -> String {
    var documentFilePath = ""
    if let url = self.fileURL {
      documentFilePath = url.path
    }
    return documentFilePath
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
  //--- Array controller property: mDataController
    self.mDataController.addExplorer (name: "mDataController", y:&y, view:view)
  //--- Selection controller property: mDataSelection
    self.mDataSelection.addExplorer (name: "mDataSelection", y:&y, view:view)
  //---
    super.populateExplorerWindow (&y, view:view)
  }

  //····················································································································
  //    windowNibName
  //····················································································································

  override var windowNibName : NSNib.Name {
    return NSNib.Name ("ArtworkDocument")
  }
  
  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override func rootEntityClassName () -> String {
    return "ArtworkRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  var rootObject : ArtworkRoot { return self.mRootObject as! ArtworkRoot }

  //····················································································································
  //    check outlet connections
  //····················································································································

  private func checkOutletConnections () {
    checkOutletConnection (self.mAddGenerationFileButton, "mAddGenerationFileButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mCommentTextView, "mCommentTextView", EBTextView.self, #file, #line)
    checkOutletConnection (self.mDataPageView, "mDataPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mDataTableView, "mDataTableView", EBTableView.self, #file, #line)
    checkOutletConnection (self.mDimensionForPadHoleInPDFTextField, "mDimensionForPadHoleInPDFTextField", CanariDimensionTextField.self, #file, #line)
    checkOutletConnection (self.mDrawBoardInternalLimitsSwitch, "mDrawBoardInternalLimitsSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawBoardLimitsSwitch, "mDrawBoardLimitsSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawComponentNamesBottomSideSwitch, "mDrawComponentNamesBottomSideSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawComponentNamesTopSideSwitch, "mDrawComponentNamesTopSideSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawComponentValuesBottomSideSwitch, "mDrawComponentValuesBottomSideSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawComponentValuesTopSideSwitch, "mDrawComponentValuesTopSideSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawPackageLegendBottomSideSwitch, "mDrawPackageLegendBottomSideSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawPackageLegendTopSideSwitch, "mDrawPackageLegendTopSideSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawPadHolesInPDFSwitch, "mDrawPadHolesInPDFSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawPadsBottomSideSwitch, "mDrawPadsBottomSideSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawPadsTopSideSwitch, "mDrawPadsTopSideSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawTextsLayoutBottomSideSwitch, "mDrawTextsLayoutBottomSideSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawTextsLayoutTopSideSwitch, "mDrawTextsLayoutTopSideSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawTextsLegendBottomSideSwitch, "mDrawTextsLegendBottomSideSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawTextsLegendTopSideSwitch, "mDrawTextsLegendTopSideSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawTracksBottomSidSwitche, "mDrawTracksBottomSidSwitche", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawTracksTopSideSwitch, "mDrawTracksTopSideSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mDrawViasSwitch, "mDrawViasSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mDrillDataFileExtensionTextField, "mDrillDataFileExtensionTextField", EBTextField.self, #file, #line)
    checkOutletConnection (self.mDrillPageView, "mDrillPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mExtensionTextField, "mExtensionTextField", EBTextField.self, #file, #line)
    checkOutletConnection (self.mGeneratedFileCountTextField, "mGeneratedFileCountTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mHorizontalMirrorSwitch, "mHorizontalMirrorSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mInfosPageView, "mInfosPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mMasterView, "mMasterView", NSView.self, #file, #line)
    checkOutletConnection (self.mMeasurementUnitForPadHoleInPDFPopUp, "mMeasurementUnitForPadHoleInPDFPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mMinPPTPTTTWdisplayUnitTextField, "mMinPPTPTTTWdisplayUnitTextField", CanariDimensionTextField.self, #file, #line)
    checkOutletConnection (self.mMinPPTPTTTWinEBUnitPopUp, "mMinPPTPTTTWinEBUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mMinimaPageView, "mMinimaPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mOARUnitPopUp, "mOARUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mOARValueTextField, "mOARValueTextField", CanariDimensionTextField.self, #file, #line)
    checkOutletConnection (self.mOtherSignatureTextField, "mOtherSignatureTextField", CanariSignatureField.self, #file, #line)
    checkOutletConnection (self.mPHDUnitPopUp, "mPHDUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.mPHDValueTextField, "mPHDValueTextField", CanariDimensionTextField.self, #file, #line)
    checkOutletConnection (self.mPadHoleDefinitionView, "mPadHoleDefinitionView", NSView.self, #file, #line)
    checkOutletConnection (self.mRemoveGenerationFileButton, "mRemoveGenerationFileButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mSegmentedControl, "mSegmentedControl", CanariSegmentedControl.self, #file, #line)
    checkOutletConnection (self.mSignatureTextField, "mSignatureTextField", CanariSignatureField.self, #file, #line)
    checkOutletConnection (self.mStatusImageViewInToolbar, "mStatusImageViewInToolbar", EBImageObserverView.self, #file, #line)
    checkOutletConnection (self.mVersionField, "mVersionField", CanariVersionField.self, #file, #line)
    checkOutletConnection (self.mVersionFieldInToolbar, "mVersionFieldInToolbar", CanariVersionField.self, #file, #line)
    checkOutletConnection (self.minValueForBoardLimitTextField, "minValueForBoardLimitTextField", CanariDimensionTextField.self, #file, #line)
    checkOutletConnection (self.minValueForBoardLimitUnitPopUp, "minValueForBoardLimitUnitPopUp", EBPopUpButton.self, #file, #line)
    checkOutletConnection (self.resetVersionAndSignatureButton, "resetVersionAndSignatureButton", EBButton.self, #file, #line)
   }
  
  //····················································································································
  //    windowControllerDidLoadNib
  //····················································································································

  override func windowControllerDidLoadNib (_ aController: NSWindowController) {
    super.windowControllerDidLoadNib (aController)
  //--------------------------- Outlet checking
    self.checkOutletConnections ()
  //--- Array controller property: mDataController
    self.mDataController.bind_model (self.rootObject.fileGenerationParameterArray_property)
  //--- Selection controller property: mDataSelection
    self.mDataSelection.bind_selection (model: self.mDataController.selectedArray_property, file: #file, line: #line)
  //--- Atomic property: mGeneratedFileCountString
    self.mGeneratedFileCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDataController.sortedArray_property.count_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mDataController.sortedArray_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ArtworkDocument_mGeneratedFileCountString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDataController.sortedArray_property.count_property.addEBObserver (self.mGeneratedFileCountString_property)
  //--- Atomic property: mStatusImage
    self.mStatusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.rootObject.fileGenerationParameterArray_property_selection.kind ()
        kind &= unwSelf.rootObject.fileGenerationParameterArray_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.fileGenerationParameterArray_property_selection, unwSelf.rootObject.fileGenerationParameterArray_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ArtworkDocument_mStatusImage (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.fileGenerationParameterArray_property.addEBObserverOf_fileExtension (self.mStatusImage_property)
    self.rootObject.fileGenerationParameterArray_property.addEBObserverOf_name (self.mStatusImage_property)
  //--- Atomic property: mStatusMessage
    self.mStatusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.rootObject.fileGenerationParameterArray_property_selection.kind ()
        kind &= unwSelf.rootObject.fileGenerationParameterArray_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.fileGenerationParameterArray_property_selection, unwSelf.rootObject.fileGenerationParameterArray_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ArtworkDocument_mStatusMessage (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.fileGenerationParameterArray_property.addEBObserverOf_fileExtension (self.mStatusMessage_property)
    self.rootObject.fileGenerationParameterArray_property.addEBObserverOf_name (self.mStatusMessage_property)
    self.mDataController.bind_tableView (self.mDataTableView, file: #file, line: #line)
  //--------------------------- Install regular bindings
    self.mSegmentedControl?.bind_selectedPage (self.rootObject.selectedTab_property, file: #file, line: #line)
    self.mMinPPTPTTTWinEBUnitPopUp?.bind_selectedTag (self.rootObject.minPPTPTTTWdisplayUnit_property, file: #file, line: #line)
    self.mMinPPTPTTTWdisplayUnitTextField?.bind_dimensionAndUnit (self.rootObject.minPPTPTTTW_property, self.rootObject.minPPTPTTTWdisplayUnit_property, file: #file, line: #line)
    self.mOARUnitPopUp?.bind_selectedTag (self.rootObject.minValueForOARdisplayUnit_property, file: #file, line: #line)
    self.mOARValueTextField?.bind_dimensionAndUnit (self.rootObject.minValueForOARinEBUnit_property, self.rootObject.minValueForOARdisplayUnit_property, file: #file, line: #line)
    self.mPHDUnitPopUp?.bind_selectedTag (self.rootObject.minValueForPHDdisplayUnit_property, file: #file, line: #line)
    self.mPHDValueTextField?.bind_dimensionAndUnit (self.rootObject.minValueForPHDinEBUnit_property, self.rootObject.minValueForPHDdisplayUnit_property, file: #file, line: #line)
    self.minValueForBoardLimitUnitPopUp?.bind_selectedTag (self.rootObject.minValueForBoardLimitWidthDisplayUnit_property, file: #file, line: #line)
    self.minValueForBoardLimitTextField?.bind_dimensionAndUnit (self.rootObject.minValueForBoardLimitWidth_property, self.rootObject.minValueForBoardLimitWidthDisplayUnit_property, file: #file, line: #line)
    self.mDrillDataFileExtensionTextField?.bind_value (self.rootObject.drillDataFileExtension_property, file: #file, line: #line, sendContinously:false)
    self.mExtensionTextField?.bind_value (self.mDataSelection.fileExtension_property, file: #file, line: #line, sendContinously:false)
    self.mDrawBoardInternalLimitsSwitch?.bind_value (self.mDataSelection.drawInternalBoardLimits_property, file: #file, line: #line)
    self.mDrawBoardLimitsSwitch?.bind_value (self.mDataSelection.drawBoardLimits_property, file: #file, line: #line)
    self.mDrawComponentValuesTopSideSwitch?.bind_value (self.mDataSelection.drawComponentValuesTopSide_property, file: #file, line: #line)
    self.mDrawComponentValuesBottomSideSwitch?.bind_value (self.mDataSelection.drawComponentValuesBottomSide_property, file: #file, line: #line)
    self.mDrawComponentNamesTopSideSwitch?.bind_value (self.mDataSelection.drawComponentNamesTopSide_property, file: #file, line: #line)
    self.mDrawComponentNamesBottomSideSwitch?.bind_value (self.mDataSelection.drawComponentNamesBottomSide_property, file: #file, line: #line)
    self.mDrawPackageLegendTopSideSwitch?.bind_value (self.mDataSelection.drawPackageLegendTopSide_property, file: #file, line: #line)
    self.mDrawPackageLegendBottomSideSwitch?.bind_value (self.mDataSelection.drawPackageLegendBottomSide_property, file: #file, line: #line)
    self.mDrawPadHolesInPDFSwitch?.bind_value (self.mDataSelection.drawPadHolesInPDF_property, file: #file, line: #line)
    self.mDrawPadsTopSideSwitch?.bind_value (self.mDataSelection.drawPadsTopSide_property, file: #file, line: #line)
    self.mDrawPadsBottomSideSwitch?.bind_value (self.mDataSelection.drawPadsBottomSide_property, file: #file, line: #line)
    self.mDrawTextsLayoutTopSideSwitch?.bind_value (self.mDataSelection.drawTextsLayoutTopSide_property, file: #file, line: #line)
    self.mDrawTextsLayoutBottomSideSwitch?.bind_value (self.mDataSelection.drawTextsLayoutBottomSide_property, file: #file, line: #line)
    self.mDrawTextsLegendTopSideSwitch?.bind_value (self.mDataSelection.drawTextsLegendTopSide_property, file: #file, line: #line)
    self.mDrawTextsLegendBottomSideSwitch?.bind_value (self.mDataSelection.drawTextsLegendBottomSide_property, file: #file, line: #line)
    self.mDrawTracksTopSideSwitch?.bind_value (self.mDataSelection.drawTracksTopSide_property, file: #file, line: #line)
    self.mDrawTracksBottomSidSwitche?.bind_value (self.mDataSelection.drawTracksBottomSide_property, file: #file, line: #line)
    self.mDrawViasSwitch?.bind_value (self.mDataSelection.drawVias_property, file: #file, line: #line)
    self.mHorizontalMirrorSwitch?.bind_value (self.mDataSelection.horizontalMirror_property, file: #file, line: #line)
    self.mMeasurementUnitForPadHoleInPDFPopUp?.bind_selectedTag (self.mDataSelection.measurementUnitForPadHoleInPDF_property, file: #file, line: #line)
    self.mDimensionForPadHoleInPDFTextField?.bind_dimensionAndUnit (self.mDataSelection.padHoleDiameterInPDF_property, self.mDataSelection.measurementUnitForPadHoleInPDF_property, file: #file, line: #line)
    self.mGeneratedFileCountTextField?.bind_valueObserver (self.mGeneratedFileCountString_property, file: #file, line: #line)
    self.mCommentTextView?.bind_value (self.rootObject.comments_property, file: #file, line: #line)
    self.mSignatureTextField?.bind_signature (self.signatureObserver_property, file: #file, line: #line)
    self.mOtherSignatureTextField?.bind_signature (self.signatureObserver_property, file: #file, line: #line)
    self.mVersionField?.bind_version (self.versionObserver_property, file: #file, line: #line)
    self.mVersionField?.bind_versionShouldChange (self.versionShouldChangeObserver_property, file: #file, line: #line)
    self.mVersionFieldInToolbar?.bind_version (self.versionObserver_property, file: #file, line: #line)
    self.mVersionFieldInToolbar?.bind_versionShouldChange (self.versionShouldChangeObserver_property, file: #file, line: #line)
    self.mStatusImageViewInToolbar?.bind_image (self.mStatusImage_property, file: #file, line: #line)
    self.mStatusImageViewInToolbar?.bind_tooltip (self.mStatusMessage_property, file: #file, line: #line)
  //--------------------------- Install multiple bindings
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mDataController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mRemoveGenerationFileButton
      )
      self.mDataController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mRemoveGenerationFileButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return !self.mDataSelection.drawPadHolesInPDF_property_selection
        },
        outlet: self.mPadHoleDefinitionView
      )
      self.mDataSelection.drawPadHolesInPDF_property.addEBObserver (controller)
      self.mController_mPadHoleDefinitionView_hidden = controller
    }
  //--------------------------- Set targets / actions
    self.mAddGenerationFileButton?.target = mDataController
    self.mAddGenerationFileButton?.action = #selector (Controller_ArtworkDocument_mDataController.add (_:))
    self.mRemoveGenerationFileButton?.target = mDataController
    self.mRemoveGenerationFileButton?.action = #selector (Controller_ArtworkDocument_mDataController.remove (_:))
    self.resetVersionAndSignatureButton?.target = self
    self.resetVersionAndSignatureButton?.action = #selector (ArtworkDocument.resetVersionAndSignatureAction (_:))
  //--------------------------- Read documentFilePath model 
    self.documentFilePath_property.mReadModelFunction = { [weak self] in
      if let r = self?.computeTransient_documentFilePath () {
        return .single (r)
      }else{
        return .empty
      }
    }

  }

  //····················································································································
  //   removeUserInterface
  //····················································································································

  override func removeUserInterface () {
    super.removeUserInterface ()
  //--------------------------- Unbind regular bindings
    self.mSegmentedControl?.unbind_selectedPage ()
    self.mMinPPTPTTTWinEBUnitPopUp?.unbind_selectedTag ()
    self.mMinPPTPTTTWdisplayUnitTextField?.unbind_dimensionAndUnit ()
    self.mOARUnitPopUp?.unbind_selectedTag ()
    self.mOARValueTextField?.unbind_dimensionAndUnit ()
    self.mPHDUnitPopUp?.unbind_selectedTag ()
    self.mPHDValueTextField?.unbind_dimensionAndUnit ()
    self.minValueForBoardLimitUnitPopUp?.unbind_selectedTag ()
    self.minValueForBoardLimitTextField?.unbind_dimensionAndUnit ()
    self.mDrillDataFileExtensionTextField?.unbind_value ()
    self.mExtensionTextField?.unbind_value ()
    self.mDrawBoardInternalLimitsSwitch?.unbind_value ()
    self.mDrawBoardLimitsSwitch?.unbind_value ()
    self.mDrawComponentValuesTopSideSwitch?.unbind_value ()
    self.mDrawComponentValuesBottomSideSwitch?.unbind_value ()
    self.mDrawComponentNamesTopSideSwitch?.unbind_value ()
    self.mDrawComponentNamesBottomSideSwitch?.unbind_value ()
    self.mDrawPackageLegendTopSideSwitch?.unbind_value ()
    self.mDrawPackageLegendBottomSideSwitch?.unbind_value ()
    self.mDrawPadHolesInPDFSwitch?.unbind_value ()
    self.mDrawPadsTopSideSwitch?.unbind_value ()
    self.mDrawPadsBottomSideSwitch?.unbind_value ()
    self.mDrawTextsLayoutTopSideSwitch?.unbind_value ()
    self.mDrawTextsLayoutBottomSideSwitch?.unbind_value ()
    self.mDrawTextsLegendTopSideSwitch?.unbind_value ()
    self.mDrawTextsLegendBottomSideSwitch?.unbind_value ()
    self.mDrawTracksTopSideSwitch?.unbind_value ()
    self.mDrawTracksBottomSidSwitche?.unbind_value ()
    self.mDrawViasSwitch?.unbind_value ()
    self.mHorizontalMirrorSwitch?.unbind_value ()
    self.mMeasurementUnitForPadHoleInPDFPopUp?.unbind_selectedTag ()
    self.mDimensionForPadHoleInPDFTextField?.unbind_dimensionAndUnit ()
    self.mGeneratedFileCountTextField?.unbind_valueObserver ()
    self.mCommentTextView?.unbind_value ()
    self.mSignatureTextField?.unbind_signature ()
    self.mOtherSignatureTextField?.unbind_signature ()
    self.mVersionField?.unbind_version ()
    self.mVersionField?.unbind_versionShouldChange ()
    self.mVersionFieldInToolbar?.unbind_version ()
    self.mVersionFieldInToolbar?.unbind_versionShouldChange ()
    self.mStatusImageViewInToolbar?.unbind_image ()
    self.mStatusImageViewInToolbar?.unbind_tooltip ()
  //--------------------------- Unbind multiple bindings
    self.mDataController.selectedArray_property.count_property.removeEBObserver (self.mController_mRemoveGenerationFileButton_enabled!)
    self.mController_mRemoveGenerationFileButton_enabled = nil
    self.mDataSelection.drawPadHolesInPDF_property.removeEBObserver (self.mController_mPadHoleDefinitionView_hidden!)
    self.mController_mPadHoleDefinitionView_hidden = nil
  //--------------------------- Unbind array controllers
    self.mDataController.unbind_tableView (self.mDataTableView)
  //--- Array controller property: mDataController
    self.mDataController.unbind_model ()
  //--- Selection controller property: mDataSelection
    self.mDataSelection.unbind_selection ()
    self.mDataController.sortedArray_property.count_property.removeEBObserver (self.mGeneratedFileCountString_property)
    self.rootObject.fileGenerationParameterArray_property.removeEBObserverOf_fileExtension (self.mStatusImage_property)
    self.rootObject.fileGenerationParameterArray_property.removeEBObserverOf_name (self.mStatusImage_property)
    self.rootObject.fileGenerationParameterArray_property.removeEBObserverOf_fileExtension (self.mStatusMessage_property)
    self.rootObject.fileGenerationParameterArray_property.removeEBObserverOf_name (self.mStatusMessage_property)
  //--------------------------- Remove targets / actions
    self.mAddGenerationFileButton?.target = nil
    self.mRemoveGenerationFileButton?.target = nil
    self.resetVersionAndSignatureButton?.target = nil
  //--------------------------- Clean up outlets
    self.mAddGenerationFileButton?.ebCleanUp ()
    self.mCommentTextView?.ebCleanUp ()
    self.mDataPageView?.ebCleanUp ()
    self.mDataTableView?.ebCleanUp ()
    self.mDimensionForPadHoleInPDFTextField?.ebCleanUp ()
    self.mDrawBoardInternalLimitsSwitch?.ebCleanUp ()
    self.mDrawBoardLimitsSwitch?.ebCleanUp ()
    self.mDrawComponentNamesBottomSideSwitch?.ebCleanUp ()
    self.mDrawComponentNamesTopSideSwitch?.ebCleanUp ()
    self.mDrawComponentValuesBottomSideSwitch?.ebCleanUp ()
    self.mDrawComponentValuesTopSideSwitch?.ebCleanUp ()
    self.mDrawPackageLegendBottomSideSwitch?.ebCleanUp ()
    self.mDrawPackageLegendTopSideSwitch?.ebCleanUp ()
    self.mDrawPadHolesInPDFSwitch?.ebCleanUp ()
    self.mDrawPadsBottomSideSwitch?.ebCleanUp ()
    self.mDrawPadsTopSideSwitch?.ebCleanUp ()
    self.mDrawTextsLayoutBottomSideSwitch?.ebCleanUp ()
    self.mDrawTextsLayoutTopSideSwitch?.ebCleanUp ()
    self.mDrawTextsLegendBottomSideSwitch?.ebCleanUp ()
    self.mDrawTextsLegendTopSideSwitch?.ebCleanUp ()
    self.mDrawTracksBottomSidSwitche?.ebCleanUp ()
    self.mDrawTracksTopSideSwitch?.ebCleanUp ()
    self.mDrawViasSwitch?.ebCleanUp ()
    self.mDrillDataFileExtensionTextField?.ebCleanUp ()
    self.mDrillPageView?.ebCleanUp ()
    self.mExtensionTextField?.ebCleanUp ()
    self.mGeneratedFileCountTextField?.ebCleanUp ()
    self.mHorizontalMirrorSwitch?.ebCleanUp ()
    self.mInfosPageView?.ebCleanUp ()
    self.mMasterView?.ebCleanUp ()
    self.mMeasurementUnitForPadHoleInPDFPopUp?.ebCleanUp ()
    self.mMinPPTPTTTWdisplayUnitTextField?.ebCleanUp ()
    self.mMinPPTPTTTWinEBUnitPopUp?.ebCleanUp ()
    self.mMinimaPageView?.ebCleanUp ()
    self.mOARUnitPopUp?.ebCleanUp ()
    self.mOARValueTextField?.ebCleanUp ()
    self.mOtherSignatureTextField?.ebCleanUp ()
    self.mPHDUnitPopUp?.ebCleanUp ()
    self.mPHDValueTextField?.ebCleanUp ()
    self.mPadHoleDefinitionView?.ebCleanUp ()
    self.mRemoveGenerationFileButton?.ebCleanUp ()
    self.mSegmentedControl?.ebCleanUp ()
    self.mSignatureTextField?.ebCleanUp ()
    self.mStatusImageViewInToolbar?.ebCleanUp ()
    self.mVersionField?.ebCleanUp ()
    self.mVersionFieldInToolbar?.ebCleanUp ()
    self.minValueForBoardLimitTextField?.ebCleanUp ()
    self.minValueForBoardLimitUnitPopUp?.ebCleanUp ()
    self.resetVersionAndSignatureButton?.ebCleanUp ()
//    self.mAddGenerationFileButton = nil
//    self.mCommentTextView = nil
//    self.mDataPageView = nil
//    self.mDataTableView = nil
//    self.mDimensionForPadHoleInPDFTextField = nil
//    self.mDrawBoardInternalLimitsSwitch = nil
//    self.mDrawBoardLimitsSwitch = nil
//    self.mDrawComponentNamesBottomSideSwitch = nil
//    self.mDrawComponentNamesTopSideSwitch = nil
//    self.mDrawComponentValuesBottomSideSwitch = nil
//    self.mDrawComponentValuesTopSideSwitch = nil
//    self.mDrawPackageLegendBottomSideSwitch = nil
//    self.mDrawPackageLegendTopSideSwitch = nil
//    self.mDrawPadHolesInPDFSwitch = nil
//    self.mDrawPadsBottomSideSwitch = nil
//    self.mDrawPadsTopSideSwitch = nil
//    self.mDrawTextsLayoutBottomSideSwitch = nil
//    self.mDrawTextsLayoutTopSideSwitch = nil
//    self.mDrawTextsLegendBottomSideSwitch = nil
//    self.mDrawTextsLegendTopSideSwitch = nil
//    self.mDrawTracksBottomSidSwitche = nil
//    self.mDrawTracksTopSideSwitch = nil
//    self.mDrawViasSwitch = nil
//    self.mDrillDataFileExtensionTextField = nil
//    self.mDrillPageView = nil
//    self.mExtensionTextField = nil
//    self.mGeneratedFileCountTextField = nil
//    self.mHorizontalMirrorSwitch = nil
//    self.mInfosPageView = nil
//    self.mMasterView = nil
//    self.mMeasurementUnitForPadHoleInPDFPopUp = nil
//    self.mMinPPTPTTTWdisplayUnitTextField = nil
//    self.mMinPPTPTTTWinEBUnitPopUp = nil
//    self.mMinimaPageView = nil
//    self.mOARUnitPopUp = nil
//    self.mOARValueTextField = nil
//    self.mOtherSignatureTextField = nil
//    self.mPHDUnitPopUp = nil
//    self.mPHDValueTextField = nil
//    self.mPadHoleDefinitionView = nil
//    self.mRemoveGenerationFileButton = nil
//    self.mSegmentedControl = nil
//    self.mSignatureTextField = nil
//    self.mStatusImageViewInToolbar = nil
//    self.mVersionField = nil
//    self.mVersionFieldInToolbar = nil
//    self.minValueForBoardLimitTextField = nil
//    self.minValueForBoardLimitUnitPopUp = nil
//    self.resetVersionAndSignatureButton = nil
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

