//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ArtworkRootEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ArtworkRootEntity : ReadOnlyAbstractArrayProperty <ArtworkRootEntity> {

  //····················································································································
  //   Observers of 'selectedTab' stored property
  //····················································································································

  private var mObserversOf_selectedTab = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedTab (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_selectedTab.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.selectedTab.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedTab (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_selectedTab.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.selectedTab.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedTab_toElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_selectedTab {
        managedObject.selectedTab.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedTab_fromElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for observer in mObserversOf_selectedTab {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedTab.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'comments' stored property
  //····················································································································

  private var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_comments.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.comments.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_comments.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.comments.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_comments_toElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_comments {
        managedObject.comments.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_comments_fromElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for observer in mObserversOf_comments {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.comments.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minPP_TP_TT_TW_displayUnit' stored property
  //····················································································································

  private var mObserversOf_minPP_TP_TT_TW_displayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minPP_TP_TT_TW_displayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_minPP_TP_TT_TW_displayUnit.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.minPP_TP_TT_TW_displayUnit.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minPP_TP_TT_TW_displayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_minPP_TP_TT_TW_displayUnit.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.minPP_TP_TT_TW_displayUnit.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minPP_TP_TT_TW_displayUnit_toElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_minPP_TP_TT_TW_displayUnit {
        managedObject.minPP_TP_TT_TW_displayUnit.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minPP_TP_TT_TW_displayUnit_fromElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for observer in mObserversOf_minPP_TP_TT_TW_displayUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minPP_TP_TT_TW_displayUnit.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minPP_TP_TT_TW_inEBUnit' stored property
  //····················································································································

  private var mObserversOf_minPP_TP_TT_TW_inEBUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minPP_TP_TT_TW_inEBUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_minPP_TP_TT_TW_inEBUnit.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.minPP_TP_TT_TW_inEBUnit.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minPP_TP_TT_TW_inEBUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_minPP_TP_TT_TW_inEBUnit.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.minPP_TP_TT_TW_inEBUnit.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minPP_TP_TT_TW_inEBUnit_toElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_minPP_TP_TT_TW_inEBUnit {
        managedObject.minPP_TP_TT_TW_inEBUnit.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minPP_TP_TT_TW_inEBUnit_fromElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for observer in mObserversOf_minPP_TP_TT_TW_inEBUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minPP_TP_TT_TW_inEBUnit.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForOARdisplayUnit' stored property
  //····················································································································

  private var mObserversOf_minValueForOARdisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForOARdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_minValueForOARdisplayUnit.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.minValueForOARdisplayUnit.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForOARdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_minValueForOARdisplayUnit.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.minValueForOARdisplayUnit.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForOARdisplayUnit_toElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_minValueForOARdisplayUnit {
        managedObject.minValueForOARdisplayUnit.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForOARdisplayUnit_fromElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for observer in mObserversOf_minValueForOARdisplayUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForOARdisplayUnit.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForOARinEBUnit' stored property
  //····················································································································

  private var mObserversOf_minValueForOARinEBUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForOARinEBUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_minValueForOARinEBUnit.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.minValueForOARinEBUnit.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForOARinEBUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_minValueForOARinEBUnit.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.minValueForOARinEBUnit.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForOARinEBUnit_toElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_minValueForOARinEBUnit {
        managedObject.minValueForOARinEBUnit.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForOARinEBUnit_fromElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for observer in mObserversOf_minValueForOARinEBUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForOARinEBUnit.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForPHDdisplayUnit' stored property
  //····················································································································

  private var mObserversOf_minValueForPHDdisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForPHDdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_minValueForPHDdisplayUnit.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.minValueForPHDdisplayUnit.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForPHDdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_minValueForPHDdisplayUnit.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.minValueForPHDdisplayUnit.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForPHDdisplayUnit_toElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_minValueForPHDdisplayUnit {
        managedObject.minValueForPHDdisplayUnit.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForPHDdisplayUnit_fromElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for observer in mObserversOf_minValueForPHDdisplayUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForPHDdisplayUnit.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForPHDinEBUnit' stored property
  //····················································································································

  private var mObserversOf_minValueForPHDinEBUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_minValueForPHDinEBUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_minValueForPHDinEBUnit.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.minValueForPHDinEBUnit.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForPHDinEBUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_minValueForPHDinEBUnit.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.minValueForPHDinEBUnit.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForPHDinEBUnit_toElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_minValueForPHDinEBUnit {
        managedObject.minValueForPHDinEBUnit.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForPHDinEBUnit_fromElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for observer in mObserversOf_minValueForPHDinEBUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForPHDinEBUnit.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drillDataFormat' stored property
  //····················································································································

  private var mObserversOf_drillDataFormat = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drillDataFormat (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drillDataFormat.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.drillDataFormat.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillDataFormat (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drillDataFormat.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.drillDataFormat.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drillDataFormat_toElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_drillDataFormat {
        managedObject.drillDataFormat.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drillDataFormat_fromElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for observer in mObserversOf_drillDataFormat {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drillDataFormat.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drillDataFileExtension' stored property
  //····················································································································

  private var mObserversOf_drillDataFileExtension = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drillDataFileExtension (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drillDataFileExtension.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.drillDataFileExtension.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillDataFileExtension (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drillDataFileExtension.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.drillDataFileExtension.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drillDataFileExtension_toElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_drillDataFileExtension {
        managedObject.drillDataFileExtension.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drillDataFileExtension_fromElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for observer in mObserversOf_drillDataFileExtension {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drillDataFileExtension.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drillListFileExtension' stored property
  //····················································································································

  private var mObserversOf_drillListFileExtension = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drillListFileExtension (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drillListFileExtension.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.drillListFileExtension.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillListFileExtension (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drillListFileExtension.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.drillListFileExtension.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drillListFileExtension_toElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_drillListFileExtension {
        managedObject.drillListFileExtension.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drillListFileExtension_fromElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for observer in mObserversOf_drillListFileExtension {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drillListFileExtension.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drillToolListFileExtension' stored property
  //····················································································································

  private var mObserversOf_drillToolListFileExtension = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drillToolListFileExtension (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drillToolListFileExtension.insert (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.drillToolListFileExtension.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillToolListFileExtension (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drillToolListFileExtension.remove (inObserver)
    switch prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let v) :
      for managedObject in v {
        managedObject.drillToolListFileExtension.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drillToolListFileExtension_toElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for managedObject in inSet {
      for observer in mObserversOf_drillToolListFileExtension {
        managedObject.drillToolListFileExtension.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drillToolListFileExtension_fromElementsOfSet (_ inSet : Set<ArtworkRootEntity>) {
    for observer in mObserversOf_drillToolListFileExtension {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drillToolListFileExtension.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_ArtworkRootEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_ArtworkRootEntity : ReadOnlyArrayOf_ArtworkRootEntity {

  var readModelFunction : Optional<() -> EBProperty < [ArtworkRootEntity] > >

  private var prop_cache : EBProperty < [ArtworkRootEntity] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <ArtworkRootEntity> ()

  override var prop : EBProperty < [ArtworkRootEntity] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <ArtworkRootEntity>
        switch prop_cache! {
        case .multipleSelection, .noSelection :
          newSet = Set <ArtworkRootEntity> ()
        case .singleSelection (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_selectedTab_fromElementsOfSet (removedSet)
        removeEBObserversOf_comments_fromElementsOfSet (removedSet)
        removeEBObserversOf_minPP_TP_TT_TW_displayUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_minPP_TP_TT_TW_inEBUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_minValueForOARdisplayUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_minValueForOARinEBUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_minValueForPHDdisplayUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_minValueForPHDinEBUnit_fromElementsOfSet (removedSet)
        removeEBObserversOf_drillDataFormat_fromElementsOfSet (removedSet)
        removeEBObserversOf_drillDataFileExtension_fromElementsOfSet (removedSet)
        removeEBObserversOf_drillListFileExtension_fromElementsOfSet (removedSet)
        removeEBObserversOf_drillToolListFileExtension_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_selectedTab_toElementsOfSet (addedSet)
        addEBObserversOf_comments_toElementsOfSet (addedSet)
        addEBObserversOf_minPP_TP_TT_TW_displayUnit_toElementsOfSet (addedSet)
        addEBObserversOf_minPP_TP_TT_TW_inEBUnit_toElementsOfSet (addedSet)
        addEBObserversOf_minValueForOARdisplayUnit_toElementsOfSet (addedSet)
        addEBObserversOf_minValueForOARinEBUnit_toElementsOfSet (addedSet)
        addEBObserversOf_minValueForPHDdisplayUnit_toElementsOfSet (addedSet)
        addEBObserversOf_minValueForPHDinEBUnit_toElementsOfSet (addedSet)
        addEBObserversOf_drillDataFormat_toElementsOfSet (addedSet)
        addEBObserversOf_drillDataFileExtension_toElementsOfSet (addedSet)
        addEBObserversOf_drillListFileExtension_toElementsOfSet (addedSet)
        addEBObserversOf_drillToolListFileExtension_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .noSelection
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRootEntity_selectedTab : class {
  var selectedTab : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRootEntity_comments : class {
  var comments : EBStoredProperty_String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRootEntity_minPP_TP_TT_TW_displayUnit : class {
  var minPP_TP_TT_TW_displayUnit : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRootEntity_minPP_TP_TT_TW_inEBUnit : class {
  var minPP_TP_TT_TW_inEBUnit : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRootEntity_minValueForOARdisplayUnit : class {
  var minValueForOARdisplayUnit : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRootEntity_minValueForOARinEBUnit : class {
  var minValueForOARinEBUnit : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRootEntity_minValueForPHDdisplayUnit : class {
  var minValueForPHDdisplayUnit : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRootEntity_minValueForPHDinEBUnit : class {
  var minValueForPHDinEBUnit : EBStoredProperty_Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRootEntity_drillDataFormat : class {
  var drillDataFormat : EBStoredProperty_DrillDataFormatEnum { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRootEntity_drillDataFileExtension : class {
  var drillDataFileExtension : EBStoredProperty_String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRootEntity_drillListFileExtension : class {
  var drillListFileExtension : EBStoredProperty_String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkRootEntity_drillToolListFileExtension : class {
  var drillToolListFileExtension : EBStoredProperty_String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: fileGenerationParameterArray
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_ArtworkRootEntity_fileGenerationParameterArray : ReadOnlyArrayOf_ArtworkFileGenerationParameters {

  //····················································································································
 
  func setProp (_ value :  [ArtworkFileGenerationParameters]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship proxy: fileGenerationParameterArray
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

/* final class ToManyRelationshipProxy_ArtworkRootEntity_fileGenerationParameterArray : ToManyRelationshipReadWrite_ArtworkRootEntity_fileGenerationParameterArray {
  private var mModel : ToManyRelationshipReadWrite_ArtworkRootEntity_fileGenerationParameterArray?

  //····················································································································
  
  final func setModel (model : ToManyRelationshipReadWrite_ArtworkRootEntity_fileGenerationParameterArray?) {
    mModel = model
  }

  //····················································································································
  
  override var prop : EBProperty < [ArtworkFileGenerationParameters] > {
    get {
      return mModel?.prop ?? .noSelection
    }
  }
 
   //····················································································································
 
  override func setProp (_ value : [ArtworkFileGenerationParameters]) {
    switch self.prop {
    case .noSelection, .multipleSelection :
      break
    case .singleSelection (let array) :
      mModel?.setProp (array)
    }
  }
 
  //····················································································································

}
*/

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: fileGenerationParameterArray
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_ArtworkRootEntity_fileGenerationParameterArray :
ToManyRelationshipReadWrite_ArtworkRootEntity_fileGenerationParameterArray, EBSignatureObserverProtocol {
  weak var owner : ArtworkRootEntity?

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .noSelection, .multipleSelection :
          break ;
        case .singleSelection (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    count.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .noSelection :
          return .noSelection
        case .multipleSelection :
          return .multipleSelection
        case .singleSelection (let v) :
          return .singleSelection (v.count)
        }
      }else{
        return .noSelection
      }
    }
  }

  //····················································································································

  private var mSet = Set<ArtworkFileGenerationParameters> ()
  private var mValue = [ArtworkFileGenerationParameters] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        owner?.undoManager()?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          managedObject.myArtwork.owner = nil ;
        }
        removeEBObserversOf_drawBoardLimits_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawComponentNamesBottomSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawComponentNamesTopSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawComponentValuesBottomSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawComponentValuesTopSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawPackageLegendBottomSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawPackageLegendTopSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawPadHolesInPDF_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawPadsBottomSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawPadsTopSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawTextsLayoutBottomSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawTextsLayoutTopSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawTextsLegendBottomSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawTextsLegendTopSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawTracksBottomSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawTracksTopSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawVias_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_fileExtension_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_horizontalMirror_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_measurementUnitForPadHoleInPDF_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_name_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_padHoleDiameterInPDF_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : ArtworkFileGenerationParameters in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          managedObject.myArtwork.setProp (owner)
        }
        addEBObserversOf_drawBoardLimits_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawComponentNamesBottomSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawComponentNamesTopSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawComponentValuesBottomSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawComponentValuesTopSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawPackageLegendBottomSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawPackageLegendTopSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawPadHolesInPDF_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawPadsBottomSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawPadsTopSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawTextsLayoutBottomSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawTextsLayoutTopSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawTextsLegendBottomSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawTextsLegendTopSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawTracksBottomSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawTracksTopSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawVias_toElementsOfSet (addedObjectSet)
        addEBObserversOf_fileExtension_toElementsOfSet (addedObjectSet)
        addEBObserversOf_horizontalMirror_toElementsOfSet (addedObjectSet)
        addEBObserversOf_measurementUnitForPadHoleInPDF_toElementsOfSet (addedObjectSet)
        addEBObserversOf_name_toElementsOfSet (addedObjectSet)
        addEBObserversOf_padHoleDiameterInPDF_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBProperty < [ArtworkFileGenerationParameters] > {
    get {
      return .singleSelection (mValue)
    }
  }

  override func setProp (_ value :  [ArtworkFileGenerationParameters]) { mValue = value }

  var propval : [ArtworkFileGenerationParameters] { get { return mValue } }

  //····················································································································

  func performUndo (_ oldValue : [ArtworkFileGenerationParameters]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : ArtworkFileGenerationParameters) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : ArtworkFileGenerationParameters) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ArtworkRootEntity
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ArtworkRootEntity : EBManagedObject, ArtworkRootEntity_selectedTab, ArtworkRootEntity_comments, ArtworkRootEntity_minPP_TP_TT_TW_displayUnit, ArtworkRootEntity_minPP_TP_TT_TW_inEBUnit, ArtworkRootEntity_minValueForOARdisplayUnit, ArtworkRootEntity_minValueForOARinEBUnit, ArtworkRootEntity_minValueForPHDdisplayUnit, ArtworkRootEntity_minValueForPHDinEBUnit, ArtworkRootEntity_drillDataFormat, ArtworkRootEntity_drillDataFileExtension, ArtworkRootEntity_drillListFileExtension, ArtworkRootEntity_drillToolListFileExtension
{

  //····················································································································
  //    Properties
  //····················································································································

  var selectedTab = EBStoredProperty_Int (0)

  var comments = EBStoredProperty_String ("")

  var minPP_TP_TT_TW_displayUnit = EBStoredProperty_Int (90)

  var minPP_TP_TT_TW_inEBUnit = EBStoredProperty_Int (18000)

  var minValueForOARdisplayUnit = EBStoredProperty_Int (90)

  var minValueForOARinEBUnit = EBStoredProperty_Int (18000)

  var minValueForPHDdisplayUnit = EBStoredProperty_Int (90)

  var minValueForPHDinEBUnit = EBStoredProperty_Int (18000)

  var drillDataFormat = EBStoredProperty_DrillDataFormatEnum (DrillDataFormatEnum.excellon)

  var drillDataFileExtension = EBStoredProperty_String ("drf")

  var drillListFileExtension = EBStoredProperty_String ("drd")

  var drillToolListFileExtension = EBStoredProperty_String ("drl")

  //····················································································································
  //    Transient properties
  //····················································································································


  //····················································································································
  //    Relationships
  //····················································································································

  var fileGenerationParameterArray = ToManyRelationship_ArtworkRootEntity_fileGenerationParameterArray ()

  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
  //--- Install property observers for transients
  //--- Install undoers for properties
    self.selectedTab.undoManager = undoManager ()
    self.comments.undoManager = undoManager ()
    self.minPP_TP_TT_TW_displayUnit.undoManager = undoManager ()
    self.minPP_TP_TT_TW_inEBUnit.undoManager = undoManager ()
    self.minValueForOARdisplayUnit.undoManager = undoManager ()
    self.minValueForOARinEBUnit.undoManager = undoManager ()
    self.minValueForPHDdisplayUnit.undoManager = undoManager ()
    self.minValueForPHDinEBUnit.undoManager = undoManager ()
    self.drillDataFormat.undoManager = undoManager ()
    self.drillDataFileExtension.undoManager = undoManager ()
    self.drillListFileExtension.undoManager = undoManager ()
    self.drillToolListFileExtension.undoManager = undoManager ()
  //--- Install owner for relationships
    fileGenerationParameterArray.owner = self
  //--- register properties for handling signature
    comments.setSignatureObserver (observer: self)
    drillDataFileExtension.setSignatureObserver (observer: self)
    drillDataFormat.setSignatureObserver (observer: self)
    drillListFileExtension.setSignatureObserver (observer: self)
    drillToolListFileExtension.setSignatureObserver (observer: self)
    fileGenerationParameterArray.setSignatureObserver (observer: self)
    minPP_TP_TT_TW_inEBUnit.setSignatureObserver (observer: self)
    minValueForOARinEBUnit.setSignatureObserver (observer: self)
    minValueForPHDinEBUnit.setSignatureObserver (observer: self)
  }

  //····················································································································

  deinit {
  //--- Remove observers
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "selectedTab",
      idx:self.selectedTab.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedTab.mObserverExplorer,
      valueExplorer:&self.selectedTab.mValueExplorer
    )
    createEntryForPropertyNamed (
      "comments",
      idx:self.comments.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.comments.mObserverExplorer,
      valueExplorer:&self.comments.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minPP_TP_TT_TW_displayUnit",
      idx:self.minPP_TP_TT_TW_displayUnit.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minPP_TP_TT_TW_displayUnit.mObserverExplorer,
      valueExplorer:&self.minPP_TP_TT_TW_displayUnit.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minPP_TP_TT_TW_inEBUnit",
      idx:self.minPP_TP_TT_TW_inEBUnit.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minPP_TP_TT_TW_inEBUnit.mObserverExplorer,
      valueExplorer:&self.minPP_TP_TT_TW_inEBUnit.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minValueForOARdisplayUnit",
      idx:self.minValueForOARdisplayUnit.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minValueForOARdisplayUnit.mObserverExplorer,
      valueExplorer:&self.minValueForOARdisplayUnit.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minValueForOARinEBUnit",
      idx:self.minValueForOARinEBUnit.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minValueForOARinEBUnit.mObserverExplorer,
      valueExplorer:&self.minValueForOARinEBUnit.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minValueForPHDdisplayUnit",
      idx:self.minValueForPHDdisplayUnit.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minValueForPHDdisplayUnit.mObserverExplorer,
      valueExplorer:&self.minValueForPHDdisplayUnit.mValueExplorer
    )
    createEntryForPropertyNamed (
      "minValueForPHDinEBUnit",
      idx:self.minValueForPHDinEBUnit.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.minValueForPHDinEBUnit.mObserverExplorer,
      valueExplorer:&self.minValueForPHDinEBUnit.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drillDataFormat",
      idx:self.drillDataFormat.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drillDataFormat.mObserverExplorer,
      valueExplorer:&self.drillDataFormat.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drillDataFileExtension",
      idx:self.drillDataFileExtension.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drillDataFileExtension.mObserverExplorer,
      valueExplorer:&self.drillDataFileExtension.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drillListFileExtension",
      idx:self.drillListFileExtension.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drillListFileExtension.mObserverExplorer,
      valueExplorer:&self.drillListFileExtension.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drillToolListFileExtension",
      idx:self.drillToolListFileExtension.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drillToolListFileExtension.mObserverExplorer,
      valueExplorer:&self.drillToolListFileExtension.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "fileGenerationParameterArray",
      idx:fileGenerationParameterArray.mEasyBindingsObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&fileGenerationParameterArray.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.selectedTab.mObserverExplorer = nil
    self.selectedTab.mValueExplorer = nil
    self.comments.mObserverExplorer = nil
    self.comments.mValueExplorer = nil
    self.minPP_TP_TT_TW_displayUnit.mObserverExplorer = nil
    self.minPP_TP_TT_TW_displayUnit.mValueExplorer = nil
    self.minPP_TP_TT_TW_inEBUnit.mObserverExplorer = nil
    self.minPP_TP_TT_TW_inEBUnit.mValueExplorer = nil
    self.minValueForOARdisplayUnit.mObserverExplorer = nil
    self.minValueForOARdisplayUnit.mValueExplorer = nil
    self.minValueForOARinEBUnit.mObserverExplorer = nil
    self.minValueForOARinEBUnit.mValueExplorer = nil
    self.minValueForPHDdisplayUnit.mObserverExplorer = nil
    self.minValueForPHDdisplayUnit.mValueExplorer = nil
    self.minValueForPHDinEBUnit.mObserverExplorer = nil
    self.minValueForPHDinEBUnit.mValueExplorer = nil
    self.drillDataFormat.mObserverExplorer = nil
    self.drillDataFormat.mValueExplorer = nil
    self.drillDataFileExtension.mObserverExplorer = nil
    self.drillDataFileExtension.mValueExplorer = nil
    self.drillListFileExtension.mObserverExplorer = nil
    self.drillListFileExtension.mValueExplorer = nil
    self.drillToolListFileExtension.mObserverExplorer = nil
    self.drillToolListFileExtension.mValueExplorer = nil
    // fileGenerationParameterArray.mObserverExplorer = nil
    fileGenerationParameterArray.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.selectedTab.storeIn (dictionary: ioDictionary, forKey: "selectedTab")
    self.comments.storeIn (dictionary: ioDictionary, forKey: "comments")
    self.minPP_TP_TT_TW_displayUnit.storeIn (dictionary: ioDictionary, forKey: "minPP_TP_TT_TW_displayUnit")
    self.minPP_TP_TT_TW_inEBUnit.storeIn (dictionary: ioDictionary, forKey: "minPP_TP_TT_TW_inEBUnit")
    self.minValueForOARdisplayUnit.storeIn (dictionary: ioDictionary, forKey: "minValueForOARdisplayUnit")
    self.minValueForOARinEBUnit.storeIn (dictionary: ioDictionary, forKey: "minValueForOARinEBUnit")
    self.minValueForPHDdisplayUnit.storeIn (dictionary: ioDictionary, forKey: "minValueForPHDdisplayUnit")
    self.minValueForPHDinEBUnit.storeIn (dictionary: ioDictionary, forKey: "minValueForPHDinEBUnit")
    self.drillDataFormat.storeIn (dictionary: ioDictionary, forKey: "drillDataFormat")
    self.drillDataFileExtension.storeIn (dictionary: ioDictionary, forKey: "drillDataFileExtension")
    self.drillListFileExtension.storeIn (dictionary: ioDictionary, forKey: "drillListFileExtension")
    self.drillToolListFileExtension.storeIn (dictionary: ioDictionary, forKey: "drillToolListFileExtension")
    store (managedObjectArray: fileGenerationParameterArray.propval as NSArray, relationshipName:"fileGenerationParameterArray", intoDictionary: ioDictionary) ;
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.selectedTab.readFrom (dictionary: inDictionary, forKey:"selectedTab")
    self.comments.readFrom (dictionary: inDictionary, forKey:"comments")
    self.minPP_TP_TT_TW_displayUnit.readFrom (dictionary: inDictionary, forKey:"minPP_TP_TT_TW_displayUnit")
    self.minPP_TP_TT_TW_inEBUnit.readFrom (dictionary: inDictionary, forKey:"minPP_TP_TT_TW_inEBUnit")
    self.minValueForOARdisplayUnit.readFrom (dictionary: inDictionary, forKey:"minValueForOARdisplayUnit")
    self.minValueForOARinEBUnit.readFrom (dictionary: inDictionary, forKey:"minValueForOARinEBUnit")
    self.minValueForPHDdisplayUnit.readFrom (dictionary: inDictionary, forKey:"minValueForPHDdisplayUnit")
    self.minValueForPHDinEBUnit.readFrom (dictionary: inDictionary, forKey:"minValueForPHDinEBUnit")
    self.drillDataFormat.readFrom (dictionary: inDictionary, forKey:"drillDataFormat")
    self.drillDataFileExtension.readFrom (dictionary: inDictionary, forKey:"drillDataFileExtension")
    self.drillListFileExtension.readFrom (dictionary: inDictionary, forKey:"drillListFileExtension")
    self.drillToolListFileExtension.readFrom (dictionary: inDictionary, forKey:"drillToolListFileExtension")
    fileGenerationParameterArray.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "fileGenerationParameterArray",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [ArtworkFileGenerationParameters])
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving () {
    super.cascadeObjectRemoving ()
    self.fileGenerationParameterArray.setProp (Array ()) // Set relationships to nil
  }

  //····················································································································
  //   resetToManyRelationships
  //····················································································································

  override func resetToManyRelationships () {
    super.resetToManyRelationships ()
    fileGenerationParameterArray.setProp (Array ())
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
    for managedObject : EBManagedObject in fileGenerationParameterArray.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (comments.signature ())
    crc.accumulateUInt32 (drillDataFileExtension.signature ())
    crc.accumulateUInt32 (drillDataFormat.signature ())
    crc.accumulateUInt32 (drillListFileExtension.signature ())
    crc.accumulateUInt32 (drillToolListFileExtension.signature ())
    crc.accumulateUInt32 (fileGenerationParameterArray.signature ())
    crc.accumulateUInt32 (minPP_TP_TT_TW_inEBUnit.signature ())
    crc.accumulateUInt32 (minValueForOARinEBUnit.signature ())
    crc.accumulateUInt32 (minValueForPHDinEBUnit.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

