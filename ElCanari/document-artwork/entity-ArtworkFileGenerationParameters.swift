//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawBoardLimits : class {
  var drawBoardLimits : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawInternalBoardLimits : class {
  var drawInternalBoardLimits : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawComponentNamesTopSide : class {
  var drawComponentNamesTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawComponentNamesBottomSide : class {
  var drawComponentNamesBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawComponentValuesTopSide : class {
  var drawComponentValuesTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawComponentValuesBottomSide : class {
  var drawComponentValuesBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPackageLegendTopSide : class {
  var drawPackageLegendTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPackageLegendBottomSide : class {
  var drawPackageLegendBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPadHolesInPDF : class {
  var drawPadHolesInPDF : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPadsTopSide : class {
  var drawPadsTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPadsBottomSide : class {
  var drawPadsBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTextsLayoutTopSide : class {
  var drawTextsLayoutTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTextsLayoutBottomSide : class {
  var drawTextsLayoutBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTextsLegendTopSide : class {
  var drawTextsLegendTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTextsLegendBottomSide : class {
  var drawTextsLegendBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTracksTopSide : class {
  var drawTracksTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTracksBottomSide : class {
  var drawTracksBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawVias : class {
  var drawVias : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_fileExtension : class {
  var fileExtension : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_horizontalMirror : class {
  var horizontalMirror : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_name : class {
  var name : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_measurementUnitForPadHoleInPDF : class {
  var measurementUnitForPadHoleInPDF : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_padHoleDiameterInPDF : class {
  var padHoleDiameterInPDF : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ArtworkFileGenerationParameters : EBManagedObject,
         ArtworkFileGenerationParameters_drawBoardLimits,
         ArtworkFileGenerationParameters_drawInternalBoardLimits,
         ArtworkFileGenerationParameters_drawComponentNamesTopSide,
         ArtworkFileGenerationParameters_drawComponentNamesBottomSide,
         ArtworkFileGenerationParameters_drawComponentValuesTopSide,
         ArtworkFileGenerationParameters_drawComponentValuesBottomSide,
         ArtworkFileGenerationParameters_drawPackageLegendTopSide,
         ArtworkFileGenerationParameters_drawPackageLegendBottomSide,
         ArtworkFileGenerationParameters_drawPadHolesInPDF,
         ArtworkFileGenerationParameters_drawPadsTopSide,
         ArtworkFileGenerationParameters_drawPadsBottomSide,
         ArtworkFileGenerationParameters_drawTextsLayoutTopSide,
         ArtworkFileGenerationParameters_drawTextsLayoutBottomSide,
         ArtworkFileGenerationParameters_drawTextsLegendTopSide,
         ArtworkFileGenerationParameters_drawTextsLegendBottomSide,
         ArtworkFileGenerationParameters_drawTracksTopSide,
         ArtworkFileGenerationParameters_drawTracksBottomSide,
         ArtworkFileGenerationParameters_drawVias,
         ArtworkFileGenerationParameters_fileExtension,
         ArtworkFileGenerationParameters_horizontalMirror,
         ArtworkFileGenerationParameters_name,
         ArtworkFileGenerationParameters_measurementUnitForPadHoleInPDF,
         ArtworkFileGenerationParameters_padHoleDiameterInPDF {

  //····················································································································
  //   Atomic property: drawBoardLimits
  //····················································································································

  let drawBoardLimits_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawBoardLimits : Bool {
    get { return self.drawBoardLimits_property.propval }
    set { self.drawBoardLimits_property.setProp (newValue) }
  }

  //····················································································································

  var drawBoardLimits_property_selection : EBSelection <Bool> { return self.drawBoardLimits_property.prop }

  //····················································································································
  //   Atomic property: drawInternalBoardLimits
  //····················································································································

  let drawInternalBoardLimits_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawInternalBoardLimits : Bool {
    get { return self.drawInternalBoardLimits_property.propval }
    set { self.drawInternalBoardLimits_property.setProp (newValue) }
  }

  //····················································································································

  var drawInternalBoardLimits_property_selection : EBSelection <Bool> { return self.drawInternalBoardLimits_property.prop }

  //····················································································································
  //   Atomic property: drawComponentNamesTopSide
  //····················································································································

  let drawComponentNamesTopSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawComponentNamesTopSide : Bool {
    get { return self.drawComponentNamesTopSide_property.propval }
    set { self.drawComponentNamesTopSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawComponentNamesTopSide_property_selection : EBSelection <Bool> { return self.drawComponentNamesTopSide_property.prop }

  //····················································································································
  //   Atomic property: drawComponentNamesBottomSide
  //····················································································································

  let drawComponentNamesBottomSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawComponentNamesBottomSide : Bool {
    get { return self.drawComponentNamesBottomSide_property.propval }
    set { self.drawComponentNamesBottomSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawComponentNamesBottomSide_property_selection : EBSelection <Bool> { return self.drawComponentNamesBottomSide_property.prop }

  //····················································································································
  //   Atomic property: drawComponentValuesTopSide
  //····················································································································

  let drawComponentValuesTopSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawComponentValuesTopSide : Bool {
    get { return self.drawComponentValuesTopSide_property.propval }
    set { self.drawComponentValuesTopSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawComponentValuesTopSide_property_selection : EBSelection <Bool> { return self.drawComponentValuesTopSide_property.prop }

  //····················································································································
  //   Atomic property: drawComponentValuesBottomSide
  //····················································································································

  let drawComponentValuesBottomSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawComponentValuesBottomSide : Bool {
    get { return self.drawComponentValuesBottomSide_property.propval }
    set { self.drawComponentValuesBottomSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawComponentValuesBottomSide_property_selection : EBSelection <Bool> { return self.drawComponentValuesBottomSide_property.prop }

  //····················································································································
  //   Atomic property: drawPackageLegendTopSide
  //····················································································································

  let drawPackageLegendTopSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawPackageLegendTopSide : Bool {
    get { return self.drawPackageLegendTopSide_property.propval }
    set { self.drawPackageLegendTopSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawPackageLegendTopSide_property_selection : EBSelection <Bool> { return self.drawPackageLegendTopSide_property.prop }

  //····················································································································
  //   Atomic property: drawPackageLegendBottomSide
  //····················································································································

  let drawPackageLegendBottomSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawPackageLegendBottomSide : Bool {
    get { return self.drawPackageLegendBottomSide_property.propval }
    set { self.drawPackageLegendBottomSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawPackageLegendBottomSide_property_selection : EBSelection <Bool> { return self.drawPackageLegendBottomSide_property.prop }

  //····················································································································
  //   Atomic property: drawPadHolesInPDF
  //····················································································································

  let drawPadHolesInPDF_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawPadHolesInPDF : Bool {
    get { return self.drawPadHolesInPDF_property.propval }
    set { self.drawPadHolesInPDF_property.setProp (newValue) }
  }

  //····················································································································

  var drawPadHolesInPDF_property_selection : EBSelection <Bool> { return self.drawPadHolesInPDF_property.prop }

  //····················································································································
  //   Atomic property: drawPadsTopSide
  //····················································································································

  let drawPadsTopSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawPadsTopSide : Bool {
    get { return self.drawPadsTopSide_property.propval }
    set { self.drawPadsTopSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawPadsTopSide_property_selection : EBSelection <Bool> { return self.drawPadsTopSide_property.prop }

  //····················································································································
  //   Atomic property: drawPadsBottomSide
  //····················································································································

  let drawPadsBottomSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawPadsBottomSide : Bool {
    get { return self.drawPadsBottomSide_property.propval }
    set { self.drawPadsBottomSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawPadsBottomSide_property_selection : EBSelection <Bool> { return self.drawPadsBottomSide_property.prop }

  //····················································································································
  //   Atomic property: drawTextsLayoutTopSide
  //····················································································································

  let drawTextsLayoutTopSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawTextsLayoutTopSide : Bool {
    get { return self.drawTextsLayoutTopSide_property.propval }
    set { self.drawTextsLayoutTopSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawTextsLayoutTopSide_property_selection : EBSelection <Bool> { return self.drawTextsLayoutTopSide_property.prop }

  //····················································································································
  //   Atomic property: drawTextsLayoutBottomSide
  //····················································································································

  let drawTextsLayoutBottomSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawTextsLayoutBottomSide : Bool {
    get { return self.drawTextsLayoutBottomSide_property.propval }
    set { self.drawTextsLayoutBottomSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawTextsLayoutBottomSide_property_selection : EBSelection <Bool> { return self.drawTextsLayoutBottomSide_property.prop }

  //····················································································································
  //   Atomic property: drawTextsLegendTopSide
  //····················································································································

  let drawTextsLegendTopSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawTextsLegendTopSide : Bool {
    get { return self.drawTextsLegendTopSide_property.propval }
    set { self.drawTextsLegendTopSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawTextsLegendTopSide_property_selection : EBSelection <Bool> { return self.drawTextsLegendTopSide_property.prop }

  //····················································································································
  //   Atomic property: drawTextsLegendBottomSide
  //····················································································································

  let drawTextsLegendBottomSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawTextsLegendBottomSide : Bool {
    get { return self.drawTextsLegendBottomSide_property.propval }
    set { self.drawTextsLegendBottomSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawTextsLegendBottomSide_property_selection : EBSelection <Bool> { return self.drawTextsLegendBottomSide_property.prop }

  //····················································································································
  //   Atomic property: drawTracksTopSide
  //····················································································································

  let drawTracksTopSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawTracksTopSide : Bool {
    get { return self.drawTracksTopSide_property.propval }
    set { self.drawTracksTopSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawTracksTopSide_property_selection : EBSelection <Bool> { return self.drawTracksTopSide_property.prop }

  //····················································································································
  //   Atomic property: drawTracksBottomSide
  //····················································································································

  let drawTracksBottomSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawTracksBottomSide : Bool {
    get { return self.drawTracksBottomSide_property.propval }
    set { self.drawTracksBottomSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawTracksBottomSide_property_selection : EBSelection <Bool> { return self.drawTracksBottomSide_property.prop }

  //····················································································································
  //   Atomic property: drawVias
  //····················································································································

  let drawVias_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawVias : Bool {
    get { return self.drawVias_property.propval }
    set { self.drawVias_property.setProp (newValue) }
  }

  //····················································································································

  var drawVias_property_selection : EBSelection <Bool> { return self.drawVias_property.prop }

  //····················································································································
  //   Atomic property: fileExtension
  //····················································································································

  let fileExtension_property = EBStoredProperty_String (defaultValue: "?")

  //····················································································································

  var fileExtension : String {
    get { return self.fileExtension_property.propval }
    set { self.fileExtension_property.setProp (newValue) }
  }

  //····················································································································

  var fileExtension_property_selection : EBSelection <String> { return self.fileExtension_property.prop }

  //····················································································································
  //   Atomic property: horizontalMirror
  //····················································································································

  let horizontalMirror_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var horizontalMirror : Bool {
    get { return self.horizontalMirror_property.propval }
    set { self.horizontalMirror_property.setProp (newValue) }
  }

  //····················································································································

  var horizontalMirror_property_selection : EBSelection <Bool> { return self.horizontalMirror_property.prop }

  //····················································································································
  //   Atomic property: name
  //····················································································································

  let name_property = EBStoredProperty_String (defaultValue: "Unnamed")

  //····················································································································

  var name : String {
    get { return self.name_property.propval }
    set { self.name_property.setProp (newValue) }
  }

  //····················································································································

  var name_property_selection : EBSelection <String> { return self.name_property.prop }

  //····················································································································
  //   Atomic property: measurementUnitForPadHoleInPDF
  //····················································································································

  let measurementUnitForPadHoleInPDF_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var measurementUnitForPadHoleInPDF : Int {
    get { return self.measurementUnitForPadHoleInPDF_property.propval }
    set { self.measurementUnitForPadHoleInPDF_property.setProp (newValue) }
  }

  //····················································································································

  var measurementUnitForPadHoleInPDF_property_selection : EBSelection <Int> { return self.measurementUnitForPadHoleInPDF_property.prop }

  //····················································································································
  //   Atomic property: padHoleDiameterInPDF
  //····················································································································

  let padHoleDiameterInPDF_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var padHoleDiameterInPDF : Int {
    get { return self.padHoleDiameterInPDF_property.propval }
    set { self.padHoleDiameterInPDF_property.setProp (newValue) }
  }

  //····················································································································

  var padHoleDiameterInPDF_property_selection : EBSelection <Int> { return self.padHoleDiameterInPDF_property.prop }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: drawBoardLimits
    self.drawBoardLimits_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawInternalBoardLimits
    self.drawInternalBoardLimits_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawComponentNamesTopSide
    self.drawComponentNamesTopSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawComponentNamesBottomSide
    self.drawComponentNamesBottomSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawComponentValuesTopSide
    self.drawComponentValuesTopSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawComponentValuesBottomSide
    self.drawComponentValuesBottomSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawPackageLegendTopSide
    self.drawPackageLegendTopSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawPackageLegendBottomSide
    self.drawPackageLegendBottomSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawPadHolesInPDF
    self.drawPadHolesInPDF_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawPadsTopSide
    self.drawPadsTopSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawPadsBottomSide
    self.drawPadsBottomSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawTextsLayoutTopSide
    self.drawTextsLayoutTopSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawTextsLayoutBottomSide
    self.drawTextsLayoutBottomSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawTextsLegendTopSide
    self.drawTextsLegendTopSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawTextsLegendBottomSide
    self.drawTextsLegendBottomSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawTracksTopSide
    self.drawTracksTopSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawTracksBottomSide
    self.drawTracksBottomSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawVias
    self.drawVias_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: fileExtension
    self.fileExtension_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: horizontalMirror
    self.horizontalMirror_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: name
    self.name_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: measurementUnitForPadHoleInPDF
    self.measurementUnitForPadHoleInPDF_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: padHoleDiameterInPDF
    self.padHoleDiameterInPDF_property.ebUndoManager = self.ebUndoManager
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.drawBoardLimits_property.setSignatureObserver (observer: self)
    self.drawComponentNamesBottomSide_property.setSignatureObserver (observer: self)
    self.drawComponentNamesTopSide_property.setSignatureObserver (observer: self)
    self.drawComponentValuesBottomSide_property.setSignatureObserver (observer: self)
    self.drawComponentValuesTopSide_property.setSignatureObserver (observer: self)
    self.drawInternalBoardLimits_property.setSignatureObserver (observer: self)
    self.drawPackageLegendBottomSide_property.setSignatureObserver (observer: self)
    self.drawPackageLegendTopSide_property.setSignatureObserver (observer: self)
    self.drawPadHolesInPDF_property.setSignatureObserver (observer: self)
    self.drawPadsBottomSide_property.setSignatureObserver (observer: self)
    self.drawPadsTopSide_property.setSignatureObserver (observer: self)
    self.drawTextsLayoutBottomSide_property.setSignatureObserver (observer: self)
    self.drawTextsLayoutTopSide_property.setSignatureObserver (observer: self)
    self.drawTextsLegendBottomSide_property.setSignatureObserver (observer: self)
    self.drawTextsLegendTopSide_property.setSignatureObserver (observer: self)
    self.drawTracksBottomSide_property.setSignatureObserver (observer: self)
    self.drawTracksTopSide_property.setSignatureObserver (observer: self)
    self.drawVias_property.setSignatureObserver (observer: self)
    self.fileExtension_property.setSignatureObserver (observer: self)
    self.horizontalMirror_property.setSignatureObserver (observer: self)
    self.measurementUnitForPadHoleInPDF_property.setSignatureObserver (observer: self)
    self.name_property.setSignatureObserver (observer: self)
    self.padHoleDiameterInPDF_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- Unregister properties for handling signature
    self.drawBoardLimits_property.setSignatureObserver (observer: nil)
    self.drawComponentNamesBottomSide_property.setSignatureObserver (observer: nil)
    self.drawComponentNamesTopSide_property.setSignatureObserver (observer: nil)
    self.drawComponentValuesBottomSide_property.setSignatureObserver (observer: nil)
    self.drawComponentValuesTopSide_property.setSignatureObserver (observer: nil)
    self.drawInternalBoardLimits_property.setSignatureObserver (observer: nil)
    self.drawPackageLegendBottomSide_property.setSignatureObserver (observer: nil)
    self.drawPackageLegendTopSide_property.setSignatureObserver (observer: nil)
    self.drawPadHolesInPDF_property.setSignatureObserver (observer: nil)
    self.drawPadsBottomSide_property.setSignatureObserver (observer: nil)
    self.drawPadsTopSide_property.setSignatureObserver (observer: nil)
    self.drawTextsLayoutBottomSide_property.setSignatureObserver (observer: nil)
    self.drawTextsLayoutTopSide_property.setSignatureObserver (observer: nil)
    self.drawTextsLegendBottomSide_property.setSignatureObserver (observer: nil)
    self.drawTextsLegendTopSide_property.setSignatureObserver (observer: nil)
    self.drawTracksBottomSide_property.setSignatureObserver (observer: nil)
    self.drawTracksTopSide_property.setSignatureObserver (observer: nil)
    self.drawVias_property.setSignatureObserver (observer: nil)
    self.fileExtension_property.setSignatureObserver (observer: nil)
    self.horizontalMirror_property.setSignatureObserver (observer: nil)
    self.measurementUnitForPadHoleInPDF_property.setSignatureObserver (observer: nil)
    self.name_property.setSignatureObserver (observer: nil)
    self.padHoleDiameterInPDF_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "drawBoardLimits",
      idx:self.drawBoardLimits_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawBoardLimits_property.mObserverExplorer,
      valueExplorer:&self.drawBoardLimits_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawInternalBoardLimits",
      idx:self.drawInternalBoardLimits_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawInternalBoardLimits_property.mObserverExplorer,
      valueExplorer:&self.drawInternalBoardLimits_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawComponentNamesTopSide",
      idx:self.drawComponentNamesTopSide_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawComponentNamesTopSide_property.mObserverExplorer,
      valueExplorer:&self.drawComponentNamesTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawComponentNamesBottomSide",
      idx:self.drawComponentNamesBottomSide_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawComponentNamesBottomSide_property.mObserverExplorer,
      valueExplorer:&self.drawComponentNamesBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawComponentValuesTopSide",
      idx:self.drawComponentValuesTopSide_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawComponentValuesTopSide_property.mObserverExplorer,
      valueExplorer:&self.drawComponentValuesTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawComponentValuesBottomSide",
      idx:self.drawComponentValuesBottomSide_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawComponentValuesBottomSide_property.mObserverExplorer,
      valueExplorer:&self.drawComponentValuesBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPackageLegendTopSide",
      idx:self.drawPackageLegendTopSide_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawPackageLegendTopSide_property.mObserverExplorer,
      valueExplorer:&self.drawPackageLegendTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPackageLegendBottomSide",
      idx:self.drawPackageLegendBottomSide_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawPackageLegendBottomSide_property.mObserverExplorer,
      valueExplorer:&self.drawPackageLegendBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPadHolesInPDF",
      idx:self.drawPadHolesInPDF_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawPadHolesInPDF_property.mObserverExplorer,
      valueExplorer:&self.drawPadHolesInPDF_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPadsTopSide",
      idx:self.drawPadsTopSide_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawPadsTopSide_property.mObserverExplorer,
      valueExplorer:&self.drawPadsTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPadsBottomSide",
      idx:self.drawPadsBottomSide_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawPadsBottomSide_property.mObserverExplorer,
      valueExplorer:&self.drawPadsBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTextsLayoutTopSide",
      idx:self.drawTextsLayoutTopSide_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawTextsLayoutTopSide_property.mObserverExplorer,
      valueExplorer:&self.drawTextsLayoutTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTextsLayoutBottomSide",
      idx:self.drawTextsLayoutBottomSide_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawTextsLayoutBottomSide_property.mObserverExplorer,
      valueExplorer:&self.drawTextsLayoutBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTextsLegendTopSide",
      idx:self.drawTextsLegendTopSide_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawTextsLegendTopSide_property.mObserverExplorer,
      valueExplorer:&self.drawTextsLegendTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTextsLegendBottomSide",
      idx:self.drawTextsLegendBottomSide_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawTextsLegendBottomSide_property.mObserverExplorer,
      valueExplorer:&self.drawTextsLegendBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTracksTopSide",
      idx:self.drawTracksTopSide_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawTracksTopSide_property.mObserverExplorer,
      valueExplorer:&self.drawTracksTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTracksBottomSide",
      idx:self.drawTracksBottomSide_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawTracksBottomSide_property.mObserverExplorer,
      valueExplorer:&self.drawTracksBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawVias",
      idx:self.drawVias_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawVias_property.mObserverExplorer,
      valueExplorer:&self.drawVias_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "fileExtension",
      idx:self.fileExtension_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.fileExtension_property.mObserverExplorer,
      valueExplorer:&self.fileExtension_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "horizontalMirror",
      idx:self.horizontalMirror_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.horizontalMirror_property.mObserverExplorer,
      valueExplorer:&self.horizontalMirror_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "name",
      idx:self.name_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.name_property.mObserverExplorer,
      valueExplorer:&self.name_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "measurementUnitForPadHoleInPDF",
      idx:self.measurementUnitForPadHoleInPDF_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.measurementUnitForPadHoleInPDF_property.mObserverExplorer,
      valueExplorer:&self.measurementUnitForPadHoleInPDF_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padHoleDiameterInPDF",
      idx:self.padHoleDiameterInPDF_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padHoleDiameterInPDF_property.mObserverExplorer,
      valueExplorer:&self.padHoleDiameterInPDF_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: drawBoardLimits
    self.drawBoardLimits_property.mObserverExplorer = nil
    self.drawBoardLimits_property.mValueExplorer = nil
  //--- Atomic property: drawInternalBoardLimits
    self.drawInternalBoardLimits_property.mObserverExplorer = nil
    self.drawInternalBoardLimits_property.mValueExplorer = nil
  //--- Atomic property: drawComponentNamesTopSide
    self.drawComponentNamesTopSide_property.mObserverExplorer = nil
    self.drawComponentNamesTopSide_property.mValueExplorer = nil
  //--- Atomic property: drawComponentNamesBottomSide
    self.drawComponentNamesBottomSide_property.mObserverExplorer = nil
    self.drawComponentNamesBottomSide_property.mValueExplorer = nil
  //--- Atomic property: drawComponentValuesTopSide
    self.drawComponentValuesTopSide_property.mObserverExplorer = nil
    self.drawComponentValuesTopSide_property.mValueExplorer = nil
  //--- Atomic property: drawComponentValuesBottomSide
    self.drawComponentValuesBottomSide_property.mObserverExplorer = nil
    self.drawComponentValuesBottomSide_property.mValueExplorer = nil
  //--- Atomic property: drawPackageLegendTopSide
    self.drawPackageLegendTopSide_property.mObserverExplorer = nil
    self.drawPackageLegendTopSide_property.mValueExplorer = nil
  //--- Atomic property: drawPackageLegendBottomSide
    self.drawPackageLegendBottomSide_property.mObserverExplorer = nil
    self.drawPackageLegendBottomSide_property.mValueExplorer = nil
  //--- Atomic property: drawPadHolesInPDF
    self.drawPadHolesInPDF_property.mObserverExplorer = nil
    self.drawPadHolesInPDF_property.mValueExplorer = nil
  //--- Atomic property: drawPadsTopSide
    self.drawPadsTopSide_property.mObserverExplorer = nil
    self.drawPadsTopSide_property.mValueExplorer = nil
  //--- Atomic property: drawPadsBottomSide
    self.drawPadsBottomSide_property.mObserverExplorer = nil
    self.drawPadsBottomSide_property.mValueExplorer = nil
  //--- Atomic property: drawTextsLayoutTopSide
    self.drawTextsLayoutTopSide_property.mObserverExplorer = nil
    self.drawTextsLayoutTopSide_property.mValueExplorer = nil
  //--- Atomic property: drawTextsLayoutBottomSide
    self.drawTextsLayoutBottomSide_property.mObserverExplorer = nil
    self.drawTextsLayoutBottomSide_property.mValueExplorer = nil
  //--- Atomic property: drawTextsLegendTopSide
    self.drawTextsLegendTopSide_property.mObserverExplorer = nil
    self.drawTextsLegendTopSide_property.mValueExplorer = nil
  //--- Atomic property: drawTextsLegendBottomSide
    self.drawTextsLegendBottomSide_property.mObserverExplorer = nil
    self.drawTextsLegendBottomSide_property.mValueExplorer = nil
  //--- Atomic property: drawTracksTopSide
    self.drawTracksTopSide_property.mObserverExplorer = nil
    self.drawTracksTopSide_property.mValueExplorer = nil
  //--- Atomic property: drawTracksBottomSide
    self.drawTracksBottomSide_property.mObserverExplorer = nil
    self.drawTracksBottomSide_property.mValueExplorer = nil
  //--- Atomic property: drawVias
    self.drawVias_property.mObserverExplorer = nil
    self.drawVias_property.mValueExplorer = nil
  //--- Atomic property: fileExtension
    self.fileExtension_property.mObserverExplorer = nil
    self.fileExtension_property.mValueExplorer = nil
  //--- Atomic property: horizontalMirror
    self.horizontalMirror_property.mObserverExplorer = nil
    self.horizontalMirror_property.mValueExplorer = nil
  //--- Atomic property: name
    self.name_property.mObserverExplorer = nil
    self.name_property.mValueExplorer = nil
  //--- Atomic property: measurementUnitForPadHoleInPDF
    self.measurementUnitForPadHoleInPDF_property.mObserverExplorer = nil
    self.measurementUnitForPadHoleInPDF_property.mValueExplorer = nil
  //--- Atomic property: padHoleDiameterInPDF
    self.padHoleDiameterInPDF_property.mObserverExplorer = nil
    self.padHoleDiameterInPDF_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: drawBoardLimits
    self.drawBoardLimits_property.storeIn (dictionary: ioDictionary, forKey:"drawBoardLimits")
  //--- Atomic property: drawInternalBoardLimits
    self.drawInternalBoardLimits_property.storeIn (dictionary: ioDictionary, forKey:"drawInternalBoardLimits")
  //--- Atomic property: drawComponentNamesTopSide
    self.drawComponentNamesTopSide_property.storeIn (dictionary: ioDictionary, forKey:"drawComponentNamesTopSide")
  //--- Atomic property: drawComponentNamesBottomSide
    self.drawComponentNamesBottomSide_property.storeIn (dictionary: ioDictionary, forKey:"drawComponentNamesBottomSide")
  //--- Atomic property: drawComponentValuesTopSide
    self.drawComponentValuesTopSide_property.storeIn (dictionary: ioDictionary, forKey:"drawComponentValuesTopSide")
  //--- Atomic property: drawComponentValuesBottomSide
    self.drawComponentValuesBottomSide_property.storeIn (dictionary: ioDictionary, forKey:"drawComponentValuesBottomSide")
  //--- Atomic property: drawPackageLegendTopSide
    self.drawPackageLegendTopSide_property.storeIn (dictionary: ioDictionary, forKey:"drawPackageLegendTopSide")
  //--- Atomic property: drawPackageLegendBottomSide
    self.drawPackageLegendBottomSide_property.storeIn (dictionary: ioDictionary, forKey:"drawPackageLegendBottomSide")
  //--- Atomic property: drawPadHolesInPDF
    self.drawPadHolesInPDF_property.storeIn (dictionary: ioDictionary, forKey:"drawPadHolesInPDF")
  //--- Atomic property: drawPadsTopSide
    self.drawPadsTopSide_property.storeIn (dictionary: ioDictionary, forKey:"drawPadsTopSide")
  //--- Atomic property: drawPadsBottomSide
    self.drawPadsBottomSide_property.storeIn (dictionary: ioDictionary, forKey:"drawPadsBottomSide")
  //--- Atomic property: drawTextsLayoutTopSide
    self.drawTextsLayoutTopSide_property.storeIn (dictionary: ioDictionary, forKey:"drawTextsLayoutTopSide")
  //--- Atomic property: drawTextsLayoutBottomSide
    self.drawTextsLayoutBottomSide_property.storeIn (dictionary: ioDictionary, forKey:"drawTextsLayoutBottomSide")
  //--- Atomic property: drawTextsLegendTopSide
    self.drawTextsLegendTopSide_property.storeIn (dictionary: ioDictionary, forKey:"drawTextsLegendTopSide")
  //--- Atomic property: drawTextsLegendBottomSide
    self.drawTextsLegendBottomSide_property.storeIn (dictionary: ioDictionary, forKey:"drawTextsLegendBottomSide")
  //--- Atomic property: drawTracksTopSide
    self.drawTracksTopSide_property.storeIn (dictionary: ioDictionary, forKey:"drawTracksTopSide")
  //--- Atomic property: drawTracksBottomSide
    self.drawTracksBottomSide_property.storeIn (dictionary: ioDictionary, forKey:"drawTracksBottomSide")
  //--- Atomic property: drawVias
    self.drawVias_property.storeIn (dictionary: ioDictionary, forKey:"drawVias")
  //--- Atomic property: fileExtension
    self.fileExtension_property.storeIn (dictionary: ioDictionary, forKey:"fileExtension")
  //--- Atomic property: horizontalMirror
    self.horizontalMirror_property.storeIn (dictionary: ioDictionary, forKey:"horizontalMirror")
  //--- Atomic property: name
    self.name_property.storeIn (dictionary: ioDictionary, forKey:"name")
  //--- Atomic property: measurementUnitForPadHoleInPDF
    self.measurementUnitForPadHoleInPDF_property.storeIn (dictionary: ioDictionary, forKey:"measurementUnitForPadHoleInPDF")
  //--- Atomic property: padHoleDiameterInPDF
    self.padHoleDiameterInPDF_property.storeIn (dictionary: ioDictionary, forKey:"padHoleDiameterInPDF")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: drawBoardLimits
    self.drawBoardLimits_property.readFrom (dictionary: inDictionary, forKey:"drawBoardLimits")
  //--- Atomic property: drawInternalBoardLimits
    self.drawInternalBoardLimits_property.readFrom (dictionary: inDictionary, forKey:"drawInternalBoardLimits")
  //--- Atomic property: drawComponentNamesTopSide
    self.drawComponentNamesTopSide_property.readFrom (dictionary: inDictionary, forKey:"drawComponentNamesTopSide")
  //--- Atomic property: drawComponentNamesBottomSide
    self.drawComponentNamesBottomSide_property.readFrom (dictionary: inDictionary, forKey:"drawComponentNamesBottomSide")
  //--- Atomic property: drawComponentValuesTopSide
    self.drawComponentValuesTopSide_property.readFrom (dictionary: inDictionary, forKey:"drawComponentValuesTopSide")
  //--- Atomic property: drawComponentValuesBottomSide
    self.drawComponentValuesBottomSide_property.readFrom (dictionary: inDictionary, forKey:"drawComponentValuesBottomSide")
  //--- Atomic property: drawPackageLegendTopSide
    self.drawPackageLegendTopSide_property.readFrom (dictionary: inDictionary, forKey:"drawPackageLegendTopSide")
  //--- Atomic property: drawPackageLegendBottomSide
    self.drawPackageLegendBottomSide_property.readFrom (dictionary: inDictionary, forKey:"drawPackageLegendBottomSide")
  //--- Atomic property: drawPadHolesInPDF
    self.drawPadHolesInPDF_property.readFrom (dictionary: inDictionary, forKey:"drawPadHolesInPDF")
  //--- Atomic property: drawPadsTopSide
    self.drawPadsTopSide_property.readFrom (dictionary: inDictionary, forKey:"drawPadsTopSide")
  //--- Atomic property: drawPadsBottomSide
    self.drawPadsBottomSide_property.readFrom (dictionary: inDictionary, forKey:"drawPadsBottomSide")
  //--- Atomic property: drawTextsLayoutTopSide
    self.drawTextsLayoutTopSide_property.readFrom (dictionary: inDictionary, forKey:"drawTextsLayoutTopSide")
  //--- Atomic property: drawTextsLayoutBottomSide
    self.drawTextsLayoutBottomSide_property.readFrom (dictionary: inDictionary, forKey:"drawTextsLayoutBottomSide")
  //--- Atomic property: drawTextsLegendTopSide
    self.drawTextsLegendTopSide_property.readFrom (dictionary: inDictionary, forKey:"drawTextsLegendTopSide")
  //--- Atomic property: drawTextsLegendBottomSide
    self.drawTextsLegendBottomSide_property.readFrom (dictionary: inDictionary, forKey:"drawTextsLegendBottomSide")
  //--- Atomic property: drawTracksTopSide
    self.drawTracksTopSide_property.readFrom (dictionary: inDictionary, forKey:"drawTracksTopSide")
  //--- Atomic property: drawTracksBottomSide
    self.drawTracksBottomSide_property.readFrom (dictionary: inDictionary, forKey:"drawTracksBottomSide")
  //--- Atomic property: drawVias
    self.drawVias_property.readFrom (dictionary: inDictionary, forKey:"drawVias")
  //--- Atomic property: fileExtension
    self.fileExtension_property.readFrom (dictionary: inDictionary, forKey:"fileExtension")
  //--- Atomic property: horizontalMirror
    self.horizontalMirror_property.readFrom (dictionary: inDictionary, forKey:"horizontalMirror")
  //--- Atomic property: name
    self.name_property.readFrom (dictionary: inDictionary, forKey:"name")
  //--- Atomic property: measurementUnitForPadHoleInPDF
    self.measurementUnitForPadHoleInPDF_property.readFrom (dictionary: inDictionary, forKey:"measurementUnitForPadHoleInPDF")
  //--- Atomic property: padHoleDiameterInPDF
    self.padHoleDiameterInPDF_property.readFrom (dictionary: inDictionary, forKey:"padHoleDiameterInPDF")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.drawBoardLimits_property.signature ())
    crc.accumulateUInt32 (self.drawComponentNamesBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawComponentNamesTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawComponentValuesBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawComponentValuesTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawInternalBoardLimits_property.signature ())
    crc.accumulateUInt32 (self.drawPackageLegendBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawPackageLegendTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawPadHolesInPDF_property.signature ())
    crc.accumulateUInt32 (self.drawPadsBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawPadsTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawTextsLayoutBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawTextsLayoutTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawTextsLegendBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawTextsLegendTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawTracksBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawTracksTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawVias_property.signature ())
    crc.accumulateUInt32 (self.fileExtension_property.signature ())
    crc.accumulateUInt32 (self.horizontalMirror_property.signature ())
    crc.accumulateUInt32 (self.measurementUnitForPadHoleInPDF_property.signature ())
    crc.accumulateUInt32 (self.name_property.signature ())
    crc.accumulateUInt32 (self.padHoleDiameterInPDF_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ArtworkFileGenerationParameters : ReadOnlyAbstractArrayProperty <ArtworkFileGenerationParameters> {

  //····················································································································
  //   Observers of 'drawBoardLimits' stored property
  //····················································································································

  private var mObserversOf_drawBoardLimits = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawBoardLimits (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawBoardLimits.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawBoardLimits_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawBoardLimits (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawBoardLimits.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawBoardLimits_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawBoardLimits_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_drawBoardLimits.apply { (_ observer : EBEvent) in
        managedObject.drawBoardLimits_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawBoardLimits_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawBoardLimits.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawBoardLimits_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawInternalBoardLimits' stored property
  //····················································································································

  private var mObserversOf_drawInternalBoardLimits = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawInternalBoardLimits (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawInternalBoardLimits.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawInternalBoardLimits_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawInternalBoardLimits (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawInternalBoardLimits.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawInternalBoardLimits_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawInternalBoardLimits_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_drawInternalBoardLimits.apply { (_ observer : EBEvent) in
        managedObject.drawInternalBoardLimits_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawInternalBoardLimits_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawInternalBoardLimits.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawInternalBoardLimits_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawComponentNamesTopSide' stored property
  //····················································································································

  private var mObserversOf_drawComponentNamesTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawComponentNamesTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawComponentNamesTopSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentNamesTopSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawComponentNamesTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawComponentNamesTopSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentNamesTopSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawComponentNamesTopSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_drawComponentNamesTopSide.apply { (_ observer : EBEvent) in
        managedObject.drawComponentNamesTopSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawComponentNamesTopSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawComponentNamesTopSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawComponentNamesTopSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawComponentNamesBottomSide' stored property
  //····················································································································

  private var mObserversOf_drawComponentNamesBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawComponentNamesBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawComponentNamesBottomSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentNamesBottomSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawComponentNamesBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawComponentNamesBottomSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentNamesBottomSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawComponentNamesBottomSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_drawComponentNamesBottomSide.apply { (_ observer : EBEvent) in
        managedObject.drawComponentNamesBottomSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawComponentNamesBottomSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawComponentNamesBottomSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawComponentNamesBottomSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawComponentValuesTopSide' stored property
  //····················································································································

  private var mObserversOf_drawComponentValuesTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawComponentValuesTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawComponentValuesTopSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentValuesTopSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawComponentValuesTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawComponentValuesTopSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentValuesTopSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawComponentValuesTopSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_drawComponentValuesTopSide.apply { (_ observer : EBEvent) in
        managedObject.drawComponentValuesTopSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawComponentValuesTopSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawComponentValuesTopSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawComponentValuesTopSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawComponentValuesBottomSide' stored property
  //····················································································································

  private var mObserversOf_drawComponentValuesBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawComponentValuesBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawComponentValuesBottomSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentValuesBottomSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawComponentValuesBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawComponentValuesBottomSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentValuesBottomSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawComponentValuesBottomSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_drawComponentValuesBottomSide.apply { (_ observer : EBEvent) in
        managedObject.drawComponentValuesBottomSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawComponentValuesBottomSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawComponentValuesBottomSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawComponentValuesBottomSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawPackageLegendTopSide' stored property
  //····················································································································

  private var mObserversOf_drawPackageLegendTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawPackageLegendTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawPackageLegendTopSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPackageLegendTopSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawPackageLegendTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawPackageLegendTopSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPackageLegendTopSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawPackageLegendTopSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_drawPackageLegendTopSide.apply { (_ observer : EBEvent) in
        managedObject.drawPackageLegendTopSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawPackageLegendTopSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawPackageLegendTopSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawPackageLegendTopSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawPackageLegendBottomSide' stored property
  //····················································································································

  private var mObserversOf_drawPackageLegendBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawPackageLegendBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawPackageLegendBottomSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPackageLegendBottomSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawPackageLegendBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawPackageLegendBottomSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPackageLegendBottomSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawPackageLegendBottomSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_drawPackageLegendBottomSide.apply { (_ observer : EBEvent) in
        managedObject.drawPackageLegendBottomSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawPackageLegendBottomSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawPackageLegendBottomSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawPackageLegendBottomSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawPadHolesInPDF' stored property
  //····················································································································

  private var mObserversOf_drawPadHolesInPDF = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawPadHolesInPDF (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawPadHolesInPDF.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadHolesInPDF_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawPadHolesInPDF (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawPadHolesInPDF.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadHolesInPDF_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawPadHolesInPDF_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_drawPadHolesInPDF.apply { (_ observer : EBEvent) in
        managedObject.drawPadHolesInPDF_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawPadHolesInPDF_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawPadHolesInPDF.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawPadHolesInPDF_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawPadsTopSide' stored property
  //····················································································································

  private var mObserversOf_drawPadsTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawPadsTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawPadsTopSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadsTopSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawPadsTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawPadsTopSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadsTopSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawPadsTopSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_drawPadsTopSide.apply { (_ observer : EBEvent) in
        managedObject.drawPadsTopSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawPadsTopSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawPadsTopSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawPadsTopSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawPadsBottomSide' stored property
  //····················································································································

  private var mObserversOf_drawPadsBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawPadsBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawPadsBottomSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadsBottomSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawPadsBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawPadsBottomSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadsBottomSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawPadsBottomSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_drawPadsBottomSide.apply { (_ observer : EBEvent) in
        managedObject.drawPadsBottomSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawPadsBottomSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawPadsBottomSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawPadsBottomSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTextsLayoutTopSide' stored property
  //····················································································································

  private var mObserversOf_drawTextsLayoutTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTextsLayoutTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawTextsLayoutTopSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLayoutTopSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTextsLayoutTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawTextsLayoutTopSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLayoutTopSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTextsLayoutTopSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_drawTextsLayoutTopSide.apply { (_ observer : EBEvent) in
        managedObject.drawTextsLayoutTopSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTextsLayoutTopSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawTextsLayoutTopSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawTextsLayoutTopSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTextsLayoutBottomSide' stored property
  //····················································································································

  private var mObserversOf_drawTextsLayoutBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTextsLayoutBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawTextsLayoutBottomSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLayoutBottomSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTextsLayoutBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawTextsLayoutBottomSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLayoutBottomSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTextsLayoutBottomSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_drawTextsLayoutBottomSide.apply { (_ observer : EBEvent) in
        managedObject.drawTextsLayoutBottomSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTextsLayoutBottomSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawTextsLayoutBottomSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawTextsLayoutBottomSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTextsLegendTopSide' stored property
  //····················································································································

  private var mObserversOf_drawTextsLegendTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTextsLegendTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawTextsLegendTopSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLegendTopSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTextsLegendTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawTextsLegendTopSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLegendTopSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTextsLegendTopSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_drawTextsLegendTopSide.apply { (_ observer : EBEvent) in
        managedObject.drawTextsLegendTopSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTextsLegendTopSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawTextsLegendTopSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawTextsLegendTopSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTextsLegendBottomSide' stored property
  //····················································································································

  private var mObserversOf_drawTextsLegendBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTextsLegendBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawTextsLegendBottomSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLegendBottomSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTextsLegendBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawTextsLegendBottomSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLegendBottomSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTextsLegendBottomSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_drawTextsLegendBottomSide.apply { (_ observer : EBEvent) in
        managedObject.drawTextsLegendBottomSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTextsLegendBottomSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawTextsLegendBottomSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawTextsLegendBottomSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTracksTopSide' stored property
  //····················································································································

  private var mObserversOf_drawTracksTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTracksTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawTracksTopSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksTopSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTracksTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawTracksTopSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksTopSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTracksTopSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_drawTracksTopSide.apply { (_ observer : EBEvent) in
        managedObject.drawTracksTopSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTracksTopSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawTracksTopSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawTracksTopSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTracksBottomSide' stored property
  //····················································································································

  private var mObserversOf_drawTracksBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTracksBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawTracksBottomSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksBottomSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTracksBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawTracksBottomSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksBottomSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTracksBottomSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_drawTracksBottomSide.apply { (_ observer : EBEvent) in
        managedObject.drawTracksBottomSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTracksBottomSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawTracksBottomSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawTracksBottomSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawVias' stored property
  //····················································································································

  private var mObserversOf_drawVias = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawVias (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drawVias.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawVias_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawVias (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drawVias.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawVias_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawVias_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_drawVias.apply { (_ observer : EBEvent) in
        managedObject.drawVias_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawVias_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_drawVias.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawVias_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'fileExtension' stored property
  //····················································································································

  private var mObserversOf_fileExtension = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_fileExtension (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_fileExtension.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.fileExtension_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_fileExtension (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_fileExtension.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.fileExtension_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_fileExtension_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_fileExtension.apply { (_ observer : EBEvent) in
        managedObject.fileExtension_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_fileExtension_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_fileExtension.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.fileExtension_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'horizontalMirror' stored property
  //····················································································································

  private var mObserversOf_horizontalMirror = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_horizontalMirror (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_horizontalMirror.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.horizontalMirror_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_horizontalMirror (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_horizontalMirror.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.horizontalMirror_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_horizontalMirror_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_horizontalMirror.apply { (_ observer : EBEvent) in
        managedObject.horizontalMirror_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_horizontalMirror_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_horizontalMirror.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.horizontalMirror_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_name.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_name.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_name_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_name.apply { (_ observer : EBEvent) in
        managedObject.name_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_name_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_name.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.name_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'measurementUnitForPadHoleInPDF' stored property
  //····················································································································

  private var mObserversOf_measurementUnitForPadHoleInPDF = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_measurementUnitForPadHoleInPDF (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_measurementUnitForPadHoleInPDF.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.measurementUnitForPadHoleInPDF_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_measurementUnitForPadHoleInPDF (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_measurementUnitForPadHoleInPDF.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.measurementUnitForPadHoleInPDF_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_measurementUnitForPadHoleInPDF_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_measurementUnitForPadHoleInPDF.apply { (_ observer : EBEvent) in
        managedObject.measurementUnitForPadHoleInPDF_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_measurementUnitForPadHoleInPDF_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_measurementUnitForPadHoleInPDF.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.measurementUnitForPadHoleInPDF_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padHoleDiameterInPDF' stored property
  //····················································································································

  private var mObserversOf_padHoleDiameterInPDF = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padHoleDiameterInPDF (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padHoleDiameterInPDF.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padHoleDiameterInPDF_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padHoleDiameterInPDF (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padHoleDiameterInPDF.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padHoleDiameterInPDF_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padHoleDiameterInPDF_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      self.mObserversOf_padHoleDiameterInPDF.apply { (_ observer : EBEvent) in
        managedObject.padHoleDiameterInPDF_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padHoleDiameterInPDF_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    self.mObserversOf_padHoleDiameterInPDF.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.padHoleDiameterInPDF_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_ArtworkFileGenerationParameters : ReadOnlyArrayOf_ArtworkFileGenerationParameters {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [ArtworkFileGenerationParameters] > > = nil

  //····················································································································

  override var propset : Set <ArtworkFileGenerationParameters> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [ArtworkFileGenerationParameters] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [ArtworkFileGenerationParameters] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  private var mSet = Set <ArtworkFileGenerationParameters> ()

  //····················································································································

  private var mCachedValue : EBSelection < [ArtworkFileGenerationParameters] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      let cachedValue = unwrappedComputeFunction ()
      self.mCachedValue = cachedValue
      let newSet : Set <ArtworkFileGenerationParameters>
      switch cachedValue {
      case .multiple, .empty :
        newSet = Set <ArtworkFileGenerationParameters> ()
      case .single (let array) :
        newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_drawBoardLimits_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_drawInternalBoardLimits_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_drawComponentNamesTopSide_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_drawComponentNamesBottomSide_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_drawComponentValuesTopSide_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_drawComponentValuesBottomSide_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_drawPackageLegendTopSide_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_drawPackageLegendBottomSide_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_drawPadHolesInPDF_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_drawPadsTopSide_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_drawPadsBottomSide_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_drawTextsLayoutTopSide_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_drawTextsLayoutBottomSide_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_drawTextsLegendTopSide_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_drawTextsLegendBottomSide_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_drawTracksTopSide_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_drawTracksBottomSide_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_drawVias_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_fileExtension_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_horizontalMirror_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_name_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_measurementUnitForPadHoleInPDF_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_padHoleDiameterInPDF_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_drawBoardLimits_toElementsOfSet (addedSet)
      self.addEBObserversOf_drawInternalBoardLimits_toElementsOfSet (addedSet)
      self.addEBObserversOf_drawComponentNamesTopSide_toElementsOfSet (addedSet)
      self.addEBObserversOf_drawComponentNamesBottomSide_toElementsOfSet (addedSet)
      self.addEBObserversOf_drawComponentValuesTopSide_toElementsOfSet (addedSet)
      self.addEBObserversOf_drawComponentValuesBottomSide_toElementsOfSet (addedSet)
      self.addEBObserversOf_drawPackageLegendTopSide_toElementsOfSet (addedSet)
      self.addEBObserversOf_drawPackageLegendBottomSide_toElementsOfSet (addedSet)
      self.addEBObserversOf_drawPadHolesInPDF_toElementsOfSet (addedSet)
      self.addEBObserversOf_drawPadsTopSide_toElementsOfSet (addedSet)
      self.addEBObserversOf_drawPadsBottomSide_toElementsOfSet (addedSet)
      self.addEBObserversOf_drawTextsLayoutTopSide_toElementsOfSet (addedSet)
      self.addEBObserversOf_drawTextsLayoutBottomSide_toElementsOfSet (addedSet)
      self.addEBObserversOf_drawTextsLegendTopSide_toElementsOfSet (addedSet)
      self.addEBObserversOf_drawTextsLegendBottomSide_toElementsOfSet (addedSet)
      self.addEBObserversOf_drawTracksTopSide_toElementsOfSet (addedSet)
      self.addEBObserversOf_drawTracksBottomSide_toElementsOfSet (addedSet)
      self.addEBObserversOf_drawVias_toElementsOfSet (addedSet)
      self.addEBObserversOf_fileExtension_toElementsOfSet (addedSet)
      self.addEBObserversOf_horizontalMirror_toElementsOfSet (addedSet)
      self.addEBObserversOf_name_toElementsOfSet (addedSet)
      self.addEBObserversOf_measurementUnitForPadHoleInPDF_toElementsOfSet (addedSet)
      self.addEBObserversOf_padHoleDiameterInPDF_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_ArtworkFileGenerationParameters : ReadOnlyArrayOf_ArtworkFileGenerationParameters {

  //····················································································································
 
  func setProp (_ value :  [ArtworkFileGenerationParameters]) { } // Abstract method
  
 //····················································································································

  private var mProxyArray = [ProxyArrayOf_ArtworkFileGenerationParameters] ()

  //····················································································································

  func attachProxy (_ inProxy : ProxyArrayOf_ArtworkFileGenerationParameters) {
    self.mProxyArray.append (inProxy)
    inProxy.updateProxy ()
    self.postEvent ()
  }

  //····················································································································

  func detachProxy (_ inProxy : ProxyArrayOf_ArtworkFileGenerationParameters) {
    if let idx = self.mProxyArray.firstIndex(of: inProxy) {
      self.mProxyArray.remove (at: idx)
      self.postEvent ()
    }
  }

  //····················································································································

  internal func propagateProxyUpdate () {
    for proxy in self.mProxyArray {
      proxy.updateProxy ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_ArtworkFileGenerationParameters : ReadWriteArrayOf_ArtworkFileGenerationParameters {

   //····················································································································

  private var mModel : ReadWriteArrayOf_ArtworkFileGenerationParameters? = nil

  //····················································································································

  private var mInternalValue : EBSelection < [ArtworkFileGenerationParameters] > = .empty {
    didSet {
      if self.mInternalValue != oldValue {
        switch self.mInternalValue {
        case .empty, .multiple :
          self.mCurrentObjectSet = []
        case .single (let v) :
          self.mCurrentObjectSet = Set (v)
        }
        self.propagateProxyUpdate ()
        self.postEvent ()
      }
    }
  }

  //····················································································································

  private var mCurrentObjectSet = Set <ArtworkFileGenerationParameters> () {
    didSet {
      if self.mCurrentObjectSet != oldValue {
      //--- Add observers from removed objects
        let removedObjectSet = oldValue.subtracting (self.mCurrentObjectSet)
        self.removeEBObserversOf_drawBoardLimits_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_drawInternalBoardLimits_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_drawComponentNamesTopSide_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_drawComponentNamesBottomSide_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_drawComponentValuesTopSide_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_drawComponentValuesBottomSide_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_drawPackageLegendTopSide_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_drawPackageLegendBottomSide_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_drawPadHolesInPDF_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_drawPadsTopSide_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_drawPadsBottomSide_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_drawTextsLayoutTopSide_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_drawTextsLayoutBottomSide_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_drawTextsLegendTopSide_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_drawTextsLegendBottomSide_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_drawTracksTopSide_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_drawTracksBottomSide_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_drawVias_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_fileExtension_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_horizontalMirror_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_name_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_measurementUnitForPadHoleInPDF_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_padHoleDiameterInPDF_fromElementsOfSet (removedObjectSet) // Stored property
      //--- Add observers to added objects
        let addedObjectSet = self.mCurrentObjectSet.subtracting (oldValue)
        self.addEBObserversOf_drawBoardLimits_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_drawInternalBoardLimits_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_drawComponentNamesTopSide_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_drawComponentNamesBottomSide_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_drawComponentValuesTopSide_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_drawComponentValuesBottomSide_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_drawPackageLegendTopSide_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_drawPackageLegendBottomSide_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_drawPadHolesInPDF_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_drawPadsTopSide_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_drawPadsBottomSide_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_drawTextsLayoutTopSide_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_drawTextsLayoutBottomSide_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_drawTextsLegendTopSide_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_drawTextsLegendBottomSide_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_drawTracksTopSide_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_drawTracksBottomSide_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_drawVias_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_fileExtension_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_horizontalMirror_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_name_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_measurementUnitForPadHoleInPDF_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_padHoleDiameterInPDF_toElementsOfSet (addedObjectSet) // Stored property
      }
    }
  }

  //····················································································································

  func bind (_ inModel : ReadWriteArrayOf_ArtworkFileGenerationParameters) {
    self.unbind ()
    self.mModel = inModel
    inModel.attachProxy (self)
  }

  //····················································································································

  func unbind () {
    if let model = self.mModel {
      model.detachProxy (self)
      self.mModel = nil
    }
  }

  //····················································································································

  func updateProxy () {
    if let model = self.mModel {
      self.mInternalValue = model.prop
    }else{
      self.mInternalValue = .empty
    }
  }

  //····················································································································

  override func setProp (_ inArrayValue :  [ArtworkFileGenerationParameters]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [ArtworkFileGenerationParameters] > {
    return self.mInternalValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_ArtworkFileGenerationParameters : ReadWriteArrayOf_ArtworkFileGenerationParameters, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ArtworkFileGenerationParameters) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ArtworkFileGenerationParameters) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ArtworkFileGenerationParameters) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ArtworkFileGenerationParameters) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [ArtworkFileGenerationParameters] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "ArtworkFileGenerationParameters") as? ArtworkFileGenerationParameters {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <ArtworkFileGenerationParameters> ()
  private var mValue = [ArtworkFileGenerationParameters] () {
    didSet {
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.mResetOppositeRelationship? (managedObject)
            managedObject.drawBoardLimits_property.mSetterDelegate = nil
            managedObject.drawInternalBoardLimits_property.mSetterDelegate = nil
            managedObject.drawComponentNamesTopSide_property.mSetterDelegate = nil
            managedObject.drawComponentNamesBottomSide_property.mSetterDelegate = nil
            managedObject.drawComponentValuesTopSide_property.mSetterDelegate = nil
            managedObject.drawComponentValuesBottomSide_property.mSetterDelegate = nil
            managedObject.drawPackageLegendTopSide_property.mSetterDelegate = nil
            managedObject.drawPackageLegendBottomSide_property.mSetterDelegate = nil
            managedObject.drawPadHolesInPDF_property.mSetterDelegate = nil
            managedObject.drawPadsTopSide_property.mSetterDelegate = nil
            managedObject.drawPadsBottomSide_property.mSetterDelegate = nil
            managedObject.drawTextsLayoutTopSide_property.mSetterDelegate = nil
            managedObject.drawTextsLayoutBottomSide_property.mSetterDelegate = nil
            managedObject.drawTextsLegendTopSide_property.mSetterDelegate = nil
            managedObject.drawTextsLegendBottomSide_property.mSetterDelegate = nil
            managedObject.drawTracksTopSide_property.mSetterDelegate = nil
            managedObject.drawTracksBottomSide_property.mSetterDelegate = nil
            managedObject.drawVias_property.mSetterDelegate = nil
            managedObject.fileExtension_property.mSetterDelegate = nil
            managedObject.horizontalMirror_property.mSetterDelegate = nil
            managedObject.name_property.mSetterDelegate = nil
            managedObject.measurementUnitForPadHoleInPDF_property.mSetterDelegate = nil
            managedObject.padHoleDiameterInPDF_property.mSetterDelegate = nil
          }
        //--- Remove observers of stored properties
          self.removeEBObserversOf_drawBoardLimits_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_drawInternalBoardLimits_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_drawComponentNamesTopSide_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_drawComponentNamesBottomSide_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_drawComponentValuesTopSide_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_drawComponentValuesBottomSide_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_drawPackageLegendTopSide_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_drawPackageLegendBottomSide_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_drawPadHolesInPDF_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_drawPadsTopSide_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_drawPadsBottomSide_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_drawTextsLayoutTopSide_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_drawTextsLayoutBottomSide_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_drawTextsLegendTopSide_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_drawTextsLegendBottomSide_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_drawTracksTopSide_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_drawTracksBottomSide_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_drawVias_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_fileExtension_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_horizontalMirror_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_name_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_measurementUnitForPadHoleInPDF_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_padHoleDiameterInPDF_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of transient properties
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : ArtworkFileGenerationParameters in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.mSetOppositeRelationship? (managedObject)
            managedObject.drawBoardLimits_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.drawInternalBoardLimits_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.drawComponentNamesTopSide_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.drawComponentNamesBottomSide_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.drawComponentValuesTopSide_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.drawComponentValuesBottomSide_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.drawPackageLegendTopSide_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.drawPackageLegendBottomSide_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.drawPadHolesInPDF_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.drawPadsTopSide_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.drawPadsBottomSide_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.drawTextsLayoutTopSide_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.drawTextsLayoutBottomSide_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.drawTextsLegendTopSide_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.drawTextsLegendBottomSide_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.drawTracksTopSide_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.drawTracksBottomSide_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.drawVias_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.fileExtension_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.horizontalMirror_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.name_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.measurementUnitForPadHoleInPDF_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.padHoleDiameterInPDF_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
        //--- Add observers of stored properties
          self.addEBObserversOf_drawBoardLimits_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_drawInternalBoardLimits_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_drawComponentNamesTopSide_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_drawComponentNamesBottomSide_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_drawComponentValuesTopSide_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_drawComponentValuesBottomSide_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_drawPackageLegendTopSide_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_drawPackageLegendBottomSide_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_drawPadHolesInPDF_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_drawPadsTopSide_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_drawPadsBottomSide_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_drawTextsLayoutTopSide_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_drawTextsLayoutBottomSide_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_drawTextsLegendTopSide_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_drawTextsLegendBottomSide_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_drawTracksTopSide_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_drawTracksBottomSide_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_drawVias_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_fileExtension_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_horizontalMirror_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_name_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_measurementUnitForPadHoleInPDF_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_padHoleDiameterInPDF_toElementsOfSet (addedObjectSet)
        //--- Add observers of transient properties
        }
      //--- Notify observers
        self.propagateProxyUpdate ()
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [ArtworkFileGenerationParameters] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [ArtworkFileGenerationParameters]) { self.mValue = inValue }

  //····················································································································

  override var propval : [ArtworkFileGenerationParameters] { return self.mValue }

  //····················································································································

  override var propset : Set <ArtworkFileGenerationParameters> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [ArtworkFileGenerationParameters]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : ArtworkFileGenerationParameters) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : ArtworkFileGenerationParameters) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
