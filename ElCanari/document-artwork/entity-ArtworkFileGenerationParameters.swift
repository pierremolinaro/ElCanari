//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawBoardLimits : class {
  var drawBoardLimits : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawInternalBoardLimits : class {
  var drawInternalBoardLimits : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawComponentNamesTopSide : class {
  var drawComponentNamesTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawComponentNamesBottomSide : class {
  var drawComponentNamesBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawComponentValuesTopSide : class {
  var drawComponentValuesTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawComponentValuesBottomSide : class {
  var drawComponentValuesBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPackageLegendTopSide : class {
  var drawPackageLegendTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPackageLegendBottomSide : class {
  var drawPackageLegendBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPadHolesInPDF : class {
  var drawPadHolesInPDF : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPadsTopSide : class {
  var drawPadsTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPadsBottomSide : class {
  var drawPadsBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTextsLayoutTopSide : class {
  var drawTextsLayoutTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTextsLayoutBottomSide : class {
  var drawTextsLayoutBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTextsLegendTopSide : class {
  var drawTextsLegendTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTextsLegendBottomSide : class {
  var drawTextsLegendBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTracksTopSide : class {
  var drawTracksTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTracksBottomSide : class {
  var drawTracksBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawVias : class {
  var drawVias : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_fileExtension : class {
  var fileExtension : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_horizontalMirror : class {
  var horizontalMirror : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_name : class {
  var name : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_measurementUnitForPadHoleInPDF : class {
  var measurementUnitForPadHoleInPDF : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_padHoleDiameterInPDF : class {
  var padHoleDiameterInPDF : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ArtworkFileGenerationParameters : EBManagedObject,
         ArtworkFileGenerationParameters_drawBoardLimits,
         ArtworkFileGenerationParameters_drawInternalBoardLimits,
         ArtworkFileGenerationParameters_drawComponentNamesTopSide,
         ArtworkFileGenerationParameters_drawComponentNamesBottomSide,
         ArtworkFileGenerationParameters_drawComponentValuesTopSide,
         ArtworkFileGenerationParameters_drawComponentValuesBottomSide,
         ArtworkFileGenerationParameters_drawPackageLegendTopSide,
         ArtworkFileGenerationParameters_drawPackageLegendBottomSide,
         ArtworkFileGenerationParameters_drawPadHolesInPDF,
         ArtworkFileGenerationParameters_drawPadsTopSide,
         ArtworkFileGenerationParameters_drawPadsBottomSide,
         ArtworkFileGenerationParameters_drawTextsLayoutTopSide,
         ArtworkFileGenerationParameters_drawTextsLayoutBottomSide,
         ArtworkFileGenerationParameters_drawTextsLegendTopSide,
         ArtworkFileGenerationParameters_drawTextsLegendBottomSide,
         ArtworkFileGenerationParameters_drawTracksTopSide,
         ArtworkFileGenerationParameters_drawTracksBottomSide,
         ArtworkFileGenerationParameters_drawVias,
         ArtworkFileGenerationParameters_fileExtension,
         ArtworkFileGenerationParameters_horizontalMirror,
         ArtworkFileGenerationParameters_name,
         ArtworkFileGenerationParameters_measurementUnitForPadHoleInPDF,
         ArtworkFileGenerationParameters_padHoleDiameterInPDF {

  //····················································································································
  //   Atomic property: drawBoardLimits
  //····················································································································

  let drawBoardLimits_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawBoardLimits : Bool {
    get { return self.drawBoardLimits_property.propval }
    set { self.drawBoardLimits_property.setProp (newValue) }
  }

  //····················································································································

  var drawBoardLimits_property_selection : EBSelection <Bool> { return self.drawBoardLimits_property.prop }

  //····················································································································
  //   Atomic property: drawInternalBoardLimits
  //····················································································································

  let drawInternalBoardLimits_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawInternalBoardLimits : Bool {
    get { return self.drawInternalBoardLimits_property.propval }
    set { self.drawInternalBoardLimits_property.setProp (newValue) }
  }

  //····················································································································

  var drawInternalBoardLimits_property_selection : EBSelection <Bool> { return self.drawInternalBoardLimits_property.prop }

  //····················································································································
  //   Atomic property: drawComponentNamesTopSide
  //····················································································································

  let drawComponentNamesTopSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawComponentNamesTopSide : Bool {
    get { return self.drawComponentNamesTopSide_property.propval }
    set { self.drawComponentNamesTopSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawComponentNamesTopSide_property_selection : EBSelection <Bool> { return self.drawComponentNamesTopSide_property.prop }

  //····················································································································
  //   Atomic property: drawComponentNamesBottomSide
  //····················································································································

  let drawComponentNamesBottomSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawComponentNamesBottomSide : Bool {
    get { return self.drawComponentNamesBottomSide_property.propval }
    set { self.drawComponentNamesBottomSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawComponentNamesBottomSide_property_selection : EBSelection <Bool> { return self.drawComponentNamesBottomSide_property.prop }

  //····················································································································
  //   Atomic property: drawComponentValuesTopSide
  //····················································································································

  let drawComponentValuesTopSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawComponentValuesTopSide : Bool {
    get { return self.drawComponentValuesTopSide_property.propval }
    set { self.drawComponentValuesTopSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawComponentValuesTopSide_property_selection : EBSelection <Bool> { return self.drawComponentValuesTopSide_property.prop }

  //····················································································································
  //   Atomic property: drawComponentValuesBottomSide
  //····················································································································

  let drawComponentValuesBottomSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawComponentValuesBottomSide : Bool {
    get { return self.drawComponentValuesBottomSide_property.propval }
    set { self.drawComponentValuesBottomSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawComponentValuesBottomSide_property_selection : EBSelection <Bool> { return self.drawComponentValuesBottomSide_property.prop }

  //····················································································································
  //   Atomic property: drawPackageLegendTopSide
  //····················································································································

  let drawPackageLegendTopSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawPackageLegendTopSide : Bool {
    get { return self.drawPackageLegendTopSide_property.propval }
    set { self.drawPackageLegendTopSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawPackageLegendTopSide_property_selection : EBSelection <Bool> { return self.drawPackageLegendTopSide_property.prop }

  //····················································································································
  //   Atomic property: drawPackageLegendBottomSide
  //····················································································································

  let drawPackageLegendBottomSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawPackageLegendBottomSide : Bool {
    get { return self.drawPackageLegendBottomSide_property.propval }
    set { self.drawPackageLegendBottomSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawPackageLegendBottomSide_property_selection : EBSelection <Bool> { return self.drawPackageLegendBottomSide_property.prop }

  //····················································································································
  //   Atomic property: drawPadHolesInPDF
  //····················································································································

  let drawPadHolesInPDF_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawPadHolesInPDF : Bool {
    get { return self.drawPadHolesInPDF_property.propval }
    set { self.drawPadHolesInPDF_property.setProp (newValue) }
  }

  //····················································································································

  var drawPadHolesInPDF_property_selection : EBSelection <Bool> { return self.drawPadHolesInPDF_property.prop }

  //····················································································································
  //   Atomic property: drawPadsTopSide
  //····················································································································

  let drawPadsTopSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawPadsTopSide : Bool {
    get { return self.drawPadsTopSide_property.propval }
    set { self.drawPadsTopSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawPadsTopSide_property_selection : EBSelection <Bool> { return self.drawPadsTopSide_property.prop }

  //····················································································································
  //   Atomic property: drawPadsBottomSide
  //····················································································································

  let drawPadsBottomSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawPadsBottomSide : Bool {
    get { return self.drawPadsBottomSide_property.propval }
    set { self.drawPadsBottomSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawPadsBottomSide_property_selection : EBSelection <Bool> { return self.drawPadsBottomSide_property.prop }

  //····················································································································
  //   Atomic property: drawTextsLayoutTopSide
  //····················································································································

  let drawTextsLayoutTopSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawTextsLayoutTopSide : Bool {
    get { return self.drawTextsLayoutTopSide_property.propval }
    set { self.drawTextsLayoutTopSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawTextsLayoutTopSide_property_selection : EBSelection <Bool> { return self.drawTextsLayoutTopSide_property.prop }

  //····················································································································
  //   Atomic property: drawTextsLayoutBottomSide
  //····················································································································

  let drawTextsLayoutBottomSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawTextsLayoutBottomSide : Bool {
    get { return self.drawTextsLayoutBottomSide_property.propval }
    set { self.drawTextsLayoutBottomSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawTextsLayoutBottomSide_property_selection : EBSelection <Bool> { return self.drawTextsLayoutBottomSide_property.prop }

  //····················································································································
  //   Atomic property: drawTextsLegendTopSide
  //····················································································································

  let drawTextsLegendTopSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawTextsLegendTopSide : Bool {
    get { return self.drawTextsLegendTopSide_property.propval }
    set { self.drawTextsLegendTopSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawTextsLegendTopSide_property_selection : EBSelection <Bool> { return self.drawTextsLegendTopSide_property.prop }

  //····················································································································
  //   Atomic property: drawTextsLegendBottomSide
  //····················································································································

  let drawTextsLegendBottomSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawTextsLegendBottomSide : Bool {
    get { return self.drawTextsLegendBottomSide_property.propval }
    set { self.drawTextsLegendBottomSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawTextsLegendBottomSide_property_selection : EBSelection <Bool> { return self.drawTextsLegendBottomSide_property.prop }

  //····················································································································
  //   Atomic property: drawTracksTopSide
  //····················································································································

  let drawTracksTopSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawTracksTopSide : Bool {
    get { return self.drawTracksTopSide_property.propval }
    set { self.drawTracksTopSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawTracksTopSide_property_selection : EBSelection <Bool> { return self.drawTracksTopSide_property.prop }

  //····················································································································
  //   Atomic property: drawTracksBottomSide
  //····················································································································

  let drawTracksBottomSide_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawTracksBottomSide : Bool {
    get { return self.drawTracksBottomSide_property.propval }
    set { self.drawTracksBottomSide_property.setProp (newValue) }
  }

  //····················································································································

  var drawTracksBottomSide_property_selection : EBSelection <Bool> { return self.drawTracksBottomSide_property.prop }

  //····················································································································
  //   Atomic property: drawVias
  //····················································································································

  let drawVias_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var drawVias : Bool {
    get { return self.drawVias_property.propval }
    set { self.drawVias_property.setProp (newValue) }
  }

  //····················································································································

  var drawVias_property_selection : EBSelection <Bool> { return self.drawVias_property.prop }

  //····················································································································
  //   Atomic property: fileExtension
  //····················································································································

  let fileExtension_property = EBStoredProperty_String (defaultValue: "?")

  //····················································································································

  var fileExtension : String {
    get { return self.fileExtension_property.propval }
    set { self.fileExtension_property.setProp (newValue) }
  }

  //····················································································································

  var fileExtension_property_selection : EBSelection <String> { return self.fileExtension_property.prop }

  //····················································································································
  //   Atomic property: horizontalMirror
  //····················································································································

  let horizontalMirror_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var horizontalMirror : Bool {
    get { return self.horizontalMirror_property.propval }
    set { self.horizontalMirror_property.setProp (newValue) }
  }

  //····················································································································

  var horizontalMirror_property_selection : EBSelection <Bool> { return self.horizontalMirror_property.prop }

  //····················································································································
  //   Atomic property: name
  //····················································································································

  let name_property = EBStoredProperty_String (defaultValue: "Unnamed")

  //····················································································································

  var name : String {
    get { return self.name_property.propval }
    set { self.name_property.setProp (newValue) }
  }

  //····················································································································

  var name_property_selection : EBSelection <String> { return self.name_property.prop }

  //····················································································································
  //   Atomic property: measurementUnitForPadHoleInPDF
  //····················································································································

  let measurementUnitForPadHoleInPDF_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var measurementUnitForPadHoleInPDF : Int {
    get { return self.measurementUnitForPadHoleInPDF_property.propval }
    set { self.measurementUnitForPadHoleInPDF_property.setProp (newValue) }
  }

  //····················································································································

  var measurementUnitForPadHoleInPDF_property_selection : EBSelection <Int> { return self.measurementUnitForPadHoleInPDF_property.prop }

  //····················································································································
  //   Atomic property: padHoleDiameterInPDF
  //····················································································································

  let padHoleDiameterInPDF_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var padHoleDiameterInPDF : Int {
    get { return self.padHoleDiameterInPDF_property.propval }
    set { self.padHoleDiameterInPDF_property.setProp (newValue) }
  }

  //····················································································································

  var padHoleDiameterInPDF_property_selection : EBSelection <Int> { return self.padHoleDiameterInPDF_property.prop }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
    self.configureObject ()
  }
  
  //····················································································································

  private final func configureObject () {
  //--- Atomic property: drawBoardLimits
    self.drawBoardLimits_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawInternalBoardLimits
    self.drawInternalBoardLimits_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawComponentNamesTopSide
    self.drawComponentNamesTopSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawComponentNamesBottomSide
    self.drawComponentNamesBottomSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawComponentValuesTopSide
    self.drawComponentValuesTopSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawComponentValuesBottomSide
    self.drawComponentValuesBottomSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawPackageLegendTopSide
    self.drawPackageLegendTopSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawPackageLegendBottomSide
    self.drawPackageLegendBottomSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawPadHolesInPDF
    self.drawPadHolesInPDF_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawPadsTopSide
    self.drawPadsTopSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawPadsBottomSide
    self.drawPadsBottomSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawTextsLayoutTopSide
    self.drawTextsLayoutTopSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawTextsLayoutBottomSide
    self.drawTextsLayoutBottomSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawTextsLegendTopSide
    self.drawTextsLegendTopSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawTextsLegendBottomSide
    self.drawTextsLegendBottomSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawTracksTopSide
    self.drawTracksTopSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawTracksBottomSide
    self.drawTracksBottomSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: drawVias
    self.drawVias_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: fileExtension
    self.fileExtension_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: horizontalMirror
    self.horizontalMirror_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: name
    self.name_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: measurementUnitForPadHoleInPDF
    self.measurementUnitForPadHoleInPDF_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: padHoleDiameterInPDF
    self.padHoleDiameterInPDF_property.ebUndoManager = self.ebUndoManager
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.drawBoardLimits_property.setSignatureObserver (observer: self)
    self.drawComponentNamesBottomSide_property.setSignatureObserver (observer: self)
    self.drawComponentNamesTopSide_property.setSignatureObserver (observer: self)
    self.drawComponentValuesBottomSide_property.setSignatureObserver (observer: self)
    self.drawComponentValuesTopSide_property.setSignatureObserver (observer: self)
    self.drawInternalBoardLimits_property.setSignatureObserver (observer: self)
    self.drawPackageLegendBottomSide_property.setSignatureObserver (observer: self)
    self.drawPackageLegendTopSide_property.setSignatureObserver (observer: self)
    self.drawPadHolesInPDF_property.setSignatureObserver (observer: self)
    self.drawPadsBottomSide_property.setSignatureObserver (observer: self)
    self.drawPadsTopSide_property.setSignatureObserver (observer: self)
    self.drawTextsLayoutBottomSide_property.setSignatureObserver (observer: self)
    self.drawTextsLayoutTopSide_property.setSignatureObserver (observer: self)
    self.drawTextsLegendBottomSide_property.setSignatureObserver (observer: self)
    self.drawTextsLegendTopSide_property.setSignatureObserver (observer: self)
    self.drawTracksBottomSide_property.setSignatureObserver (observer: self)
    self.drawTracksTopSide_property.setSignatureObserver (observer: self)
    self.drawVias_property.setSignatureObserver (observer: self)
    self.fileExtension_property.setSignatureObserver (observer: self)
    self.horizontalMirror_property.setSignatureObserver (observer: self)
    self.measurementUnitForPadHoleInPDF_property.setSignatureObserver (observer: self)
    self.name_property.setSignatureObserver (observer: self)
    self.padHoleDiameterInPDF_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- Unregister properties for handling signature
    self.drawBoardLimits_property.setSignatureObserver (observer: nil)
    self.drawComponentNamesBottomSide_property.setSignatureObserver (observer: nil)
    self.drawComponentNamesTopSide_property.setSignatureObserver (observer: nil)
    self.drawComponentValuesBottomSide_property.setSignatureObserver (observer: nil)
    self.drawComponentValuesTopSide_property.setSignatureObserver (observer: nil)
    self.drawInternalBoardLimits_property.setSignatureObserver (observer: nil)
    self.drawPackageLegendBottomSide_property.setSignatureObserver (observer: nil)
    self.drawPackageLegendTopSide_property.setSignatureObserver (observer: nil)
    self.drawPadHolesInPDF_property.setSignatureObserver (observer: nil)
    self.drawPadsBottomSide_property.setSignatureObserver (observer: nil)
    self.drawPadsTopSide_property.setSignatureObserver (observer: nil)
    self.drawTextsLayoutBottomSide_property.setSignatureObserver (observer: nil)
    self.drawTextsLayoutTopSide_property.setSignatureObserver (observer: nil)
    self.drawTextsLegendBottomSide_property.setSignatureObserver (observer: nil)
    self.drawTextsLegendTopSide_property.setSignatureObserver (observer: nil)
    self.drawTracksBottomSide_property.setSignatureObserver (observer: nil)
    self.drawTracksTopSide_property.setSignatureObserver (observer: nil)
    self.drawVias_property.setSignatureObserver (observer: nil)
    self.fileExtension_property.setSignatureObserver (observer: nil)
    self.horizontalMirror_property.setSignatureObserver (observer: nil)
    self.measurementUnitForPadHoleInPDF_property.setSignatureObserver (observer: nil)
    self.name_property.setSignatureObserver (observer: nil)
    self.padHoleDiameterInPDF_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "drawBoardLimits",
      idx: self.drawBoardLimits_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawBoardLimits_property.mObserverExplorer,
      valueExplorer: &self.drawBoardLimits_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawInternalBoardLimits",
      idx: self.drawInternalBoardLimits_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawInternalBoardLimits_property.mObserverExplorer,
      valueExplorer: &self.drawInternalBoardLimits_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawComponentNamesTopSide",
      idx: self.drawComponentNamesTopSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawComponentNamesTopSide_property.mObserverExplorer,
      valueExplorer: &self.drawComponentNamesTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawComponentNamesBottomSide",
      idx: self.drawComponentNamesBottomSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawComponentNamesBottomSide_property.mObserverExplorer,
      valueExplorer: &self.drawComponentNamesBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawComponentValuesTopSide",
      idx: self.drawComponentValuesTopSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawComponentValuesTopSide_property.mObserverExplorer,
      valueExplorer: &self.drawComponentValuesTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawComponentValuesBottomSide",
      idx: self.drawComponentValuesBottomSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawComponentValuesBottomSide_property.mObserverExplorer,
      valueExplorer: &self.drawComponentValuesBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPackageLegendTopSide",
      idx: self.drawPackageLegendTopSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawPackageLegendTopSide_property.mObserverExplorer,
      valueExplorer: &self.drawPackageLegendTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPackageLegendBottomSide",
      idx: self.drawPackageLegendBottomSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawPackageLegendBottomSide_property.mObserverExplorer,
      valueExplorer: &self.drawPackageLegendBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPadHolesInPDF",
      idx: self.drawPadHolesInPDF_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawPadHolesInPDF_property.mObserverExplorer,
      valueExplorer: &self.drawPadHolesInPDF_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPadsTopSide",
      idx: self.drawPadsTopSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawPadsTopSide_property.mObserverExplorer,
      valueExplorer: &self.drawPadsTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPadsBottomSide",
      idx: self.drawPadsBottomSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawPadsBottomSide_property.mObserverExplorer,
      valueExplorer: &self.drawPadsBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTextsLayoutTopSide",
      idx: self.drawTextsLayoutTopSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawTextsLayoutTopSide_property.mObserverExplorer,
      valueExplorer: &self.drawTextsLayoutTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTextsLayoutBottomSide",
      idx: self.drawTextsLayoutBottomSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawTextsLayoutBottomSide_property.mObserverExplorer,
      valueExplorer: &self.drawTextsLayoutBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTextsLegendTopSide",
      idx: self.drawTextsLegendTopSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawTextsLegendTopSide_property.mObserverExplorer,
      valueExplorer: &self.drawTextsLegendTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTextsLegendBottomSide",
      idx: self.drawTextsLegendBottomSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawTextsLegendBottomSide_property.mObserverExplorer,
      valueExplorer: &self.drawTextsLegendBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTracksTopSide",
      idx: self.drawTracksTopSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawTracksTopSide_property.mObserverExplorer,
      valueExplorer: &self.drawTracksTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTracksBottomSide",
      idx: self.drawTracksBottomSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawTracksBottomSide_property.mObserverExplorer,
      valueExplorer: &self.drawTracksBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawVias",
      idx: self.drawVias_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.drawVias_property.mObserverExplorer,
      valueExplorer: &self.drawVias_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "fileExtension",
      idx: self.fileExtension_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.fileExtension_property.mObserverExplorer,
      valueExplorer: &self.fileExtension_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "horizontalMirror",
      idx: self.horizontalMirror_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.horizontalMirror_property.mObserverExplorer,
      valueExplorer: &self.horizontalMirror_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "name",
      idx: self.name_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.name_property.mObserverExplorer,
      valueExplorer: &self.name_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "measurementUnitForPadHoleInPDF",
      idx: self.measurementUnitForPadHoleInPDF_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.measurementUnitForPadHoleInPDF_property.mObserverExplorer,
      valueExplorer: &self.measurementUnitForPadHoleInPDF_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padHoleDiameterInPDF",
      idx: self.padHoleDiameterInPDF_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.padHoleDiameterInPDF_property.mObserverExplorer,
      valueExplorer: &self.padHoleDiameterInPDF_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: drawBoardLimits
    self.drawBoardLimits_property.mObserverExplorer = nil
    self.drawBoardLimits_property.mValueExplorer = nil
  //--- Atomic property: drawInternalBoardLimits
    self.drawInternalBoardLimits_property.mObserverExplorer = nil
    self.drawInternalBoardLimits_property.mValueExplorer = nil
  //--- Atomic property: drawComponentNamesTopSide
    self.drawComponentNamesTopSide_property.mObserverExplorer = nil
    self.drawComponentNamesTopSide_property.mValueExplorer = nil
  //--- Atomic property: drawComponentNamesBottomSide
    self.drawComponentNamesBottomSide_property.mObserverExplorer = nil
    self.drawComponentNamesBottomSide_property.mValueExplorer = nil
  //--- Atomic property: drawComponentValuesTopSide
    self.drawComponentValuesTopSide_property.mObserverExplorer = nil
    self.drawComponentValuesTopSide_property.mValueExplorer = nil
  //--- Atomic property: drawComponentValuesBottomSide
    self.drawComponentValuesBottomSide_property.mObserverExplorer = nil
    self.drawComponentValuesBottomSide_property.mValueExplorer = nil
  //--- Atomic property: drawPackageLegendTopSide
    self.drawPackageLegendTopSide_property.mObserverExplorer = nil
    self.drawPackageLegendTopSide_property.mValueExplorer = nil
  //--- Atomic property: drawPackageLegendBottomSide
    self.drawPackageLegendBottomSide_property.mObserverExplorer = nil
    self.drawPackageLegendBottomSide_property.mValueExplorer = nil
  //--- Atomic property: drawPadHolesInPDF
    self.drawPadHolesInPDF_property.mObserverExplorer = nil
    self.drawPadHolesInPDF_property.mValueExplorer = nil
  //--- Atomic property: drawPadsTopSide
    self.drawPadsTopSide_property.mObserverExplorer = nil
    self.drawPadsTopSide_property.mValueExplorer = nil
  //--- Atomic property: drawPadsBottomSide
    self.drawPadsBottomSide_property.mObserverExplorer = nil
    self.drawPadsBottomSide_property.mValueExplorer = nil
  //--- Atomic property: drawTextsLayoutTopSide
    self.drawTextsLayoutTopSide_property.mObserverExplorer = nil
    self.drawTextsLayoutTopSide_property.mValueExplorer = nil
  //--- Atomic property: drawTextsLayoutBottomSide
    self.drawTextsLayoutBottomSide_property.mObserverExplorer = nil
    self.drawTextsLayoutBottomSide_property.mValueExplorer = nil
  //--- Atomic property: drawTextsLegendTopSide
    self.drawTextsLegendTopSide_property.mObserverExplorer = nil
    self.drawTextsLegendTopSide_property.mValueExplorer = nil
  //--- Atomic property: drawTextsLegendBottomSide
    self.drawTextsLegendBottomSide_property.mObserverExplorer = nil
    self.drawTextsLegendBottomSide_property.mValueExplorer = nil
  //--- Atomic property: drawTracksTopSide
    self.drawTracksTopSide_property.mObserverExplorer = nil
    self.drawTracksTopSide_property.mValueExplorer = nil
  //--- Atomic property: drawTracksBottomSide
    self.drawTracksBottomSide_property.mObserverExplorer = nil
    self.drawTracksBottomSide_property.mValueExplorer = nil
  //--- Atomic property: drawVias
    self.drawVias_property.mObserverExplorer = nil
    self.drawVias_property.mValueExplorer = nil
  //--- Atomic property: fileExtension
    self.fileExtension_property.mObserverExplorer = nil
    self.fileExtension_property.mValueExplorer = nil
  //--- Atomic property: horizontalMirror
    self.horizontalMirror_property.mObserverExplorer = nil
    self.horizontalMirror_property.mValueExplorer = nil
  //--- Atomic property: name
    self.name_property.mObserverExplorer = nil
    self.name_property.mValueExplorer = nil
  //--- Atomic property: measurementUnitForPadHoleInPDF
    self.measurementUnitForPadHoleInPDF_property.mObserverExplorer = nil
    self.measurementUnitForPadHoleInPDF_property.mValueExplorer = nil
  //--- Atomic property: padHoleDiameterInPDF
    self.padHoleDiameterInPDF_property.mObserverExplorer = nil
    self.padHoleDiameterInPDF_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: drawBoardLimits
    self.drawBoardLimits_property.storeIn (dictionary: ioDictionary, forKey:"drawBoardLimits")
  //--- Atomic property: drawInternalBoardLimits
    self.drawInternalBoardLimits_property.storeIn (dictionary: ioDictionary, forKey:"drawInternalBoardLimits")
  //--- Atomic property: drawComponentNamesTopSide
    self.drawComponentNamesTopSide_property.storeIn (dictionary: ioDictionary, forKey:"drawComponentNamesTopSide")
  //--- Atomic property: drawComponentNamesBottomSide
    self.drawComponentNamesBottomSide_property.storeIn (dictionary: ioDictionary, forKey:"drawComponentNamesBottomSide")
  //--- Atomic property: drawComponentValuesTopSide
    self.drawComponentValuesTopSide_property.storeIn (dictionary: ioDictionary, forKey:"drawComponentValuesTopSide")
  //--- Atomic property: drawComponentValuesBottomSide
    self.drawComponentValuesBottomSide_property.storeIn (dictionary: ioDictionary, forKey:"drawComponentValuesBottomSide")
  //--- Atomic property: drawPackageLegendTopSide
    self.drawPackageLegendTopSide_property.storeIn (dictionary: ioDictionary, forKey:"drawPackageLegendTopSide")
  //--- Atomic property: drawPackageLegendBottomSide
    self.drawPackageLegendBottomSide_property.storeIn (dictionary: ioDictionary, forKey:"drawPackageLegendBottomSide")
  //--- Atomic property: drawPadHolesInPDF
    self.drawPadHolesInPDF_property.storeIn (dictionary: ioDictionary, forKey:"drawPadHolesInPDF")
  //--- Atomic property: drawPadsTopSide
    self.drawPadsTopSide_property.storeIn (dictionary: ioDictionary, forKey:"drawPadsTopSide")
  //--- Atomic property: drawPadsBottomSide
    self.drawPadsBottomSide_property.storeIn (dictionary: ioDictionary, forKey:"drawPadsBottomSide")
  //--- Atomic property: drawTextsLayoutTopSide
    self.drawTextsLayoutTopSide_property.storeIn (dictionary: ioDictionary, forKey:"drawTextsLayoutTopSide")
  //--- Atomic property: drawTextsLayoutBottomSide
    self.drawTextsLayoutBottomSide_property.storeIn (dictionary: ioDictionary, forKey:"drawTextsLayoutBottomSide")
  //--- Atomic property: drawTextsLegendTopSide
    self.drawTextsLegendTopSide_property.storeIn (dictionary: ioDictionary, forKey:"drawTextsLegendTopSide")
  //--- Atomic property: drawTextsLegendBottomSide
    self.drawTextsLegendBottomSide_property.storeIn (dictionary: ioDictionary, forKey:"drawTextsLegendBottomSide")
  //--- Atomic property: drawTracksTopSide
    self.drawTracksTopSide_property.storeIn (dictionary: ioDictionary, forKey:"drawTracksTopSide")
  //--- Atomic property: drawTracksBottomSide
    self.drawTracksBottomSide_property.storeIn (dictionary: ioDictionary, forKey:"drawTracksBottomSide")
  //--- Atomic property: drawVias
    self.drawVias_property.storeIn (dictionary: ioDictionary, forKey:"drawVias")
  //--- Atomic property: fileExtension
    self.fileExtension_property.storeIn (dictionary: ioDictionary, forKey:"fileExtension")
  //--- Atomic property: horizontalMirror
    self.horizontalMirror_property.storeIn (dictionary: ioDictionary, forKey:"horizontalMirror")
  //--- Atomic property: name
    self.name_property.storeIn (dictionary: ioDictionary, forKey:"name")
  //--- Atomic property: measurementUnitForPadHoleInPDF
    self.measurementUnitForPadHoleInPDF_property.storeIn (dictionary: ioDictionary, forKey:"measurementUnitForPadHoleInPDF")
  //--- Atomic property: padHoleDiameterInPDF
    self.padHoleDiameterInPDF_property.storeIn (dictionary: ioDictionary, forKey:"padHoleDiameterInPDF")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: drawBoardLimits
    self.drawBoardLimits_property.readFrom (dictionary: inDictionary, forKey:"drawBoardLimits")
  //--- Atomic property: drawInternalBoardLimits
    self.drawInternalBoardLimits_property.readFrom (dictionary: inDictionary, forKey:"drawInternalBoardLimits")
  //--- Atomic property: drawComponentNamesTopSide
    self.drawComponentNamesTopSide_property.readFrom (dictionary: inDictionary, forKey:"drawComponentNamesTopSide")
  //--- Atomic property: drawComponentNamesBottomSide
    self.drawComponentNamesBottomSide_property.readFrom (dictionary: inDictionary, forKey:"drawComponentNamesBottomSide")
  //--- Atomic property: drawComponentValuesTopSide
    self.drawComponentValuesTopSide_property.readFrom (dictionary: inDictionary, forKey:"drawComponentValuesTopSide")
  //--- Atomic property: drawComponentValuesBottomSide
    self.drawComponentValuesBottomSide_property.readFrom (dictionary: inDictionary, forKey:"drawComponentValuesBottomSide")
  //--- Atomic property: drawPackageLegendTopSide
    self.drawPackageLegendTopSide_property.readFrom (dictionary: inDictionary, forKey:"drawPackageLegendTopSide")
  //--- Atomic property: drawPackageLegendBottomSide
    self.drawPackageLegendBottomSide_property.readFrom (dictionary: inDictionary, forKey:"drawPackageLegendBottomSide")
  //--- Atomic property: drawPadHolesInPDF
    self.drawPadHolesInPDF_property.readFrom (dictionary: inDictionary, forKey:"drawPadHolesInPDF")
  //--- Atomic property: drawPadsTopSide
    self.drawPadsTopSide_property.readFrom (dictionary: inDictionary, forKey:"drawPadsTopSide")
  //--- Atomic property: drawPadsBottomSide
    self.drawPadsBottomSide_property.readFrom (dictionary: inDictionary, forKey:"drawPadsBottomSide")
  //--- Atomic property: drawTextsLayoutTopSide
    self.drawTextsLayoutTopSide_property.readFrom (dictionary: inDictionary, forKey:"drawTextsLayoutTopSide")
  //--- Atomic property: drawTextsLayoutBottomSide
    self.drawTextsLayoutBottomSide_property.readFrom (dictionary: inDictionary, forKey:"drawTextsLayoutBottomSide")
  //--- Atomic property: drawTextsLegendTopSide
    self.drawTextsLegendTopSide_property.readFrom (dictionary: inDictionary, forKey:"drawTextsLegendTopSide")
  //--- Atomic property: drawTextsLegendBottomSide
    self.drawTextsLegendBottomSide_property.readFrom (dictionary: inDictionary, forKey:"drawTextsLegendBottomSide")
  //--- Atomic property: drawTracksTopSide
    self.drawTracksTopSide_property.readFrom (dictionary: inDictionary, forKey:"drawTracksTopSide")
  //--- Atomic property: drawTracksBottomSide
    self.drawTracksBottomSide_property.readFrom (dictionary: inDictionary, forKey:"drawTracksBottomSide")
  //--- Atomic property: drawVias
    self.drawVias_property.readFrom (dictionary: inDictionary, forKey:"drawVias")
  //--- Atomic property: fileExtension
    self.fileExtension_property.readFrom (dictionary: inDictionary, forKey:"fileExtension")
  //--- Atomic property: horizontalMirror
    self.horizontalMirror_property.readFrom (dictionary: inDictionary, forKey:"horizontalMirror")
  //--- Atomic property: name
    self.name_property.readFrom (dictionary: inDictionary, forKey:"name")
  //--- Atomic property: measurementUnitForPadHoleInPDF
    self.measurementUnitForPadHoleInPDF_property.readFrom (dictionary: inDictionary, forKey:"measurementUnitForPadHoleInPDF")
  //--- Atomic property: padHoleDiameterInPDF
    self.padHoleDiameterInPDF_property.readFrom (dictionary: inDictionary, forKey:"padHoleDiameterInPDF")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "drawBoardLimits\n"
    ioString += "drawInternalBoardLimits\n"
    ioString += "drawComponentNamesTopSide\n"
    ioString += "drawComponentNamesBottomSide\n"
    ioString += "drawComponentValuesTopSide\n"
    ioString += "drawComponentValuesBottomSide\n"
    ioString += "drawPackageLegendTopSide\n"
    ioString += "drawPackageLegendBottomSide\n"
    ioString += "drawPadHolesInPDF\n"
    ioString += "drawPadsTopSide\n"
    ioString += "drawPadsBottomSide\n"
    ioString += "drawTextsLayoutTopSide\n"
    ioString += "drawTextsLayoutBottomSide\n"
    ioString += "drawTextsLegendTopSide\n"
    ioString += "drawTextsLegendBottomSide\n"
    ioString += "drawTracksTopSide\n"
    ioString += "drawTracksBottomSide\n"
    ioString += "drawVias\n"
    ioString += "fileExtension\n"
    ioString += "horizontalMirror\n"
    ioString += "name\n"
    ioString += "measurementUnitForPadHoleInPDF\n"
    ioString += "padHoleDiameterInPDF\n"
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioString : inout String) {
    super.appendPropertyValuesTo (&ioString)
  //--- Atomic properties
    ioString += self.drawBoardLimits.stringPropertyValue ()
    ioString += self.drawInternalBoardLimits.stringPropertyValue ()
    ioString += self.drawComponentNamesTopSide.stringPropertyValue ()
    ioString += self.drawComponentNamesBottomSide.stringPropertyValue ()
    ioString += self.drawComponentValuesTopSide.stringPropertyValue ()
    ioString += self.drawComponentValuesBottomSide.stringPropertyValue ()
    ioString += self.drawPackageLegendTopSide.stringPropertyValue ()
    ioString += self.drawPackageLegendBottomSide.stringPropertyValue ()
    ioString += self.drawPadHolesInPDF.stringPropertyValue ()
    ioString += self.drawPadsTopSide.stringPropertyValue ()
    ioString += self.drawPadsBottomSide.stringPropertyValue ()
    ioString += self.drawTextsLayoutTopSide.stringPropertyValue ()
    ioString += self.drawTextsLayoutBottomSide.stringPropertyValue ()
    ioString += self.drawTextsLegendTopSide.stringPropertyValue ()
    ioString += self.drawTextsLegendBottomSide.stringPropertyValue ()
    ioString += self.drawTracksTopSide.stringPropertyValue ()
    ioString += self.drawTracksBottomSide.stringPropertyValue ()
    ioString += self.drawVias.stringPropertyValue ()
    ioString += self.fileExtension.stringPropertyValue ()
    ioString += self.horizontalMirror.stringPropertyValue ()
    ioString += self.name.stringPropertyValue ()
    ioString += self.measurementUnitForPadHoleInPDF.stringPropertyValue ()
    ioString += self.padHoleDiameterInPDF.stringPropertyValue ()
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.drawBoardLimits_property.signature ())
    crc.accumulateUInt32 (self.drawComponentNamesBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawComponentNamesTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawComponentValuesBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawComponentValuesTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawInternalBoardLimits_property.signature ())
    crc.accumulateUInt32 (self.drawPackageLegendBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawPackageLegendTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawPadHolesInPDF_property.signature ())
    crc.accumulateUInt32 (self.drawPadsBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawPadsTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawTextsLayoutBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawTextsLayoutTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawTextsLegendBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawTextsLegendTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawTracksBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawTracksTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawVias_property.signature ())
    crc.accumulateUInt32 (self.fileExtension_property.signature ())
    crc.accumulateUInt32 (self.horizontalMirror_property.signature ())
    crc.accumulateUInt32 (self.measurementUnitForPadHoleInPDF_property.signature ())
    crc.accumulateUInt32 (self.name_property.signature ())
    crc.accumulateUInt32 (self.padHoleDiameterInPDF_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

