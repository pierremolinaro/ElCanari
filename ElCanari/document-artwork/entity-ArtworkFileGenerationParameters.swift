//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ArtworkFileGenerationParameters : EBManagedObject,
  ArtworkFileGenerationParameters_drawBoardLimits,
  ArtworkFileGenerationParameters_drawInternalBoardLimits,
  ArtworkFileGenerationParameters_drawComponentNamesTopSide,
  ArtworkFileGenerationParameters_drawComponentNamesBottomSide,
  ArtworkFileGenerationParameters_drawComponentValuesTopSide,
  ArtworkFileGenerationParameters_drawComponentValuesBottomSide,
  ArtworkFileGenerationParameters_drawPackageLegendTopSide,
  ArtworkFileGenerationParameters_drawPackageLegendBottomSide,
  ArtworkFileGenerationParameters_drawPadHolesInPDF,
  ArtworkFileGenerationParameters_drawPadsTopSide,
  ArtworkFileGenerationParameters_drawPadsBottomSide,
  ArtworkFileGenerationParameters_drawTextsLayoutTopSide,
  ArtworkFileGenerationParameters_drawTextsLayoutBottomSide,
  ArtworkFileGenerationParameters_drawTextsLegendTopSide,
  ArtworkFileGenerationParameters_drawTextsLegendBottomSide,
  ArtworkFileGenerationParameters_drawTracksTopSide,
  ArtworkFileGenerationParameters_drawTracksBottomSide,
  ArtworkFileGenerationParameters_drawVias,
  ArtworkFileGenerationParameters_fileExtension,
  ArtworkFileGenerationParameters_horizontalMirror,
  ArtworkFileGenerationParameters_name,
  ArtworkFileGenerationParameters_measurementUnitForPadHoleInPDF,
  ArtworkFileGenerationParameters_padHoleDiameterInPDF {

  //····················································································································
  //   Accessing drawBoardLimits stored property
  //····················································································································

  var drawBoardLimits : Bool {
    get {
      return self.drawBoardLimits_property.propval
    }
    set {
      self.drawBoardLimits_property.setProp (newValue)
    }
  }

  var drawBoardLimits_property_selection : EBSelection <Bool> {
    get {
      return self.drawBoardLimits_property.prop
    }
  }

  //····················································································································
  //   Accessing drawInternalBoardLimits stored property
  //····················································································································

  var drawInternalBoardLimits : Bool {
    get {
      return self.drawInternalBoardLimits_property.propval
    }
    set {
      self.drawInternalBoardLimits_property.setProp (newValue)
    }
  }

  var drawInternalBoardLimits_property_selection : EBSelection <Bool> {
    get {
      return self.drawInternalBoardLimits_property.prop
    }
  }

  //····················································································································
  //   Accessing drawComponentNamesTopSide stored property
  //····················································································································

  var drawComponentNamesTopSide : Bool {
    get {
      return self.drawComponentNamesTopSide_property.propval
    }
    set {
      self.drawComponentNamesTopSide_property.setProp (newValue)
    }
  }

  var drawComponentNamesTopSide_property_selection : EBSelection <Bool> {
    get {
      return self.drawComponentNamesTopSide_property.prop
    }
  }

  //····················································································································
  //   Accessing drawComponentNamesBottomSide stored property
  //····················································································································

  var drawComponentNamesBottomSide : Bool {
    get {
      return self.drawComponentNamesBottomSide_property.propval
    }
    set {
      self.drawComponentNamesBottomSide_property.setProp (newValue)
    }
  }

  var drawComponentNamesBottomSide_property_selection : EBSelection <Bool> {
    get {
      return self.drawComponentNamesBottomSide_property.prop
    }
  }

  //····················································································································
  //   Accessing drawComponentValuesTopSide stored property
  //····················································································································

  var drawComponentValuesTopSide : Bool {
    get {
      return self.drawComponentValuesTopSide_property.propval
    }
    set {
      self.drawComponentValuesTopSide_property.setProp (newValue)
    }
  }

  var drawComponentValuesTopSide_property_selection : EBSelection <Bool> {
    get {
      return self.drawComponentValuesTopSide_property.prop
    }
  }

  //····················································································································
  //   Accessing drawComponentValuesBottomSide stored property
  //····················································································································

  var drawComponentValuesBottomSide : Bool {
    get {
      return self.drawComponentValuesBottomSide_property.propval
    }
    set {
      self.drawComponentValuesBottomSide_property.setProp (newValue)
    }
  }

  var drawComponentValuesBottomSide_property_selection : EBSelection <Bool> {
    get {
      return self.drawComponentValuesBottomSide_property.prop
    }
  }

  //····················································································································
  //   Accessing drawPackageLegendTopSide stored property
  //····················································································································

  var drawPackageLegendTopSide : Bool {
    get {
      return self.drawPackageLegendTopSide_property.propval
    }
    set {
      self.drawPackageLegendTopSide_property.setProp (newValue)
    }
  }

  var drawPackageLegendTopSide_property_selection : EBSelection <Bool> {
    get {
      return self.drawPackageLegendTopSide_property.prop
    }
  }

  //····················································································································
  //   Accessing drawPackageLegendBottomSide stored property
  //····················································································································

  var drawPackageLegendBottomSide : Bool {
    get {
      return self.drawPackageLegendBottomSide_property.propval
    }
    set {
      self.drawPackageLegendBottomSide_property.setProp (newValue)
    }
  }

  var drawPackageLegendBottomSide_property_selection : EBSelection <Bool> {
    get {
      return self.drawPackageLegendBottomSide_property.prop
    }
  }

  //····················································································································
  //   Accessing drawPadHolesInPDF stored property
  //····················································································································

  var drawPadHolesInPDF : Bool {
    get {
      return self.drawPadHolesInPDF_property.propval
    }
    set {
      self.drawPadHolesInPDF_property.setProp (newValue)
    }
  }

  var drawPadHolesInPDF_property_selection : EBSelection <Bool> {
    get {
      return self.drawPadHolesInPDF_property.prop
    }
  }

  //····················································································································
  //   Accessing drawPadsTopSide stored property
  //····················································································································

  var drawPadsTopSide : Bool {
    get {
      return self.drawPadsTopSide_property.propval
    }
    set {
      self.drawPadsTopSide_property.setProp (newValue)
    }
  }

  var drawPadsTopSide_property_selection : EBSelection <Bool> {
    get {
      return self.drawPadsTopSide_property.prop
    }
  }

  //····················································································································
  //   Accessing drawPadsBottomSide stored property
  //····················································································································

  var drawPadsBottomSide : Bool {
    get {
      return self.drawPadsBottomSide_property.propval
    }
    set {
      self.drawPadsBottomSide_property.setProp (newValue)
    }
  }

  var drawPadsBottomSide_property_selection : EBSelection <Bool> {
    get {
      return self.drawPadsBottomSide_property.prop
    }
  }

  //····················································································································
  //   Accessing drawTextsLayoutTopSide stored property
  //····················································································································

  var drawTextsLayoutTopSide : Bool {
    get {
      return self.drawTextsLayoutTopSide_property.propval
    }
    set {
      self.drawTextsLayoutTopSide_property.setProp (newValue)
    }
  }

  var drawTextsLayoutTopSide_property_selection : EBSelection <Bool> {
    get {
      return self.drawTextsLayoutTopSide_property.prop
    }
  }

  //····················································································································
  //   Accessing drawTextsLayoutBottomSide stored property
  //····················································································································

  var drawTextsLayoutBottomSide : Bool {
    get {
      return self.drawTextsLayoutBottomSide_property.propval
    }
    set {
      self.drawTextsLayoutBottomSide_property.setProp (newValue)
    }
  }

  var drawTextsLayoutBottomSide_property_selection : EBSelection <Bool> {
    get {
      return self.drawTextsLayoutBottomSide_property.prop
    }
  }

  //····················································································································
  //   Accessing drawTextsLegendTopSide stored property
  //····················································································································

  var drawTextsLegendTopSide : Bool {
    get {
      return self.drawTextsLegendTopSide_property.propval
    }
    set {
      self.drawTextsLegendTopSide_property.setProp (newValue)
    }
  }

  var drawTextsLegendTopSide_property_selection : EBSelection <Bool> {
    get {
      return self.drawTextsLegendTopSide_property.prop
    }
  }

  //····················································································································
  //   Accessing drawTextsLegendBottomSide stored property
  //····················································································································

  var drawTextsLegendBottomSide : Bool {
    get {
      return self.drawTextsLegendBottomSide_property.propval
    }
    set {
      self.drawTextsLegendBottomSide_property.setProp (newValue)
    }
  }

  var drawTextsLegendBottomSide_property_selection : EBSelection <Bool> {
    get {
      return self.drawTextsLegendBottomSide_property.prop
    }
  }

  //····················································································································
  //   Accessing drawTracksTopSide stored property
  //····················································································································

  var drawTracksTopSide : Bool {
    get {
      return self.drawTracksTopSide_property.propval
    }
    set {
      self.drawTracksTopSide_property.setProp (newValue)
    }
  }

  var drawTracksTopSide_property_selection : EBSelection <Bool> {
    get {
      return self.drawTracksTopSide_property.prop
    }
  }

  //····················································································································
  //   Accessing drawTracksBottomSide stored property
  //····················································································································

  var drawTracksBottomSide : Bool {
    get {
      return self.drawTracksBottomSide_property.propval
    }
    set {
      self.drawTracksBottomSide_property.setProp (newValue)
    }
  }

  var drawTracksBottomSide_property_selection : EBSelection <Bool> {
    get {
      return self.drawTracksBottomSide_property.prop
    }
  }

  //····················································································································
  //   Accessing drawVias stored property
  //····················································································································

  var drawVias : Bool {
    get {
      return self.drawVias_property.propval
    }
    set {
      self.drawVias_property.setProp (newValue)
    }
  }

  var drawVias_property_selection : EBSelection <Bool> {
    get {
      return self.drawVias_property.prop
    }
  }

  //····················································································································
  //   Accessing fileExtension stored property
  //····················································································································

  var fileExtension : String {
    get {
      return self.fileExtension_property.propval
    }
    set {
      self.fileExtension_property.setProp (newValue)
    }
  }

  var fileExtension_property_selection : EBSelection <String> {
    get {
      return self.fileExtension_property.prop
    }
  }

  //····················································································································
  //   Accessing horizontalMirror stored property
  //····················································································································

  var horizontalMirror : Bool {
    get {
      return self.horizontalMirror_property.propval
    }
    set {
      self.horizontalMirror_property.setProp (newValue)
    }
  }

  var horizontalMirror_property_selection : EBSelection <Bool> {
    get {
      return self.horizontalMirror_property.prop
    }
  }

  //····················································································································
  //   Accessing name stored property
  //····················································································································

  var name : String {
    get {
      return self.name_property.propval
    }
    set {
      self.name_property.setProp (newValue)
    }
  }

  var name_property_selection : EBSelection <String> {
    get {
      return self.name_property.prop
    }
  }

  //····················································································································
  //   Accessing measurementUnitForPadHoleInPDF stored property
  //····················································································································

  var measurementUnitForPadHoleInPDF : Int {
    get {
      return self.measurementUnitForPadHoleInPDF_property.propval
    }
    set {
      self.measurementUnitForPadHoleInPDF_property.setProp (newValue)
    }
  }

  var measurementUnitForPadHoleInPDF_property_selection : EBSelection <Int> {
    get {
      return self.measurementUnitForPadHoleInPDF_property.prop
    }
  }

  //····················································································································
  //   Accessing padHoleDiameterInPDF stored property
  //····················································································································

  var padHoleDiameterInPDF : Int {
    get {
      return self.padHoleDiameterInPDF_property.propval
    }
    set {
      self.padHoleDiameterInPDF_property.setProp (newValue)
    }
  }

  var padHoleDiameterInPDF_property_selection : EBSelection <Int> {
    get {
      return self.padHoleDiameterInPDF_property.prop
    }
  }

  //····················································································································
  //    Stored Properties
  //····················································································································

  var drawBoardLimits_property = EBStoredProperty_Bool (false)
  var drawInternalBoardLimits_property = EBStoredProperty_Bool (false)
  var drawComponentNamesTopSide_property = EBStoredProperty_Bool (false)
  var drawComponentNamesBottomSide_property = EBStoredProperty_Bool (false)
  var drawComponentValuesTopSide_property = EBStoredProperty_Bool (false)
  var drawComponentValuesBottomSide_property = EBStoredProperty_Bool (false)
  var drawPackageLegendTopSide_property = EBStoredProperty_Bool (false)
  var drawPackageLegendBottomSide_property = EBStoredProperty_Bool (false)
  var drawPadHolesInPDF_property = EBStoredProperty_Bool (false)
  var drawPadsTopSide_property = EBStoredProperty_Bool (false)
  var drawPadsBottomSide_property = EBStoredProperty_Bool (false)
  var drawTextsLayoutTopSide_property = EBStoredProperty_Bool (false)
  var drawTextsLayoutBottomSide_property = EBStoredProperty_Bool (false)
  var drawTextsLegendTopSide_property = EBStoredProperty_Bool (false)
  var drawTextsLegendBottomSide_property = EBStoredProperty_Bool (false)
  var drawTracksTopSide_property = EBStoredProperty_Bool (false)
  var drawTracksBottomSide_property = EBStoredProperty_Bool (false)
  var drawVias_property = EBStoredProperty_Bool (false)
  var fileExtension_property = EBStoredProperty_String ("?")
  var horizontalMirror_property = EBStoredProperty_Bool (false)
  var name_property = EBStoredProperty_String ("Unnamed")
  var measurementUnitForPadHoleInPDF_property = EBStoredProperty_Int (90000)
  var padHoleDiameterInPDF_property = EBStoredProperty_Int (90000)

  //····················································································································
  //    Transient properties
  //····················································································································


  //····················································································································
  //    Relationships
  //····················································································································


  //····················································································································
  //    init
  //····················································································································

  override init (managedObjectContext : EBManagedObjectContext) {
    super.init (managedObjectContext:managedObjectContext)
  //--- Install compute functions for transients
  //--- Install property observers for transients
  //--- Install undoers for properties
    self.drawBoardLimits_property.undoManager = self.undoManager ()
    self.drawInternalBoardLimits_property.undoManager = self.undoManager ()
    self.drawComponentNamesTopSide_property.undoManager = self.undoManager ()
    self.drawComponentNamesBottomSide_property.undoManager = self.undoManager ()
    self.drawComponentValuesTopSide_property.undoManager = self.undoManager ()
    self.drawComponentValuesBottomSide_property.undoManager = self.undoManager ()
    self.drawPackageLegendTopSide_property.undoManager = self.undoManager ()
    self.drawPackageLegendBottomSide_property.undoManager = self.undoManager ()
    self.drawPadHolesInPDF_property.undoManager = self.undoManager ()
    self.drawPadsTopSide_property.undoManager = self.undoManager ()
    self.drawPadsBottomSide_property.undoManager = self.undoManager ()
    self.drawTextsLayoutTopSide_property.undoManager = self.undoManager ()
    self.drawTextsLayoutBottomSide_property.undoManager = self.undoManager ()
    self.drawTextsLegendTopSide_property.undoManager = self.undoManager ()
    self.drawTextsLegendBottomSide_property.undoManager = self.undoManager ()
    self.drawTracksTopSide_property.undoManager = self.undoManager ()
    self.drawTracksBottomSide_property.undoManager = self.undoManager ()
    self.drawVias_property.undoManager = self.undoManager ()
    self.fileExtension_property.undoManager = self.undoManager ()
    self.horizontalMirror_property.undoManager = self.undoManager ()
    self.name_property.undoManager = self.undoManager ()
    self.measurementUnitForPadHoleInPDF_property.undoManager = self.undoManager ()
    self.padHoleDiameterInPDF_property.undoManager = self.undoManager ()
  //--- Install undoers and opposite setter for relationships
  //--- register properties for handling signature
    self.drawBoardLimits_property.setSignatureObserver (observer:self)
    self.drawComponentNamesBottomSide_property.setSignatureObserver (observer:self)
    self.drawComponentNamesTopSide_property.setSignatureObserver (observer:self)
    self.drawComponentValuesBottomSide_property.setSignatureObserver (observer:self)
    self.drawComponentValuesTopSide_property.setSignatureObserver (observer:self)
    self.drawInternalBoardLimits_property.setSignatureObserver (observer:self)
    self.drawPackageLegendBottomSide_property.setSignatureObserver (observer:self)
    self.drawPackageLegendTopSide_property.setSignatureObserver (observer:self)
    self.drawPadHolesInPDF_property.setSignatureObserver (observer:self)
    self.drawPadsBottomSide_property.setSignatureObserver (observer:self)
    self.drawPadsTopSide_property.setSignatureObserver (observer:self)
    self.drawTextsLayoutBottomSide_property.setSignatureObserver (observer:self)
    self.drawTextsLayoutTopSide_property.setSignatureObserver (observer:self)
    self.drawTextsLegendBottomSide_property.setSignatureObserver (observer:self)
    self.drawTextsLegendTopSide_property.setSignatureObserver (observer:self)
    self.drawTracksBottomSide_property.setSignatureObserver (observer:self)
    self.drawTracksTopSide_property.setSignatureObserver (observer:self)
    self.drawVias_property.setSignatureObserver (observer:self)
    self.fileExtension_property.setSignatureObserver (observer:self)
    self.horizontalMirror_property.setSignatureObserver (observer:self)
    self.measurementUnitForPadHoleInPDF_property.setSignatureObserver (observer:self)
    self.name_property.setSignatureObserver (observer:self)
    self.padHoleDiameterInPDF_property.setSignatureObserver (observer:self)
  }

  //····················································································································

  deinit {
  //--- Remove observers
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "drawBoardLimits",
      idx:self.drawBoardLimits_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawBoardLimits_property.mObserverExplorer,
      valueExplorer:&self.drawBoardLimits_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawInternalBoardLimits",
      idx:self.drawInternalBoardLimits_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawInternalBoardLimits_property.mObserverExplorer,
      valueExplorer:&self.drawInternalBoardLimits_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawComponentNamesTopSide",
      idx:self.drawComponentNamesTopSide_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawComponentNamesTopSide_property.mObserverExplorer,
      valueExplorer:&self.drawComponentNamesTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawComponentNamesBottomSide",
      idx:self.drawComponentNamesBottomSide_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawComponentNamesBottomSide_property.mObserverExplorer,
      valueExplorer:&self.drawComponentNamesBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawComponentValuesTopSide",
      idx:self.drawComponentValuesTopSide_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawComponentValuesTopSide_property.mObserverExplorer,
      valueExplorer:&self.drawComponentValuesTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawComponentValuesBottomSide",
      idx:self.drawComponentValuesBottomSide_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawComponentValuesBottomSide_property.mObserverExplorer,
      valueExplorer:&self.drawComponentValuesBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPackageLegendTopSide",
      idx:self.drawPackageLegendTopSide_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawPackageLegendTopSide_property.mObserverExplorer,
      valueExplorer:&self.drawPackageLegendTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPackageLegendBottomSide",
      idx:self.drawPackageLegendBottomSide_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawPackageLegendBottomSide_property.mObserverExplorer,
      valueExplorer:&self.drawPackageLegendBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPadHolesInPDF",
      idx:self.drawPadHolesInPDF_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawPadHolesInPDF_property.mObserverExplorer,
      valueExplorer:&self.drawPadHolesInPDF_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPadsTopSide",
      idx:self.drawPadsTopSide_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawPadsTopSide_property.mObserverExplorer,
      valueExplorer:&self.drawPadsTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawPadsBottomSide",
      idx:self.drawPadsBottomSide_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawPadsBottomSide_property.mObserverExplorer,
      valueExplorer:&self.drawPadsBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTextsLayoutTopSide",
      idx:self.drawTextsLayoutTopSide_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawTextsLayoutTopSide_property.mObserverExplorer,
      valueExplorer:&self.drawTextsLayoutTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTextsLayoutBottomSide",
      idx:self.drawTextsLayoutBottomSide_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawTextsLayoutBottomSide_property.mObserverExplorer,
      valueExplorer:&self.drawTextsLayoutBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTextsLegendTopSide",
      idx:self.drawTextsLegendTopSide_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawTextsLegendTopSide_property.mObserverExplorer,
      valueExplorer:&self.drawTextsLegendTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTextsLegendBottomSide",
      idx:self.drawTextsLegendBottomSide_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawTextsLegendBottomSide_property.mObserverExplorer,
      valueExplorer:&self.drawTextsLegendBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTracksTopSide",
      idx:self.drawTracksTopSide_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawTracksTopSide_property.mObserverExplorer,
      valueExplorer:&self.drawTracksTopSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawTracksBottomSide",
      idx:self.drawTracksBottomSide_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawTracksBottomSide_property.mObserverExplorer,
      valueExplorer:&self.drawTracksBottomSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "drawVias",
      idx:self.drawVias_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.drawVias_property.mObserverExplorer,
      valueExplorer:&self.drawVias_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "fileExtension",
      idx:self.fileExtension_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.fileExtension_property.mObserverExplorer,
      valueExplorer:&self.fileExtension_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "horizontalMirror",
      idx:self.horizontalMirror_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.horizontalMirror_property.mObserverExplorer,
      valueExplorer:&self.horizontalMirror_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "name",
      idx:self.name_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.name_property.mObserverExplorer,
      valueExplorer:&self.name_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "measurementUnitForPadHoleInPDF",
      idx:self.measurementUnitForPadHoleInPDF_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.measurementUnitForPadHoleInPDF_property.mObserverExplorer,
      valueExplorer:&self.measurementUnitForPadHoleInPDF_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padHoleDiameterInPDF",
      idx:self.padHoleDiameterInPDF_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padHoleDiameterInPDF_property.mObserverExplorer,
      valueExplorer:&self.padHoleDiameterInPDF_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
    self.drawBoardLimits_property.mObserverExplorer = nil
    self.drawBoardLimits_property.mValueExplorer = nil
    self.drawInternalBoardLimits_property.mObserverExplorer = nil
    self.drawInternalBoardLimits_property.mValueExplorer = nil
    self.drawComponentNamesTopSide_property.mObserverExplorer = nil
    self.drawComponentNamesTopSide_property.mValueExplorer = nil
    self.drawComponentNamesBottomSide_property.mObserverExplorer = nil
    self.drawComponentNamesBottomSide_property.mValueExplorer = nil
    self.drawComponentValuesTopSide_property.mObserverExplorer = nil
    self.drawComponentValuesTopSide_property.mValueExplorer = nil
    self.drawComponentValuesBottomSide_property.mObserverExplorer = nil
    self.drawComponentValuesBottomSide_property.mValueExplorer = nil
    self.drawPackageLegendTopSide_property.mObserverExplorer = nil
    self.drawPackageLegendTopSide_property.mValueExplorer = nil
    self.drawPackageLegendBottomSide_property.mObserverExplorer = nil
    self.drawPackageLegendBottomSide_property.mValueExplorer = nil
    self.drawPadHolesInPDF_property.mObserverExplorer = nil
    self.drawPadHolesInPDF_property.mValueExplorer = nil
    self.drawPadsTopSide_property.mObserverExplorer = nil
    self.drawPadsTopSide_property.mValueExplorer = nil
    self.drawPadsBottomSide_property.mObserverExplorer = nil
    self.drawPadsBottomSide_property.mValueExplorer = nil
    self.drawTextsLayoutTopSide_property.mObserverExplorer = nil
    self.drawTextsLayoutTopSide_property.mValueExplorer = nil
    self.drawTextsLayoutBottomSide_property.mObserverExplorer = nil
    self.drawTextsLayoutBottomSide_property.mValueExplorer = nil
    self.drawTextsLegendTopSide_property.mObserverExplorer = nil
    self.drawTextsLegendTopSide_property.mValueExplorer = nil
    self.drawTextsLegendBottomSide_property.mObserverExplorer = nil
    self.drawTextsLegendBottomSide_property.mValueExplorer = nil
    self.drawTracksTopSide_property.mObserverExplorer = nil
    self.drawTracksTopSide_property.mValueExplorer = nil
    self.drawTracksBottomSide_property.mObserverExplorer = nil
    self.drawTracksBottomSide_property.mValueExplorer = nil
    self.drawVias_property.mObserverExplorer = nil
    self.drawVias_property.mValueExplorer = nil
    self.fileExtension_property.mObserverExplorer = nil
    self.fileExtension_property.mValueExplorer = nil
    self.horizontalMirror_property.mObserverExplorer = nil
    self.horizontalMirror_property.mValueExplorer = nil
    self.name_property.mObserverExplorer = nil
    self.name_property.mValueExplorer = nil
    self.measurementUnitForPadHoleInPDF_property.mObserverExplorer = nil
    self.measurementUnitForPadHoleInPDF_property.mValueExplorer = nil
    self.padHoleDiameterInPDF_property.mObserverExplorer = nil
    self.padHoleDiameterInPDF_property.mValueExplorer = nil
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
    self.drawBoardLimits_property.storeIn (dictionary: ioDictionary, forKey: "drawBoardLimits")
    self.drawInternalBoardLimits_property.storeIn (dictionary: ioDictionary, forKey: "drawInternalBoardLimits")
    self.drawComponentNamesTopSide_property.storeIn (dictionary: ioDictionary, forKey: "drawComponentNamesTopSide")
    self.drawComponentNamesBottomSide_property.storeIn (dictionary: ioDictionary, forKey: "drawComponentNamesBottomSide")
    self.drawComponentValuesTopSide_property.storeIn (dictionary: ioDictionary, forKey: "drawComponentValuesTopSide")
    self.drawComponentValuesBottomSide_property.storeIn (dictionary: ioDictionary, forKey: "drawComponentValuesBottomSide")
    self.drawPackageLegendTopSide_property.storeIn (dictionary: ioDictionary, forKey: "drawPackageLegendTopSide")
    self.drawPackageLegendBottomSide_property.storeIn (dictionary: ioDictionary, forKey: "drawPackageLegendBottomSide")
    self.drawPadHolesInPDF_property.storeIn (dictionary: ioDictionary, forKey: "drawPadHolesInPDF")
    self.drawPadsTopSide_property.storeIn (dictionary: ioDictionary, forKey: "drawPadsTopSide")
    self.drawPadsBottomSide_property.storeIn (dictionary: ioDictionary, forKey: "drawPadsBottomSide")
    self.drawTextsLayoutTopSide_property.storeIn (dictionary: ioDictionary, forKey: "drawTextsLayoutTopSide")
    self.drawTextsLayoutBottomSide_property.storeIn (dictionary: ioDictionary, forKey: "drawTextsLayoutBottomSide")
    self.drawTextsLegendTopSide_property.storeIn (dictionary: ioDictionary, forKey: "drawTextsLegendTopSide")
    self.drawTextsLegendBottomSide_property.storeIn (dictionary: ioDictionary, forKey: "drawTextsLegendBottomSide")
    self.drawTracksTopSide_property.storeIn (dictionary: ioDictionary, forKey: "drawTracksTopSide")
    self.drawTracksBottomSide_property.storeIn (dictionary: ioDictionary, forKey: "drawTracksBottomSide")
    self.drawVias_property.storeIn (dictionary: ioDictionary, forKey: "drawVias")
    self.fileExtension_property.storeIn (dictionary: ioDictionary, forKey: "fileExtension")
    self.horizontalMirror_property.storeIn (dictionary: ioDictionary, forKey: "horizontalMirror")
    self.name_property.storeIn (dictionary: ioDictionary, forKey: "name")
    self.measurementUnitForPadHoleInPDF_property.storeIn (dictionary: ioDictionary, forKey: "measurementUnitForPadHoleInPDF")
    self.padHoleDiameterInPDF_property.storeIn (dictionary: ioDictionary, forKey: "padHoleDiameterInPDF")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
    self.drawBoardLimits_property.readFrom (dictionary: inDictionary, forKey:"drawBoardLimits")
    self.drawInternalBoardLimits_property.readFrom (dictionary: inDictionary, forKey:"drawInternalBoardLimits")
    self.drawComponentNamesTopSide_property.readFrom (dictionary: inDictionary, forKey:"drawComponentNamesTopSide")
    self.drawComponentNamesBottomSide_property.readFrom (dictionary: inDictionary, forKey:"drawComponentNamesBottomSide")
    self.drawComponentValuesTopSide_property.readFrom (dictionary: inDictionary, forKey:"drawComponentValuesTopSide")
    self.drawComponentValuesBottomSide_property.readFrom (dictionary: inDictionary, forKey:"drawComponentValuesBottomSide")
    self.drawPackageLegendTopSide_property.readFrom (dictionary: inDictionary, forKey:"drawPackageLegendTopSide")
    self.drawPackageLegendBottomSide_property.readFrom (dictionary: inDictionary, forKey:"drawPackageLegendBottomSide")
    self.drawPadHolesInPDF_property.readFrom (dictionary: inDictionary, forKey:"drawPadHolesInPDF")
    self.drawPadsTopSide_property.readFrom (dictionary: inDictionary, forKey:"drawPadsTopSide")
    self.drawPadsBottomSide_property.readFrom (dictionary: inDictionary, forKey:"drawPadsBottomSide")
    self.drawTextsLayoutTopSide_property.readFrom (dictionary: inDictionary, forKey:"drawTextsLayoutTopSide")
    self.drawTextsLayoutBottomSide_property.readFrom (dictionary: inDictionary, forKey:"drawTextsLayoutBottomSide")
    self.drawTextsLegendTopSide_property.readFrom (dictionary: inDictionary, forKey:"drawTextsLegendTopSide")
    self.drawTextsLegendBottomSide_property.readFrom (dictionary: inDictionary, forKey:"drawTextsLegendBottomSide")
    self.drawTracksTopSide_property.readFrom (dictionary: inDictionary, forKey:"drawTracksTopSide")
    self.drawTracksBottomSide_property.readFrom (dictionary: inDictionary, forKey:"drawTracksBottomSide")
    self.drawVias_property.readFrom (dictionary: inDictionary, forKey:"drawVias")
    self.fileExtension_property.readFrom (dictionary: inDictionary, forKey:"fileExtension")
    self.horizontalMirror_property.readFrom (dictionary: inDictionary, forKey:"horizontalMirror")
    self.name_property.readFrom (dictionary: inDictionary, forKey:"name")
    self.measurementUnitForPadHoleInPDF_property.readFrom (dictionary: inDictionary, forKey:"measurementUnitForPadHoleInPDF")
    self.padHoleDiameterInPDF_property.readFrom (dictionary: inDictionary, forKey:"padHoleDiameterInPDF")
  }

  //····················································································································
  //   cascadeObjectRemoving
  //····················································································································

  override func cascadeObjectRemoving (_ ioObjectsToRemove : inout Set <EBManagedObject>) {
    super.cascadeObjectRemoving (&ioObjectsToRemove)
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.drawBoardLimits_property.signature ())
    crc.accumulateUInt32 (self.drawComponentNamesBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawComponentNamesTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawComponentValuesBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawComponentValuesTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawInternalBoardLimits_property.signature ())
    crc.accumulateUInt32 (self.drawPackageLegendBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawPackageLegendTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawPadHolesInPDF_property.signature ())
    crc.accumulateUInt32 (self.drawPadsBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawPadsTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawTextsLayoutBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawTextsLayoutTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawTextsLegendBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawTextsLegendTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawTracksBottomSide_property.signature ())
    crc.accumulateUInt32 (self.drawTracksTopSide_property.signature ())
    crc.accumulateUInt32 (self.drawVias_property.signature ())
    crc.accumulateUInt32 (self.fileExtension_property.signature ())
    crc.accumulateUInt32 (self.horizontalMirror_property.signature ())
    crc.accumulateUInt32 (self.measurementUnitForPadHoleInPDF_property.signature ())
    crc.accumulateUInt32 (self.name_property.signature ())
    crc.accumulateUInt32 (self.padHoleDiameterInPDF_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ArtworkFileGenerationParameters : ReadOnlyAbstractArrayProperty <ArtworkFileGenerationParameters> {

  //····················································································································
  //   Observers of 'drawBoardLimits' stored property
  //····················································································································

  private var mObserversOf_drawBoardLimits = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawBoardLimits (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawBoardLimits.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawBoardLimits_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawBoardLimits (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawBoardLimits.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawBoardLimits_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawBoardLimits_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawBoardLimits {
        managedObject.drawBoardLimits_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawBoardLimits_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawBoardLimits {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawBoardLimits_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawInternalBoardLimits' stored property
  //····················································································································

  private var mObserversOf_drawInternalBoardLimits = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawInternalBoardLimits (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawInternalBoardLimits.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawInternalBoardLimits_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawInternalBoardLimits (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawInternalBoardLimits.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawInternalBoardLimits_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawInternalBoardLimits_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawInternalBoardLimits {
        managedObject.drawInternalBoardLimits_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawInternalBoardLimits_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawInternalBoardLimits {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawInternalBoardLimits_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawComponentNamesTopSide' stored property
  //····················································································································

  private var mObserversOf_drawComponentNamesTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawComponentNamesTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawComponentNamesTopSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentNamesTopSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawComponentNamesTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawComponentNamesTopSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentNamesTopSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawComponentNamesTopSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawComponentNamesTopSide {
        managedObject.drawComponentNamesTopSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawComponentNamesTopSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawComponentNamesTopSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawComponentNamesTopSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawComponentNamesBottomSide' stored property
  //····················································································································

  private var mObserversOf_drawComponentNamesBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawComponentNamesBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawComponentNamesBottomSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentNamesBottomSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawComponentNamesBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawComponentNamesBottomSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentNamesBottomSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawComponentNamesBottomSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawComponentNamesBottomSide {
        managedObject.drawComponentNamesBottomSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawComponentNamesBottomSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawComponentNamesBottomSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawComponentNamesBottomSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawComponentValuesTopSide' stored property
  //····················································································································

  private var mObserversOf_drawComponentValuesTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawComponentValuesTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawComponentValuesTopSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentValuesTopSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawComponentValuesTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawComponentValuesTopSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentValuesTopSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawComponentValuesTopSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawComponentValuesTopSide {
        managedObject.drawComponentValuesTopSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawComponentValuesTopSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawComponentValuesTopSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawComponentValuesTopSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawComponentValuesBottomSide' stored property
  //····················································································································

  private var mObserversOf_drawComponentValuesBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawComponentValuesBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawComponentValuesBottomSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentValuesBottomSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawComponentValuesBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawComponentValuesBottomSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawComponentValuesBottomSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawComponentValuesBottomSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawComponentValuesBottomSide {
        managedObject.drawComponentValuesBottomSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawComponentValuesBottomSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawComponentValuesBottomSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawComponentValuesBottomSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawPackageLegendTopSide' stored property
  //····················································································································

  private var mObserversOf_drawPackageLegendTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawPackageLegendTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawPackageLegendTopSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPackageLegendTopSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawPackageLegendTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawPackageLegendTopSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPackageLegendTopSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawPackageLegendTopSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawPackageLegendTopSide {
        managedObject.drawPackageLegendTopSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawPackageLegendTopSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawPackageLegendTopSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawPackageLegendTopSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawPackageLegendBottomSide' stored property
  //····················································································································

  private var mObserversOf_drawPackageLegendBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawPackageLegendBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawPackageLegendBottomSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPackageLegendBottomSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawPackageLegendBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawPackageLegendBottomSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPackageLegendBottomSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawPackageLegendBottomSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawPackageLegendBottomSide {
        managedObject.drawPackageLegendBottomSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawPackageLegendBottomSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawPackageLegendBottomSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawPackageLegendBottomSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawPadHolesInPDF' stored property
  //····················································································································

  private var mObserversOf_drawPadHolesInPDF = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawPadHolesInPDF (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawPadHolesInPDF.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadHolesInPDF_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawPadHolesInPDF (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawPadHolesInPDF.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadHolesInPDF_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawPadHolesInPDF_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawPadHolesInPDF {
        managedObject.drawPadHolesInPDF_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawPadHolesInPDF_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawPadHolesInPDF {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawPadHolesInPDF_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawPadsTopSide' stored property
  //····················································································································

  private var mObserversOf_drawPadsTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawPadsTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawPadsTopSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadsTopSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawPadsTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawPadsTopSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadsTopSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawPadsTopSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawPadsTopSide {
        managedObject.drawPadsTopSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawPadsTopSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawPadsTopSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawPadsTopSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawPadsBottomSide' stored property
  //····················································································································

  private var mObserversOf_drawPadsBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawPadsBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawPadsBottomSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadsBottomSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawPadsBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawPadsBottomSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawPadsBottomSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawPadsBottomSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawPadsBottomSide {
        managedObject.drawPadsBottomSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawPadsBottomSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawPadsBottomSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawPadsBottomSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTextsLayoutTopSide' stored property
  //····················································································································

  private var mObserversOf_drawTextsLayoutTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTextsLayoutTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawTextsLayoutTopSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLayoutTopSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTextsLayoutTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawTextsLayoutTopSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLayoutTopSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTextsLayoutTopSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawTextsLayoutTopSide {
        managedObject.drawTextsLayoutTopSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTextsLayoutTopSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawTextsLayoutTopSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawTextsLayoutTopSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTextsLayoutBottomSide' stored property
  //····················································································································

  private var mObserversOf_drawTextsLayoutBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTextsLayoutBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawTextsLayoutBottomSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLayoutBottomSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTextsLayoutBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawTextsLayoutBottomSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLayoutBottomSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTextsLayoutBottomSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawTextsLayoutBottomSide {
        managedObject.drawTextsLayoutBottomSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTextsLayoutBottomSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawTextsLayoutBottomSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawTextsLayoutBottomSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTextsLegendTopSide' stored property
  //····················································································································

  private var mObserversOf_drawTextsLegendTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTextsLegendTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawTextsLegendTopSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLegendTopSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTextsLegendTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawTextsLegendTopSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLegendTopSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTextsLegendTopSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawTextsLegendTopSide {
        managedObject.drawTextsLegendTopSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTextsLegendTopSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawTextsLegendTopSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawTextsLegendTopSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTextsLegendBottomSide' stored property
  //····················································································································

  private var mObserversOf_drawTextsLegendBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTextsLegendBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawTextsLegendBottomSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLegendBottomSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTextsLegendBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawTextsLegendBottomSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTextsLegendBottomSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTextsLegendBottomSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawTextsLegendBottomSide {
        managedObject.drawTextsLegendBottomSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTextsLegendBottomSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawTextsLegendBottomSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawTextsLegendBottomSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTracksTopSide' stored property
  //····················································································································

  private var mObserversOf_drawTracksTopSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTracksTopSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawTracksTopSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksTopSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTracksTopSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawTracksTopSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksTopSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTracksTopSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawTracksTopSide {
        managedObject.drawTracksTopSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTracksTopSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawTracksTopSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawTracksTopSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawTracksBottomSide' stored property
  //····················································································································

  private var mObserversOf_drawTracksBottomSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawTracksBottomSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawTracksBottomSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksBottomSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawTracksBottomSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawTracksBottomSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawTracksBottomSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawTracksBottomSide_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawTracksBottomSide {
        managedObject.drawTracksBottomSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawTracksBottomSide_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawTracksBottomSide {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawTracksBottomSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drawVias' stored property
  //····················································································································

  private var mObserversOf_drawVias = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_drawVias (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_drawVias.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawVias_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_drawVias (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_drawVias.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.drawVias_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_drawVias_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_drawVias {
        managedObject.drawVias_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drawVias_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_drawVias {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drawVias_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'fileExtension' stored property
  //····················································································································

  private var mObserversOf_fileExtension = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_fileExtension (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_fileExtension.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.fileExtension_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_fileExtension (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_fileExtension.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.fileExtension_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_fileExtension_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_fileExtension {
        managedObject.fileExtension_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_fileExtension_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_fileExtension {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.fileExtension_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'horizontalMirror' stored property
  //····················································································································

  private var mObserversOf_horizontalMirror = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_horizontalMirror (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_horizontalMirror.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.horizontalMirror_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_horizontalMirror (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_horizontalMirror.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.horizontalMirror_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_horizontalMirror_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_horizontalMirror {
        managedObject.horizontalMirror_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_horizontalMirror_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_horizontalMirror {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.horizontalMirror_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  private var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_name.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_name.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.name_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_name_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_name {
        managedObject.name_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_name_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_name {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.name_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'measurementUnitForPadHoleInPDF' stored property
  //····················································································································

  private var mObserversOf_measurementUnitForPadHoleInPDF = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_measurementUnitForPadHoleInPDF (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_measurementUnitForPadHoleInPDF.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.measurementUnitForPadHoleInPDF_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_measurementUnitForPadHoleInPDF (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_measurementUnitForPadHoleInPDF.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.measurementUnitForPadHoleInPDF_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_measurementUnitForPadHoleInPDF_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_measurementUnitForPadHoleInPDF {
        managedObject.measurementUnitForPadHoleInPDF_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_measurementUnitForPadHoleInPDF_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_measurementUnitForPadHoleInPDF {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.measurementUnitForPadHoleInPDF_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padHoleDiameterInPDF' stored property
  //····················································································································

  private var mObserversOf_padHoleDiameterInPDF = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padHoleDiameterInPDF (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    mObserversOf_padHoleDiameterInPDF.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padHoleDiameterInPDF_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padHoleDiameterInPDF (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    mObserversOf_padHoleDiameterInPDF.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padHoleDiameterInPDF_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padHoleDiameterInPDF_toElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for managedObject in inSet {
      for observer in mObserversOf_padHoleDiameterInPDF {
        managedObject.padHoleDiameterInPDF_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padHoleDiameterInPDF_fromElementsOfSet (_ inSet : Set<ArtworkFileGenerationParameters>) {
    for observer in mObserversOf_padHoleDiameterInPDF {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.padHoleDiameterInPDF_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_ArtworkFileGenerationParameters : ReadOnlyArrayOf_ArtworkFileGenerationParameters {

  var readModelFunction : Optional<() -> EBSelection < [ArtworkFileGenerationParameters] > >

  private var prop_cache : EBSelection < [ArtworkFileGenerationParameters] >? 

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <ArtworkFileGenerationParameters> ()

  override var prop : EBSelection < [ArtworkFileGenerationParameters] > {
    get {
      if let unwrappedComputeFunction = readModelFunction, prop_cache == nil {
        prop_cache = unwrappedComputeFunction ()
        let newSet : Set <ArtworkFileGenerationParameters>
        switch prop_cache! {
        case .multiple, .empty :
          newSet = Set <ArtworkFileGenerationParameters> ()
        case .single (let array) :
          newSet = Set (array)
        }
     //--- Removed object set
        let removedSet = mSet.subtracting (newSet)
      //--- Remove observers of stored properties
        removeEBObserversOf_drawBoardLimits_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawInternalBoardLimits_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawComponentNamesTopSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawComponentNamesBottomSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawComponentValuesTopSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawComponentValuesBottomSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawPackageLegendTopSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawPackageLegendBottomSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawPadHolesInPDF_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawPadsTopSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawPadsBottomSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawTextsLayoutTopSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawTextsLayoutBottomSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawTextsLegendTopSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawTextsLegendBottomSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawTracksTopSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawTracksBottomSide_fromElementsOfSet (removedSet)
        removeEBObserversOf_drawVias_fromElementsOfSet (removedSet)
        removeEBObserversOf_fileExtension_fromElementsOfSet (removedSet)
        removeEBObserversOf_horizontalMirror_fromElementsOfSet (removedSet)
        removeEBObserversOf_name_fromElementsOfSet (removedSet)
        removeEBObserversOf_measurementUnitForPadHoleInPDF_fromElementsOfSet (removedSet)
        removeEBObserversOf_padHoleDiameterInPDF_fromElementsOfSet (removedSet)
      //--- Remove observers of transient properties
      //--- Added object set
        let addedSet = newSet.subtracting (mSet)
       //--- Add observers of stored properties
        addEBObserversOf_drawBoardLimits_toElementsOfSet (addedSet)
        addEBObserversOf_drawInternalBoardLimits_toElementsOfSet (addedSet)
        addEBObserversOf_drawComponentNamesTopSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawComponentNamesBottomSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawComponentValuesTopSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawComponentValuesBottomSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawPackageLegendTopSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawPackageLegendBottomSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawPadHolesInPDF_toElementsOfSet (addedSet)
        addEBObserversOf_drawPadsTopSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawPadsBottomSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawTextsLayoutTopSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawTextsLayoutBottomSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawTextsLegendTopSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawTextsLegendBottomSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawTracksTopSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawTracksBottomSide_toElementsOfSet (addedSet)
        addEBObserversOf_drawVias_toElementsOfSet (addedSet)
        addEBObserversOf_fileExtension_toElementsOfSet (addedSet)
        addEBObserversOf_horizontalMirror_toElementsOfSet (addedSet)
        addEBObserversOf_name_toElementsOfSet (addedSet)
        addEBObserversOf_measurementUnitForPadHoleInPDF_toElementsOfSet (addedSet)
        addEBObserversOf_padHoleDiameterInPDF_toElementsOfSet (addedSet)
       //--- Add observers of transient properties
      //--- Update object set
        mSet = newSet
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ToManyRelationshipReadWrite_ArtworkFileGenerationParameters : ReadOnlyArrayOf_ArtworkFileGenerationParameters {

  //····················································································································

  weak var undoManager : EBUndoManager?

  //····················································································································
 
  func setProp (_ value :  [ArtworkFileGenerationParameters]) { } // Abstract method
 
  var propval : [ArtworkFileGenerationParameters] { return [] } // Abstract method
 
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: ArtworkFileGenerationParameters
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToManyRelationship_ArtworkFileGenerationParameters :
       ToManyRelationshipReadWrite_ArtworkFileGenerationParameters,
       EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : ArtworkFileGenerationParameters?) -> Void > = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  private var mSet = Set <ArtworkFileGenerationParameters> ()
  private var mValue = [ArtworkFileGenerationParameters] () {
    didSet {
      postEvent ()
      if oldValue != mValue {
        let oldSet = mSet
        mSet = Set (mValue)
      //--- Register old value in undo manager
        self.undoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          self.setOppositeRelationship? (nil)
        }
        removeEBObserversOf_drawBoardLimits_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawComponentNamesBottomSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawComponentNamesTopSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawComponentValuesBottomSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawComponentValuesTopSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawInternalBoardLimits_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawPackageLegendBottomSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawPackageLegendTopSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawPadHolesInPDF_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawPadsBottomSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawPadsTopSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawTextsLayoutBottomSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawTextsLayoutTopSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawTextsLegendBottomSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawTextsLegendTopSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawTracksBottomSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawTracksTopSide_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_drawVias_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_fileExtension_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_horizontalMirror_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_measurementUnitForPadHoleInPDF_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_name_fromElementsOfSet (removedObjectSet)
        removeEBObserversOf_padHoleDiameterInPDF_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = mSet.subtracting (oldSet)
        for managedObject : ArtworkFileGenerationParameters in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          self.setOppositeRelationship? (managedObject)
        }
        addEBObserversOf_drawBoardLimits_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawComponentNamesBottomSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawComponentNamesTopSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawComponentValuesBottomSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawComponentValuesTopSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawInternalBoardLimits_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawPackageLegendBottomSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawPackageLegendTopSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawPadHolesInPDF_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawPadsBottomSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawPadsTopSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawTextsLayoutBottomSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawTextsLayoutTopSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawTextsLegendBottomSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawTextsLegendTopSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawTracksBottomSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawTracksTopSide_toElementsOfSet (addedObjectSet)
        addEBObserversOf_drawVias_toElementsOfSet (addedObjectSet)
        addEBObserversOf_fileExtension_toElementsOfSet (addedObjectSet)
        addEBObserversOf_horizontalMirror_toElementsOfSet (addedObjectSet)
        addEBObserversOf_measurementUnitForPadHoleInPDF_toElementsOfSet (addedObjectSet)
        addEBObserversOf_name_toElementsOfSet (addedObjectSet)
        addEBObserversOf_padHoleDiameterInPDF_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        clearSignatureCache ()
      }
    }
  }

  override var prop : EBSelection < [ArtworkFileGenerationParameters] > { return .single (mValue) }

  override func setProp (_ inValue : [ArtworkFileGenerationParameters]) { mValue = inValue }

  override var propval : [ArtworkFileGenerationParameters] { return mValue }

  //····················································································································

  @objc func performUndo (_ oldValue : [ArtworkFileGenerationParameters]) {
    mValue = oldValue
  }

  //····················································································································

  func remove (_ object : ArtworkFileGenerationParameters) {
    if mSet.contains (object) {
      var array = mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : ArtworkFileGenerationParameters) {
    if !mSet.contains (object) {
      var array = mValue
      array.append (object)
      mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol?
  private var mSignatureCache : UInt32?

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    mSignatureObserver = observer
    for object in mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawBoardLimits : class {
  var drawBoardLimits : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawInternalBoardLimits : class {
  var drawInternalBoardLimits : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawComponentNamesTopSide : class {
  var drawComponentNamesTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawComponentNamesBottomSide : class {
  var drawComponentNamesBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawComponentValuesTopSide : class {
  var drawComponentValuesTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawComponentValuesBottomSide : class {
  var drawComponentValuesBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPackageLegendTopSide : class {
  var drawPackageLegendTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPackageLegendBottomSide : class {
  var drawPackageLegendBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPadHolesInPDF : class {
  var drawPadHolesInPDF : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPadsTopSide : class {
  var drawPadsTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawPadsBottomSide : class {
  var drawPadsBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTextsLayoutTopSide : class {
  var drawTextsLayoutTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTextsLayoutBottomSide : class {
  var drawTextsLayoutBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTextsLegendTopSide : class {
  var drawTextsLegendTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTextsLegendBottomSide : class {
  var drawTextsLegendBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTracksTopSide : class {
  var drawTracksTopSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawTracksBottomSide : class {
  var drawTracksBottomSide : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_drawVias : class {
  var drawVias : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_fileExtension : class {
  var fileExtension : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_horizontalMirror : class {
  var horizontalMirror : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_name : class {
  var name : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_measurementUnitForPadHoleInPDF : class {
  var measurementUnitForPadHoleInPDF : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ArtworkFileGenerationParameters_padHoleDiameterInPDF : class {
  var padHoleDiameterInPDF : Int { get }
}


