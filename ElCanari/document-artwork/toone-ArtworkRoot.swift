//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_ArtworkRoot 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_ArtworkRoot : ReadOnlyAbstractObjectProperty <ArtworkRoot> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : ArtworkRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.selectedTab_property.removeEBObserversFrom (&self.mObserversOf_selectedTab) // Stored property
      oldValue.comments_property.removeEBObserversFrom (&self.mObserversOf_comments) // Stored property
      oldValue.minPPTPTTTWdisplayUnit_property.removeEBObserversFrom (&self.mObserversOf_minPPTPTTTWdisplayUnit) // Stored property
      oldValue.minPPTPTTTW_property.removeEBObserversFrom (&self.mObserversOf_minPPTPTTTW) // Stored property
      oldValue.minValueForOARdisplayUnit_property.removeEBObserversFrom (&self.mObserversOf_minValueForOARdisplayUnit) // Stored property
      oldValue.minValueForOARinEBUnit_property.removeEBObserversFrom (&self.mObserversOf_minValueForOARinEBUnit) // Stored property
      oldValue.minValueForPHDdisplayUnit_property.removeEBObserversFrom (&self.mObserversOf_minValueForPHDdisplayUnit) // Stored property
      oldValue.minValueForPHDinEBUnit_property.removeEBObserversFrom (&self.mObserversOf_minValueForPHDinEBUnit) // Stored property
      oldValue.minValueForBoardLimitWidthDisplayUnit_property.removeEBObserversFrom (&self.mObserversOf_minValueForBoardLimitWidthDisplayUnit) // Stored property
      oldValue.minValueForBoardLimitWidth_property.removeEBObserversFrom (&self.mObserversOf_minValueForBoardLimitWidth) // Stored property
      oldValue.drillDataFileExtension_property.removeEBObserversFrom (&self.mObserversOf_drillDataFileExtension) // Stored property
      oldValue.signatureForERCChecking_property.removeEBObserversFrom (&self.mObserversOf_signatureForERCChecking) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
      newValue.selectedTab_property.addEBObserversFrom (&self.mObserversOf_selectedTab) // Stored property
      newValue.comments_property.addEBObserversFrom (&self.mObserversOf_comments) // Stored property
      newValue.minPPTPTTTWdisplayUnit_property.addEBObserversFrom (&self.mObserversOf_minPPTPTTTWdisplayUnit) // Stored property
      newValue.minPPTPTTTW_property.addEBObserversFrom (&self.mObserversOf_minPPTPTTTW) // Stored property
      newValue.minValueForOARdisplayUnit_property.addEBObserversFrom (&self.mObserversOf_minValueForOARdisplayUnit) // Stored property
      newValue.minValueForOARinEBUnit_property.addEBObserversFrom (&self.mObserversOf_minValueForOARinEBUnit) // Stored property
      newValue.minValueForPHDdisplayUnit_property.addEBObserversFrom (&self.mObserversOf_minValueForPHDdisplayUnit) // Stored property
      newValue.minValueForPHDinEBUnit_property.addEBObserversFrom (&self.mObserversOf_minValueForPHDinEBUnit) // Stored property
      newValue.minValueForBoardLimitWidthDisplayUnit_property.addEBObserversFrom (&self.mObserversOf_minValueForBoardLimitWidthDisplayUnit) // Stored property
      newValue.minValueForBoardLimitWidth_property.addEBObserversFrom (&self.mObserversOf_minValueForBoardLimitWidth) // Stored property
      newValue.drillDataFileExtension_property.addEBObserversFrom (&self.mObserversOf_drillDataFileExtension) // Stored property
      newValue.signatureForERCChecking_property.addEBObserversFrom (&self.mObserversOf_signatureForERCChecking) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'selectedTab' stored property
  //····················································································································

//  private final var selectedTab_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_selectedTab = EBWeakEventSet ()

  //····················································································································

  final var selectedTab_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.selectedTab_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedTab (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedTab.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.selectedTab_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedTab (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedTab.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedTab_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'comments' stored property
  //····················································································································

//  private final var comments_property = EBGenericPropertyProxy <String?> ()
  private final var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  final var comments_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.comments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_comments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.comments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_comments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.comments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'minPPTPTTTWdisplayUnit' stored property
  //····················································································································

//  private final var minPPTPTTTWdisplayUnit_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_minPPTPTTTWdisplayUnit = EBWeakEventSet ()

  //····················································································································

  final var minPPTPTTTWdisplayUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.minPPTPTTTWdisplayUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_minPPTPTTTWdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTWdisplayUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.minPPTPTTTWdisplayUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minPPTPTTTWdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTWdisplayUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minPPTPTTTWdisplayUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'minPPTPTTTW' stored property
  //····················································································································

//  private final var minPPTPTTTW_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_minPPTPTTTW = EBWeakEventSet ()

  //····················································································································

  final var minPPTPTTTW_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.minPPTPTTTW_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_minPPTPTTTW (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTW.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.minPPTPTTTW_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minPPTPTTTW (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTW.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minPPTPTTTW_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'minValueForOARdisplayUnit' stored property
  //····················································································································

//  private final var minValueForOARdisplayUnit_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_minValueForOARdisplayUnit = EBWeakEventSet ()

  //····················································································································

  final var minValueForOARdisplayUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.minValueForOARdisplayUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForOARdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForOARdisplayUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.minValueForOARdisplayUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForOARdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForOARdisplayUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForOARdisplayUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'minValueForOARinEBUnit' stored property
  //····················································································································

//  private final var minValueForOARinEBUnit_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_minValueForOARinEBUnit = EBWeakEventSet ()

  //····················································································································

  final var minValueForOARinEBUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.minValueForOARinEBUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForOARinEBUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForOARinEBUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.minValueForOARinEBUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForOARinEBUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForOARinEBUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForOARinEBUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'minValueForPHDdisplayUnit' stored property
  //····················································································································

//  private final var minValueForPHDdisplayUnit_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_minValueForPHDdisplayUnit = EBWeakEventSet ()

  //····················································································································

  final var minValueForPHDdisplayUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.minValueForPHDdisplayUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForPHDdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForPHDdisplayUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.minValueForPHDdisplayUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForPHDdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForPHDdisplayUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForPHDdisplayUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'minValueForPHDinEBUnit' stored property
  //····················································································································

//  private final var minValueForPHDinEBUnit_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_minValueForPHDinEBUnit = EBWeakEventSet ()

  //····················································································································

  final var minValueForPHDinEBUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.minValueForPHDinEBUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForPHDinEBUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForPHDinEBUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.minValueForPHDinEBUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForPHDinEBUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForPHDinEBUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForPHDinEBUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'minValueForBoardLimitWidthDisplayUnit' stored property
  //····················································································································

//  private final var minValueForBoardLimitWidthDisplayUnit_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_minValueForBoardLimitWidthDisplayUnit = EBWeakEventSet ()

  //····················································································································

  final var minValueForBoardLimitWidthDisplayUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.minValueForBoardLimitWidthDisplayUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForBoardLimitWidthDisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.minValueForBoardLimitWidthDisplayUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForBoardLimitWidthDisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForBoardLimitWidthDisplayUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'minValueForBoardLimitWidth' stored property
  //····················································································································

//  private final var minValueForBoardLimitWidth_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_minValueForBoardLimitWidth = EBWeakEventSet ()

  //····················································································································

  final var minValueForBoardLimitWidth_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.minValueForBoardLimitWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForBoardLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.minValueForBoardLimitWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForBoardLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForBoardLimitWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'drillDataFileExtension' stored property
  //····················································································································

//  private final var drillDataFileExtension_property = EBGenericPropertyProxy <String?> ()
  private final var mObserversOf_drillDataFileExtension = EBWeakEventSet ()

  //····················································································································

  final var drillDataFileExtension_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.drillDataFileExtension_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_drillDataFileExtension (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drillDataFileExtension.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.drillDataFileExtension_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillDataFileExtension (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drillDataFileExtension.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drillDataFileExtension_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  private final var mObserversOf_signatureForERCChecking = EBWeakEventSet ()

  //····················································································································

  final var signatureForERCChecking_property_selection : EBSelection <UInt32?> {
    if let model = self.propval {
      switch (model.signatureForERCChecking_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_signatureForERCChecking (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_signatureForERCChecking.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.signatureForERCChecking_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_signatureForERCChecking (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_signatureForERCChecking.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.signatureForERCChecking_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: fileGenerationParameterArray
  //····················································································································

  private final var mObserversOf_fileGenerationParameterArray = EBWeakEventSet ()

  //····················································································································

  final var fileGenerationParameterArray_property_selection : EBSelection <[ArtworkFileGenerationParameters]> {
    if let model = self.propval {
      switch (model.fileGenerationParameterArray_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_fileGenerationParameterArray (_ inObserver : EBEvent) {
    self.mObserversOf_fileGenerationParameterArray.insert (inObserver)
    if let object = self.propval {
      object.fileGenerationParameterArray_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_fileGenerationParameterArray (_ inObserver : EBEvent) {
    self.mObserversOf_fileGenerationParameterArray.remove (inObserver)
    if let object = self.propval {
      object.fileGenerationParameterArray_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT 
  //····················································································································

 // override init () {
//    super.init ()
  //--- Configure selectedTab simple stored property
 /*   self.selectedTab_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.selectedTab_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.selectedTab_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.selectedTab_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.selectedTab_property) */
  //--- Configure comments simple stored property
 /*   self.comments_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.comments_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.comments_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.comments_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.comments_property) */
  //--- Configure minPPTPTTTWdisplayUnit simple stored property
 /*   self.minPPTPTTTWdisplayUnit_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.minPPTPTTTWdisplayUnit_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.minPPTPTTTWdisplayUnit_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.minPPTPTTTWdisplayUnit_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.minPPTPTTTWdisplayUnit_property) */
  //--- Configure minPPTPTTTW simple stored property
 /*   self.minPPTPTTTW_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.minPPTPTTTW_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.minPPTPTTTW_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.minPPTPTTTW_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.minPPTPTTTW_property) */
  //--- Configure minValueForOARdisplayUnit simple stored property
 /*   self.minValueForOARdisplayUnit_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.minValueForOARdisplayUnit_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.minValueForOARdisplayUnit_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.minValueForOARdisplayUnit_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.minValueForOARdisplayUnit_property) */
  //--- Configure minValueForOARinEBUnit simple stored property
 /*   self.minValueForOARinEBUnit_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.minValueForOARinEBUnit_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.minValueForOARinEBUnit_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.minValueForOARinEBUnit_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.minValueForOARinEBUnit_property) */
  //--- Configure minValueForPHDdisplayUnit simple stored property
 /*   self.minValueForPHDdisplayUnit_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.minValueForPHDdisplayUnit_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.minValueForPHDdisplayUnit_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.minValueForPHDdisplayUnit_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.minValueForPHDdisplayUnit_property) */
  //--- Configure minValueForPHDinEBUnit simple stored property
 /*   self.minValueForPHDinEBUnit_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.minValueForPHDinEBUnit_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.minValueForPHDinEBUnit_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.minValueForPHDinEBUnit_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.minValueForPHDinEBUnit_property) */
  //--- Configure minValueForBoardLimitWidthDisplayUnit simple stored property
 /*   self.minValueForBoardLimitWidthDisplayUnit_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.minValueForBoardLimitWidthDisplayUnit_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.minValueForBoardLimitWidthDisplayUnit_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.minValueForBoardLimitWidthDisplayUnit_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.minValueForBoardLimitWidthDisplayUnit_property) */
  //--- Configure minValueForBoardLimitWidth simple stored property
 /*   self.minValueForBoardLimitWidth_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.minValueForBoardLimitWidth_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.minValueForBoardLimitWidth_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.minValueForBoardLimitWidth_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.minValueForBoardLimitWidth_property) */
  //--- Configure drillDataFileExtension simple stored property
 /*   self.drillDataFileExtension_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.drillDataFileExtension_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.drillDataFileExtension_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.drillDataFileExtension_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.drillDataFileExtension_property) */
 // }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject ArtworkRoot
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_ArtworkRoot : ReadOnlyObject_ArtworkRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_ArtworkRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_ArtworkRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : ArtworkRoot? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < ArtworkRoot? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : ArtworkRoot? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_ArtworkRoot
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_ArtworkRoot : ReadOnlyObject_ArtworkRoot {

  //····················································································································
 
  func setProp (_ inValue : ArtworkRoot?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_ArtworkRoot
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_ArtworkRoot : ReadWriteObject_ArtworkRoot {

  //····················································································································

  private var mModel : ReadWriteObject_ArtworkRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_ArtworkRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : ArtworkRoot?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : ArtworkRoot?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < ArtworkRoot? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : ArtworkRoot? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_ArtworkRoot 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_ArtworkRoot : ReadWriteObject_ArtworkRoot, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ArtworkRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ArtworkRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ArtworkRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ArtworkRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : ArtworkRoot?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < ArtworkRoot? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : ArtworkRoot?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : ArtworkRoot? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

