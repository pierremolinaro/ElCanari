//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_ArtworkFileGenerationParameters 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_ArtworkFileGenerationParameters : ReadOnlyAbstractObjectProperty <ArtworkFileGenerationParameters> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : ArtworkFileGenerationParameters?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
 //     oldValue.drawBoardLimits_property.removeEBObserversFrom (&self.mObserversOf_drawBoardLimits) // Stored property
      oldValue.drawBoardLimits_property.removeEBObserver (self.drawBoardLimits_property) // Stored property
 //     oldValue.drawInternalBoardLimits_property.removeEBObserversFrom (&self.mObserversOf_drawInternalBoardLimits) // Stored property
      oldValue.drawInternalBoardLimits_property.removeEBObserver (self.drawInternalBoardLimits_property) // Stored property
 //     oldValue.drawComponentNamesTopSide_property.removeEBObserversFrom (&self.mObserversOf_drawComponentNamesTopSide) // Stored property
      oldValue.drawComponentNamesTopSide_property.removeEBObserver (self.drawComponentNamesTopSide_property) // Stored property
 //     oldValue.drawComponentNamesBottomSide_property.removeEBObserversFrom (&self.mObserversOf_drawComponentNamesBottomSide) // Stored property
      oldValue.drawComponentNamesBottomSide_property.removeEBObserver (self.drawComponentNamesBottomSide_property) // Stored property
 //     oldValue.drawComponentValuesTopSide_property.removeEBObserversFrom (&self.mObserversOf_drawComponentValuesTopSide) // Stored property
      oldValue.drawComponentValuesTopSide_property.removeEBObserver (self.drawComponentValuesTopSide_property) // Stored property
 //     oldValue.drawComponentValuesBottomSide_property.removeEBObserversFrom (&self.mObserversOf_drawComponentValuesBottomSide) // Stored property
      oldValue.drawComponentValuesBottomSide_property.removeEBObserver (self.drawComponentValuesBottomSide_property) // Stored property
 //     oldValue.drawPackageLegendTopSide_property.removeEBObserversFrom (&self.mObserversOf_drawPackageLegendTopSide) // Stored property
      oldValue.drawPackageLegendTopSide_property.removeEBObserver (self.drawPackageLegendTopSide_property) // Stored property
 //     oldValue.drawPackageLegendBottomSide_property.removeEBObserversFrom (&self.mObserversOf_drawPackageLegendBottomSide) // Stored property
      oldValue.drawPackageLegendBottomSide_property.removeEBObserver (self.drawPackageLegendBottomSide_property) // Stored property
 //     oldValue.drawPadHolesInPDF_property.removeEBObserversFrom (&self.mObserversOf_drawPadHolesInPDF) // Stored property
      oldValue.drawPadHolesInPDF_property.removeEBObserver (self.drawPadHolesInPDF_property) // Stored property
 //     oldValue.drawPadsTopSide_property.removeEBObserversFrom (&self.mObserversOf_drawPadsTopSide) // Stored property
      oldValue.drawPadsTopSide_property.removeEBObserver (self.drawPadsTopSide_property) // Stored property
 //     oldValue.drawPadsBottomSide_property.removeEBObserversFrom (&self.mObserversOf_drawPadsBottomSide) // Stored property
      oldValue.drawPadsBottomSide_property.removeEBObserver (self.drawPadsBottomSide_property) // Stored property
 //     oldValue.drawTextsLayoutTopSide_property.removeEBObserversFrom (&self.mObserversOf_drawTextsLayoutTopSide) // Stored property
      oldValue.drawTextsLayoutTopSide_property.removeEBObserver (self.drawTextsLayoutTopSide_property) // Stored property
 //     oldValue.drawTextsLayoutBottomSide_property.removeEBObserversFrom (&self.mObserversOf_drawTextsLayoutBottomSide) // Stored property
      oldValue.drawTextsLayoutBottomSide_property.removeEBObserver (self.drawTextsLayoutBottomSide_property) // Stored property
 //     oldValue.drawTextsLegendTopSide_property.removeEBObserversFrom (&self.mObserversOf_drawTextsLegendTopSide) // Stored property
      oldValue.drawTextsLegendTopSide_property.removeEBObserver (self.drawTextsLegendTopSide_property) // Stored property
 //     oldValue.drawTextsLegendBottomSide_property.removeEBObserversFrom (&self.mObserversOf_drawTextsLegendBottomSide) // Stored property
      oldValue.drawTextsLegendBottomSide_property.removeEBObserver (self.drawTextsLegendBottomSide_property) // Stored property
 //     oldValue.drawTracksTopSide_property.removeEBObserversFrom (&self.mObserversOf_drawTracksTopSide) // Stored property
      oldValue.drawTracksTopSide_property.removeEBObserver (self.drawTracksTopSide_property) // Stored property
 //     oldValue.drawTracksBottomSide_property.removeEBObserversFrom (&self.mObserversOf_drawTracksBottomSide) // Stored property
      oldValue.drawTracksBottomSide_property.removeEBObserver (self.drawTracksBottomSide_property) // Stored property
 //     oldValue.drawVias_property.removeEBObserversFrom (&self.mObserversOf_drawVias) // Stored property
      oldValue.drawVias_property.removeEBObserver (self.drawVias_property) // Stored property
 //     oldValue.fileExtension_property.removeEBObserversFrom (&self.mObserversOf_fileExtension) // Stored property
      oldValue.fileExtension_property.removeEBObserver (self.fileExtension_property) // Stored property
 //     oldValue.horizontalMirror_property.removeEBObserversFrom (&self.mObserversOf_horizontalMirror) // Stored property
      oldValue.horizontalMirror_property.removeEBObserver (self.horizontalMirror_property) // Stored property
 //     oldValue.name_property.removeEBObserversFrom (&self.mObserversOf_name) // Stored property
      oldValue.name_property.removeEBObserver (self.name_property) // Stored property
 //     oldValue.measurementUnitForPadHoleInPDF_property.removeEBObserversFrom (&self.mObserversOf_measurementUnitForPadHoleInPDF) // Stored property
      oldValue.measurementUnitForPadHoleInPDF_property.removeEBObserver (self.measurementUnitForPadHoleInPDF_property) // Stored property
 //     oldValue.padHoleDiameterInPDF_property.removeEBObserversFrom (&self.mObserversOf_padHoleDiameterInPDF) // Stored property
      oldValue.padHoleDiameterInPDF_property.removeEBObserver (self.padHoleDiameterInPDF_property) // Stored property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
 //     newValue.drawBoardLimits_property.addEBObserversFrom (&self.mObserversOf_drawBoardLimits) // Stored property
      newValue.drawBoardLimits_property.addEBObserver (self.drawBoardLimits_property) // Stored property
 //     newValue.drawInternalBoardLimits_property.addEBObserversFrom (&self.mObserversOf_drawInternalBoardLimits) // Stored property
      newValue.drawInternalBoardLimits_property.addEBObserver (self.drawInternalBoardLimits_property) // Stored property
 //     newValue.drawComponentNamesTopSide_property.addEBObserversFrom (&self.mObserversOf_drawComponentNamesTopSide) // Stored property
      newValue.drawComponentNamesTopSide_property.addEBObserver (self.drawComponentNamesTopSide_property) // Stored property
 //     newValue.drawComponentNamesBottomSide_property.addEBObserversFrom (&self.mObserversOf_drawComponentNamesBottomSide) // Stored property
      newValue.drawComponentNamesBottomSide_property.addEBObserver (self.drawComponentNamesBottomSide_property) // Stored property
 //     newValue.drawComponentValuesTopSide_property.addEBObserversFrom (&self.mObserversOf_drawComponentValuesTopSide) // Stored property
      newValue.drawComponentValuesTopSide_property.addEBObserver (self.drawComponentValuesTopSide_property) // Stored property
 //     newValue.drawComponentValuesBottomSide_property.addEBObserversFrom (&self.mObserversOf_drawComponentValuesBottomSide) // Stored property
      newValue.drawComponentValuesBottomSide_property.addEBObserver (self.drawComponentValuesBottomSide_property) // Stored property
 //     newValue.drawPackageLegendTopSide_property.addEBObserversFrom (&self.mObserversOf_drawPackageLegendTopSide) // Stored property
      newValue.drawPackageLegendTopSide_property.addEBObserver (self.drawPackageLegendTopSide_property) // Stored property
 //     newValue.drawPackageLegendBottomSide_property.addEBObserversFrom (&self.mObserversOf_drawPackageLegendBottomSide) // Stored property
      newValue.drawPackageLegendBottomSide_property.addEBObserver (self.drawPackageLegendBottomSide_property) // Stored property
 //     newValue.drawPadHolesInPDF_property.addEBObserversFrom (&self.mObserversOf_drawPadHolesInPDF) // Stored property
      newValue.drawPadHolesInPDF_property.addEBObserver (self.drawPadHolesInPDF_property) // Stored property
 //     newValue.drawPadsTopSide_property.addEBObserversFrom (&self.mObserversOf_drawPadsTopSide) // Stored property
      newValue.drawPadsTopSide_property.addEBObserver (self.drawPadsTopSide_property) // Stored property
 //     newValue.drawPadsBottomSide_property.addEBObserversFrom (&self.mObserversOf_drawPadsBottomSide) // Stored property
      newValue.drawPadsBottomSide_property.addEBObserver (self.drawPadsBottomSide_property) // Stored property
 //     newValue.drawTextsLayoutTopSide_property.addEBObserversFrom (&self.mObserversOf_drawTextsLayoutTopSide) // Stored property
      newValue.drawTextsLayoutTopSide_property.addEBObserver (self.drawTextsLayoutTopSide_property) // Stored property
 //     newValue.drawTextsLayoutBottomSide_property.addEBObserversFrom (&self.mObserversOf_drawTextsLayoutBottomSide) // Stored property
      newValue.drawTextsLayoutBottomSide_property.addEBObserver (self.drawTextsLayoutBottomSide_property) // Stored property
 //     newValue.drawTextsLegendTopSide_property.addEBObserversFrom (&self.mObserversOf_drawTextsLegendTopSide) // Stored property
      newValue.drawTextsLegendTopSide_property.addEBObserver (self.drawTextsLegendTopSide_property) // Stored property
 //     newValue.drawTextsLegendBottomSide_property.addEBObserversFrom (&self.mObserversOf_drawTextsLegendBottomSide) // Stored property
      newValue.drawTextsLegendBottomSide_property.addEBObserver (self.drawTextsLegendBottomSide_property) // Stored property
 //     newValue.drawTracksTopSide_property.addEBObserversFrom (&self.mObserversOf_drawTracksTopSide) // Stored property
      newValue.drawTracksTopSide_property.addEBObserver (self.drawTracksTopSide_property) // Stored property
 //     newValue.drawTracksBottomSide_property.addEBObserversFrom (&self.mObserversOf_drawTracksBottomSide) // Stored property
      newValue.drawTracksBottomSide_property.addEBObserver (self.drawTracksBottomSide_property) // Stored property
 //     newValue.drawVias_property.addEBObserversFrom (&self.mObserversOf_drawVias) // Stored property
      newValue.drawVias_property.addEBObserver (self.drawVias_property) // Stored property
 //     newValue.fileExtension_property.addEBObserversFrom (&self.mObserversOf_fileExtension) // Stored property
      newValue.fileExtension_property.addEBObserver (self.fileExtension_property) // Stored property
 //     newValue.horizontalMirror_property.addEBObserversFrom (&self.mObserversOf_horizontalMirror) // Stored property
      newValue.horizontalMirror_property.addEBObserver (self.horizontalMirror_property) // Stored property
 //     newValue.name_property.addEBObserversFrom (&self.mObserversOf_name) // Stored property
      newValue.name_property.addEBObserver (self.name_property) // Stored property
 //     newValue.measurementUnitForPadHoleInPDF_property.addEBObserversFrom (&self.mObserversOf_measurementUnitForPadHoleInPDF) // Stored property
      newValue.measurementUnitForPadHoleInPDF_property.addEBObserver (self.measurementUnitForPadHoleInPDF_property) // Stored property
 //     newValue.padHoleDiameterInPDF_property.addEBObserversFrom (&self.mObserversOf_padHoleDiameterInPDF) // Stored property
      newValue.padHoleDiameterInPDF_property.addEBObserver (self.padHoleDiameterInPDF_property) // Stored property
    }
  }

  //····················································································································
  //   Observers of 'drawBoardLimits' stored property
  //····················································································································

  final let drawBoardLimits_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_drawBoardLimits = EBWeakEventSet ()

  //····················································································································

  final var drawBoardLimits_property_selection : EBSelection <Bool?> { // §
    return self.drawBoardLimits_property.selection
  }

  //····················································································································

  final func addEBObserverOf_drawBoardLimits (_ inObserver : EBEvent) {
    self.drawBoardLimits_property.addEBObserver (inObserver)
/*    self.mObserversOf_drawBoardLimits.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.drawBoardLimits_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_drawBoardLimits (_ inObserver : EBEvent) {
    self.drawBoardLimits_property.removeEBObserver (inObserver)
/*    self.mObserversOf_drawBoardLimits.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drawBoardLimits_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'drawInternalBoardLimits' stored property
  //····················································································································

  final let drawInternalBoardLimits_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_drawInternalBoardLimits = EBWeakEventSet ()

  //····················································································································

  final var drawInternalBoardLimits_property_selection : EBSelection <Bool?> { // §
    return self.drawInternalBoardLimits_property.selection
  }

  //····················································································································

  final func addEBObserverOf_drawInternalBoardLimits (_ inObserver : EBEvent) {
    self.drawInternalBoardLimits_property.addEBObserver (inObserver)
/*    self.mObserversOf_drawInternalBoardLimits.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.drawInternalBoardLimits_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_drawInternalBoardLimits (_ inObserver : EBEvent) {
    self.drawInternalBoardLimits_property.removeEBObserver (inObserver)
/*    self.mObserversOf_drawInternalBoardLimits.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drawInternalBoardLimits_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'drawComponentNamesTopSide' stored property
  //····················································································································

  final let drawComponentNamesTopSide_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_drawComponentNamesTopSide = EBWeakEventSet ()

  //····················································································································

  final var drawComponentNamesTopSide_property_selection : EBSelection <Bool?> { // §
    return self.drawComponentNamesTopSide_property.selection
  }

  //····················································································································

  final func addEBObserverOf_drawComponentNamesTopSide (_ inObserver : EBEvent) {
    self.drawComponentNamesTopSide_property.addEBObserver (inObserver)
/*    self.mObserversOf_drawComponentNamesTopSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.drawComponentNamesTopSide_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_drawComponentNamesTopSide (_ inObserver : EBEvent) {
    self.drawComponentNamesTopSide_property.removeEBObserver (inObserver)
/*    self.mObserversOf_drawComponentNamesTopSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drawComponentNamesTopSide_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'drawComponentNamesBottomSide' stored property
  //····················································································································

  final let drawComponentNamesBottomSide_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_drawComponentNamesBottomSide = EBWeakEventSet ()

  //····················································································································

  final var drawComponentNamesBottomSide_property_selection : EBSelection <Bool?> { // §
    return self.drawComponentNamesBottomSide_property.selection
  }

  //····················································································································

  final func addEBObserverOf_drawComponentNamesBottomSide (_ inObserver : EBEvent) {
    self.drawComponentNamesBottomSide_property.addEBObserver (inObserver)
/*    self.mObserversOf_drawComponentNamesBottomSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.drawComponentNamesBottomSide_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_drawComponentNamesBottomSide (_ inObserver : EBEvent) {
    self.drawComponentNamesBottomSide_property.removeEBObserver (inObserver)
/*    self.mObserversOf_drawComponentNamesBottomSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drawComponentNamesBottomSide_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'drawComponentValuesTopSide' stored property
  //····················································································································

  final let drawComponentValuesTopSide_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_drawComponentValuesTopSide = EBWeakEventSet ()

  //····················································································································

  final var drawComponentValuesTopSide_property_selection : EBSelection <Bool?> { // §
    return self.drawComponentValuesTopSide_property.selection
  }

  //····················································································································

  final func addEBObserverOf_drawComponentValuesTopSide (_ inObserver : EBEvent) {
    self.drawComponentValuesTopSide_property.addEBObserver (inObserver)
/*    self.mObserversOf_drawComponentValuesTopSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.drawComponentValuesTopSide_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_drawComponentValuesTopSide (_ inObserver : EBEvent) {
    self.drawComponentValuesTopSide_property.removeEBObserver (inObserver)
/*    self.mObserversOf_drawComponentValuesTopSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drawComponentValuesTopSide_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'drawComponentValuesBottomSide' stored property
  //····················································································································

  final let drawComponentValuesBottomSide_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_drawComponentValuesBottomSide = EBWeakEventSet ()

  //····················································································································

  final var drawComponentValuesBottomSide_property_selection : EBSelection <Bool?> { // §
    return self.drawComponentValuesBottomSide_property.selection
  }

  //····················································································································

  final func addEBObserverOf_drawComponentValuesBottomSide (_ inObserver : EBEvent) {
    self.drawComponentValuesBottomSide_property.addEBObserver (inObserver)
/*    self.mObserversOf_drawComponentValuesBottomSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.drawComponentValuesBottomSide_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_drawComponentValuesBottomSide (_ inObserver : EBEvent) {
    self.drawComponentValuesBottomSide_property.removeEBObserver (inObserver)
/*    self.mObserversOf_drawComponentValuesBottomSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drawComponentValuesBottomSide_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'drawPackageLegendTopSide' stored property
  //····················································································································

  final let drawPackageLegendTopSide_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_drawPackageLegendTopSide = EBWeakEventSet ()

  //····················································································································

  final var drawPackageLegendTopSide_property_selection : EBSelection <Bool?> { // §
    return self.drawPackageLegendTopSide_property.selection
  }

  //····················································································································

  final func addEBObserverOf_drawPackageLegendTopSide (_ inObserver : EBEvent) {
    self.drawPackageLegendTopSide_property.addEBObserver (inObserver)
/*    self.mObserversOf_drawPackageLegendTopSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.drawPackageLegendTopSide_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_drawPackageLegendTopSide (_ inObserver : EBEvent) {
    self.drawPackageLegendTopSide_property.removeEBObserver (inObserver)
/*    self.mObserversOf_drawPackageLegendTopSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drawPackageLegendTopSide_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'drawPackageLegendBottomSide' stored property
  //····················································································································

  final let drawPackageLegendBottomSide_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_drawPackageLegendBottomSide = EBWeakEventSet ()

  //····················································································································

  final var drawPackageLegendBottomSide_property_selection : EBSelection <Bool?> { // §
    return self.drawPackageLegendBottomSide_property.selection
  }

  //····················································································································

  final func addEBObserverOf_drawPackageLegendBottomSide (_ inObserver : EBEvent) {
    self.drawPackageLegendBottomSide_property.addEBObserver (inObserver)
/*    self.mObserversOf_drawPackageLegendBottomSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.drawPackageLegendBottomSide_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_drawPackageLegendBottomSide (_ inObserver : EBEvent) {
    self.drawPackageLegendBottomSide_property.removeEBObserver (inObserver)
/*    self.mObserversOf_drawPackageLegendBottomSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drawPackageLegendBottomSide_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'drawPadHolesInPDF' stored property
  //····················································································································

  final let drawPadHolesInPDF_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_drawPadHolesInPDF = EBWeakEventSet ()

  //····················································································································

  final var drawPadHolesInPDF_property_selection : EBSelection <Bool?> { // §
    return self.drawPadHolesInPDF_property.selection
  }

  //····················································································································

  final func addEBObserverOf_drawPadHolesInPDF (_ inObserver : EBEvent) {
    self.drawPadHolesInPDF_property.addEBObserver (inObserver)
/*    self.mObserversOf_drawPadHolesInPDF.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.drawPadHolesInPDF_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_drawPadHolesInPDF (_ inObserver : EBEvent) {
    self.drawPadHolesInPDF_property.removeEBObserver (inObserver)
/*    self.mObserversOf_drawPadHolesInPDF.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drawPadHolesInPDF_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'drawPadsTopSide' stored property
  //····················································································································

  final let drawPadsTopSide_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_drawPadsTopSide = EBWeakEventSet ()

  //····················································································································

  final var drawPadsTopSide_property_selection : EBSelection <Bool?> { // §
    return self.drawPadsTopSide_property.selection
  }

  //····················································································································

  final func addEBObserverOf_drawPadsTopSide (_ inObserver : EBEvent) {
    self.drawPadsTopSide_property.addEBObserver (inObserver)
/*    self.mObserversOf_drawPadsTopSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.drawPadsTopSide_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_drawPadsTopSide (_ inObserver : EBEvent) {
    self.drawPadsTopSide_property.removeEBObserver (inObserver)
/*    self.mObserversOf_drawPadsTopSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drawPadsTopSide_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'drawPadsBottomSide' stored property
  //····················································································································

  final let drawPadsBottomSide_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_drawPadsBottomSide = EBWeakEventSet ()

  //····················································································································

  final var drawPadsBottomSide_property_selection : EBSelection <Bool?> { // §
    return self.drawPadsBottomSide_property.selection
  }

  //····················································································································

  final func addEBObserverOf_drawPadsBottomSide (_ inObserver : EBEvent) {
    self.drawPadsBottomSide_property.addEBObserver (inObserver)
/*    self.mObserversOf_drawPadsBottomSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.drawPadsBottomSide_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_drawPadsBottomSide (_ inObserver : EBEvent) {
    self.drawPadsBottomSide_property.removeEBObserver (inObserver)
/*    self.mObserversOf_drawPadsBottomSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drawPadsBottomSide_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'drawTextsLayoutTopSide' stored property
  //····················································································································

  final let drawTextsLayoutTopSide_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_drawTextsLayoutTopSide = EBWeakEventSet ()

  //····················································································································

  final var drawTextsLayoutTopSide_property_selection : EBSelection <Bool?> { // §
    return self.drawTextsLayoutTopSide_property.selection
  }

  //····················································································································

  final func addEBObserverOf_drawTextsLayoutTopSide (_ inObserver : EBEvent) {
    self.drawTextsLayoutTopSide_property.addEBObserver (inObserver)
/*    self.mObserversOf_drawTextsLayoutTopSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.drawTextsLayoutTopSide_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_drawTextsLayoutTopSide (_ inObserver : EBEvent) {
    self.drawTextsLayoutTopSide_property.removeEBObserver (inObserver)
/*    self.mObserversOf_drawTextsLayoutTopSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drawTextsLayoutTopSide_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'drawTextsLayoutBottomSide' stored property
  //····················································································································

  final let drawTextsLayoutBottomSide_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_drawTextsLayoutBottomSide = EBWeakEventSet ()

  //····················································································································

  final var drawTextsLayoutBottomSide_property_selection : EBSelection <Bool?> { // §
    return self.drawTextsLayoutBottomSide_property.selection
  }

  //····················································································································

  final func addEBObserverOf_drawTextsLayoutBottomSide (_ inObserver : EBEvent) {
    self.drawTextsLayoutBottomSide_property.addEBObserver (inObserver)
/*    self.mObserversOf_drawTextsLayoutBottomSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.drawTextsLayoutBottomSide_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_drawTextsLayoutBottomSide (_ inObserver : EBEvent) {
    self.drawTextsLayoutBottomSide_property.removeEBObserver (inObserver)
/*    self.mObserversOf_drawTextsLayoutBottomSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drawTextsLayoutBottomSide_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'drawTextsLegendTopSide' stored property
  //····················································································································

  final let drawTextsLegendTopSide_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_drawTextsLegendTopSide = EBWeakEventSet ()

  //····················································································································

  final var drawTextsLegendTopSide_property_selection : EBSelection <Bool?> { // §
    return self.drawTextsLegendTopSide_property.selection
  }

  //····················································································································

  final func addEBObserverOf_drawTextsLegendTopSide (_ inObserver : EBEvent) {
    self.drawTextsLegendTopSide_property.addEBObserver (inObserver)
/*    self.mObserversOf_drawTextsLegendTopSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.drawTextsLegendTopSide_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_drawTextsLegendTopSide (_ inObserver : EBEvent) {
    self.drawTextsLegendTopSide_property.removeEBObserver (inObserver)
/*    self.mObserversOf_drawTextsLegendTopSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drawTextsLegendTopSide_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'drawTextsLegendBottomSide' stored property
  //····················································································································

  final let drawTextsLegendBottomSide_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_drawTextsLegendBottomSide = EBWeakEventSet ()

  //····················································································································

  final var drawTextsLegendBottomSide_property_selection : EBSelection <Bool?> { // §
    return self.drawTextsLegendBottomSide_property.selection
  }

  //····················································································································

  final func addEBObserverOf_drawTextsLegendBottomSide (_ inObserver : EBEvent) {
    self.drawTextsLegendBottomSide_property.addEBObserver (inObserver)
/*    self.mObserversOf_drawTextsLegendBottomSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.drawTextsLegendBottomSide_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_drawTextsLegendBottomSide (_ inObserver : EBEvent) {
    self.drawTextsLegendBottomSide_property.removeEBObserver (inObserver)
/*    self.mObserversOf_drawTextsLegendBottomSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drawTextsLegendBottomSide_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'drawTracksTopSide' stored property
  //····················································································································

  final let drawTracksTopSide_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_drawTracksTopSide = EBWeakEventSet ()

  //····················································································································

  final var drawTracksTopSide_property_selection : EBSelection <Bool?> { // §
    return self.drawTracksTopSide_property.selection
  }

  //····················································································································

  final func addEBObserverOf_drawTracksTopSide (_ inObserver : EBEvent) {
    self.drawTracksTopSide_property.addEBObserver (inObserver)
/*    self.mObserversOf_drawTracksTopSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.drawTracksTopSide_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_drawTracksTopSide (_ inObserver : EBEvent) {
    self.drawTracksTopSide_property.removeEBObserver (inObserver)
/*    self.mObserversOf_drawTracksTopSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drawTracksTopSide_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'drawTracksBottomSide' stored property
  //····················································································································

  final let drawTracksBottomSide_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_drawTracksBottomSide = EBWeakEventSet ()

  //····················································································································

  final var drawTracksBottomSide_property_selection : EBSelection <Bool?> { // §
    return self.drawTracksBottomSide_property.selection
  }

  //····················································································································

  final func addEBObserverOf_drawTracksBottomSide (_ inObserver : EBEvent) {
    self.drawTracksBottomSide_property.addEBObserver (inObserver)
/*    self.mObserversOf_drawTracksBottomSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.drawTracksBottomSide_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_drawTracksBottomSide (_ inObserver : EBEvent) {
    self.drawTracksBottomSide_property.removeEBObserver (inObserver)
/*    self.mObserversOf_drawTracksBottomSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drawTracksBottomSide_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'drawVias' stored property
  //····················································································································

  final let drawVias_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_drawVias = EBWeakEventSet ()

  //····················································································································

  final var drawVias_property_selection : EBSelection <Bool?> { // §
    return self.drawVias_property.selection
  }

  //····················································································································

  final func addEBObserverOf_drawVias (_ inObserver : EBEvent) {
    self.drawVias_property.addEBObserver (inObserver)
/*    self.mObserversOf_drawVias.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.drawVias_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_drawVias (_ inObserver : EBEvent) {
    self.drawVias_property.removeEBObserver (inObserver)
/*    self.mObserversOf_drawVias.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drawVias_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'fileExtension' stored property
  //····················································································································

  final let fileExtension_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_fileExtension = EBWeakEventSet ()

  //····················································································································

  final var fileExtension_property_selection : EBSelection <String?> { // §
    return self.fileExtension_property.selection
  }

  //····················································································································

  final func addEBObserverOf_fileExtension (_ inObserver : EBEvent) {
    self.fileExtension_property.addEBObserver (inObserver)
/*    self.mObserversOf_fileExtension.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.fileExtension_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_fileExtension (_ inObserver : EBEvent) {
    self.fileExtension_property.removeEBObserver (inObserver)
/*    self.mObserversOf_fileExtension.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.fileExtension_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'horizontalMirror' stored property
  //····················································································································

  final let horizontalMirror_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_horizontalMirror = EBWeakEventSet ()

  //····················································································································

  final var horizontalMirror_property_selection : EBSelection <Bool?> { // §
    return self.horizontalMirror_property.selection
  }

  //····················································································································

  final func addEBObserverOf_horizontalMirror (_ inObserver : EBEvent) {
    self.horizontalMirror_property.addEBObserver (inObserver)
/*    self.mObserversOf_horizontalMirror.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.horizontalMirror_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_horizontalMirror (_ inObserver : EBEvent) {
    self.horizontalMirror_property.removeEBObserver (inObserver)
/*    self.mObserversOf_horizontalMirror.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.horizontalMirror_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'name' stored property
  //····················································································································

  final let name_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_name = EBWeakEventSet ()

  //····················································································································

  final var name_property_selection : EBSelection <String?> { // §
    return self.name_property.selection
  }

  //····················································································································

  final func addEBObserverOf_name (_ inObserver : EBEvent) {
    self.name_property.addEBObserver (inObserver)
/*    self.mObserversOf_name.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.name_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_name (_ inObserver : EBEvent) {
    self.name_property.removeEBObserver (inObserver)
/*    self.mObserversOf_name.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.name_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'measurementUnitForPadHoleInPDF' stored property
  //····················································································································

  final let measurementUnitForPadHoleInPDF_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_measurementUnitForPadHoleInPDF = EBWeakEventSet ()

  //····················································································································

  final var measurementUnitForPadHoleInPDF_property_selection : EBSelection <Int?> { // §
    return self.measurementUnitForPadHoleInPDF_property.selection
  }

  //····················································································································

  final func addEBObserverOf_measurementUnitForPadHoleInPDF (_ inObserver : EBEvent) {
    self.measurementUnitForPadHoleInPDF_property.addEBObserver (inObserver)
/*    self.mObserversOf_measurementUnitForPadHoleInPDF.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.measurementUnitForPadHoleInPDF_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_measurementUnitForPadHoleInPDF (_ inObserver : EBEvent) {
    self.measurementUnitForPadHoleInPDF_property.removeEBObserver (inObserver)
/*    self.mObserversOf_measurementUnitForPadHoleInPDF.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.measurementUnitForPadHoleInPDF_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'padHoleDiameterInPDF' stored property
  //····················································································································

  final let padHoleDiameterInPDF_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_padHoleDiameterInPDF = EBWeakEventSet ()

  //····················································································································

  final var padHoleDiameterInPDF_property_selection : EBSelection <Int?> { // §
    return self.padHoleDiameterInPDF_property.selection
  }

  //····················································································································

  final func addEBObserverOf_padHoleDiameterInPDF (_ inObserver : EBEvent) {
    self.padHoleDiameterInPDF_property.addEBObserver (inObserver)
/*    self.mObserversOf_padHoleDiameterInPDF.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.padHoleDiameterInPDF_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_padHoleDiameterInPDF (_ inObserver : EBEvent) {
    self.padHoleDiameterInPDF_property.removeEBObserver (inObserver)
/*    self.mObserversOf_padHoleDiameterInPDF.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padHoleDiameterInPDF_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   INIT 
  //····················································································································

  override init () {
    super.init ()
  //--- Configure drawBoardLimits simple stored property
    self.drawBoardLimits_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.drawBoardLimits_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure drawInternalBoardLimits simple stored property
    self.drawInternalBoardLimits_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.drawInternalBoardLimits_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure drawComponentNamesTopSide simple stored property
    self.drawComponentNamesTopSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.drawComponentNamesTopSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure drawComponentNamesBottomSide simple stored property
    self.drawComponentNamesBottomSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.drawComponentNamesBottomSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure drawComponentValuesTopSide simple stored property
    self.drawComponentValuesTopSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.drawComponentValuesTopSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure drawComponentValuesBottomSide simple stored property
    self.drawComponentValuesBottomSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.drawComponentValuesBottomSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure drawPackageLegendTopSide simple stored property
    self.drawPackageLegendTopSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.drawPackageLegendTopSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure drawPackageLegendBottomSide simple stored property
    self.drawPackageLegendBottomSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.drawPackageLegendBottomSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure drawPadHolesInPDF simple stored property
    self.drawPadHolesInPDF_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.drawPadHolesInPDF_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure drawPadsTopSide simple stored property
    self.drawPadsTopSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.drawPadsTopSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure drawPadsBottomSide simple stored property
    self.drawPadsBottomSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.drawPadsBottomSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure drawTextsLayoutTopSide simple stored property
    self.drawTextsLayoutTopSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.drawTextsLayoutTopSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure drawTextsLayoutBottomSide simple stored property
    self.drawTextsLayoutBottomSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.drawTextsLayoutBottomSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure drawTextsLegendTopSide simple stored property
    self.drawTextsLegendTopSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.drawTextsLegendTopSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure drawTextsLegendBottomSide simple stored property
    self.drawTextsLegendBottomSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.drawTextsLegendBottomSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure drawTracksTopSide simple stored property
    self.drawTracksTopSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.drawTracksTopSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure drawTracksBottomSide simple stored property
    self.drawTracksBottomSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.drawTracksBottomSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure drawVias simple stored property
    self.drawVias_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.drawVias_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure fileExtension simple stored property
    self.fileExtension_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.fileExtension_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure horizontalMirror simple stored property
    self.horizontalMirror_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.horizontalMirror_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure name simple stored property
    self.name_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.name_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure measurementUnitForPadHoleInPDF simple stored property
    self.measurementUnitForPadHoleInPDF_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.measurementUnitForPadHoleInPDF_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure padHoleDiameterInPDF simple stored property
    self.padHoleDiameterInPDF_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.padHoleDiameterInPDF_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject ArtworkFileGenerationParameters
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_ArtworkFileGenerationParameters : ReadOnlyObject_ArtworkFileGenerationParameters {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_ArtworkFileGenerationParameters? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_ArtworkFileGenerationParameters?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : ArtworkFileGenerationParameters? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < ArtworkFileGenerationParameters? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : ArtworkFileGenerationParameters? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_ArtworkFileGenerationParameters
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_ArtworkFileGenerationParameters : ReadOnlyObject_ArtworkFileGenerationParameters {

  //····················································································································
 
  func setProp (_ inValue : ArtworkFileGenerationParameters?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_ArtworkFileGenerationParameters
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_ArtworkFileGenerationParameters : ReadWriteObject_ArtworkFileGenerationParameters {

  //····················································································································

  private var mModel : ReadWriteObject_ArtworkFileGenerationParameters? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_ArtworkFileGenerationParameters?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : ArtworkFileGenerationParameters?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : ArtworkFileGenerationParameters?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < ArtworkFileGenerationParameters? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : ArtworkFileGenerationParameters? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_ArtworkFileGenerationParameters 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_ArtworkFileGenerationParameters : ReadWriteObject_ArtworkFileGenerationParameters, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ArtworkFileGenerationParameters) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ArtworkFileGenerationParameters) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ArtworkFileGenerationParameters) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ArtworkFileGenerationParameters) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : ArtworkFileGenerationParameters?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < ArtworkFileGenerationParameters? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : ArtworkFileGenerationParameters?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : ArtworkFileGenerationParameters? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

