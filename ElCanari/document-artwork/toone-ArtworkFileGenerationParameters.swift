//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_ArtworkFileGenerationParameters 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_ArtworkFileGenerationParameters : ReadOnlyAbstractObjectProperty <ArtworkFileGenerationParameters> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : ArtworkFileGenerationParameters?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.drawBoardLimits_property.removeEBObserver (self.drawBoardLimits_property) // Stored property
    inOldValue?.drawInternalBoardLimits_property.removeEBObserver (self.drawInternalBoardLimits_property) // Stored property
    inOldValue?.drawComponentNamesTopSide_property.removeEBObserver (self.drawComponentNamesTopSide_property) // Stored property
    inOldValue?.drawComponentNamesBottomSide_property.removeEBObserver (self.drawComponentNamesBottomSide_property) // Stored property
    inOldValue?.drawComponentValuesTopSide_property.removeEBObserver (self.drawComponentValuesTopSide_property) // Stored property
    inOldValue?.drawComponentValuesBottomSide_property.removeEBObserver (self.drawComponentValuesBottomSide_property) // Stored property
    inOldValue?.drawPackageLegendTopSide_property.removeEBObserver (self.drawPackageLegendTopSide_property) // Stored property
    inOldValue?.drawPackageLegendBottomSide_property.removeEBObserver (self.drawPackageLegendBottomSide_property) // Stored property
    inOldValue?.drawPadHolesInPDF_property.removeEBObserver (self.drawPadHolesInPDF_property) // Stored property
    inOldValue?.drawPadsTopSide_property.removeEBObserver (self.drawPadsTopSide_property) // Stored property
    inOldValue?.drawPadsBottomSide_property.removeEBObserver (self.drawPadsBottomSide_property) // Stored property
    inOldValue?.drawTextsLayoutTopSide_property.removeEBObserver (self.drawTextsLayoutTopSide_property) // Stored property
    inOldValue?.drawTextsLayoutBottomSide_property.removeEBObserver (self.drawTextsLayoutBottomSide_property) // Stored property
    inOldValue?.drawTextsLegendTopSide_property.removeEBObserver (self.drawTextsLegendTopSide_property) // Stored property
    inOldValue?.drawTextsLegendBottomSide_property.removeEBObserver (self.drawTextsLegendBottomSide_property) // Stored property
    inOldValue?.drawTracksTopSide_property.removeEBObserver (self.drawTracksTopSide_property) // Stored property
    inOldValue?.drawTracksBottomSide_property.removeEBObserver (self.drawTracksBottomSide_property) // Stored property
    inOldValue?.drawVias_property.removeEBObserver (self.drawVias_property) // Stored property
    inOldValue?.fileExtension_property.removeEBObserver (self.fileExtension_property) // Stored property
    inOldValue?.horizontalMirror_property.removeEBObserver (self.horizontalMirror_property) // Stored property
    inOldValue?.name_property.removeEBObserver (self.name_property) // Stored property
    inOldValue?.measurementUnitForPadHoleInPDF_property.removeEBObserver (self.measurementUnitForPadHoleInPDF_property) // Stored property
    inOldValue?.padHoleDiameterInPDF_property.removeEBObserver (self.padHoleDiameterInPDF_property) // Stored property
  //--- Add observers to added objects
    self.mInternalValue?.drawBoardLimits_property.addEBObserver (self.drawBoardLimits_property) // Stored property
    self.mInternalValue?.drawInternalBoardLimits_property.addEBObserver (self.drawInternalBoardLimits_property) // Stored property
    self.mInternalValue?.drawComponentNamesTopSide_property.addEBObserver (self.drawComponentNamesTopSide_property) // Stored property
    self.mInternalValue?.drawComponentNamesBottomSide_property.addEBObserver (self.drawComponentNamesBottomSide_property) // Stored property
    self.mInternalValue?.drawComponentValuesTopSide_property.addEBObserver (self.drawComponentValuesTopSide_property) // Stored property
    self.mInternalValue?.drawComponentValuesBottomSide_property.addEBObserver (self.drawComponentValuesBottomSide_property) // Stored property
    self.mInternalValue?.drawPackageLegendTopSide_property.addEBObserver (self.drawPackageLegendTopSide_property) // Stored property
    self.mInternalValue?.drawPackageLegendBottomSide_property.addEBObserver (self.drawPackageLegendBottomSide_property) // Stored property
    self.mInternalValue?.drawPadHolesInPDF_property.addEBObserver (self.drawPadHolesInPDF_property) // Stored property
    self.mInternalValue?.drawPadsTopSide_property.addEBObserver (self.drawPadsTopSide_property) // Stored property
    self.mInternalValue?.drawPadsBottomSide_property.addEBObserver (self.drawPadsBottomSide_property) // Stored property
    self.mInternalValue?.drawTextsLayoutTopSide_property.addEBObserver (self.drawTextsLayoutTopSide_property) // Stored property
    self.mInternalValue?.drawTextsLayoutBottomSide_property.addEBObserver (self.drawTextsLayoutBottomSide_property) // Stored property
    self.mInternalValue?.drawTextsLegendTopSide_property.addEBObserver (self.drawTextsLegendTopSide_property) // Stored property
    self.mInternalValue?.drawTextsLegendBottomSide_property.addEBObserver (self.drawTextsLegendBottomSide_property) // Stored property
    self.mInternalValue?.drawTracksTopSide_property.addEBObserver (self.drawTracksTopSide_property) // Stored property
    self.mInternalValue?.drawTracksBottomSide_property.addEBObserver (self.drawTracksBottomSide_property) // Stored property
    self.mInternalValue?.drawVias_property.addEBObserver (self.drawVias_property) // Stored property
    self.mInternalValue?.fileExtension_property.addEBObserver (self.fileExtension_property) // Stored property
    self.mInternalValue?.horizontalMirror_property.addEBObserver (self.horizontalMirror_property) // Stored property
    self.mInternalValue?.name_property.addEBObserver (self.name_property) // Stored property
    self.mInternalValue?.measurementUnitForPadHoleInPDF_property.addEBObserver (self.measurementUnitForPadHoleInPDF_property) // Stored property
    self.mInternalValue?.padHoleDiameterInPDF_property.addEBObserver (self.padHoleDiameterInPDF_property) // Stored property
  }

  //····················································································································
  //   init
  //····················································································································

  override init () {
    super.init ()
    self.drawBoardLimits_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.drawBoardLimits_property.prop ?? .empty }
    self.drawBoardLimits_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.drawBoardLimits_property.setProp (inValue) }
    self.drawInternalBoardLimits_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.drawInternalBoardLimits_property.prop ?? .empty }
    self.drawInternalBoardLimits_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.drawInternalBoardLimits_property.setProp (inValue) }
    self.drawComponentNamesTopSide_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.drawComponentNamesTopSide_property.prop ?? .empty }
    self.drawComponentNamesTopSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.drawComponentNamesTopSide_property.setProp (inValue) }
    self.drawComponentNamesBottomSide_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.drawComponentNamesBottomSide_property.prop ?? .empty }
    self.drawComponentNamesBottomSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.drawComponentNamesBottomSide_property.setProp (inValue) }
    self.drawComponentValuesTopSide_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.drawComponentValuesTopSide_property.prop ?? .empty }
    self.drawComponentValuesTopSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.drawComponentValuesTopSide_property.setProp (inValue) }
    self.drawComponentValuesBottomSide_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.drawComponentValuesBottomSide_property.prop ?? .empty }
    self.drawComponentValuesBottomSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.drawComponentValuesBottomSide_property.setProp (inValue) }
    self.drawPackageLegendTopSide_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.drawPackageLegendTopSide_property.prop ?? .empty }
    self.drawPackageLegendTopSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.drawPackageLegendTopSide_property.setProp (inValue) }
    self.drawPackageLegendBottomSide_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.drawPackageLegendBottomSide_property.prop ?? .empty }
    self.drawPackageLegendBottomSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.drawPackageLegendBottomSide_property.setProp (inValue) }
    self.drawPadHolesInPDF_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.drawPadHolesInPDF_property.prop ?? .empty }
    self.drawPadHolesInPDF_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.drawPadHolesInPDF_property.setProp (inValue) }
    self.drawPadsTopSide_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.drawPadsTopSide_property.prop ?? .empty }
    self.drawPadsTopSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.drawPadsTopSide_property.setProp (inValue) }
    self.drawPadsBottomSide_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.drawPadsBottomSide_property.prop ?? .empty }
    self.drawPadsBottomSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.drawPadsBottomSide_property.setProp (inValue) }
    self.drawTextsLayoutTopSide_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.drawTextsLayoutTopSide_property.prop ?? .empty }
    self.drawTextsLayoutTopSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.drawTextsLayoutTopSide_property.setProp (inValue) }
    self.drawTextsLayoutBottomSide_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.drawTextsLayoutBottomSide_property.prop ?? .empty }
    self.drawTextsLayoutBottomSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.drawTextsLayoutBottomSide_property.setProp (inValue) }
    self.drawTextsLegendTopSide_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.drawTextsLegendTopSide_property.prop ?? .empty }
    self.drawTextsLegendTopSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.drawTextsLegendTopSide_property.setProp (inValue) }
    self.drawTextsLegendBottomSide_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.drawTextsLegendBottomSide_property.prop ?? .empty }
    self.drawTextsLegendBottomSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.drawTextsLegendBottomSide_property.setProp (inValue) }
    self.drawTracksTopSide_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.drawTracksTopSide_property.prop ?? .empty }
    self.drawTracksTopSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.drawTracksTopSide_property.setProp (inValue) }
    self.drawTracksBottomSide_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.drawTracksBottomSide_property.prop ?? .empty }
    self.drawTracksBottomSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.drawTracksBottomSide_property.setProp (inValue) }
    self.drawVias_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.drawVias_property.prop ?? .empty }
    self.drawVias_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.drawVias_property.setProp (inValue) }
    self.fileExtension_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.fileExtension_property.prop ?? .empty }
    self.fileExtension_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.fileExtension_property.setProp (inValue) }
    self.horizontalMirror_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.horizontalMirror_property.prop ?? .empty }
    self.horizontalMirror_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.horizontalMirror_property.setProp (inValue) }
    self.name_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.name_property.prop ?? .empty }
    self.name_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.name_property.setProp (inValue) }
    self.measurementUnitForPadHoleInPDF_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.measurementUnitForPadHoleInPDF_property.prop ?? .empty }
    self.measurementUnitForPadHoleInPDF_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.measurementUnitForPadHoleInPDF_property.setProp (inValue) }
    self.padHoleDiameterInPDF_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.padHoleDiameterInPDF_property.prop ?? .empty }
    self.padHoleDiameterInPDF_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.padHoleDiameterInPDF_property.setProp (inValue) }
  }

  //····················································································································
  //   Proxy of 'drawBoardLimits' stored property
  //····················································································································

  let drawBoardLimits_property = EBPropertyProxy_Bool ()

  var drawBoardLimits_property_selection : EBSelection <Bool> {
    switch (self.drawBoardLimits_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'drawInternalBoardLimits' stored property
  //····················································································································

  let drawInternalBoardLimits_property = EBPropertyProxy_Bool ()

  var drawInternalBoardLimits_property_selection : EBSelection <Bool> {
    switch (self.drawInternalBoardLimits_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'drawComponentNamesTopSide' stored property
  //····················································································································

  let drawComponentNamesTopSide_property = EBPropertyProxy_Bool ()

  var drawComponentNamesTopSide_property_selection : EBSelection <Bool> {
    switch (self.drawComponentNamesTopSide_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'drawComponentNamesBottomSide' stored property
  //····················································································································

  let drawComponentNamesBottomSide_property = EBPropertyProxy_Bool ()

  var drawComponentNamesBottomSide_property_selection : EBSelection <Bool> {
    switch (self.drawComponentNamesBottomSide_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'drawComponentValuesTopSide' stored property
  //····················································································································

  let drawComponentValuesTopSide_property = EBPropertyProxy_Bool ()

  var drawComponentValuesTopSide_property_selection : EBSelection <Bool> {
    switch (self.drawComponentValuesTopSide_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'drawComponentValuesBottomSide' stored property
  //····················································································································

  let drawComponentValuesBottomSide_property = EBPropertyProxy_Bool ()

  var drawComponentValuesBottomSide_property_selection : EBSelection <Bool> {
    switch (self.drawComponentValuesBottomSide_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'drawPackageLegendTopSide' stored property
  //····················································································································

  let drawPackageLegendTopSide_property = EBPropertyProxy_Bool ()

  var drawPackageLegendTopSide_property_selection : EBSelection <Bool> {
    switch (self.drawPackageLegendTopSide_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'drawPackageLegendBottomSide' stored property
  //····················································································································

  let drawPackageLegendBottomSide_property = EBPropertyProxy_Bool ()

  var drawPackageLegendBottomSide_property_selection : EBSelection <Bool> {
    switch (self.drawPackageLegendBottomSide_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'drawPadHolesInPDF' stored property
  //····················································································································

  let drawPadHolesInPDF_property = EBPropertyProxy_Bool ()

  var drawPadHolesInPDF_property_selection : EBSelection <Bool> {
    switch (self.drawPadHolesInPDF_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'drawPadsTopSide' stored property
  //····················································································································

  let drawPadsTopSide_property = EBPropertyProxy_Bool ()

  var drawPadsTopSide_property_selection : EBSelection <Bool> {
    switch (self.drawPadsTopSide_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'drawPadsBottomSide' stored property
  //····················································································································

  let drawPadsBottomSide_property = EBPropertyProxy_Bool ()

  var drawPadsBottomSide_property_selection : EBSelection <Bool> {
    switch (self.drawPadsBottomSide_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'drawTextsLayoutTopSide' stored property
  //····················································································································

  let drawTextsLayoutTopSide_property = EBPropertyProxy_Bool ()

  var drawTextsLayoutTopSide_property_selection : EBSelection <Bool> {
    switch (self.drawTextsLayoutTopSide_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'drawTextsLayoutBottomSide' stored property
  //····················································································································

  let drawTextsLayoutBottomSide_property = EBPropertyProxy_Bool ()

  var drawTextsLayoutBottomSide_property_selection : EBSelection <Bool> {
    switch (self.drawTextsLayoutBottomSide_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'drawTextsLegendTopSide' stored property
  //····················································································································

  let drawTextsLegendTopSide_property = EBPropertyProxy_Bool ()

  var drawTextsLegendTopSide_property_selection : EBSelection <Bool> {
    switch (self.drawTextsLegendTopSide_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'drawTextsLegendBottomSide' stored property
  //····················································································································

  let drawTextsLegendBottomSide_property = EBPropertyProxy_Bool ()

  var drawTextsLegendBottomSide_property_selection : EBSelection <Bool> {
    switch (self.drawTextsLegendBottomSide_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'drawTracksTopSide' stored property
  //····················································································································

  let drawTracksTopSide_property = EBPropertyProxy_Bool ()

  var drawTracksTopSide_property_selection : EBSelection <Bool> {
    switch (self.drawTracksTopSide_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'drawTracksBottomSide' stored property
  //····················································································································

  let drawTracksBottomSide_property = EBPropertyProxy_Bool ()

  var drawTracksBottomSide_property_selection : EBSelection <Bool> {
    switch (self.drawTracksBottomSide_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'drawVias' stored property
  //····················································································································

  let drawVias_property = EBPropertyProxy_Bool ()

  var drawVias_property_selection : EBSelection <Bool> {
    switch (self.drawVias_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'fileExtension' stored property
  //····················································································································

  let fileExtension_property = EBPropertyProxy_String ()

  var fileExtension_property_selection : EBSelection <String> {
    switch (self.fileExtension_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'horizontalMirror' stored property
  //····················································································································

  let horizontalMirror_property = EBPropertyProxy_Bool ()

  var horizontalMirror_property_selection : EBSelection <Bool> {
    switch (self.horizontalMirror_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'name' stored property
  //····················································································································

  let name_property = EBPropertyProxy_String ()

  var name_property_selection : EBSelection <String> {
    switch (self.name_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'measurementUnitForPadHoleInPDF' stored property
  //····················································································································

  let measurementUnitForPadHoleInPDF_property = EBPropertyProxy_Int ()

  var measurementUnitForPadHoleInPDF_property_selection : EBSelection <Int> {
    switch (self.measurementUnitForPadHoleInPDF_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'padHoleDiameterInPDF' stored property
  //····················································································································

  let padHoleDiameterInPDF_property = EBPropertyProxy_Int ()

  var padHoleDiameterInPDF_property_selection : EBSelection <Int> {
    switch (self.padHoleDiameterInPDF_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    TransientObject ArtworkFileGenerationParameters
//----------------------------------------------------------------------------------------------------------------------

class TransientObject_ArtworkFileGenerationParameters : ReadOnlyObject_ArtworkFileGenerationParameters {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_ArtworkFileGenerationParameters? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_ArtworkFileGenerationParameters?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : ArtworkFileGenerationParameters? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < ArtworkFileGenerationParameters? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : ArtworkFileGenerationParameters? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_ArtworkFileGenerationParameters
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_ArtworkFileGenerationParameters : ReadOnlyObject_ArtworkFileGenerationParameters {

  //····················································································································
 
  func setProp (_ inValue : ArtworkFileGenerationParameters?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_ArtworkFileGenerationParameters
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_ArtworkFileGenerationParameters : ReadWriteObject_ArtworkFileGenerationParameters {

  //····················································································································

  private var mModel : ReadWriteObject_ArtworkFileGenerationParameters? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_ArtworkFileGenerationParameters?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : ArtworkFileGenerationParameters?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : ArtworkFileGenerationParameters?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < ArtworkFileGenerationParameters? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : ArtworkFileGenerationParameters? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_ArtworkFileGenerationParameters 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_ArtworkFileGenerationParameters : ReadWriteObject_ArtworkFileGenerationParameters, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ArtworkFileGenerationParameters) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ArtworkFileGenerationParameters) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ArtworkFileGenerationParameters) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ArtworkFileGenerationParameters) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : ArtworkFileGenerationParameters?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < ArtworkFileGenerationParameters? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : ArtworkFileGenerationParameters?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : ArtworkFileGenerationParameters? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

