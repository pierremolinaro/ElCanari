//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Protocol ValuePropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ValuePropertyProtocol : Equatable {
  func ebHashValue () -> UInt32
  func convertToNSObject () -> NSObject
  static func convertFromNSObject (object : NSObject) -> Self
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadOnlyValueProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadOnlyValueProperty <T> : EBAbstractProperty where T : Equatable {

  //····················································································································

  var prop : EBSelection <T> { return .empty } // Abstract method

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadWriteValueProperty <T> (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadWriteValueProperty <T> : EBReadOnlyValueProperty <T> where T : Equatable {

  //····················································································································

  func setProp (_ value : T) { } // Abstract method

  //····················································································································

  func validateAndSetProp (_ candidateValue : T, windowForSheet inWindow:NSWindow?) -> Bool {
    return false
  } // Abstract method

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBPropertyValueProxy <T : ValuePropertyProtocol>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBPropertyValueProxy <T : ValuePropertyProtocol> : EBReadWriteValueProperty <T> {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection <T> > = nil
  var mWriteModelFunction : Optional < (T) -> Void > = nil
  var mValidateAndWriteModelFunction : Optional < (T, NSWindow?) -> Bool > = nil
  private var mCachedValue : EBSelection <T>? = nil
  
  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      self.updateValueExplorer (possibleValue: self.mCachedValue)
    }
  }

  //····················································································································

  private func updateValueExplorer (possibleValue : EBSelection <T>?) {
    if let value = possibleValue {
      switch value {
      case .empty :
        self.mValueExplorer?.stringValue = "—"
      case .multiple :
        self.mValueExplorer?.stringValue = "—"
      case .single (let value) :
        self.mValueExplorer?.stringValue = "\(value)"
      }
    }else{
      self.mValueExplorer?.stringValue = "nil"
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("Proxy \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("Proxy \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

  override var prop : EBSelection <T> {
    if let unReadModelFunction = self.mReadModelFunction, self.mCachedValue == nil {
      self.mCachedValue = unReadModelFunction ()
      self.updateValueExplorer (possibleValue: self.mCachedValue)
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
    return self.mCachedValue!
  }

  //····················································································································
  
  override func setProp (_ value : T) {
    self.mWriteModelFunction? (value)
  }

  //····················································································································

  override func validateAndSetProp (_ candidateValue : T,
                                    windowForSheet inWindow : NSWindow?) -> Bool {
    var result = false
    if let unwValidateAndWriteModelFunction = self.mValidateAndWriteModelFunction {
      result = unwValidateAndWriteModelFunction (candidateValue, inWindow)
    }
    return result
  }
  
  //····················································································································
  
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBStoredValueProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBStoredValueProperty <T : ValuePropertyProtocol> : EBReadWriteValueProperty <T> {

  //····················································································································

  weak var ebUndoManager : UndoManager?  // SOULD BE WEAK
  fileprivate var mPreferenceKey : String?
  var mSetterDelegate : Optional < (_ inValue : T) -> Void >

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      self.mValueExplorer?.stringValue = "\(mValue)"
    }
  }

  //····················································································································

  init (defaultValue inValue : T) {
    mValue = inValue
    mPreferenceKey = nil
    mSetterDelegate = nil
    super.init ()
  }

  //····················································································································

  init (defaultValue inValue : T, prefKey inPreferenceKey : String) {
    mValue = inValue
    mPreferenceKey = inPreferenceKey
    mSetterDelegate = nil
    super.init ()
  //--- Read from preferences
    let possibleValue = UserDefaults.standard.object (forKey: inPreferenceKey)
    if let value = possibleValue as? NSObject {
      setProp (T.convertFromNSObject (object: value))
    }
  }

 //····················································································································

  init (defaultValue inValue : T, setterDelegate inSetterDelegate : @escaping (_ inValue : T) -> Void) {
    mValue = inValue
    mPreferenceKey = nil
    mSetterDelegate = inSetterDelegate
    super.init ()
  }

  //····················································································································

  private var mValue : T {
    didSet {
      if self.mValue != oldValue {
        self.mSetterDelegate? (mValue)
        if let prefKey = self.mPreferenceKey {
          UserDefaults.standard.set (mValue.convertToNSObject (), forKey:prefKey)
        }
        self.mValueExplorer?.stringValue = "\(mValue)"
        self.ebUndoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object: oldValue.convertToNSObject ())
        if logEvents () {
          appendMessageString ("Property \(explorerIndexString (self.ebObjectIndex)) did change value to \(mValue)\n")
        }
        postEvent ()
        clearSignatureCache ()
      }
    }
  }

  //····················································································································

  @objc func performUndo (_ oldValue : NSNumber) {
    self.mValue = T.convertFromNSObject (object: oldValue)
  }

  //····················································································································

  override var prop : EBSelection<T> { return .single (mValue) }

  //····················································································································

  var propval : T { return self.mValue }

  //····················································································································

  override func setProp (_ value : T) { self.mValue = value }

  //····················································································································
 
  var validationFunction : (T, T) -> EBValidationResult <T> = defaultValidationFunction
 
   //····················································································································
 
  override func validateAndSetProp (_ candidateValue : T,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = true
    let validationResult = validationFunction (propval, candidateValue)
    switch validationResult {
    case EBValidationResult.ok (let validatedValue) :
      setProp (validatedValue)
    case EBValidationResult.rejectWithBeep :
      result = false
      __NSBeep ()
    case EBValidationResult.rejectWithAlert (let informativeText) :
      result = false
      let alert = NSAlert ()
      alert.messageText = "The value " + String (describing: candidateValue) + " is invalid."
      alert.informativeText = informativeText
      alert.addButton (withTitle: "Ok")
      alert.addButton (withTitle: "Discard Change")
      if let window = inWindow {
        alert.beginSheetModal (for: window) { (response : NSApplication.ModalResponse) in
          if response == .alertSecondButtonReturn { // Discard Change
            self.postEvent ()
          }
        }
      }else{
        alert.runModal ()
      }
    }
    return result
  }

  //····················································································································

  func storeIn (dictionary : NSMutableDictionary, forKey inKey : String) {
    dictionary.setValue (self.mValue.convertToNSObject (), forKey: inKey)
  }

  //····················································································································

  func readFrom (dictionary : NSDictionary, forKey inKey : String) {
    let possibleValue = dictionary.object (forKey: inKey)
    if let value = possibleValue as? NSObject {
      self.setProp (T.convertFromNSObject (object: value))
    }
  }

  //····················································································································
  //    SIGNATURE
  //····················································································································

  final private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK
  final private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
  }

  //····················································································································

  final private func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = propval.ebHashValue ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBTransientValueProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBTransientValueProperty <T> : EBReadOnlyValueProperty <T> where T : Equatable {

  //····················································································································

  private var mValueCache : EBSelection <T>? = nil
  var mReadModelFunction : Optional<() -> EBSelection <T> > = nil
  
  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      if let valueCache = self.mValueCache {
        self.mValueExplorer?.stringValue = "\(valueCache)"
      }else{
        self.mValueExplorer?.stringValue = "nil"
      }
    }
  }

  //····················································································································

  override var prop : EBSelection <T> {
    if self.mValueCache == nil {
      if let unwrappedComputeFunction = self.mReadModelFunction {
        self.mValueCache = unwrappedComputeFunction ()
      }
      if self.mValueCache == nil {
        self.mValueCache = .empty
      }
      self.mValueExplorer?.stringValue = "\(self.mValueCache!)"
    }
    return self.mValueCache!
  }

  //····················································································································

  override func postEvent () {
    if self.mValueCache != nil {
      self.mValueCache = nil
      self.mValueExplorer?.stringValue = "nil"
      if logEvents () {
        appendMessageString ("Transient \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("Transient \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol EBEnumProtocol {
  var rawValue : Int { get }
  static func buildfromRawValue (rawValue : Int) -> Self?
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol EnumPropertyProtocol : ValuePropertyProtocol, EBEnumProtocol {
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBAbstractEnumProperty : EBAbstractProperty {
  func rawValue () -> Int? { return nil } // Abstract method
  func setFrom (rawValue : Int) {}
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadOnlyEnumProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadOnlyEnumProperty <T : EBEnumProtocol> : EBAbstractEnumProperty where T : Equatable {

  var prop : EBSelection <T> { return .empty } // Abstract method

  //····················································································································

  override func rawValue () -> Int? {
    switch self.prop {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v.rawValue
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadWriteEnumProperty <T> (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadWriteEnumProperty <T : EBEnumProtocol> : EBReadOnlyEnumProperty <T> where T : Equatable {

  //····················································································································

  func setProp (_ value : T) { } // Abstract method

  //····················································································································

  func validateAndSetProp (_ candidateValue : T, windowForSheet inWindow:NSWindow?) -> Bool {
    return false
  } // Abstract method

  //····················································································································

  override func setFrom (rawValue : Int) {
    if let v = T.buildfromRawValue (rawValue: rawValue) {
      self.setProp (v)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBPropertyEnumProxy <T : ValuePropertyProtocol>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBPropertyEnumProxy <T : EnumPropertyProtocol> : EBReadWriteEnumProperty <T> {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection <T> > = nil
  var mWriteModelFunction : Optional < (T) -> Void > = nil
  var mValidateAndWriteModelFunction : Optional < (T, NSWindow?) -> Bool > = nil
  private var mCachedValue : EBSelection <T>? = nil

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      self.updateValueExplorer (possibleValue: self.mCachedValue)
    }
  }

  //····················································································································

  private func updateValueExplorer (possibleValue : EBSelection <T>?) {
    if let value = possibleValue {
      switch value {
      case .empty :
        self.mValueExplorer?.stringValue = "—"
      case .multiple :
        self.mValueExplorer?.stringValue = "—"
      case .single (let value) :
        self.mValueExplorer?.stringValue = "\(value)"
      }
    }else{
      self.mValueExplorer?.stringValue = "nil"
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("Proxy \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("Proxy \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

  override var prop : EBSelection <T> {
    if let unReadModelFunction = self.mReadModelFunction, self.mCachedValue == nil {
      self.mCachedValue = unReadModelFunction ()
      self.updateValueExplorer (possibleValue: self.mCachedValue)
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
    return self.mCachedValue!
  }

  //····················································································································

  override func setProp (_ value : T) {
    if let unWriteModelFunction = self.mWriteModelFunction {
      unWriteModelFunction (value)
    }
  }

  //····················································································································

  override func validateAndSetProp (_ candidateValue : T,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = false
    if let unwValidateAndWriteModelFunction = self.mValidateAndWriteModelFunction {
      result = unwValidateAndWriteModelFunction (candidateValue, inWindow)
    }
    return result
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBStoredEnumProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBStoredEnumProperty <T : EnumPropertyProtocol> : EBReadWriteEnumProperty <T> {

  //····················································································································

  weak var ebUndoManager : UndoManager? // SOULD BE WEAK
  fileprivate var mPreferenceKey : String?
  var mSetterDelegate : ((_ inValue : T) -> Void)?

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      self.mValueExplorer?.stringValue = "\(mValue)"
    }
  }

  //····················································································································

  init (defaultValue inValue : T) {
    mValue = inValue
    mPreferenceKey = nil
    mSetterDelegate = nil
    super.init ()
  }

  //····················································································································

  init (defaultValue inValue : T, prefKey inPreferenceKey : String) {
    mValue = inValue
    mPreferenceKey = inPreferenceKey
    mSetterDelegate = nil
    super.init ()
  //--- Read from preferences
    let possibleValue = UserDefaults.standard.object (forKey: inPreferenceKey)
    if let value = possibleValue as? NSObject {
      setProp (T.convertFromNSObject (object: value))
    }
  }

 //····················································································································

  init (defaultValue inValue : T, setterDelegate inSetterDelegate : @escaping (_ inValue : T) -> Void) {
    mValue = inValue
    mPreferenceKey = nil
    mSetterDelegate = inSetterDelegate
    super.init ()
  }

  //····················································································································

  private var mValue : T {
    didSet {
      if self.mValue != oldValue {
        self.mSetterDelegate? (self.mValue)
        if let prefKey = self.mPreferenceKey {
          UserDefaults.standard.set (mValue.convertToNSObject (), forKey:prefKey)
        }
        self.mValueExplorer?.stringValue = "\(mValue)"
        self.ebUndoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object: oldValue.convertToNSObject ())
        if logEvents () {
          appendMessageString ("Property \(explorerIndexString (self.ebObjectIndex)) did change value to \(mValue)\n")
        }
        postEvent ()
        clearSignatureCache ()
      }
    }
  }

  //····················································································································

  @objc func performUndo (_ oldValue : NSNumber) {
    self.mValue = T.convertFromNSObject (object: oldValue)
  }

  //····················································································································

  override var prop : EBSelection<T> { return .single (mValue) }

  //····················································································································

  var propval : T { return self.mValue }

  //····················································································································

  override func setProp (_ value : T) { self.mValue = value }

  //····················································································································

  var validationFunction : (T, T) -> EBValidationResult <T> = defaultValidationFunction

  //····················································································································

  override func validateAndSetProp (_ candidateValue : T,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = true
    let validationResult = validationFunction (propval, candidateValue)
    switch validationResult {
    case .ok (let validatedValue) :
      setProp (validatedValue)
    case .rejectWithBeep :
      result = false
      __NSBeep ()
    case .rejectWithAlert (let informativeText) :
      result = false
      let alert = NSAlert ()
      alert.messageText = "The value " + String (describing: candidateValue) + " is invalid."
      alert.informativeText = informativeText
      alert.addButton (withTitle: "Ok")
      alert.addButton (withTitle: "Discard Change")
      if let window = inWindow {
        alert.beginSheetModal (for:window) { (response : NSApplication.ModalResponse) in
          if response == .alertSecondButtonReturn { // Discard Change
            self.postEvent ()
          }
        }
      }else{
        alert.runModal ()
      }
    }
    return result
  }

  //····················································································································

  func storeIn (dictionary:NSMutableDictionary, forKey inKey:String) {
    dictionary.setValue (mValue.convertToNSObject (), forKey:inKey)
  }

  //····················································································································

  func readFrom (dictionary: NSDictionary, forKey inKey:String) {
    let possibleValue = dictionary.object (forKey:inKey)
    if let value = possibleValue as? NSObject {
      self.setProp (T.convertFromNSObject (object: value))
    }
  }

  //····················································································································
  //    SIGNATURE
  //····················································································································

  final private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK
  final private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
  }

  //····················································································································

  final private func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = propval.ebHashValue ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBTransientEnumProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBTransientEnumProperty <T : EBEnumProtocol> : EBReadOnlyEnumProperty <T> where T : Equatable {

  //····················································································································

  private var mValueCache : EBSelection <T>? = nil
  var mReadModelFunction : Optional<() -> EBSelection <T> > = nil

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      if let valueCache = self.mValueCache {
        self.mValueExplorer?.stringValue = "\(valueCache)"
      }else{
        self.mValueExplorer?.stringValue = "nil"
      }
    }
  }

  //····················································································································

  override var prop : EBSelection <T> {
    if self.mValueCache == nil {
      if let unwrappedComputeFunction = self.mReadModelFunction {
        self.mValueCache = unwrappedComputeFunction ()
      }
      if self.mValueCache == nil {
        self.mValueCache = .empty
      }
      self.mValueExplorer?.stringValue = "\(self.mValueCache!)"
    }
    return self.mValueCache!
  }

  //····················································································································

  override func postEvent () {
    if self.mValueCache != nil {
      self.mValueCache = nil
      self.mValueExplorer?.stringValue = "nil"
      if logEvents () {
        appendMessageString ("Transient \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("Transient \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension String : ValuePropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension String : ValuePropertyProtocol {

  //····················································································································

  func ebHashValue () -> UInt32 {
    let possibleData = self.data (using: String.Encoding.utf8)
    if let data = possibleData {
      return data.ebHashValue ()
    }else{
      return 0
    }
  }
  
  //····················································································································

  func convertToNSObject () -> NSObject {
    return self as NSObject
  }

  //····················································································································

  static func convertFromNSObject (object : NSObject) -> String {
    return object as! String
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension Int : ValuePropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension Int : ValuePropertyProtocol {

  //····················································································································

  func ebHashValue () -> UInt32 {
    var value = self.bigEndian
    let array = withUnsafeBytes (of: &value) { Array($0) }
    return array.ebHashValue ()
  }
  
  //····················································································································

  func convertToNSObject () -> NSObject {
    return NSNumber (value: self)
  }

  //····················································································································

  static func convertFromNSObject (object : NSObject) -> Int {
    let number = object as! NSNumber
    return number.intValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension Double : ValuePropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension Double : ValuePropertyProtocol {

  //····················································································································

  func ebHashValue () -> UInt32 {
    var value = self.bitPattern.bigEndian
    let array = withUnsafeBytes (of: &value) { Array($0) }
    return array.ebHashValue ()
  }

  //····················································································································

  func convertToNSObject () -> NSObject {
    return NSNumber (value: self)
  }

  //····················································································································

  static func convertFromNSObject (object : NSObject) -> Double {
    let number = object as! NSNumber
    return number.doubleValue
  }

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension Bool : ValuePropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension Bool : ValuePropertyProtocol {

  //····················································································································

  func ebHashValue () -> UInt32 {
    var crc : UInt32 = 0
    crc.accumulateByte (self ? 1 : 0)
    return crc
  }

  //····················································································································

  func convertToNSObject () -> NSObject {
    return NSNumber (value: self)
  }

  //····················································································································

  static func convertFromNSObject (object : NSObject) -> Bool {
    let number = object as! NSNumber
    return number.boolValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

public func < (left:Bool, right:Bool) -> Bool {
  return !left && right
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

public func > (left:Bool, right:Bool) -> Bool {
  return left && !right
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension NSColor : ClassPropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension NSColor : ClassPropertyProtocol {

  //····················································································································

  final func ebHashValue () -> UInt32 {
    let data = self.archiveToData ()
    return data.ebHashValue ()
  }

  //····················································································································

  func archiveToData () -> Data {
    let data = NSMutableData ()
    let archiver = NSKeyedArchiver (forWritingWith: data)
    archiver.encode (self, forKey: NSKeyedArchiveRootObjectKey)
    archiver.finishEncoding ()
    return data as Data
    // return NSKeyedArchiver.archivedData (withRootObject: self)
  }
  
  //····················································································································

  static func unarchiveFromData (data : Data) -> NSObject? {
    return NSKeyedUnarchiver.unarchiveObject (with: data) as? NSColor
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension Date : ValuePropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension Date : ValuePropertyProtocol {

  //····················································································································

  func ebHashValue () -> UInt32 {
    let data = NSMutableData ()
    let archiver = NSKeyedArchiver (forWritingWith: data)
    archiver.encode (self, forKey: NSKeyedArchiveRootObjectKey)
    archiver.finishEncoding ()
    //let data = NSKeyedArchiver.archivedData (withRootObject: self)
    return (data as Data).ebHashValue ()
  }

  //····················································································································

  func convertToNSObject () -> NSObject {
    let data = NSMutableData ()
    let archiver = NSKeyedArchiver (forWritingWith: data)
    archiver.encode (self, forKey: NSKeyedArchiveRootObjectKey)
    archiver.finishEncoding ()
    return data as NSObject
    // return NSKeyedArchiver.archivedData (withRootObject: self) as NSObject
  }
  
  //····················································································································

  static func convertFromNSObject (object : NSObject) -> Date {
    return NSKeyedUnarchiver.unarchiveObject (with: object as! Data) as! Date
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension NSFont : ClassPropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension NSFont : ClassPropertyProtocol {

  //····················································································································

  final func ebHashValue () -> UInt32 {
    let data = self.archiveToData ()
    return data.ebHashValue ()
  }

  //····················································································································

  func archiveToData () -> Data {
    let data = NSMutableData ()
    let archiver = NSKeyedArchiver (forWritingWith: data)
    archiver.encode (self, forKey: NSKeyedArchiveRootObjectKey)
    archiver.finishEncoding ()
    return data as Data
    // return NSKeyedArchiver.archivedData (withRootObject: self)
  }
  
  //····················································································································

  static func unarchiveFromData (data : Data) -> NSObject? {
    return NSKeyedUnarchiver.unarchiveObject (with: data) as? NSFont
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension Data : ValuePropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension Data : ValuePropertyProtocol {

  //····················································································································

  func ebHashValue () -> UInt32 {
    var crc : UInt32 = 0
    for i in 0 ..< self.count {
      crc.accumulateByte (self [i])
    }
    return crc
  }

  //····················································································································

  func convertToNSObject () -> NSObject {
    return self as NSObject
  }
  
  //····················································································································

  static func convertFromNSObject (object : NSObject) -> Data {
    return object as! Data
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    extension NSBezierPath : ClassPropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension NSBezierPath : ClassPropertyProtocol {

  //····················································································································

  final func ebHashValue () -> UInt32 {
    let data = self.archiveToData ()
    return data.ebHashValue ()
  }

  //····················································································································

  func archiveToData () -> Data {
    let data = NSMutableData ()
    let archiver = NSKeyedArchiver (forWritingWith: data)
    archiver.encode (self, forKey: NSKeyedArchiveRootObjectKey)
    archiver.finishEncoding ()
    return data as Data
    // return NSKeyedArchiver.archivedData (withRootObject: self)
  }
  
  //····················································································································

  static func unarchiveFromData (data : Data) -> NSObject? {
    return NSKeyedUnarchiver.unarchiveObject (with: data) as? NSBezierPath
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    BezierPathArray
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct BezierPathArray : Hashable, Comparable, ValuePropertyProtocol {

  //····················································································································

  private var mPathes = [NSBezierPath] ()

  //····················································································································

  var array : [NSBezierPath] { return self.mPathes }

  //····················································································································

  mutating func append (_ inBP : NSBezierPath) {
    if !inBP.isEmpty {
      self.mPathes.append (inBP)
    }
  }

  //····················································································································

  mutating func append (_ inBezierPathArray : [NSBezierPath]) {
    for bp in inBezierPathArray {
      if !bp.isEmpty {
        self.mPathes.append (bp)
      }
    }
  }

   //····················································································································

  mutating func append (_ inBezierPathArray : BezierPathArray) {
    self.mPathes += inBezierPathArray.mPathes
  }

 //····················································································································

  var bounds : NSRect {
    var r = NSRect.null
    for path in self.mPathes {
      r = r.union (path.bounds)
    }
    return r
  }
  
  //····················································································································

  public static func == (lhs: BezierPathArray, rhs: BezierPathArray) -> Bool {
    var equal = lhs.mPathes.count == rhs.mPathes.count
    if equal {
      var idx = 0
      while idx < lhs.mPathes.count {
        if lhs.mPathes [idx] != rhs.mPathes [idx] {
          equal = false
          idx = lhs.mPathes.count // For exiting loop
        }
        idx += 1
      }
    }
    return equal
  }

  //····················································································································

  public static func < (lhs: BezierPathArray, rhs: BezierPathArray) -> Bool {
    var inferior = lhs.mPathes.count < rhs.mPathes.count
    if lhs.mPathes.count == rhs.mPathes.count {
      let leftData = NSMutableData ()
      let leftArchiver = NSKeyedArchiver (forWritingWith: leftData)
      leftArchiver.encode (self, forKey: NSKeyedArchiveRootObjectKey)
      leftArchiver.finishEncoding ()
      // let leftData  = NSKeyedArchiver.archivedData (withRootObject: lhs.mPathes)
      let rightData = NSMutableData ()
      let rightArchiver = NSKeyedArchiver (forWritingWith: rightData)
      rightArchiver.encode (self, forKey: NSKeyedArchiveRootObjectKey)
      rightArchiver.finishEncoding ()
      // let rightData = NSKeyedArchiver.archivedData (withRootObject: rhs.mPathes)
      inferior = (leftData as Data) < (rightData as Data)
    }
    return inferior
  }

  //····················································································································

  func ebHashValue () -> UInt32 {
    let data = NSMutableData ()
    let archiver = NSKeyedArchiver (forWritingWith: data)
    archiver.encode (self, forKey: NSKeyedArchiveRootObjectKey)
    archiver.finishEncoding ()
    return (data as Data).ebHashValue ()
    // let data = NSKeyedArchiver.archivedData (withRootObject: self.mPathes)
    // return data.ebHashValue ()
  }

  //····················································································································

  func convertToNSObject () -> NSObject {
    let data = NSMutableData ()
    let archiver = NSKeyedArchiver (forWritingWith: data)
    archiver.encode (self, forKey: NSKeyedArchiveRootObjectKey)
    archiver.finishEncoding ()
    // let data = NSKeyedArchiver.archivedData (withRootObject: self.mPathes)
    return data
  }
  
  //····················································································································

  static func convertFromNSObject (object : NSObject) -> BezierPathArray {
    let array = NSKeyedUnarchiver.unarchiveObject (with: object as! Data) as! [NSBezierPath]
    return BezierPathArray (mPathes: array)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Protocol ClassPropertyProtocol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ClassPropertyProtocol : class, Equatable {
  func ebHashValue () -> UInt32
  func archiveToData () -> Data
  static func unarchiveFromData (data : Data) -> NSObject?
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadOnlyClassProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadOnlyClassProperty <T> : EBAbstractProperty where T : Equatable {

  var prop : EBSelection <T> { return .empty } // Abstract method

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadWriteClassProperty <T> (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadWriteClassProperty <T> : EBReadOnlyClassProperty <T> where T : Equatable {
  func setProp (_ value : T) { } // Abstract method
  func validateAndSetProp (_ candidateValue : T, windowForSheet inWindow:NSWindow?) -> Bool {
    return false
  } // Abstract method
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBPropertyClassProxy <T : ClassPropertyProtocol>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBPropertyClassProxy <T : ClassPropertyProtocol> : EBReadWriteClassProperty <T> {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection <T> > = nil
  var mWriteModelFunction : Optional < (T) -> Void > = nil
  var mValidateAndWriteModelFunction : Optional < (T, NSWindow?) -> Bool > = nil
  private var mCachedValue : EBSelection <T>? = nil
  
  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      self.updateValueExplorer (possibleValue: self.mCachedValue)
    }
  }

  //····················································································································

  private func updateValueExplorer (possibleValue : EBSelection <T>?) {
    if let value = possibleValue {
      switch value {
      case .empty :
        self.mValueExplorer?.stringValue = "—"
      case .multiple :
        self.mValueExplorer?.stringValue = "—"
      case .single (let value) :
        self.mValueExplorer?.stringValue = "\(value)"
      }
    }else{
      self.mValueExplorer?.stringValue = "nil"
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("Proxy \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("Proxy \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

  override var prop : EBSelection <T> {
    if let unReadModelFunction = self.mReadModelFunction, self.mCachedValue == nil {
      self.mCachedValue = unReadModelFunction ()
      self.updateValueExplorer (possibleValue: self.mCachedValue)
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
    return self.mCachedValue!
  }

  //····················································································································
  
  override func setProp (_ value : T) {
    if let unWriteModelFunction = self.mWriteModelFunction {
      unWriteModelFunction (value)
    }
  }

  //····················································································································

  override func validateAndSetProp (_ candidateValue : T,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = false
    if let unwValidateAndWriteModelFunction = self.mValidateAndWriteModelFunction {
      result = unwValidateAndWriteModelFunction (candidateValue, inWindow)
    }
    return result
  }
  
  //····················································································································
  
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBStoredClassProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBStoredClassProperty <T : ClassPropertyProtocol> : EBReadWriteClassProperty <T> {
  weak var ebUndoManager : UndoManager? // SOULD BE WEAK
  fileprivate var mPreferenceKey : String?
  var mSetterDelegate : ((_ inValue : T) -> Void)?

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      self.mValueExplorer?.stringValue = "\(mValue)"
    }
  }

  //····················································································································

  init (defaultValue inValue : T) {
    mValue = inValue
    mPreferenceKey = nil
    mSetterDelegate = nil
    super.init ()
  }

  //····················································································································

  init (defaultValue inValue : T, prefKey inPreferenceKey : String) {
    mValue = inValue
    mPreferenceKey = inPreferenceKey
    mSetterDelegate = nil
    super.init ()
  //--- Read value from preferences
    let possibleValue = UserDefaults.standard.object (forKey: inPreferenceKey)
    if let value = possibleValue as? Data, let unarchivedValue = T.unarchiveFromData (data: value) as? T {
      self.setProp (unarchivedValue)
    }
  }

  //····················································································································

  init (defaultValue inValue : T, setterDelegate inSetterDelegate : @escaping (_ inValue : T) -> Void) {
    mValue = inValue
    mPreferenceKey = nil
    mSetterDelegate = inSetterDelegate
    super.init ()
  }

  //····················································································································

  private var mValue : T {
    didSet {
      if self.mValue != oldValue {
        self.mSetterDelegate? (self.mValue)
        if let prefKey = self.mPreferenceKey {
          UserDefaults.standard.set (self.mValue.archiveToData (), forKey: prefKey)
        }
        self.mValueExplorer?.stringValue = "\(mValue)"
        self.ebUndoManager?.registerUndo (withTarget: self, selector: #selector (performUndo(_:)), object: oldValue)
        if logEvents () {
          appendMessageString ("Property \(explorerIndexString (self.ebObjectIndex)) did change value to \(mValue)\n")
        }
        self.postEvent ()
        self.clearSignatureCache ()
      }
    }
  }

  //····················································································································

  @objc func performUndo (_ oldValue : NSObject) {
    self.mValue = oldValue as! T
  }

  //····················································································································

  override var prop : EBSelection<T> { return .single (mValue) }

  var propval : T { return self.mValue }

  override func setProp (_ value : T) { self.mValue = value }

  //····················································································································
 
  var validationFunction : (T, T) -> EBValidationResult <T> = defaultValidationFunction
  
  override func validateAndSetProp (_ candidateValue : T,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = true
    let validationResult = validationFunction (propval, candidateValue)
    switch validationResult {
    case .ok (let validatedValue) :
      setProp (validatedValue)
    case .rejectWithBeep :
      result = false
      __NSBeep ()
    case .rejectWithAlert (let informativeText) :
      result = false
      let alert = NSAlert ()
      alert.messageText = "The value " + String (describing: candidateValue) + " is invalid."
      alert.informativeText = informativeText
      alert.addButton (withTitle: "Ok")
      alert.addButton (withTitle: "Discard Change")
      if let window = inWindow {
        alert.beginSheetModal (for:window) { (response : NSApplication.ModalResponse) in
          if response == .alertSecondButtonReturn { // Discard Change
            self.postEvent ()
          }
        }
      }else{
        alert.runModal ()
      }
    }
    return result
  }

  //····················································································································

  func storeIn (dictionary : NSMutableDictionary, forKey inKey : String) {
    dictionary.setValue (self.mValue.archiveToData (), forKey: inKey)
  }

  //····················································································································

  func readFrom (dictionary : NSDictionary, forKey inKey : String) {
    let possibleValue = dictionary.object (forKey: inKey)
    if let value = possibleValue as? Data, let unarchivedValue = T.unarchiveFromData (data: value) as? T {
      self.setProp (unarchivedValue)
    }
  }

  //····················································································································
  //    SIGNATURE
  //····················································································································

  final private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK
  final private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
  }

  //····················································································································

  final private func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = propval.ebHashValue ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBTransientClassProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBTransientClassProperty <T> : EBReadOnlyClassProperty <T> where T : Equatable {
  private var mValueCache : EBSelection <T>? = nil
  var mReadModelFunction : Optional<() -> EBSelection <T> > = nil
  
  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      if let valueCache = self.mValueCache {
        self.mValueExplorer?.stringValue = "\(valueCache)"
      }else{
        self.mValueExplorer?.stringValue = "nil"
      }
    }
  }

  //····················································································································

  override var prop : EBSelection <T> {
    if self.mValueCache == nil {
      if let unwrappedComputeFunction = self.mReadModelFunction {
        self.mValueCache = unwrappedComputeFunction ()
      }
      if self.mValueCache == nil {
        self.mValueCache = .empty
      }
      self.mValueExplorer?.stringValue = "\(mValueCache!)"
    }
    return self.mValueCache!
  }

  //····················································································································

  override func postEvent () {
    if self.mValueCache != nil {
      self.mValueCache = nil
      self.mValueExplorer?.stringValue = "nil"
      if logEvents () {
        let className = String (describing:type(of: self))
        appendMessageString ("Transient \(className) \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      let className = String (describing:type(of: self))
      appendMessageString ("Transient \(className) \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property Int
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_Int  = EBReadOnlyValueProperty <Int>
typealias EBTransientProperty_Int = EBTransientValueProperty <Int>
typealias EBReadWriteProperty_Int = EBReadWriteValueProperty <Int>
typealias EBPropertyProxy_Int     = EBPropertyValueProxy <Int>
typealias EBStoredProperty_Int    = EBStoredValueProperty <Int>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func compare_Int (left : EBReadOnlyProperty_Int, right : EBReadOnlyProperty_Int) -> ComparisonResult {
  switch left.prop {
  case .empty :
    switch right.prop {
    case .empty :
      return .orderedSame
    default:
      return .orderedAscending
    }
  case .multiple :
    switch right.prop {
    case .empty :
      return .orderedDescending
    case .multiple :
      return .orderedSame
   case .single (_) :
      return .orderedAscending
   }
 case .single (let currentValue) :
    switch right.prop {
    case .empty, .multiple :
      return .orderedDescending
    case .single (let otherValue) :
      if currentValue < otherValue {
        return .orderedAscending
      }else if currentValue > otherValue {
        return .orderedDescending
      }else{
        return .orderedSame
      }
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property Bool
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_Bool  = EBReadOnlyValueProperty <Bool>
typealias EBTransientProperty_Bool = EBTransientValueProperty <Bool>
typealias EBReadWriteProperty_Bool = EBReadWriteValueProperty <Bool>
typealias EBPropertyProxy_Bool     = EBPropertyValueProxy <Bool>
typealias EBStoredProperty_Bool    = EBStoredValueProperty <Bool>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func compare_Bool (left : EBReadOnlyProperty_Bool, right : EBReadOnlyProperty_Bool) -> ComparisonResult {
  switch left.prop {
  case .empty :
    switch right.prop {
    case .empty :
      return .orderedSame
    default:
      return .orderedAscending
    }
  case .multiple :
    switch right.prop {
    case .empty :
      return .orderedDescending
    case .multiple :
      return .orderedSame
   case .single (_) :
      return .orderedAscending
   }
 case .single (let currentValue) :
    switch right.prop {
    case .empty, .multiple :
      return .orderedDescending
    case .single (let otherValue) :
      if currentValue < otherValue {
        return .orderedAscending
      }else if currentValue > otherValue {
        return .orderedDescending
      }else{
        return .orderedSame
      }
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property Double
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_Double  = EBReadOnlyValueProperty <Double>
typealias EBTransientProperty_Double = EBTransientValueProperty <Double>
typealias EBReadWriteProperty_Double = EBReadWriteValueProperty <Double>
typealias EBPropertyProxy_Double     = EBPropertyValueProxy <Double>
typealias EBStoredProperty_Double    = EBStoredValueProperty <Double>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func compare_Double (left : EBReadOnlyProperty_Double, right : EBReadOnlyProperty_Double) -> ComparisonResult {
  switch left.prop {
  case .empty :
    switch right.prop {
    case .empty :
      return .orderedSame
    default:
      return .orderedAscending
    }
  case .multiple :
    switch right.prop {
    case .empty :
      return .orderedDescending
    case .multiple :
      return .orderedSame
   case .single (_) :
      return .orderedAscending
   }
 case .single (let currentValue) :
    switch right.prop {
    case .empty, .multiple :
      return .orderedDescending
    case .single (let otherValue) :
      if currentValue < otherValue {
        return .orderedAscending
      }else if currentValue > otherValue {
        return .orderedDescending
      }else{
        return .orderedSame
      }
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property String
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_String  = EBReadOnlyValueProperty <String>
typealias EBTransientProperty_String = EBTransientValueProperty <String>
typealias EBReadWriteProperty_String = EBReadWriteValueProperty <String>
typealias EBPropertyProxy_String     = EBPropertyValueProxy <String>
typealias EBStoredProperty_String    = EBStoredValueProperty <String>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func compare_String (left : EBReadOnlyProperty_String, right : EBReadOnlyProperty_String) -> ComparisonResult {
  switch left.prop {
  case .empty :
    switch right.prop {
    case .empty :
      return .orderedSame
    default:
      return .orderedAscending
    }
  case .multiple :
    switch right.prop {
    case .empty :
      return .orderedDescending
    case .multiple :
      return .orderedSame
   case .single (_) :
      return .orderedAscending
   }
 case .single (let currentValue) :
    switch right.prop {
    case .empty, .multiple :
      return .orderedDescending
    case .single (let otherValue) :
      if currentValue < otherValue {
        return .orderedAscending
      }else if currentValue > otherValue {
        return .orderedDescending
      }else{
        return .orderedSame
      }
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property Data
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_Data  = EBReadOnlyValueProperty <Data>
typealias EBTransientProperty_Data = EBTransientValueProperty <Data>
typealias EBReadWriteProperty_Data = EBReadWriteValueProperty <Data>
typealias EBPropertyProxy_Data     = EBPropertyValueProxy <Data>
typealias EBStoredProperty_Data    = EBStoredValueProperty <Data>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func compare_Data (left : EBReadOnlyProperty_Data, right : EBReadOnlyProperty_Data) -> ComparisonResult {
  switch left.prop {
  case .empty :
    switch right.prop {
    case .empty :
      return .orderedSame
    default:
      return .orderedAscending
    }
  case .multiple :
    switch right.prop {
    case .empty :
      return .orderedDescending
    case .multiple :
      return .orderedSame
   case .single (_) :
      return .orderedAscending
   }
 case .single (let currentValue) :
    switch right.prop {
    case .empty, .multiple :
      return .orderedDescending
    case .single (let otherValue) :
      if currentValue < otherValue {
        return .orderedAscending
      }else if currentValue > otherValue {
        return .orderedDescending
      }else{
        return .orderedSame
      }
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property Date
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_Date  = EBReadOnlyValueProperty <Date>
typealias EBTransientProperty_Date = EBTransientValueProperty <Date>
typealias EBReadWriteProperty_Date = EBReadWriteValueProperty <Date>
typealias EBPropertyProxy_Date     = EBPropertyValueProxy <Date>
typealias EBStoredProperty_Date    = EBStoredValueProperty <Date>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func compare_Date (left : EBReadOnlyProperty_Date, right : EBReadOnlyProperty_Date) -> ComparisonResult {
  switch left.prop {
  case .empty :
    switch right.prop {
    case .empty :
      return .orderedSame
    default:
      return .orderedAscending
    }
  case .multiple :
    switch right.prop {
    case .empty :
      return .orderedDescending
    case .multiple :
      return .orderedSame
   case .single (_) :
      return .orderedAscending
   }
 case .single (let currentValue) :
    switch right.prop {
    case .empty, .multiple :
      return .orderedDescending
    case .single (let otherValue) :
      if currentValue < otherValue {
        return .orderedAscending
      }else if currentValue > otherValue {
        return .orderedDescending
      }else{
        return .orderedSame
      }
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property BezierPathArray
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_BezierPathArray  = EBReadOnlyValueProperty <BezierPathArray>
typealias EBTransientProperty_BezierPathArray = EBTransientValueProperty <BezierPathArray>
typealias EBReadWriteProperty_BezierPathArray = EBReadWriteValueProperty <BezierPathArray>
typealias EBPropertyProxy_BezierPathArray     = EBPropertyValueProxy <BezierPathArray>
typealias EBStoredProperty_BezierPathArray    = EBStoredValueProperty <BezierPathArray>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func compare_BezierPathArray (left : EBReadOnlyProperty_BezierPathArray, right : EBReadOnlyProperty_BezierPathArray) -> ComparisonResult {
  switch left.prop {
  case .empty :
    switch right.prop {
    case .empty :
      return .orderedSame
    default:
      return .orderedAscending
    }
  case .multiple :
    switch right.prop {
    case .empty :
      return .orderedDescending
    case .multiple :
      return .orderedSame
   case .single (_) :
      return .orderedAscending
   }
 case .single (let currentValue) :
    switch right.prop {
    case .empty, .multiple :
      return .orderedDescending
    case .single (let otherValue) :
      if currentValue < otherValue {
        return .orderedAscending
      }else if currentValue > otherValue {
        return .orderedDescending
      }else{
        return .orderedSame
      }
    }
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property CGFloat
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_CGFloat  = EBReadOnlyValueProperty <CGFloat>
typealias EBTransientProperty_CGFloat = EBTransientValueProperty <CGFloat>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Transient property class NSImage
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_NSImage  = EBReadOnlyClassProperty <NSImage>
typealias EBTransientProperty_NSImage = EBTransientClassProperty <NSImage>
typealias EBReadOnlyPropertyArray_NSImage  = EBReadOnlyClassProperty <[NSImage]>
typealias EBTransientPropertyArray_NSImage = EBTransientClassProperty <[NSImage]>


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Transient property class EBShape
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_EBShape  = EBReadOnlyClassProperty <EBShape>
typealias EBTransientProperty_EBShape = EBTransientClassProperty <EBShape>
typealias EBReadOnlyPropertyArray_EBShape  = EBReadOnlyClassProperty <[EBShape]>
typealias EBTransientPropertyArray_EBShape = EBTransientClassProperty <[EBShape]>


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property StringSet
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_StringSet  = EBReadOnlyValueProperty <StringSet>
typealias EBTransientProperty_StringSet = EBTransientValueProperty <StringSet>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Transient property class CanariRect
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_CanariRect  = EBReadOnlyClassProperty <CanariRect>
typealias EBTransientProperty_CanariRect = EBTransientClassProperty <CanariRect>
typealias EBReadOnlyPropertyArray_CanariRect  = EBReadOnlyClassProperty <[CanariRect]>
typealias EBTransientPropertyArray_CanariRect = EBTransientClassProperty <[CanariRect]>


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Transient property class CanariMenuItemListClass
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_CanariMenuItemListClass  = EBReadOnlyClassProperty <CanariMenuItemListClass>
typealias EBTransientProperty_CanariMenuItemListClass = EBTransientClassProperty <CanariMenuItemListClass>
typealias EBReadOnlyPropertyArray_CanariMenuItemListClass  = EBReadOnlyClassProperty <[CanariMenuItemListClass]>
typealias EBTransientPropertyArray_CanariMenuItemListClass = EBTransientClassProperty <[CanariMenuItemListClass]>


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property NetInfoArray
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_NetInfoArray  = EBReadOnlyValueProperty <NetInfoArray>
typealias EBTransientProperty_NetInfoArray = EBTransientValueProperty <NetInfoArray>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property NSPoint
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_NSPoint  = EBReadOnlyValueProperty <NSPoint>
typealias EBTransientProperty_NSPoint = EBTransientValueProperty <NSPoint>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property CanariPoint
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_CanariPoint  = EBReadOnlyValueProperty <CanariPoint>
typealias EBTransientProperty_CanariPoint = EBTransientValueProperty <CanariPoint>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property CanariPointArray
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_CanariPointArray  = EBReadOnlyValueProperty <CanariPointArray>
typealias EBTransientProperty_CanariPointArray = EBTransientValueProperty <CanariPointArray>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property ComponentSymbolInfo
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_ComponentSymbolInfo  = EBReadOnlyValueProperty <ComponentSymbolInfo>
typealias EBTransientProperty_ComponentSymbolInfo = EBTransientValueProperty <ComponentSymbolInfo>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property SymbolInProjectIdentifier
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_SymbolInProjectIdentifier  = EBReadOnlyValueProperty <SymbolInProjectIdentifier>
typealias EBTransientProperty_SymbolInProjectIdentifier = EBTransientValueProperty <SymbolInProjectIdentifier>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property SymbolInProjectIdentifierArray
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_SymbolInProjectIdentifierArray  = EBReadOnlyValueProperty <SymbolInProjectIdentifierArray>
typealias EBTransientProperty_SymbolInProjectIdentifierArray = EBTransientValueProperty <SymbolInProjectIdentifierArray>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property PinInProjectDescriptor
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_PinInProjectDescriptor  = EBReadOnlyValueProperty <PinInProjectDescriptor>
typealias EBTransientProperty_PinInProjectDescriptor = EBTransientValueProperty <PinInProjectDescriptor>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property PinPadAssignmentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_PinPadAssignmentInProject  = EBReadOnlyValueProperty <PinPadAssignmentInProject>
typealias EBTransientProperty_PinPadAssignmentInProject = EBTransientValueProperty <PinPadAssignmentInProject>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property DeviceSymbolDictionary
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_DeviceSymbolDictionary  = EBReadOnlyValueProperty <DeviceSymbolDictionary>
typealias EBTransientProperty_DeviceSymbolDictionary = EBTransientValueProperty <DeviceSymbolDictionary>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property StringArray
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_StringArray  = EBReadOnlyValueProperty <StringArray>
typealias EBTransientProperty_StringArray = EBTransientValueProperty <StringArray>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property StringTagArray
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_StringTagArray  = EBReadOnlyValueProperty <StringTagArray>
typealias EBTransientProperty_StringTagArray = EBTransientValueProperty <StringTagArray>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property TwoStrings
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_TwoStrings  = EBReadOnlyValueProperty <TwoStrings>
typealias EBTransientProperty_TwoStrings = EBTransientValueProperty <TwoStrings>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property ThreeStrings
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_ThreeStrings  = EBReadOnlyValueProperty <ThreeStrings>
typealias EBTransientProperty_ThreeStrings = EBTransientValueProperty <ThreeStrings>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property TwoStringArray
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_TwoStringArray  = EBReadOnlyValueProperty <TwoStringArray>
typealias EBTransientProperty_TwoStringArray = EBTransientValueProperty <TwoStringArray>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property ThreeStringArray
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_ThreeStringArray  = EBReadOnlyValueProperty <ThreeStringArray>
typealias EBTransientProperty_ThreeStringArray = EBTransientValueProperty <ThreeStringArray>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property PinQualifiedNameStruct
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_PinQualifiedNameStruct  = EBReadOnlyValueProperty <PinQualifiedNameStruct>
typealias EBTransientProperty_PinQualifiedNameStruct = EBTransientValueProperty <PinQualifiedNameStruct>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Transient property class MergerViaShapeArray
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_MergerViaShapeArray  = EBReadOnlyClassProperty <MergerViaShapeArray>
typealias EBTransientProperty_MergerViaShapeArray = EBTransientClassProperty <MergerViaShapeArray>
typealias EBReadOnlyPropertyArray_MergerViaShapeArray  = EBReadOnlyClassProperty <[MergerViaShapeArray]>
typealias EBTransientPropertyArray_MergerViaShapeArray = EBTransientClassProperty <[MergerViaShapeArray]>


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Transient property class MergerSegmentArray
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_MergerSegmentArray  = EBReadOnlyClassProperty <MergerSegmentArray>
typealias EBTransientProperty_MergerSegmentArray = EBTransientClassProperty <MergerSegmentArray>
typealias EBReadOnlyPropertyArray_MergerSegmentArray  = EBReadOnlyClassProperty <[MergerSegmentArray]>
typealias EBTransientPropertyArray_MergerSegmentArray = EBTransientClassProperty <[MergerSegmentArray]>


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Transient property class MergerBoardLimits
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_MergerBoardLimits  = EBReadOnlyClassProperty <MergerBoardLimits>
typealias EBTransientProperty_MergerBoardLimits = EBTransientClassProperty <MergerBoardLimits>
typealias EBReadOnlyPropertyArray_MergerBoardLimits  = EBReadOnlyClassProperty <[MergerBoardLimits]>
typealias EBTransientPropertyArray_MergerBoardLimits = EBTransientClassProperty <[MergerBoardLimits]>


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Transient property class MergerPadArray
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_MergerPadArray  = EBReadOnlyClassProperty <MergerPadArray>
typealias EBTransientProperty_MergerPadArray = EBTransientClassProperty <MergerPadArray>
typealias EBReadOnlyPropertyArray_MergerPadArray  = EBReadOnlyClassProperty <[MergerPadArray]>
typealias EBTransientPropertyArray_MergerPadArray = EBTransientClassProperty <[MergerPadArray]>


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property CanariIssueArray
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_CanariIssueArray  = EBReadOnlyValueProperty <CanariIssueArray>
typealias EBTransientProperty_CanariIssueArray = EBTransientValueProperty <CanariIssueArray>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property NSRect
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_NSRect  = EBReadOnlyValueProperty <NSRect>
typealias EBTransientProperty_NSRect = EBTransientValueProperty <NSRect>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property UnconnectedSymbolPinsInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_UnconnectedSymbolPinsInDevice  = EBReadOnlyValueProperty <UnconnectedSymbolPinsInDevice>
typealias EBTransientProperty_UnconnectedSymbolPinsInDevice = EBTransientValueProperty <UnconnectedSymbolPinsInDevice>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property AssignedPadProxiesInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_AssignedPadProxiesInDevice  = EBReadOnlyValueProperty <AssignedPadProxiesInDevice>
typealias EBTransientProperty_AssignedPadProxiesInDevice = EBTransientValueProperty <AssignedPadProxiesInDevice>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Scalar property DefinedCharactersInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_DefinedCharactersInDevice  = EBReadOnlyValueProperty <DefinedCharactersInDevice>
typealias EBTransientProperty_DefinedCharactersInDevice = EBTransientValueProperty <DefinedCharactersInDevice>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Transient property class CharacterSegmentListClass
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_CharacterSegmentListClass  = EBReadOnlyClassProperty <CharacterSegmentListClass>
typealias EBTransientProperty_CharacterSegmentListClass = EBTransientClassProperty <CharacterSegmentListClass>
typealias EBReadOnlyPropertyArray_CharacterSegmentListClass  = EBReadOnlyClassProperty <[CharacterSegmentListClass]>
typealias EBTransientPropertyArray_CharacterSegmentListClass = EBTransientClassProperty <[CharacterSegmentListClass]>


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Transient property class CharacterGerberCodeClass
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_CharacterGerberCodeClass  = EBReadOnlyClassProperty <CharacterGerberCodeClass>
typealias EBTransientProperty_CharacterGerberCodeClass = EBTransientClassProperty <CharacterGerberCodeClass>
typealias EBReadOnlyPropertyArray_CharacterGerberCodeClass  = EBReadOnlyClassProperty <[CharacterGerberCodeClass]>
typealias EBTransientPropertyArray_CharacterGerberCodeClass = EBTransientClassProperty <[CharacterGerberCodeClass]>


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Property class NSBezierPath
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_NSBezierPath  = EBReadOnlyClassProperty <NSBezierPath>
typealias EBTransientProperty_NSBezierPath = EBTransientClassProperty <NSBezierPath>
typealias EBReadWriteProperty_NSBezierPath = EBReadWriteClassProperty <NSBezierPath>
typealias EBPropertyProxy_NSBezierPath     = EBPropertyClassProxy <NSBezierPath>
typealias EBStoredProperty_NSBezierPath    = EBStoredClassProperty <NSBezierPath>


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Property class NSFont
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_NSFont  = EBReadOnlyClassProperty <NSFont>
typealias EBTransientProperty_NSFont = EBTransientClassProperty <NSFont>
typealias EBReadWriteProperty_NSFont = EBReadWriteClassProperty <NSFont>
typealias EBPropertyProxy_NSFont     = EBPropertyClassProxy <NSFont>
typealias EBStoredProperty_NSFont    = EBStoredClassProperty <NSFont>


//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   Property class NSColor
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_NSColor  = EBReadOnlyClassProperty <NSColor>
typealias EBTransientProperty_NSColor = EBTransientClassProperty <NSColor>
typealias EBReadWriteProperty_NSColor = EBReadWriteClassProperty <NSColor>
typealias EBPropertyProxy_NSColor     = EBPropertyClassProxy <NSColor>
typealias EBStoredProperty_NSColor    = EBStoredClassProperty <NSColor>


