//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceInProject_mDeviceName : class {
  var mDeviceName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceInProject_mPrefix : class {
  var mPrefix : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceInProject_mDeviceVersion : class {
  var mDeviceVersion : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceInProject_mDeviceFileData : class {
  var mDeviceFileData : Data { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceInProject_versionString : class {
  var versionString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceInProject_sizeString : class {
  var sizeString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceInProject_canExport : class {
  var canExport : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceInProject_canRemove : class {
  var canRemove : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceInProject_packageNames : class {
  var packageNames : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceInProject_symbolAndTypesNames : class {
  var symbolAndTypesNames : TwoStringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceInProject_pinPadAssignments : class {
  var pinPadAssignments : ThreeStringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceInProject_deviceSymbolDictionary : class {
  var deviceSymbolDictionary : DeviceSymbolDictionary? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class DeviceInProject : EBManagedObject,
         DeviceInProject_mDeviceName,
         DeviceInProject_mPrefix,
         DeviceInProject_mDeviceVersion,
         DeviceInProject_mDeviceFileData,
         DeviceInProject_versionString,
         DeviceInProject_sizeString,
         DeviceInProject_canExport,
         DeviceInProject_canRemove,
         DeviceInProject_packageNames,
         DeviceInProject_symbolAndTypesNames,
         DeviceInProject_pinPadAssignments,
         DeviceInProject_deviceSymbolDictionary {

  //····················································································································
  //   Atomic property: mDeviceName
  //····················································································································

  var mDeviceName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mDeviceName : String {
    get { return self.mDeviceName_property.propval }
    set { self.mDeviceName_property.setProp (newValue) }
  }

  //····················································································································

  var mDeviceName_property_selection : EBSelection <String> { return self.mDeviceName_property.prop }

  //····················································································································
  //   Atomic property: mPrefix
  //····················································································································

  var mPrefix_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mPrefix : String {
    get { return self.mPrefix_property.propval }
    set { self.mPrefix_property.setProp (newValue) }
  }

  //····················································································································

  var mPrefix_property_selection : EBSelection <String> { return self.mPrefix_property.prop }

  //····················································································································
  //   Atomic property: mDeviceVersion
  //····················································································································

  var mDeviceVersion_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mDeviceVersion : Int {
    get { return self.mDeviceVersion_property.propval }
    set { self.mDeviceVersion_property.setProp (newValue) }
  }

  //····················································································································

  var mDeviceVersion_property_selection : EBSelection <Int> { return self.mDeviceVersion_property.prop }

  //····················································································································
  //   Atomic property: mDeviceFileData
  //····················································································································

  var mDeviceFileData_property = EBStoredProperty_Data (defaultValue: Data ())

  //····················································································································

  var mDeviceFileData : Data {
    get { return self.mDeviceFileData_property.propval }
    set { self.mDeviceFileData_property.setProp (newValue) }
  }

  //····················································································································

  var mDeviceFileData_property_selection : EBSelection <Data> { return self.mDeviceFileData_property.prop }

  //····················································································································
  //   To many property: mComponents
  //····················································································································

  let mComponents_property = StoredArrayOf_ComponentInProject ()

  //····················································································································

  var mComponents_property_selection : EBSelection < [ComponentInProject] > {
    return self.mComponents_property.prop
  }

  //····················································································································

  var mComponents : [ComponentInProject] {
    get { return self.mComponents_property.propval }
    set { self.mComponents_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mPackages
  //····················································································································

  let mPackages_property = StoredArrayOf_DevicePackageInProject ()

  //····················································································································

  var mPackages_property_selection : EBSelection < [DevicePackageInProject] > {
    return self.mPackages_property.prop
  }

  //····················································································································

  var mPackages : [DevicePackageInProject] {
    get { return self.mPackages_property.propval }
    set { self.mPackages_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mSymbols
  //····················································································································

  let mSymbols_property = StoredArrayOf_DeviceSymbolInstanceInProject ()

  //····················································································································

  var mSymbols_property_selection : EBSelection < [DeviceSymbolInstanceInProject] > {
    return self.mSymbols_property.prop
  }

  //····················································································································

  var mSymbols : [DeviceSymbolInstanceInProject] {
    get { return self.mSymbols_property.propval }
    set { self.mSymbols_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mPadAssignments
  //····················································································································

  let mPadAssignments_property = StoredArrayOf_DevicePadAssignmentInProject ()

  //····················································································································

  var mPadAssignments_property_selection : EBSelection < [DevicePadAssignmentInProject] > {
    return self.mPadAssignments_property.prop
  }

  //····················································································································

  var mPadAssignments : [DevicePadAssignmentInProject] {
    get { return self.mPadAssignments_property.propval }
    set { self.mPadAssignments_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: versionString
  //····················································································································

  var versionString_property = EBTransientProperty_String ()

  //····················································································································

  var versionString_property_selection : EBSelection <String> {
    return self.versionString_property.prop
  }

  //····················································································································

  var versionString : String? {
    switch self.versionString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: sizeString
  //····················································································································

  var sizeString_property = EBTransientProperty_String ()

  //····················································································································

  var sizeString_property_selection : EBSelection <String> {
    return self.sizeString_property.prop
  }

  //····················································································································

  var sizeString : String? {
    switch self.sizeString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canExport
  //····················································································································

  var canExport_property = EBTransientProperty_Bool ()

  //····················································································································

  var canExport_property_selection : EBSelection <Bool> {
    return self.canExport_property.prop
  }

  //····················································································································

  var canExport : Bool? {
    switch self.canExport_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canRemove
  //····················································································································

  var canRemove_property = EBTransientProperty_Bool ()

  //····················································································································

  var canRemove_property_selection : EBSelection <Bool> {
    return self.canRemove_property.prop
  }

  //····················································································································

  var canRemove : Bool? {
    switch self.canRemove_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: packageNames
  //····················································································································

  var packageNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  var packageNames_property_selection : EBSelection <StringArray> {
    return self.packageNames_property.prop
  }

  //····················································································································

  var packageNames : StringArray? {
    switch self.packageNames_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolAndTypesNames
  //····················································································································

  var symbolAndTypesNames_property = EBTransientProperty_TwoStringArray ()

  //····················································································································

  var symbolAndTypesNames_property_selection : EBSelection <TwoStringArray> {
    return self.symbolAndTypesNames_property.prop
  }

  //····················································································································

  var symbolAndTypesNames : TwoStringArray? {
    switch self.symbolAndTypesNames_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: pinPadAssignments
  //····················································································································

  var pinPadAssignments_property = EBTransientProperty_ThreeStringArray ()

  //····················································································································

  var pinPadAssignments_property_selection : EBSelection <ThreeStringArray> {
    return self.pinPadAssignments_property.prop
  }

  //····················································································································

  var pinPadAssignments : ThreeStringArray? {
    switch self.pinPadAssignments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: deviceSymbolDictionary
  //····················································································································

  var deviceSymbolDictionary_property = EBTransientProperty_DeviceSymbolDictionary ()

  //····················································································································

  var deviceSymbolDictionary_property_selection : EBSelection <DeviceSymbolDictionary> {
    return self.deviceSymbolDictionary_property.prop
  }

  //····················································································································

  var deviceSymbolDictionary : DeviceSymbolDictionary? {
    switch self.deviceSymbolDictionary_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mDeviceName
    self.mDeviceName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mPrefix
    self.mPrefix_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mDeviceVersion
    self.mDeviceVersion_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mDeviceFileData
    self.mDeviceFileData_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mComponents (has opposite relationship)
    self.mComponents_property.ebUndoManager = self.ebUndoManager
    self.mComponents_property.setOppositeRelationship = { [weak self] (_ inManagedObject :ComponentInProject?) in
      inManagedObject?.mDevice_property.setProp (self)
    }
  //--- To many property: mPackages (no option)
    self.mPackages_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mSymbols (no option)
    self.mSymbols_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mPadAssignments (no option)
    self.mPadAssignments_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: versionString
    self.versionString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDeviceVersion_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mDeviceVersion_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceInProject_versionString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDeviceVersion_property.addEBObserver (self.versionString_property)
  //--- Atomic property: sizeString
    self.sizeString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDeviceFileData_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mDeviceFileData_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceInProject_sizeString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDeviceFileData_property.addEBObserver (self.sizeString_property)
  //--- Atomic property: canExport
    self.canExport_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDeviceFileData_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mDeviceFileData_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceInProject_canExport (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDeviceFileData_property.addEBObserver (self.canExport_property)
  //--- Atomic property: canRemove
    self.canRemove_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mComponents_property.count_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mComponents_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceInProject_canRemove (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mComponents_property.addEBObserver (self.canRemove_property)
  //--- Atomic property: packageNames
    self.packageNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mPackages_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mPackages_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceInProject_packageNames (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPackages_property.addEBObserverOf_mPackageName (self.packageNames_property)
  //--- Atomic property: symbolAndTypesNames
    self.symbolAndTypesNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSymbols_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mSymbols_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceInProject_symbolAndTypesNames (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbols_property.addEBObserverOf_symbolAndTypeName (self.symbolAndTypesNames_property)
  //--- Atomic property: pinPadAssignments
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mPadAssignments_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mPadAssignments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceInProject_pinPadAssignments (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPadAssignments_property.addEBObserverOf_pinPadAssignment (self.pinPadAssignments_property)
  //--- Atomic property: deviceSymbolDictionary
    self.deviceSymbolDictionary_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mSymbols_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mSymbols_property_selection, unwSelf.mSymbols_property_selection, unwSelf.mSymbols_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_DeviceInProject_deviceSymbolDictionary (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbols_property.addEBObserverOf_symbolAndTypeName (self.deviceSymbolDictionary_property)
    self.mSymbols_property.addEBObserverOf_shape (self.deviceSymbolDictionary_property)
    self.mSymbols_property.addEBObserverOf_center (self.deviceSymbolDictionary_property)
  //--- Install undoers and opposite setter for relationships
    self.mComponents_property.setOppositeRelationship = { [weak self] (_ inManagedObject : ComponentInProject?) in
      inManagedObject?.mDevice_property.setProp (self)
    }
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mDeviceVersion_property.removeEBObserver (self.versionString_property)
    self.mDeviceFileData_property.removeEBObserver (self.sizeString_property)
    self.mDeviceFileData_property.removeEBObserver (self.canExport_property)
    self.mComponents_property.removeEBObserver (self.canRemove_property)
    self.mPackages_property.removeEBObserverOf_mPackageName (self.packageNames_property)
    self.mSymbols_property.removeEBObserverOf_symbolAndTypeName (self.symbolAndTypesNames_property)
    self.mPadAssignments_property.removeEBObserverOf_pinPadAssignment (self.pinPadAssignments_property)
    self.mSymbols_property.removeEBObserverOf_symbolAndTypeName (self.deviceSymbolDictionary_property)
    self.mSymbols_property.removeEBObserverOf_shape (self.deviceSymbolDictionary_property)
    self.mSymbols_property.removeEBObserverOf_center (self.deviceSymbolDictionary_property)
 //   self.mComponents_property.setOppositeRelationship = nil
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mDeviceName",
      idx:self.mDeviceName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mDeviceName_property.mObserverExplorer,
      valueExplorer:&self.mDeviceName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPrefix",
      idx:self.mPrefix_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mPrefix_property.mObserverExplorer,
      valueExplorer:&self.mPrefix_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDeviceVersion",
      idx:self.mDeviceVersion_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mDeviceVersion_property.mObserverExplorer,
      valueExplorer:&self.mDeviceVersion_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDeviceFileData",
      idx:self.mDeviceFileData_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mDeviceFileData_property.mObserverExplorer,
      valueExplorer:&self.mDeviceFileData_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "versionString",
      idx:self.versionString_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.versionString_property.mObserverExplorer,
      valueExplorer:&self.versionString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "sizeString",
      idx:self.sizeString_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.sizeString_property.mObserverExplorer,
      valueExplorer:&self.sizeString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "canExport",
      idx:self.canExport_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.canExport_property.mObserverExplorer,
      valueExplorer:&self.canExport_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "canRemove",
      idx:self.canRemove_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.canRemove_property.mObserverExplorer,
      valueExplorer:&self.canRemove_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "packageNames",
      idx:self.packageNames_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.packageNames_property.mObserverExplorer,
      valueExplorer:&self.packageNames_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "symbolAndTypesNames",
      idx:self.symbolAndTypesNames_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.symbolAndTypesNames_property.mObserverExplorer,
      valueExplorer:&self.symbolAndTypesNames_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "pinPadAssignments",
      idx:self.pinPadAssignments_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.pinPadAssignments_property.mObserverExplorer,
      valueExplorer:&self.pinPadAssignments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "deviceSymbolDictionary",
      idx:self.deviceSymbolDictionary_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.deviceSymbolDictionary_property.mObserverExplorer,
      valueExplorer:&self.deviceSymbolDictionary_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "mComponents",
      idx:mComponents_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mComponents_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mPackages",
      idx:mPackages_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mPackages_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mSymbols",
      idx:mSymbols_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mSymbols_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mPadAssignments",
      idx:mPadAssignments_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mPadAssignments_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mDeviceName
    self.mDeviceName_property.mObserverExplorer = nil
    self.mDeviceName_property.mValueExplorer = nil
  //--- Atomic property: mPrefix
    self.mPrefix_property.mObserverExplorer = nil
    self.mPrefix_property.mValueExplorer = nil
  //--- Atomic property: mDeviceVersion
    self.mDeviceVersion_property.mObserverExplorer = nil
    self.mDeviceVersion_property.mValueExplorer = nil
  //--- Atomic property: mDeviceFileData
    self.mDeviceFileData_property.mObserverExplorer = nil
    self.mDeviceFileData_property.mValueExplorer = nil
  //--- To many property: mComponents
    self.mComponents_property.mValueExplorer = nil
  //--- To many property: mPackages
    self.mPackages_property.mValueExplorer = nil
  //--- To many property: mSymbols
    self.mSymbols_property.mValueExplorer = nil
  //--- To many property: mPadAssignments
    self.mPadAssignments_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mComponents_property.setProp ([])
    self.mPackages_property.setProp ([])
    self.mSymbols_property.setProp ([])
    self.mPadAssignments_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mDeviceName
    self.mDeviceName_property.storeIn (dictionary: ioDictionary, forKey:"mDeviceName")
  //--- Atomic property: mPrefix
    self.mPrefix_property.storeIn (dictionary: ioDictionary, forKey:"mPrefix")
  //--- Atomic property: mDeviceVersion
    self.mDeviceVersion_property.storeIn (dictionary: ioDictionary, forKey:"mDeviceVersion")
  //--- Atomic property: mDeviceFileData
    self.mDeviceFileData_property.storeIn (dictionary: ioDictionary, forKey:"mDeviceFileData")
  //--- To many property: mComponents
    self.store (
      managedObjectArray: self.mComponents_property.propval,
      relationshipName: "mComponents",
      intoDictionary: ioDictionary
    )
  //--- To many property: mPackages
    self.store (
      managedObjectArray: self.mPackages_property.propval,
      relationshipName: "mPackages",
      intoDictionary: ioDictionary
    )
  //--- To many property: mSymbols
    self.store (
      managedObjectArray: self.mSymbols_property.propval,
      relationshipName: "mSymbols",
      intoDictionary: ioDictionary
    )
  //--- To many property: mPadAssignments
    self.store (
      managedObjectArray: self.mPadAssignments_property.propval,
      relationshipName: "mPadAssignments",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mComponents
    self.mComponents_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mComponents",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [ComponentInProject])
  //--- To many property: mPackages
    self.mPackages_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mPackages",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [DevicePackageInProject])
  //--- To many property: mSymbols
    self.mSymbols_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mSymbols",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [DeviceSymbolInstanceInProject])
  //--- To many property: mPadAssignments
    self.mPadAssignments_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mPadAssignments",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [DevicePadAssignmentInProject])
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mDeviceName
    self.mDeviceName_property.readFrom (dictionary: inDictionary, forKey:"mDeviceName")
  //--- Atomic property: mPrefix
    self.mPrefix_property.readFrom (dictionary: inDictionary, forKey:"mPrefix")
  //--- Atomic property: mDeviceVersion
    self.mDeviceVersion_property.readFrom (dictionary: inDictionary, forKey:"mDeviceVersion")
  //--- Atomic property: mDeviceFileData
    self.mDeviceFileData_property.readFrom (dictionary: inDictionary, forKey:"mDeviceFileData")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mComponents
    for managedObject in self.mComponents_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mPackages
    for managedObject in self.mPackages_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mSymbols
    for managedObject in self.mSymbols_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mPadAssignments
    for managedObject in self.mPadAssignments_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mComponents
    for managedObject in self.mComponents_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mPackages
    for managedObject in self.mPackages_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mSymbols
    for managedObject in self.mSymbols_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mPadAssignments
    for managedObject in self.mPadAssignments_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_DeviceInProject : ReadOnlyAbstractArrayProperty <DeviceInProject> {

  //····················································································································
  //   Observers of 'mDeviceName' stored property
  //····················································································································

  private var mObserversOf_mDeviceName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDeviceName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDeviceName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDeviceName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDeviceName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDeviceName_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mDeviceName.apply { (_ observer : EBEvent) in
        managedObject.mDeviceName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDeviceName_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    self.mObserversOf_mDeviceName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDeviceName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPrefix' stored property
  //····················································································································

  private var mObserversOf_mPrefix = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPrefix (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPrefix.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPrefix_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPrefix (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPrefix.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPrefix_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPrefix_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mPrefix.apply { (_ observer : EBEvent) in
        managedObject.mPrefix_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPrefix_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    self.mObserversOf_mPrefix.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPrefix_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDeviceVersion' stored property
  //····················································································································

  private var mObserversOf_mDeviceVersion = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDeviceVersion (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDeviceVersion.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceVersion_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDeviceVersion (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDeviceVersion.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceVersion_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDeviceVersion_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mDeviceVersion.apply { (_ observer : EBEvent) in
        managedObject.mDeviceVersion_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDeviceVersion_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    self.mObserversOf_mDeviceVersion.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDeviceVersion_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDeviceFileData' stored property
  //····················································································································

  private var mObserversOf_mDeviceFileData = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDeviceFileData (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDeviceFileData.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceFileData_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDeviceFileData (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDeviceFileData.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceFileData_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDeviceFileData_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mDeviceFileData.apply { (_ observer : EBEvent) in
        managedObject.mDeviceFileData_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDeviceFileData_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    self.mObserversOf_mDeviceFileData.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDeviceFileData_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'versionString' transient property
  //····················································································································

  private var mObserversOf_versionString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_versionString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.versionString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_versionString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.versionString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_versionString_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_versionString.apply { (_ observer : EBEvent) in
        managedObject.versionString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_versionString_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_versionString.apply { (_ observer : EBEvent) in
        managedObject.versionString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sizeString' transient property
  //····················································································································

  private var mObserversOf_sizeString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_sizeString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_sizeString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sizeString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_sizeString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_sizeString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sizeString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_sizeString_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_sizeString.apply { (_ observer : EBEvent) in
        managedObject.sizeString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sizeString_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_sizeString.apply { (_ observer : EBEvent) in
        managedObject.sizeString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'canExport' transient property
  //····················································································································

  private var mObserversOf_canExport = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_canExport (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_canExport.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canExport_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_canExport (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_canExport.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canExport_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_canExport_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_canExport.apply { (_ observer : EBEvent) in
        managedObject.canExport_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_canExport_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_canExport.apply { (_ observer : EBEvent) in
        managedObject.canExport_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'canRemove' transient property
  //····················································································································

  private var mObserversOf_canRemove = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_canRemove (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_canRemove.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canRemove_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_canRemove (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_canRemove.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canRemove_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_canRemove_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_canRemove.apply { (_ observer : EBEvent) in
        managedObject.canRemove_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_canRemove_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_canRemove.apply { (_ observer : EBEvent) in
        managedObject.canRemove_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'packageNames' transient property
  //····················································································································

  private var mObserversOf_packageNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_packageNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_packageNames.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.packageNames_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_packageNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_packageNames.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.packageNames_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_packageNames_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_packageNames.apply { (_ observer : EBEvent) in
        managedObject.packageNames_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_packageNames_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_packageNames.apply { (_ observer : EBEvent) in
        managedObject.packageNames_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'symbolAndTypesNames' transient property
  //····················································································································

  private var mObserversOf_symbolAndTypesNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_symbolAndTypesNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolAndTypesNames.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolAndTypesNames_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolAndTypesNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolAndTypesNames.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolAndTypesNames_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_symbolAndTypesNames_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_symbolAndTypesNames.apply { (_ observer : EBEvent) in
        managedObject.symbolAndTypesNames_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_symbolAndTypesNames_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_symbolAndTypesNames.apply { (_ observer : EBEvent) in
        managedObject.symbolAndTypesNames_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'pinPadAssignments' transient property
  //····················································································································

  private var mObserversOf_pinPadAssignments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_pinPadAssignments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_pinPadAssignments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinPadAssignments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_pinPadAssignments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_pinPadAssignments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinPadAssignments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_pinPadAssignments_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_pinPadAssignments.apply { (_ observer : EBEvent) in
        managedObject.pinPadAssignments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_pinPadAssignments_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_pinPadAssignments.apply { (_ observer : EBEvent) in
        managedObject.pinPadAssignments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'deviceSymbolDictionary' transient property
  //····················································································································

  private var mObserversOf_deviceSymbolDictionary = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_deviceSymbolDictionary (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_deviceSymbolDictionary.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceSymbolDictionary_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceSymbolDictionary (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_deviceSymbolDictionary.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceSymbolDictionary_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_deviceSymbolDictionary_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_deviceSymbolDictionary.apply { (_ observer : EBEvent) in
        managedObject.deviceSymbolDictionary_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_deviceSymbolDictionary_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_deviceSymbolDictionary.apply { (_ observer : EBEvent) in
        managedObject.deviceSymbolDictionary_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_DeviceInProject : ReadOnlyArrayOf_DeviceInProject {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [DeviceInProject] > > = nil

  //····················································································································

  override var propset : Set <DeviceInProject> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [DeviceInProject] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [DeviceInProject] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  private var mSet = Set <DeviceInProject> ()

  //····················································································································

  private var mCachedValue : EBSelection < [DeviceInProject] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      let cachedValue = unwrappedComputeFunction ()
      self.mCachedValue = cachedValue
      let newSet : Set <DeviceInProject>
      switch cachedValue {
      case .multiple, .empty :
        newSet = Set <DeviceInProject> ()
      case .single (let array) :
        newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_mDeviceName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mPrefix_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mDeviceVersion_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mDeviceFileData_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_versionString_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_sizeString_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_canExport_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_canRemove_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_packageNames_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_symbolAndTypesNames_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_pinPadAssignments_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_deviceSymbolDictionary_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_mDeviceName_toElementsOfSet (addedSet)
      self.addEBObserversOf_mPrefix_toElementsOfSet (addedSet)
      self.addEBObserversOf_mDeviceVersion_toElementsOfSet (addedSet)
      self.addEBObserversOf_mDeviceFileData_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_versionString_toElementsOfSet (addedSet)
      self.addEBObserversOf_sizeString_toElementsOfSet (addedSet)
      self.addEBObserversOf_canExport_toElementsOfSet (addedSet)
      self.addEBObserversOf_canRemove_toElementsOfSet (addedSet)
      self.addEBObserversOf_packageNames_toElementsOfSet (addedSet)
      self.addEBObserversOf_symbolAndTypesNames_toElementsOfSet (addedSet)
      self.addEBObserversOf_pinPadAssignments_toElementsOfSet (addedSet)
      self.addEBObserversOf_deviceSymbolDictionary_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_DeviceInProject : ReadOnlyArrayOf_DeviceInProject {

  //····················································································································
 
  func setProp (_ value :  [DeviceInProject]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_DeviceInProject : ReadWriteArrayOf_DeviceInProject, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : DeviceInProject?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [DeviceInProject] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "DeviceInProject") as? DeviceInProject {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <DeviceInProject> ()
  private var mValue = [DeviceInProject] () {
    didSet {
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.setOppositeRelationship? (nil)
            managedObject.mDeviceName_property.mSetterDelegate = nil
            managedObject.mPrefix_property.mSetterDelegate = nil
            managedObject.mDeviceVersion_property.mSetterDelegate = nil
            managedObject.mDeviceFileData_property.mSetterDelegate = nil
          }
        //--- Remove observers of stored properties
          self.removeEBObserversOf_mDeviceName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mPrefix_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mDeviceVersion_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mDeviceFileData_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of transient properties
          self.removeEBObserversOf_versionString_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_sizeString_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_canExport_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_canRemove_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_packageNames_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_symbolAndTypesNames_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_pinPadAssignments_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_deviceSymbolDictionary_fromElementsOfSet (removedObjectSet)
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : DeviceInProject in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
            managedObject.mDeviceName_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mPrefix_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mDeviceVersion_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mDeviceFileData_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
        //--- Add observers of stored properties
          self.addEBObserversOf_mDeviceName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mPrefix_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mDeviceVersion_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mDeviceFileData_toElementsOfSet (addedObjectSet)
        //--- Add observers of transient properties
          self.addEBObserversOf_versionString_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_sizeString_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_canExport_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_canRemove_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_packageNames_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_symbolAndTypesNames_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_pinPadAssignments_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_deviceSymbolDictionary_toElementsOfSet (addedObjectSet)
        }
      //--- Notify observers
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [DeviceInProject] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [DeviceInProject]) { self.mValue = inValue }

  //····················································································································

  override var propval : [DeviceInProject] { return self.mValue }

  //····················································································································

  override var propset : Set <DeviceInProject> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [DeviceInProject]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : DeviceInProject) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : DeviceInProject) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
