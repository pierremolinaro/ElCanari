//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mComponentIndex : class {
  var mComponentIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ComponentInProject : EBManagedObject,
         ComponentInProject_mComponentIndex {

  //····················································································································
  //   Atomic property: mComponentIndex
  //····················································································································

  var mComponentIndex_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mComponentIndex : Int {
    get { return self.mComponentIndex_property.propval }
    set { self.mComponentIndex_property.setProp (newValue) }
  }

  //····················································································································

  var mComponentIndex_property_selection : EBSelection <Int> { return self.mComponentIndex_property.prop }

  //····················································································································
  //   To one property: mDevice
  //····················································································································

  var mDevice_property = ToOneRelationship_ComponentInProject_mDevice ()

  //····················································································································

  var mDevice_property_selection : EBSelection <Bool> {
    return .single (self.mDevice_property.propval == nil)
  }

  //····················································································································

  var mDevice : DeviceInProject? {
    get { return self.mDevice_property.propval }
    set { self.mDevice_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: mSelectedPackage
  //····················································································································

  var mSelectedPackage_property = ToOneRelationship_ComponentInProject_mSelectedPackage ()

  //····················································································································

  var mSelectedPackage_property_selection : EBSelection <Bool> {
    return .single (self.mSelectedPackage_property.propval == nil)
  }

  //····················································································································

  var mSelectedPackage : DevicePackageInProject? {
    get { return self.mSelectedPackage_property.propval }
    set { self.mSelectedPackage_property.setProp (newValue) }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mComponentIndex
    self.mComponentIndex_property.ebUndoManager = self.ebUndoManager
  //--- To one property: mDevice
    self.mDevice_property.owner = self
  //--- To one property: mSelectedPackage
    self.mSelectedPackage_property.owner = self
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mComponentIndex",
      idx:self.mComponentIndex_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mComponentIndex_property.mObserverExplorer,
      valueExplorer:&self.mComponentIndex_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "mDevice",
      idx:self.mDevice_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mDevice_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mSelectedPackage",
      idx:self.mSelectedPackage_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mSelectedPackage_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mComponentIndex
    self.mComponentIndex_property.mObserverExplorer = nil
    self.mComponentIndex_property.mValueExplorer = nil
  //--- To one property: mDevice
    self.mDevice_property.mObserverExplorer = nil
    self.mDevice_property.mValueExplorer = nil
  //--- To one property: mSelectedPackage
    self.mSelectedPackage_property.mObserverExplorer = nil
    self.mSelectedPackage_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mDevice_property.setProp (nil)
    self.mSelectedPackage_property.setProp (nil)
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mComponentIndex
    self.mComponentIndex_property.storeIn (dictionary: ioDictionary, forKey:"mComponentIndex")
  //--- To one property: mSelectedPackage
    self.store (managedObject:self.mSelectedPackage_property.propval,
      relationshipName: "mSelectedPackage",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To one property: mDevice
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mDevice",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? DeviceInProject {
        self.mDevice_property.setProp (entity)
      }
    }
  //--- To one property: mSelectedPackage
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mSelectedPackage",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? DevicePackageInProject {
        self.mSelectedPackage_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mComponentIndex
    self.mComponentIndex_property.readFrom (dictionary: inDictionary, forKey:"mComponentIndex")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To one property: mDevice
    if let managedObject = self.mDevice_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mSelectedPackage
    if let managedObject = self.mSelectedPackage_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To one property: mDevice
    if let managedObject = self.mDevice_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mSelectedPackage
    if let managedObject = self.mSelectedPackage_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ComponentInProject : ReadOnlyAbstractArrayProperty <ComponentInProject> {

  //····················································································································
  //   Observers of 'mComponentIndex' stored property
  //····················································································································

  private var mObserversOf_mComponentIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mComponentIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mComponentIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mComponentIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComponentIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mComponentIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mComponentIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mComponentIndex_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mComponentIndex.apply ( {(_ observer : EBEvent) in
        managedObject.mComponentIndex_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mComponentIndex_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mComponentIndex.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mComponentIndex_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_ComponentInProject : ReadOnlyArrayOf_ComponentInProject {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [ComponentInProject] > > = nil

  //····················································································································

  override var propset : Set <ComponentInProject> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [ComponentInProject] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [ComponentInProject] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <ComponentInProject> ()

  //····················································································································

  private var mCachedValue : EBSelection < [ComponentInProject] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      self.mCachedValue = unwrappedComputeFunction ()
      let newSet : Set <ComponentInProject>
      switch self.mCachedValue! {
      case .multiple, .empty :
        newSet = Set <ComponentInProject> ()
      case .single (let array) :
       newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_mComponentIndex_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_mComponentIndex_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_ComponentInProject : ReadOnlyArrayOf_ComponentInProject {

  //····················································································································
 
  func setProp (_ value :  [ComponentInProject]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_ComponentInProject : ReadWriteArrayOf_ComponentInProject, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : ComponentInProject?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [ComponentInProject] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "ComponentInProject") as? ComponentInProject {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <ComponentInProject> ()
  private var mValue = [ComponentInProject] () {
    didSet {
     // self.postEvent ()
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.setOppositeRelationship? (nil)
            managedObject.mComponentIndex_property.mSetterDelegate = nil
          }
          self.removeEBObserversOf_mComponentIndex_fromElementsOfSet (removedObjectSet)
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : ComponentInProject in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
            managedObject.mComponentIndex_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
          self.addEBObserversOf_mComponentIndex_toElementsOfSet (addedObjectSet)
        }
      //--- Notify observers
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [ComponentInProject] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [ComponentInProject]) { self.mValue = inValue }

  //····················································································································

  override var propval : [ComponentInProject] { return self.mValue }

  //····················································································································

  override var propset : Set <ComponentInProject> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [ComponentInProject]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : ComponentInProject) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : ComponentInProject) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: mDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_ComponentInProject_mDevice : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : ComponentInProject? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  private var mValue : DeviceInProject? {
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.ebUndoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        oldValue?.mComponents_property.remove (unwrappedOwner)
      //--- Set new opposite relation ship
        self.mValue?.mComponents_property.add (unwrappedOwner)
      //--- Remove property observers of old object
        oldValue?.canExport_property.removeEBObserversFrom (&self.mObserversOf_canExport)
        oldValue?.mDeviceFileData_property.removeEBObserversFrom (&self.mObserversOf_mDeviceFileData)
        oldValue?.mDeviceName_property.removeEBObserversFrom (&self.mObserversOf_mDeviceName)
        oldValue?.mDeviceVersion_property.removeEBObserversFrom (&self.mObserversOf_mDeviceVersion)
        oldValue?.mPrefix_property.removeEBObserversFrom (&self.mObserversOf_mPrefix)
        oldValue?.sizeString_property.removeEBObserversFrom (&self.mObserversOf_sizeString)
        oldValue?.versionString_property.removeEBObserversFrom (&self.mObserversOf_versionString)
      //--- Add property observers to new object
        self.mValue?.canExport_property.addEBObserversFrom (&self.mObserversOf_canExport)
        self.mValue?.mDeviceFileData_property.addEBObserversFrom (&self.mObserversOf_mDeviceFileData)
        self.mValue?.mDeviceName_property.addEBObserversFrom (&self.mObserversOf_mDeviceName)
        self.mValue?.mDeviceVersion_property.addEBObserversFrom (&self.mObserversOf_mDeviceVersion)
        self.mValue?.mPrefix_property.addEBObserversFrom (&self.mObserversOf_mPrefix)
        self.mValue?.sizeString_property.addEBObserversFrom (&self.mObserversOf_sizeString)
        self.mValue?.versionString_property.addEBObserversFrom (&self.mObserversOf_versionString)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : DeviceInProject? { return self.mValue }

  var prop : EBSelection <DeviceInProject?> { return .single (self.mValue) }

  func setProp (_ value : DeviceInProject?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : DeviceInProject?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : DeviceInProject) {
    if self.mValue === object {
      self.mValue = nil
    }
  }

  //····················································································································
  //   Observable property: canExport
  //····················································································································

  private var mObserversOf_canExport = EBWeakEventSet ()

  //····················································································································

  var canExport_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.canExport_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_canExport (_ inObserver : EBEvent) {
    self.mObserversOf_canExport.insert (inObserver)
    if let object = self.propval {
      object.canExport_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_canExport (_ inObserver : EBEvent) {
    self.mObserversOf_canExport.remove (inObserver)
    if let object = self.propval {
      object.canExport_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mDeviceFileData
  //····················································································································

  private var mObserversOf_mDeviceFileData = EBWeakEventSet ()

  //····················································································································

  var mDeviceFileData_property_selection : EBSelection <Data?> {
    if let model = self.propval {
      switch (model.mDeviceFileData_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mDeviceFileData (_ inObserver : EBEvent) {
    self.mObserversOf_mDeviceFileData.insert (inObserver)
    if let object = self.propval {
      object.mDeviceFileData_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDeviceFileData (_ inObserver : EBEvent) {
    self.mObserversOf_mDeviceFileData.remove (inObserver)
    if let object = self.propval {
      object.mDeviceFileData_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mDeviceName
  //····················································································································

  private var mObserversOf_mDeviceName = EBWeakEventSet ()

  //····················································································································

  var mDeviceName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mDeviceName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mDeviceName (_ inObserver : EBEvent) {
    self.mObserversOf_mDeviceName.insert (inObserver)
    if let object = self.propval {
      object.mDeviceName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDeviceName (_ inObserver : EBEvent) {
    self.mObserversOf_mDeviceName.remove (inObserver)
    if let object = self.propval {
      object.mDeviceName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mDeviceVersion
  //····················································································································

  private var mObserversOf_mDeviceVersion = EBWeakEventSet ()

  //····················································································································

  var mDeviceVersion_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mDeviceVersion_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mDeviceVersion (_ inObserver : EBEvent) {
    self.mObserversOf_mDeviceVersion.insert (inObserver)
    if let object = self.propval {
      object.mDeviceVersion_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDeviceVersion (_ inObserver : EBEvent) {
    self.mObserversOf_mDeviceVersion.remove (inObserver)
    if let object = self.propval {
      object.mDeviceVersion_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mPrefix
  //····················································································································

  private var mObserversOf_mPrefix = EBWeakEventSet ()

  //····················································································································

  var mPrefix_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mPrefix_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPrefix (_ inObserver : EBEvent) {
    self.mObserversOf_mPrefix.insert (inObserver)
    if let object = self.propval {
      object.mPrefix_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPrefix (_ inObserver : EBEvent) {
    self.mObserversOf_mPrefix.remove (inObserver)
    if let object = self.propval {
      object.mPrefix_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: sizeString
  //····················································································································

  private var mObserversOf_sizeString = EBWeakEventSet ()

  //····················································································································

  var sizeString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.sizeString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_sizeString (_ inObserver : EBEvent) {
    self.mObserversOf_sizeString.insert (inObserver)
    if let object = self.propval {
      object.sizeString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_sizeString (_ inObserver : EBEvent) {
    self.mObserversOf_sizeString.remove (inObserver)
    if let object = self.propval {
      object.sizeString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: versionString
  //····················································································································

  private var mObserversOf_versionString = EBWeakEventSet ()

  //····················································································································

  var versionString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.versionString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.mObserversOf_versionString.insert (inObserver)
    if let object = self.propval {
      object.versionString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.mObserversOf_versionString.remove (inObserver)
    if let object = self.propval {
      object.versionString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: mSelectedPackage
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_ComponentInProject_mSelectedPackage : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : ComponentInProject? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  private var mValue : DevicePackageInProject? {
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.ebUndoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
      //--- Remove property observers of old object
        oldValue?.mPackageName_property.removeEBObserversFrom (&self.mObserversOf_mPackageName)
      //--- Add property observers to new object
        self.mValue?.mPackageName_property.addEBObserversFrom (&self.mObserversOf_mPackageName)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : DevicePackageInProject? { return self.mValue }

  var prop : EBSelection <DevicePackageInProject?> { return .single (self.mValue) }

  func setProp (_ value : DevicePackageInProject?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : DevicePackageInProject?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : DevicePackageInProject) {
    if self.mValue === object {
      self.mValue = nil
    }
  }

  //····················································································································
  //   Observable property: mPackageName
  //····················································································································

  private var mObserversOf_mPackageName = EBWeakEventSet ()

  //····················································································································

  var mPackageName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mPackageName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPackageName (_ inObserver : EBEvent) {
    self.mObserversOf_mPackageName.insert (inObserver)
    if let object = self.propval {
      object.mPackageName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageName (_ inObserver : EBEvent) {
    self.mObserversOf_mPackageName.remove (inObserver)
    if let object = self.propval {
      object.mPackageName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
