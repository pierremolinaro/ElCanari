//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mNamePrefix : class {
  var mNamePrefix : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mNameIndex : class {
  var mNameIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mComponentValue : class {
  var mComponentValue : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_componentName : class {
  var componentName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_deviceName : class {
  var deviceName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_selectedPackageName : class {
  var selectedPackageName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_availablePackages : class {
  var availablePackages : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_deviceSymbolDictionary : class {
  var deviceSymbolDictionary : DeviceSymbolDictionary? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_unplacedSymbols : class {
  var unplacedSymbols : StringTagArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_placementInSchematics : class {
  var placementInSchematics : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ComponentInProject : EBManagedObject,
         ComponentInProject_mNamePrefix,
         ComponentInProject_mNameIndex,
         ComponentInProject_mComponentValue,
         ComponentInProject_componentName,
         ComponentInProject_deviceName,
         ComponentInProject_selectedPackageName,
         ComponentInProject_availablePackages,
         ComponentInProject_deviceSymbolDictionary,
         ComponentInProject_unplacedSymbols,
         ComponentInProject_placementInSchematics {

  //····················································································································
  //   Atomic property: mNamePrefix
  //····················································································································

  let mNamePrefix_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mNamePrefix : String {
    get { return self.mNamePrefix_property.propval }
    set { self.mNamePrefix_property.setProp (newValue) }
  }

  //····················································································································

  var mNamePrefix_property_selection : EBSelection <String> { return self.mNamePrefix_property.prop }

  //····················································································································
  //   Atomic property: mNameIndex
  //····················································································································

  let mNameIndex_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mNameIndex : Int {
    get { return self.mNameIndex_property.propval }
    set { self.mNameIndex_property.setProp (newValue) }
  }

  //····················································································································

  var mNameIndex_property_selection : EBSelection <Int> { return self.mNameIndex_property.prop }

  //····················································································································
  //   Atomic property: mComponentValue
  //····················································································································

  let mComponentValue_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mComponentValue : String {
    get { return self.mComponentValue_property.propval }
    set { self.mComponentValue_property.setProp (newValue) }
  }

  //····················································································································

  var mComponentValue_property_selection : EBSelection <String> { return self.mComponentValue_property.prop }

  //····················································································································
  //   To many property: mSymbols
  //····················································································································

  let mSymbols_property = StoredArrayOf_ComponentSymbolInProject ()

  //····················································································································

  var mSymbols_property_selection : EBSelection < [ComponentSymbolInProject] > {
    return self.mSymbols_property.prop
  }

  //····················································································································

  var mSymbols : [ComponentSymbolInProject] {
    get { return self.mSymbols_property.propval }
    set { self.mSymbols_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: mDevice
  //····················································································································

  let mDevice_property = ToOneRelationship_ComponentInProject_mDevice ()

  //····················································································································

  var mDevice_property_selection : EBSelection <DeviceInProject?> {
    return .single (self.mDevice_property.propval)
  }

  //····················································································································

  var mDevice : DeviceInProject? {
    get { return self.mDevice_property.propval }
    set { self.mDevice_property.setProp (newValue) }
  }

  //····················································································································

  var mDevice_none : ToOneRelationship_ComponentInProject_mDevice { return self.mDevice_property }

  //····················································································································

  var mDevice_none_selection : EBSelection <Bool> {
    return .single (self.mDevice_property.propval == nil)
  }

  //····················································································································
  //   To one property: mSelectedPackage
  //····················································································································

  let mSelectedPackage_property = ToOneRelationship_ComponentInProject_mSelectedPackage ()

  //····················································································································

  var mSelectedPackage_property_selection : EBSelection <DevicePackageInProject?> {
    return .single (self.mSelectedPackage_property.propval)
  }

  //····················································································································

  var mSelectedPackage : DevicePackageInProject? {
    get { return self.mSelectedPackage_property.propval }
    set { self.mSelectedPackage_property.setProp (newValue) }
  }

  //····················································································································

  var mSelectedPackage_none : ToOneRelationship_ComponentInProject_mSelectedPackage { return self.mSelectedPackage_property }

  //····················································································································

  var mSelectedPackage_none_selection : EBSelection <Bool> {
    return .single (self.mSelectedPackage_property.propval == nil)
  }

  //····················································································································
  //   Transient property: componentName
  //····················································································································

  let componentName_property = EBTransientProperty_String ()

  //····················································································································

  var componentName_property_selection : EBSelection <String> {
    return self.componentName_property.prop
  }

  //····················································································································

  var componentName : String? {
    switch self.componentName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: deviceName
  //····················································································································

  let deviceName_property = EBTransientProperty_String ()

  //····················································································································

  var deviceName_property_selection : EBSelection <String> {
    return self.deviceName_property.prop
  }

  //····················································································································

  var deviceName : String? {
    switch self.deviceName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: selectedPackageName
  //····················································································································

  let selectedPackageName_property = EBTransientProperty_String ()

  //····················································································································

  var selectedPackageName_property_selection : EBSelection <String> {
    return self.selectedPackageName_property.prop
  }

  //····················································································································

  var selectedPackageName : String? {
    switch self.selectedPackageName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: availablePackages
  //····················································································································

  let availablePackages_property = EBTransientProperty_StringArray ()

  //····················································································································

  var availablePackages_property_selection : EBSelection <StringArray> {
    return self.availablePackages_property.prop
  }

  //····················································································································

  var availablePackages : StringArray? {
    switch self.availablePackages_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: deviceSymbolDictionary
  //····················································································································

  let deviceSymbolDictionary_property = EBTransientProperty_DeviceSymbolDictionary ()

  //····················································································································

  var deviceSymbolDictionary_property_selection : EBSelection <DeviceSymbolDictionary> {
    return self.deviceSymbolDictionary_property.prop
  }

  //····················································································································

  var deviceSymbolDictionary : DeviceSymbolDictionary? {
    switch self.deviceSymbolDictionary_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unplacedSymbols
  //····················································································································

  let unplacedSymbols_property = EBTransientProperty_StringTagArray ()

  //····················································································································

  var unplacedSymbols_property_selection : EBSelection <StringTagArray> {
    return self.unplacedSymbols_property.prop
  }

  //····················································································································

  var unplacedSymbols : StringTagArray? {
    switch self.unplacedSymbols_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: placementInSchematics
  //····················································································································

  let placementInSchematics_property = EBTransientProperty_String ()

  //····················································································································

  var placementInSchematics_property_selection : EBSelection <String> {
    return self.placementInSchematics_property.prop
  }

  //····················································································································

  var placementInSchematics : String? {
    switch self.placementInSchematics_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mNamePrefix
    self.mNamePrefix_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mNameIndex
    self.mNameIndex_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mComponentValue
    self.mComponentValue_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mSymbols (has opposite relationship)
    self.mSymbols_property.ebUndoManager = self.ebUndoManager
    self.mSymbols_property.setOppositeRelationship = { [weak self] (_ inManagedObject :ComponentSymbolInProject?) in
      inManagedObject?.mComponent_property.setProp (self)
    }
  //--- To one property: mDevice
    self.mDevice_property.owner = self
  //--- To one property: mSelectedPackage
    self.mSelectedPackage_property.owner = self
  //--- Atomic property: componentName
    self.componentName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mNamePrefix_property_selection.kind ()
        kind &= unwSelf.mNameIndex_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mNamePrefix_property_selection, unwSelf.mNameIndex_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ComponentInProject_componentName (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNamePrefix_property.addEBObserver (self.componentName_property)
    self.mNameIndex_property.addEBObserver (self.componentName_property)
  //--- Atomic property: deviceName
    self.deviceName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDevice_property.mDeviceName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mDevice_property.mDeviceName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_deviceName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDevice_property.addEBObserverOf_mDeviceName (self.deviceName_property)
  //--- Atomic property: selectedPackageName
    self.selectedPackageName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSelectedPackage_property.mPackageName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mSelectedPackage_property.mPackageName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_selectedPackageName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSelectedPackage_property.addEBObserverOf_mPackageName (self.selectedPackageName_property)
  //--- Atomic property: availablePackages
    self.availablePackages_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDevice_property.packageNames_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mDevice_property.packageNames_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_availablePackages (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDevice_property.addEBObserverOf_packageNames (self.availablePackages_property)
  //--- Atomic property: deviceSymbolDictionary
    self.deviceSymbolDictionary_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDevice_property.deviceSymbolDictionary_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mDevice_property.deviceSymbolDictionary_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_deviceSymbolDictionary (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDevice_property.addEBObserverOf_deviceSymbolDictionary (self.deviceSymbolDictionary_property)
  //--- Atomic property: unplacedSymbols
    self.unplacedSymbols_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.componentName_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.componentName_property_selection, unwSelf.mSymbols_property_selection, unwSelf.mSymbols_property_selection, unwSelf.mSymbols_property_selection, unwSelf.mSymbols_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_ComponentInProject_unplacedSymbols (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.componentName_property.addEBObserver (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserver (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserverOf_symbolInSchematics (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserverOf_mSymbolInstanceName (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserverOf_mSymbolTypeName (self.unplacedSymbols_property)
  //--- Atomic property: placementInSchematics
    self.placementInSchematics_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSymbols_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mSymbols_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_placementInSchematics (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbols_property.addEBObserverOf_symbolInSchematics (self.placementInSchematics_property)
  //--- Install undoers and opposite setter for relationships
    self.mSymbols_property.setOppositeRelationship = { [weak self] (_ inManagedObject : ComponentSymbolInProject) in
      if let me = self {
        inManagedObject.mComponent_property.setProp (me)
      }
    }
    self.mSymbols_property.resetOppositeRelationship = { (_ inManagedObject : ComponentSymbolInProject) in
      inManagedObject.mComponent_property.setProp (nil)
    }
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mNamePrefix_property.removeEBObserver (self.componentName_property)
    self.mNameIndex_property.removeEBObserver (self.componentName_property)
    self.mDevice_property.removeEBObserverOf_mDeviceName (self.deviceName_property)
    self.mSelectedPackage_property.removeEBObserverOf_mPackageName (self.selectedPackageName_property)
    self.mDevice_property.removeEBObserverOf_packageNames (self.availablePackages_property)
    self.mDevice_property.removeEBObserverOf_deviceSymbolDictionary (self.deviceSymbolDictionary_property)
    self.componentName_property.removeEBObserver (self.unplacedSymbols_property)
    self.mSymbols_property.removeEBObserver (self.unplacedSymbols_property)
    self.mSymbols_property.removeEBObserverOf_symbolInSchematics (self.unplacedSymbols_property)
    self.mSymbols_property.removeEBObserverOf_mSymbolInstanceName (self.unplacedSymbols_property)
    self.mSymbols_property.removeEBObserverOf_mSymbolTypeName (self.unplacedSymbols_property)
    self.mSymbols_property.removeEBObserverOf_symbolInSchematics (self.placementInSchematics_property)
 //   self.mSymbols_property.setOppositeRelationship = nil
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mNamePrefix",
      idx:self.mNamePrefix_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mNamePrefix_property.mObserverExplorer,
      valueExplorer:&self.mNamePrefix_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNameIndex",
      idx:self.mNameIndex_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mNameIndex_property.mObserverExplorer,
      valueExplorer:&self.mNameIndex_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mComponentValue",
      idx:self.mComponentValue_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mComponentValue_property.mObserverExplorer,
      valueExplorer:&self.mComponentValue_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "componentName",
      idx:self.componentName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.componentName_property.mObserverExplorer,
      valueExplorer:&self.componentName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "deviceName",
      idx:self.deviceName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.deviceName_property.mObserverExplorer,
      valueExplorer:&self.deviceName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedPackageName",
      idx:self.selectedPackageName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedPackageName_property.mObserverExplorer,
      valueExplorer:&self.selectedPackageName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "availablePackages",
      idx:self.availablePackages_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.availablePackages_property.mObserverExplorer,
      valueExplorer:&self.availablePackages_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "deviceSymbolDictionary",
      idx:self.deviceSymbolDictionary_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.deviceSymbolDictionary_property.mObserverExplorer,
      valueExplorer:&self.deviceSymbolDictionary_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "unplacedSymbols",
      idx:self.unplacedSymbols_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.unplacedSymbols_property.mObserverExplorer,
      valueExplorer:&self.unplacedSymbols_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "placementInSchematics",
      idx:self.placementInSchematics_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.placementInSchematics_property.mObserverExplorer,
      valueExplorer:&self.placementInSchematics_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "mSymbols",
      idx:mSymbols_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mSymbols_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "mDevice",
      idx:self.mDevice_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mDevice_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mSelectedPackage",
      idx:self.mSelectedPackage_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mSelectedPackage_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mNamePrefix
    self.mNamePrefix_property.mObserverExplorer = nil
    self.mNamePrefix_property.mValueExplorer = nil
  //--- Atomic property: mNameIndex
    self.mNameIndex_property.mObserverExplorer = nil
    self.mNameIndex_property.mValueExplorer = nil
  //--- Atomic property: mComponentValue
    self.mComponentValue_property.mObserverExplorer = nil
    self.mComponentValue_property.mValueExplorer = nil
  //--- To many property: mSymbols
    self.mSymbols_property.mValueExplorer = nil
  //--- To one property: mDevice
    self.mDevice_property.mObserverExplorer = nil
    self.mDevice_property.mValueExplorer = nil
  //--- To one property: mSelectedPackage
    self.mSelectedPackage_property.mObserverExplorer = nil
    self.mSelectedPackage_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mSymbols_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mDevice_property.setProp (nil)
    self.mSelectedPackage_property.setProp (nil)
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mNamePrefix
    self.mNamePrefix_property.storeIn (dictionary: ioDictionary, forKey:"mNamePrefix")
  //--- Atomic property: mNameIndex
    self.mNameIndex_property.storeIn (dictionary: ioDictionary, forKey:"mNameIndex")
  //--- Atomic property: mComponentValue
    self.mComponentValue_property.storeIn (dictionary: ioDictionary, forKey:"mComponentValue")
  //--- To many property: mSymbols
    self.store (
      managedObjectArray: self.mSymbols_property.propval,
      relationshipName: "mSymbols",
      intoDictionary: ioDictionary
    )
  //--- To one property: mSelectedPackage
    self.store (managedObject:self.mSelectedPackage_property.propval,
      relationshipName: "mSelectedPackage",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mSymbols
    self.mSymbols_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mSymbols",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [ComponentSymbolInProject])
  //--- To one property: mDevice
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mDevice",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? DeviceInProject {
        self.mDevice_property.setProp (entity)
      }
    }
  //--- To one property: mSelectedPackage
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mSelectedPackage",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? DevicePackageInProject {
        self.mSelectedPackage_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mNamePrefix
    self.mNamePrefix_property.readFrom (dictionary: inDictionary, forKey:"mNamePrefix")
  //--- Atomic property: mNameIndex
    self.mNameIndex_property.readFrom (dictionary: inDictionary, forKey:"mNameIndex")
  //--- Atomic property: mComponentValue
    self.mComponentValue_property.readFrom (dictionary: inDictionary, forKey:"mComponentValue")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mSymbols
    for managedObject in self.mSymbols_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mDevice
    if let managedObject = self.mDevice_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mSelectedPackage
    if let managedObject = self.mSelectedPackage_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mSymbols
    for managedObject in self.mSymbols_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mDevice
    if let managedObject = self.mDevice_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mSelectedPackage
    if let managedObject = self.mSelectedPackage_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ComponentInProject : ReadOnlyAbstractArrayProperty <ComponentInProject> {

  //····················································································································
  //   Observers of 'mNamePrefix' stored property
  //····················································································································

  private var mObserversOf_mNamePrefix = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNamePrefix (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNamePrefix.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNamePrefix_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNamePrefix (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNamePrefix.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNamePrefix_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNamePrefix_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNamePrefix.apply { (_ observer : EBEvent) in
        managedObject.mNamePrefix_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNamePrefix_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mNamePrefix.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNamePrefix_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNameIndex' stored property
  //····················································································································

  private var mObserversOf_mNameIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNameIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNameIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNameIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNameIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNameIndex_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNameIndex.apply { (_ observer : EBEvent) in
        managedObject.mNameIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNameIndex_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mNameIndex.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNameIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mComponentValue' stored property
  //····················································································································

  private var mObserversOf_mComponentValue = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mComponentValue (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mComponentValue.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mComponentValue_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComponentValue (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mComponentValue.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mComponentValue_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mComponentValue_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mComponentValue.apply { (_ observer : EBEvent) in
        managedObject.mComponentValue_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mComponentValue_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mComponentValue.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mComponentValue_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'componentName' transient property
  //····················································································································

  private var mObserversOf_componentName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_componentName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_componentName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_componentName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_componentName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_componentName_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_componentName.apply { (_ observer : EBEvent) in
        managedObject.componentName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentName_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_componentName.apply { (_ observer : EBEvent) in
        managedObject.componentName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'deviceName' transient property
  //····················································································································

  private var mObserversOf_deviceName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_deviceName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_deviceName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_deviceName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_deviceName_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_deviceName.apply { (_ observer : EBEvent) in
        managedObject.deviceName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_deviceName_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_deviceName.apply { (_ observer : EBEvent) in
        managedObject.deviceName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedPackageName' transient property
  //····················································································································

  private var mObserversOf_selectedPackageName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedPackageName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedPackageName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPackageName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPackageName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedPackageName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPackageName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedPackageName_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_selectedPackageName.apply { (_ observer : EBEvent) in
        managedObject.selectedPackageName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedPackageName_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_selectedPackageName.apply { (_ observer : EBEvent) in
        managedObject.selectedPackageName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'availablePackages' transient property
  //····················································································································

  private var mObserversOf_availablePackages = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_availablePackages (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_availablePackages.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.availablePackages_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_availablePackages (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_availablePackages.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.availablePackages_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_availablePackages_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_availablePackages.apply { (_ observer : EBEvent) in
        managedObject.availablePackages_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_availablePackages_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_availablePackages.apply { (_ observer : EBEvent) in
        managedObject.availablePackages_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'deviceSymbolDictionary' transient property
  //····················································································································

  private var mObserversOf_deviceSymbolDictionary = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_deviceSymbolDictionary (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_deviceSymbolDictionary.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceSymbolDictionary_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceSymbolDictionary (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_deviceSymbolDictionary.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceSymbolDictionary_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_deviceSymbolDictionary_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_deviceSymbolDictionary.apply { (_ observer : EBEvent) in
        managedObject.deviceSymbolDictionary_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_deviceSymbolDictionary_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_deviceSymbolDictionary.apply { (_ observer : EBEvent) in
        managedObject.deviceSymbolDictionary_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'unplacedSymbols' transient property
  //····················································································································

  private var mObserversOf_unplacedSymbols = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unplacedSymbols_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unplacedSymbols_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_unplacedSymbols_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_unplacedSymbols.apply { (_ observer : EBEvent) in
        managedObject.unplacedSymbols_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_unplacedSymbols_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_unplacedSymbols.apply { (_ observer : EBEvent) in
        managedObject.unplacedSymbols_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'placementInSchematics' transient property
  //····················································································································

  private var mObserversOf_placementInSchematics = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_placementInSchematics (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_placementInSchematics.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.placementInSchematics_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_placementInSchematics (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_placementInSchematics.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.placementInSchematics_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_placementInSchematics_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_placementInSchematics.apply { (_ observer : EBEvent) in
        managedObject.placementInSchematics_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_placementInSchematics_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_placementInSchematics.apply { (_ observer : EBEvent) in
        managedObject.placementInSchematics_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_ComponentInProject : ReadOnlyArrayOf_ComponentInProject {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [ComponentInProject] > > = nil

  //····················································································································

  override var propset : Set <ComponentInProject> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [ComponentInProject] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [ComponentInProject] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  private var mSet = Set <ComponentInProject> ()

  //····················································································································

  private var mCachedValue : EBSelection < [ComponentInProject] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      let cachedValue = unwrappedComputeFunction ()
      self.mCachedValue = cachedValue
      let newSet : Set <ComponentInProject>
      switch cachedValue {
      case .multiple, .empty :
        newSet = Set <ComponentInProject> ()
      case .single (let array) :
        newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_mNamePrefix_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mNameIndex_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mComponentValue_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_componentName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_deviceName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_selectedPackageName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_availablePackages_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_deviceSymbolDictionary_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_unplacedSymbols_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_placementInSchematics_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_mNamePrefix_toElementsOfSet (addedSet)
      self.addEBObserversOf_mNameIndex_toElementsOfSet (addedSet)
      self.addEBObserversOf_mComponentValue_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_componentName_toElementsOfSet (addedSet)
      self.addEBObserversOf_deviceName_toElementsOfSet (addedSet)
      self.addEBObserversOf_selectedPackageName_toElementsOfSet (addedSet)
      self.addEBObserversOf_availablePackages_toElementsOfSet (addedSet)
      self.addEBObserversOf_deviceSymbolDictionary_toElementsOfSet (addedSet)
      self.addEBObserversOf_unplacedSymbols_toElementsOfSet (addedSet)
      self.addEBObserversOf_placementInSchematics_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_ComponentInProject : ReadOnlyArrayOf_ComponentInProject {

  //····················································································································
 
  func setProp (_ value :  [ComponentInProject]) { } // Abstract method
  
 //····················································································································

  private var mProxyArray = [ProxyArrayOf_ComponentInProject] ()

  //····················································································································

  func attachProxy (_ inProxy : ProxyArrayOf_ComponentInProject) {
    self.mProxyArray.append (inProxy)
    inProxy.updateProxy ()
    self.postEvent ()
  }

  //····················································································································

  func detachProxy (_ inProxy : ProxyArrayOf_ComponentInProject) {
    if let idx = self.mProxyArray.firstIndex(of: inProxy) {
      self.mProxyArray.remove (at: idx)
      self.postEvent ()
    }
  }

  //····················································································································

  internal func propagateProxyUpdate () {
    for proxy in self.mProxyArray {
      proxy.updateProxy ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_ComponentInProject : ReadWriteArrayOf_ComponentInProject {

   //····················································································································

  private var mModel : ReadWriteArrayOf_ComponentInProject? = nil

  //····················································································································

  private var mInternalValue : EBSelection < [ComponentInProject] > = .empty {
    didSet {
      if self.mInternalValue != oldValue {
        switch self.mInternalValue {
        case .empty, .multiple :
          self.mCurrentObjectSet = []
        case .single (let v) :
          self.mCurrentObjectSet = Set (v)
        }
        self.propagateProxyUpdate ()
      }
    }
  }

  //····················································································································

  private var mCurrentObjectSet = Set <ComponentInProject> () {
    didSet {
      if self.mCurrentObjectSet != oldValue {
      //--- Add observers from removed objects
        let removedObjectSet = oldValue.subtracting (self.mCurrentObjectSet)
        self.removeEBObserversOf_mNamePrefix_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_mNameIndex_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_mComponentValue_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_componentName_fromElementsOfSet (removedObjectSet) // Transient property
        self.removeEBObserversOf_deviceName_fromElementsOfSet (removedObjectSet) // Transient property
        self.removeEBObserversOf_selectedPackageName_fromElementsOfSet (removedObjectSet) // Transient property
        self.removeEBObserversOf_availablePackages_fromElementsOfSet (removedObjectSet) // Transient property
        self.removeEBObserversOf_deviceSymbolDictionary_fromElementsOfSet (removedObjectSet) // Transient property
        self.removeEBObserversOf_unplacedSymbols_fromElementsOfSet (removedObjectSet) // Transient property
        self.removeEBObserversOf_placementInSchematics_fromElementsOfSet (removedObjectSet) // Transient property
      //--- Add observers to added objects
        let addedObjectSet = self.mCurrentObjectSet.subtracting (oldValue)
        self.addEBObserversOf_mNamePrefix_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_mNameIndex_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_mComponentValue_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_componentName_toElementsOfSet (addedObjectSet) // Transient property
        self.addEBObserversOf_deviceName_toElementsOfSet (addedObjectSet) // Transient property
        self.addEBObserversOf_selectedPackageName_toElementsOfSet (addedObjectSet) // Transient property
        self.addEBObserversOf_availablePackages_toElementsOfSet (addedObjectSet) // Transient property
        self.addEBObserversOf_deviceSymbolDictionary_toElementsOfSet (addedObjectSet) // Transient property
        self.addEBObserversOf_unplacedSymbols_toElementsOfSet (addedObjectSet) // Transient property
        self.addEBObserversOf_placementInSchematics_toElementsOfSet (addedObjectSet) // Transient property
      //---
        self.postEvent ()
      }
    }
  }

  //····················································································································

  func bind (_ inModel : ReadWriteArrayOf_ComponentInProject) {
    self.unbind ()
    self.mModel = inModel
    inModel.attachProxy (self)
  }

  //····················································································································

  func unbind () {
    if let model = self.mModel {
      model.detachProxy (self)
      self.mModel = nil
    }
  }

  //····················································································································

  func updateProxy () {
    if let model = self.mModel {
      self.mInternalValue = model.prop
    }else{
      self.mInternalValue = .empty
    }
  }

  //····················································································································

  override func setProp (_ inArrayValue :  [ComponentInProject]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [ComponentInProject] > {
    return self.mInternalValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_ComponentInProject : ReadWriteArrayOf_ComponentInProject, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : ComponentInProject) -> Void > = nil
  var resetOppositeRelationship : Optional < (_ inManagedObject : ComponentInProject) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [ComponentInProject] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "ComponentInProject") as? ComponentInProject {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <ComponentInProject> ()
  private var mValue = [ComponentInProject] () {
    didSet {
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.resetOppositeRelationship? (managedObject)
            managedObject.mNamePrefix_property.mSetterDelegate = nil
            managedObject.mNameIndex_property.mSetterDelegate = nil
            managedObject.mComponentValue_property.mSetterDelegate = nil
          }
        //--- Remove observers of stored properties
          self.removeEBObserversOf_mNamePrefix_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mNameIndex_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mComponentValue_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of transient properties
          self.removeEBObserversOf_componentName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_deviceName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_selectedPackageName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_availablePackages_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_deviceSymbolDictionary_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_unplacedSymbols_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_placementInSchematics_fromElementsOfSet (removedObjectSet)
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : ComponentInProject in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
            managedObject.mNamePrefix_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mNameIndex_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mComponentValue_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
        //--- Add observers of stored properties
          self.addEBObserversOf_mNamePrefix_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mNameIndex_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mComponentValue_toElementsOfSet (addedObjectSet)
        //--- Add observers of transient properties
          self.addEBObserversOf_componentName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_deviceName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_selectedPackageName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_availablePackages_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_deviceSymbolDictionary_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_unplacedSymbols_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_placementInSchematics_toElementsOfSet (addedObjectSet)
        }
      //--- Notify observers
        self.propagateProxyUpdate ()
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [ComponentInProject] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [ComponentInProject]) { self.mValue = inValue }

  //····················································································································

  override var propval : [ComponentInProject] { return self.mValue }

  //····················································································································

  override var propset : Set <ComponentInProject> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [ComponentInProject]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : ComponentInProject) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : ComponentInProject) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: mDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_ComponentInProject_mDevice : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : ComponentInProject? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  private var mValue : DeviceInProject? {
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.ebUndoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        oldValue?.mComponents_property.remove (unwrappedOwner)
      //--- Set new opposite relation ship
        self.mValue?.mComponents_property.add (unwrappedOwner)
      //--- Remove property observers of old object
        oldValue?.canExport_property.removeEBObserversFrom (&self.mObserversOf_canExport)
        oldValue?.canRemove_property.removeEBObserversFrom (&self.mObserversOf_canRemove)
        oldValue?.deviceSymbolDictionary_property.removeEBObserversFrom (&self.mObserversOf_deviceSymbolDictionary)
        oldValue?.mComponents_property.removeEBObserversFrom (&self.mObserversOf_mComponents)
        oldValue?.mDeviceFileData_property.removeEBObserversFrom (&self.mObserversOf_mDeviceFileData)
        oldValue?.mDeviceName_property.removeEBObserversFrom (&self.mObserversOf_mDeviceName)
        oldValue?.mDeviceVersion_property.removeEBObserversFrom (&self.mObserversOf_mDeviceVersion)
        oldValue?.mPackages_property.removeEBObserversFrom (&self.mObserversOf_mPackages)
        oldValue?.mPadAssignments_property.removeEBObserversFrom (&self.mObserversOf_mPadAssignments)
        oldValue?.mPrefix_property.removeEBObserversFrom (&self.mObserversOf_mPrefix)
        oldValue?.mSymbols_property.removeEBObserversFrom (&self.mObserversOf_mSymbols)
        oldValue?.packageNames_property.removeEBObserversFrom (&self.mObserversOf_packageNames)
        oldValue?.pinPadAssignments_property.removeEBObserversFrom (&self.mObserversOf_pinPadAssignments)
        oldValue?.sizeString_property.removeEBObserversFrom (&self.mObserversOf_sizeString)
        oldValue?.symbolAndTypesNames_property.removeEBObserversFrom (&self.mObserversOf_symbolAndTypesNames)
        oldValue?.versionString_property.removeEBObserversFrom (&self.mObserversOf_versionString)
      //--- Add property observers to new object
        self.mValue?.canExport_property.addEBObserversFrom (&self.mObserversOf_canExport)
        self.mValue?.canRemove_property.addEBObserversFrom (&self.mObserversOf_canRemove)
        self.mValue?.deviceSymbolDictionary_property.addEBObserversFrom (&self.mObserversOf_deviceSymbolDictionary)
        self.mValue?.mComponents_property.addEBObserversFrom (&self.mObserversOf_mComponents)
        self.mValue?.mDeviceFileData_property.addEBObserversFrom (&self.mObserversOf_mDeviceFileData)
        self.mValue?.mDeviceName_property.addEBObserversFrom (&self.mObserversOf_mDeviceName)
        self.mValue?.mDeviceVersion_property.addEBObserversFrom (&self.mObserversOf_mDeviceVersion)
        self.mValue?.mPackages_property.addEBObserversFrom (&self.mObserversOf_mPackages)
        self.mValue?.mPadAssignments_property.addEBObserversFrom (&self.mObserversOf_mPadAssignments)
        self.mValue?.mPrefix_property.addEBObserversFrom (&self.mObserversOf_mPrefix)
        self.mValue?.mSymbols_property.addEBObserversFrom (&self.mObserversOf_mSymbols)
        self.mValue?.packageNames_property.addEBObserversFrom (&self.mObserversOf_packageNames)
        self.mValue?.pinPadAssignments_property.addEBObserversFrom (&self.mObserversOf_pinPadAssignments)
        self.mValue?.sizeString_property.addEBObserversFrom (&self.mObserversOf_sizeString)
        self.mValue?.symbolAndTypesNames_property.addEBObserversFrom (&self.mObserversOf_symbolAndTypesNames)
        self.mValue?.versionString_property.addEBObserversFrom (&self.mObserversOf_versionString)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : DeviceInProject? { return self.mValue }

  var prop : EBSelection <DeviceInProject?> { return .single (self.mValue) }

  func setProp (_ value : DeviceInProject?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : DeviceInProject?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : DeviceInProject) {
    if self.mValue === object {
      self.mValue = nil
    }
  }

  //····················································································································
  //   Observable atomic property: canExport
  //····················································································································

  private var mObserversOf_canExport = EBWeakEventSet ()

  //····················································································································

  var canExport_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.canExport_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_canExport (_ inObserver : EBEvent) {
    self.mObserversOf_canExport.insert (inObserver)
    if let object = self.propval {
      object.canExport_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_canExport (_ inObserver : EBEvent) {
    self.mObserversOf_canExport.remove (inObserver)
    if let object = self.propval {
      object.canExport_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: canRemove
  //····················································································································

  private var mObserversOf_canRemove = EBWeakEventSet ()

  //····················································································································

  var canRemove_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.canRemove_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_canRemove (_ inObserver : EBEvent) {
    self.mObserversOf_canRemove.insert (inObserver)
    if let object = self.propval {
      object.canRemove_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_canRemove (_ inObserver : EBEvent) {
    self.mObserversOf_canRemove.remove (inObserver)
    if let object = self.propval {
      object.canRemove_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: deviceSymbolDictionary
  //····················································································································

  private var mObserversOf_deviceSymbolDictionary = EBWeakEventSet ()

  //····················································································································

  var deviceSymbolDictionary_property_selection : EBSelection <DeviceSymbolDictionary?> {
    if let model = self.propval {
      switch (model.deviceSymbolDictionary_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_deviceSymbolDictionary (_ inObserver : EBEvent) {
    self.mObserversOf_deviceSymbolDictionary.insert (inObserver)
    if let object = self.propval {
      object.deviceSymbolDictionary_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceSymbolDictionary (_ inObserver : EBEvent) {
    self.mObserversOf_deviceSymbolDictionary.remove (inObserver)
    if let object = self.propval {
      object.deviceSymbolDictionary_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mComponents
  //····················································································································

  private var mObserversOf_mComponents = EBWeakEventSet ()

  //····················································································································

  var mComponents_property_selection : EBSelection <[ComponentInProject]> {
    if let model = self.propval {
      switch (model.mComponents_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mComponents (_ inObserver : EBEvent) {
    self.mObserversOf_mComponents.insert (inObserver)
    if let object = self.propval {
      object.mComponents_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComponents (_ inObserver : EBEvent) {
    self.mObserversOf_mComponents.remove (inObserver)
    if let object = self.propval {
      object.mComponents_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mDeviceFileData
  //····················································································································

  private var mObserversOf_mDeviceFileData = EBWeakEventSet ()

  //····················································································································

  var mDeviceFileData_property_selection : EBSelection <Data?> {
    if let model = self.propval {
      switch (model.mDeviceFileData_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mDeviceFileData (_ inObserver : EBEvent) {
    self.mObserversOf_mDeviceFileData.insert (inObserver)
    if let object = self.propval {
      object.mDeviceFileData_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDeviceFileData (_ inObserver : EBEvent) {
    self.mObserversOf_mDeviceFileData.remove (inObserver)
    if let object = self.propval {
      object.mDeviceFileData_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mDeviceName
  //····················································································································

  private var mObserversOf_mDeviceName = EBWeakEventSet ()

  //····················································································································

  var mDeviceName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mDeviceName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mDeviceName (_ inObserver : EBEvent) {
    self.mObserversOf_mDeviceName.insert (inObserver)
    if let object = self.propval {
      object.mDeviceName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDeviceName (_ inObserver : EBEvent) {
    self.mObserversOf_mDeviceName.remove (inObserver)
    if let object = self.propval {
      object.mDeviceName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mDeviceVersion
  //····················································································································

  private var mObserversOf_mDeviceVersion = EBWeakEventSet ()

  //····················································································································

  var mDeviceVersion_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mDeviceVersion_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mDeviceVersion (_ inObserver : EBEvent) {
    self.mObserversOf_mDeviceVersion.insert (inObserver)
    if let object = self.propval {
      object.mDeviceVersion_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDeviceVersion (_ inObserver : EBEvent) {
    self.mObserversOf_mDeviceVersion.remove (inObserver)
    if let object = self.propval {
      object.mDeviceVersion_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mPackages
  //····················································································································

  private var mObserversOf_mPackages = EBWeakEventSet ()

  //····················································································································

  var mPackages_property_selection : EBSelection <[DevicePackageInProject]> {
    if let model = self.propval {
      switch (model.mPackages_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mPackages (_ inObserver : EBEvent) {
    self.mObserversOf_mPackages.insert (inObserver)
    if let object = self.propval {
      object.mPackages_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackages (_ inObserver : EBEvent) {
    self.mObserversOf_mPackages.remove (inObserver)
    if let object = self.propval {
      object.mPackages_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mPadAssignments
  //····················································································································

  private var mObserversOf_mPadAssignments = EBWeakEventSet ()

  //····················································································································

  var mPadAssignments_property_selection : EBSelection <[DevicePadAssignmentInProject]> {
    if let model = self.propval {
      switch (model.mPadAssignments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mPadAssignments (_ inObserver : EBEvent) {
    self.mObserversOf_mPadAssignments.insert (inObserver)
    if let object = self.propval {
      object.mPadAssignments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPadAssignments (_ inObserver : EBEvent) {
    self.mObserversOf_mPadAssignments.remove (inObserver)
    if let object = self.propval {
      object.mPadAssignments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mPrefix
  //····················································································································

  private var mObserversOf_mPrefix = EBWeakEventSet ()

  //····················································································································

  var mPrefix_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mPrefix_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPrefix (_ inObserver : EBEvent) {
    self.mObserversOf_mPrefix.insert (inObserver)
    if let object = self.propval {
      object.mPrefix_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPrefix (_ inObserver : EBEvent) {
    self.mObserversOf_mPrefix.remove (inObserver)
    if let object = self.propval {
      object.mPrefix_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mSymbols
  //····················································································································

  private var mObserversOf_mSymbols = EBWeakEventSet ()

  //····················································································································

  var mSymbols_property_selection : EBSelection <[DeviceSymbolInstanceInProject]> {
    if let model = self.propval {
      switch (model.mSymbols_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbols (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbols.insert (inObserver)
    if let object = self.propval {
      object.mSymbols_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbols (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbols.remove (inObserver)
    if let object = self.propval {
      object.mSymbols_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: packageNames
  //····················································································································

  private var mObserversOf_packageNames = EBWeakEventSet ()

  //····················································································································

  var packageNames_property_selection : EBSelection <StringArray?> {
    if let model = self.propval {
      switch (model.packageNames_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_packageNames (_ inObserver : EBEvent) {
    self.mObserversOf_packageNames.insert (inObserver)
    if let object = self.propval {
      object.packageNames_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_packageNames (_ inObserver : EBEvent) {
    self.mObserversOf_packageNames.remove (inObserver)
    if let object = self.propval {
      object.packageNames_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: pinPadAssignments
  //····················································································································

  private var mObserversOf_pinPadAssignments = EBWeakEventSet ()

  //····················································································································

  var pinPadAssignments_property_selection : EBSelection <ThreeStringArray?> {
    if let model = self.propval {
      switch (model.pinPadAssignments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_pinPadAssignments (_ inObserver : EBEvent) {
    self.mObserversOf_pinPadAssignments.insert (inObserver)
    if let object = self.propval {
      object.pinPadAssignments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_pinPadAssignments (_ inObserver : EBEvent) {
    self.mObserversOf_pinPadAssignments.remove (inObserver)
    if let object = self.propval {
      object.pinPadAssignments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: sizeString
  //····················································································································

  private var mObserversOf_sizeString = EBWeakEventSet ()

  //····················································································································

  var sizeString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.sizeString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_sizeString (_ inObserver : EBEvent) {
    self.mObserversOf_sizeString.insert (inObserver)
    if let object = self.propval {
      object.sizeString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_sizeString (_ inObserver : EBEvent) {
    self.mObserversOf_sizeString.remove (inObserver)
    if let object = self.propval {
      object.sizeString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: symbolAndTypesNames
  //····················································································································

  private var mObserversOf_symbolAndTypesNames = EBWeakEventSet ()

  //····················································································································

  var symbolAndTypesNames_property_selection : EBSelection <SymbolInProjectIdentifierArray?> {
    if let model = self.propval {
      switch (model.symbolAndTypesNames_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_symbolAndTypesNames (_ inObserver : EBEvent) {
    self.mObserversOf_symbolAndTypesNames.insert (inObserver)
    if let object = self.propval {
      object.symbolAndTypesNames_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolAndTypesNames (_ inObserver : EBEvent) {
    self.mObserversOf_symbolAndTypesNames.remove (inObserver)
    if let object = self.propval {
      object.symbolAndTypesNames_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: versionString
  //····················································································································

  private var mObserversOf_versionString = EBWeakEventSet ()

  //····················································································································

  var versionString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.versionString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.mObserversOf_versionString.insert (inObserver)
    if let object = self.propval {
      object.versionString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.mObserversOf_versionString.remove (inObserver)
    if let object = self.propval {
      object.versionString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: mSelectedPackage
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_ComponentInProject_mSelectedPackage : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : ComponentInProject? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  private var mValue : DevicePackageInProject? {
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.ebUndoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
      //--- Remove property observers of old object
        oldValue?.mMasterPads_property.removeEBObserversFrom (&self.mObserversOf_mMasterPads)
        oldValue?.mPackageName_property.removeEBObserversFrom (&self.mObserversOf_mPackageName)
      //--- Add property observers to new object
        self.mValue?.mMasterPads_property.addEBObserversFrom (&self.mObserversOf_mMasterPads)
        self.mValue?.mPackageName_property.addEBObserversFrom (&self.mObserversOf_mPackageName)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : DevicePackageInProject? { return self.mValue }

  var prop : EBSelection <DevicePackageInProject?> { return .single (self.mValue) }

  func setProp (_ value : DevicePackageInProject?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : DevicePackageInProject?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : DevicePackageInProject) {
    if self.mValue === object {
      self.mValue = nil
    }
  }

  //····················································································································
  //   Observable toMany property: mMasterPads
  //····················································································································

  private var mObserversOf_mMasterPads = EBWeakEventSet ()

  //····················································································································

  var mMasterPads_property_selection : EBSelection <[DeviceMasterPadInProject]> {
    if let model = self.propval {
      switch (model.mMasterPads_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mMasterPads (_ inObserver : EBEvent) {
    self.mObserversOf_mMasterPads.insert (inObserver)
    if let object = self.propval {
      object.mMasterPads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mMasterPads (_ inObserver : EBEvent) {
    self.mObserversOf_mMasterPads.remove (inObserver)
    if let object = self.propval {
      object.mMasterPads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mPackageName
  //····················································································································

  private var mObserversOf_mPackageName = EBWeakEventSet ()

  //····················································································································

  var mPackageName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mPackageName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPackageName (_ inObserver : EBEvent) {
    self.mObserversOf_mPackageName.insert (inObserver)
    if let object = self.propval {
      object.mPackageName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageName (_ inObserver : EBEvent) {
    self.mObserversOf_mPackageName.remove (inObserver)
    if let object = self.propval {
      object.mPackageName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
