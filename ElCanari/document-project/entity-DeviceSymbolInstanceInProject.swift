//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceSymbolInstanceInProject_mSymbolInstanceName : class {
  var mSymbolInstanceName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceSymbolInstanceInProject_symbolAndTypeName : class {
  var symbolAndTypeName : TwoStrings? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceSymbolInstanceInProject_symbolTypeName : class {
  var symbolTypeName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: DeviceSymbolInstanceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class DeviceSymbolInstanceInProject : EBManagedObject,
         DeviceSymbolInstanceInProject_mSymbolInstanceName,
         DeviceSymbolInstanceInProject_symbolAndTypeName,
         DeviceSymbolInstanceInProject_symbolTypeName {

  //····················································································································
  //   Atomic property: mSymbolInstanceName
  //····················································································································

  var mSymbolInstanceName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mSymbolInstanceName : String {
    get { return self.mSymbolInstanceName_property.propval }
    set { self.mSymbolInstanceName_property.setProp (newValue) }
  }

  //····················································································································

  var mSymbolInstanceName_property_selection : EBSelection <String> { return self.mSymbolInstanceName_property.prop }

  //····················································································································
  //   To many property: mPins
  //····················································································································

  let mPins_property = StoredArrayOf_DevicePinInProject ()

  //····················································································································

  var mPins_property_selection : EBSelection < [DevicePinInProject] > {
    return self.mPins_property.prop
  }

  //····················································································································

  var mPins : [DevicePinInProject] {
    get { return self.mPins_property.propval }
    set { self.mPins_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: mSymbolType
  //····················································································································

  let mSymbolType_property = ToOneRelationship_DeviceSymbolInstanceInProject_mSymbolType ()

  //····················································································································

  var mSymbolType_property_selection : EBSelection <DeviceSymbolTypeInProject?> {
    return .single (self.mSymbolType_property.propval)
  }

  //····················································································································

  var mSymbolType : DeviceSymbolTypeInProject? {
    get { return self.mSymbolType_property.propval }
    set { self.mSymbolType_property.setProp (newValue) }
  }

  //····················································································································

  var mSymbolType_none : ToOneRelationship_DeviceSymbolInstanceInProject_mSymbolType { return self.mSymbolType_property }

  //····················································································································

  var mSymbolType_none_selection : EBSelection <Bool> {
    return .single (self.mSymbolType_property.propval == nil)
  }

  //····················································································································
  //   Transient property: symbolAndTypeName
  //····················································································································

  var symbolAndTypeName_property = EBTransientProperty_TwoStrings ()

  //····················································································································

  var symbolAndTypeName_property_selection : EBSelection <TwoStrings> {
    return self.symbolAndTypeName_property.prop
  }

  //····················································································································

  var symbolAndTypeName : TwoStrings? {
    switch self.symbolAndTypeName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolTypeName
  //····················································································································

  var symbolTypeName_property = EBTransientProperty_String ()

  //····················································································································

  var symbolTypeName_property_selection : EBSelection <String> {
    return self.symbolTypeName_property.prop
  }

  //····················································································································

  var symbolTypeName : String? {
    switch self.symbolTypeName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mSymbolInstanceName
    self.mSymbolInstanceName_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mPins (no option)
    self.mPins_property.ebUndoManager = self.ebUndoManager
  //--- To one property: mSymbolType
    self.mSymbolType_property.owner = self
  //--- Atomic property: symbolAndTypeName
    self.symbolAndTypeName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mSymbolInstanceName_property_selection.kind ()
        kind &= unwSelf.mSymbolType_property.mSymbolTypeName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mSymbolInstanceName_property_selection, unwSelf.mSymbolType_property.mSymbolTypeName_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_DeviceSymbolInstanceInProject_symbolAndTypeName (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbolInstanceName_property.addEBObserver (self.symbolAndTypeName_property)
    self.mSymbolType_property.addEBObserverOf_mSymbolTypeName (self.symbolAndTypeName_property)
  //--- Atomic property: symbolTypeName
    self.symbolTypeName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSymbolType_property.mSymbolTypeName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mSymbolType_property.mSymbolTypeName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceSymbolInstanceInProject_symbolTypeName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbolType_property.addEBObserverOf_mSymbolTypeName (self.symbolTypeName_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mSymbolInstanceName_property.removeEBObserver (self.symbolAndTypeName_property)
    self.mSymbolType_property.removeEBObserverOf_mSymbolTypeName (self.symbolAndTypeName_property)
    self.mSymbolType_property.removeEBObserverOf_mSymbolTypeName (self.symbolTypeName_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mSymbolInstanceName",
      idx:self.mSymbolInstanceName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mSymbolInstanceName_property.mObserverExplorer,
      valueExplorer:&self.mSymbolInstanceName_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "symbolAndTypeName",
      idx:self.symbolAndTypeName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.symbolAndTypeName_property.mObserverExplorer,
      valueExplorer:&self.symbolAndTypeName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "symbolTypeName",
      idx:self.symbolTypeName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.symbolTypeName_property.mObserverExplorer,
      valueExplorer:&self.symbolTypeName_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "mPins",
      idx:mPins_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mPins_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "mSymbolType",
      idx:self.mSymbolType_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mSymbolType_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mSymbolInstanceName
    self.mSymbolInstanceName_property.mObserverExplorer = nil
    self.mSymbolInstanceName_property.mValueExplorer = nil
  //--- To many property: mPins
    self.mPins_property.mValueExplorer = nil
  //--- To one property: mSymbolType
    self.mSymbolType_property.mObserverExplorer = nil
    self.mSymbolType_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mPins_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mSymbolType_property.setProp (nil)
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mSymbolInstanceName
    self.mSymbolInstanceName_property.storeIn (dictionary: ioDictionary, forKey:"mSymbolInstanceName")
  //--- To many property: mPins
    self.store (
      managedObjectArray: self.mPins_property.propval,
      relationshipName: "mPins",
      intoDictionary: ioDictionary
    )
  //--- To one property: mSymbolType
    self.store (managedObject:self.mSymbolType_property.propval,
      relationshipName: "mSymbolType",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mPins
    self.mPins_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mPins",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [DevicePinInProject])
  //--- To one property: mSymbolType
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mSymbolType",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? DeviceSymbolTypeInProject {
        self.mSymbolType_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mSymbolInstanceName
    self.mSymbolInstanceName_property.readFrom (dictionary: inDictionary, forKey:"mSymbolInstanceName")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mPins
    for managedObject in self.mPins_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mSymbolType
    if let managedObject = self.mSymbolType_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mPins
    for managedObject in self.mPins_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mSymbolType
    if let managedObject = self.mSymbolType_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_DeviceSymbolInstanceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_DeviceSymbolInstanceInProject : ReadOnlyAbstractArrayProperty <DeviceSymbolInstanceInProject> {

  //····················································································································
  //   Observers of 'mSymbolInstanceName' stored property
  //····················································································································

  private var mObserversOf_mSymbolInstanceName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSymbolInstanceName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolInstanceName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolInstanceName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolInstanceName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolInstanceName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolInstanceName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolInstanceName_toElementsOfSet (_ inSet : Set<DeviceSymbolInstanceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mSymbolInstanceName.apply { (_ observer : EBEvent) in
        managedObject.mSymbolInstanceName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolInstanceName_fromElementsOfSet (_ inSet : Set<DeviceSymbolInstanceInProject>) {
    self.mObserversOf_mSymbolInstanceName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSymbolInstanceName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'symbolAndTypeName' transient property
  //····················································································································

  private var mObserversOf_symbolAndTypeName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_symbolAndTypeName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolAndTypeName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolAndTypeName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolAndTypeName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolAndTypeName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolAndTypeName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_symbolAndTypeName_toElementsOfSet (_ inSet : Set<DeviceSymbolInstanceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_symbolAndTypeName.apply { (_ observer : EBEvent) in
        managedObject.symbolAndTypeName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_symbolAndTypeName_fromElementsOfSet (_ inSet : Set<DeviceSymbolInstanceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_symbolAndTypeName.apply { (_ observer : EBEvent) in
        managedObject.symbolAndTypeName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'symbolTypeName' transient property
  //····················································································································

  private var mObserversOf_symbolTypeName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_symbolTypeName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolTypeName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolTypeName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolTypeName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolTypeName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolTypeName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_symbolTypeName_toElementsOfSet (_ inSet : Set<DeviceSymbolInstanceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_symbolTypeName.apply { (_ observer : EBEvent) in
        managedObject.symbolTypeName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_symbolTypeName_fromElementsOfSet (_ inSet : Set<DeviceSymbolInstanceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_symbolTypeName.apply { (_ observer : EBEvent) in
        managedObject.symbolTypeName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_DeviceSymbolInstanceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_DeviceSymbolInstanceInProject : ReadOnlyArrayOf_DeviceSymbolInstanceInProject {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [DeviceSymbolInstanceInProject] > > = nil

  //····················································································································

  override var propset : Set <DeviceSymbolInstanceInProject> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [DeviceSymbolInstanceInProject] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [DeviceSymbolInstanceInProject] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <DeviceSymbolInstanceInProject> ()

  //····················································································································

  private var mCachedValue : EBSelection < [DeviceSymbolInstanceInProject] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      let cachedValue = unwrappedComputeFunction ()
      self.mCachedValue = cachedValue
      let newSet : Set <DeviceSymbolInstanceInProject>
      switch cachedValue {
      case .multiple, .empty :
        newSet = Set <DeviceSymbolInstanceInProject> ()
      case .single (let array) :
        newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_mSymbolInstanceName_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_symbolAndTypeName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_symbolTypeName_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_mSymbolInstanceName_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_symbolAndTypeName_toElementsOfSet (addedSet)
      self.addEBObserversOf_symbolTypeName_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: DeviceSymbolInstanceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_DeviceSymbolInstanceInProject : ReadOnlyArrayOf_DeviceSymbolInstanceInProject {

  //····················································································································
 
  func setProp (_ value :  [DeviceSymbolInstanceInProject]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: DeviceSymbolInstanceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_DeviceSymbolInstanceInProject : ReadWriteArrayOf_DeviceSymbolInstanceInProject, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : DeviceSymbolInstanceInProject?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [DeviceSymbolInstanceInProject] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "DeviceSymbolInstanceInProject") as? DeviceSymbolInstanceInProject {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <DeviceSymbolInstanceInProject> ()
  private var mValue = [DeviceSymbolInstanceInProject] () {
    didSet {
     // self.postEvent ()
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.setOppositeRelationship? (nil)
            managedObject.mSymbolInstanceName_property.mSetterDelegate = nil
          }
       //   self.removeEBObserversOf_mSymbolInstanceName_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_symbolAndTypeName_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_symbolTypeName_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of stored properties
          self.removeEBObserversOf_mSymbolInstanceName_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of transient properties
          self.removeEBObserversOf_symbolAndTypeName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_symbolTypeName_fromElementsOfSet (removedObjectSet)
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : DeviceSymbolInstanceInProject in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
            managedObject.mSymbolInstanceName_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
        // self.addEBObserversOf_mSymbolInstanceName_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_symbolAndTypeName_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_symbolTypeName_toElementsOfSet (addedObjectSet)
        //--- Add observers of stored properties
          self.addEBObserversOf_mSymbolInstanceName_toElementsOfSet (addedObjectSet)
        //--- Add observers of transient properties
          self.addEBObserversOf_symbolAndTypeName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_symbolTypeName_toElementsOfSet (addedObjectSet)
        }
      //--- Notify observers
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [DeviceSymbolInstanceInProject] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [DeviceSymbolInstanceInProject]) { self.mValue = inValue }

  //····················································································································

  override var propval : [DeviceSymbolInstanceInProject] { return self.mValue }

  //····················································································································

  override var propset : Set <DeviceSymbolInstanceInProject> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [DeviceSymbolInstanceInProject]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : DeviceSymbolInstanceInProject) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : DeviceSymbolInstanceInProject) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: mSymbolType
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_DeviceSymbolInstanceInProject_mSymbolType : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : DeviceSymbolInstanceInProject? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  private var mValue : DeviceSymbolTypeInProject? {
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.ebUndoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
      //--- Remove property observers of old object
        oldValue?.mFilledBezierPath_property.removeEBObserversFrom (&self.mObserversOf_mFilledBezierPath)
        oldValue?.mStrokeBezierPath_property.removeEBObserversFrom (&self.mObserversOf_mStrokeBezierPath)
        oldValue?.mSymbolTypeName_property.removeEBObserversFrom (&self.mObserversOf_mSymbolTypeName)
      //--- Add property observers to new object
        self.mValue?.mFilledBezierPath_property.addEBObserversFrom (&self.mObserversOf_mFilledBezierPath)
        self.mValue?.mStrokeBezierPath_property.addEBObserversFrom (&self.mObserversOf_mStrokeBezierPath)
        self.mValue?.mSymbolTypeName_property.addEBObserversFrom (&self.mObserversOf_mSymbolTypeName)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : DeviceSymbolTypeInProject? { return self.mValue }

  var prop : EBSelection <DeviceSymbolTypeInProject?> { return .single (self.mValue) }

  func setProp (_ value : DeviceSymbolTypeInProject?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : DeviceSymbolTypeInProject?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : DeviceSymbolTypeInProject) {
    if self.mValue === object {
      self.mValue = nil
    }
  }

  //····················································································································
  //   Observable property: mFilledBezierPath
  //····················································································································

  private var mObserversOf_mFilledBezierPath = EBWeakEventSet ()

  //····················································································································

  var mFilledBezierPath_property_selection : EBSelection <NSBezierPath?> {
    if let model = self.propval {
      switch (model.mFilledBezierPath_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mFilledBezierPath (_ inObserver : EBEvent) {
    self.mObserversOf_mFilledBezierPath.insert (inObserver)
    if let object = self.propval {
      object.mFilledBezierPath_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mFilledBezierPath (_ inObserver : EBEvent) {
    self.mObserversOf_mFilledBezierPath.remove (inObserver)
    if let object = self.propval {
      object.mFilledBezierPath_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mStrokeBezierPath
  //····················································································································

  private var mObserversOf_mStrokeBezierPath = EBWeakEventSet ()

  //····················································································································

  var mStrokeBezierPath_property_selection : EBSelection <NSBezierPath?> {
    if let model = self.propval {
      switch (model.mStrokeBezierPath_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mStrokeBezierPath (_ inObserver : EBEvent) {
    self.mObserversOf_mStrokeBezierPath.insert (inObserver)
    if let object = self.propval {
      object.mStrokeBezierPath_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mStrokeBezierPath (_ inObserver : EBEvent) {
    self.mObserversOf_mStrokeBezierPath.remove (inObserver)
    if let object = self.propval {
      object.mStrokeBezierPath_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mSymbolTypeName
  //····················································································································

  private var mObserversOf_mSymbolTypeName = EBWeakEventSet ()

  //····················································································································

  var mSymbolTypeName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mSymbolTypeName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolTypeName (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolTypeName.insert (inObserver)
    if let object = self.propval {
      object.mSymbolTypeName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolTypeName (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolTypeName.remove (inObserver)
    if let object = self.propval {
      object.mSymbolTypeName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
