//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Object Controller ProjectDocument mSelectedSheetController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class Controller_ProjectDocument_mSelectedSheetController : EBObject {
 
  //····················································································································
  //    Init
  //····················································································································

  override init () {
    super.init ()
    self.mSheetTitle_property.mReadModelFunction = { [weak self] in
      return self?.mModel?.mSheetTitle_property_selection ?? .empty
    }
    self.mSheetTitle_property.mWriteModelFunction = { [weak self] (inValue : String) in
      self?.mModel?.mSheetTitle = inValue
    }
    self.mSheetTitle_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : String, windowForSheet : NSWindow?) in
      if let property = self?.mModel?.mSheetTitle_property {
        return property.validateAndSetProp (candidateValue, windowForSheet: windowForSheet)
      }else{
        return false
      }
    }
  }

  //····················································································································
  //   ToMany relationship: mObjects
  //····················································································································

  let mObjects_property = StoredArrayOf_SchematicsObject ()

  //····················································································································
  //   Observable atomic property: mSheetTitle
  //····················································································································

  let mSheetTitle_property = EBPropertyProxy_String ()

  var mSheetTitle_property_selection : EBSelection <String> {
    return self.mSheetTitle_property.prop
  }

  //····················································································································
  //    Controller
  //····················································································································

  private var mModelController : EBSimpleController? = nil
  private var mBoundObjectController_mObjects : EBSimpleController? = nil

  //····················································································································

  func bind_model (_ inToOneRelationship : ToOneRelationship_ProjectRoot_mSelectedSheet) {
    self.mModelController = EBSimpleController (
      observedObjects: [inToOneRelationship],
      callBack: { [weak self] in self?.modelDidChange (inToOneRelationship) }
    )
    self.mBoundObjectController_mObjects = EBSimpleController (
      observedObjects: [self.mObjects_property],
      callBack: { [weak self] in
        let objects = self?.mObjects_property.propval ?? []
        //NSLog ("bound objects \(objects.count) \(self?.mModel)")
        self?.mModel?.mObjects = objects
      }
    )
  }

  //····················································································································

  private func modelDidChange (_ inToOneRelationship : ToOneRelationship_ProjectRoot_mSelectedSheet) {
    self.mModel = inToOneRelationship.propval
    self.mObjects_property.setProp (self.mModel?.mObjects_property.propval ?? [])
  }

  //····················································································································

  func unbind_model () {
    self.mModelController?.unregister ()
    self.mModelController = nil
    self.mBoundObjectController_mObjects?.unregister ()
    self.mBoundObjectController_mObjects = nil
    self.mModel = nil
  }

  //····················································································································
  //    Model
  //····················································································································

  private var mModel : SheetInProject? = nil {
    didSet {
      if self.mModel !== oldValue {
      //--- ToMany relationship mObjects
        if let controller = self.mModelController {
          oldValue?.mObjects_property.removeEBObserver (controller)
          self.mModel?.mObjects_property.addEBObserver (controller)
        }
      //--- Atomic property mSheetTitle
        oldValue?.mSheetTitle_property.removeEBObserver (self.mSheetTitle_property)
        self.mModel?.mSheetTitle_property.addEBObserver (self.mSheetTitle_property)
      }
    }
  }

  //····················································································································
  //    Explorer
  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

