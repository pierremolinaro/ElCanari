//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func transient_ComponentSymbolInProject_symbolInfo (
       _ self_componentName : String,               
       _ self_mComponent_mComponentValue : String?, 
       _ self_mComponent_deviceSymbolDictionary : DeviceSymbolDictionary?,
       _ self_mSymbolInstanceName : String,         
       _ self_mSymbolTypeName : String,             
       _ self_mCenterX : Int,                       
       _ self_mCenterY : Int,                       
       _ prefs_pinNameFont : NSFont
) -> ComponentSymbolInfo {
//--- START OF USER ZONE 2
        let key = SymbolInProjectIdentifier (instanceName: self_mSymbolInstanceName, typeName: self_mSymbolTypeName)
        let deviceInfo = self_mComponent_deviceSymbolDictionary! [key]!
        let tr = NSAffineTransform ()
        tr.translateX (by: canariUnitToCocoa (self_mCenterX - deviceInfo.center.x), yBy: canariUnitToCocoa (self_mCenterY - deviceInfo.center.y))
      //--- Pin names and pad names
        let pinNameAttributes : [NSAttributedString.Key : Any] = [
          NSAttributedString.Key.font : prefs_pinNameFont
        ]
        var pinNameShapes = [PinShapeDescriptor] ()
        for pinPadAssignment in deviceInfo.assignments {
          if let pin = pinPadAssignment.pin {
            if pin.pinNameIsDisplayedInSchematics {
              let pinNameTextShape = EBTextShape (
                pin.pinName,
                pin.nameXY.cocoaPoint (),
                pinNameAttributes,
                pin.nameHorizontalAlignment.ebTextShapeHorizontalAlignment(),
                .center
              )
              pinNameShapes.append (PinShapeDescriptor (symbol: pin.symbol, shape: pinNameTextShape.transformedBy (tr)))
            }
            let pinNumberTextShape = EBTextShape (
              pinPadAssignment.padName,
              pin.numberXY.cocoaPoint (),
              pinNameAttributes,
              pin.numberHorizontalAlignment.ebTextShapeHorizontalAlignment (),
              .center
            )
            pinNameShapes.append (PinShapeDescriptor (symbol: pin.symbol, shape: pinNumberTextShape.transformedBy (tr)))
          }
        }
      //---
        let transformedStrokeBezierPath = tr.transform (deviceInfo.strokeBezierPath)
        let transformedFilledBezierPath = tr.transform (deviceInfo.filledBezierPath)
        let componentSymbolCenter = CanariPoint (x: self_mCenterX, y: self_mCenterY)
        return ComponentSymbolInfo (
          filledBezierPath: transformedFilledBezierPath,
          strokeBezierPath: transformedStrokeBezierPath,
          center: componentSymbolCenter,
          pinShapes: pinNameShapes,
          componentName: self_componentName,
          componentValue: self_mComponent_mComponentValue!
        )
//--- END OF USER ZONE 2
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
