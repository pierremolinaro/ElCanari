//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PointInSchematics_mSymbolPinName : class {
  var mSymbolPinName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PointInSchematics_mX : class {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PointInSchematics_mY : class {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PointInSchematics_location : class {
  var location : CanariPoint? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PointInSchematics_netName : class {
  var netName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PointInSchematics_isConnected : class {
  var isConnected : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PointInSchematics_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PointInSchematics_connectedPoints : class {
  var connectedPoints : CanariPointArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PointInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class PointInSchematics : EBManagedObject,
         PointInSchematics_mSymbolPinName,
         PointInSchematics_mX,
         PointInSchematics_mY,
         PointInSchematics_location,
         PointInSchematics_netName,
         PointInSchematics_isConnected,
         PointInSchematics_issues,
         PointInSchematics_connectedPoints {

  //····················································································································
  //   Atomic property: mSymbolPinName
  //····················································································································

  let mSymbolPinName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mSymbolPinName : String {
    get { return self.mSymbolPinName_property.propval }
    set { self.mSymbolPinName_property.setProp (newValue) }
  }

  //····················································································································

  var mSymbolPinName_property_selection : EBSelection <String> { return self.mSymbolPinName_property.prop }

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  let mX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································

  var mX_property_selection : EBSelection <Int> { return self.mX_property.prop }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  let mY_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································

  var mY_property_selection : EBSelection <Int> { return self.mY_property.prop }

  //····················································································································
  //   To many property: mWiresP2s
  //····················································································································

  let mWiresP2s_property = StoredArrayOf_WireInSchematics ()

  //····················································································································

  var mWiresP2s_property_selection : EBSelection < [WireInSchematics] > {
    return self.mWiresP2s_property.prop
  }

  //····················································································································

  var mWiresP2s : [WireInSchematics] {
    get { return self.mWiresP2s_property.propval }
    set { self.mWiresP2s_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mLabels
  //····················································································································

  let mLabels_property = StoredArrayOf_LabelInSchematics ()

  //····················································································································

  var mLabels_property_selection : EBSelection < [LabelInSchematics] > {
    return self.mLabels_property.prop
  }

  //····················································································································

  var mLabels : [LabelInSchematics] {
    get { return self.mLabels_property.propval }
    set { self.mLabels_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mWiresP1s
  //····················································································································

  let mWiresP1s_property = StoredArrayOf_WireInSchematics ()

  //····················································································································

  var mWiresP1s_property_selection : EBSelection < [WireInSchematics] > {
    return self.mWiresP1s_property.prop
  }

  //····················································································································

  var mWiresP1s : [WireInSchematics] {
    get { return self.mWiresP1s_property.propval }
    set { self.mWiresP1s_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: mSymbol
  //····················································································································

  let mSymbol_property = ToOneRelationship_PointInSchematics_mSymbol ()

  //····················································································································

  var mSymbol_property_selection : EBSelection <ComponentSymbolInProject?> {
    return .single (self.mSymbol_property.propval)
  }

  //····················································································································

  var mSymbol : ComponentSymbolInProject? {
    get { return self.mSymbol_property.propval }
    set { self.mSymbol_property.setProp (newValue) }
  }

  //····················································································································

  var mSymbol_none : ToOneRelationship_PointInSchematics_mSymbol { return self.mSymbol_property }

  //····················································································································

  var mSymbol_none_selection : EBSelection <Bool> {
    return .single (self.mSymbol_property.propval == nil)
  }

  //····················································································································
  //   To one property: mNet
  //····················································································································

  let mNet_property = ToOneRelationship_PointInSchematics_mNet ()

  //····················································································································

  var mNet_property_selection : EBSelection <NetInProject?> {
    return .single (self.mNet_property.propval)
  }

  //····················································································································

  var mNet : NetInProject? {
    get { return self.mNet_property.propval }
    set { self.mNet_property.setProp (newValue) }
  }

  //····················································································································

  var mNet_none : ToOneRelationship_PointInSchematics_mNet { return self.mNet_property }

  //····················································································································

  var mNet_none_selection : EBSelection <Bool> {
    return .single (self.mNet_property.propval == nil)
  }

  //····················································································································
  //   Transient property: location
  //····················································································································

  let location_property = EBTransientProperty_CanariPoint ()

  //····················································································································

  var location_property_selection : EBSelection <CanariPoint> {
    return self.location_property.prop
  }

  //····················································································································

  var location : CanariPoint? {
    switch self.location_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netName
  //····················································································································

  let netName_property = EBTransientProperty_String ()

  //····················································································································

  var netName_property_selection : EBSelection <String> {
    return self.netName_property.prop
  }

  //····················································································································

  var netName : String? {
    switch self.netName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   To one property: mNC
  //····················································································································

  let mNC_property = ToOneRelationship_PointInSchematics_mNC ()

  //····················································································································

  var mNC_property_selection : EBSelection <NCInSchematics?> {
    return .single (self.mNC_property.propval)
  }

  //····················································································································

  var mNC : NCInSchematics? {
    get { return self.mNC_property.propval }
    set { self.mNC_property.setProp (newValue) }
  }

  //····················································································································

  var mNC_none : ToOneRelationship_PointInSchematics_mNC { return self.mNC_property }

  //····················································································································

  var mNC_none_selection : EBSelection <Bool> {
    return .single (self.mNC_property.propval == nil)
  }

  //····················································································································
  //   Transient property: isConnected
  //····················································································································

  let isConnected_property = EBTransientProperty_Bool ()

  //····················································································································

  var isConnected_property_selection : EBSelection <Bool> {
    return self.isConnected_property.prop
  }

  //····················································································································

  var isConnected : Bool? {
    switch self.isConnected_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: issues
  //····················································································································

  let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray> {
    return self.issues_property.prop
  }

  //····················································································································

  var issues : CanariIssueArray? {
    switch self.issues_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: connectedPoints
  //····················································································································

  let connectedPoints_property = EBTransientProperty_CanariPointArray ()

  //····················································································································

  var connectedPoints_property_selection : EBSelection <CanariPointArray> {
    return self.connectedPoints_property.prop
  }

  //····················································································································

  var connectedPoints : CanariPointArray? {
    switch self.connectedPoints_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mSymbolPinName
    self.mSymbolPinName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mX
    self.mX_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mY
    self.mY_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mWiresP2s (has opposite relationship)
    self.mWiresP2s_property.ebUndoManager = self.ebUndoManager
    self.mWiresP2s_property.setOppositeRelationship = { [weak self] (_ inManagedObject :WireInSchematics?) in
      inManagedObject?.mP2_property.setProp (self)
    }
  //--- To many property: mLabels (has opposite relationship)
    self.mLabels_property.ebUndoManager = self.ebUndoManager
    self.mLabels_property.setOppositeRelationship = { [weak self] (_ inManagedObject :LabelInSchematics?) in
      inManagedObject?.mPoint_property.setProp (self)
    }
  //--- To many property: mWiresP1s (has opposite relationship)
    self.mWiresP1s_property.ebUndoManager = self.ebUndoManager
    self.mWiresP1s_property.setOppositeRelationship = { [weak self] (_ inManagedObject :WireInSchematics?) in
      inManagedObject?.mP1_property.setProp (self)
    }
  //--- To one property: mSymbol
    self.mSymbol_property.owner = self
  //--- To one property: mNet
    self.mNet_property.owner = self
  //--- Atomic property: location
    self.location_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        kind &= unwSelf.mSymbolPinName_property_selection.kind ()
        kind &= unwSelf.mSymbol_property.symbolInfo_property_selection.kind ()
        kind &= unwSelf.mSymbol_property.mSymbolInstanceName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mX_property_selection, unwSelf.mY_property_selection, unwSelf.mSymbolPinName_property_selection, unwSelf.mSymbol_property.symbolInfo_property_selection, unwSelf.mSymbol_property.mSymbolInstanceName_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_PointInSchematics_location (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.location_property)
    self.mY_property.addEBObserver (self.location_property)
    self.mSymbolPinName_property.addEBObserver (self.location_property)
    self.mSymbol_property.addEBObserverOf_symbolInfo (self.location_property)
    self.mSymbol_property.addEBObserverOf_mSymbolInstanceName (self.location_property)
  //--- Atomic property: netName
    self.netName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNet_property.mNetName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mNet_property.mNetName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PointInSchematics_netName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.addEBObserverOf_mNetName (self.netName_property)
  //--- To one property: mNC
    self.mNC_property.owner = self
  //--- Atomic property: isConnected
    self.isConnected_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mNC_none_selection.kind ()
        kind &= unwSelf.mWiresP1s_property.count_property_selection.kind ()
        kind &= unwSelf.mWiresP2s_property.count_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mNC_none_selection, unwSelf.mWiresP1s_property.count_property_selection, unwSelf.mWiresP2s_property.count_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_PointInSchematics_isConnected (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNC_property.addEBObserver (self.isConnected_property)
    self.mWiresP1s_property.addEBObserver (self.isConnected_property)
    self.mWiresP2s_property.addEBObserver (self.isConnected_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.location_property_selection.kind ()
        kind &= unwSelf.isConnected_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.location_property_selection, unwSelf.isConnected_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_PointInSchematics_issues (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.location_property.addEBObserver (self.issues_property)
    self.isConnected_property.addEBObserver (self.issues_property)
  //--- Atomic property: connectedPoints
    self.connectedPoints_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.location_property_selection.kind ()
        kind &= unwSelf.isConnected_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.location_property_selection, unwSelf.isConnected_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_PointInSchematics_connectedPoints (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.location_property.addEBObserver (self.connectedPoints_property)
    self.isConnected_property.addEBObserver (self.connectedPoints_property)
  //--- Install undoers and opposite setter for relationships
    self.mWiresP2s_property.setOppositeRelationship = { [weak self] (_ inManagedObject : WireInSchematics) in
      if let me = self {
        inManagedObject.mP2_property.setProp (me)
      }
    }
    self.mWiresP2s_property.resetOppositeRelationship = { (_ inManagedObject : WireInSchematics) in
      inManagedObject.mP2_property.setProp (nil)
    }
    self.mLabels_property.setOppositeRelationship = { [weak self] (_ inManagedObject : LabelInSchematics) in
      if let me = self {
        inManagedObject.mPoint_property.setProp (me)
      }
    }
    self.mLabels_property.resetOppositeRelationship = { (_ inManagedObject : LabelInSchematics) in
      inManagedObject.mPoint_property.setProp (nil)
    }
    self.mWiresP1s_property.setOppositeRelationship = { [weak self] (_ inManagedObject : WireInSchematics) in
      if let me = self {
        inManagedObject.mP1_property.setProp (me)
      }
    }
    self.mWiresP1s_property.resetOppositeRelationship = { (_ inManagedObject : WireInSchematics) in
      inManagedObject.mP1_property.setProp (nil)
    }
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mX_property.removeEBObserver (self.location_property)
    self.mY_property.removeEBObserver (self.location_property)
    self.mSymbolPinName_property.removeEBObserver (self.location_property)
    self.mSymbol_property.removeEBObserverOf_symbolInfo (self.location_property)
    self.mSymbol_property.removeEBObserverOf_mSymbolInstanceName (self.location_property)
    self.mNet_property.removeEBObserverOf_mNetName (self.netName_property)
    self.mNC_property.removeEBObserver (self.isConnected_property)
    self.mWiresP1s_property.removeEBObserver (self.isConnected_property)
    self.mWiresP2s_property.removeEBObserver (self.isConnected_property)
    self.location_property.removeEBObserver (self.issues_property)
    self.isConnected_property.removeEBObserver (self.issues_property)
    self.location_property.removeEBObserver (self.connectedPoints_property)
    self.isConnected_property.removeEBObserver (self.connectedPoints_property)
 //   self.mWiresP2s_property.setOppositeRelationship = nil
 //   self.mLabels_property.setOppositeRelationship = nil
 //   self.mWiresP1s_property.setOppositeRelationship = nil
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mSymbolPinName",
      idx:self.mSymbolPinName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mSymbolPinName_property.mObserverExplorer,
      valueExplorer:&self.mSymbolPinName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mX",
      idx:self.mX_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mX_property.mObserverExplorer,
      valueExplorer:&self.mX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mY",
      idx:self.mY_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mY_property.mObserverExplorer,
      valueExplorer:&self.mY_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "location",
      idx:self.location_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.location_property.mObserverExplorer,
      valueExplorer:&self.location_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netName",
      idx:self.netName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.netName_property.mObserverExplorer,
      valueExplorer:&self.netName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "isConnected",
      idx:self.isConnected_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.isConnected_property.mObserverExplorer,
      valueExplorer:&self.isConnected_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx:self.issues_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.issues_property.mObserverExplorer,
      valueExplorer:&self.issues_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "connectedPoints",
      idx:self.connectedPoints_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.connectedPoints_property.mObserverExplorer,
      valueExplorer:&self.connectedPoints_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "mWiresP2s",
      idx:mWiresP2s_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mWiresP2s_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mLabels",
      idx:mLabels_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mLabels_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mWiresP1s",
      idx:mWiresP1s_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mWiresP1s_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "mSymbol",
      idx:self.mSymbol_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mSymbol_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mNet",
      idx:self.mNet_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mNet_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mNC",
      idx:self.mNC_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mNC_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mSymbolPinName
    self.mSymbolPinName_property.mObserverExplorer = nil
    self.mSymbolPinName_property.mValueExplorer = nil
  //--- Atomic property: mX
    self.mX_property.mObserverExplorer = nil
    self.mX_property.mValueExplorer = nil
  //--- Atomic property: mY
    self.mY_property.mObserverExplorer = nil
    self.mY_property.mValueExplorer = nil
  //--- To many property: mWiresP2s
    self.mWiresP2s_property.mValueExplorer = nil
  //--- To many property: mLabels
    self.mLabels_property.mValueExplorer = nil
  //--- To many property: mWiresP1s
    self.mWiresP1s_property.mValueExplorer = nil
  //--- To one property: mSymbol
    self.mSymbol_property.mObserverExplorer = nil
    self.mSymbol_property.mValueExplorer = nil
  //--- To one property: mNet
    self.mNet_property.mObserverExplorer = nil
    self.mNet_property.mValueExplorer = nil
  //--- To one property: mNC
    self.mNC_property.mObserverExplorer = nil
    self.mNC_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mWiresP2s_property.setProp ([])
    self.mLabels_property.setProp ([])
    self.mWiresP1s_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mSymbol_property.setProp (nil)
    self.mNet_property.setProp (nil)
    self.mNC_property.setProp (nil)
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mSymbolPinName
    self.mSymbolPinName_property.storeIn (dictionary: ioDictionary, forKey:"mSymbolPinName")
  //--- Atomic property: mX
    self.mX_property.storeIn (dictionary: ioDictionary, forKey:"mX")
  //--- Atomic property: mY
    self.mY_property.storeIn (dictionary: ioDictionary, forKey:"mY")
  //--- To many property: mWiresP2s
    self.store (
      managedObjectArray: self.mWiresP2s_property.propval,
      relationshipName: "mWiresP2s",
      intoDictionary: ioDictionary
    )
  //--- To many property: mLabels
    self.store (
      managedObjectArray: self.mLabels_property.propval,
      relationshipName: "mLabels",
      intoDictionary: ioDictionary
    )
  //--- To many property: mWiresP1s
    self.store (
      managedObjectArray: self.mWiresP1s_property.propval,
      relationshipName: "mWiresP1s",
      intoDictionary: ioDictionary
    )
  //--- To one property: mNC // Opposite is toOne mPoint
    self.store (managedObject:self.mNC_property.propval,
      relationshipName: "mNC",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mWiresP2s
    self.mWiresP2s_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mWiresP2s",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [WireInSchematics])
  //--- To many property: mLabels
    self.mLabels_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mLabels",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [LabelInSchematics])
  //--- To many property: mWiresP1s
    self.mWiresP1s_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mWiresP1s",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [WireInSchematics])
  //--- To one property: mSymbol
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mSymbol",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? ComponentSymbolInProject {
        self.mSymbol_property.setProp (entity)
      }
    }
  //--- To one property: mNet
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mNet",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? NetInProject {
        self.mNet_property.setProp (entity)
      }
    }
  //--- To one property: mNC
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mNC",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? NCInSchematics {
        self.mNC_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mSymbolPinName
    self.mSymbolPinName_property.readFrom (dictionary: inDictionary, forKey:"mSymbolPinName")
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey:"mX")
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey:"mY")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mWiresP2s
    for managedObject in self.mWiresP2s_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mLabels
    for managedObject in self.mLabels_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mWiresP1s
    for managedObject in self.mWiresP1s_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mSymbol
    if let managedObject = self.mSymbol_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mNet
    if let managedObject = self.mNet_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mNC
    if let managedObject = self.mNC_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mWiresP2s
    for managedObject in self.mWiresP2s_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mLabels
    for managedObject in self.mLabels_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mWiresP1s
    for managedObject in self.mWiresP1s_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mSymbol
    if let managedObject = self.mSymbol_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mNet
    if let managedObject = self.mNet_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mNC
    if let managedObject = self.mNC_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PointInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PointInSchematics : ReadOnlyAbstractArrayProperty <PointInSchematics> {

  //····················································································································
  //   Observers of 'mSymbolPinName' stored property
  //····················································································································

  private var mObserversOf_mSymbolPinName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSymbolPinName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolPinName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolPinName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolPinName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolPinName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolPinName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolPinName_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_mSymbolPinName.apply { (_ observer : EBEvent) in
        managedObject.mSymbolPinName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolPinName_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    self.mObserversOf_mSymbolPinName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSymbolPinName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mX.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mX.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mX_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_mX.apply { (_ observer : EBEvent) in
        managedObject.mX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    self.mObserversOf_mX.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private var mObserversOf_mY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mY.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mY.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mY_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_mY.apply { (_ observer : EBEvent) in
        managedObject.mY_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mY_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    self.mObserversOf_mY.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'location' transient property
  //····················································································································

  private var mObserversOf_location = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_location (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_location.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.location_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_location (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_location.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.location_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_location_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_location.apply { (_ observer : EBEvent) in
        managedObject.location_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_location_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_location.apply { (_ observer : EBEvent) in
        managedObject.location_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netName' transient property
  //····················································································································

  private var mObserversOf_netName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netName_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_netName.apply { (_ observer : EBEvent) in
        managedObject.netName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netName_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_netName.apply { (_ observer : EBEvent) in
        managedObject.netName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'isConnected' transient property
  //····················································································································

  private var mObserversOf_isConnected = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_isConnected (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_isConnected.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isConnected_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_isConnected (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_isConnected.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isConnected_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_isConnected_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_isConnected.apply { (_ observer : EBEvent) in
        managedObject.isConnected_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_isConnected_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_isConnected.apply { (_ observer : EBEvent) in
        managedObject.isConnected_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connectedPoints' transient property
  //····················································································································

  private var mObserversOf_connectedPoints = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connectedPoints.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connectedPoints_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connectedPoints.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connectedPoints_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_connectedPoints_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_connectedPoints.apply { (_ observer : EBEvent) in
        managedObject.connectedPoints_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connectedPoints_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_connectedPoints.apply { (_ observer : EBEvent) in
        managedObject.connectedPoints_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_PointInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_PointInSchematics : ReadOnlyArrayOf_PointInSchematics {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [PointInSchematics] > > = nil

  //····················································································································

  override var propset : Set <PointInSchematics> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [PointInSchematics] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [PointInSchematics] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  private var mSet = Set <PointInSchematics> ()

  //····················································································································

  private var mCachedValue : EBSelection < [PointInSchematics] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      let cachedValue = unwrappedComputeFunction ()
      self.mCachedValue = cachedValue
      let newSet : Set <PointInSchematics>
      switch cachedValue {
      case .multiple, .empty :
        newSet = Set <PointInSchematics> ()
      case .single (let array) :
        newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_mSymbolPinName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mX_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mY_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_location_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_netName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_isConnected_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_issues_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_connectedPoints_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_mSymbolPinName_toElementsOfSet (addedSet)
      self.addEBObserversOf_mX_toElementsOfSet (addedSet)
      self.addEBObserversOf_mY_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_location_toElementsOfSet (addedSet)
      self.addEBObserversOf_netName_toElementsOfSet (addedSet)
      self.addEBObserversOf_isConnected_toElementsOfSet (addedSet)
      self.addEBObserversOf_issues_toElementsOfSet (addedSet)
      self.addEBObserversOf_connectedPoints_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PointInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PointInSchematics : ReadOnlyArrayOf_PointInSchematics {

  //····················································································································
 
  func setProp (_ value :  [PointInSchematics]) { } // Abstract method
  
 //····················································································································

  private var mProxyArray = [ProxyArrayOf_PointInSchematics] ()

  //····················································································································

  func attachProxy (_ inProxy : ProxyArrayOf_PointInSchematics) {
    self.mProxyArray.append (inProxy)
    inProxy.updateProxy ()
    self.postEvent ()
  }

  //····················································································································

  func detachProxy (_ inProxy : ProxyArrayOf_PointInSchematics) {
    if let idx = self.mProxyArray.firstIndex(of: inProxy) {
      self.mProxyArray.remove (at: idx)
      self.postEvent ()
    }
  }

  //····················································································································

  internal func propagateProxyUpdate () {
    for proxy in self.mProxyArray {
      proxy.updateProxy ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PointInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_PointInSchematics : ReadWriteArrayOf_PointInSchematics {

   //····················································································································

  private var mModel : ReadWriteArrayOf_PointInSchematics? = nil

  //····················································································································

  private var mInternalValue : EBSelection < [PointInSchematics] > = .empty {
    didSet {
      if self.mInternalValue != oldValue {
        switch self.mInternalValue {
        case .empty, .multiple :
          self.mCurrentObjectSet = []
        case .single (let v) :
          self.mCurrentObjectSet = Set (v)
        }
        self.propagateProxyUpdate ()
        self.postEvent ()
      }
    }
  }

  //····················································································································

  private var mCurrentObjectSet = Set <PointInSchematics> () {
    didSet {
      if self.mCurrentObjectSet != oldValue {
      //--- Add observers from removed objects
        let removedObjectSet = oldValue.subtracting (self.mCurrentObjectSet)
        self.removeEBObserversOf_mSymbolPinName_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_mX_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_mY_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_location_fromElementsOfSet (removedObjectSet) // Transient property
        self.removeEBObserversOf_netName_fromElementsOfSet (removedObjectSet) // Transient property
        self.removeEBObserversOf_isConnected_fromElementsOfSet (removedObjectSet) // Transient property
        self.removeEBObserversOf_issues_fromElementsOfSet (removedObjectSet) // Transient property
        self.removeEBObserversOf_connectedPoints_fromElementsOfSet (removedObjectSet) // Transient property
      //--- Add observers to added objects
        let addedObjectSet = self.mCurrentObjectSet.subtracting (oldValue)
        self.addEBObserversOf_mSymbolPinName_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_mX_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_mY_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_location_toElementsOfSet (addedObjectSet) // Transient property
        self.addEBObserversOf_netName_toElementsOfSet (addedObjectSet) // Transient property
        self.addEBObserversOf_isConnected_toElementsOfSet (addedObjectSet) // Transient property
        self.addEBObserversOf_issues_toElementsOfSet (addedObjectSet) // Transient property
        self.addEBObserversOf_connectedPoints_toElementsOfSet (addedObjectSet) // Transient property
      }
    }
  }

  //····················································································································

  func bind (_ inModel : ReadWriteArrayOf_PointInSchematics) {
    self.unbind ()
    self.mModel = inModel
    inModel.attachProxy (self)
  }

  //····················································································································

  func unbind () {
    if let model = self.mModel {
      model.detachProxy (self)
      self.mModel = nil
    }
  }

  //····················································································································

  func updateProxy () {
    if let model = self.mModel {
      self.mInternalValue = model.prop
    }else{
      self.mInternalValue = .empty
    }
  }

  //····················································································································

  override func setProp (_ inArrayValue :  [PointInSchematics]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [PointInSchematics] > {
    return self.mInternalValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: PointInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_PointInSchematics : ReadWriteArrayOf_PointInSchematics, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : PointInSchematics) -> Void > = nil
  var resetOppositeRelationship : Optional < (_ inManagedObject : PointInSchematics) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [PointInSchematics] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "PointInSchematics") as? PointInSchematics {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <PointInSchematics> ()
  private var mValue = [PointInSchematics] () {
    didSet {
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.resetOppositeRelationship? (managedObject)
            managedObject.mSymbolPinName_property.mSetterDelegate = nil
            managedObject.mX_property.mSetterDelegate = nil
            managedObject.mY_property.mSetterDelegate = nil
          }
        //--- Remove observers of stored properties
          self.removeEBObserversOf_mSymbolPinName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mX_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mY_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of transient properties
          self.removeEBObserversOf_location_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_netName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_isConnected_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_issues_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_connectedPoints_fromElementsOfSet (removedObjectSet)
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : PointInSchematics in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
            managedObject.mSymbolPinName_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mX_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mY_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
        //--- Add observers of stored properties
          self.addEBObserversOf_mSymbolPinName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mX_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mY_toElementsOfSet (addedObjectSet)
        //--- Add observers of transient properties
          self.addEBObserversOf_location_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_netName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_isConnected_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_issues_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_connectedPoints_toElementsOfSet (addedObjectSet)
        }
      //--- Notify observers
        self.propagateProxyUpdate ()
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [PointInSchematics] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [PointInSchematics]) { self.mValue = inValue }

  //····················································································································

  override var propval : [PointInSchematics] { return self.mValue }

  //····················································································································

  override var propset : Set <PointInSchematics> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [PointInSchematics]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : PointInSchematics) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : PointInSchematics) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: mSymbol
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_PointInSchematics_mSymbol : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : PointInSchematics? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  private var mValue : ComponentSymbolInProject? {
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.ebUndoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        oldValue?.mPoints_property.remove (unwrappedOwner)
      //--- Set new opposite relation ship
        self.mValue?.mPoints_property.add (unwrappedOwner)
      //--- Remove property observers of old object
        oldValue?.componentName_property.removeEBObserversFrom (&self.mObserversOf_componentName)
        oldValue?.componentValueProxy_property.removeEBObserversFrom (&self.mObserversOf_componentValueProxy)
        oldValue?.connectedPoints_property.removeEBObserversFrom (&self.mObserversOf_connectedPoints)
        oldValue?.deviceName_property.removeEBObserversFrom (&self.mObserversOf_deviceName)
        oldValue?.isPlacedInSchematics_property.removeEBObserversFrom (&self.mObserversOf_isPlacedInSchematics)
        oldValue?.issues_property.removeEBObserversFrom (&self.mObserversOf_issues)
        oldValue?.mCenterX_property.removeEBObserversFrom (&self.mObserversOf_mCenterX)
        oldValue?.mCenterY_property.removeEBObserversFrom (&self.mObserversOf_mCenterY)
        oldValue?.mDisplayComponentNameOffsetX_property.removeEBObserversFrom (&self.mObserversOf_mDisplayComponentNameOffsetX)
        oldValue?.mDisplayComponentNameOffsetY_property.removeEBObserversFrom (&self.mObserversOf_mDisplayComponentNameOffsetY)
        oldValue?.mDisplayComponentValue_property.removeEBObserversFrom (&self.mObserversOf_mDisplayComponentValue)
        oldValue?.mDisplayComponentValueOffsetX_property.removeEBObserversFrom (&self.mObserversOf_mDisplayComponentValueOffsetX)
        oldValue?.mDisplayComponentValueOffsetY_property.removeEBObserversFrom (&self.mObserversOf_mDisplayComponentValueOffsetY)
        oldValue?.mPoints_property.removeEBObserversFrom (&self.mObserversOf_mPoints)
        oldValue?.mRotation_property.removeEBObserversFrom (&self.mObserversOf_mRotation)
        oldValue?.mSymbolInstanceName_property.removeEBObserversFrom (&self.mObserversOf_mSymbolInstanceName)
        oldValue?.mSymbolTypeName_property.removeEBObserversFrom (&self.mObserversOf_mSymbolTypeName)
        oldValue?.objectDisplay_property.removeEBObserversFrom (&self.mObserversOf_objectDisplay)
        oldValue?.selectionDisplay_property.removeEBObserversFrom (&self.mObserversOf_selectionDisplay)
        oldValue?.symbolInSchematics_property.removeEBObserversFrom (&self.mObserversOf_symbolInSchematics)
        oldValue?.symbolInfo_property.removeEBObserversFrom (&self.mObserversOf_symbolInfo)
      //--- Add property observers to new object
        self.mValue?.componentName_property.addEBObserversFrom (&self.mObserversOf_componentName)
        self.mValue?.componentValueProxy_property.addEBObserversFrom (&self.mObserversOf_componentValueProxy)
        self.mValue?.connectedPoints_property.addEBObserversFrom (&self.mObserversOf_connectedPoints)
        self.mValue?.deviceName_property.addEBObserversFrom (&self.mObserversOf_deviceName)
        self.mValue?.isPlacedInSchematics_property.addEBObserversFrom (&self.mObserversOf_isPlacedInSchematics)
        self.mValue?.issues_property.addEBObserversFrom (&self.mObserversOf_issues)
        self.mValue?.mCenterX_property.addEBObserversFrom (&self.mObserversOf_mCenterX)
        self.mValue?.mCenterY_property.addEBObserversFrom (&self.mObserversOf_mCenterY)
        self.mValue?.mDisplayComponentNameOffsetX_property.addEBObserversFrom (&self.mObserversOf_mDisplayComponentNameOffsetX)
        self.mValue?.mDisplayComponentNameOffsetY_property.addEBObserversFrom (&self.mObserversOf_mDisplayComponentNameOffsetY)
        self.mValue?.mDisplayComponentValue_property.addEBObserversFrom (&self.mObserversOf_mDisplayComponentValue)
        self.mValue?.mDisplayComponentValueOffsetX_property.addEBObserversFrom (&self.mObserversOf_mDisplayComponentValueOffsetX)
        self.mValue?.mDisplayComponentValueOffsetY_property.addEBObserversFrom (&self.mObserversOf_mDisplayComponentValueOffsetY)
        self.mValue?.mPoints_property.addEBObserversFrom (&self.mObserversOf_mPoints)
        self.mValue?.mRotation_property.addEBObserversFrom (&self.mObserversOf_mRotation)
        self.mValue?.mSymbolInstanceName_property.addEBObserversFrom (&self.mObserversOf_mSymbolInstanceName)
        self.mValue?.mSymbolTypeName_property.addEBObserversFrom (&self.mObserversOf_mSymbolTypeName)
        self.mValue?.objectDisplay_property.addEBObserversFrom (&self.mObserversOf_objectDisplay)
        self.mValue?.selectionDisplay_property.addEBObserversFrom (&self.mObserversOf_selectionDisplay)
        self.mValue?.symbolInSchematics_property.addEBObserversFrom (&self.mObserversOf_symbolInSchematics)
        self.mValue?.symbolInfo_property.addEBObserversFrom (&self.mObserversOf_symbolInfo)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : ComponentSymbolInProject? { return self.mValue }

  var prop : EBSelection <ComponentSymbolInProject?> { return .single (self.mValue) }

  func setProp (_ value : ComponentSymbolInProject?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : ComponentSymbolInProject?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : ComponentSymbolInProject) {
    if self.mValue === object {
      self.mValue = nil
    }
  }

  //····················································································································
  //   Observable atomic property: componentName
  //····················································································································

  private var mObserversOf_componentName = EBWeakEventSet ()

  //····················································································································

  var componentName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.componentName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_componentName (_ inObserver : EBEvent) {
    self.mObserversOf_componentName.insert (inObserver)
    if let object = self.propval {
      object.componentName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_componentName (_ inObserver : EBEvent) {
    self.mObserversOf_componentName.remove (inObserver)
    if let object = self.propval {
      object.componentName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: componentValueProxy
  //····················································································································

  private var mObserversOf_componentValueProxy = EBWeakEventSet ()

  //····················································································································

  var componentValueProxy_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.componentValueProxy_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_componentValueProxy (_ inObserver : EBEvent) {
    self.mObserversOf_componentValueProxy.insert (inObserver)
    if let object = self.propval {
      object.componentValueProxy_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_componentValueProxy (_ inObserver : EBEvent) {
    self.mObserversOf_componentValueProxy.remove (inObserver)
    if let object = self.propval {
      object.componentValueProxy_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: connectedPoints
  //····················································································································

  private var mObserversOf_connectedPoints = EBWeakEventSet ()

  //····················································································································

  var connectedPoints_property_selection : EBSelection <CanariPointArray?> {
    if let model = self.propval {
      switch (model.connectedPoints_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.mObserversOf_connectedPoints.insert (inObserver)
    if let object = self.propval {
      object.connectedPoints_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.mObserversOf_connectedPoints.remove (inObserver)
    if let object = self.propval {
      object.connectedPoints_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: deviceName
  //····················································································································

  private var mObserversOf_deviceName = EBWeakEventSet ()

  //····················································································································

  var deviceName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.deviceName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_deviceName (_ inObserver : EBEvent) {
    self.mObserversOf_deviceName.insert (inObserver)
    if let object = self.propval {
      object.deviceName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceName (_ inObserver : EBEvent) {
    self.mObserversOf_deviceName.remove (inObserver)
    if let object = self.propval {
      object.deviceName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: isPlacedInSchematics
  //····················································································································

  private var mObserversOf_isPlacedInSchematics = EBWeakEventSet ()

  //····················································································································

  var isPlacedInSchematics_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.isPlacedInSchematics_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_isPlacedInSchematics (_ inObserver : EBEvent) {
    self.mObserversOf_isPlacedInSchematics.insert (inObserver)
    if let object = self.propval {
      object.isPlacedInSchematics_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_isPlacedInSchematics (_ inObserver : EBEvent) {
    self.mObserversOf_isPlacedInSchematics.remove (inObserver)
    if let object = self.propval {
      object.isPlacedInSchematics_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: issues
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.issues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.mObserversOf_issues.insert (inObserver)
    if let object = self.propval {
      object.issues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.mObserversOf_issues.remove (inObserver)
    if let object = self.propval {
      object.issues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mCenterX
  //····················································································································

  private var mObserversOf_mCenterX = EBWeakEventSet ()

  //····················································································································

  var mCenterX_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mCenterX_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mCenterX (_ inObserver : EBEvent) {
    self.mObserversOf_mCenterX.insert (inObserver)
    if let object = self.propval {
      object.mCenterX_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCenterX (_ inObserver : EBEvent) {
    self.mObserversOf_mCenterX.remove (inObserver)
    if let object = self.propval {
      object.mCenterX_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mCenterY
  //····················································································································

  private var mObserversOf_mCenterY = EBWeakEventSet ()

  //····················································································································

  var mCenterY_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mCenterY_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mCenterY (_ inObserver : EBEvent) {
    self.mObserversOf_mCenterY.insert (inObserver)
    if let object = self.propval {
      object.mCenterY_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCenterY (_ inObserver : EBEvent) {
    self.mObserversOf_mCenterY.remove (inObserver)
    if let object = self.propval {
      object.mCenterY_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mDisplayComponentNameOffsetX
  //····················································································································

  private var mObserversOf_mDisplayComponentNameOffsetX = EBWeakEventSet ()

  //····················································································································

  var mDisplayComponentNameOffsetX_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mDisplayComponentNameOffsetX_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mDisplayComponentNameOffsetX (_ inObserver : EBEvent) {
    self.mObserversOf_mDisplayComponentNameOffsetX.insert (inObserver)
    if let object = self.propval {
      object.mDisplayComponentNameOffsetX_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayComponentNameOffsetX (_ inObserver : EBEvent) {
    self.mObserversOf_mDisplayComponentNameOffsetX.remove (inObserver)
    if let object = self.propval {
      object.mDisplayComponentNameOffsetX_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mDisplayComponentNameOffsetY
  //····················································································································

  private var mObserversOf_mDisplayComponentNameOffsetY = EBWeakEventSet ()

  //····················································································································

  var mDisplayComponentNameOffsetY_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mDisplayComponentNameOffsetY_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mDisplayComponentNameOffsetY (_ inObserver : EBEvent) {
    self.mObserversOf_mDisplayComponentNameOffsetY.insert (inObserver)
    if let object = self.propval {
      object.mDisplayComponentNameOffsetY_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayComponentNameOffsetY (_ inObserver : EBEvent) {
    self.mObserversOf_mDisplayComponentNameOffsetY.remove (inObserver)
    if let object = self.propval {
      object.mDisplayComponentNameOffsetY_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mDisplayComponentValue
  //····················································································································

  private var mObserversOf_mDisplayComponentValue = EBWeakEventSet ()

  //····················································································································

  var mDisplayComponentValue_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mDisplayComponentValue_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mDisplayComponentValue (_ inObserver : EBEvent) {
    self.mObserversOf_mDisplayComponentValue.insert (inObserver)
    if let object = self.propval {
      object.mDisplayComponentValue_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayComponentValue (_ inObserver : EBEvent) {
    self.mObserversOf_mDisplayComponentValue.remove (inObserver)
    if let object = self.propval {
      object.mDisplayComponentValue_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mDisplayComponentValueOffsetX
  //····················································································································

  private var mObserversOf_mDisplayComponentValueOffsetX = EBWeakEventSet ()

  //····················································································································

  var mDisplayComponentValueOffsetX_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mDisplayComponentValueOffsetX_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mDisplayComponentValueOffsetX (_ inObserver : EBEvent) {
    self.mObserversOf_mDisplayComponentValueOffsetX.insert (inObserver)
    if let object = self.propval {
      object.mDisplayComponentValueOffsetX_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayComponentValueOffsetX (_ inObserver : EBEvent) {
    self.mObserversOf_mDisplayComponentValueOffsetX.remove (inObserver)
    if let object = self.propval {
      object.mDisplayComponentValueOffsetX_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mDisplayComponentValueOffsetY
  //····················································································································

  private var mObserversOf_mDisplayComponentValueOffsetY = EBWeakEventSet ()

  //····················································································································

  var mDisplayComponentValueOffsetY_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mDisplayComponentValueOffsetY_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mDisplayComponentValueOffsetY (_ inObserver : EBEvent) {
    self.mObserversOf_mDisplayComponentValueOffsetY.insert (inObserver)
    if let object = self.propval {
      object.mDisplayComponentValueOffsetY_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayComponentValueOffsetY (_ inObserver : EBEvent) {
    self.mObserversOf_mDisplayComponentValueOffsetY.remove (inObserver)
    if let object = self.propval {
      object.mDisplayComponentValueOffsetY_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mPoints
  //····················································································································

  private var mObserversOf_mPoints = EBWeakEventSet ()

  //····················································································································

  var mPoints_property_selection : EBSelection <[PointInSchematics]> {
    if let model = self.propval {
      switch (model.mPoints_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mPoints (_ inObserver : EBEvent) {
    self.mObserversOf_mPoints.insert (inObserver)
    if let object = self.propval {
      object.mPoints_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPoints (_ inObserver : EBEvent) {
    self.mObserversOf_mPoints.remove (inObserver)
    if let object = self.propval {
      object.mPoints_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mRotation
  //····················································································································

  private var mObserversOf_mRotation = EBWeakEventSet ()

  //····················································································································

  var mRotation_property_selection : EBSelection <QuadrantRotation?> {
    if let model = self.propval {
      switch (model.mRotation_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mRotation (_ inObserver : EBEvent) {
    self.mObserversOf_mRotation.insert (inObserver)
    if let object = self.propval {
      object.mRotation_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mRotation (_ inObserver : EBEvent) {
    self.mObserversOf_mRotation.remove (inObserver)
    if let object = self.propval {
      object.mRotation_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mSymbolInstanceName
  //····················································································································

  private var mObserversOf_mSymbolInstanceName = EBWeakEventSet ()

  //····················································································································

  var mSymbolInstanceName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mSymbolInstanceName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolInstanceName (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolInstanceName.insert (inObserver)
    if let object = self.propval {
      object.mSymbolInstanceName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolInstanceName (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolInstanceName.remove (inObserver)
    if let object = self.propval {
      object.mSymbolInstanceName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mSymbolTypeName
  //····················································································································

  private var mObserversOf_mSymbolTypeName = EBWeakEventSet ()

  //····················································································································

  var mSymbolTypeName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mSymbolTypeName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolTypeName (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolTypeName.insert (inObserver)
    if let object = self.propval {
      object.mSymbolTypeName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolTypeName (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolTypeName.remove (inObserver)
    if let object = self.propval {
      object.mSymbolTypeName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: objectDisplay
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  var objectDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.objectDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.mObserversOf_objectDisplay.insert (inObserver)
    if let object = self.propval {
      object.objectDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.mObserversOf_objectDisplay.remove (inObserver)
    if let object = self.propval {
      object.objectDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: selectionDisplay
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  var selectionDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.selectionDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.mObserversOf_selectionDisplay.insert (inObserver)
    if let object = self.propval {
      object.selectionDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.mObserversOf_selectionDisplay.remove (inObserver)
    if let object = self.propval {
      object.selectionDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: symbolInSchematics
  //····················································································································

  private var mObserversOf_symbolInSchematics = EBWeakEventSet ()

  //····················································································································

  var symbolInSchematics_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.symbolInSchematics_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_symbolInSchematics (_ inObserver : EBEvent) {
    self.mObserversOf_symbolInSchematics.insert (inObserver)
    if let object = self.propval {
      object.symbolInSchematics_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolInSchematics (_ inObserver : EBEvent) {
    self.mObserversOf_symbolInSchematics.remove (inObserver)
    if let object = self.propval {
      object.symbolInSchematics_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: symbolInfo
  //····················································································································

  private var mObserversOf_symbolInfo = EBWeakEventSet ()

  //····················································································································

  var symbolInfo_property_selection : EBSelection <ComponentSymbolInfo?> {
    if let model = self.propval {
      switch (model.symbolInfo_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_symbolInfo (_ inObserver : EBEvent) {
    self.mObserversOf_symbolInfo.insert (inObserver)
    if let object = self.propval {
      object.symbolInfo_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolInfo (_ inObserver : EBEvent) {
    self.mObserversOf_symbolInfo.remove (inObserver)
    if let object = self.propval {
      object.symbolInfo_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: mNet
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_PointInSchematics_mNet : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : PointInSchematics? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  private var mValue : NetInProject? {
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.ebUndoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        oldValue?.mPoints_property.remove (unwrappedOwner)
      //--- Set new opposite relation ship
        self.mValue?.mPoints_property.add (unwrappedOwner)
      //--- Remove property observers of old object
        oldValue?.mNetName_property.removeEBObserversFrom (&self.mObserversOf_mNetName)
        oldValue?.mPoints_property.removeEBObserversFrom (&self.mObserversOf_mPoints)
      //--- Add property observers to new object
        self.mValue?.mNetName_property.addEBObserversFrom (&self.mObserversOf_mNetName)
        self.mValue?.mPoints_property.addEBObserversFrom (&self.mObserversOf_mPoints)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : NetInProject? { return self.mValue }

  var prop : EBSelection <NetInProject?> { return .single (self.mValue) }

  func setProp (_ value : NetInProject?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : NetInProject?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : NetInProject) {
    if self.mValue === object {
      self.mValue = nil
    }
  }

  //····················································································································
  //   Observable atomic property: mNetName
  //····················································································································

  private var mObserversOf_mNetName = EBWeakEventSet ()

  //····················································································································

  var mNetName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mNetName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mNetName (_ inObserver : EBEvent) {
    self.mObserversOf_mNetName.insert (inObserver)
    if let object = self.propval {
      object.mNetName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetName (_ inObserver : EBEvent) {
    self.mObserversOf_mNetName.remove (inObserver)
    if let object = self.propval {
      object.mNetName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mPoints
  //····················································································································

  private var mObserversOf_mPoints = EBWeakEventSet ()

  //····················································································································

  var mPoints_property_selection : EBSelection <[PointInSchematics]> {
    if let model = self.propval {
      switch (model.mPoints_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mPoints (_ inObserver : EBEvent) {
    self.mObserversOf_mPoints.insert (inObserver)
    if let object = self.propval {
      object.mPoints_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPoints (_ inObserver : EBEvent) {
    self.mObserversOf_mPoints.remove (inObserver)
    if let object = self.propval {
      object.mPoints_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: mNC
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_PointInSchematics_mNC : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : PointInSchematics? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  private var mValue : NCInSchematics? {
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.ebUndoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
     //--- Reset old opposite relation ship
        oldValue?.mPoint_property.setProp (nil)
      //--- Set new opposite relation ship
        self.mValue?.mPoint_property.setProp (unwrappedOwner)
      //--- Remove property observers of old object
        oldValue?.connectedPoints_property.removeEBObserversFrom (&self.mObserversOf_connectedPoints)
        oldValue?.isPlacedInSchematics_property.removeEBObserversFrom (&self.mObserversOf_isPlacedInSchematics)
        oldValue?.issues_property.removeEBObserversFrom (&self.mObserversOf_issues)
        oldValue?.mOrientation_property.removeEBObserversFrom (&self.mObserversOf_mOrientation)
        oldValue?.objectDisplay_property.removeEBObserversFrom (&self.mObserversOf_objectDisplay)
        oldValue?.selectionDisplay_property.removeEBObserversFrom (&self.mObserversOf_selectionDisplay)
      //--- Add property observers to new object
        self.mValue?.connectedPoints_property.addEBObserversFrom (&self.mObserversOf_connectedPoints)
        self.mValue?.isPlacedInSchematics_property.addEBObserversFrom (&self.mObserversOf_isPlacedInSchematics)
        self.mValue?.issues_property.addEBObserversFrom (&self.mObserversOf_issues)
        self.mValue?.mOrientation_property.addEBObserversFrom (&self.mObserversOf_mOrientation)
        self.mValue?.objectDisplay_property.addEBObserversFrom (&self.mObserversOf_objectDisplay)
        self.mValue?.selectionDisplay_property.addEBObserversFrom (&self.mObserversOf_selectionDisplay)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : NCInSchematics? { return self.mValue }

  var prop : EBSelection <NCInSchematics?> { return .single (self.mValue) }

  func setProp (_ value : NCInSchematics?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : NCInSchematics?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : NCInSchematics) {
    if self.mValue === object {
      self.mValue = nil
    }
  }

  //····················································································································
  //   Observable atomic property: connectedPoints
  //····················································································································

  private var mObserversOf_connectedPoints = EBWeakEventSet ()

  //····················································································································

  var connectedPoints_property_selection : EBSelection <CanariPointArray?> {
    if let model = self.propval {
      switch (model.connectedPoints_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.mObserversOf_connectedPoints.insert (inObserver)
    if let object = self.propval {
      object.connectedPoints_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.mObserversOf_connectedPoints.remove (inObserver)
    if let object = self.propval {
      object.connectedPoints_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: isPlacedInSchematics
  //····················································································································

  private var mObserversOf_isPlacedInSchematics = EBWeakEventSet ()

  //····················································································································

  var isPlacedInSchematics_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.isPlacedInSchematics_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_isPlacedInSchematics (_ inObserver : EBEvent) {
    self.mObserversOf_isPlacedInSchematics.insert (inObserver)
    if let object = self.propval {
      object.isPlacedInSchematics_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_isPlacedInSchematics (_ inObserver : EBEvent) {
    self.mObserversOf_isPlacedInSchematics.remove (inObserver)
    if let object = self.propval {
      object.isPlacedInSchematics_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: issues
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.issues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.mObserversOf_issues.insert (inObserver)
    if let object = self.propval {
      object.issues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.mObserversOf_issues.remove (inObserver)
    if let object = self.propval {
      object.issues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mOrientation
  //····················································································································

  private var mObserversOf_mOrientation = EBWeakEventSet ()

  //····················································································································

  var mOrientation_property_selection : EBSelection <QuadrantRotation?> {
    if let model = self.propval {
      switch (model.mOrientation_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mOrientation (_ inObserver : EBEvent) {
    self.mObserversOf_mOrientation.insert (inObserver)
    if let object = self.propval {
      object.mOrientation_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mOrientation (_ inObserver : EBEvent) {
    self.mObserversOf_mOrientation.remove (inObserver)
    if let object = self.propval {
      object.mOrientation_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: objectDisplay
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  var objectDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.objectDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.mObserversOf_objectDisplay.insert (inObserver)
    if let object = self.propval {
      object.objectDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.mObserversOf_objectDisplay.remove (inObserver)
    if let object = self.propval {
      object.objectDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: selectionDisplay
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  var selectionDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.selectionDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.mObserversOf_selectionDisplay.insert (inObserver)
    if let object = self.propval {
      object.selectionDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.mObserversOf_selectionDisplay.remove (inObserver)
    if let object = self.propval {
      object.selectionDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
