//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol CommentInSchematics_mX : class {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol CommentInSchematics_my : class {
  var my : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol CommentInSchematics_mComment : class {
  var mComment : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: CommentInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class CommentInSchematics : SchematicsObject,
         CommentInSchematics_mX,
         CommentInSchematics_my,
         CommentInSchematics_mComment {

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  let mX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································

  var mX_property_selection : EBSelection <Int> { return self.mX_property.prop }

  //····················································································································
  //   Atomic property: my
  //····················································································································

  let my_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var my : Int {
    get { return self.my_property.propval }
    set { self.my_property.setProp (newValue) }
  }

  //····················································································································

  var my_property_selection : EBSelection <Int> { return self.my_property.prop }

  //····················································································································
  //   Atomic property: mComment
  //····················································································································

  let mComment_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mComment : String {
    get { return self.mComment_property.propval }
    set { self.mComment_property.setProp (newValue) }
  }

  //····················································································································

  var mComment_property_selection : EBSelection <String> { return self.mComment_property.prop }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mX
    self.mX_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: my
    self.my_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mComment
    self.mComment_property.ebUndoManager = self.ebUndoManager
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mX",
      idx:self.mX_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mX_property.mObserverExplorer,
      valueExplorer:&self.mX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "my",
      idx:self.my_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.my_property.mObserverExplorer,
      valueExplorer:&self.my_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mComment",
      idx:self.mComment_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mComment_property.mObserverExplorer,
      valueExplorer:&self.mComment_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mX
    self.mX_property.mObserverExplorer = nil
    self.mX_property.mValueExplorer = nil
  //--- Atomic property: my
    self.my_property.mObserverExplorer = nil
    self.my_property.mValueExplorer = nil
  //--- Atomic property: mComment
    self.mComment_property.mObserverExplorer = nil
    self.mComment_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mX
    self.mX_property.storeIn (dictionary: ioDictionary, forKey:"mX")
  //--- Atomic property: my
    self.my_property.storeIn (dictionary: ioDictionary, forKey:"my")
  //--- Atomic property: mComment
    self.mComment_property.storeIn (dictionary: ioDictionary, forKey:"mComment")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey:"mX")
  //--- Atomic property: my
    self.my_property.readFrom (dictionary: inDictionary, forKey:"my")
  //--- Atomic property: mComment
    self.mComment_property.readFrom (dictionary: inDictionary, forKey:"mComment")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_CommentInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_CommentInSchematics : ReadOnlyAbstractArrayProperty <CommentInSchematics> {

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mX.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mX.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mX_toElementsOfSet (_ inSet : Set<CommentInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_mX.apply { (_ observer : EBEvent) in
        managedObject.mX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX_fromElementsOfSet (_ inSet : Set<CommentInSchematics>) {
    self.mObserversOf_mX.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'my' stored property
  //····················································································································

  private var mObserversOf_my = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_my (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_my.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.my_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_my (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_my.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.my_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_my_toElementsOfSet (_ inSet : Set<CommentInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_my.apply { (_ observer : EBEvent) in
        managedObject.my_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_my_fromElementsOfSet (_ inSet : Set<CommentInSchematics>) {
    self.mObserversOf_my.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.my_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mComment' stored property
  //····················································································································

  private var mObserversOf_mComment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mComment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mComment.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mComment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mComment.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mComment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mComment_toElementsOfSet (_ inSet : Set<CommentInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_mComment.apply { (_ observer : EBEvent) in
        managedObject.mComment_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mComment_fromElementsOfSet (_ inSet : Set<CommentInSchematics>) {
    self.mObserversOf_mComment.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mComment_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [CommentInSchematics] > > = nil

  //····················································································································

  override var propset : Set <CommentInSchematics> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [CommentInSchematics] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [CommentInSchematics] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  private var mSet = Set <CommentInSchematics> ()

  //····················································································································

  private var mCachedValue : EBSelection < [CommentInSchematics] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      let cachedValue = unwrappedComputeFunction ()
      self.mCachedValue = cachedValue
      let newSet : Set <CommentInSchematics>
      switch cachedValue {
      case .multiple, .empty :
        newSet = Set <CommentInSchematics> ()
      case .single (let array) :
        newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_mX_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_my_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mComment_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_mX_toElementsOfSet (addedSet)
      self.addEBObserversOf_my_toElementsOfSet (addedSet)
      self.addEBObserversOf_mComment_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: CommentInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_CommentInSchematics : TransientArrayOf_CommentInSchematics {

  //····················································································································
 
  func setProp (_ value :  [CommentInSchematics]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: CommentInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_CommentInSchematics : ReadWriteArrayOf_CommentInSchematics, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : CommentInSchematics) -> Void > = nil
  var resetOppositeRelationship : Optional < (_ inManagedObject : CommentInSchematics) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [CommentInSchematics] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "CommentInSchematics") as? CommentInSchematics {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <CommentInSchematics> ()
  private var mValue = [CommentInSchematics] () {
    didSet {
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.resetOppositeRelationship? (managedObject)
            managedObject.mX_property.mSetterDelegate = nil
            managedObject.my_property.mSetterDelegate = nil
            managedObject.mComment_property.mSetterDelegate = nil
          }
        //--- Remove observers of stored properties
          self.removeEBObserversOf_mX_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_my_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mComment_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of transient properties
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : CommentInSchematics in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
            managedObject.mX_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.my_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mComment_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
        //--- Add observers of stored properties
          self.addEBObserversOf_mX_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_my_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mComment_toElementsOfSet (addedObjectSet)
        //--- Add observers of transient properties
        }
      //--- Notify observers
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [CommentInSchematics] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [CommentInSchematics]) { self.mValue = inValue }

  //····················································································································

  override var propval : [CommentInSchematics] { return self.mValue }

  //····················································································································

  override var propset : Set <CommentInSchematics> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [CommentInSchematics]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : CommentInSchematics) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : CommentInSchematics) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
