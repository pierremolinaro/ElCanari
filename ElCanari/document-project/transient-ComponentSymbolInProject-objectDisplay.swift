//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func transient_ComponentSymbolInProject_objectDisplay (
       _ self_symbolInfo : ComponentSymbolInfo,        
       _ prefs_symbolColorForSchematic : NSColor,      
       _ self_mSymbolInstanceName : String,            
       _ self_mSymbolTypeName : String
) -> EBShape {
//--- START OF USER ZONE 2
        let shape = EBShape ()
        let strokeShape = EBStrokeBezierPathShape ([self_symbolInfo.strokeBezierPath], prefs_symbolColorForSchematic)
        let filledPath = EBFilledBezierPathShape ([self_symbolInfo.filledBezierPath], prefs_symbolColorForSchematic)
        let box = filledPath.boundingBox.union (strokeShape.boundingBox)
        shape.append (EBFilledBezierPathShape ([NSBezierPath (rect: box)], nil))
        shape.append (strokeShape)
        shape.append (filledPath)
        for pinShape in self_symbolInfo.pinShapes {
          if (pinShape.0.instanceName == self_mSymbolInstanceName) && (pinShape.0.typeName == self_mSymbolTypeName) {
            shape.append (pinShape.1)
          }
        }
        return shape
//--- END OF USER ZONE 2
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
