//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSelectedPageIndex : class {
  var mSelectedPageIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSelectedSchematicsInspector : class {
  var mSelectedSchematicsInspector : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicsTitle : class {
  var mSchematicsTitle : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicsVersion : class {
  var mSchematicsVersion : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicsDate : class {
  var mSchematicsDate : Date { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicsHorizontalFlip : class {
  var mSchematicsHorizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicsVerticalFlip : class {
  var mSchematicsVerticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicsZoom : class {
  var mSchematicsZoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicsGridStyle : class {
  var mSchematicsGridStyle : GridStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicsGridDisplayFactor : class {
  var mSchematicsGridDisplayFactor : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicsSheetOrientation : class {
  var mSchematicsSheetOrientation : SchematicsSheetOrientation { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_unplacedSymbols : class {
  var unplacedSymbols : StringTagArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_deviceNames : class {
  var deviceNames : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_schematicsBackgroundDisplay : class {
  var schematicsBackgroundDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ProjectRoot : EBManagedObject,
         ProjectRoot_mSelectedPageIndex,
         ProjectRoot_mSelectedSchematicsInspector,
         ProjectRoot_mSchematicsTitle,
         ProjectRoot_mSchematicsVersion,
         ProjectRoot_mSchematicsDate,
         ProjectRoot_mSchematicsHorizontalFlip,
         ProjectRoot_mSchematicsVerticalFlip,
         ProjectRoot_mSchematicsZoom,
         ProjectRoot_mSchematicsGridStyle,
         ProjectRoot_mSchematicsGridDisplayFactor,
         ProjectRoot_mSchematicsSheetOrientation,
         ProjectRoot_unplacedSymbols,
         ProjectRoot_deviceNames,
         ProjectRoot_schematicsBackgroundDisplay {

  //····················································································································
  //   Atomic property: mSelectedPageIndex
  //····················································································································

  var mSelectedPageIndex_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mSelectedPageIndex : Int {
    get { return self.mSelectedPageIndex_property.propval }
    set { self.mSelectedPageIndex_property.setProp (newValue) }
  }

  //····················································································································

  var mSelectedPageIndex_property_selection : EBSelection <Int> { return self.mSelectedPageIndex_property.prop }

  //····················································································································
  //   Atomic property: mSelectedSchematicsInspector
  //····················································································································

  var mSelectedSchematicsInspector_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mSelectedSchematicsInspector : Int {
    get { return self.mSelectedSchematicsInspector_property.propval }
    set { self.mSelectedSchematicsInspector_property.setProp (newValue) }
  }

  //····················································································································

  var mSelectedSchematicsInspector_property_selection : EBSelection <Int> { return self.mSelectedSchematicsInspector_property.prop }

  //····················································································································
  //   Atomic property: mSchematicsTitle
  //····················································································································

  var mSchematicsTitle_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mSchematicsTitle : String {
    get { return self.mSchematicsTitle_property.propval }
    set { self.mSchematicsTitle_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicsTitle_property_selection : EBSelection <String> { return self.mSchematicsTitle_property.prop }

  //····················································································································
  //   Atomic property: mSchematicsVersion
  //····················································································································

  var mSchematicsVersion_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mSchematicsVersion : String {
    get { return self.mSchematicsVersion_property.propval }
    set { self.mSchematicsVersion_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicsVersion_property_selection : EBSelection <String> { return self.mSchematicsVersion_property.prop }

  //····················································································································
  //   Atomic property: mSchematicsDate
  //····················································································································

  var mSchematicsDate_property = EBStoredProperty_Date (defaultValue: Date ())

  //····················································································································

  var mSchematicsDate : Date {
    get { return self.mSchematicsDate_property.propval }
    set { self.mSchematicsDate_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicsDate_property_selection : EBSelection <Date> { return self.mSchematicsDate_property.prop }

  //····················································································································
  //   Atomic property: mSchematicsHorizontalFlip
  //····················································································································

  var mSchematicsHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mSchematicsHorizontalFlip : Bool {
    get { return self.mSchematicsHorizontalFlip_property.propval }
    set { self.mSchematicsHorizontalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicsHorizontalFlip_property_selection : EBSelection <Bool> { return self.mSchematicsHorizontalFlip_property.prop }

  //····················································································································
  //   Atomic property: mSchematicsVerticalFlip
  //····················································································································

  var mSchematicsVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mSchematicsVerticalFlip : Bool {
    get { return self.mSchematicsVerticalFlip_property.propval }
    set { self.mSchematicsVerticalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicsVerticalFlip_property_selection : EBSelection <Bool> { return self.mSchematicsVerticalFlip_property.prop }

  //····················································································································
  //   Atomic property: mSchematicsZoom
  //····················································································································

  var mSchematicsZoom_property = EBStoredProperty_Int (defaultValue: 100)

  //····················································································································

  var mSchematicsZoom : Int {
    get { return self.mSchematicsZoom_property.propval }
    set { self.mSchematicsZoom_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicsZoom_property_selection : EBSelection <Int> { return self.mSchematicsZoom_property.prop }

  //····················································································································
  //   Atomic property: mSchematicsGridStyle
  //····················································································································

  var mSchematicsGridStyle_property = EBStoredProperty_GridStyle (defaultValue: GridStyle.line)

  //····················································································································

  var mSchematicsGridStyle : GridStyle {
    get { return self.mSchematicsGridStyle_property.propval }
    set { self.mSchematicsGridStyle_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicsGridStyle_property_selection : EBSelection <GridStyle> { return self.mSchematicsGridStyle_property.prop }

  //····················································································································
  //   Atomic property: mSchematicsGridDisplayFactor
  //····················································································································

  var mSchematicsGridDisplayFactor_property = EBStoredProperty_Int (defaultValue: 4)

  //····················································································································

  var mSchematicsGridDisplayFactor : Int {
    get { return self.mSchematicsGridDisplayFactor_property.propval }
    set { self.mSchematicsGridDisplayFactor_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicsGridDisplayFactor_property_selection : EBSelection <Int> { return self.mSchematicsGridDisplayFactor_property.prop }

  //····················································································································
  //   To many property: mComponents
  //····················································································································

  let mComponents_property = StoredArrayOf_ComponentInProject ()

  //····················································································································

  var mComponents_property_selection : EBSelection < [ComponentInProject] > {
    return self.mComponents_property.prop
  }

  //····················································································································

  var mComponents : [ComponentInProject] {
    get { return self.mComponents_property.propval }
    set { self.mComponents_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mNetClasses
  //····················································································································

  let mNetClasses_property = StoredArrayOf_NetClassInProject ()

  //····················································································································

  var mNetClasses_property_selection : EBSelection < [NetClassInProject] > {
    return self.mNetClasses_property.prop
  }

  //····················································································································

  var mNetClasses : [NetClassInProject] {
    get { return self.mNetClasses_property.propval }
    set { self.mNetClasses_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mFonts
  //····················································································································

  let mFonts_property = StoredArrayOf_FontInProject ()

  //····················································································································

  var mFonts_property_selection : EBSelection < [FontInProject] > {
    return self.mFonts_property.prop
  }

  //····················································································································

  var mFonts : [FontInProject] {
    get { return self.mFonts_property.propval }
    set { self.mFonts_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mDevices
  //····················································································································

  let mDevices_property = StoredArrayOf_DeviceInProject ()

  //····················································································································

  var mDevices_property_selection : EBSelection < [DeviceInProject] > {
    return self.mDevices_property.prop
  }

  //····················································································································

  var mDevices : [DeviceInProject] {
    get { return self.mDevices_property.propval }
    set { self.mDevices_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mSheets
  //····················································································································

  let mSheets_property = StoredArrayOf_SheetInProject ()

  //····················································································································

  var mSheets_property_selection : EBSelection < [SheetInProject] > {
    return self.mSheets_property.prop
  }

  //····················································································································

  var mSheets : [SheetInProject] {
    get { return self.mSheets_property.propval }
    set { self.mSheets_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSchematicsSheetOrientation
  //····················································································································

  var mSchematicsSheetOrientation_property = EBStoredProperty_SchematicsSheetOrientation (defaultValue: SchematicsSheetOrientation.horizontal)

  //····················································································································

  var mSchematicsSheetOrientation : SchematicsSheetOrientation {
    get { return self.mSchematicsSheetOrientation_property.propval }
    set { self.mSchematicsSheetOrientation_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicsSheetOrientation_property_selection : EBSelection <SchematicsSheetOrientation> { return self.mSchematicsSheetOrientation_property.prop }

  //····················································································································
  //   Transient property: unplacedSymbols
  //····················································································································

  var unplacedSymbols_property = EBTransientProperty_StringTagArray ()

  //····················································································································

  var unplacedSymbols_property_selection : EBSelection <StringTagArray> {
    return self.unplacedSymbols_property.prop
  }

  //····················································································································

  var unplacedSymbols : StringTagArray? {
    switch self.unplacedSymbols_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   To one property: mSelectedSheet
  //····················································································································

  let mSelectedSheet_property = ToOneRelationship_ProjectRoot_mSelectedSheet ()

  //····················································································································

  var mSelectedSheet_property_selection : EBSelection <SheetInProject?> {
    return .single (self.mSelectedSheet_property.propval)
  }

  //····················································································································

  var mSelectedSheet : SheetInProject? {
    get { return self.mSelectedSheet_property.propval }
    set { self.mSelectedSheet_property.setProp (newValue) }
  }

  //····················································································································

  var mSelectedSheet_none : ToOneRelationship_ProjectRoot_mSelectedSheet { return self.mSelectedSheet_property }

  //····················································································································

  var mSelectedSheet_none_selection : EBSelection <Bool> {
    return .single (self.mSelectedSheet_property.propval == nil)
  }

  //····················································································································
  //   Transient property: deviceNames
  //····················································································································

  var deviceNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  var deviceNames_property_selection : EBSelection <StringArray> {
    return self.deviceNames_property.prop
  }

  //····················································································································

  var deviceNames : StringArray? {
    switch self.deviceNames_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: schematicsBackgroundDisplay
  //····················································································································

  var schematicsBackgroundDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  var schematicsBackgroundDisplay_property_selection : EBSelection <EBShape> {
    return self.schematicsBackgroundDisplay_property.prop
  }

  //····················································································································

  var schematicsBackgroundDisplay : EBShape? {
    switch self.schematicsBackgroundDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSelectedSchematicsInspector
    self.mSelectedSchematicsInspector_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicsTitle
    self.mSchematicsTitle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicsVersion
    self.mSchematicsVersion_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicsDate
    self.mSchematicsDate_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicsHorizontalFlip
    self.mSchematicsHorizontalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicsVerticalFlip
    self.mSchematicsVerticalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicsZoom
    self.mSchematicsZoom_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicsGridStyle
    self.mSchematicsGridStyle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicsGridDisplayFactor
    self.mSchematicsGridDisplayFactor_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mComponents (no option)
    self.mComponents_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mNetClasses (no option)
    self.mNetClasses_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mFonts (no option)
    self.mFonts_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mDevices (no option)
    self.mDevices_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mSheets (no option)
    self.mSheets_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicsSheetOrientation
    self.mSchematicsSheetOrientation_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: unplacedSymbols
    self.unplacedSymbols_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mComponents_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mComponents_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_unplacedSymbols (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mComponents_property.addEBObserverOf_unplacedSymbols (self.unplacedSymbols_property)
  //--- To one property: mSelectedSheet
    self.mSelectedSheet_property.owner = self
  //--- Atomic property: deviceNames
    self.deviceNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDevices_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mDevices_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_deviceNames (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDevices_property.addEBObserverOf_mDeviceName (self.deviceNames_property)
  //--- Atomic property: schematicsBackgroundDisplay
    self.schematicsBackgroundDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mSchematicsTitle_property_selection.kind ()
        kind &= unwSelf.mSchematicsVersion_property_selection.kind ()
        kind &= unwSelf.mSchematicsSheetOrientation_property_selection.kind ()
        kind &= unwSelf.mSelectedSheet_property.mSheetTitle_property_selection.kind ()
        kind &= unwSelf.mSheets_property_selection.kind ()
        kind &= unwSelf.mSelectedSheet_property_selection.kind ()
        kind &= unwSelf.mSchematicsDate_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mSchematicsTitle_property_selection, unwSelf.mSchematicsVersion_property_selection, unwSelf.mSchematicsSheetOrientation_property_selection, unwSelf.mSelectedSheet_property.mSheetTitle_property_selection, unwSelf.mSheets_property_selection, unwSelf.mSelectedSheet_property_selection, unwSelf.mSchematicsDate_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6)) :
            return .single (transient_ProjectRoot_schematicsBackgroundDisplay (v0, v1, v2, v3, v4, v5, v6))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSchematicsTitle_property.addEBObserver (self.schematicsBackgroundDisplay_property)
    self.mSchematicsVersion_property.addEBObserver (self.schematicsBackgroundDisplay_property)
    self.mSchematicsSheetOrientation_property.addEBObserver (self.schematicsBackgroundDisplay_property)
    self.mSelectedSheet_property.addEBObserverOf_mSheetTitle (self.schematicsBackgroundDisplay_property)
    self.mSheets_property.addEBObserver (self.schematicsBackgroundDisplay_property)
    self.mSelectedSheet_property.addEBObserver (self.schematicsBackgroundDisplay_property)
    self.mSchematicsDate_property.addEBObserver (self.schematicsBackgroundDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mComponents_property.removeEBObserverOf_unplacedSymbols (self.unplacedSymbols_property)
    self.mDevices_property.removeEBObserverOf_mDeviceName (self.deviceNames_property)
    self.mSchematicsTitle_property.removeEBObserver (self.schematicsBackgroundDisplay_property)
    self.mSchematicsVersion_property.removeEBObserver (self.schematicsBackgroundDisplay_property)
    self.mSchematicsSheetOrientation_property.removeEBObserver (self.schematicsBackgroundDisplay_property)
    self.mSelectedSheet_property.removeEBObserverOf_mSheetTitle (self.schematicsBackgroundDisplay_property)
    self.mSheets_property.removeEBObserver (self.schematicsBackgroundDisplay_property)
    self.mSelectedSheet_property.removeEBObserver (self.schematicsBackgroundDisplay_property)
    self.mSchematicsDate_property.removeEBObserver (self.schematicsBackgroundDisplay_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mSelectedPageIndex",
      idx:self.mSelectedPageIndex_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mSelectedPageIndex_property.mObserverExplorer,
      valueExplorer:&self.mSelectedPageIndex_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSelectedSchematicsInspector",
      idx:self.mSelectedSchematicsInspector_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mSelectedSchematicsInspector_property.mObserverExplorer,
      valueExplorer:&self.mSelectedSchematicsInspector_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicsTitle",
      idx:self.mSchematicsTitle_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mSchematicsTitle_property.mObserverExplorer,
      valueExplorer:&self.mSchematicsTitle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicsVersion",
      idx:self.mSchematicsVersion_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mSchematicsVersion_property.mObserverExplorer,
      valueExplorer:&self.mSchematicsVersion_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicsDate",
      idx:self.mSchematicsDate_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mSchematicsDate_property.mObserverExplorer,
      valueExplorer:&self.mSchematicsDate_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicsHorizontalFlip",
      idx:self.mSchematicsHorizontalFlip_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mSchematicsHorizontalFlip_property.mObserverExplorer,
      valueExplorer:&self.mSchematicsHorizontalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicsVerticalFlip",
      idx:self.mSchematicsVerticalFlip_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mSchematicsVerticalFlip_property.mObserverExplorer,
      valueExplorer:&self.mSchematicsVerticalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicsZoom",
      idx:self.mSchematicsZoom_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mSchematicsZoom_property.mObserverExplorer,
      valueExplorer:&self.mSchematicsZoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicsGridStyle",
      idx:self.mSchematicsGridStyle_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mSchematicsGridStyle_property.mObserverExplorer,
      valueExplorer:&self.mSchematicsGridStyle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicsGridDisplayFactor",
      idx:self.mSchematicsGridDisplayFactor_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mSchematicsGridDisplayFactor_property.mObserverExplorer,
      valueExplorer:&self.mSchematicsGridDisplayFactor_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicsSheetOrientation",
      idx:self.mSchematicsSheetOrientation_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mSchematicsSheetOrientation_property.mObserverExplorer,
      valueExplorer:&self.mSchematicsSheetOrientation_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "unplacedSymbols",
      idx:self.unplacedSymbols_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.unplacedSymbols_property.mObserverExplorer,
      valueExplorer:&self.unplacedSymbols_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "deviceNames",
      idx:self.deviceNames_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.deviceNames_property.mObserverExplorer,
      valueExplorer:&self.deviceNames_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "schematicsBackgroundDisplay",
      idx:self.schematicsBackgroundDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.schematicsBackgroundDisplay_property.mObserverExplorer,
      valueExplorer:&self.schematicsBackgroundDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "mComponents",
      idx:mComponents_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mComponents_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mNetClasses",
      idx:mNetClasses_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mNetClasses_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mFonts",
      idx:mFonts_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mFonts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mDevices",
      idx:mDevices_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mDevices_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mSheets",
      idx:mSheets_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mSheets_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "mSelectedSheet",
      idx:self.mSelectedSheet_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mSelectedSheet_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.mObserverExplorer = nil
    self.mSelectedPageIndex_property.mValueExplorer = nil
  //--- Atomic property: mSelectedSchematicsInspector
    self.mSelectedSchematicsInspector_property.mObserverExplorer = nil
    self.mSelectedSchematicsInspector_property.mValueExplorer = nil
  //--- Atomic property: mSchematicsTitle
    self.mSchematicsTitle_property.mObserverExplorer = nil
    self.mSchematicsTitle_property.mValueExplorer = nil
  //--- Atomic property: mSchematicsVersion
    self.mSchematicsVersion_property.mObserverExplorer = nil
    self.mSchematicsVersion_property.mValueExplorer = nil
  //--- Atomic property: mSchematicsDate
    self.mSchematicsDate_property.mObserverExplorer = nil
    self.mSchematicsDate_property.mValueExplorer = nil
  //--- Atomic property: mSchematicsHorizontalFlip
    self.mSchematicsHorizontalFlip_property.mObserverExplorer = nil
    self.mSchematicsHorizontalFlip_property.mValueExplorer = nil
  //--- Atomic property: mSchematicsVerticalFlip
    self.mSchematicsVerticalFlip_property.mObserverExplorer = nil
    self.mSchematicsVerticalFlip_property.mValueExplorer = nil
  //--- Atomic property: mSchematicsZoom
    self.mSchematicsZoom_property.mObserverExplorer = nil
    self.mSchematicsZoom_property.mValueExplorer = nil
  //--- Atomic property: mSchematicsGridStyle
    self.mSchematicsGridStyle_property.mObserverExplorer = nil
    self.mSchematicsGridStyle_property.mValueExplorer = nil
  //--- Atomic property: mSchematicsGridDisplayFactor
    self.mSchematicsGridDisplayFactor_property.mObserverExplorer = nil
    self.mSchematicsGridDisplayFactor_property.mValueExplorer = nil
  //--- To many property: mComponents
    self.mComponents_property.mValueExplorer = nil
  //--- To many property: mNetClasses
    self.mNetClasses_property.mValueExplorer = nil
  //--- To many property: mFonts
    self.mFonts_property.mValueExplorer = nil
  //--- To many property: mDevices
    self.mDevices_property.mValueExplorer = nil
  //--- To many property: mSheets
    self.mSheets_property.mValueExplorer = nil
  //--- Atomic property: mSchematicsSheetOrientation
    self.mSchematicsSheetOrientation_property.mObserverExplorer = nil
    self.mSchematicsSheetOrientation_property.mValueExplorer = nil
  //--- To one property: mSelectedSheet
    self.mSelectedSheet_property.mObserverExplorer = nil
    self.mSelectedSheet_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mComponents_property.setProp ([])
    self.mNetClasses_property.setProp ([])
    self.mFonts_property.setProp ([])
    self.mDevices_property.setProp ([])
    self.mSheets_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mSelectedSheet_property.setProp (nil)
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.storeIn (dictionary: ioDictionary, forKey:"mSelectedPageIndex")
  //--- Atomic property: mSelectedSchematicsInspector
    self.mSelectedSchematicsInspector_property.storeIn (dictionary: ioDictionary, forKey:"mSelectedSchematicsInspector")
  //--- Atomic property: mSchematicsTitle
    self.mSchematicsTitle_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicsTitle")
  //--- Atomic property: mSchematicsVersion
    self.mSchematicsVersion_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicsVersion")
  //--- Atomic property: mSchematicsDate
    self.mSchematicsDate_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicsDate")
  //--- Atomic property: mSchematicsHorizontalFlip
    self.mSchematicsHorizontalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicsHorizontalFlip")
  //--- Atomic property: mSchematicsVerticalFlip
    self.mSchematicsVerticalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicsVerticalFlip")
  //--- Atomic property: mSchematicsZoom
    self.mSchematicsZoom_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicsZoom")
  //--- Atomic property: mSchematicsGridStyle
    self.mSchematicsGridStyle_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicsGridStyle")
  //--- Atomic property: mSchematicsGridDisplayFactor
    self.mSchematicsGridDisplayFactor_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicsGridDisplayFactor")
  //--- To many property: mComponents
    self.store (
      managedObjectArray: self.mComponents_property.propval,
      relationshipName: "mComponents",
      intoDictionary: ioDictionary
    )
  //--- To many property: mNetClasses
    self.store (
      managedObjectArray: self.mNetClasses_property.propval,
      relationshipName: "mNetClasses",
      intoDictionary: ioDictionary
    )
  //--- To many property: mFonts
    self.store (
      managedObjectArray: self.mFonts_property.propval,
      relationshipName: "mFonts",
      intoDictionary: ioDictionary
    )
  //--- To many property: mDevices
    self.store (
      managedObjectArray: self.mDevices_property.propval,
      relationshipName: "mDevices",
      intoDictionary: ioDictionary
    )
  //--- To many property: mSheets
    self.store (
      managedObjectArray: self.mSheets_property.propval,
      relationshipName: "mSheets",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: mSchematicsSheetOrientation
    self.mSchematicsSheetOrientation_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicsSheetOrientation")
  //--- To one property: mSelectedSheet
    self.store (managedObject:self.mSelectedSheet_property.propval,
      relationshipName: "mSelectedSheet",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mComponents
    self.mComponents_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mComponents",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [ComponentInProject])
  //--- To many property: mNetClasses
    self.mNetClasses_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mNetClasses",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [NetClassInProject])
  //--- To many property: mFonts
    self.mFonts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mFonts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [FontInProject])
  //--- To many property: mDevices
    self.mDevices_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mDevices",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [DeviceInProject])
  //--- To many property: mSheets
    self.mSheets_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mSheets",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SheetInProject])
  //--- To one property: mSelectedSheet
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mSelectedSheet",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? SheetInProject {
        self.mSelectedSheet_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.readFrom (dictionary: inDictionary, forKey:"mSelectedPageIndex")
  //--- Atomic property: mSelectedSchematicsInspector
    self.mSelectedSchematicsInspector_property.readFrom (dictionary: inDictionary, forKey:"mSelectedSchematicsInspector")
  //--- Atomic property: mSchematicsTitle
    self.mSchematicsTitle_property.readFrom (dictionary: inDictionary, forKey:"mSchematicsTitle")
  //--- Atomic property: mSchematicsVersion
    self.mSchematicsVersion_property.readFrom (dictionary: inDictionary, forKey:"mSchematicsVersion")
  //--- Atomic property: mSchematicsDate
    self.mSchematicsDate_property.readFrom (dictionary: inDictionary, forKey:"mSchematicsDate")
  //--- Atomic property: mSchematicsHorizontalFlip
    self.mSchematicsHorizontalFlip_property.readFrom (dictionary: inDictionary, forKey:"mSchematicsHorizontalFlip")
  //--- Atomic property: mSchematicsVerticalFlip
    self.mSchematicsVerticalFlip_property.readFrom (dictionary: inDictionary, forKey:"mSchematicsVerticalFlip")
  //--- Atomic property: mSchematicsZoom
    self.mSchematicsZoom_property.readFrom (dictionary: inDictionary, forKey:"mSchematicsZoom")
  //--- Atomic property: mSchematicsGridStyle
    self.mSchematicsGridStyle_property.readFrom (dictionary: inDictionary, forKey:"mSchematicsGridStyle")
  //--- Atomic property: mSchematicsGridDisplayFactor
    self.mSchematicsGridDisplayFactor_property.readFrom (dictionary: inDictionary, forKey:"mSchematicsGridDisplayFactor")
  //--- Atomic property: mSchematicsSheetOrientation
    self.mSchematicsSheetOrientation_property.readFrom (dictionary: inDictionary, forKey:"mSchematicsSheetOrientation")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mComponents
    for managedObject in self.mComponents_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mNetClasses
    for managedObject in self.mNetClasses_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mFonts
    for managedObject in self.mFonts_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mDevices
    for managedObject in self.mDevices_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mSheets
    for managedObject in self.mSheets_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mSelectedSheet
    if let managedObject = self.mSelectedSheet_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mComponents
    for managedObject in self.mComponents_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mNetClasses
    for managedObject in self.mNetClasses_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mFonts
    for managedObject in self.mFonts_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mDevices
    for managedObject in self.mDevices_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mSheets
    for managedObject in self.mSheets_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mSelectedSheet
    if let managedObject = self.mSelectedSheet_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ProjectRoot : ReadOnlyAbstractArrayProperty <ProjectRoot> {

  //····················································································································
  //   Observers of 'mSelectedPageIndex' stored property
  //····················································································································

  private var mObserversOf_mSelectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSelectedPageIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedPageIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSelectedPageIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedPageIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSelectedPageIndex_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSelectedPageIndex.apply { (_ observer : EBEvent) in
        managedObject.mSelectedPageIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSelectedPageIndex_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSelectedPageIndex.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSelectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSelectedSchematicsInspector' stored property
  //····················································································································

  private var mObserversOf_mSelectedSchematicsInspector = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSelectedSchematicsInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSelectedSchematicsInspector.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedSchematicsInspector_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSelectedSchematicsInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSelectedSchematicsInspector.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedSchematicsInspector_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSelectedSchematicsInspector_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSelectedSchematicsInspector.apply { (_ observer : EBEvent) in
        managedObject.mSelectedSchematicsInspector_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSelectedSchematicsInspector_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSelectedSchematicsInspector.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSelectedSchematicsInspector_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicsTitle' stored property
  //····················································································································

  private var mObserversOf_mSchematicsTitle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicsTitle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicsTitle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicsTitle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicsTitle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicsTitle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicsTitle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicsTitle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicsTitle.apply { (_ observer : EBEvent) in
        managedObject.mSchematicsTitle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicsTitle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicsTitle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicsTitle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicsVersion' stored property
  //····················································································································

  private var mObserversOf_mSchematicsVersion = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicsVersion (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicsVersion.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicsVersion_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicsVersion (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicsVersion.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicsVersion_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicsVersion_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicsVersion.apply { (_ observer : EBEvent) in
        managedObject.mSchematicsVersion_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicsVersion_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicsVersion.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicsVersion_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicsDate' stored property
  //····················································································································

  private var mObserversOf_mSchematicsDate = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicsDate (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicsDate.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicsDate_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicsDate (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicsDate.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicsDate_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicsDate_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicsDate.apply { (_ observer : EBEvent) in
        managedObject.mSchematicsDate_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicsDate_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicsDate.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicsDate_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicsHorizontalFlip' stored property
  //····················································································································

  private var mObserversOf_mSchematicsHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicsHorizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicsHorizontalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicsHorizontalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicsHorizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicsHorizontalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicsHorizontalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicsHorizontalFlip_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicsHorizontalFlip.apply { (_ observer : EBEvent) in
        managedObject.mSchematicsHorizontalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicsHorizontalFlip_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicsHorizontalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicsHorizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicsVerticalFlip' stored property
  //····················································································································

  private var mObserversOf_mSchematicsVerticalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicsVerticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicsVerticalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicsVerticalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicsVerticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicsVerticalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicsVerticalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicsVerticalFlip_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicsVerticalFlip.apply { (_ observer : EBEvent) in
        managedObject.mSchematicsVerticalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicsVerticalFlip_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicsVerticalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicsVerticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicsZoom' stored property
  //····················································································································

  private var mObserversOf_mSchematicsZoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicsZoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicsZoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicsZoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicsZoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicsZoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicsZoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicsZoom_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicsZoom.apply { (_ observer : EBEvent) in
        managedObject.mSchematicsZoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicsZoom_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicsZoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicsZoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicsGridStyle' stored property
  //····················································································································

  private var mObserversOf_mSchematicsGridStyle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicsGridStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicsGridStyle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicsGridStyle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicsGridStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicsGridStyle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicsGridStyle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicsGridStyle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicsGridStyle.apply { (_ observer : EBEvent) in
        managedObject.mSchematicsGridStyle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicsGridStyle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicsGridStyle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicsGridStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicsGridDisplayFactor' stored property
  //····················································································································

  private var mObserversOf_mSchematicsGridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicsGridDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicsGridDisplayFactor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicsGridDisplayFactor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicsGridDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicsGridDisplayFactor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicsGridDisplayFactor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicsGridDisplayFactor_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicsGridDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.mSchematicsGridDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicsGridDisplayFactor_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicsGridDisplayFactor.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicsGridDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicsSheetOrientation' stored property
  //····················································································································

  private var mObserversOf_mSchematicsSheetOrientation = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicsSheetOrientation (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicsSheetOrientation.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicsSheetOrientation_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicsSheetOrientation (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicsSheetOrientation.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicsSheetOrientation_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicsSheetOrientation_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicsSheetOrientation.apply { (_ observer : EBEvent) in
        managedObject.mSchematicsSheetOrientation_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicsSheetOrientation_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicsSheetOrientation.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicsSheetOrientation_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'unplacedSymbols' transient property
  //····················································································································

  private var mObserversOf_unplacedSymbols = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unplacedSymbols_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unplacedSymbols_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_unplacedSymbols_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_unplacedSymbols.apply { (_ observer : EBEvent) in
        managedObject.unplacedSymbols_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_unplacedSymbols_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_unplacedSymbols.apply { (_ observer : EBEvent) in
        managedObject.unplacedSymbols_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'deviceNames' transient property
  //····················································································································

  private var mObserversOf_deviceNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_deviceNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_deviceNames.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceNames_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_deviceNames.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceNames_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_deviceNames_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_deviceNames.apply { (_ observer : EBEvent) in
        managedObject.deviceNames_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_deviceNames_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_deviceNames.apply { (_ observer : EBEvent) in
        managedObject.deviceNames_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'schematicsBackgroundDisplay' transient property
  //····················································································································

  private var mObserversOf_schematicsBackgroundDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_schematicsBackgroundDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_schematicsBackgroundDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicsBackgroundDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_schematicsBackgroundDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_schematicsBackgroundDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicsBackgroundDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_schematicsBackgroundDisplay_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicsBackgroundDisplay.apply { (_ observer : EBEvent) in
        managedObject.schematicsBackgroundDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_schematicsBackgroundDisplay_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicsBackgroundDisplay.apply { (_ observer : EBEvent) in
        managedObject.schematicsBackgroundDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_ProjectRoot : ReadOnlyArrayOf_ProjectRoot {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [ProjectRoot] > > = nil

  //····················································································································

  override var propset : Set <ProjectRoot> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [ProjectRoot] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [ProjectRoot] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  private var mSet = Set <ProjectRoot> ()

  //····················································································································

  private var mCachedValue : EBSelection < [ProjectRoot] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      let cachedValue = unwrappedComputeFunction ()
      self.mCachedValue = cachedValue
      let newSet : Set <ProjectRoot>
      switch cachedValue {
      case .multiple, .empty :
        newSet = Set <ProjectRoot> ()
      case .single (let array) :
        newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_mSelectedPageIndex_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mSelectedSchematicsInspector_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mSchematicsTitle_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mSchematicsVersion_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mSchematicsDate_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mSchematicsHorizontalFlip_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mSchematicsVerticalFlip_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mSchematicsZoom_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mSchematicsGridStyle_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mSchematicsGridDisplayFactor_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mSchematicsSheetOrientation_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_unplacedSymbols_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_deviceNames_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_schematicsBackgroundDisplay_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_mSelectedPageIndex_toElementsOfSet (addedSet)
      self.addEBObserversOf_mSelectedSchematicsInspector_toElementsOfSet (addedSet)
      self.addEBObserversOf_mSchematicsTitle_toElementsOfSet (addedSet)
      self.addEBObserversOf_mSchematicsVersion_toElementsOfSet (addedSet)
      self.addEBObserversOf_mSchematicsDate_toElementsOfSet (addedSet)
      self.addEBObserversOf_mSchematicsHorizontalFlip_toElementsOfSet (addedSet)
      self.addEBObserversOf_mSchematicsVerticalFlip_toElementsOfSet (addedSet)
      self.addEBObserversOf_mSchematicsZoom_toElementsOfSet (addedSet)
      self.addEBObserversOf_mSchematicsGridStyle_toElementsOfSet (addedSet)
      self.addEBObserversOf_mSchematicsGridDisplayFactor_toElementsOfSet (addedSet)
      self.addEBObserversOf_mSchematicsSheetOrientation_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_unplacedSymbols_toElementsOfSet (addedSet)
      self.addEBObserversOf_deviceNames_toElementsOfSet (addedSet)
      self.addEBObserversOf_schematicsBackgroundDisplay_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_ProjectRoot : ReadOnlyArrayOf_ProjectRoot {

  //····················································································································
 
  func setProp (_ value :  [ProjectRoot]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_ProjectRoot : ReadWriteArrayOf_ProjectRoot, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : ProjectRoot) -> Void > = nil
  var resetOppositeRelationship : Optional < (_ inManagedObject : ProjectRoot) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [ProjectRoot] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "ProjectRoot") as? ProjectRoot {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <ProjectRoot> ()
  private var mValue = [ProjectRoot] () {
    didSet {
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.resetOppositeRelationship? (managedObject)
            managedObject.mSelectedPageIndex_property.mSetterDelegate = nil
            managedObject.mSelectedSchematicsInspector_property.mSetterDelegate = nil
            managedObject.mSchematicsTitle_property.mSetterDelegate = nil
            managedObject.mSchematicsVersion_property.mSetterDelegate = nil
            managedObject.mSchematicsDate_property.mSetterDelegate = nil
            managedObject.mSchematicsHorizontalFlip_property.mSetterDelegate = nil
            managedObject.mSchematicsVerticalFlip_property.mSetterDelegate = nil
            managedObject.mSchematicsZoom_property.mSetterDelegate = nil
            managedObject.mSchematicsGridStyle_property.mSetterDelegate = nil
            managedObject.mSchematicsGridDisplayFactor_property.mSetterDelegate = nil
            managedObject.mSchematicsSheetOrientation_property.mSetterDelegate = nil
          }
        //--- Remove observers of stored properties
          self.removeEBObserversOf_mSelectedPageIndex_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mSelectedSchematicsInspector_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mSchematicsTitle_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mSchematicsVersion_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mSchematicsDate_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mSchematicsHorizontalFlip_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mSchematicsVerticalFlip_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mSchematicsZoom_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mSchematicsGridStyle_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mSchematicsGridDisplayFactor_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mSchematicsSheetOrientation_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of transient properties
          self.removeEBObserversOf_unplacedSymbols_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_deviceNames_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_schematicsBackgroundDisplay_fromElementsOfSet (removedObjectSet)
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : ProjectRoot in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
            managedObject.mSelectedPageIndex_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mSelectedSchematicsInspector_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mSchematicsTitle_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mSchematicsVersion_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mSchematicsDate_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mSchematicsHorizontalFlip_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mSchematicsVerticalFlip_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mSchematicsZoom_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mSchematicsGridStyle_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mSchematicsGridDisplayFactor_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mSchematicsSheetOrientation_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
        //--- Add observers of stored properties
          self.addEBObserversOf_mSelectedPageIndex_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mSelectedSchematicsInspector_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mSchematicsTitle_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mSchematicsVersion_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mSchematicsDate_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mSchematicsHorizontalFlip_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mSchematicsVerticalFlip_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mSchematicsZoom_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mSchematicsGridStyle_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mSchematicsGridDisplayFactor_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mSchematicsSheetOrientation_toElementsOfSet (addedObjectSet)
        //--- Add observers of transient properties
          self.addEBObserversOf_unplacedSymbols_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_deviceNames_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_schematicsBackgroundDisplay_toElementsOfSet (addedObjectSet)
        }
      //--- Notify observers
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [ProjectRoot] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [ProjectRoot]) { self.mValue = inValue }

  //····················································································································

  override var propval : [ProjectRoot] { return self.mValue }

  //····················································································································

  override var propset : Set <ProjectRoot> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [ProjectRoot]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : ProjectRoot) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : ProjectRoot) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: mSelectedSheet
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_ProjectRoot_mSelectedSheet : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : ProjectRoot? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  private var mValue : SheetInProject? {
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.ebUndoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
      //--- Remove property observers of old object
        oldValue?.mSheetTitle_property.removeEBObserversFrom (&self.mObserversOf_mSheetTitle)
      //--- Add property observers to new object
        self.mValue?.mSheetTitle_property.addEBObserversFrom (&self.mObserversOf_mSheetTitle)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : SheetInProject? { return self.mValue }

  var prop : EBSelection <SheetInProject?> { return .single (self.mValue) }

  func setProp (_ value : SheetInProject?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : SheetInProject?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : SheetInProject) {
    if self.mValue === object {
      self.mValue = nil
    }
  }

  //····················································································································
  //   Observable property: mSheetTitle
  //····················································································································

  private var mObserversOf_mSheetTitle = EBWeakEventSet ()

  //····················································································································

  var mSheetTitle_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mSheetTitle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSheetTitle (_ inObserver : EBEvent) {
    self.mObserversOf_mSheetTitle.insert (inObserver)
    if let object = self.propval {
      object.mSheetTitle_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSheetTitle (_ inObserver : EBEvent) {
    self.mObserversOf_mSheetTitle.remove (inObserver)
    if let object = self.propval {
      object.mSheetTitle_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
