//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_mNetClassName : class {
  var mNetClassName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_mNetClassColor : class {
  var mNetClassColor : NSColor { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_mNetWidth : class {
  var mNetWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_mNetWidthUnit : class {
  var mNetWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_mViaHoleDiameter : class {
  var mViaHoleDiameter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_mViaHoleDiameterUnit : class {
  var mViaHoleDiameterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_mViaPadDiameter : class {
  var mViaPadDiameter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_mViaPadDiameterUnit : class {
  var mViaPadDiameterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_netWidth : class {
  var netWidth : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_viaHoleDiameter : class {
  var viaHoleDiameter : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_viaPadDiameter : class {
  var viaPadDiameter : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_canRemove : class {
  var canRemove : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetClassInProject_netUsage : class {
  var netUsage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class NetClassInProject : EBManagedObject,
         NetClassInProject_mNetClassName,
         NetClassInProject_mNetClassColor,
         NetClassInProject_mNetWidth,
         NetClassInProject_mNetWidthUnit,
         NetClassInProject_mViaHoleDiameter,
         NetClassInProject_mViaHoleDiameterUnit,
         NetClassInProject_mViaPadDiameter,
         NetClassInProject_mViaPadDiameterUnit,
         NetClassInProject_netWidth,
         NetClassInProject_viaHoleDiameter,
         NetClassInProject_viaPadDiameter,
         NetClassInProject_canRemove,
         NetClassInProject_netUsage {

  //····················································································································
  //   Atomic property: mNetClassName
  //····················································································································

  var mNetClassName_property = EBStoredProperty_String (defaultValue: "Default")

  //····················································································································

  var mNetClassName : String {
    get { return self.mNetClassName_property.propval }
    set { self.mNetClassName_property.setProp (newValue) }
  }

  //····················································································································

  var mNetClassName_property_selection : EBSelection <String> { return self.mNetClassName_property.prop }

  //····················································································································
  //   Atomic property: mNetClassColor
  //····················································································································

  var mNetClassColor_property = EBStoredProperty_NSColor (defaultValue: NSColor.brown)

  //····················································································································

  var mNetClassColor : NSColor {
    get { return self.mNetClassColor_property.propval }
    set { self.mNetClassColor_property.setProp (newValue) }
  }

  //····················································································································

  var mNetClassColor_property_selection : EBSelection <NSColor> { return self.mNetClassColor_property.prop }

  //····················································································································
  //   Atomic property: mNetWidth
  //····················································································································

  var mNetWidth_property = EBStoredProperty_Int (defaultValue: 45720)

  //····················································································································

  var mNetWidth : Int {
    get { return self.mNetWidth_property.propval }
    set { self.mNetWidth_property.setProp (newValue) }
  }

  //····················································································································

  var mNetWidth_property_selection : EBSelection <Int> { return self.mNetWidth_property.prop }

  //····················································································································
  //   Atomic property: mNetWidthUnit
  //····················································································································

  var mNetWidthUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var mNetWidthUnit : Int {
    get { return self.mNetWidthUnit_property.propval }
    set { self.mNetWidthUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mNetWidthUnit_property_selection : EBSelection <Int> { return self.mNetWidthUnit_property.prop }

  //····················································································································
  //   Atomic property: mViaHoleDiameter
  //····················································································································

  var mViaHoleDiameter_property = EBStoredProperty_Int (defaultValue: 45720)

  //····················································································································

  var mViaHoleDiameter : Int {
    get { return self.mViaHoleDiameter_property.propval }
    set { self.mViaHoleDiameter_property.setProp (newValue) }
  }

  //····················································································································

  var mViaHoleDiameter_property_selection : EBSelection <Int> { return self.mViaHoleDiameter_property.prop }

  //····················································································································
  //   Atomic property: mViaHoleDiameterUnit
  //····················································································································

  var mViaHoleDiameterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var mViaHoleDiameterUnit : Int {
    get { return self.mViaHoleDiameterUnit_property.propval }
    set { self.mViaHoleDiameterUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mViaHoleDiameterUnit_property_selection : EBSelection <Int> { return self.mViaHoleDiameterUnit_property.prop }

  //····················································································································
  //   Atomic property: mViaPadDiameter
  //····················································································································

  var mViaPadDiameter_property = EBStoredProperty_Int (defaultValue: 91440)

  //····················································································································

  var mViaPadDiameter : Int {
    get { return self.mViaPadDiameter_property.propval }
    set { self.mViaPadDiameter_property.setProp (newValue) }
  }

  //····················································································································

  var mViaPadDiameter_property_selection : EBSelection <Int> { return self.mViaPadDiameter_property.prop }

  //····················································································································
  //   Atomic property: mViaPadDiameterUnit
  //····················································································································

  var mViaPadDiameterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var mViaPadDiameterUnit : Int {
    get { return self.mViaPadDiameterUnit_property.propval }
    set { self.mViaPadDiameterUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mViaPadDiameterUnit_property_selection : EBSelection <Int> { return self.mViaPadDiameterUnit_property.prop }

  //····················································································································
  //   To many property: mNets
  //····················································································································

  var mNets_property = StoredArrayOf_NetInProject ()

  //····················································································································

  var mNets_property_selection : EBSelection < [NetInProject] > {
    return self.mNets_property.prop
  }

  //····················································································································

  var mNets : [NetInProject] {
    get { return self.mNets_property.propval }
    set { self.mNets_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: netWidth
  //····················································································································

  var netWidth_property = EBTransientProperty_String ()

  //····················································································································

  var netWidth_property_selection : EBSelection <String> {
    return self.netWidth_property.prop
  }

  //····················································································································

  var netWidth : String? {
    switch self.netWidth_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: viaHoleDiameter
  //····················································································································

  var viaHoleDiameter_property = EBTransientProperty_String ()

  //····················································································································

  var viaHoleDiameter_property_selection : EBSelection <String> {
    return self.viaHoleDiameter_property.prop
  }

  //····················································································································

  var viaHoleDiameter : String? {
    switch self.viaHoleDiameter_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: viaPadDiameter
  //····················································································································

  var viaPadDiameter_property = EBTransientProperty_String ()

  //····················································································································

  var viaPadDiameter_property_selection : EBSelection <String> {
    return self.viaPadDiameter_property.prop
  }

  //····················································································································

  var viaPadDiameter : String? {
    switch self.viaPadDiameter_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canRemove
  //····················································································································

  var canRemove_property = EBTransientProperty_Bool ()

  //····················································································································

  var canRemove_property_selection : EBSelection <Bool> {
    return self.canRemove_property.prop
  }

  //····················································································································

  var canRemove : Bool? {
    switch self.canRemove_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netUsage
  //····················································································································

  var netUsage_property = EBTransientProperty_String ()

  //····················································································································

  var netUsage_property_selection : EBSelection <String> {
    return self.netUsage_property.prop
  }

  //····················································································································

  var netUsage : String? {
    switch self.netUsage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mNetClassName
    self.mNetClassName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mNetClassColor
    self.mNetClassColor_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mNetWidth
    self.mNetWidth_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mNetWidthUnit
    self.mNetWidthUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mViaHoleDiameter
    self.mViaHoleDiameter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mViaHoleDiameterUnit
    self.mViaHoleDiameterUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mViaPadDiameter
    self.mViaPadDiameter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mViaPadDiameterUnit
    self.mViaPadDiameterUnit_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mNets (has opposite relationship)
    self.mNets_property.ebUndoManager = self.ebUndoManager
    self.mNets_property.setOppositeRelationship = { [weak self] (_ inManagedObject :NetInProject?) in
      inManagedObject?.mNetClass_property.setProp (self)
    }
  //--- Atomic property: netWidth
    self.netWidth_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mNetWidth_property_selection.kind ()
        kind &= unwSelf.mNetWidthUnit_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mNetWidth_property_selection, unwSelf.mNetWidthUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_NetClassInProject_netWidth (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNetWidth_property.addEBObserver (self.netWidth_property)
    self.mNetWidthUnit_property.addEBObserver (self.netWidth_property)
  //--- Atomic property: viaHoleDiameter
    self.viaHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mViaHoleDiameter_property_selection.kind ()
        kind &= unwSelf.mViaHoleDiameterUnit_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mViaHoleDiameter_property_selection, unwSelf.mViaHoleDiameterUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_NetClassInProject_viaHoleDiameter (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mViaHoleDiameter_property.addEBObserver (self.viaHoleDiameter_property)
    self.mViaHoleDiameterUnit_property.addEBObserver (self.viaHoleDiameter_property)
  //--- Atomic property: viaPadDiameter
    self.viaPadDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mViaPadDiameter_property_selection.kind ()
        kind &= unwSelf.mViaPadDiameterUnit_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mViaPadDiameter_property_selection, unwSelf.mViaPadDiameterUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_NetClassInProject_viaPadDiameter (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mViaPadDiameter_property.addEBObserver (self.viaPadDiameter_property)
    self.mViaPadDiameterUnit_property.addEBObserver (self.viaPadDiameter_property)
  //--- Atomic property: canRemove
    self.canRemove_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNets_property.count_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mNets_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (transient_NetClassInProject_canRemove (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNets_property.addEBObserver (self.canRemove_property)
  //--- Atomic property: netUsage
    self.netUsage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNets_property.count_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mNets_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (transient_NetClassInProject_netUsage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNets_property.addEBObserver (self.netUsage_property)
  //--- Install undoers and opposite setter for relationships
    self.mNets_property.setOppositeRelationship = { [weak self] (_ inManagedObject : NetInProject?) in
      inManagedObject?.mNetClass_property.setProp (self)
    }
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mNetWidth_property.removeEBObserver (self.netWidth_property)
    self.mNetWidthUnit_property.removeEBObserver (self.netWidth_property)
    self.mViaHoleDiameter_property.removeEBObserver (self.viaHoleDiameter_property)
    self.mViaHoleDiameterUnit_property.removeEBObserver (self.viaHoleDiameter_property)
    self.mViaPadDiameter_property.removeEBObserver (self.viaPadDiameter_property)
    self.mViaPadDiameterUnit_property.removeEBObserver (self.viaPadDiameter_property)
    self.mNets_property.removeEBObserver (self.canRemove_property)
    self.mNets_property.removeEBObserver (self.netUsage_property)
 //   self.mNets_property.setOppositeRelationship = nil
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mNetClassName",
      idx:self.mNetClassName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mNetClassName_property.mObserverExplorer,
      valueExplorer:&self.mNetClassName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNetClassColor",
      idx:self.mNetClassColor_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mNetClassColor_property.mObserverExplorer,
      valueExplorer:&self.mNetClassColor_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNetWidth",
      idx:self.mNetWidth_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mNetWidth_property.mObserverExplorer,
      valueExplorer:&self.mNetWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNetWidthUnit",
      idx:self.mNetWidthUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mNetWidthUnit_property.mObserverExplorer,
      valueExplorer:&self.mNetWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mViaHoleDiameter",
      idx:self.mViaHoleDiameter_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mViaHoleDiameter_property.mObserverExplorer,
      valueExplorer:&self.mViaHoleDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mViaHoleDiameterUnit",
      idx:self.mViaHoleDiameterUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mViaHoleDiameterUnit_property.mObserverExplorer,
      valueExplorer:&self.mViaHoleDiameterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mViaPadDiameter",
      idx:self.mViaPadDiameter_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mViaPadDiameter_property.mObserverExplorer,
      valueExplorer:&self.mViaPadDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mViaPadDiameterUnit",
      idx:self.mViaPadDiameterUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mViaPadDiameterUnit_property.mObserverExplorer,
      valueExplorer:&self.mViaPadDiameterUnit_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "netWidth",
      idx:self.netWidth_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.netWidth_property.mObserverExplorer,
      valueExplorer:&self.netWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viaHoleDiameter",
      idx:self.viaHoleDiameter_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.viaHoleDiameter_property.mObserverExplorer,
      valueExplorer:&self.viaHoleDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viaPadDiameter",
      idx:self.viaPadDiameter_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.viaPadDiameter_property.mObserverExplorer,
      valueExplorer:&self.viaPadDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "canRemove",
      idx:self.canRemove_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.canRemove_property.mObserverExplorer,
      valueExplorer:&self.canRemove_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netUsage",
      idx:self.netUsage_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.netUsage_property.mObserverExplorer,
      valueExplorer:&self.netUsage_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "mNets",
      idx:mNets_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mNets_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mNetClassName
    self.mNetClassName_property.mObserverExplorer = nil
    self.mNetClassName_property.mValueExplorer = nil
  //--- Atomic property: mNetClassColor
    self.mNetClassColor_property.mObserverExplorer = nil
    self.mNetClassColor_property.mValueExplorer = nil
  //--- Atomic property: mNetWidth
    self.mNetWidth_property.mObserverExplorer = nil
    self.mNetWidth_property.mValueExplorer = nil
  //--- Atomic property: mNetWidthUnit
    self.mNetWidthUnit_property.mObserverExplorer = nil
    self.mNetWidthUnit_property.mValueExplorer = nil
  //--- Atomic property: mViaHoleDiameter
    self.mViaHoleDiameter_property.mObserverExplorer = nil
    self.mViaHoleDiameter_property.mValueExplorer = nil
  //--- Atomic property: mViaHoleDiameterUnit
    self.mViaHoleDiameterUnit_property.mObserverExplorer = nil
    self.mViaHoleDiameterUnit_property.mValueExplorer = nil
  //--- Atomic property: mViaPadDiameter
    self.mViaPadDiameter_property.mObserverExplorer = nil
    self.mViaPadDiameter_property.mValueExplorer = nil
  //--- Atomic property: mViaPadDiameterUnit
    self.mViaPadDiameterUnit_property.mObserverExplorer = nil
    self.mViaPadDiameterUnit_property.mValueExplorer = nil
  //--- To many property: mNets
    self.mNets_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mNets_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mNetClassName
    self.mNetClassName_property.storeIn (dictionary: ioDictionary, forKey:"mNetClassName")
  //--- Atomic property: mNetClassColor
    self.mNetClassColor_property.storeIn (dictionary: ioDictionary, forKey:"mNetClassColor")
  //--- Atomic property: mNetWidth
    self.mNetWidth_property.storeIn (dictionary: ioDictionary, forKey:"mNetWidth")
  //--- Atomic property: mNetWidthUnit
    self.mNetWidthUnit_property.storeIn (dictionary: ioDictionary, forKey:"mNetWidthUnit")
  //--- Atomic property: mViaHoleDiameter
    self.mViaHoleDiameter_property.storeIn (dictionary: ioDictionary, forKey:"mViaHoleDiameter")
  //--- Atomic property: mViaHoleDiameterUnit
    self.mViaHoleDiameterUnit_property.storeIn (dictionary: ioDictionary, forKey:"mViaHoleDiameterUnit")
  //--- Atomic property: mViaPadDiameter
    self.mViaPadDiameter_property.storeIn (dictionary: ioDictionary, forKey:"mViaPadDiameter")
  //--- Atomic property: mViaPadDiameterUnit
    self.mViaPadDiameterUnit_property.storeIn (dictionary: ioDictionary, forKey:"mViaPadDiameterUnit")
  //--- To many property: mNets
    self.store (
      managedObjectArray: self.mNets_property.propval,
      relationshipName: "mNets",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mNets
    self.mNets_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mNets",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [NetInProject])
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mNetClassName
    self.mNetClassName_property.readFrom (dictionary: inDictionary, forKey:"mNetClassName")
  //--- Atomic property: mNetClassColor
    self.mNetClassColor_property.readFrom (dictionary: inDictionary, forKey:"mNetClassColor")
  //--- Atomic property: mNetWidth
    self.mNetWidth_property.readFrom (dictionary: inDictionary, forKey:"mNetWidth")
  //--- Atomic property: mNetWidthUnit
    self.mNetWidthUnit_property.readFrom (dictionary: inDictionary, forKey:"mNetWidthUnit")
  //--- Atomic property: mViaHoleDiameter
    self.mViaHoleDiameter_property.readFrom (dictionary: inDictionary, forKey:"mViaHoleDiameter")
  //--- Atomic property: mViaHoleDiameterUnit
    self.mViaHoleDiameterUnit_property.readFrom (dictionary: inDictionary, forKey:"mViaHoleDiameterUnit")
  //--- Atomic property: mViaPadDiameter
    self.mViaPadDiameter_property.readFrom (dictionary: inDictionary, forKey:"mViaPadDiameter")
  //--- Atomic property: mViaPadDiameterUnit
    self.mViaPadDiameterUnit_property.readFrom (dictionary: inDictionary, forKey:"mViaPadDiameterUnit")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mNets
    for managedObject in self.mNets_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mNets
    for managedObject in self.mNets_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_NetClassInProject : ReadOnlyAbstractArrayProperty <NetClassInProject> {

  //····················································································································
  //   Observers of 'mNetClassName' stored property
  //····················································································································

  private var mObserversOf_mNetClassName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNetClassName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNetClassName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetClassName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetClassName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNetClassName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetClassName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNetClassName_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNetClassName.apply { (_ observer : EBEvent) in
        managedObject.mNetClassName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNetClassName_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mNetClassName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNetClassName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNetClassColor' stored property
  //····················································································································

  private var mObserversOf_mNetClassColor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNetClassColor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNetClassColor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetClassColor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetClassColor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNetClassColor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetClassColor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNetClassColor_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNetClassColor.apply { (_ observer : EBEvent) in
        managedObject.mNetClassColor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNetClassColor_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mNetClassColor.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNetClassColor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNetWidth' stored property
  //····················································································································

  private var mObserversOf_mNetWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNetWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNetWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNetWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNetWidth_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNetWidth.apply { (_ observer : EBEvent) in
        managedObject.mNetWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNetWidth_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mNetWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNetWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNetWidthUnit' stored property
  //····················································································································

  private var mObserversOf_mNetWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNetWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNetWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNetWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNetWidthUnit_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNetWidthUnit.apply { (_ observer : EBEvent) in
        managedObject.mNetWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNetWidthUnit_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mNetWidthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNetWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mViaHoleDiameter' stored property
  //····················································································································

  private var mObserversOf_mViaHoleDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mViaHoleDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mViaHoleDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaHoleDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mViaHoleDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mViaHoleDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaHoleDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mViaHoleDiameter_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mViaHoleDiameter.apply { (_ observer : EBEvent) in
        managedObject.mViaHoleDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mViaHoleDiameter_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mViaHoleDiameter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mViaHoleDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mViaHoleDiameterUnit' stored property
  //····················································································································

  private var mObserversOf_mViaHoleDiameterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mViaHoleDiameterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mViaHoleDiameterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaHoleDiameterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mViaHoleDiameterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mViaHoleDiameterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaHoleDiameterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mViaHoleDiameterUnit_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mViaHoleDiameterUnit.apply { (_ observer : EBEvent) in
        managedObject.mViaHoleDiameterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mViaHoleDiameterUnit_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mViaHoleDiameterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mViaHoleDiameterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mViaPadDiameter' stored property
  //····················································································································

  private var mObserversOf_mViaPadDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mViaPadDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mViaPadDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaPadDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mViaPadDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mViaPadDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaPadDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mViaPadDiameter_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mViaPadDiameter.apply { (_ observer : EBEvent) in
        managedObject.mViaPadDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mViaPadDiameter_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mViaPadDiameter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mViaPadDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mViaPadDiameterUnit' stored property
  //····················································································································

  private var mObserversOf_mViaPadDiameterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mViaPadDiameterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mViaPadDiameterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaPadDiameterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mViaPadDiameterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mViaPadDiameterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaPadDiameterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mViaPadDiameterUnit_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mViaPadDiameterUnit.apply { (_ observer : EBEvent) in
        managedObject.mViaPadDiameterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mViaPadDiameterUnit_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mViaPadDiameterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mViaPadDiameterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netWidth' transient property
  //····················································································································

  private var mObserversOf_netWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netWidth_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_netWidth.apply { (_ observer : EBEvent) in
        managedObject.netWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netWidth_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_netWidth.apply { (_ observer : EBEvent) in
        managedObject.netWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaHoleDiameter' transient property
  //····················································································································

  private var mObserversOf_viaHoleDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaHoleDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_viaHoleDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaHoleDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaHoleDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_viaHoleDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaHoleDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaHoleDiameter_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_viaHoleDiameter.apply { (_ observer : EBEvent) in
        managedObject.viaHoleDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaHoleDiameter_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_viaHoleDiameter.apply { (_ observer : EBEvent) in
        managedObject.viaHoleDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaPadDiameter' transient property
  //····················································································································

  private var mObserversOf_viaPadDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaPadDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_viaPadDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaPadDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaPadDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_viaPadDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaPadDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaPadDiameter_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_viaPadDiameter.apply { (_ observer : EBEvent) in
        managedObject.viaPadDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaPadDiameter_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_viaPadDiameter.apply { (_ observer : EBEvent) in
        managedObject.viaPadDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'canRemove' transient property
  //····················································································································

  private var mObserversOf_canRemove = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_canRemove (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_canRemove.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canRemove_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_canRemove (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_canRemove.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canRemove_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_canRemove_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_canRemove.apply { (_ observer : EBEvent) in
        managedObject.canRemove_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_canRemove_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_canRemove.apply { (_ observer : EBEvent) in
        managedObject.canRemove_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netUsage' transient property
  //····················································································································

  private var mObserversOf_netUsage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netUsage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netUsage.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netUsage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netUsage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netUsage.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netUsage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netUsage_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_netUsage.apply { (_ observer : EBEvent) in
        managedObject.netUsage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netUsage_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_netUsage.apply { (_ observer : EBEvent) in
        managedObject.netUsage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_NetClassInProject : ReadOnlyArrayOf_NetClassInProject {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [NetClassInProject] > > = nil

  //····················································································································

  override var propset : Set <NetClassInProject> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [NetClassInProject] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [NetClassInProject] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <NetClassInProject> ()

  //····················································································································

  private var mCachedValue : EBSelection < [NetClassInProject] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      let cachedValue = unwrappedComputeFunction ()
      self.mCachedValue = cachedValue
      let newSet : Set <NetClassInProject>
      switch cachedValue {
      case .multiple, .empty :
        newSet = Set <NetClassInProject> ()
      case .single (let array) :
        newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_mNetClassName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mNetClassColor_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mNetWidth_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mNetWidthUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mViaHoleDiameter_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mViaHoleDiameterUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mViaPadDiameter_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mViaPadDiameterUnit_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_netWidth_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_viaHoleDiameter_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_viaPadDiameter_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_canRemove_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_netUsage_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_mNetClassName_toElementsOfSet (addedSet)
      self.addEBObserversOf_mNetClassColor_toElementsOfSet (addedSet)
      self.addEBObserversOf_mNetWidth_toElementsOfSet (addedSet)
      self.addEBObserversOf_mNetWidthUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_mViaHoleDiameter_toElementsOfSet (addedSet)
      self.addEBObserversOf_mViaHoleDiameterUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_mViaPadDiameter_toElementsOfSet (addedSet)
      self.addEBObserversOf_mViaPadDiameterUnit_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_netWidth_toElementsOfSet (addedSet)
      self.addEBObserversOf_viaHoleDiameter_toElementsOfSet (addedSet)
      self.addEBObserversOf_viaPadDiameter_toElementsOfSet (addedSet)
      self.addEBObserversOf_canRemove_toElementsOfSet (addedSet)
      self.addEBObserversOf_netUsage_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_NetClassInProject : ReadOnlyArrayOf_NetClassInProject {

  //····················································································································
 
  func setProp (_ value :  [NetClassInProject]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_NetClassInProject : ReadWriteArrayOf_NetClassInProject, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : NetClassInProject?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [NetClassInProject] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "NetClassInProject") as? NetClassInProject {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <NetClassInProject> ()
  private var mValue = [NetClassInProject] () {
    didSet {
     // self.postEvent ()
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.setOppositeRelationship? (nil)
            managedObject.mNetClassName_property.mSetterDelegate = nil
            managedObject.mNetClassColor_property.mSetterDelegate = nil
            managedObject.mNetWidth_property.mSetterDelegate = nil
            managedObject.mNetWidthUnit_property.mSetterDelegate = nil
            managedObject.mViaHoleDiameter_property.mSetterDelegate = nil
            managedObject.mViaHoleDiameterUnit_property.mSetterDelegate = nil
            managedObject.mViaPadDiameter_property.mSetterDelegate = nil
            managedObject.mViaPadDiameterUnit_property.mSetterDelegate = nil
          }
       //   self.removeEBObserversOf_mNetClassName_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_mNetClassColor_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_mNetWidth_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_mNetWidthUnit_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_mViaHoleDiameter_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_mViaHoleDiameterUnit_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_mViaPadDiameter_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_mViaPadDiameterUnit_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_netWidth_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_viaHoleDiameter_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_viaPadDiameter_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_canRemove_fromElementsOfSet (removedObjectSet)
       //   self.removeEBObserversOf_netUsage_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of stored properties
          self.removeEBObserversOf_mNetClassName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mNetClassColor_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mNetWidth_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mNetWidthUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mViaHoleDiameter_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mViaHoleDiameterUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mViaPadDiameter_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mViaPadDiameterUnit_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of transient properties
          self.removeEBObserversOf_netWidth_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_viaHoleDiameter_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_viaPadDiameter_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_canRemove_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_netUsage_fromElementsOfSet (removedObjectSet)
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : NetClassInProject in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
            managedObject.mNetClassName_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mNetClassColor_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mNetWidth_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mNetWidthUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mViaHoleDiameter_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mViaHoleDiameterUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mViaPadDiameter_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mViaPadDiameterUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
        // self.addEBObserversOf_mNetClassName_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_mNetClassColor_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_mNetWidth_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_mNetWidthUnit_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_mViaHoleDiameter_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_mViaHoleDiameterUnit_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_mViaPadDiameter_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_mViaPadDiameterUnit_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_netWidth_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_viaHoleDiameter_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_viaPadDiameter_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_canRemove_toElementsOfSet (addedObjectSet)
        // self.addEBObserversOf_netUsage_toElementsOfSet (addedObjectSet)
        //--- Add observers of stored properties
          self.addEBObserversOf_mNetClassName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mNetClassColor_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mNetWidth_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mNetWidthUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mViaHoleDiameter_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mViaHoleDiameterUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mViaPadDiameter_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mViaPadDiameterUnit_toElementsOfSet (addedObjectSet)
        //--- Add observers of transient properties
          self.addEBObserversOf_netWidth_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_viaHoleDiameter_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_viaPadDiameter_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_canRemove_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_netUsage_toElementsOfSet (addedObjectSet)
        }
      //--- Notify observers
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [NetClassInProject] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [NetClassInProject]) { self.mValue = inValue }

  //····················································································································

  override var propval : [NetClassInProject] { return self.mValue }

  //····················································································································

  override var propset : Set <NetClassInProject> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [NetClassInProject]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : NetClassInProject) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : NetClassInProject) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
