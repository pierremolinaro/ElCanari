//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Object Controller ComponentSymbolInProject mComponentInSymbolController
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class Controller_ComponentSymbolInProject_mComponentInSymbolController : EBObject {
 
  //····················································································································
  //    Init
  //····················································································································

  override init () {
    super.init ()
    self.availablePackages_property.mReadModelFunction = { [weak self] in
      return self?.mModel?.availablePackages_property_selection ?? .empty
    }
    self.componentName_property.mReadModelFunction = { [weak self] in
      return self?.mModel?.componentName_property_selection ?? .empty
    }
    self.deviceName_property.mReadModelFunction = { [weak self] in
      return self?.mModel?.deviceName_property_selection ?? .empty
    }
    self.deviceSymbolDictionary_property.mReadModelFunction = { [weak self] in
      return self?.mModel?.deviceSymbolDictionary_property_selection ?? .empty
    }
    self.mComponentValue_property.mReadModelFunction = { [weak self] in
      return self?.mModel?.mComponentValue_property_selection ?? .empty
    }
    self.mComponentValue_property.mWriteModelFunction = { [weak self] (inValue : String) in
      self?.mModel?.mComponentValue = inValue
    }
    self.mComponentValue_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : String, windowForSheet : NSWindow?) in
      if let property = self?.mModel?.mComponentValue_property {
        return property.validateAndSetProp (candidateValue, windowForSheet: windowForSheet)
      }else{
        return false
      }
    }
    self.mNameIndex_property.mReadModelFunction = { [weak self] in
      return self?.mModel?.mNameIndex_property_selection ?? .empty
    }
    self.mNameIndex_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      self?.mModel?.mNameIndex = inValue
    }
    self.mNameIndex_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let property = self?.mModel?.mNameIndex_property {
        return property.validateAndSetProp (candidateValue, windowForSheet: windowForSheet)
      }else{
        return false
      }
    }
    self.mNamePrefix_property.mReadModelFunction = { [weak self] in
      return self?.mModel?.mNamePrefix_property_selection ?? .empty
    }
    self.mNamePrefix_property.mWriteModelFunction = { [weak self] (inValue : String) in
      self?.mModel?.mNamePrefix = inValue
    }
    self.mNamePrefix_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : String, windowForSheet : NSWindow?) in
      if let property = self?.mModel?.mNamePrefix_property {
        return property.validateAndSetProp (candidateValue, windowForSheet: windowForSheet)
      }else{
        return false
      }
    }
    self.placementInSchematics_property.mReadModelFunction = { [weak self] in
      return self?.mModel?.placementInSchematics_property_selection ?? .empty
    }
    self.selectedPackageName_property.mReadModelFunction = { [weak self] in
      return self?.mModel?.selectedPackageName_property_selection ?? .empty
    }
    self.unplacedSymbols_property.mReadModelFunction = { [weak self] in
      return self?.mModel?.unplacedSymbols_property_selection ?? .empty
    }
  }

  //····················································································································
  //   Observable atomic property: availablePackages
  //····················································································································

  let availablePackages_property = EBTransientProperty_StringArray ()

  var availablePackages_property_selection : EBSelection <StringArray> {
    return self.availablePackages_property.prop
  }

  //····················································································································
  //   Observable atomic property: componentName
  //····················································································································

  let componentName_property = EBTransientProperty_String ()

  var componentName_property_selection : EBSelection <String> {
    return self.componentName_property.prop
  }

  //····················································································································
  //   Observable atomic property: deviceName
  //····················································································································

  let deviceName_property = EBTransientProperty_String ()

  var deviceName_property_selection : EBSelection <String> {
    return self.deviceName_property.prop
  }

  //····················································································································
  //   Observable atomic property: deviceSymbolDictionary
  //····················································································································

  let deviceSymbolDictionary_property = EBTransientProperty_DeviceSymbolDictionary ()

  var deviceSymbolDictionary_property_selection : EBSelection <DeviceSymbolDictionary> {
    return self.deviceSymbolDictionary_property.prop
  }

  //····················································································································
  //   Observable atomic property: mComponentValue
  //····················································································································

  let mComponentValue_property = EBPropertyProxy_String ()

  var mComponentValue_property_selection : EBSelection <String> {
    return self.mComponentValue_property.prop
  }

  //····················································································································
  //   Observable atomic property: mNameIndex
  //····················································································································

  let mNameIndex_property = EBPropertyProxy_Int ()

  var mNameIndex_property_selection : EBSelection <Int> {
    return self.mNameIndex_property.prop
  }

  //····················································································································
  //   Observable atomic property: mNamePrefix
  //····················································································································

  let mNamePrefix_property = EBPropertyProxy_String ()

  var mNamePrefix_property_selection : EBSelection <String> {
    return self.mNamePrefix_property.prop
  }

  //····················································································································
  //   ToMany relationship: mSymbols
  //····················································································································

  let mSymbols_property = StoredArrayOf_ComponentSymbolInProject ()

  //····················································································································
  //   Observable atomic property: placementInSchematics
  //····················································································································

  let placementInSchematics_property = EBTransientProperty_String ()

  var placementInSchematics_property_selection : EBSelection <String> {
    return self.placementInSchematics_property.prop
  }

  //····················································································································
  //   Observable atomic property: selectedPackageName
  //····················································································································

  let selectedPackageName_property = EBTransientProperty_String ()

  var selectedPackageName_property_selection : EBSelection <String> {
    return self.selectedPackageName_property.prop
  }

  //····················································································································
  //   Observable atomic property: unplacedSymbols
  //····················································································································

  let unplacedSymbols_property = EBTransientProperty_StringTagArray ()

  var unplacedSymbols_property_selection : EBSelection <StringTagArray> {
    return self.unplacedSymbols_property.prop
  }

  //····················································································································
  //    Controller
  //····················································································································

  private var mModelController : EBSimpleController? = nil
  private var mBoundObjectController_mSymbols : EBSimpleController? = nil

  //····················································································································

  func bind_model (_ inToOneRelationship : ToOneRelationship_ComponentSymbolInProject_mComponent) {
    self.mModelController = EBSimpleController (
      observedObjects: [inToOneRelationship],
      callBack: { [weak self] in self?.modelDidChange (inToOneRelationship) }
    )
    self.mBoundObjectController_mSymbols = EBSimpleController (
      observedObjects: [self.mSymbols_property],
      callBack: { [weak self] in
        let objects = self?.mSymbols_property.propval ?? []
        //NSLog ("bound objects \(objects.count) \(self?.mModel)")
        self?.mModel?.mSymbols = objects
      }
    )
  }

  //····················································································································

  private func modelDidChange (_ inToOneRelationship : ToOneRelationship_ComponentSymbolInProject_mComponent) {
    self.mModel = inToOneRelationship.propval
    self.mSymbols_property.setProp (self.mModel?.mSymbols_property.propval ?? [])
  }

  //····················································································································

  func unbind_model () {
    self.mModelController?.unregister ()
    self.mModelController = nil
    self.mBoundObjectController_mSymbols?.unregister ()
    self.mBoundObjectController_mSymbols = nil
    self.mModel = nil
  }

  //····················································································································
  //    Model
  //····················································································································

  private var mModel : ComponentInProject? = nil {
    didSet {
      if self.mModel !== oldValue {
      //--- Atomic property availablePackages
        oldValue?.availablePackages_property.removeEBObserver (self.availablePackages_property)
        self.mModel?.availablePackages_property.addEBObserver (self.availablePackages_property)
      //--- Atomic property componentName
        oldValue?.componentName_property.removeEBObserver (self.componentName_property)
        self.mModel?.componentName_property.addEBObserver (self.componentName_property)
      //--- Atomic property deviceName
        oldValue?.deviceName_property.removeEBObserver (self.deviceName_property)
        self.mModel?.deviceName_property.addEBObserver (self.deviceName_property)
      //--- Atomic property deviceSymbolDictionary
        oldValue?.deviceSymbolDictionary_property.removeEBObserver (self.deviceSymbolDictionary_property)
        self.mModel?.deviceSymbolDictionary_property.addEBObserver (self.deviceSymbolDictionary_property)
      //--- Atomic property mComponentValue
        oldValue?.mComponentValue_property.removeEBObserver (self.mComponentValue_property)
        self.mModel?.mComponentValue_property.addEBObserver (self.mComponentValue_property)
      //--- Atomic property mNameIndex
        oldValue?.mNameIndex_property.removeEBObserver (self.mNameIndex_property)
        self.mModel?.mNameIndex_property.addEBObserver (self.mNameIndex_property)
      //--- Atomic property mNamePrefix
        oldValue?.mNamePrefix_property.removeEBObserver (self.mNamePrefix_property)
        self.mModel?.mNamePrefix_property.addEBObserver (self.mNamePrefix_property)
      //--- ToMany relationship mSymbols
        if let controller = self.mModelController {
          oldValue?.mSymbols_property.removeEBObserver (controller)
          self.mModel?.mSymbols_property.addEBObserver (controller)
        }
      //--- Atomic property placementInSchematics
        oldValue?.placementInSchematics_property.removeEBObserver (self.placementInSchematics_property)
        self.mModel?.placementInSchematics_property.addEBObserver (self.placementInSchematics_property)
      //--- Atomic property selectedPackageName
        oldValue?.selectedPackageName_property.removeEBObserver (self.selectedPackageName_property)
        self.mModel?.selectedPackageName_property.addEBObserver (self.selectedPackageName_property)
      //--- Atomic property unplacedSymbols
        oldValue?.unplacedSymbols_property.removeEBObserver (self.unplacedSymbols_property)
        self.mModel?.unplacedSymbols_property.addEBObserver (self.unplacedSymbols_property)
      }
    }
  }

  //····················································································································
  //    Explorer
  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

