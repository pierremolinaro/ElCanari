//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mPinName : class {
  var mPinName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mPinX : class {
  var mPinX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mPinY : class {
  var mPinY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mXName : class {
  var mXName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mYName : class {
  var mYName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mNameHorizontalAlignment : class {
  var mNameHorizontalAlignment : HorizontalAlignment { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mPinNameIsDisplayedInSchematics : class {
  var mPinNameIsDisplayedInSchematics : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mXNumber : class {
  var mXNumber : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mYNumber : class {
  var mYNumber : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mNumberHorizontalAlignment : class {
  var mNumberHorizontalAlignment : HorizontalAlignment { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class DevicePinInProject : EBManagedObject,
         DevicePinInProject_mPinName,
         DevicePinInProject_mPinX,
         DevicePinInProject_mPinY,
         DevicePinInProject_mXName,
         DevicePinInProject_mYName,
         DevicePinInProject_mNameHorizontalAlignment,
         DevicePinInProject_mPinNameIsDisplayedInSchematics,
         DevicePinInProject_mXNumber,
         DevicePinInProject_mYNumber,
         DevicePinInProject_mNumberHorizontalAlignment {

  //····················································································································
  //   Atomic property: mPinName
  //····················································································································

  var mPinName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mPinName : String {
    get { return self.mPinName_property.propval }
    set { self.mPinName_property.setProp (newValue) }
  }

  //····················································································································

  var mPinName_property_selection : EBSelection <String> { return self.mPinName_property.prop }

  //····················································································································
  //   Atomic property: mPinX
  //····················································································································

  var mPinX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mPinX : Int {
    get { return self.mPinX_property.propval }
    set { self.mPinX_property.setProp (newValue) }
  }

  //····················································································································

  var mPinX_property_selection : EBSelection <Int> { return self.mPinX_property.prop }

  //····················································································································
  //   Atomic property: mPinY
  //····················································································································

  var mPinY_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mPinY : Int {
    get { return self.mPinY_property.propval }
    set { self.mPinY_property.setProp (newValue) }
  }

  //····················································································································

  var mPinY_property_selection : EBSelection <Int> { return self.mPinY_property.prop }

  //····················································································································
  //   Atomic property: mXName
  //····················································································································

  var mXName_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mXName : Int {
    get { return self.mXName_property.propval }
    set { self.mXName_property.setProp (newValue) }
  }

  //····················································································································

  var mXName_property_selection : EBSelection <Int> { return self.mXName_property.prop }

  //····················································································································
  //   Atomic property: mYName
  //····················································································································

  var mYName_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mYName : Int {
    get { return self.mYName_property.propval }
    set { self.mYName_property.setProp (newValue) }
  }

  //····················································································································

  var mYName_property_selection : EBSelection <Int> { return self.mYName_property.prop }

  //····················································································································
  //   Atomic property: mNameHorizontalAlignment
  //····················································································································

  var mNameHorizontalAlignment_property = EBStoredProperty_HorizontalAlignment (defaultValue: HorizontalAlignment.center)

  //····················································································································

  var mNameHorizontalAlignment : HorizontalAlignment {
    get { return self.mNameHorizontalAlignment_property.propval }
    set { self.mNameHorizontalAlignment_property.setProp (newValue) }
  }

  //····················································································································

  var mNameHorizontalAlignment_property_selection : EBSelection <HorizontalAlignment> { return self.mNameHorizontalAlignment_property.prop }

  //····················································································································
  //   Atomic property: mPinNameIsDisplayedInSchematics
  //····················································································································

  var mPinNameIsDisplayedInSchematics_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var mPinNameIsDisplayedInSchematics : Bool {
    get { return self.mPinNameIsDisplayedInSchematics_property.propval }
    set { self.mPinNameIsDisplayedInSchematics_property.setProp (newValue) }
  }

  //····················································································································

  var mPinNameIsDisplayedInSchematics_property_selection : EBSelection <Bool> { return self.mPinNameIsDisplayedInSchematics_property.prop }

  //····················································································································
  //   Atomic property: mXNumber
  //····················································································································

  var mXNumber_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mXNumber : Int {
    get { return self.mXNumber_property.propval }
    set { self.mXNumber_property.setProp (newValue) }
  }

  //····················································································································

  var mXNumber_property_selection : EBSelection <Int> { return self.mXNumber_property.prop }

  //····················································································································
  //   Atomic property: mYNumber
  //····················································································································

  var mYNumber_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mYNumber : Int {
    get { return self.mYNumber_property.propval }
    set { self.mYNumber_property.setProp (newValue) }
  }

  //····················································································································

  var mYNumber_property_selection : EBSelection <Int> { return self.mYNumber_property.prop }

  //····················································································································
  //   Atomic property: mNumberHorizontalAlignment
  //····················································································································

  var mNumberHorizontalAlignment_property = EBStoredProperty_HorizontalAlignment (defaultValue: HorizontalAlignment.center)

  //····················································································································

  var mNumberHorizontalAlignment : HorizontalAlignment {
    get { return self.mNumberHorizontalAlignment_property.propval }
    set { self.mNumberHorizontalAlignment_property.setProp (newValue) }
  }

  //····················································································································

  var mNumberHorizontalAlignment_property_selection : EBSelection <HorizontalAlignment> { return self.mNumberHorizontalAlignment_property.prop }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mPinName
    self.mPinName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mPinX
    self.mPinX_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mPinY
    self.mPinY_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mXName
    self.mXName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mYName
    self.mYName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mNameHorizontalAlignment
    self.mNameHorizontalAlignment_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mPinNameIsDisplayedInSchematics
    self.mPinNameIsDisplayedInSchematics_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mXNumber
    self.mXNumber_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mYNumber
    self.mYNumber_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mNumberHorizontalAlignment
    self.mNumberHorizontalAlignment_property.ebUndoManager = self.ebUndoManager
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mPinName",
      idx:self.mPinName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mPinName_property.mObserverExplorer,
      valueExplorer:&self.mPinName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPinX",
      idx:self.mPinX_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mPinX_property.mObserverExplorer,
      valueExplorer:&self.mPinX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPinY",
      idx:self.mPinY_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mPinY_property.mObserverExplorer,
      valueExplorer:&self.mPinY_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mXName",
      idx:self.mXName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mXName_property.mObserverExplorer,
      valueExplorer:&self.mXName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mYName",
      idx:self.mYName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mYName_property.mObserverExplorer,
      valueExplorer:&self.mYName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNameHorizontalAlignment",
      idx:self.mNameHorizontalAlignment_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mNameHorizontalAlignment_property.mObserverExplorer,
      valueExplorer:&self.mNameHorizontalAlignment_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPinNameIsDisplayedInSchematics",
      idx:self.mPinNameIsDisplayedInSchematics_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mPinNameIsDisplayedInSchematics_property.mObserverExplorer,
      valueExplorer:&self.mPinNameIsDisplayedInSchematics_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mXNumber",
      idx:self.mXNumber_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mXNumber_property.mObserverExplorer,
      valueExplorer:&self.mXNumber_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mYNumber",
      idx:self.mYNumber_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mYNumber_property.mObserverExplorer,
      valueExplorer:&self.mYNumber_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNumberHorizontalAlignment",
      idx:self.mNumberHorizontalAlignment_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mNumberHorizontalAlignment_property.mObserverExplorer,
      valueExplorer:&self.mNumberHorizontalAlignment_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mPinName
    self.mPinName_property.mObserverExplorer = nil
    self.mPinName_property.mValueExplorer = nil
  //--- Atomic property: mPinX
    self.mPinX_property.mObserverExplorer = nil
    self.mPinX_property.mValueExplorer = nil
  //--- Atomic property: mPinY
    self.mPinY_property.mObserverExplorer = nil
    self.mPinY_property.mValueExplorer = nil
  //--- Atomic property: mXName
    self.mXName_property.mObserverExplorer = nil
    self.mXName_property.mValueExplorer = nil
  //--- Atomic property: mYName
    self.mYName_property.mObserverExplorer = nil
    self.mYName_property.mValueExplorer = nil
  //--- Atomic property: mNameHorizontalAlignment
    self.mNameHorizontalAlignment_property.mObserverExplorer = nil
    self.mNameHorizontalAlignment_property.mValueExplorer = nil
  //--- Atomic property: mPinNameIsDisplayedInSchematics
    self.mPinNameIsDisplayedInSchematics_property.mObserverExplorer = nil
    self.mPinNameIsDisplayedInSchematics_property.mValueExplorer = nil
  //--- Atomic property: mXNumber
    self.mXNumber_property.mObserverExplorer = nil
    self.mXNumber_property.mValueExplorer = nil
  //--- Atomic property: mYNumber
    self.mYNumber_property.mObserverExplorer = nil
    self.mYNumber_property.mValueExplorer = nil
  //--- Atomic property: mNumberHorizontalAlignment
    self.mNumberHorizontalAlignment_property.mObserverExplorer = nil
    self.mNumberHorizontalAlignment_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mPinName
    self.mPinName_property.storeIn (dictionary: ioDictionary, forKey:"mPinName")
  //--- Atomic property: mPinX
    self.mPinX_property.storeIn (dictionary: ioDictionary, forKey:"mPinX")
  //--- Atomic property: mPinY
    self.mPinY_property.storeIn (dictionary: ioDictionary, forKey:"mPinY")
  //--- Atomic property: mXName
    self.mXName_property.storeIn (dictionary: ioDictionary, forKey:"mXName")
  //--- Atomic property: mYName
    self.mYName_property.storeIn (dictionary: ioDictionary, forKey:"mYName")
  //--- Atomic property: mNameHorizontalAlignment
    self.mNameHorizontalAlignment_property.storeIn (dictionary: ioDictionary, forKey:"mNameHorizontalAlignment")
  //--- Atomic property: mPinNameIsDisplayedInSchematics
    self.mPinNameIsDisplayedInSchematics_property.storeIn (dictionary: ioDictionary, forKey:"mPinNameIsDisplayedInSchematics")
  //--- Atomic property: mXNumber
    self.mXNumber_property.storeIn (dictionary: ioDictionary, forKey:"mXNumber")
  //--- Atomic property: mYNumber
    self.mYNumber_property.storeIn (dictionary: ioDictionary, forKey:"mYNumber")
  //--- Atomic property: mNumberHorizontalAlignment
    self.mNumberHorizontalAlignment_property.storeIn (dictionary: ioDictionary, forKey:"mNumberHorizontalAlignment")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mPinName
    self.mPinName_property.readFrom (dictionary: inDictionary, forKey:"mPinName")
  //--- Atomic property: mPinX
    self.mPinX_property.readFrom (dictionary: inDictionary, forKey:"mPinX")
  //--- Atomic property: mPinY
    self.mPinY_property.readFrom (dictionary: inDictionary, forKey:"mPinY")
  //--- Atomic property: mXName
    self.mXName_property.readFrom (dictionary: inDictionary, forKey:"mXName")
  //--- Atomic property: mYName
    self.mYName_property.readFrom (dictionary: inDictionary, forKey:"mYName")
  //--- Atomic property: mNameHorizontalAlignment
    self.mNameHorizontalAlignment_property.readFrom (dictionary: inDictionary, forKey:"mNameHorizontalAlignment")
  //--- Atomic property: mPinNameIsDisplayedInSchematics
    self.mPinNameIsDisplayedInSchematics_property.readFrom (dictionary: inDictionary, forKey:"mPinNameIsDisplayedInSchematics")
  //--- Atomic property: mXNumber
    self.mXNumber_property.readFrom (dictionary: inDictionary, forKey:"mXNumber")
  //--- Atomic property: mYNumber
    self.mYNumber_property.readFrom (dictionary: inDictionary, forKey:"mYNumber")
  //--- Atomic property: mNumberHorizontalAlignment
    self.mNumberHorizontalAlignment_property.readFrom (dictionary: inDictionary, forKey:"mNumberHorizontalAlignment")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_DevicePinInProject : ReadOnlyAbstractArrayProperty <DevicePinInProject> {

  //····················································································································
  //   Observers of 'mPinName' stored property
  //····················································································································

  private var mObserversOf_mPinName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPinName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPinName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPinName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPinName_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mPinName.apply ( {(_ observer : EBEvent) in
        managedObject.mPinName_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPinName_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mPinName.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPinName_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mPinX' stored property
  //····················································································································

  private var mObserversOf_mPinX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPinX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPinX.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPinX.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPinX_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mPinX.apply ( {(_ observer : EBEvent) in
        managedObject.mPinX_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPinX_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mPinX.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPinX_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mPinY' stored property
  //····················································································································

  private var mObserversOf_mPinY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPinY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPinY.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPinY.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPinY_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mPinY.apply ( {(_ observer : EBEvent) in
        managedObject.mPinY_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPinY_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mPinY.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPinY_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mXName' stored property
  //····················································································································

  private var mObserversOf_mXName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mXName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mXName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mXName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mXName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mXName_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mXName.apply ( {(_ observer : EBEvent) in
        managedObject.mXName_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mXName_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mXName.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mXName_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mYName' stored property
  //····················································································································

  private var mObserversOf_mYName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mYName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mYName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mYName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mYName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mYName_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mYName.apply ( {(_ observer : EBEvent) in
        managedObject.mYName_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mYName_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mYName.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mYName_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mNameHorizontalAlignment' stored property
  //····················································································································

  private var mObserversOf_mNameHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNameHorizontalAlignment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNameHorizontalAlignment.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameHorizontalAlignment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNameHorizontalAlignment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNameHorizontalAlignment.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameHorizontalAlignment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNameHorizontalAlignment_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNameHorizontalAlignment.apply ( {(_ observer : EBEvent) in
        managedObject.mNameHorizontalAlignment_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNameHorizontalAlignment_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mNameHorizontalAlignment.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNameHorizontalAlignment_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mPinNameIsDisplayedInSchematics' stored property
  //····················································································································

  private var mObserversOf_mPinNameIsDisplayedInSchematics = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPinNameIsDisplayedInSchematics (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPinNameIsDisplayedInSchematics.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinNameIsDisplayedInSchematics_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinNameIsDisplayedInSchematics (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPinNameIsDisplayedInSchematics.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinNameIsDisplayedInSchematics_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPinNameIsDisplayedInSchematics_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mPinNameIsDisplayedInSchematics.apply ( {(_ observer : EBEvent) in
        managedObject.mPinNameIsDisplayedInSchematics_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPinNameIsDisplayedInSchematics_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mPinNameIsDisplayedInSchematics.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPinNameIsDisplayedInSchematics_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mXNumber' stored property
  //····················································································································

  private var mObserversOf_mXNumber = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mXNumber (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mXNumber.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXNumber_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mXNumber (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mXNumber.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXNumber_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mXNumber_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mXNumber.apply ( {(_ observer : EBEvent) in
        managedObject.mXNumber_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mXNumber_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mXNumber.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mXNumber_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mYNumber' stored property
  //····················································································································

  private var mObserversOf_mYNumber = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mYNumber (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mYNumber.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYNumber_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mYNumber (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mYNumber.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYNumber_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mYNumber_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mYNumber.apply ( {(_ observer : EBEvent) in
        managedObject.mYNumber_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mYNumber_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mYNumber.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mYNumber_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mNumberHorizontalAlignment' stored property
  //····················································································································

  private var mObserversOf_mNumberHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNumberHorizontalAlignment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNumberHorizontalAlignment.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNumberHorizontalAlignment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNumberHorizontalAlignment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNumberHorizontalAlignment.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNumberHorizontalAlignment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNumberHorizontalAlignment_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNumberHorizontalAlignment.apply ( {(_ observer : EBEvent) in
        managedObject.mNumberHorizontalAlignment_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNumberHorizontalAlignment_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mNumberHorizontalAlignment.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNumberHorizontalAlignment_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_DevicePinInProject : ReadOnlyArrayOf_DevicePinInProject {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [DevicePinInProject] > > = nil

  //····················································································································

  override var propset : Set <DevicePinInProject> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [DevicePinInProject] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [DevicePinInProject] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <DevicePinInProject> ()

  //····················································································································

  private var mCachedValue : EBSelection < [DevicePinInProject] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      self.mCachedValue = unwrappedComputeFunction ()
      let newSet : Set <DevicePinInProject>
      switch self.mCachedValue! {
      case .multiple, .empty :
        newSet = Set <DevicePinInProject> ()
      case .single (let array) :
       newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_mPinName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mPinX_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mPinY_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mXName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mYName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mNameHorizontalAlignment_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mPinNameIsDisplayedInSchematics_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mXNumber_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mYNumber_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mNumberHorizontalAlignment_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_mPinName_toElementsOfSet (addedSet)
      self.addEBObserversOf_mPinX_toElementsOfSet (addedSet)
      self.addEBObserversOf_mPinY_toElementsOfSet (addedSet)
      self.addEBObserversOf_mXName_toElementsOfSet (addedSet)
      self.addEBObserversOf_mYName_toElementsOfSet (addedSet)
      self.addEBObserversOf_mNameHorizontalAlignment_toElementsOfSet (addedSet)
      self.addEBObserversOf_mPinNameIsDisplayedInSchematics_toElementsOfSet (addedSet)
      self.addEBObserversOf_mXNumber_toElementsOfSet (addedSet)
      self.addEBObserversOf_mYNumber_toElementsOfSet (addedSet)
      self.addEBObserversOf_mNumberHorizontalAlignment_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_DevicePinInProject : ReadOnlyArrayOf_DevicePinInProject {

  //····················································································································
 
  func setProp (_ value :  [DevicePinInProject]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_DevicePinInProject : ReadWriteArrayOf_DevicePinInProject, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : DevicePinInProject?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [DevicePinInProject] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "DevicePinInProject") as? DevicePinInProject {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <DevicePinInProject> ()
  private var mValue = [DevicePinInProject] () {
    didSet {
     // self.postEvent ()
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.setOppositeRelationship? (nil)
            managedObject.mPinName_property.mSetterDelegate = nil
            managedObject.mPinX_property.mSetterDelegate = nil
            managedObject.mPinY_property.mSetterDelegate = nil
            managedObject.mXName_property.mSetterDelegate = nil
            managedObject.mYName_property.mSetterDelegate = nil
            managedObject.mNameHorizontalAlignment_property.mSetterDelegate = nil
            managedObject.mPinNameIsDisplayedInSchematics_property.mSetterDelegate = nil
            managedObject.mXNumber_property.mSetterDelegate = nil
            managedObject.mYNumber_property.mSetterDelegate = nil
            managedObject.mNumberHorizontalAlignment_property.mSetterDelegate = nil
          }
          self.removeEBObserversOf_mPinName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mPinX_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mPinY_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mXName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mYName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mNameHorizontalAlignment_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mPinNameIsDisplayedInSchematics_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mXNumber_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mYNumber_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mNumberHorizontalAlignment_fromElementsOfSet (removedObjectSet)
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : DevicePinInProject in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
            managedObject.mPinName_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mPinX_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mPinY_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mXName_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mYName_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mNameHorizontalAlignment_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mPinNameIsDisplayedInSchematics_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mXNumber_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mYNumber_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mNumberHorizontalAlignment_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
          self.addEBObserversOf_mPinName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mPinX_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mPinY_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mXName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mYName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mNameHorizontalAlignment_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mPinNameIsDisplayedInSchematics_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mXNumber_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mYNumber_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mNumberHorizontalAlignment_toElementsOfSet (addedObjectSet)
        }
      //--- Notify observers
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [DevicePinInProject] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [DevicePinInProject]) { self.mValue = inValue }

  //····················································································································

  override var propval : [DevicePinInProject] { return self.mValue }

  //····················································································································

  override var propset : Set <DevicePinInProject> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [DevicePinInProject]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : DevicePinInProject) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : DevicePinInProject) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
