//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NetInProject_mNetName : class {
  var mNetName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: NetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class NetInProject : EBManagedObject,
         NetInProject_mNetName {

  //····················································································································
  //   Atomic property: mNetName
  //····················································································································

  let mNetName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mNetName : String {
    get { return self.mNetName_property.propval }
    set { self.mNetName_property.setProp (newValue) }
  }

  //····················································································································

  var mNetName_property_selection : EBSelection <String> { return self.mNetName_property.prop }

  //····················································································································
  //   To many property: mWires
  //····················································································································

  let mWires_property = StoredArrayOf_WireInSchematics ()

  //····················································································································

  var mWires_property_selection : EBSelection < [WireInSchematics] > {
    return self.mWires_property.prop
  }

  //····················································································································

  var mWires : [WireInSchematics] {
    get { return self.mWires_property.propval }
    set { self.mWires_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mPoints
  //····················································································································

  let mPoints_property = StoredArrayOf_PointInSchematics ()

  //····················································································································

  var mPoints_property_selection : EBSelection < [PointInSchematics] > {
    return self.mPoints_property.prop
  }

  //····················································································································

  var mPoints : [PointInSchematics] {
    get { return self.mPoints_property.propval }
    set { self.mPoints_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: mNetClass
  //····················································································································

  let mNetClass_property = ToOneRelationship_NetInProject_mNetClass ()

  //····················································································································

  var mNetClass_property_selection : EBSelection <NetClassInProject?> {
    return .single (self.mNetClass_property.propval)
  }

  //····················································································································

  var mNetClass : NetClassInProject? {
    get { return self.mNetClass_property.propval }
    set { self.mNetClass_property.setProp (newValue) }
  }

  //····················································································································

  var mNetClass_none : ToOneRelationship_NetInProject_mNetClass { return self.mNetClass_property }

  //····················································································································

  var mNetClass_none_selection : EBSelection <Bool> {
    return .single (self.mNetClass_property.propval == nil)
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mNetName
    self.mNetName_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mWires (has opposite relationship)
    self.mWires_property.ebUndoManager = self.ebUndoManager
    self.mWires_property.setOppositeRelationship = { [weak self] (_ inManagedObject :WireInSchematics?) in
      inManagedObject?.mNet_property.setProp (self)
    }
  //--- To many property: mPoints (has opposite relationship)
    self.mPoints_property.ebUndoManager = self.ebUndoManager
    self.mPoints_property.setOppositeRelationship = { [weak self] (_ inManagedObject :PointInSchematics?) in
      inManagedObject?.mNet_property.setProp (self)
    }
  //--- To one property: mNetClass
    self.mNetClass_property.owner = self
  //--- Install undoers and opposite setter for relationships
    self.mWires_property.setOppositeRelationship = { [weak self] (_ inManagedObject : WireInSchematics) in
      if let me = self {
        inManagedObject.mNet_property.setProp (me)
      }
    }
    self.mWires_property.resetOppositeRelationship = { (_ inManagedObject : WireInSchematics) in
      inManagedObject.mNet_property.setProp (nil)
    }
    self.mPoints_property.setOppositeRelationship = { [weak self] (_ inManagedObject : PointInSchematics) in
      if let me = self {
        inManagedObject.mNet_property.setProp (me)
      }
    }
    self.mPoints_property.resetOppositeRelationship = { (_ inManagedObject : PointInSchematics) in
      inManagedObject.mNet_property.setProp (nil)
    }
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
 //   self.mWires_property.setOppositeRelationship = nil
 //   self.mPoints_property.setOppositeRelationship = nil
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mNetName",
      idx:self.mNetName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mNetName_property.mObserverExplorer,
      valueExplorer:&self.mNetName_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "mWires",
      idx:mWires_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mWires_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mPoints",
      idx:mPoints_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mPoints_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "mNetClass",
      idx:self.mNetClass_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mNetClass_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mNetName
    self.mNetName_property.mObserverExplorer = nil
    self.mNetName_property.mValueExplorer = nil
  //--- To many property: mWires
    self.mWires_property.mValueExplorer = nil
  //--- To many property: mPoints
    self.mPoints_property.mValueExplorer = nil
  //--- To one property: mNetClass
    self.mNetClass_property.mObserverExplorer = nil
    self.mNetClass_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mWires_property.setProp ([])
    self.mPoints_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mNetClass_property.setProp (nil)
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mNetName
    self.mNetName_property.storeIn (dictionary: ioDictionary, forKey:"mNetName")
  //--- To many property: mWires
    self.store (
      managedObjectArray: self.mWires_property.propval,
      relationshipName: "mWires",
      intoDictionary: ioDictionary
    )
  //--- To many property: mPoints
    self.store (
      managedObjectArray: self.mPoints_property.propval,
      relationshipName: "mPoints",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mWires
    self.mWires_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mWires",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [WireInSchematics])
  //--- To many property: mPoints
    self.mPoints_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mPoints",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [PointInSchematics])
  //--- To one property: mNetClass
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mNetClass",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? NetClassInProject {
        self.mNetClass_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mNetName
    self.mNetName_property.readFrom (dictionary: inDictionary, forKey:"mNetName")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mWires
    for managedObject in self.mWires_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mPoints
    for managedObject in self.mPoints_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mNetClass
    if let managedObject = self.mNetClass_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mWires
    for managedObject in self.mWires_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mPoints
    for managedObject in self.mPoints_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mNetClass
    if let managedObject = self.mNetClass_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_NetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_NetInProject : ReadOnlyAbstractArrayProperty <NetInProject> {

  //····················································································································
  //   Observers of 'mNetName' stored property
  //····················································································································

  private var mObserversOf_mNetName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNetName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNetName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNetName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNetName_toElementsOfSet (_ inSet : Set<NetInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNetName.apply { (_ observer : EBEvent) in
        managedObject.mNetName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNetName_fromElementsOfSet (_ inSet : Set<NetInProject>) {
    self.mObserversOf_mNetName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNetName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_NetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_NetInProject : ReadOnlyArrayOf_NetInProject {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [NetInProject] > > = nil

  //····················································································································

  override var propset : Set <NetInProject> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [NetInProject] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [NetInProject] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  private var mSet = Set <NetInProject> ()

  //····················································································································

  private var mCachedValue : EBSelection < [NetInProject] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      let cachedValue = unwrappedComputeFunction ()
      self.mCachedValue = cachedValue
      let newSet : Set <NetInProject>
      switch cachedValue {
      case .multiple, .empty :
        newSet = Set <NetInProject> ()
      case .single (let array) :
        newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_mNetName_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_mNetName_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: NetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_NetInProject : ReadOnlyArrayOf_NetInProject {

  //····················································································································
 
  func setProp (_ value :  [NetInProject]) { } // Abstract method
  
 //····················································································································

  private var mProxyArray = [ProxyArrayOf_NetInProject] ()

  //····················································································································

  func attachProxy (_ inProxy : ProxyArrayOf_NetInProject) {
    self.mProxyArray.append (inProxy)
    inProxy.updateProxy ()
    self.postEvent ()
  }

  //····················································································································

  func detachProxy (_ inProxy : ProxyArrayOf_NetInProject) {
    if let idx = self.mProxyArray.firstIndex(of: inProxy) {
      self.mProxyArray.remove (at: idx)
      self.postEvent ()
    }
  }

  //····················································································································

  internal func propagateProxyUpdate () {
    for proxy in self.mProxyArray {
      proxy.updateProxy ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_NetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_NetInProject : ReadWriteArrayOf_NetInProject {

   //····················································································································

  private var mModel : ReadWriteArrayOf_NetInProject? = nil

  //····················································································································

  private var mInternalValue : EBSelection < [NetInProject] > = .empty {
    didSet {
      if self.mInternalValue != oldValue {
        switch self.mInternalValue {
        case .empty, .multiple :
          self.mCurrentObjectSet = []
        case .single (let v) :
          self.mCurrentObjectSet = Set (v)
        }
        self.propagateProxyUpdate ()
      }
    }
  }

  //····················································································································

  private var mCurrentObjectSet = Set <NetInProject> () {
    didSet {
      if self.mCurrentObjectSet != oldValue {
      //--- Add observers from removed objects
        let removedObjectSet = oldValue.subtracting (self.mCurrentObjectSet)
        self.removeEBObserversOf_mNetName_fromElementsOfSet (removedObjectSet) // Stored property
      //--- Add observers to added objects
        let addedObjectSet = self.mCurrentObjectSet.subtracting (oldValue)
        self.addEBObserversOf_mNetName_toElementsOfSet (addedObjectSet) // Stored property
      //---
        self.postEvent ()
      }
    }
  }

  //····················································································································

  func bind (_ inModel : ReadWriteArrayOf_NetInProject) {
    self.unbind ()
    self.mModel = inModel
    inModel.attachProxy (self)
  }

  //····················································································································

  func unbind () {
    if let model = self.mModel {
      model.detachProxy (self)
      self.mModel = nil
    }
  }

  //····················································································································

  func updateProxy () {
    if let model = self.mModel {
      self.mInternalValue = model.prop
    }else{
      self.mInternalValue = .empty
    }
  }

  //····················································································································

  override func setProp (_ inArrayValue :  [NetInProject]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [NetInProject] > {
    return self.mInternalValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: NetInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_NetInProject : ReadWriteArrayOf_NetInProject, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : NetInProject) -> Void > = nil
  var resetOppositeRelationship : Optional < (_ inManagedObject : NetInProject) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [NetInProject] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "NetInProject") as? NetInProject {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <NetInProject> ()
  private var mValue = [NetInProject] () {
    didSet {
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.resetOppositeRelationship? (managedObject)
            managedObject.mNetName_property.mSetterDelegate = nil
          }
        //--- Remove observers of stored properties
          self.removeEBObserversOf_mNetName_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of transient properties
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : NetInProject in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
            managedObject.mNetName_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
        //--- Add observers of stored properties
          self.addEBObserversOf_mNetName_toElementsOfSet (addedObjectSet)
        //--- Add observers of transient properties
        }
      //--- Notify observers
        self.propagateProxyUpdate ()
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [NetInProject] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [NetInProject]) { self.mValue = inValue }

  //····················································································································

  override var propval : [NetInProject] { return self.mValue }

  //····················································································································

  override var propset : Set <NetInProject> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [NetInProject]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : NetInProject) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : NetInProject) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: mNetClass
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_NetInProject_mNetClass : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : NetInProject? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  private var mValue : NetClassInProject? {
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.ebUndoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        oldValue?.mNets_property.remove (unwrappedOwner)
      //--- Set new opposite relation ship
        self.mValue?.mNets_property.add (unwrappedOwner)
      //--- Remove property observers of old object
        oldValue?.canRemove_property.removeEBObserversFrom (&self.mObserversOf_canRemove)
        oldValue?.mNetClassColor_property.removeEBObserversFrom (&self.mObserversOf_mNetClassColor)
        oldValue?.mNetClassName_property.removeEBObserversFrom (&self.mObserversOf_mNetClassName)
        oldValue?.mNetWidth_property.removeEBObserversFrom (&self.mObserversOf_mNetWidth)
        oldValue?.mNetWidthUnit_property.removeEBObserversFrom (&self.mObserversOf_mNetWidthUnit)
        oldValue?.mNets_property.removeEBObserversFrom (&self.mObserversOf_mNets)
        oldValue?.mViaHoleDiameter_property.removeEBObserversFrom (&self.mObserversOf_mViaHoleDiameter)
        oldValue?.mViaHoleDiameterUnit_property.removeEBObserversFrom (&self.mObserversOf_mViaHoleDiameterUnit)
        oldValue?.mViaPadDiameter_property.removeEBObserversFrom (&self.mObserversOf_mViaPadDiameter)
        oldValue?.mViaPadDiameterUnit_property.removeEBObserversFrom (&self.mObserversOf_mViaPadDiameterUnit)
        oldValue?.netUsage_property.removeEBObserversFrom (&self.mObserversOf_netUsage)
        oldValue?.netWidth_property.removeEBObserversFrom (&self.mObserversOf_netWidth)
        oldValue?.viaHoleDiameter_property.removeEBObserversFrom (&self.mObserversOf_viaHoleDiameter)
        oldValue?.viaPadDiameter_property.removeEBObserversFrom (&self.mObserversOf_viaPadDiameter)
      //--- Add property observers to new object
        self.mValue?.canRemove_property.addEBObserversFrom (&self.mObserversOf_canRemove)
        self.mValue?.mNetClassColor_property.addEBObserversFrom (&self.mObserversOf_mNetClassColor)
        self.mValue?.mNetClassName_property.addEBObserversFrom (&self.mObserversOf_mNetClassName)
        self.mValue?.mNetWidth_property.addEBObserversFrom (&self.mObserversOf_mNetWidth)
        self.mValue?.mNetWidthUnit_property.addEBObserversFrom (&self.mObserversOf_mNetWidthUnit)
        self.mValue?.mNets_property.addEBObserversFrom (&self.mObserversOf_mNets)
        self.mValue?.mViaHoleDiameter_property.addEBObserversFrom (&self.mObserversOf_mViaHoleDiameter)
        self.mValue?.mViaHoleDiameterUnit_property.addEBObserversFrom (&self.mObserversOf_mViaHoleDiameterUnit)
        self.mValue?.mViaPadDiameter_property.addEBObserversFrom (&self.mObserversOf_mViaPadDiameter)
        self.mValue?.mViaPadDiameterUnit_property.addEBObserversFrom (&self.mObserversOf_mViaPadDiameterUnit)
        self.mValue?.netUsage_property.addEBObserversFrom (&self.mObserversOf_netUsage)
        self.mValue?.netWidth_property.addEBObserversFrom (&self.mObserversOf_netWidth)
        self.mValue?.viaHoleDiameter_property.addEBObserversFrom (&self.mObserversOf_viaHoleDiameter)
        self.mValue?.viaPadDiameter_property.addEBObserversFrom (&self.mObserversOf_viaPadDiameter)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : NetClassInProject? { return self.mValue }

  var prop : EBSelection <NetClassInProject?> { return .single (self.mValue) }

  func setProp (_ value : NetClassInProject?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : NetClassInProject?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : NetClassInProject) {
    if self.mValue === object {
      self.mValue = nil
    }
  }

  //····················································································································
  //   Observable atomic property: canRemove
  //····················································································································

  private var mObserversOf_canRemove = EBWeakEventSet ()

  //····················································································································

  var canRemove_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.canRemove_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_canRemove (_ inObserver : EBEvent) {
    self.mObserversOf_canRemove.insert (inObserver)
    if let object = self.propval {
      object.canRemove_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_canRemove (_ inObserver : EBEvent) {
    self.mObserversOf_canRemove.remove (inObserver)
    if let object = self.propval {
      object.canRemove_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mNetClassColor
  //····················································································································

  private var mObserversOf_mNetClassColor = EBWeakEventSet ()

  //····················································································································

  var mNetClassColor_property_selection : EBSelection <NSColor?> {
    if let model = self.propval {
      switch (model.mNetClassColor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mNetClassColor (_ inObserver : EBEvent) {
    self.mObserversOf_mNetClassColor.insert (inObserver)
    if let object = self.propval {
      object.mNetClassColor_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetClassColor (_ inObserver : EBEvent) {
    self.mObserversOf_mNetClassColor.remove (inObserver)
    if let object = self.propval {
      object.mNetClassColor_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mNetClassName
  //····················································································································

  private var mObserversOf_mNetClassName = EBWeakEventSet ()

  //····················································································································

  var mNetClassName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mNetClassName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mNetClassName (_ inObserver : EBEvent) {
    self.mObserversOf_mNetClassName.insert (inObserver)
    if let object = self.propval {
      object.mNetClassName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetClassName (_ inObserver : EBEvent) {
    self.mObserversOf_mNetClassName.remove (inObserver)
    if let object = self.propval {
      object.mNetClassName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mNetWidth
  //····················································································································

  private var mObserversOf_mNetWidth = EBWeakEventSet ()

  //····················································································································

  var mNetWidth_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mNetWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mNetWidth (_ inObserver : EBEvent) {
    self.mObserversOf_mNetWidth.insert (inObserver)
    if let object = self.propval {
      object.mNetWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetWidth (_ inObserver : EBEvent) {
    self.mObserversOf_mNetWidth.remove (inObserver)
    if let object = self.propval {
      object.mNetWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mNetWidthUnit
  //····················································································································

  private var mObserversOf_mNetWidthUnit = EBWeakEventSet ()

  //····················································································································

  var mNetWidthUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mNetWidthUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mNetWidthUnit (_ inObserver : EBEvent) {
    self.mObserversOf_mNetWidthUnit.insert (inObserver)
    if let object = self.propval {
      object.mNetWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetWidthUnit (_ inObserver : EBEvent) {
    self.mObserversOf_mNetWidthUnit.remove (inObserver)
    if let object = self.propval {
      object.mNetWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mNets
  //····················································································································

  private var mObserversOf_mNets = EBWeakEventSet ()

  //····················································································································

  var mNets_property_selection : EBSelection <[NetInProject]> {
    if let model = self.propval {
      switch (model.mNets_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mNets (_ inObserver : EBEvent) {
    self.mObserversOf_mNets.insert (inObserver)
    if let object = self.propval {
      object.mNets_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNets (_ inObserver : EBEvent) {
    self.mObserversOf_mNets.remove (inObserver)
    if let object = self.propval {
      object.mNets_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mViaHoleDiameter
  //····················································································································

  private var mObserversOf_mViaHoleDiameter = EBWeakEventSet ()

  //····················································································································

  var mViaHoleDiameter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mViaHoleDiameter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mViaHoleDiameter (_ inObserver : EBEvent) {
    self.mObserversOf_mViaHoleDiameter.insert (inObserver)
    if let object = self.propval {
      object.mViaHoleDiameter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mViaHoleDiameter (_ inObserver : EBEvent) {
    self.mObserversOf_mViaHoleDiameter.remove (inObserver)
    if let object = self.propval {
      object.mViaHoleDiameter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mViaHoleDiameterUnit
  //····················································································································

  private var mObserversOf_mViaHoleDiameterUnit = EBWeakEventSet ()

  //····················································································································

  var mViaHoleDiameterUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mViaHoleDiameterUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mViaHoleDiameterUnit (_ inObserver : EBEvent) {
    self.mObserversOf_mViaHoleDiameterUnit.insert (inObserver)
    if let object = self.propval {
      object.mViaHoleDiameterUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mViaHoleDiameterUnit (_ inObserver : EBEvent) {
    self.mObserversOf_mViaHoleDiameterUnit.remove (inObserver)
    if let object = self.propval {
      object.mViaHoleDiameterUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mViaPadDiameter
  //····················································································································

  private var mObserversOf_mViaPadDiameter = EBWeakEventSet ()

  //····················································································································

  var mViaPadDiameter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mViaPadDiameter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mViaPadDiameter (_ inObserver : EBEvent) {
    self.mObserversOf_mViaPadDiameter.insert (inObserver)
    if let object = self.propval {
      object.mViaPadDiameter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mViaPadDiameter (_ inObserver : EBEvent) {
    self.mObserversOf_mViaPadDiameter.remove (inObserver)
    if let object = self.propval {
      object.mViaPadDiameter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mViaPadDiameterUnit
  //····················································································································

  private var mObserversOf_mViaPadDiameterUnit = EBWeakEventSet ()

  //····················································································································

  var mViaPadDiameterUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mViaPadDiameterUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mViaPadDiameterUnit (_ inObserver : EBEvent) {
    self.mObserversOf_mViaPadDiameterUnit.insert (inObserver)
    if let object = self.propval {
      object.mViaPadDiameterUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mViaPadDiameterUnit (_ inObserver : EBEvent) {
    self.mObserversOf_mViaPadDiameterUnit.remove (inObserver)
    if let object = self.propval {
      object.mViaPadDiameterUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: netUsage
  //····················································································································

  private var mObserversOf_netUsage = EBWeakEventSet ()

  //····················································································································

  var netUsage_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.netUsage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_netUsage (_ inObserver : EBEvent) {
    self.mObserversOf_netUsage.insert (inObserver)
    if let object = self.propval {
      object.netUsage_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_netUsage (_ inObserver : EBEvent) {
    self.mObserversOf_netUsage.remove (inObserver)
    if let object = self.propval {
      object.netUsage_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: netWidth
  //····················································································································

  private var mObserversOf_netWidth = EBWeakEventSet ()

  //····················································································································

  var netWidth_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.netWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_netWidth (_ inObserver : EBEvent) {
    self.mObserversOf_netWidth.insert (inObserver)
    if let object = self.propval {
      object.netWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_netWidth (_ inObserver : EBEvent) {
    self.mObserversOf_netWidth.remove (inObserver)
    if let object = self.propval {
      object.netWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: viaHoleDiameter
  //····················································································································

  private var mObserversOf_viaHoleDiameter = EBWeakEventSet ()

  //····················································································································

  var viaHoleDiameter_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.viaHoleDiameter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_viaHoleDiameter (_ inObserver : EBEvent) {
    self.mObserversOf_viaHoleDiameter.insert (inObserver)
    if let object = self.propval {
      object.viaHoleDiameter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaHoleDiameter (_ inObserver : EBEvent) {
    self.mObserversOf_viaHoleDiameter.remove (inObserver)
    if let object = self.propval {
      object.viaHoleDiameter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: viaPadDiameter
  //····················································································································

  private var mObserversOf_viaPadDiameter = EBWeakEventSet ()

  //····················································································································

  var viaPadDiameter_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.viaPadDiameter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_viaPadDiameter (_ inObserver : EBEvent) {
    self.mObserversOf_viaPadDiameter.insert (inObserver)
    if let object = self.propval {
      object.viaPadDiameter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaPadDiameter (_ inObserver : EBEvent) {
    self.mObserversOf_viaPadDiameter.remove (inObserver)
    if let object = self.propval {
      object.viaPadDiameter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
