//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mCenterX : class {
  var mCenterX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mCenterY : class {
  var mCenterY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mRotation : class {
  var mRotation : QuadrantRotation { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mSymbolInstanceName : class {
  var mSymbolInstanceName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mSymbolTypeName : class {
  var mSymbolTypeName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mDisplayComponentNameOffsetX : class {
  var mDisplayComponentNameOffsetX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mDisplayComponentNameOffsetY : class {
  var mDisplayComponentNameOffsetY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mDisplayComponentValue : class {
  var mDisplayComponentValue : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mDisplayComponentValueOffsetX : class {
  var mDisplayComponentValueOffsetX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mDisplayComponentValueOffsetY : class {
  var mDisplayComponentValueOffsetY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_componentValueProxy : class {
  var componentValueProxy : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_componentName : class {
  var componentName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_deviceName : class {
  var deviceName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_symbolInfo : class {
  var symbolInfo : ComponentSymbolInfo? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_symbolInSchematics : class {
  var symbolInSchematics : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ComponentSymbolInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ComponentSymbolInProject : SchematicsObject,
         ComponentSymbolInProject_mCenterX,
         ComponentSymbolInProject_mCenterY,
         ComponentSymbolInProject_mRotation,
         ComponentSymbolInProject_mSymbolInstanceName,
         ComponentSymbolInProject_mSymbolTypeName,
         ComponentSymbolInProject_mDisplayComponentNameOffsetX,
         ComponentSymbolInProject_mDisplayComponentNameOffsetY,
         ComponentSymbolInProject_mDisplayComponentValue,
         ComponentSymbolInProject_mDisplayComponentValueOffsetX,
         ComponentSymbolInProject_mDisplayComponentValueOffsetY,
         ComponentSymbolInProject_componentValueProxy,
         ComponentSymbolInProject_componentName,
         ComponentSymbolInProject_deviceName,
         ComponentSymbolInProject_symbolInfo,
         ComponentSymbolInProject_objectDisplay,
         ComponentSymbolInProject_selectionDisplay,
         ComponentSymbolInProject_symbolInSchematics {

  //····················································································································
  //   Atomic property: mCenterX
  //····················································································································

  let mCenterX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mCenterX : Int {
    get { return self.mCenterX_property.propval }
    set { self.mCenterX_property.setProp (newValue) }
  }

  //····················································································································

  var mCenterX_property_selection : EBSelection <Int> { return self.mCenterX_property.prop }

  //····················································································································
  //   Atomic property: mCenterY
  //····················································································································

  let mCenterY_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mCenterY : Int {
    get { return self.mCenterY_property.propval }
    set { self.mCenterY_property.setProp (newValue) }
  }

  //····················································································································

  var mCenterY_property_selection : EBSelection <Int> { return self.mCenterY_property.prop }

  //····················································································································
  //   Atomic property: mRotation
  //····················································································································

  let mRotation_property = EBStoredProperty_QuadrantRotation (defaultValue: QuadrantRotation.rotation0)

  //····················································································································

  var mRotation : QuadrantRotation {
    get { return self.mRotation_property.propval }
    set { self.mRotation_property.setProp (newValue) }
  }

  //····················································································································

  var mRotation_property_selection : EBSelection <QuadrantRotation> { return self.mRotation_property.prop }

  //····················································································································
  //   Atomic property: mSymbolInstanceName
  //····················································································································

  let mSymbolInstanceName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mSymbolInstanceName : String {
    get { return self.mSymbolInstanceName_property.propval }
    set { self.mSymbolInstanceName_property.setProp (newValue) }
  }

  //····················································································································

  var mSymbolInstanceName_property_selection : EBSelection <String> { return self.mSymbolInstanceName_property.prop }

  //····················································································································
  //   Atomic property: mSymbolTypeName
  //····················································································································

  let mSymbolTypeName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mSymbolTypeName : String {
    get { return self.mSymbolTypeName_property.propval }
    set { self.mSymbolTypeName_property.setProp (newValue) }
  }

  //····················································································································

  var mSymbolTypeName_property_selection : EBSelection <String> { return self.mSymbolTypeName_property.prop }

  //····················································································································
  //   Atomic property: mDisplayComponentNameOffsetX
  //····················································································································

  let mDisplayComponentNameOffsetX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mDisplayComponentNameOffsetX : Int {
    get { return self.mDisplayComponentNameOffsetX_property.propval }
    set { self.mDisplayComponentNameOffsetX_property.setProp (newValue) }
  }

  //····················································································································

  var mDisplayComponentNameOffsetX_property_selection : EBSelection <Int> { return self.mDisplayComponentNameOffsetX_property.prop }

  //····················································································································
  //   Atomic property: mDisplayComponentNameOffsetY
  //····················································································································

  let mDisplayComponentNameOffsetY_property = EBStoredProperty_Int (defaultValue: 457200)

  //····················································································································

  var mDisplayComponentNameOffsetY : Int {
    get { return self.mDisplayComponentNameOffsetY_property.propval }
    set { self.mDisplayComponentNameOffsetY_property.setProp (newValue) }
  }

  //····················································································································

  var mDisplayComponentNameOffsetY_property_selection : EBSelection <Int> { return self.mDisplayComponentNameOffsetY_property.prop }

  //····················································································································
  //   Atomic property: mDisplayComponentValue
  //····················································································································

  let mDisplayComponentValue_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var mDisplayComponentValue : Bool {
    get { return self.mDisplayComponentValue_property.propval }
    set { self.mDisplayComponentValue_property.setProp (newValue) }
  }

  //····················································································································

  var mDisplayComponentValue_property_selection : EBSelection <Bool> { return self.mDisplayComponentValue_property.prop }

  //····················································································································
  //   Atomic property: mDisplayComponentValueOffsetX
  //····················································································································

  let mDisplayComponentValueOffsetX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mDisplayComponentValueOffsetX : Int {
    get { return self.mDisplayComponentValueOffsetX_property.propval }
    set { self.mDisplayComponentValueOffsetX_property.setProp (newValue) }
  }

  //····················································································································

  var mDisplayComponentValueOffsetX_property_selection : EBSelection <Int> { return self.mDisplayComponentValueOffsetX_property.prop }

  //····················································································································
  //   Atomic property: mDisplayComponentValueOffsetY
  //····················································································································

  let mDisplayComponentValueOffsetY_property = EBStoredProperty_Int (defaultValue: -457200)

  //····················································································································

  var mDisplayComponentValueOffsetY : Int {
    get { return self.mDisplayComponentValueOffsetY_property.propval }
    set { self.mDisplayComponentValueOffsetY_property.setProp (newValue) }
  }

  //····················································································································

  var mDisplayComponentValueOffsetY_property_selection : EBSelection <Int> { return self.mDisplayComponentValueOffsetY_property.prop }

  //····················································································································
  //   Atomic proxy property: componentValueProxy
  //····················································································································

  let componentValueProxy_property = EBPropertyProxy_String ()

  //····················································································································

  var componentValueProxy : String? {
    get {
      switch self.componentValueProxy_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.componentValueProxy_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var componentValueProxy_property_selection : EBSelection <String> { return self.componentValueProxy_property.prop }

  //····················································································································
  //   To one property: mComponent
  //····················································································································

  let mComponent_property = ToOneRelationship_ComponentSymbolInProject_mComponent ()

  //····················································································································

  var mComponent_property_selection : EBSelection <ComponentInProject?> {
    return .single (self.mComponent_property.propval)
  }

  //····················································································································

  var mComponent : ComponentInProject? {
    get { return self.mComponent_property.propval }
    set { self.mComponent_property.setProp (newValue) }
  }

  //····················································································································

  var mComponent_none : ToOneRelationship_ComponentSymbolInProject_mComponent { return self.mComponent_property }

  //····················································································································

  var mComponent_none_selection : EBSelection <Bool> {
    return .single (self.mComponent_property.propval == nil)
  }

  //····················································································································
  //   Transient property: componentName
  //····················································································································

  let componentName_property = EBTransientProperty_String ()

  //····················································································································

  var componentName_property_selection : EBSelection <String> {
    return self.componentName_property.prop
  }

  //····················································································································

  var componentName : String? {
    switch self.componentName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: deviceName
  //····················································································································

  let deviceName_property = EBTransientProperty_String ()

  //····················································································································

  var deviceName_property_selection : EBSelection <String> {
    return self.deviceName_property.prop
  }

  //····················································································································

  var deviceName : String? {
    switch self.deviceName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolInfo
  //····················································································································

  let symbolInfo_property = EBTransientProperty_ComponentSymbolInfo ()

  //····················································································································

  var symbolInfo_property_selection : EBSelection <ComponentSymbolInfo> {
    return self.symbolInfo_property.prop
  }

  //····················································································································

  var symbolInfo : ComponentSymbolInfo? {
    switch self.symbolInfo_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolInSchematics
  //····················································································································

  let symbolInSchematics_property = EBTransientProperty_Bool ()

  //····················································································································

  var symbolInSchematics_property_selection : EBSelection <Bool> {
    return self.symbolInSchematics_property.prop
  }

  //····················································································································

  var symbolInSchematics : Bool? {
    switch self.symbolInSchematics_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mCenterX
    self.mCenterX_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mCenterY
    self.mCenterY_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mRotation
    self.mRotation_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSymbolInstanceName
    self.mSymbolInstanceName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSymbolTypeName
    self.mSymbolTypeName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mDisplayComponentNameOffsetX
    self.mDisplayComponentNameOffsetX_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mDisplayComponentNameOffsetY
    self.mDisplayComponentNameOffsetY_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mDisplayComponentValue
    self.mDisplayComponentValue_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mDisplayComponentValueOffsetX
    self.mDisplayComponentValueOffsetX_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mDisplayComponentValueOffsetY
    self.mDisplayComponentValueOffsetY_property.ebUndoManager = self.ebUndoManager
  //--- Atomic proxy property: componentValueProxy
    self.componentValueProxy_property.mReadModelFunction = { [weak self] in
      if let object = self?.mComponent {
        return .single (object.mComponentValue)
      }else{
        return .empty
      }
    }
    self.componentValueProxy_property.mWriteModelFunction = { [weak self] (_ inValue : String) in
      self?.mComponent?.mComponentValue = inValue
    }
    self.componentValueProxy_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : String, _ inWindow : NSWindow?) -> Bool in
      return self?.mComponent?.mComponentValue_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mComponent_property.addEBObserverOf_mComponentValue (self.componentValueProxy_property)
  //--- To one property: mComponent
    self.mComponent_property.owner = self
  //--- Atomic property: componentName
    self.componentName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mComponent_property.componentName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mComponent_property.componentName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentSymbolInProject_componentName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mComponent_property.addEBObserverOf_componentName (self.componentName_property)
  //--- Atomic property: deviceName
    self.deviceName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mComponent_property.deviceName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mComponent_property.deviceName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentSymbolInProject_deviceName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mComponent_property.addEBObserverOf_deviceName (self.deviceName_property)
  //--- Atomic property: symbolInfo
    self.symbolInfo_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mRotation_property_selection.kind ()
        kind &= unwSelf.componentName_property_selection.kind ()
        kind &= unwSelf.mComponent_property.mComponentValue_property_selection.kind ()
        kind &= unwSelf.mComponent_property.deviceSymbolDictionary_property_selection.kind ()
        kind &= unwSelf.mSymbolInstanceName_property_selection.kind ()
        kind &= unwSelf.mSymbolTypeName_property_selection.kind ()
        kind &= unwSelf.mCenterX_property_selection.kind ()
        kind &= unwSelf.mCenterY_property_selection.kind ()
        kind &= g_Preferences!.pinNameFont_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mRotation_property_selection, unwSelf.componentName_property_selection, unwSelf.mComponent_property.mComponentValue_property_selection, unwSelf.mComponent_property.deviceSymbolDictionary_property_selection, unwSelf.mSymbolInstanceName_property_selection, unwSelf.mSymbolTypeName_property_selection, unwSelf.mCenterX_property_selection, unwSelf.mCenterY_property_selection, g_Preferences!.pinNameFont_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8)) :
            return .single (transient_ComponentSymbolInProject_symbolInfo (v0, v1, v2, v3, v4, v5, v6, v7, v8))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mRotation_property.addEBObserver (self.symbolInfo_property)
    self.componentName_property.addEBObserver (self.symbolInfo_property)
    self.mComponent_property.addEBObserverOf_mComponentValue (self.symbolInfo_property)
    self.mComponent_property.addEBObserverOf_deviceSymbolDictionary (self.symbolInfo_property)
    self.mSymbolInstanceName_property.addEBObserver (self.symbolInfo_property)
    self.mSymbolTypeName_property.addEBObserver (self.symbolInfo_property)
    self.mCenterX_property.addEBObserver (self.symbolInfo_property)
    self.mCenterY_property.addEBObserver (self.symbolInfo_property)
    g_Preferences?.pinNameFont_property.addEBObserver (self.symbolInfo_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.pinNameFont_property_selection.kind ()
        kind &= unwSelf.mDisplayComponentNameOffsetX_property_selection.kind ()
        kind &= unwSelf.mDisplayComponentNameOffsetY_property_selection.kind ()
        kind &= unwSelf.mDisplayComponentValue_property_selection.kind ()
        kind &= unwSelf.mDisplayComponentValueOffsetX_property_selection.kind ()
        kind &= unwSelf.mDisplayComponentValueOffsetY_property_selection.kind ()
        kind &= unwSelf.symbolInfo_property_selection.kind ()
        kind &= g_Preferences!.symbolColorForSchematic_property_selection.kind ()
        kind &= unwSelf.mSymbolInstanceName_property_selection.kind ()
        kind &= unwSelf.mSymbolTypeName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.pinNameFont_property_selection, unwSelf.mDisplayComponentNameOffsetX_property_selection, unwSelf.mDisplayComponentNameOffsetY_property_selection, unwSelf.mDisplayComponentValue_property_selection, unwSelf.mDisplayComponentValueOffsetX_property_selection, unwSelf.mDisplayComponentValueOffsetY_property_selection, unwSelf.symbolInfo_property_selection, g_Preferences!.symbolColorForSchematic_property_selection, unwSelf.mSymbolInstanceName_property_selection, unwSelf.mSymbolTypeName_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9)) :
            return .single (transient_ComponentSymbolInProject_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    g_Preferences?.pinNameFont_property.addEBObserver (self.objectDisplay_property)
    self.mDisplayComponentNameOffsetX_property.addEBObserver (self.objectDisplay_property)
    self.mDisplayComponentNameOffsetY_property.addEBObserver (self.objectDisplay_property)
    self.mDisplayComponentValue_property.addEBObserver (self.objectDisplay_property)
    self.mDisplayComponentValueOffsetX_property.addEBObserver (self.objectDisplay_property)
    self.mDisplayComponentValueOffsetY_property.addEBObserver (self.objectDisplay_property)
    self.symbolInfo_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.symbolColorForSchematic_property.addEBObserver (self.objectDisplay_property)
    self.mSymbolInstanceName_property.addEBObserver (self.objectDisplay_property)
    self.mSymbolTypeName_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.pinNameFont_property_selection.kind ()
        kind &= unwSelf.mDisplayComponentNameOffsetX_property_selection.kind ()
        kind &= unwSelf.mDisplayComponentNameOffsetY_property_selection.kind ()
        kind &= unwSelf.mDisplayComponentValue_property_selection.kind ()
        kind &= unwSelf.mDisplayComponentValueOffsetX_property_selection.kind ()
        kind &= unwSelf.mDisplayComponentValueOffsetY_property_selection.kind ()
        kind &= unwSelf.symbolInfo_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (g_Preferences!.pinNameFont_property_selection, unwSelf.mDisplayComponentNameOffsetX_property_selection, unwSelf.mDisplayComponentNameOffsetY_property_selection, unwSelf.mDisplayComponentValue_property_selection, unwSelf.mDisplayComponentValueOffsetX_property_selection, unwSelf.mDisplayComponentValueOffsetY_property_selection, unwSelf.symbolInfo_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6)) :
            return .single (transient_ComponentSymbolInProject_selectionDisplay (v0, v1, v2, v3, v4, v5, v6))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    g_Preferences?.pinNameFont_property.addEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentNameOffsetX_property.addEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentNameOffsetY_property.addEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentValue_property.addEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentValueOffsetX_property.addEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentValueOffsetY_property.addEBObserver (self.selectionDisplay_property)
    self.symbolInfo_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: symbolInSchematics
    self.symbolInSchematics_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.isPlacedInSchematics_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.isPlacedInSchematics_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentSymbolInProject_symbolInSchematics (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.isPlacedInSchematics_property.addEBObserver (self.symbolInSchematics_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- Atomic proxy property: componentValueProxy
    self.componentValueProxy_property.mReadModelFunction = nil
    self.componentValueProxy_property.mWriteModelFunction = nil
    self.componentValueProxy_property.mValidateAndWriteModelFunction = nil
    self.mComponent_property.removeEBObserverOf_mComponentValue (self.componentValueProxy_property)
    self.mComponent_property.removeEBObserverOf_componentName (self.componentName_property)
    self.mComponent_property.removeEBObserverOf_deviceName (self.deviceName_property)
    self.mRotation_property.removeEBObserver (self.symbolInfo_property)
    self.componentName_property.removeEBObserver (self.symbolInfo_property)
    self.mComponent_property.removeEBObserverOf_mComponentValue (self.symbolInfo_property)
    self.mComponent_property.removeEBObserverOf_deviceSymbolDictionary (self.symbolInfo_property)
    self.mSymbolInstanceName_property.removeEBObserver (self.symbolInfo_property)
    self.mSymbolTypeName_property.removeEBObserver (self.symbolInfo_property)
    self.mCenterX_property.removeEBObserver (self.symbolInfo_property)
    self.mCenterY_property.removeEBObserver (self.symbolInfo_property)
    g_Preferences?.pinNameFont_property.removeEBObserver (self.symbolInfo_property)
    g_Preferences?.pinNameFont_property.removeEBObserver (self.objectDisplay_property)
    self.mDisplayComponentNameOffsetX_property.removeEBObserver (self.objectDisplay_property)
    self.mDisplayComponentNameOffsetY_property.removeEBObserver (self.objectDisplay_property)
    self.mDisplayComponentValue_property.removeEBObserver (self.objectDisplay_property)
    self.mDisplayComponentValueOffsetX_property.removeEBObserver (self.objectDisplay_property)
    self.mDisplayComponentValueOffsetY_property.removeEBObserver (self.objectDisplay_property)
    self.symbolInfo_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.symbolColorForSchematic_property.removeEBObserver (self.objectDisplay_property)
    self.mSymbolInstanceName_property.removeEBObserver (self.objectDisplay_property)
    self.mSymbolTypeName_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.pinNameFont_property.removeEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentNameOffsetX_property.removeEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentNameOffsetY_property.removeEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentValue_property.removeEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentValueOffsetX_property.removeEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentValueOffsetY_property.removeEBObserver (self.selectionDisplay_property)
    self.symbolInfo_property.removeEBObserver (self.selectionDisplay_property)
    self.isPlacedInSchematics_property.removeEBObserver (self.symbolInSchematics_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mCenterX",
      idx:self.mCenterX_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mCenterX_property.mObserverExplorer,
      valueExplorer:&self.mCenterX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mCenterY",
      idx:self.mCenterY_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mCenterY_property.mObserverExplorer,
      valueExplorer:&self.mCenterY_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mRotation",
      idx:self.mRotation_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mRotation_property.mObserverExplorer,
      valueExplorer:&self.mRotation_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSymbolInstanceName",
      idx:self.mSymbolInstanceName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mSymbolInstanceName_property.mObserverExplorer,
      valueExplorer:&self.mSymbolInstanceName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSymbolTypeName",
      idx:self.mSymbolTypeName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mSymbolTypeName_property.mObserverExplorer,
      valueExplorer:&self.mSymbolTypeName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDisplayComponentNameOffsetX",
      idx:self.mDisplayComponentNameOffsetX_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mDisplayComponentNameOffsetX_property.mObserverExplorer,
      valueExplorer:&self.mDisplayComponentNameOffsetX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDisplayComponentNameOffsetY",
      idx:self.mDisplayComponentNameOffsetY_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mDisplayComponentNameOffsetY_property.mObserverExplorer,
      valueExplorer:&self.mDisplayComponentNameOffsetY_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDisplayComponentValue",
      idx:self.mDisplayComponentValue_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mDisplayComponentValue_property.mObserverExplorer,
      valueExplorer:&self.mDisplayComponentValue_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDisplayComponentValueOffsetX",
      idx:self.mDisplayComponentValueOffsetX_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mDisplayComponentValueOffsetX_property.mObserverExplorer,
      valueExplorer:&self.mDisplayComponentValueOffsetX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDisplayComponentValueOffsetY",
      idx:self.mDisplayComponentValueOffsetY_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mDisplayComponentValueOffsetY_property.mObserverExplorer,
      valueExplorer:&self.mDisplayComponentValueOffsetY_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "componentName",
      idx:self.componentName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.componentName_property.mObserverExplorer,
      valueExplorer:&self.componentName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "deviceName",
      idx:self.deviceName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.deviceName_property.mObserverExplorer,
      valueExplorer:&self.deviceName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "symbolInfo",
      idx:self.symbolInfo_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.symbolInfo_property.mObserverExplorer,
      valueExplorer:&self.symbolInfo_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx:self.objectDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.objectDisplay_property.mObserverExplorer,
      valueExplorer:&self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx:self.selectionDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectionDisplay_property.mObserverExplorer,
      valueExplorer:&self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "symbolInSchematics",
      idx:self.symbolInSchematics_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.symbolInSchematics_property.mObserverExplorer,
      valueExplorer:&self.symbolInSchematics_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "mComponent",
      idx:self.mComponent_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mComponent_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mCenterX
    self.mCenterX_property.mObserverExplorer = nil
    self.mCenterX_property.mValueExplorer = nil
  //--- Atomic property: mCenterY
    self.mCenterY_property.mObserverExplorer = nil
    self.mCenterY_property.mValueExplorer = nil
  //--- Atomic property: mRotation
    self.mRotation_property.mObserverExplorer = nil
    self.mRotation_property.mValueExplorer = nil
  //--- Atomic property: mSymbolInstanceName
    self.mSymbolInstanceName_property.mObserverExplorer = nil
    self.mSymbolInstanceName_property.mValueExplorer = nil
  //--- Atomic property: mSymbolTypeName
    self.mSymbolTypeName_property.mObserverExplorer = nil
    self.mSymbolTypeName_property.mValueExplorer = nil
  //--- Atomic property: mDisplayComponentNameOffsetX
    self.mDisplayComponentNameOffsetX_property.mObserverExplorer = nil
    self.mDisplayComponentNameOffsetX_property.mValueExplorer = nil
  //--- Atomic property: mDisplayComponentNameOffsetY
    self.mDisplayComponentNameOffsetY_property.mObserverExplorer = nil
    self.mDisplayComponentNameOffsetY_property.mValueExplorer = nil
  //--- Atomic property: mDisplayComponentValue
    self.mDisplayComponentValue_property.mObserverExplorer = nil
    self.mDisplayComponentValue_property.mValueExplorer = nil
  //--- Atomic property: mDisplayComponentValueOffsetX
    self.mDisplayComponentValueOffsetX_property.mObserverExplorer = nil
    self.mDisplayComponentValueOffsetX_property.mValueExplorer = nil
  //--- Atomic property: mDisplayComponentValueOffsetY
    self.mDisplayComponentValueOffsetY_property.mObserverExplorer = nil
    self.mDisplayComponentValueOffsetY_property.mValueExplorer = nil
  //--- Atomic proxy property: componentValueProxy
    self.componentValueProxy_property.mObserverExplorer = nil
    self.componentValueProxy_property.mValueExplorer = nil
  //--- To one property: mComponent
    self.mComponent_property.mObserverExplorer = nil
    self.mComponent_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mComponent_property.setProp (nil)
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mCenterX
    self.mCenterX_property.storeIn (dictionary: ioDictionary, forKey:"mCenterX")
  //--- Atomic property: mCenterY
    self.mCenterY_property.storeIn (dictionary: ioDictionary, forKey:"mCenterY")
  //--- Atomic property: mRotation
    self.mRotation_property.storeIn (dictionary: ioDictionary, forKey:"mRotation")
  //--- Atomic property: mSymbolInstanceName
    self.mSymbolInstanceName_property.storeIn (dictionary: ioDictionary, forKey:"mSymbolInstanceName")
  //--- Atomic property: mSymbolTypeName
    self.mSymbolTypeName_property.storeIn (dictionary: ioDictionary, forKey:"mSymbolTypeName")
  //--- Atomic property: mDisplayComponentNameOffsetX
    self.mDisplayComponentNameOffsetX_property.storeIn (dictionary: ioDictionary, forKey:"mDisplayComponentNameOffsetX")
  //--- Atomic property: mDisplayComponentNameOffsetY
    self.mDisplayComponentNameOffsetY_property.storeIn (dictionary: ioDictionary, forKey:"mDisplayComponentNameOffsetY")
  //--- Atomic property: mDisplayComponentValue
    self.mDisplayComponentValue_property.storeIn (dictionary: ioDictionary, forKey:"mDisplayComponentValue")
  //--- Atomic property: mDisplayComponentValueOffsetX
    self.mDisplayComponentValueOffsetX_property.storeIn (dictionary: ioDictionary, forKey:"mDisplayComponentValueOffsetX")
  //--- Atomic property: mDisplayComponentValueOffsetY
    self.mDisplayComponentValueOffsetY_property.storeIn (dictionary: ioDictionary, forKey:"mDisplayComponentValueOffsetY")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To one property: mComponent
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mComponent",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? ComponentInProject {
        self.mComponent_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mCenterX
    self.mCenterX_property.readFrom (dictionary: inDictionary, forKey:"mCenterX")
  //--- Atomic property: mCenterY
    self.mCenterY_property.readFrom (dictionary: inDictionary, forKey:"mCenterY")
  //--- Atomic property: mRotation
    self.mRotation_property.readFrom (dictionary: inDictionary, forKey:"mRotation")
  //--- Atomic property: mSymbolInstanceName
    self.mSymbolInstanceName_property.readFrom (dictionary: inDictionary, forKey:"mSymbolInstanceName")
  //--- Atomic property: mSymbolTypeName
    self.mSymbolTypeName_property.readFrom (dictionary: inDictionary, forKey:"mSymbolTypeName")
  //--- Atomic property: mDisplayComponentNameOffsetX
    self.mDisplayComponentNameOffsetX_property.readFrom (dictionary: inDictionary, forKey:"mDisplayComponentNameOffsetX")
  //--- Atomic property: mDisplayComponentNameOffsetY
    self.mDisplayComponentNameOffsetY_property.readFrom (dictionary: inDictionary, forKey:"mDisplayComponentNameOffsetY")
  //--- Atomic property: mDisplayComponentValue
    self.mDisplayComponentValue_property.readFrom (dictionary: inDictionary, forKey:"mDisplayComponentValue")
  //--- Atomic property: mDisplayComponentValueOffsetX
    self.mDisplayComponentValueOffsetX_property.readFrom (dictionary: inDictionary, forKey:"mDisplayComponentValueOffsetX")
  //--- Atomic property: mDisplayComponentValueOffsetY
    self.mDisplayComponentValueOffsetY_property.readFrom (dictionary: inDictionary, forKey:"mDisplayComponentValueOffsetY")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To one property: mComponent
    if let managedObject = self.mComponent_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To one property: mComponent
    if let managedObject = self.mComponent_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_ComponentSymbolInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_ComponentSymbolInProject : ReadOnlyAbstractArrayProperty <ComponentSymbolInProject> {

  //····················································································································
  //   Observers of 'mCenterX' stored property
  //····················································································································

  private var mObserversOf_mCenterX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mCenterX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCenterX.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCenterX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCenterX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCenterX.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCenterX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mCenterX_toElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mCenterX.apply { (_ observer : EBEvent) in
        managedObject.mCenterX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCenterX_fromElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    self.mObserversOf_mCenterX.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mCenterX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mCenterY' stored property
  //····················································································································

  private var mObserversOf_mCenterY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mCenterY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCenterY.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCenterY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCenterY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCenterY.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCenterY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mCenterY_toElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mCenterY.apply { (_ observer : EBEvent) in
        managedObject.mCenterY_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCenterY_fromElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    self.mObserversOf_mCenterY.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mCenterY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mRotation' stored property
  //····················································································································

  private var mObserversOf_mRotation = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mRotation (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mRotation.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRotation_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mRotation (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mRotation.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRotation_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mRotation_toElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mRotation.apply { (_ observer : EBEvent) in
        managedObject.mRotation_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mRotation_fromElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    self.mObserversOf_mRotation.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mRotation_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSymbolInstanceName' stored property
  //····················································································································

  private var mObserversOf_mSymbolInstanceName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSymbolInstanceName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolInstanceName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolInstanceName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolInstanceName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolInstanceName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolInstanceName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolInstanceName_toElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mSymbolInstanceName.apply { (_ observer : EBEvent) in
        managedObject.mSymbolInstanceName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolInstanceName_fromElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    self.mObserversOf_mSymbolInstanceName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSymbolInstanceName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSymbolTypeName' stored property
  //····················································································································

  private var mObserversOf_mSymbolTypeName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSymbolTypeName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolTypeName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolTypeName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolTypeName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolTypeName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolTypeName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolTypeName_toElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mSymbolTypeName.apply { (_ observer : EBEvent) in
        managedObject.mSymbolTypeName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolTypeName_fromElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    self.mObserversOf_mSymbolTypeName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSymbolTypeName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDisplayComponentNameOffsetX' stored property
  //····················································································································

  private var mObserversOf_mDisplayComponentNameOffsetX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDisplayComponentNameOffsetX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDisplayComponentNameOffsetX.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayComponentNameOffsetX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayComponentNameOffsetX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDisplayComponentNameOffsetX.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayComponentNameOffsetX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDisplayComponentNameOffsetX_toElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mDisplayComponentNameOffsetX.apply { (_ observer : EBEvent) in
        managedObject.mDisplayComponentNameOffsetX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDisplayComponentNameOffsetX_fromElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    self.mObserversOf_mDisplayComponentNameOffsetX.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDisplayComponentNameOffsetX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDisplayComponentNameOffsetY' stored property
  //····················································································································

  private var mObserversOf_mDisplayComponentNameOffsetY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDisplayComponentNameOffsetY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDisplayComponentNameOffsetY.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayComponentNameOffsetY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayComponentNameOffsetY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDisplayComponentNameOffsetY.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayComponentNameOffsetY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDisplayComponentNameOffsetY_toElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mDisplayComponentNameOffsetY.apply { (_ observer : EBEvent) in
        managedObject.mDisplayComponentNameOffsetY_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDisplayComponentNameOffsetY_fromElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    self.mObserversOf_mDisplayComponentNameOffsetY.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDisplayComponentNameOffsetY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDisplayComponentValue' stored property
  //····················································································································

  private var mObserversOf_mDisplayComponentValue = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDisplayComponentValue (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDisplayComponentValue.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayComponentValue_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayComponentValue (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDisplayComponentValue.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayComponentValue_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDisplayComponentValue_toElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mDisplayComponentValue.apply { (_ observer : EBEvent) in
        managedObject.mDisplayComponentValue_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDisplayComponentValue_fromElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    self.mObserversOf_mDisplayComponentValue.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDisplayComponentValue_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDisplayComponentValueOffsetX' stored property
  //····················································································································

  private var mObserversOf_mDisplayComponentValueOffsetX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDisplayComponentValueOffsetX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDisplayComponentValueOffsetX.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayComponentValueOffsetX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayComponentValueOffsetX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDisplayComponentValueOffsetX.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayComponentValueOffsetX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDisplayComponentValueOffsetX_toElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mDisplayComponentValueOffsetX.apply { (_ observer : EBEvent) in
        managedObject.mDisplayComponentValueOffsetX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDisplayComponentValueOffsetX_fromElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    self.mObserversOf_mDisplayComponentValueOffsetX.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDisplayComponentValueOffsetX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDisplayComponentValueOffsetY' stored property
  //····················································································································

  private var mObserversOf_mDisplayComponentValueOffsetY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDisplayComponentValueOffsetY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDisplayComponentValueOffsetY.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayComponentValueOffsetY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayComponentValueOffsetY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDisplayComponentValueOffsetY.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayComponentValueOffsetY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDisplayComponentValueOffsetY_toElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mDisplayComponentValueOffsetY.apply { (_ observer : EBEvent) in
        managedObject.mDisplayComponentValueOffsetY_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDisplayComponentValueOffsetY_fromElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    self.mObserversOf_mDisplayComponentValueOffsetY.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDisplayComponentValueOffsetY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'componentValueProxy' proxy property
  //····················································································································

  private var mObserversOf_componentValueProxy = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_componentValueProxy (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_componentValueProxy.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentValueProxy_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_componentValueProxy (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_componentValueProxy.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentValueProxy_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_componentValueProxy_toElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_componentValueProxy.apply { (_ observer : EBEvent) in
        managedObject.componentValueProxy_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentValueProxy_fromElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    self.mObserversOf_componentValueProxy.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.componentValueProxy_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'componentName' transient property
  //····················································································································

  private var mObserversOf_componentName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_componentName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_componentName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_componentName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_componentName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_componentName_toElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_componentName.apply { (_ observer : EBEvent) in
        managedObject.componentName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentName_fromElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_componentName.apply { (_ observer : EBEvent) in
        managedObject.componentName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'deviceName' transient property
  //····················································································································

  private var mObserversOf_deviceName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_deviceName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_deviceName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_deviceName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_deviceName_toElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_deviceName.apply { (_ observer : EBEvent) in
        managedObject.deviceName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_deviceName_fromElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_deviceName.apply { (_ observer : EBEvent) in
        managedObject.deviceName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'symbolInfo' transient property
  //····················································································································

  private var mObserversOf_symbolInfo = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_symbolInfo (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolInfo.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolInfo_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolInfo (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolInfo.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolInfo_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_symbolInfo_toElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_symbolInfo.apply { (_ observer : EBEvent) in
        managedObject.symbolInfo_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_symbolInfo_fromElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_symbolInfo.apply { (_ observer : EBEvent) in
        managedObject.symbolInfo_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'symbolInSchematics' transient property
  //····················································································································

  private var mObserversOf_symbolInSchematics = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_symbolInSchematics (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolInSchematics.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolInSchematics_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolInSchematics (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolInSchematics.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolInSchematics_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_symbolInSchematics_toElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_symbolInSchematics.apply { (_ observer : EBEvent) in
        managedObject.symbolInSchematics_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_symbolInSchematics_fromElementsOfSet (_ inSet : Set<ComponentSymbolInProject>) {
    for managedObject in inSet {
      self.mObserversOf_symbolInSchematics.apply { (_ observer : EBEvent) in
        managedObject.symbolInSchematics_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [ComponentSymbolInProject] > > = nil

  //····················································································································

  override var propset : Set <ComponentSymbolInProject> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [ComponentSymbolInProject] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [ComponentSymbolInProject] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  private var mSet = Set <ComponentSymbolInProject> ()

  //····················································································································

  private var mCachedValue : EBSelection < [ComponentSymbolInProject] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      let cachedValue = unwrappedComputeFunction ()
      self.mCachedValue = cachedValue
      let newSet : Set <ComponentSymbolInProject>
      switch cachedValue {
      case .multiple, .empty :
        newSet = Set <ComponentSymbolInProject> ()
      case .single (let array) :
        newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_mCenterX_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mCenterY_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mRotation_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mSymbolInstanceName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mSymbolTypeName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mDisplayComponentNameOffsetX_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mDisplayComponentNameOffsetY_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mDisplayComponentValue_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mDisplayComponentValueOffsetX_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mDisplayComponentValueOffsetY_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_componentName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_deviceName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_symbolInfo_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_symbolInSchematics_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_mCenterX_toElementsOfSet (addedSet)
      self.addEBObserversOf_mCenterY_toElementsOfSet (addedSet)
      self.addEBObserversOf_mRotation_toElementsOfSet (addedSet)
      self.addEBObserversOf_mSymbolInstanceName_toElementsOfSet (addedSet)
      self.addEBObserversOf_mSymbolTypeName_toElementsOfSet (addedSet)
      self.addEBObserversOf_mDisplayComponentNameOffsetX_toElementsOfSet (addedSet)
      self.addEBObserversOf_mDisplayComponentNameOffsetY_toElementsOfSet (addedSet)
      self.addEBObserversOf_mDisplayComponentValue_toElementsOfSet (addedSet)
      self.addEBObserversOf_mDisplayComponentValueOffsetX_toElementsOfSet (addedSet)
      self.addEBObserversOf_mDisplayComponentValueOffsetY_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_componentName_toElementsOfSet (addedSet)
      self.addEBObserversOf_deviceName_toElementsOfSet (addedSet)
      self.addEBObserversOf_symbolInfo_toElementsOfSet (addedSet)
      self.addEBObserversOf_objectDisplay_toElementsOfSet (addedSet)
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedSet)
      self.addEBObserversOf_symbolInSchematics_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: ComponentSymbolInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_ComponentSymbolInProject : TransientArrayOf_ComponentSymbolInProject {

  //····················································································································
 
  func setProp (_ value :  [ComponentSymbolInProject]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: ComponentSymbolInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_ComponentSymbolInProject : ReadWriteArrayOf_ComponentSymbolInProject, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : ComponentSymbolInProject) -> Void > = nil
  var resetOppositeRelationship : Optional < (_ inManagedObject : ComponentSymbolInProject) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [ComponentSymbolInProject] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "ComponentSymbolInProject") as? ComponentSymbolInProject {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <ComponentSymbolInProject> ()
  private var mValue = [ComponentSymbolInProject] () {
    didSet {
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.resetOppositeRelationship? (managedObject)
            managedObject.mCenterX_property.mSetterDelegate = nil
            managedObject.mCenterY_property.mSetterDelegate = nil
            managedObject.mRotation_property.mSetterDelegate = nil
            managedObject.mSymbolInstanceName_property.mSetterDelegate = nil
            managedObject.mSymbolTypeName_property.mSetterDelegate = nil
            managedObject.mDisplayComponentNameOffsetX_property.mSetterDelegate = nil
            managedObject.mDisplayComponentNameOffsetY_property.mSetterDelegate = nil
            managedObject.mDisplayComponentValue_property.mSetterDelegate = nil
            managedObject.mDisplayComponentValueOffsetX_property.mSetterDelegate = nil
            managedObject.mDisplayComponentValueOffsetY_property.mSetterDelegate = nil
          }
        //--- Remove observers of stored properties
          self.removeEBObserversOf_mCenterX_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mCenterY_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mRotation_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mSymbolInstanceName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mSymbolTypeName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mDisplayComponentNameOffsetX_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mDisplayComponentNameOffsetY_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mDisplayComponentValue_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mDisplayComponentValueOffsetX_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mDisplayComponentValueOffsetY_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of transient properties
          self.removeEBObserversOf_componentName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_deviceName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_symbolInfo_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_symbolInSchematics_fromElementsOfSet (removedObjectSet)
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : ComponentSymbolInProject in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
            managedObject.mCenterX_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mCenterY_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mRotation_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mSymbolInstanceName_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mSymbolTypeName_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mDisplayComponentNameOffsetX_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mDisplayComponentNameOffsetY_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mDisplayComponentValue_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mDisplayComponentValueOffsetX_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mDisplayComponentValueOffsetY_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
        //--- Add observers of stored properties
          self.addEBObserversOf_mCenterX_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mCenterY_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mRotation_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mSymbolInstanceName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mSymbolTypeName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mDisplayComponentNameOffsetX_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mDisplayComponentNameOffsetY_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mDisplayComponentValue_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mDisplayComponentValueOffsetX_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mDisplayComponentValueOffsetY_toElementsOfSet (addedObjectSet)
        //--- Add observers of transient properties
          self.addEBObserversOf_componentName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_deviceName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_symbolInfo_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_objectDisplay_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_symbolInSchematics_toElementsOfSet (addedObjectSet)
        }
      //--- Notify observers
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [ComponentSymbolInProject] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [ComponentSymbolInProject]) { self.mValue = inValue }

  //····················································································································

  override var propval : [ComponentSymbolInProject] { return self.mValue }

  //····················································································································

  override var propset : Set <ComponentSymbolInProject> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [ComponentSymbolInProject]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : ComponentSymbolInProject) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : ComponentSymbolInProject) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: mComponent
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_ComponentSymbolInProject_mComponent : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : ComponentSymbolInProject? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  private var mValue : ComponentInProject? {
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.ebUndoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        oldValue?.mSymbols_property.remove (unwrappedOwner)
      //--- Set new opposite relation ship
        self.mValue?.mSymbols_property.add (unwrappedOwner)
      //--- Remove property observers of old object
        oldValue?.availablePackages_property.removeEBObserversFrom (&self.mObserversOf_availablePackages)
        oldValue?.componentName_property.removeEBObserversFrom (&self.mObserversOf_componentName)
        oldValue?.deviceName_property.removeEBObserversFrom (&self.mObserversOf_deviceName)
        oldValue?.deviceSymbolDictionary_property.removeEBObserversFrom (&self.mObserversOf_deviceSymbolDictionary)
        oldValue?.mComponentValue_property.removeEBObserversFrom (&self.mObserversOf_mComponentValue)
        oldValue?.mNameIndex_property.removeEBObserversFrom (&self.mObserversOf_mNameIndex)
        oldValue?.mNamePrefix_property.removeEBObserversFrom (&self.mObserversOf_mNamePrefix)
        oldValue?.mSymbols_property.removeEBObserversFrom (&self.mObserversOf_mSymbols)
        oldValue?.placementInSchematics_property.removeEBObserversFrom (&self.mObserversOf_placementInSchematics)
        oldValue?.selectedPackageName_property.removeEBObserversFrom (&self.mObserversOf_selectedPackageName)
        oldValue?.unplacedSymbols_property.removeEBObserversFrom (&self.mObserversOf_unplacedSymbols)
      //--- Add property observers to new object
        self.mValue?.availablePackages_property.addEBObserversFrom (&self.mObserversOf_availablePackages)
        self.mValue?.componentName_property.addEBObserversFrom (&self.mObserversOf_componentName)
        self.mValue?.deviceName_property.addEBObserversFrom (&self.mObserversOf_deviceName)
        self.mValue?.deviceSymbolDictionary_property.addEBObserversFrom (&self.mObserversOf_deviceSymbolDictionary)
        self.mValue?.mComponentValue_property.addEBObserversFrom (&self.mObserversOf_mComponentValue)
        self.mValue?.mNameIndex_property.addEBObserversFrom (&self.mObserversOf_mNameIndex)
        self.mValue?.mNamePrefix_property.addEBObserversFrom (&self.mObserversOf_mNamePrefix)
        self.mValue?.mSymbols_property.addEBObserversFrom (&self.mObserversOf_mSymbols)
        self.mValue?.placementInSchematics_property.addEBObserversFrom (&self.mObserversOf_placementInSchematics)
        self.mValue?.selectedPackageName_property.addEBObserversFrom (&self.mObserversOf_selectedPackageName)
        self.mValue?.unplacedSymbols_property.addEBObserversFrom (&self.mObserversOf_unplacedSymbols)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : ComponentInProject? { return self.mValue }

  var prop : EBSelection <ComponentInProject?> { return .single (self.mValue) }

  func setProp (_ value : ComponentInProject?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : ComponentInProject?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : ComponentInProject) {
    if self.mValue === object {
      self.mValue = nil
    }
  }

  //····················································································································
  //   Observable atomic property: availablePackages
  //····················································································································

  private var mObserversOf_availablePackages = EBWeakEventSet ()

  //····················································································································

  var availablePackages_property_selection : EBSelection <StringArray?> {
    if let model = self.propval {
      switch (model.availablePackages_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_availablePackages (_ inObserver : EBEvent) {
    self.mObserversOf_availablePackages.insert (inObserver)
    if let object = self.propval {
      object.availablePackages_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_availablePackages (_ inObserver : EBEvent) {
    self.mObserversOf_availablePackages.remove (inObserver)
    if let object = self.propval {
      object.availablePackages_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: componentName
  //····················································································································

  private var mObserversOf_componentName = EBWeakEventSet ()

  //····················································································································

  var componentName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.componentName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_componentName (_ inObserver : EBEvent) {
    self.mObserversOf_componentName.insert (inObserver)
    if let object = self.propval {
      object.componentName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_componentName (_ inObserver : EBEvent) {
    self.mObserversOf_componentName.remove (inObserver)
    if let object = self.propval {
      object.componentName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: deviceName
  //····················································································································

  private var mObserversOf_deviceName = EBWeakEventSet ()

  //····················································································································

  var deviceName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.deviceName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_deviceName (_ inObserver : EBEvent) {
    self.mObserversOf_deviceName.insert (inObserver)
    if let object = self.propval {
      object.deviceName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceName (_ inObserver : EBEvent) {
    self.mObserversOf_deviceName.remove (inObserver)
    if let object = self.propval {
      object.deviceName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: deviceSymbolDictionary
  //····················································································································

  private var mObserversOf_deviceSymbolDictionary = EBWeakEventSet ()

  //····················································································································

  var deviceSymbolDictionary_property_selection : EBSelection <DeviceSymbolDictionary?> {
    if let model = self.propval {
      switch (model.deviceSymbolDictionary_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_deviceSymbolDictionary (_ inObserver : EBEvent) {
    self.mObserversOf_deviceSymbolDictionary.insert (inObserver)
    if let object = self.propval {
      object.deviceSymbolDictionary_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceSymbolDictionary (_ inObserver : EBEvent) {
    self.mObserversOf_deviceSymbolDictionary.remove (inObserver)
    if let object = self.propval {
      object.deviceSymbolDictionary_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mComponentValue
  //····················································································································

  private var mObserversOf_mComponentValue = EBWeakEventSet ()

  //····················································································································

  var mComponentValue_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mComponentValue_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mComponentValue (_ inObserver : EBEvent) {
    self.mObserversOf_mComponentValue.insert (inObserver)
    if let object = self.propval {
      object.mComponentValue_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComponentValue (_ inObserver : EBEvent) {
    self.mObserversOf_mComponentValue.remove (inObserver)
    if let object = self.propval {
      object.mComponentValue_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mNameIndex
  //····················································································································

  private var mObserversOf_mNameIndex = EBWeakEventSet ()

  //····················································································································

  var mNameIndex_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mNameIndex_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mNameIndex (_ inObserver : EBEvent) {
    self.mObserversOf_mNameIndex.insert (inObserver)
    if let object = self.propval {
      object.mNameIndex_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNameIndex (_ inObserver : EBEvent) {
    self.mObserversOf_mNameIndex.remove (inObserver)
    if let object = self.propval {
      object.mNameIndex_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mNamePrefix
  //····················································································································

  private var mObserversOf_mNamePrefix = EBWeakEventSet ()

  //····················································································································

  var mNamePrefix_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mNamePrefix_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mNamePrefix (_ inObserver : EBEvent) {
    self.mObserversOf_mNamePrefix.insert (inObserver)
    if let object = self.propval {
      object.mNamePrefix_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNamePrefix (_ inObserver : EBEvent) {
    self.mObserversOf_mNamePrefix.remove (inObserver)
    if let object = self.propval {
      object.mNamePrefix_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mSymbols
  //····················································································································

  private var mObserversOf_mSymbols = EBWeakEventSet ()

  //····················································································································

  var mSymbols_property_selection : EBSelection <[ComponentSymbolInProject]> {
    if let model = self.propval {
      switch (model.mSymbols_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbols (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbols.insert (inObserver)
    if let object = self.propval {
      object.mSymbols_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbols (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbols.remove (inObserver)
    if let object = self.propval {
      object.mSymbols_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: placementInSchematics
  //····················································································································

  private var mObserversOf_placementInSchematics = EBWeakEventSet ()

  //····················································································································

  var placementInSchematics_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.placementInSchematics_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_placementInSchematics (_ inObserver : EBEvent) {
    self.mObserversOf_placementInSchematics.insert (inObserver)
    if let object = self.propval {
      object.placementInSchematics_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_placementInSchematics (_ inObserver : EBEvent) {
    self.mObserversOf_placementInSchematics.remove (inObserver)
    if let object = self.propval {
      object.placementInSchematics_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: selectedPackageName
  //····················································································································

  private var mObserversOf_selectedPackageName = EBWeakEventSet ()

  //····················································································································

  var selectedPackageName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.selectedPackageName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedPackageName (_ inObserver : EBEvent) {
    self.mObserversOf_selectedPackageName.insert (inObserver)
    if let object = self.propval {
      object.selectedPackageName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPackageName (_ inObserver : EBEvent) {
    self.mObserversOf_selectedPackageName.remove (inObserver)
    if let object = self.propval {
      object.selectedPackageName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: unplacedSymbols
  //····················································································································

  private var mObserversOf_unplacedSymbols = EBWeakEventSet ()

  //····················································································································

  var unplacedSymbols_property_selection : EBSelection <StringTagArray?> {
    if let model = self.propval {
      switch (model.unplacedSymbols_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.mObserversOf_unplacedSymbols.insert (inObserver)
    if let object = self.propval {
      object.unplacedSymbols_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.mObserversOf_unplacedSymbols.remove (inObserver)
    if let object = self.propval {
      object.unplacedSymbols_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
