//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePadAssignmentInProject_mPadName : class {
  var mPadName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePadAssignmentInProject_pinPadAssignment : class {
  var pinPadAssignment : ThreeStrings? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePadAssignmentInProject_descriptor : class {
  var descriptor : PinPadAssignmentInProject? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: DevicePadAssignmentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class DevicePadAssignmentInProject : EBManagedObject,
         DevicePadAssignmentInProject_mPadName,
         DevicePadAssignmentInProject_pinPadAssignment,
         DevicePadAssignmentInProject_descriptor {

  //····················································································································
  //   Atomic property: mPadName
  //····················································································································

  let mPadName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mPadName : String {
    get { return self.mPadName_property.propval }
    set { self.mPadName_property.setProp (newValue) }
  }

  //····················································································································

  var mPadName_property_selection : EBSelection <String> { return self.mPadName_property.prop }

  //····················································································································
  //   To one property: mPin
  //····················································································································

  let mPin_property = ToOneRelationship_DevicePadAssignmentInProject_mPin ()

  //····················································································································

  var mPin_property_selection : EBSelection <DevicePinInProject?> {
    return .single (self.mPin_property.propval)
  }

  //····················································································································

  var mPin : DevicePinInProject? {
    get { return self.mPin_property.propval }
    set { self.mPin_property.setProp (newValue) }
  }

  //····················································································································

  var mPin_none : ToOneRelationship_DevicePadAssignmentInProject_mPin { return self.mPin_property }

  //····················································································································

  var mPin_none_selection : EBSelection <Bool> {
    return .single (self.mPin_property.propval == nil)
  }

  //····················································································································
  //   Transient property: pinPadAssignment
  //····················································································································

  let pinPadAssignment_property = EBTransientProperty_ThreeStrings ()

  //····················································································································

  var pinPadAssignment_property_selection : EBSelection <ThreeStrings> {
    return self.pinPadAssignment_property.prop
  }

  //····················································································································

  var pinPadAssignment : ThreeStrings? {
    switch self.pinPadAssignment_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: descriptor
  //····················································································································

  let descriptor_property = EBTransientProperty_PinPadAssignmentInProject ()

  //····················································································································

  var descriptor_property_selection : EBSelection <PinPadAssignmentInProject> {
    return self.descriptor_property.prop
  }

  //····················································································································

  var descriptor : PinPadAssignmentInProject? {
    switch self.descriptor_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mPadName
    self.mPadName_property.ebUndoManager = self.ebUndoManager
  //--- To one property: mPin
    self.mPin_property.owner = self
  //--- Atomic property: pinPadAssignment
    self.pinPadAssignment_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mPadName_property_selection.kind ()
        kind &= unwSelf.mPin_property.mSymbolInstanceName_property_selection.kind ()
        kind &= unwSelf.mPin_property.mPinName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mPadName_property_selection, unwSelf.mPin_property.mSymbolInstanceName_property_selection, unwSelf.mPin_property.mPinName_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_DevicePadAssignmentInProject_pinPadAssignment (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPadName_property.addEBObserver (self.pinPadAssignment_property)
    self.mPin_property.addEBObserverOf_mSymbolInstanceName (self.pinPadAssignment_property)
    self.mPin_property.addEBObserverOf_mPinName (self.pinPadAssignment_property)
  //--- Atomic property: descriptor
    self.descriptor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mPadName_property_selection.kind ()
        kind &= unwSelf.mPin_property.descriptor_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mPadName_property_selection, unwSelf.mPin_property.descriptor_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_DevicePadAssignmentInProject_descriptor (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPadName_property.addEBObserver (self.descriptor_property)
    self.mPin_property.addEBObserverOf_descriptor (self.descriptor_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mPadName_property.removeEBObserver (self.pinPadAssignment_property)
    self.mPin_property.removeEBObserverOf_mSymbolInstanceName (self.pinPadAssignment_property)
    self.mPin_property.removeEBObserverOf_mPinName (self.pinPadAssignment_property)
    self.mPadName_property.removeEBObserver (self.descriptor_property)
    self.mPin_property.removeEBObserverOf_descriptor (self.descriptor_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mPadName",
      idx:self.mPadName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mPadName_property.mObserverExplorer,
      valueExplorer:&self.mPadName_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "pinPadAssignment",
      idx:self.pinPadAssignment_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.pinPadAssignment_property.mObserverExplorer,
      valueExplorer:&self.pinPadAssignment_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "descriptor",
      idx:self.descriptor_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.descriptor_property.mObserverExplorer,
      valueExplorer:&self.descriptor_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "mPin",
      idx:self.mPin_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mPin_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mPadName
    self.mPadName_property.mObserverExplorer = nil
    self.mPadName_property.mValueExplorer = nil
  //--- To one property: mPin
    self.mPin_property.mObserverExplorer = nil
    self.mPin_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mPin_property.setProp (nil)
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mPadName
    self.mPadName_property.storeIn (dictionary: ioDictionary, forKey:"mPadName")
  //--- To one property: mPin
    self.store (managedObject:self.mPin_property.propval,
      relationshipName: "mPin",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To one property: mPin
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mPin",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? DevicePinInProject {
        self.mPin_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mPadName
    self.mPadName_property.readFrom (dictionary: inDictionary, forKey:"mPadName")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To one property: mPin
    if let managedObject = self.mPin_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To one property: mPin
    if let managedObject = self.mPin_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_DevicePadAssignmentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_DevicePadAssignmentInProject : ReadOnlyAbstractArrayProperty <DevicePadAssignmentInProject> {

  //····················································································································
  //   Observers of 'mPadName' stored property
  //····················································································································

  private var mObserversOf_mPadName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPadName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPadName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPadName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPadName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPadName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPadName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPadName_toElementsOfSet (_ inSet : Set<DevicePadAssignmentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mPadName.apply { (_ observer : EBEvent) in
        managedObject.mPadName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPadName_fromElementsOfSet (_ inSet : Set<DevicePadAssignmentInProject>) {
    self.mObserversOf_mPadName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPadName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'pinPadAssignment' transient property
  //····················································································································

  private var mObserversOf_pinPadAssignment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_pinPadAssignment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_pinPadAssignment.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinPadAssignment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_pinPadAssignment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_pinPadAssignment.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinPadAssignment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_pinPadAssignment_toElementsOfSet (_ inSet : Set<DevicePadAssignmentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_pinPadAssignment.apply { (_ observer : EBEvent) in
        managedObject.pinPadAssignment_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_pinPadAssignment_fromElementsOfSet (_ inSet : Set<DevicePadAssignmentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_pinPadAssignment.apply { (_ observer : EBEvent) in
        managedObject.pinPadAssignment_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'descriptor' transient property
  //····················································································································

  private var mObserversOf_descriptor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_descriptor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_descriptor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.descriptor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_descriptor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_descriptor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.descriptor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_descriptor_toElementsOfSet (_ inSet : Set<DevicePadAssignmentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_descriptor.apply { (_ observer : EBEvent) in
        managedObject.descriptor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_descriptor_fromElementsOfSet (_ inSet : Set<DevicePadAssignmentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_descriptor.apply { (_ observer : EBEvent) in
        managedObject.descriptor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_DevicePadAssignmentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_DevicePadAssignmentInProject : ReadOnlyArrayOf_DevicePadAssignmentInProject {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [DevicePadAssignmentInProject] > > = nil

  //····················································································································

  override var propset : Set <DevicePadAssignmentInProject> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [DevicePadAssignmentInProject] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [DevicePadAssignmentInProject] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  private var mSet = Set <DevicePadAssignmentInProject> ()

  //····················································································································

  private var mCachedValue : EBSelection < [DevicePadAssignmentInProject] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      let cachedValue = unwrappedComputeFunction ()
      self.mCachedValue = cachedValue
      let newSet : Set <DevicePadAssignmentInProject>
      switch cachedValue {
      case .multiple, .empty :
        newSet = Set <DevicePadAssignmentInProject> ()
      case .single (let array) :
        newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_mPadName_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_pinPadAssignment_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_descriptor_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_mPadName_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_pinPadAssignment_toElementsOfSet (addedSet)
      self.addEBObserversOf_descriptor_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: DevicePadAssignmentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_DevicePadAssignmentInProject : ReadOnlyArrayOf_DevicePadAssignmentInProject {

  //····················································································································
 
  func setProp (_ value :  [DevicePadAssignmentInProject]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_DevicePadAssignmentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_DevicePadAssignmentInProject : ReadWriteArrayOf_DevicePadAssignmentInProject {

  //····················································································································

  private var mModel : ReadWriteArrayOf_DevicePadAssignmentInProject? = nil

  //····················································································································

  func bind (_ inModel : ReadWriteArrayOf_DevicePadAssignmentInProject) {
    self.unbind ()
    self.mModel = inModel
    inModel.addEBObserver (self)
  }

  //····················································································································

  func unbind () {
    if let model = self.mModel {
      model.removeEBObserver (self)
      self.mModel = nil
    }
  }

  //····················································································································

  override func setProp (_ inArrayValue :  [DevicePadAssignmentInProject]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [DevicePadAssignmentInProject] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: DevicePadAssignmentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_DevicePadAssignmentInProject : ReadWriteArrayOf_DevicePadAssignmentInProject, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : DevicePadAssignmentInProject) -> Void > = nil
  var resetOppositeRelationship : Optional < (_ inManagedObject : DevicePadAssignmentInProject) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [DevicePadAssignmentInProject] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "DevicePadAssignmentInProject") as? DevicePadAssignmentInProject {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <DevicePadAssignmentInProject> ()
  private var mValue = [DevicePadAssignmentInProject] () {
    didSet {
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.resetOppositeRelationship? (managedObject)
            managedObject.mPadName_property.mSetterDelegate = nil
          }
        //--- Remove observers of stored properties
          self.removeEBObserversOf_mPadName_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of transient properties
          self.removeEBObserversOf_pinPadAssignment_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_descriptor_fromElementsOfSet (removedObjectSet)
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : DevicePadAssignmentInProject in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
            managedObject.mPadName_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
        //--- Add observers of stored properties
          self.addEBObserversOf_mPadName_toElementsOfSet (addedObjectSet)
        //--- Add observers of transient properties
          self.addEBObserversOf_pinPadAssignment_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_descriptor_toElementsOfSet (addedObjectSet)
        }
      //--- Notify observers
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [DevicePadAssignmentInProject] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [DevicePadAssignmentInProject]) { self.mValue = inValue }

  //····················································································································

  override var propval : [DevicePadAssignmentInProject] { return self.mValue }

  //····················································································································

  override var propset : Set <DevicePadAssignmentInProject> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [DevicePadAssignmentInProject]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : DevicePadAssignmentInProject) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : DevicePadAssignmentInProject) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: mPin
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_DevicePadAssignmentInProject_mPin : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : DevicePadAssignmentInProject? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  private var mValue : DevicePinInProject? {
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.ebUndoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
      //--- Remove property observers of old object
        oldValue?.descriptor_property.removeEBObserversFrom (&self.mObserversOf_descriptor)
        oldValue?.mNameHorizontalAlignment_property.removeEBObserversFrom (&self.mObserversOf_mNameHorizontalAlignment)
        oldValue?.mNumberHorizontalAlignment_property.removeEBObserversFrom (&self.mObserversOf_mNumberHorizontalAlignment)
        oldValue?.mPinName_property.removeEBObserversFrom (&self.mObserversOf_mPinName)
        oldValue?.mPinNameIsDisplayedInSchematics_property.removeEBObserversFrom (&self.mObserversOf_mPinNameIsDisplayedInSchematics)
        oldValue?.mPinX_property.removeEBObserversFrom (&self.mObserversOf_mPinX)
        oldValue?.mPinY_property.removeEBObserversFrom (&self.mObserversOf_mPinY)
        oldValue?.mSymbolInstanceName_property.removeEBObserversFrom (&self.mObserversOf_mSymbolInstanceName)
        oldValue?.mSymbolTypeName_property.removeEBObserversFrom (&self.mObserversOf_mSymbolTypeName)
        oldValue?.mXName_property.removeEBObserversFrom (&self.mObserversOf_mXName)
        oldValue?.mXNumber_property.removeEBObserversFrom (&self.mObserversOf_mXNumber)
        oldValue?.mYName_property.removeEBObserversFrom (&self.mObserversOf_mYName)
        oldValue?.mYNumber_property.removeEBObserversFrom (&self.mObserversOf_mYNumber)
        oldValue?.pinQualifiedName_property.removeEBObserversFrom (&self.mObserversOf_pinQualifiedName)
      //--- Add property observers to new object
        self.mValue?.descriptor_property.addEBObserversFrom (&self.mObserversOf_descriptor)
        self.mValue?.mNameHorizontalAlignment_property.addEBObserversFrom (&self.mObserversOf_mNameHorizontalAlignment)
        self.mValue?.mNumberHorizontalAlignment_property.addEBObserversFrom (&self.mObserversOf_mNumberHorizontalAlignment)
        self.mValue?.mPinName_property.addEBObserversFrom (&self.mObserversOf_mPinName)
        self.mValue?.mPinNameIsDisplayedInSchematics_property.addEBObserversFrom (&self.mObserversOf_mPinNameIsDisplayedInSchematics)
        self.mValue?.mPinX_property.addEBObserversFrom (&self.mObserversOf_mPinX)
        self.mValue?.mPinY_property.addEBObserversFrom (&self.mObserversOf_mPinY)
        self.mValue?.mSymbolInstanceName_property.addEBObserversFrom (&self.mObserversOf_mSymbolInstanceName)
        self.mValue?.mSymbolTypeName_property.addEBObserversFrom (&self.mObserversOf_mSymbolTypeName)
        self.mValue?.mXName_property.addEBObserversFrom (&self.mObserversOf_mXName)
        self.mValue?.mXNumber_property.addEBObserversFrom (&self.mObserversOf_mXNumber)
        self.mValue?.mYName_property.addEBObserversFrom (&self.mObserversOf_mYName)
        self.mValue?.mYNumber_property.addEBObserversFrom (&self.mObserversOf_mYNumber)
        self.mValue?.pinQualifiedName_property.addEBObserversFrom (&self.mObserversOf_pinQualifiedName)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : DevicePinInProject? { return self.mValue }

  var prop : EBSelection <DevicePinInProject?> { return .single (self.mValue) }

  func setProp (_ value : DevicePinInProject?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : DevicePinInProject?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : DevicePinInProject) {
    if self.mValue === object {
      self.mValue = nil
    }
  }

  //····················································································································
  //   Observable atomic property: descriptor
  //····················································································································

  private var mObserversOf_descriptor = EBWeakEventSet ()

  //····················································································································

  var descriptor_property_selection : EBSelection <PinInProjectDescriptor?> {
    if let model = self.propval {
      switch (model.descriptor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_descriptor (_ inObserver : EBEvent) {
    self.mObserversOf_descriptor.insert (inObserver)
    if let object = self.propval {
      object.descriptor_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_descriptor (_ inObserver : EBEvent) {
    self.mObserversOf_descriptor.remove (inObserver)
    if let object = self.propval {
      object.descriptor_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mNameHorizontalAlignment
  //····················································································································

  private var mObserversOf_mNameHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  var mNameHorizontalAlignment_property_selection : EBSelection <HorizontalAlignment?> {
    if let model = self.propval {
      switch (model.mNameHorizontalAlignment_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mNameHorizontalAlignment (_ inObserver : EBEvent) {
    self.mObserversOf_mNameHorizontalAlignment.insert (inObserver)
    if let object = self.propval {
      object.mNameHorizontalAlignment_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNameHorizontalAlignment (_ inObserver : EBEvent) {
    self.mObserversOf_mNameHorizontalAlignment.remove (inObserver)
    if let object = self.propval {
      object.mNameHorizontalAlignment_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mNumberHorizontalAlignment
  //····················································································································

  private var mObserversOf_mNumberHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  var mNumberHorizontalAlignment_property_selection : EBSelection <HorizontalAlignment?> {
    if let model = self.propval {
      switch (model.mNumberHorizontalAlignment_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mNumberHorizontalAlignment (_ inObserver : EBEvent) {
    self.mObserversOf_mNumberHorizontalAlignment.insert (inObserver)
    if let object = self.propval {
      object.mNumberHorizontalAlignment_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNumberHorizontalAlignment (_ inObserver : EBEvent) {
    self.mObserversOf_mNumberHorizontalAlignment.remove (inObserver)
    if let object = self.propval {
      object.mNumberHorizontalAlignment_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mPinName
  //····················································································································

  private var mObserversOf_mPinName = EBWeakEventSet ()

  //····················································································································

  var mPinName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mPinName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPinName (_ inObserver : EBEvent) {
    self.mObserversOf_mPinName.insert (inObserver)
    if let object = self.propval {
      object.mPinName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinName (_ inObserver : EBEvent) {
    self.mObserversOf_mPinName.remove (inObserver)
    if let object = self.propval {
      object.mPinName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mPinNameIsDisplayedInSchematics
  //····················································································································

  private var mObserversOf_mPinNameIsDisplayedInSchematics = EBWeakEventSet ()

  //····················································································································

  var mPinNameIsDisplayedInSchematics_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mPinNameIsDisplayedInSchematics_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPinNameIsDisplayedInSchematics (_ inObserver : EBEvent) {
    self.mObserversOf_mPinNameIsDisplayedInSchematics.insert (inObserver)
    if let object = self.propval {
      object.mPinNameIsDisplayedInSchematics_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinNameIsDisplayedInSchematics (_ inObserver : EBEvent) {
    self.mObserversOf_mPinNameIsDisplayedInSchematics.remove (inObserver)
    if let object = self.propval {
      object.mPinNameIsDisplayedInSchematics_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mPinX
  //····················································································································

  private var mObserversOf_mPinX = EBWeakEventSet ()

  //····················································································································

  var mPinX_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mPinX_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPinX (_ inObserver : EBEvent) {
    self.mObserversOf_mPinX.insert (inObserver)
    if let object = self.propval {
      object.mPinX_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinX (_ inObserver : EBEvent) {
    self.mObserversOf_mPinX.remove (inObserver)
    if let object = self.propval {
      object.mPinX_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mPinY
  //····················································································································

  private var mObserversOf_mPinY = EBWeakEventSet ()

  //····················································································································

  var mPinY_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mPinY_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPinY (_ inObserver : EBEvent) {
    self.mObserversOf_mPinY.insert (inObserver)
    if let object = self.propval {
      object.mPinY_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinY (_ inObserver : EBEvent) {
    self.mObserversOf_mPinY.remove (inObserver)
    if let object = self.propval {
      object.mPinY_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mSymbolInstanceName
  //····················································································································

  private var mObserversOf_mSymbolInstanceName = EBWeakEventSet ()

  //····················································································································

  var mSymbolInstanceName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mSymbolInstanceName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolInstanceName (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolInstanceName.insert (inObserver)
    if let object = self.propval {
      object.mSymbolInstanceName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolInstanceName (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolInstanceName.remove (inObserver)
    if let object = self.propval {
      object.mSymbolInstanceName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mSymbolTypeName
  //····················································································································

  private var mObserversOf_mSymbolTypeName = EBWeakEventSet ()

  //····················································································································

  var mSymbolTypeName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mSymbolTypeName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolTypeName (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolTypeName.insert (inObserver)
    if let object = self.propval {
      object.mSymbolTypeName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolTypeName (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolTypeName.remove (inObserver)
    if let object = self.propval {
      object.mSymbolTypeName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mXName
  //····················································································································

  private var mObserversOf_mXName = EBWeakEventSet ()

  //····················································································································

  var mXName_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mXName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mXName (_ inObserver : EBEvent) {
    self.mObserversOf_mXName.insert (inObserver)
    if let object = self.propval {
      object.mXName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mXName (_ inObserver : EBEvent) {
    self.mObserversOf_mXName.remove (inObserver)
    if let object = self.propval {
      object.mXName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mXNumber
  //····················································································································

  private var mObserversOf_mXNumber = EBWeakEventSet ()

  //····················································································································

  var mXNumber_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mXNumber_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mXNumber (_ inObserver : EBEvent) {
    self.mObserversOf_mXNumber.insert (inObserver)
    if let object = self.propval {
      object.mXNumber_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mXNumber (_ inObserver : EBEvent) {
    self.mObserversOf_mXNumber.remove (inObserver)
    if let object = self.propval {
      object.mXNumber_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mYName
  //····················································································································

  private var mObserversOf_mYName = EBWeakEventSet ()

  //····················································································································

  var mYName_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mYName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mYName (_ inObserver : EBEvent) {
    self.mObserversOf_mYName.insert (inObserver)
    if let object = self.propval {
      object.mYName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mYName (_ inObserver : EBEvent) {
    self.mObserversOf_mYName.remove (inObserver)
    if let object = self.propval {
      object.mYName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mYNumber
  //····················································································································

  private var mObserversOf_mYNumber = EBWeakEventSet ()

  //····················································································································

  var mYNumber_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mYNumber_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mYNumber (_ inObserver : EBEvent) {
    self.mObserversOf_mYNumber.insert (inObserver)
    if let object = self.propval {
      object.mYNumber_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mYNumber (_ inObserver : EBEvent) {
    self.mObserversOf_mYNumber.remove (inObserver)
    if let object = self.propval {
      object.mYNumber_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: pinQualifiedName
  //····················································································································

  private var mObserversOf_pinQualifiedName = EBWeakEventSet ()

  //····················································································································

  var pinQualifiedName_property_selection : EBSelection <PinQualifiedNameStruct?> {
    if let model = self.propval {
      switch (model.pinQualifiedName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_pinQualifiedName (_ inObserver : EBEvent) {
    self.mObserversOf_pinQualifiedName.insert (inObserver)
    if let object = self.propval {
      object.pinQualifiedName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_pinQualifiedName (_ inObserver : EBEvent) {
    self.mObserversOf_pinQualifiedName.remove (inObserver)
    if let object = self.propval {
      object.pinQualifiedName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
