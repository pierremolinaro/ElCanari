//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol EBEnumProtocol {
  var rawValue : Int { get }
  mutating func setFrom (rawValue : Int)
  static func buildfromRawValue (rawValue : Int) -> Self?
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol EnumPropertyProtocol : ValuePropertyProtocol, EBEnumProtocol {
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum GridStyle : Int, EnumPropertyProtocol {
  case noGrid = 0
  case dot = 1
  case line = 2

  //····················································································································

  func descriptionForExplorer () -> String {
    switch self {
      case .noGrid : return "noGrid" // 0
      case .dot : return "dot" // 1
      case .line : return "line" // 2
    }
  }

  //····················································································································

  static func buildfromRawValue (rawValue : Int) -> GridStyle? {
    if let v = GridStyle (rawValue:rawValue) {
      return v
    }else{
      return nil
    }
  }

  func enumfromRawValue (rawValue : Int) -> GridStyle {
    var result = self
    let v : GridStyle? = GridStyle (rawValue:rawValue) ;
    if let unwrappedV = v {
      result = unwrappedV
    }
    return result
  }

  //····················································································································

  mutating func setFrom (rawValue : Int) {
    if let value = GridStyle (rawValue:rawValue) {
      self = value
    }
  }

  //····················································································································
  //  ValuePropertyProtocol
  //····················································································································

  func ebHashValue () -> UInt32 {
    return UInt32 (self.rawValue)
  }

  func convertToNSObject () -> NSObject {
    return NSNumber (value: self.rawValue)
  }

  static func convertFromNSObject (object : NSObject) -> GridStyle {
    var result = GridStyle.noGrid
    if let number = object as? NSNumber, let v = GridStyle (rawValue: number.intValue) {
      result = v
    }
    return result
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_GridStyle = EBReadOnlyEnumProperty <GridStyle>
typealias EBTransientProperty_GridStyle = EBTransientEnumProperty <GridStyle>
typealias EBReadWriteProperty_GridStyle = EBReadWriteEnumProperty <GridStyle>
typealias EBStoredProperty_GridStyle = EBStoredEnumProperty <GridStyle>
typealias EBPropertyProxy_GridStyle = EBPropertyEnumProxy <GridStyle>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBAbstractEnumProperty : EBAbstractProperty {
  func rawValue () -> Int? { return nil } // Abstract method
  func setFrom (rawValue : Int) {}
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadOnlyEnumProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadOnlyEnumProperty <T : EBEnumProtocol> : EBAbstractEnumProperty {

  var prop : EBSelection <T> { get { return .empty } } // Abstract method

  //····················································································································

  override func rawValue () -> Int? {
    switch self.prop {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v.rawValue
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBReadWriteEnumProperty <T> (abstract class)
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBReadWriteEnumProperty <T : EBEnumProtocol> : EBReadOnlyEnumProperty <T> {

  func setProp (_ value : T) { } // Abstract method

  func validateAndSetProp (_ candidateValue : T, windowForSheet inWindow:NSWindow?) -> Bool {
    return false
  } // Abstract method

  override func setFrom (rawValue : Int) {
    if let v = T.buildfromRawValue (rawValue: rawValue) {
      self.setProp (v)
    }
  }

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBPropertyEnumProxy <T : ValuePropertyProtocol>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBPropertyEnumProxy <T : EnumPropertyProtocol> : EBReadWriteEnumProperty <T> {
  var readModelFunction : Optional < () -> EBSelection <T> >
  var writeModelFunction : Optional < (T) -> Void >
  var validateAndWriteModelFunction : Optional < (T, NSWindow?) -> Bool >

  private var prop_cache : EBSelection <T>?

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      updateValueExplorer (possibleValue:prop_cache)
    }
  }

  //····················································································································

  private func updateValueExplorer (possibleValue : EBSelection <T>?) {
    if let valueExplorer = mValueExplorer, let unwProp = possibleValue {
      switch unwProp {
      case .empty :
        valueExplorer.stringValue = "—"
      case .multiple :
        valueExplorer.stringValue = "—"
      case .single (let value) :
        valueExplorer.stringValue = "\(value)"
      }
    }else{
      mValueExplorer?.stringValue = "nil"
    }
  }

  //····················································································································

  override func postEvent () {
    if prop_cache != nil {
      prop_cache = nil
      if logEvents () {
        appendMessageString ("Proxy \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("Proxy \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

  override var prop : EBSelection <T> {
    get {
      if let unReadModelFunction = readModelFunction, prop_cache == nil {
        prop_cache = unReadModelFunction ()
        updateValueExplorer (possibleValue:prop_cache)
      }
      if prop_cache == nil {
        prop_cache = .empty
      }
      return prop_cache!
    }
  }

  //····················································································································

  override func setProp (_ value : T) {
    if let unWriteModelFunction = writeModelFunction {
      unWriteModelFunction (value)
    }
  }

  //····················································································································

  override func validateAndSetProp (_ candidateValue : T,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = false
    if let unwValidateAndWriteModelFunction = validateAndWriteModelFunction {
      result = unwValidateAndWriteModelFunction (candidateValue, inWindow)
    }
    return result
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBStoredEnumProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class EBStoredEnumProperty <T : EnumPropertyProtocol> : EBReadWriteEnumProperty <T> {
  weak var undoManager : UndoManager?
  fileprivate var mPreferenceKey : String?

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      mValueExplorer?.stringValue = "\(mValue)"
    }
  }

  //····················································································································

  init (_ inValue : T) {
    mValue = inValue
    mPreferenceKey = nil
    super.init ()
  }

  //····················································································································

  init (_ inValue : T, prefKey inPreferenceKey : String) {
    mValue = inValue
    mPreferenceKey = inPreferenceKey
    super.init ()
  //--- Read from preferences
    let value : Any? = UserDefaults.standard.object (forKey: inPreferenceKey)
    if let unwValue : NSObject = value as? NSObject {
      setProp (T.convertFromNSObject (object:unwValue))
    }
  }

  //····················································································································

  private var mValue : T {
    didSet {
      if mValue != oldValue {
        if let prefKey = self.mPreferenceKey {
          UserDefaults.standard.set (mValue.convertToNSObject (), forKey:prefKey)
        }
        mValueExplorer?.stringValue = "\(mValue)"
        undoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object: oldValue.convertToNSObject ())
        if logEvents () {
          appendMessageString ("Property \(explorerIndexString (self.mEasyBindingsObjectIndex)) did change value to \(mValue)\n")
        }
        postEvent ()
        clearSignatureCache ()
      }
    }
  }

  //····················································································································

  @objc func performUndo (_ oldValue : NSNumber) {
    mValue = T.convertFromNSObject (object:oldValue)
  }

  //····················································································································

  override var prop : EBSelection<T> { get { return .single (mValue) } }

  var propval : T { get { return mValue } }

  override func setProp (_ value : T) { mValue = value }

  //····················································································································

  var validationFunction : (T, T) -> EBValidationResult <T> = defaultValidationFunction

  override func validateAndSetProp (_ candidateValue : T,
                                    windowForSheet inWindow:NSWindow?) -> Bool {
    var result = true
    let validationResult = validationFunction (propval, candidateValue)
    switch validationResult {
    case EBValidationResult.ok (let validatedValue) :
      setProp (validatedValue)
    case EBValidationResult.rejectWithBeep :
      result = false
      __NSBeep ()
    case EBValidationResult.rejectWithAlert (let informativeText) :
      result = false
      let alert = NSAlert ()
      alert.messageText = "The value " + String (describing: candidateValue) + " is invalid."
      alert.informativeText = informativeText
      alert.addButton (withTitle:"Ok")
      alert.addButton (withTitle:"Discard Change")
      if let window = inWindow {
        alert.beginSheetModal (
          for:window,
          completionHandler:{ (response : NSApplication.ModalResponse) in
            if response == NSApplication.ModalResponse.alertSecondButtonReturn { // Discard Change
              self.postEvent ()
            }
          }
        )
      }else{
        alert.runModal ()
      }
    }
    return result
  }

  //····················································································································

  func storeIn (dictionary:NSMutableDictionary, forKey inKey:String) {
    dictionary.setValue (mValue.convertToNSObject (), forKey:inKey)
  }

  //····················································································································

  func readFrom (dictionary: NSDictionary, forKey inKey:String) {
    let value : Any? = dictionary.object (forKey:inKey)
    if let unwValue : NSObject = value as? NSObject {
      setProp (T.convertFromNSObject (object:unwValue))
    }
  }

  //····················································································································
  //    SIGNATURE
  //····················································································································

  final private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil
  final private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol) {
    mSignatureObserver = observer
  }

  //····················································································································

  final private func clearSignatureCache () {
    if mSignatureCache != nil {
      mSignatureCache = nil
      mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = propval.ebHashValue ()
      mSignatureCache = computedSignature
    }
    return computedSignature
  }

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//   EBTransientEnumProperty <T>
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class EBTransientEnumProperty <T : EBEnumProtocol> : EBReadOnlyEnumProperty <T> {
  private var mValueCache : EBSelection <T>? = nil
  var readModelFunction : Optional<() -> EBSelection <T> >

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  var mValueExplorer : NSTextField? {
    didSet {
      if let valueCache = mValueCache {
        mValueExplorer?.stringValue = "\(valueCache)"
      }else{
        mValueExplorer?.stringValue = "nil"
      }
    }
  }

  //····················································································································

  override var prop : EBSelection <T> {
    get {
      if mValueCache == nil {
        if let unwrappedComputeFunction = readModelFunction {
          mValueCache = unwrappedComputeFunction ()
        }
        if mValueCache == nil {
          mValueCache = .empty
        }
        mValueExplorer?.stringValue = "\(mValueCache!)"
      }
      return mValueCache!
    }
  }

  //····················································································································

  override func postEvent () {
    if mValueCache != nil {
      mValueCache = nil
      mValueExplorer?.stringValue = "nil"
      if logEvents () {
        appendMessageString ("Transient \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("Transient \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}



