//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

var g_Preferences : Preferences? = nil

//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(Preferences) class Preferences : EBObject {

  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var mAddLibraryEntryButton : EBButton? = nil
  @IBOutlet var mAdditionnalLibraryArrayTableView : EBTableView? = nil
  @IBOutlet var mBoardBackgroundColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSideLayoutColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSideLegendColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSideRestrictRectangleColorWell : EBColorWell? = nil
  @IBOutlet var mBoardClearanceColorWell : EBColorWell? = nil
  @IBOutlet var mBoardDotColorGridColorWell : EBColorWell? = nil
  @IBOutlet var mBoardDrawErrorBackgroundCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardDrawWarningBackgroundCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardErrorBackgroundColorWell : EBColorWell? = nil
  @IBOutlet var mBoardLimitsColorWell : EBColorWell? = nil
  @IBOutlet var mBoardLineColorGridColorWell : EBColorWell? = nil
  @IBOutlet var mBoardPackageDrawingWidthMultipliedByTenPopupButton : EBPopUpButton? = nil
  @IBOutlet var mBoardPadFontButton : EBFontButton? = nil
  @IBOutlet var mBoardPadNumberColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSideLayoutColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSideLegendColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSideRestrictRectangleColorWell : EBColorWell? = nil
  @IBOutlet var mBoardWarningBackgroundColorWell : EBColorWell? = nil
  @IBOutlet var mBottomSidePadColorDorDeviveColorWell : EBColorWell? = nil
  @IBOutlet var mBottomSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mCheckForLibraryUpdatesButton : EBButton? = nil
  @IBOutlet var mCheckForSystemLibraryAtStartUpSwitch : EBSwitch? = nil
  @IBOutlet var mCheckLibraryAction : EBButton? = nil
  @IBOutlet var mCheckLibraryResultTextView : NSTextView? = nil
  @IBOutlet var mCheckingForLibraryUpdateProgressIndicator : EBProgressIndicator? = nil
  @IBOutlet var mCheckingForLibraryUpdateWindow : EBWindow? = nil
  @IBOutlet var mConnectionColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mDimensionFontButton : EBFontButton? = nil
  @IBOutlet var mDotColorGridForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mDotColorOfPackageGridColorWell : EBColorWell? = nil
  @IBOutlet var mDotColorOfSymbolGridColorWell : EBColorWell? = nil
  @IBOutlet var mEditionTransparencySlider : EBSlider? = nil
  @IBOutlet var mEditionTransparencyTextField : EBDoubleField? = nil
  @IBOutlet var mErrorMessageColorColorWell : EBColorWell? = nil
  @IBOutlet var mFontCharacterSelectButton : CanariFontCharacterSelectButton? = nil
  @IBOutlet var mInformativeTextInLibraryUpdateWindow : EBTextField? = nil
  @IBOutlet var mLibraryUpdateWindow : EBWindow? = nil
  @IBOutlet var mLineColorGridForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mLineColorOfPackageGridColorWell : EBColorWell? = nil
  @IBOutlet var mLineColorOfSymbolGridColorWell : EBColorWell? = nil
  @IBOutlet var mMenuRevealInFinder_artworks : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_devices : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_fonts : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_packages : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_symbols : CanariMenu? = nil
  @IBOutlet var mPackageBackgroundColorColorWell : EBColorWell? = nil
  @IBOutlet var mPackageColorColorWell : EBColorWell? = nil
  @IBOutlet var mPackageColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mPackageDimensionColorWell : EBColorWell? = nil
  @IBOutlet var mPackageDrawingWidthMultipliedByTenForDevicePopupButton : EBPopUpButton? = nil
  @IBOutlet var mPackageDrawingWidthMultipliedByTenPopupButton : EBPopUpButton? = nil
  @IBOutlet var mPackageGuideColorWell : EBColorWell? = nil
  @IBOutlet var mPackageNameFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mPadFontButton : EBFontButton? = nil
  @IBOutlet var mPadNumberColorColorWell : EBColorWell? = nil
  @IBOutlet var mPadNumberColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mPadNumberFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mPadZoneColorColorWell : EBColorWell? = nil
  @IBOutlet var mPinNameColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mPinNameFontButton : EBFontButton? = nil
  @IBOutlet var mPinNameFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mPinNameFontForSchematicFontButton : EBFontButton? = nil
  @IBOutlet var mPinNumberColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mPinNumberFontForSchematicFontButton : EBFontButton? = nil
  @IBOutlet var mPrefsWindow : EBWindow? = nil
  @IBOutlet var mProgressIndicatorInLibraryUpdateWindow : EBProgressIndicator? = nil
  @IBOutlet var mRemoveLibraryEntryButton : EBButton? = nil
  @IBOutlet var mRevealInFinderLibraryInUserApplicationSupportButton : EBButton? = nil
  @IBOutlet var mSampleStringField : EBTextField? = nil
  @IBOutlet var mSampleStringSizeField : EBDoubleField? = nil
  @IBOutlet var mSelectionHiliteColorColorWell : EBColorWell? = nil
  @IBOutlet var mShowGerberDrawingFlowCheckbox : EBSwitch? = nil
  @IBOutlet var mShowGerberDrawingIndexesCheckbox : EBSwitch? = nil
  @IBOutlet var mSuccessMessageColorColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolAndPackageBackgroundColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolAndPackageGridDotColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolAndPackageLineDotColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolBackgroundColorColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolColorColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolDrawingWidthMultipliedByTenForDevicePopupButton : EBPopUpButton? = nil
  @IBOutlet var mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton : EBPopUpButton? = nil
  @IBOutlet var mSymbolDrawingWidthMultipliedByTenPopupButton : EBPopUpButton? = nil
  @IBOutlet var mSymbolNameFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mTableViewInLibraryUpdateWindow : EBTableView? = nil
  @IBOutlet var mToolbar : CanariToolbar? = nil
  @IBOutlet var mTopSidePadColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mTopSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mUnplacedComponentsColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mUpDateButtonInLibraryUpdateWindow : EBButton? = nil
  @IBOutlet var mUpDateLibraryMenuItemInCanariMenu : EBMenuItem? = nil
  @IBOutlet var mUpdateSystemLibraryBox : NSBox? = nil
  @IBOutlet var mUseLibraryInUserApplicationSupportPathCheckBox : EBSwitch? = nil
  @IBOutlet var mWarningMessageColorColorWell : EBColorWell? = nil
  @IBOutlet var selectionHilitePopupButton : EBPopUpButton? = nil

  //····················································································································
  //   Accessing errorMessageColor stored property
  //····················································································································

  var errorMessageColor : NSColor {
    get {
      return self.errorMessageColor_property.propval
    }
    set {
      self.errorMessageColor_property.setProp (newValue)
    }
  }

  var errorMessageColor_property_selection : EBSelection <NSColor> {
    get {
      return self.errorMessageColor_property.prop
    }
  }

  //····················································································································
  //   Accessing warningMessageColor stored property
  //····················································································································

  var warningMessageColor : NSColor {
    get {
      return self.warningMessageColor_property.propval
    }
    set {
      self.warningMessageColor_property.setProp (newValue)
    }
  }

  var warningMessageColor_property_selection : EBSelection <NSColor> {
    get {
      return self.warningMessageColor_property.prop
    }
  }

  //····················································································································
  //   Accessing successMessageColor stored property
  //····················································································································

  var successMessageColor : NSColor {
    get {
      return self.successMessageColor_property.propval
    }
    set {
      self.successMessageColor_property.setProp (newValue)
    }
  }

  var successMessageColor_property_selection : EBSelection <NSColor> {
    get {
      return self.successMessageColor_property.prop
    }
  }

  //····················································································································
  //   Accessing selectionHiliteColor stored property
  //····················································································································

  var selectionHiliteColor : NSColor {
    get {
      return self.selectionHiliteColor_property.propval
    }
    set {
      self.selectionHiliteColor_property.setProp (newValue)
    }
  }

  var selectionHiliteColor_property_selection : EBSelection <NSColor> {
    get {
      return self.selectionHiliteColor_property.prop
    }
  }

  //····················································································································
  //   Accessing hiliteWidthMultipliedByTen stored property
  //····················································································································

  var hiliteWidthMultipliedByTen : Int {
    get {
      return self.hiliteWidthMultipliedByTen_property.propval
    }
    set {
      self.hiliteWidthMultipliedByTen_property.setProp (newValue)
    }
  }

  var hiliteWidthMultipliedByTen_property_selection : EBSelection <Int> {
    get {
      return self.hiliteWidthMultipliedByTen_property.prop
    }
  }

  //····················································································································
  //   Accessing symbolColor stored property
  //····················································································································

  var symbolColor : NSColor {
    get {
      return self.symbolColor_property.propval
    }
    set {
      self.symbolColor_property.setProp (newValue)
    }
  }

  var symbolColor_property_selection : EBSelection <NSColor> {
    get {
      return self.symbolColor_property.prop
    }
  }

  //····················································································································
  //   Accessing dotColorOfSymbolGrid stored property
  //····················································································································

  var dotColorOfSymbolGrid : NSColor {
    get {
      return self.dotColorOfSymbolGrid_property.propval
    }
    set {
      self.dotColorOfSymbolGrid_property.setProp (newValue)
    }
  }

  var dotColorOfSymbolGrid_property_selection : EBSelection <NSColor> {
    get {
      return self.dotColorOfSymbolGrid_property.prop
    }
  }

  //····················································································································
  //   Accessing lineColorOfSymbolGrid stored property
  //····················································································································

  var lineColorOfSymbolGrid : NSColor {
    get {
      return self.lineColorOfSymbolGrid_property.propval
    }
    set {
      self.lineColorOfSymbolGrid_property.setProp (newValue)
    }
  }

  var lineColorOfSymbolGrid_property_selection : EBSelection <NSColor> {
    get {
      return self.lineColorOfSymbolGrid_property.prop
    }
  }

  //····················································································································
  //   Accessing symbolBackgroundColor stored property
  //····················································································································

  var symbolBackgroundColor : NSColor {
    get {
      return self.symbolBackgroundColor_property.propval
    }
    set {
      self.symbolBackgroundColor_property.setProp (newValue)
    }
  }

  var symbolBackgroundColor_property_selection : EBSelection <NSColor> {
    get {
      return self.symbolBackgroundColor_property.prop
    }
  }

  //····················································································································
  //   Accessing symbolDrawingWidthMultipliedByTen stored property
  //····················································································································

  var symbolDrawingWidthMultipliedByTen : Int {
    get {
      return self.symbolDrawingWidthMultipliedByTen_property.propval
    }
    set {
      self.symbolDrawingWidthMultipliedByTen_property.setProp (newValue)
    }
  }

  var symbolDrawingWidthMultipliedByTen_property_selection : EBSelection <Int> {
    get {
      return self.symbolDrawingWidthMultipliedByTen_property.prop
    }
  }

  //····················································································································
  //   Accessing pinNameFont stored property
  //····················································································································

  var pinNameFont : NSFont {
    get {
      return self.pinNameFont_property.propval
    }
    set {
      self.pinNameFont_property.setProp (newValue)
    }
  }

  var pinNameFont_property_selection : EBSelection <NSFont> {
    get {
      return self.pinNameFont_property.prop
    }
  }

  //····················································································································
  //   Accessing dotColorOfPackageGrid stored property
  //····················································································································

  var dotColorOfPackageGrid : NSColor {
    get {
      return self.dotColorOfPackageGrid_property.propval
    }
    set {
      self.dotColorOfPackageGrid_property.setProp (newValue)
    }
  }

  var dotColorOfPackageGrid_property_selection : EBSelection <NSColor> {
    get {
      return self.dotColorOfPackageGrid_property.prop
    }
  }

  //····················································································································
  //   Accessing lineColorOfPackageGrid stored property
  //····················································································································

  var lineColorOfPackageGrid : NSColor {
    get {
      return self.lineColorOfPackageGrid_property.propval
    }
    set {
      self.lineColorOfPackageGrid_property.setProp (newValue)
    }
  }

  var lineColorOfPackageGrid_property_selection : EBSelection <NSColor> {
    get {
      return self.lineColorOfPackageGrid_property.prop
    }
  }

  //····················································································································
  //   Accessing packageBackgroundColor stored property
  //····················································································································

  var packageBackgroundColor : NSColor {
    get {
      return self.packageBackgroundColor_property.propval
    }
    set {
      self.packageBackgroundColor_property.setProp (newValue)
    }
  }

  var packageBackgroundColor_property_selection : EBSelection <NSColor> {
    get {
      return self.packageBackgroundColor_property.prop
    }
  }

  //····················································································································
  //   Accessing packageColor stored property
  //····················································································································

  var packageColor : NSColor {
    get {
      return self.packageColor_property.propval
    }
    set {
      self.packageColor_property.setProp (newValue)
    }
  }

  var packageColor_property_selection : EBSelection <NSColor> {
    get {
      return self.packageColor_property.prop
    }
  }

  //····················································································································
  //   Accessing topSidePadColor stored property
  //····················································································································

  var topSidePadColor : NSColor {
    get {
      return self.topSidePadColor_property.propval
    }
    set {
      self.topSidePadColor_property.setProp (newValue)
    }
  }

  var topSidePadColor_property_selection : EBSelection <NSColor> {
    get {
      return self.topSidePadColor_property.prop
    }
  }

  //····················································································································
  //   Accessing bottomSidePadColor stored property
  //····················································································································

  var bottomSidePadColor : NSColor {
    get {
      return self.bottomSidePadColor_property.propval
    }
    set {
      self.bottomSidePadColor_property.setProp (newValue)
    }
  }

  var bottomSidePadColor_property_selection : EBSelection <NSColor> {
    get {
      return self.bottomSidePadColor_property.prop
    }
  }

  //····················································································································
  //   Accessing padNumberColor stored property
  //····················································································································

  var padNumberColor : NSColor {
    get {
      return self.padNumberColor_property.propval
    }
    set {
      self.padNumberColor_property.setProp (newValue)
    }
  }

  var padNumberColor_property_selection : EBSelection <NSColor> {
    get {
      return self.padNumberColor_property.prop
    }
  }

  //····················································································································
  //   Accessing padNumberFont stored property
  //····················································································································

  var padNumberFont : NSFont {
    get {
      return self.padNumberFont_property.propval
    }
    set {
      self.padNumberFont_property.setProp (newValue)
    }
  }

  var padNumberFont_property_selection : EBSelection <NSFont> {
    get {
      return self.padNumberFont_property.prop
    }
  }

  //····················································································································
  //   Accessing packageGuideColor stored property
  //····················································································································

  var packageGuideColor : NSColor {
    get {
      return self.packageGuideColor_property.propval
    }
    set {
      self.packageGuideColor_property.setProp (newValue)
    }
  }

  var packageGuideColor_property_selection : EBSelection <NSColor> {
    get {
      return self.packageGuideColor_property.prop
    }
  }

  //····················································································································
  //   Accessing packageDimensionColor stored property
  //····················································································································

  var packageDimensionColor : NSColor {
    get {
      return self.packageDimensionColor_property.propval
    }
    set {
      self.packageDimensionColor_property.setProp (newValue)
    }
  }

  var packageDimensionColor_property_selection : EBSelection <NSColor> {
    get {
      return self.packageDimensionColor_property.prop
    }
  }

  //····················································································································
  //   Accessing dimensionFont stored property
  //····················································································································

  var dimensionFont : NSFont {
    get {
      return self.dimensionFont_property.propval
    }
    set {
      self.dimensionFont_property.setProp (newValue)
    }
  }

  var dimensionFont_property_selection : EBSelection <NSFont> {
    get {
      return self.dimensionFont_property.prop
    }
  }

  //····················································································································
  //   Accessing padZoneColor stored property
  //····················································································································

  var padZoneColor : NSColor {
    get {
      return self.padZoneColor_property.propval
    }
    set {
      self.padZoneColor_property.setProp (newValue)
    }
  }

  var padZoneColor_property_selection : EBSelection <NSColor> {
    get {
      return self.padZoneColor_property.prop
    }
  }

  //····················································································································
  //   Accessing packageDrawingWidthMultipliedByTen stored property
  //····················································································································

  var packageDrawingWidthMultipliedByTen : Int {
    get {
      return self.packageDrawingWidthMultipliedByTen_property.propval
    }
    set {
      self.packageDrawingWidthMultipliedByTen_property.setProp (newValue)
    }
  }

  var packageDrawingWidthMultipliedByTen_property_selection : EBSelection <Int> {
    get {
      return self.packageDrawingWidthMultipliedByTen_property.prop
    }
  }

  //····················································································································
  //   Accessing mSymbolAndPackageGridDotColorForDevice stored property
  //····················································································································

  var mSymbolAndPackageGridDotColorForDevice : NSColor {
    get {
      return self.mSymbolAndPackageGridDotColorForDevice_property.propval
    }
    set {
      self.mSymbolAndPackageGridDotColorForDevice_property.setProp (newValue)
    }
  }

  var mSymbolAndPackageGridDotColorForDevice_property_selection : EBSelection <NSColor> {
    get {
      return self.mSymbolAndPackageGridDotColorForDevice_property.prop
    }
  }

  //····················································································································
  //   Accessing mSymbolAndPackageGridLineColorForDevice stored property
  //····················································································································

  var mSymbolAndPackageGridLineColorForDevice : NSColor {
    get {
      return self.mSymbolAndPackageGridLineColorForDevice_property.propval
    }
    set {
      self.mSymbolAndPackageGridLineColorForDevice_property.setProp (newValue)
    }
  }

  var mSymbolAndPackageGridLineColorForDevice_property_selection : EBSelection <NSColor> {
    get {
      return self.mSymbolAndPackageGridLineColorForDevice_property.prop
    }
  }

  //····················································································································
  //   Accessing mSymbolAndPackageBackgroundColorForDevice stored property
  //····················································································································

  var mSymbolAndPackageBackgroundColorForDevice : NSColor {
    get {
      return self.mSymbolAndPackageBackgroundColorForDevice_property.propval
    }
    set {
      self.mSymbolAndPackageBackgroundColorForDevice_property.setProp (newValue)
    }
  }

  var mSymbolAndPackageBackgroundColorForDevice_property_selection : EBSelection <NSColor> {
    get {
      return self.mSymbolAndPackageBackgroundColorForDevice_property.prop
    }
  }

  //····················································································································
  //   Accessing mPackageColorForDevice stored property
  //····················································································································

  var mPackageColorForDevice : NSColor {
    get {
      return self.mPackageColorForDevice_property.propval
    }
    set {
      self.mPackageColorForDevice_property.setProp (newValue)
    }
  }

  var mPackageColorForDevice_property_selection : EBSelection <NSColor> {
    get {
      return self.mPackageColorForDevice_property.prop
    }
  }

  //····················································································································
  //   Accessing mTopSidePadColorForDevice stored property
  //····················································································································

  var mTopSidePadColorForDevice : NSColor {
    get {
      return self.mTopSidePadColorForDevice_property.propval
    }
    set {
      self.mTopSidePadColorForDevice_property.setProp (newValue)
    }
  }

  var mTopSidePadColorForDevice_property_selection : EBSelection <NSColor> {
    get {
      return self.mTopSidePadColorForDevice_property.prop
    }
  }

  //····················································································································
  //   Accessing mBottomSidePadColorForDevice stored property
  //····················································································································

  var mBottomSidePadColorForDevice : NSColor {
    get {
      return self.mBottomSidePadColorForDevice_property.propval
    }
    set {
      self.mBottomSidePadColorForDevice_property.setProp (newValue)
    }
  }

  var mBottomSidePadColorForDevice_property_selection : EBSelection <NSColor> {
    get {
      return self.mBottomSidePadColorForDevice_property.prop
    }
  }

  //····················································································································
  //   Accessing mPadNumberColorForDevice stored property
  //····················································································································

  var mPadNumberColorForDevice : NSColor {
    get {
      return self.mPadNumberColorForDevice_property.propval
    }
    set {
      self.mPadNumberColorForDevice_property.setProp (newValue)
    }
  }

  var mPadNumberColorForDevice_property_selection : EBSelection <NSColor> {
    get {
      return self.mPadNumberColorForDevice_property.prop
    }
  }

  //····················································································································
  //   Accessing mPackageNameFontForDevice stored property
  //····················································································································

  var mPackageNameFontForDevice : NSFont {
    get {
      return self.mPackageNameFontForDevice_property.propval
    }
    set {
      self.mPackageNameFontForDevice_property.setProp (newValue)
    }
  }

  var mPackageNameFontForDevice_property_selection : EBSelection <NSFont> {
    get {
      return self.mPackageNameFontForDevice_property.prop
    }
  }

  //····················································································································
  //   Accessing mPadNumberFontForDevice stored property
  //····················································································································

  var mPadNumberFontForDevice : NSFont {
    get {
      return self.mPadNumberFontForDevice_property.propval
    }
    set {
      self.mPadNumberFontForDevice_property.setProp (newValue)
    }
  }

  var mPadNumberFontForDevice_property_selection : EBSelection <NSFont> {
    get {
      return self.mPadNumberFontForDevice_property.prop
    }
  }

  //····················································································································
  //   Accessing mSymbolColorForDevice stored property
  //····················································································································

  var mSymbolColorForDevice : NSColor {
    get {
      return self.mSymbolColorForDevice_property.propval
    }
    set {
      self.mSymbolColorForDevice_property.setProp (newValue)
    }
  }

  var mSymbolColorForDevice_property_selection : EBSelection <NSColor> {
    get {
      return self.mSymbolColorForDevice_property.prop
    }
  }

  //····················································································································
  //   Accessing mSymbolNameFontForDevice stored property
  //····················································································································

  var mSymbolNameFontForDevice : NSFont {
    get {
      return self.mSymbolNameFontForDevice_property.propval
    }
    set {
      self.mSymbolNameFontForDevice_property.setProp (newValue)
    }
  }

  var mSymbolNameFontForDevice_property_selection : EBSelection <NSFont> {
    get {
      return self.mSymbolNameFontForDevice_property.prop
    }
  }

  //····················································································································
  //   Accessing mPinNameFontForDevice stored property
  //····················································································································

  var mPinNameFontForDevice : NSFont {
    get {
      return self.mPinNameFontForDevice_property.propval
    }
    set {
      self.mPinNameFontForDevice_property.setProp (newValue)
    }
  }

  var mPinNameFontForDevice_property_selection : EBSelection <NSFont> {
    get {
      return self.mPinNameFontForDevice_property.prop
    }
  }

  //····················································································································
  //   Accessing symbolDrawingWidthForDeviceMultipliedByTen stored property
  //····················································································································

  var symbolDrawingWidthForDeviceMultipliedByTen : Int {
    get {
      return self.symbolDrawingWidthForDeviceMultipliedByTen_property.propval
    }
    set {
      self.symbolDrawingWidthForDeviceMultipliedByTen_property.setProp (newValue)
    }
  }

  var symbolDrawingWidthForDeviceMultipliedByTen_property_selection : EBSelection <Int> {
    get {
      return self.symbolDrawingWidthForDeviceMultipliedByTen_property.prop
    }
  }

  //····················································································································
  //   Accessing packageDrawingWidthForDeviceMultipliedByTen stored property
  //····················································································································

  var packageDrawingWidthForDeviceMultipliedByTen : Int {
    get {
      return self.packageDrawingWidthForDeviceMultipliedByTen_property.propval
    }
    set {
      self.packageDrawingWidthForDeviceMultipliedByTen_property.setProp (newValue)
    }
  }

  var packageDrawingWidthForDeviceMultipliedByTen_property_selection : EBSelection <Int> {
    get {
      return self.packageDrawingWidthForDeviceMultipliedByTen_property.prop
    }
  }

  //····················································································································
  //   Accessing dotColorGridForSchematic stored property
  //····················································································································

  var dotColorGridForSchematic : NSColor {
    get {
      return self.dotColorGridForSchematic_property.propval
    }
    set {
      self.dotColorGridForSchematic_property.setProp (newValue)
    }
  }

  var dotColorGridForSchematic_property_selection : EBSelection <NSColor> {
    get {
      return self.dotColorGridForSchematic_property.prop
    }
  }

  //····················································································································
  //   Accessing lineColorGridForSchematic stored property
  //····················································································································

  var lineColorGridForSchematic : NSColor {
    get {
      return self.lineColorGridForSchematic_property.propval
    }
    set {
      self.lineColorGridForSchematic_property.setProp (newValue)
    }
  }

  var lineColorGridForSchematic_property_selection : EBSelection <NSColor> {
    get {
      return self.lineColorGridForSchematic_property.prop
    }
  }

  //····················································································································
  //   Accessing symbolColorForUnplacedComponentsForSchematic stored property
  //····················································································································

  var symbolColorForUnplacedComponentsForSchematic : NSColor {
    get {
      return self.symbolColorForUnplacedComponentsForSchematic_property.propval
    }
    set {
      self.symbolColorForUnplacedComponentsForSchematic_property.setProp (newValue)
    }
  }

  var symbolColorForUnplacedComponentsForSchematic_property_selection : EBSelection <NSColor> {
    get {
      return self.symbolColorForUnplacedComponentsForSchematic_property.prop
    }
  }

  //····················································································································
  //   Accessing symbolColorForSchematic stored property
  //····················································································································

  var symbolColorForSchematic : NSColor {
    get {
      return self.symbolColorForSchematic_property.propval
    }
    set {
      self.symbolColorForSchematic_property.setProp (newValue)
    }
  }

  var symbolColorForSchematic_property_selection : EBSelection <NSColor> {
    get {
      return self.symbolColorForSchematic_property.prop
    }
  }

  //····················································································································
  //   Accessing pinNameFontForSchematic stored property
  //····················································································································

  var pinNameFontForSchematic : NSFont {
    get {
      return self.pinNameFontForSchematic_property.propval
    }
    set {
      self.pinNameFontForSchematic_property.setProp (newValue)
    }
  }

  var pinNameFontForSchematic_property_selection : EBSelection <NSFont> {
    get {
      return self.pinNameFontForSchematic_property.prop
    }
  }

  //····················································································································
  //   Accessing pinNameColorForSchematic stored property
  //····················································································································

  var pinNameColorForSchematic : NSColor {
    get {
      return self.pinNameColorForSchematic_property.propval
    }
    set {
      self.pinNameColorForSchematic_property.setProp (newValue)
    }
  }

  var pinNameColorForSchematic_property_selection : EBSelection <NSColor> {
    get {
      return self.pinNameColorForSchematic_property.prop
    }
  }

  //····················································································································
  //   Accessing pinNumberFontForSchematic stored property
  //····················································································································

  var pinNumberFontForSchematic : NSFont {
    get {
      return self.pinNumberFontForSchematic_property.propval
    }
    set {
      self.pinNumberFontForSchematic_property.setProp (newValue)
    }
  }

  var pinNumberFontForSchematic_property_selection : EBSelection <NSFont> {
    get {
      return self.pinNumberFontForSchematic_property.prop
    }
  }

  //····················································································································
  //   Accessing pinNumberColorForSchematic stored property
  //····················································································································

  var pinNumberColorForSchematic : NSColor {
    get {
      return self.pinNumberColorForSchematic_property.propval
    }
    set {
      self.pinNumberColorForSchematic_property.setProp (newValue)
    }
  }

  var pinNumberColorForSchematic_property_selection : EBSelection <NSColor> {
    get {
      return self.pinNumberColorForSchematic_property.prop
    }
  }

  //····················································································································
  //   Accessing connectionColorForSchematic stored property
  //····················································································································

  var connectionColorForSchematic : NSColor {
    get {
      return self.connectionColorForSchematic_property.propval
    }
    set {
      self.connectionColorForSchematic_property.setProp (newValue)
    }
  }

  var connectionColorForSchematic_property_selection : EBSelection <NSColor> {
    get {
      return self.connectionColorForSchematic_property.prop
    }
  }

  //····················································································································
  //   Accessing symbolDrawingWidthMultipliedByTenForSchematic stored property
  //····················································································································

  var symbolDrawingWidthMultipliedByTenForSchematic : Int {
    get {
      return self.symbolDrawingWidthMultipliedByTenForSchematic_property.propval
    }
    set {
      self.symbolDrawingWidthMultipliedByTenForSchematic_property.setProp (newValue)
    }
  }

  var symbolDrawingWidthMultipliedByTenForSchematic_property_selection : EBSelection <Int> {
    get {
      return self.symbolDrawingWidthMultipliedByTenForSchematic_property.prop
    }
  }

  //····················································································································
  //   Accessing dotColorGridForBoard stored property
  //····················································································································

  var dotColorGridForBoard : NSColor {
    get {
      return self.dotColorGridForBoard_property.propval
    }
    set {
      self.dotColorGridForBoard_property.setProp (newValue)
    }
  }

  var dotColorGridForBoard_property_selection : EBSelection <NSColor> {
    get {
      return self.dotColorGridForBoard_property.prop
    }
  }

  //····················································································································
  //   Accessing lineColorGridForBoard stored property
  //····················································································································

  var lineColorGridForBoard : NSColor {
    get {
      return self.lineColorGridForBoard_property.propval
    }
    set {
      self.lineColorGridForBoard_property.setProp (newValue)
    }
  }

  var lineColorGridForBoard_property_selection : EBSelection <NSColor> {
    get {
      return self.lineColorGridForBoard_property.prop
    }
  }

  //····················································································································
  //   Accessing boardBackgroundColorForBoard stored property
  //····················································································································

  var boardBackgroundColorForBoard : NSColor {
    get {
      return self.boardBackgroundColorForBoard_property.propval
    }
    set {
      self.boardBackgroundColorForBoard_property.setProp (newValue)
    }
  }

  var boardBackgroundColorForBoard_property_selection : EBSelection <NSColor> {
    get {
      return self.boardBackgroundColorForBoard_property.prop
    }
  }

  //····················································································································
  //   Accessing errorBackgroundColorForBoard stored property
  //····················································································································

  var errorBackgroundColorForBoard : NSColor {
    get {
      return self.errorBackgroundColorForBoard_property.propval
    }
    set {
      self.errorBackgroundColorForBoard_property.setProp (newValue)
    }
  }

  var errorBackgroundColorForBoard_property_selection : EBSelection <NSColor> {
    get {
      return self.errorBackgroundColorForBoard_property.prop
    }
  }

  //····················································································································
  //   Accessing drawErrorBackgroundForBoard stored property
  //····················································································································

  var drawErrorBackgroundForBoard : Bool {
    get {
      return self.drawErrorBackgroundForBoard_property.propval
    }
    set {
      self.drawErrorBackgroundForBoard_property.setProp (newValue)
    }
  }

  var drawErrorBackgroundForBoard_property_selection : EBSelection <Bool> {
    get {
      return self.drawErrorBackgroundForBoard_property.prop
    }
  }

  //····················································································································
  //   Accessing warningBackgroundColorForBoard stored property
  //····················································································································

  var warningBackgroundColorForBoard : NSColor {
    get {
      return self.warningBackgroundColorForBoard_property.propval
    }
    set {
      self.warningBackgroundColorForBoard_property.setProp (newValue)
    }
  }

  var warningBackgroundColorForBoard_property_selection : EBSelection <NSColor> {
    get {
      return self.warningBackgroundColorForBoard_property.prop
    }
  }

  //····················································································································
  //   Accessing drawEWarningBackgroundForBoard stored property
  //····················································································································

  var drawEWarningBackgroundForBoard : Bool {
    get {
      return self.drawEWarningBackgroundForBoard_property.propval
    }
    set {
      self.drawEWarningBackgroundForBoard_property.setProp (newValue)
    }
  }

  var drawEWarningBackgroundForBoard_property_selection : EBSelection <Bool> {
    get {
      return self.drawEWarningBackgroundForBoard_property.prop
    }
  }

  //····················································································································
  //   Accessing boardLimitsColorForBoard stored property
  //····················································································································

  var boardLimitsColorForBoard : NSColor {
    get {
      return self.boardLimitsColorForBoard_property.propval
    }
    set {
      self.boardLimitsColorForBoard_property.setProp (newValue)
    }
  }

  var boardLimitsColorForBoard_property_selection : EBSelection <NSColor> {
    get {
      return self.boardLimitsColorForBoard_property.prop
    }
  }

  //····················································································································
  //   Accessing boardClearanceColorForBoard stored property
  //····················································································································

  var boardClearanceColorForBoard : NSColor {
    get {
      return self.boardClearanceColorForBoard_property.propval
    }
    set {
      self.boardClearanceColorForBoard_property.setProp (newValue)
    }
  }

  var boardClearanceColorForBoard_property_selection : EBSelection <NSColor> {
    get {
      return self.boardClearanceColorForBoard_property.prop
    }
  }

  //····················································································································
  //   Accessing topSideRestrictRectangleColorForBoard stored property
  //····················································································································

  var topSideRestrictRectangleColorForBoard : NSColor {
    get {
      return self.topSideRestrictRectangleColorForBoard_property.propval
    }
    set {
      self.topSideRestrictRectangleColorForBoard_property.setProp (newValue)
    }
  }

  var topSideRestrictRectangleColorForBoard_property_selection : EBSelection <NSColor> {
    get {
      return self.topSideRestrictRectangleColorForBoard_property.prop
    }
  }

  //····················································································································
  //   Accessing bottomSideRestrictRectangleColorForBoard stored property
  //····················································································································

  var bottomSideRestrictRectangleColorForBoard : NSColor {
    get {
      return self.bottomSideRestrictRectangleColorForBoard_property.propval
    }
    set {
      self.bottomSideRestrictRectangleColorForBoard_property.setProp (newValue)
    }
  }

  var bottomSideRestrictRectangleColorForBoard_property_selection : EBSelection <NSColor> {
    get {
      return self.bottomSideRestrictRectangleColorForBoard_property.prop
    }
  }

  //····················································································································
  //   Accessing topSideLegendColorForBoard stored property
  //····················································································································

  var topSideLegendColorForBoard : NSColor {
    get {
      return self.topSideLegendColorForBoard_property.propval
    }
    set {
      self.topSideLegendColorForBoard_property.setProp (newValue)
    }
  }

  var topSideLegendColorForBoard_property_selection : EBSelection <NSColor> {
    get {
      return self.topSideLegendColorForBoard_property.prop
    }
  }

  //····················································································································
  //   Accessing topSideLayoutColorForBoard stored property
  //····················································································································

  var topSideLayoutColorForBoard : NSColor {
    get {
      return self.topSideLayoutColorForBoard_property.propval
    }
    set {
      self.topSideLayoutColorForBoard_property.setProp (newValue)
    }
  }

  var topSideLayoutColorForBoard_property_selection : EBSelection <NSColor> {
    get {
      return self.topSideLayoutColorForBoard_property.prop
    }
  }

  //····················································································································
  //   Accessing bottomSideLayoutColorForBoard stored property
  //····················································································································

  var bottomSideLayoutColorForBoard : NSColor {
    get {
      return self.bottomSideLayoutColorForBoard_property.propval
    }
    set {
      self.bottomSideLayoutColorForBoard_property.setProp (newValue)
    }
  }

  var bottomSideLayoutColorForBoard_property_selection : EBSelection <NSColor> {
    get {
      return self.bottomSideLayoutColorForBoard_property.prop
    }
  }

  //····················································································································
  //   Accessing bottomSideLegendColorForBoard stored property
  //····················································································································

  var bottomSideLegendColorForBoard : NSColor {
    get {
      return self.bottomSideLegendColorForBoard_property.propval
    }
    set {
      self.bottomSideLegendColorForBoard_property.setProp (newValue)
    }
  }

  var bottomSideLegendColorForBoard_property_selection : EBSelection <NSColor> {
    get {
      return self.bottomSideLegendColorForBoard_property.prop
    }
  }

  //····················································································································
  //   Accessing topSidePadColorForBoard stored property
  //····················································································································

  var topSidePadColorForBoard : NSColor {
    get {
      return self.topSidePadColorForBoard_property.propval
    }
    set {
      self.topSidePadColorForBoard_property.setProp (newValue)
    }
  }

  var topSidePadColorForBoard_property_selection : EBSelection <NSColor> {
    get {
      return self.topSidePadColorForBoard_property.prop
    }
  }

  //····················································································································
  //   Accessing bottomSidePadColorForBoard stored property
  //····················································································································

  var bottomSidePadColorForBoard : NSColor {
    get {
      return self.bottomSidePadColorForBoard_property.propval
    }
    set {
      self.bottomSidePadColorForBoard_property.setProp (newValue)
    }
  }

  var bottomSidePadColorForBoard_property_selection : EBSelection <NSColor> {
    get {
      return self.bottomSidePadColorForBoard_property.prop
    }
  }

  //····················································································································
  //   Accessing padNumberFontForBoard stored property
  //····················································································································

  var padNumberFontForBoard : NSFont {
    get {
      return self.padNumberFontForBoard_property.propval
    }
    set {
      self.padNumberFontForBoard_property.setProp (newValue)
    }
  }

  var padNumberFontForBoard_property_selection : EBSelection <NSFont> {
    get {
      return self.padNumberFontForBoard_property.prop
    }
  }

  //····················································································································
  //   Accessing padNumberColorForBoard stored property
  //····················································································································

  var padNumberColorForBoard : NSColor {
    get {
      return self.padNumberColorForBoard_property.propval
    }
    set {
      self.padNumberColorForBoard_property.setProp (newValue)
    }
  }

  var padNumberColorForBoard_property_selection : EBSelection <NSColor> {
    get {
      return self.padNumberColorForBoard_property.prop
    }
  }

  //····················································································································
  //   Accessing packageDrawingWidthMultpliedByTenForBoard stored property
  //····················································································································

  var packageDrawingWidthMultpliedByTenForBoard : Int {
    get {
      return self.packageDrawingWidthMultpliedByTenForBoard_property.propval
    }
    set {
      self.packageDrawingWidthMultpliedByTenForBoard_property.setProp (newValue)
    }
  }

  var packageDrawingWidthMultpliedByTenForBoard_property_selection : EBSelection <Int> {
    get {
      return self.packageDrawingWidthMultpliedByTenForBoard_property.prop
    }
  }

  //····················································································································
  //   Accessing sampleString stored property
  //····················································································································

  var sampleString : String {
    get {
      return self.sampleString_property.propval
    }
    set {
      self.sampleString_property.setProp (newValue)
    }
  }

  var sampleString_property_selection : EBSelection <String> {
    get {
      return self.sampleString_property.prop
    }
  }

  //····················································································································
  //   Accessing sampleStringSize stored property
  //····················································································································

  var sampleStringSize : Double {
    get {
      return self.sampleStringSize_property.propval
    }
    set {
      self.sampleStringSize_property.setProp (newValue)
    }
  }

  var sampleStringSize_property_selection : EBSelection <Double> {
    get {
      return self.sampleStringSize_property.prop
    }
  }

  //····················································································································
  //   Accessing showGerberDrawingFlow stored property
  //····················································································································

  var showGerberDrawingFlow : Bool {
    get {
      return self.showGerberDrawingFlow_property.propval
    }
    set {
      self.showGerberDrawingFlow_property.setProp (newValue)
    }
  }

  var showGerberDrawingFlow_property_selection : EBSelection <Bool> {
    get {
      return self.showGerberDrawingFlow_property.prop
    }
  }

  //····················································································································
  //   Accessing showGerberDrawingIndexes stored property
  //····················································································································

  var showGerberDrawingIndexes : Bool {
    get {
      return self.showGerberDrawingIndexes_property.propval
    }
    set {
      self.showGerberDrawingIndexes_property.setProp (newValue)
    }
  }

  var showGerberDrawingIndexes_property_selection : EBSelection <Bool> {
    get {
      return self.showGerberDrawingIndexes_property.prop
    }
  }

  //····················································································································
  //   Accessing currentCharacterCodePoint stored property
  //····················································································································

  var currentCharacterCodePoint : Int {
    get {
      return self.currentCharacterCodePoint_property.propval
    }
    set {
      self.currentCharacterCodePoint_property.setProp (newValue)
    }
  }

  var currentCharacterCodePoint_property_selection : EBSelection <Int> {
    get {
      return self.currentCharacterCodePoint_property.prop
    }
  }
  func currentCharacterCodePoint_validateAndSetProp (_ inCandidateValue : Int, windowForSheet inWindow:NSWindow?) -> Bool {
    return self.currentCharacterCodePoint_property.validateAndSetProp (inCandidateValue, windowForSheet:inWindow)
  }

  //····················································································································
  //   Accessing fontEditionTransparency stored property
  //····················································································································

  var fontEditionTransparency : Double {
    get {
      return self.fontEditionTransparency_property.propval
    }
    set {
      self.fontEditionTransparency_property.setProp (newValue)
    }
  }

  var fontEditionTransparency_property_selection : EBSelection <Double> {
    get {
      return self.fontEditionTransparency_property.prop
    }
  }

  //····················································································································
  //   Accessing usesUserLibrary stored property
  //····················································································································

  var usesUserLibrary : Bool {
    get {
      return self.usesUserLibrary_property.propval
    }
    set {
      self.usesUserLibrary_property.setProp (newValue)
    }
  }

  var usesUserLibrary_property_selection : EBSelection <Bool> {
    get {
      return self.usesUserLibrary_property.prop
    }
  }

  //····················································································································
  //   Accessing checkForSystemLibraryAtStartUp stored property
  //····················································································································

  var checkForSystemLibraryAtStartUp : Bool {
    get {
      return self.checkForSystemLibraryAtStartUp_property.propval
    }
    set {
      self.checkForSystemLibraryAtStartUp_property.setProp (newValue)
    }
  }

  var checkForSystemLibraryAtStartUp_property_selection : EBSelection <Bool> {
    get {
      return self.checkForSystemLibraryAtStartUp_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerModelViewHorizontalFlip stored property
  //····················································································································

  var mergerModelViewHorizontalFlip : Bool {
    get {
      return self.mergerModelViewHorizontalFlip_property.propval
    }
    set {
      self.mergerModelViewHorizontalFlip_property.setProp (newValue)
    }
  }

  var mergerModelViewHorizontalFlip_property_selection : EBSelection <Bool> {
    get {
      return self.mergerModelViewHorizontalFlip_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerModelViewVerticalFlip stored property
  //····················································································································

  var mergerModelViewVerticalFlip : Bool {
    get {
      return self.mergerModelViewVerticalFlip_property.propval
    }
    set {
      self.mergerModelViewVerticalFlip_property.setProp (newValue)
    }
  }

  var mergerModelViewVerticalFlip_property_selection : EBSelection <Bool> {
    get {
      return self.mergerModelViewVerticalFlip_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerModelViewDisplayHoles stored property
  //····················································································································

  var mergerModelViewDisplayHoles : Bool {
    get {
      return self.mergerModelViewDisplayHoles_property.propval
    }
    set {
      self.mergerModelViewDisplayHoles_property.setProp (newValue)
    }
  }

  var mergerModelViewDisplayHoles_property_selection : EBSelection <Bool> {
    get {
      return self.mergerModelViewDisplayHoles_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerModelViewDisplayVias stored property
  //····················································································································

  var mergerModelViewDisplayVias : Bool {
    get {
      return self.mergerModelViewDisplayVias_property.propval
    }
    set {
      self.mergerModelViewDisplayVias_property.setProp (newValue)
    }
  }

  var mergerModelViewDisplayVias_property_selection : EBSelection <Bool> {
    get {
      return self.mergerModelViewDisplayVias_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerModelViewDisplayFrontPads stored property
  //····················································································································

  var mergerModelViewDisplayFrontPads : Bool {
    get {
      return self.mergerModelViewDisplayFrontPads_property.propval
    }
    set {
      self.mergerModelViewDisplayFrontPads_property.setProp (newValue)
    }
  }

  var mergerModelViewDisplayFrontPads_property_selection : EBSelection <Bool> {
    get {
      return self.mergerModelViewDisplayFrontPads_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerModelViewDisplayBoardLimits stored property
  //····················································································································

  var mergerModelViewDisplayBoardLimits : Bool {
    get {
      return self.mergerModelViewDisplayBoardLimits_property.propval
    }
    set {
      self.mergerModelViewDisplayBoardLimits_property.setProp (newValue)
    }
  }

  var mergerModelViewDisplayBoardLimits_property_selection : EBSelection <Bool> {
    get {
      return self.mergerModelViewDisplayBoardLimits_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerModelViewDisplayFrontComponentNames stored property
  //····················································································································

  var mergerModelViewDisplayFrontComponentNames : Bool {
    get {
      return self.mergerModelViewDisplayFrontComponentNames_property.propval
    }
    set {
      self.mergerModelViewDisplayFrontComponentNames_property.setProp (newValue)
    }
  }

  var mergerModelViewDisplayFrontComponentNames_property_selection : EBSelection <Bool> {
    get {
      return self.mergerModelViewDisplayFrontComponentNames_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerModelViewDisplayFrontComponentValues stored property
  //····················································································································

  var mergerModelViewDisplayFrontComponentValues : Bool {
    get {
      return self.mergerModelViewDisplayFrontComponentValues_property.propval
    }
    set {
      self.mergerModelViewDisplayFrontComponentValues_property.setProp (newValue)
    }
  }

  var mergerModelViewDisplayFrontComponentValues_property_selection : EBSelection <Bool> {
    get {
      return self.mergerModelViewDisplayFrontComponentValues_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerModelViewDisplayFrontPackages stored property
  //····················································································································

  var mergerModelViewDisplayFrontPackages : Bool {
    get {
      return self.mergerModelViewDisplayFrontPackages_property.propval
    }
    set {
      self.mergerModelViewDisplayFrontPackages_property.setProp (newValue)
    }
  }

  var mergerModelViewDisplayFrontPackages_property_selection : EBSelection <Bool> {
    get {
      return self.mergerModelViewDisplayFrontPackages_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerModelViewDisplayFrontLegendTexts stored property
  //····················································································································

  var mergerModelViewDisplayFrontLegendTexts : Bool {
    get {
      return self.mergerModelViewDisplayFrontLegendTexts_property.propval
    }
    set {
      self.mergerModelViewDisplayFrontLegendTexts_property.setProp (newValue)
    }
  }

  var mergerModelViewDisplayFrontLegendTexts_property_selection : EBSelection <Bool> {
    get {
      return self.mergerModelViewDisplayFrontLegendTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerModelViewDisplayFrontTracks stored property
  //····················································································································

  var mergerModelViewDisplayFrontTracks : Bool {
    get {
      return self.mergerModelViewDisplayFrontTracks_property.propval
    }
    set {
      self.mergerModelViewDisplayFrontTracks_property.setProp (newValue)
    }
  }

  var mergerModelViewDisplayFrontTracks_property_selection : EBSelection <Bool> {
    get {
      return self.mergerModelViewDisplayFrontTracks_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerModelViewDisplayFrontLayoutTexts stored property
  //····················································································································

  var mergerModelViewDisplayFrontLayoutTexts : Bool {
    get {
      return self.mergerModelViewDisplayFrontLayoutTexts_property.propval
    }
    set {
      self.mergerModelViewDisplayFrontLayoutTexts_property.setProp (newValue)
    }
  }

  var mergerModelViewDisplayFrontLayoutTexts_property_selection : EBSelection <Bool> {
    get {
      return self.mergerModelViewDisplayFrontLayoutTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerModelViewDisplayBackPads stored property
  //····················································································································

  var mergerModelViewDisplayBackPads : Bool {
    get {
      return self.mergerModelViewDisplayBackPads_property.propval
    }
    set {
      self.mergerModelViewDisplayBackPads_property.setProp (newValue)
    }
  }

  var mergerModelViewDisplayBackPads_property_selection : EBSelection <Bool> {
    get {
      return self.mergerModelViewDisplayBackPads_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerModelViewDisplayBackComponentNames stored property
  //····················································································································

  var mergerModelViewDisplayBackComponentNames : Bool {
    get {
      return self.mergerModelViewDisplayBackComponentNames_property.propval
    }
    set {
      self.mergerModelViewDisplayBackComponentNames_property.setProp (newValue)
    }
  }

  var mergerModelViewDisplayBackComponentNames_property_selection : EBSelection <Bool> {
    get {
      return self.mergerModelViewDisplayBackComponentNames_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerModelViewDisplayBackComponentValues stored property
  //····················································································································

  var mergerModelViewDisplayBackComponentValues : Bool {
    get {
      return self.mergerModelViewDisplayBackComponentValues_property.propval
    }
    set {
      self.mergerModelViewDisplayBackComponentValues_property.setProp (newValue)
    }
  }

  var mergerModelViewDisplayBackComponentValues_property_selection : EBSelection <Bool> {
    get {
      return self.mergerModelViewDisplayBackComponentValues_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerModelViewDisplayBackLegendTexts stored property
  //····················································································································

  var mergerModelViewDisplayBackLegendTexts : Bool {
    get {
      return self.mergerModelViewDisplayBackLegendTexts_property.propval
    }
    set {
      self.mergerModelViewDisplayBackLegendTexts_property.setProp (newValue)
    }
  }

  var mergerModelViewDisplayBackLegendTexts_property_selection : EBSelection <Bool> {
    get {
      return self.mergerModelViewDisplayBackLegendTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerModelViewDisplayBackPackages stored property
  //····················································································································

  var mergerModelViewDisplayBackPackages : Bool {
    get {
      return self.mergerModelViewDisplayBackPackages_property.propval
    }
    set {
      self.mergerModelViewDisplayBackPackages_property.setProp (newValue)
    }
  }

  var mergerModelViewDisplayBackPackages_property_selection : EBSelection <Bool> {
    get {
      return self.mergerModelViewDisplayBackPackages_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerModelViewDisplayBackTracks stored property
  //····················································································································

  var mergerModelViewDisplayBackTracks : Bool {
    get {
      return self.mergerModelViewDisplayBackTracks_property.propval
    }
    set {
      self.mergerModelViewDisplayBackTracks_property.setProp (newValue)
    }
  }

  var mergerModelViewDisplayBackTracks_property_selection : EBSelection <Bool> {
    get {
      return self.mergerModelViewDisplayBackTracks_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerModelViewDisplayBackLayoutTexts stored property
  //····················································································································

  var mergerModelViewDisplayBackLayoutTexts : Bool {
    get {
      return self.mergerModelViewDisplayBackLayoutTexts_property.propval
    }
    set {
      self.mergerModelViewDisplayBackLayoutTexts_property.setProp (newValue)
    }
  }

  var mergerModelViewDisplayBackLayoutTexts_property_selection : EBSelection <Bool> {
    get {
      return self.mergerModelViewDisplayBackLayoutTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerModelViewDisplayFrontLegendLines stored property
  //····················································································································

  var mergerModelViewDisplayFrontLegendLines : Bool {
    get {
      return self.mergerModelViewDisplayFrontLegendLines_property.propval
    }
    set {
      self.mergerModelViewDisplayFrontLegendLines_property.setProp (newValue)
    }
  }

  var mergerModelViewDisplayFrontLegendLines_property_selection : EBSelection <Bool> {
    get {
      return self.mergerModelViewDisplayFrontLegendLines_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerModelViewDisplayBackLegendLines stored property
  //····················································································································

  var mergerModelViewDisplayBackLegendLines : Bool {
    get {
      return self.mergerModelViewDisplayBackLegendLines_property.propval
    }
    set {
      self.mergerModelViewDisplayBackLegendLines_property.setProp (newValue)
    }
  }

  var mergerModelViewDisplayBackLegendLines_property_selection : EBSelection <Bool> {
    get {
      return self.mergerModelViewDisplayBackLegendLines_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerBoardViewHorizontalFlip stored property
  //····················································································································

  var mergerBoardViewHorizontalFlip : Bool {
    get {
      return self.mergerBoardViewHorizontalFlip_property.propval
    }
    set {
      self.mergerBoardViewHorizontalFlip_property.setProp (newValue)
    }
  }

  var mergerBoardViewHorizontalFlip_property_selection : EBSelection <Bool> {
    get {
      return self.mergerBoardViewHorizontalFlip_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerBoardViewVerticalFlip stored property
  //····················································································································

  var mergerBoardViewVerticalFlip : Bool {
    get {
      return self.mergerBoardViewVerticalFlip_property.propval
    }
    set {
      self.mergerBoardViewVerticalFlip_property.setProp (newValue)
    }
  }

  var mergerBoardViewVerticalFlip_property_selection : EBSelection <Bool> {
    get {
      return self.mergerBoardViewVerticalFlip_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerBoardViewDisplayHoles stored property
  //····················································································································

  var mergerBoardViewDisplayHoles : Bool {
    get {
      return self.mergerBoardViewDisplayHoles_property.propval
    }
    set {
      self.mergerBoardViewDisplayHoles_property.setProp (newValue)
    }
  }

  var mergerBoardViewDisplayHoles_property_selection : EBSelection <Bool> {
    get {
      return self.mergerBoardViewDisplayHoles_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerBoardViewDisplayVias stored property
  //····················································································································

  var mergerBoardViewDisplayVias : Bool {
    get {
      return self.mergerBoardViewDisplayVias_property.propval
    }
    set {
      self.mergerBoardViewDisplayVias_property.setProp (newValue)
    }
  }

  var mergerBoardViewDisplayVias_property_selection : EBSelection <Bool> {
    get {
      return self.mergerBoardViewDisplayVias_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerBoardViewDisplayFrontPads stored property
  //····················································································································

  var mergerBoardViewDisplayFrontPads : Bool {
    get {
      return self.mergerBoardViewDisplayFrontPads_property.propval
    }
    set {
      self.mergerBoardViewDisplayFrontPads_property.setProp (newValue)
    }
  }

  var mergerBoardViewDisplayFrontPads_property_selection : EBSelection <Bool> {
    get {
      return self.mergerBoardViewDisplayFrontPads_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerBoardViewDisplayInternalBoardLimits stored property
  //····················································································································

  var mergerBoardViewDisplayInternalBoardLimits : Bool {
    get {
      return self.mergerBoardViewDisplayInternalBoardLimits_property.propval
    }
    set {
      self.mergerBoardViewDisplayInternalBoardLimits_property.setProp (newValue)
    }
  }

  var mergerBoardViewDisplayInternalBoardLimits_property_selection : EBSelection <Bool> {
    get {
      return self.mergerBoardViewDisplayInternalBoardLimits_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerBoardViewDisplayBoardLimits stored property
  //····················································································································

  var mergerBoardViewDisplayBoardLimits : Bool {
    get {
      return self.mergerBoardViewDisplayBoardLimits_property.propval
    }
    set {
      self.mergerBoardViewDisplayBoardLimits_property.setProp (newValue)
    }
  }

  var mergerBoardViewDisplayBoardLimits_property_selection : EBSelection <Bool> {
    get {
      return self.mergerBoardViewDisplayBoardLimits_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerBoardViewDisplayFrontComponentNames stored property
  //····················································································································

  var mergerBoardViewDisplayFrontComponentNames : Bool {
    get {
      return self.mergerBoardViewDisplayFrontComponentNames_property.propval
    }
    set {
      self.mergerBoardViewDisplayFrontComponentNames_property.setProp (newValue)
    }
  }

  var mergerBoardViewDisplayFrontComponentNames_property_selection : EBSelection <Bool> {
    get {
      return self.mergerBoardViewDisplayFrontComponentNames_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerBoardViewDisplayFrontComponentValues stored property
  //····················································································································

  var mergerBoardViewDisplayFrontComponentValues : Bool {
    get {
      return self.mergerBoardViewDisplayFrontComponentValues_property.propval
    }
    set {
      self.mergerBoardViewDisplayFrontComponentValues_property.setProp (newValue)
    }
  }

  var mergerBoardViewDisplayFrontComponentValues_property_selection : EBSelection <Bool> {
    get {
      return self.mergerBoardViewDisplayFrontComponentValues_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerBoardViewDisplayFrontPackages stored property
  //····················································································································

  var mergerBoardViewDisplayFrontPackages : Bool {
    get {
      return self.mergerBoardViewDisplayFrontPackages_property.propval
    }
    set {
      self.mergerBoardViewDisplayFrontPackages_property.setProp (newValue)
    }
  }

  var mergerBoardViewDisplayFrontPackages_property_selection : EBSelection <Bool> {
    get {
      return self.mergerBoardViewDisplayFrontPackages_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerBoardViewDisplayFrontLegendTexts stored property
  //····················································································································

  var mergerBoardViewDisplayFrontLegendTexts : Bool {
    get {
      return self.mergerBoardViewDisplayFrontLegendTexts_property.propval
    }
    set {
      self.mergerBoardViewDisplayFrontLegendTexts_property.setProp (newValue)
    }
  }

  var mergerBoardViewDisplayFrontLegendTexts_property_selection : EBSelection <Bool> {
    get {
      return self.mergerBoardViewDisplayFrontLegendTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerBoardViewDisplayFrontTracks stored property
  //····················································································································

  var mergerBoardViewDisplayFrontTracks : Bool {
    get {
      return self.mergerBoardViewDisplayFrontTracks_property.propval
    }
    set {
      self.mergerBoardViewDisplayFrontTracks_property.setProp (newValue)
    }
  }

  var mergerBoardViewDisplayFrontTracks_property_selection : EBSelection <Bool> {
    get {
      return self.mergerBoardViewDisplayFrontTracks_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerBoardViewDisplayFrontLayoutTexts stored property
  //····················································································································

  var mergerBoardViewDisplayFrontLayoutTexts : Bool {
    get {
      return self.mergerBoardViewDisplayFrontLayoutTexts_property.propval
    }
    set {
      self.mergerBoardViewDisplayFrontLayoutTexts_property.setProp (newValue)
    }
  }

  var mergerBoardViewDisplayFrontLayoutTexts_property_selection : EBSelection <Bool> {
    get {
      return self.mergerBoardViewDisplayFrontLayoutTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerBoardViewDisplayBackPads stored property
  //····················································································································

  var mergerBoardViewDisplayBackPads : Bool {
    get {
      return self.mergerBoardViewDisplayBackPads_property.propval
    }
    set {
      self.mergerBoardViewDisplayBackPads_property.setProp (newValue)
    }
  }

  var mergerBoardViewDisplayBackPads_property_selection : EBSelection <Bool> {
    get {
      return self.mergerBoardViewDisplayBackPads_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerBoardViewDisplayBackComponentNames stored property
  //····················································································································

  var mergerBoardViewDisplayBackComponentNames : Bool {
    get {
      return self.mergerBoardViewDisplayBackComponentNames_property.propval
    }
    set {
      self.mergerBoardViewDisplayBackComponentNames_property.setProp (newValue)
    }
  }

  var mergerBoardViewDisplayBackComponentNames_property_selection : EBSelection <Bool> {
    get {
      return self.mergerBoardViewDisplayBackComponentNames_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerBoardViewDisplayBackComponentValues stored property
  //····················································································································

  var mergerBoardViewDisplayBackComponentValues : Bool {
    get {
      return self.mergerBoardViewDisplayBackComponentValues_property.propval
    }
    set {
      self.mergerBoardViewDisplayBackComponentValues_property.setProp (newValue)
    }
  }

  var mergerBoardViewDisplayBackComponentValues_property_selection : EBSelection <Bool> {
    get {
      return self.mergerBoardViewDisplayBackComponentValues_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerBoardViewDisplayBackLegendTexts stored property
  //····················································································································

  var mergerBoardViewDisplayBackLegendTexts : Bool {
    get {
      return self.mergerBoardViewDisplayBackLegendTexts_property.propval
    }
    set {
      self.mergerBoardViewDisplayBackLegendTexts_property.setProp (newValue)
    }
  }

  var mergerBoardViewDisplayBackLegendTexts_property_selection : EBSelection <Bool> {
    get {
      return self.mergerBoardViewDisplayBackLegendTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerBoardViewDisplayBackPackages stored property
  //····················································································································

  var mergerBoardViewDisplayBackPackages : Bool {
    get {
      return self.mergerBoardViewDisplayBackPackages_property.propval
    }
    set {
      self.mergerBoardViewDisplayBackPackages_property.setProp (newValue)
    }
  }

  var mergerBoardViewDisplayBackPackages_property_selection : EBSelection <Bool> {
    get {
      return self.mergerBoardViewDisplayBackPackages_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerBoardViewDisplayBackTracks stored property
  //····················································································································

  var mergerBoardViewDisplayBackTracks : Bool {
    get {
      return self.mergerBoardViewDisplayBackTracks_property.propval
    }
    set {
      self.mergerBoardViewDisplayBackTracks_property.setProp (newValue)
    }
  }

  var mergerBoardViewDisplayBackTracks_property_selection : EBSelection <Bool> {
    get {
      return self.mergerBoardViewDisplayBackTracks_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerBoardViewDisplayBackLayoutTexts stored property
  //····················································································································

  var mergerBoardViewDisplayBackLayoutTexts : Bool {
    get {
      return self.mergerBoardViewDisplayBackLayoutTexts_property.propval
    }
    set {
      self.mergerBoardViewDisplayBackLayoutTexts_property.setProp (newValue)
    }
  }

  var mergerBoardViewDisplayBackLayoutTexts_property_selection : EBSelection <Bool> {
    get {
      return self.mergerBoardViewDisplayBackLayoutTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerBoardViewDisplayFrontLegendLines stored property
  //····················································································································

  var mergerBoardViewDisplayFrontLegendLines : Bool {
    get {
      return self.mergerBoardViewDisplayFrontLegendLines_property.propval
    }
    set {
      self.mergerBoardViewDisplayFrontLegendLines_property.setProp (newValue)
    }
  }

  var mergerBoardViewDisplayFrontLegendLines_property_selection : EBSelection <Bool> {
    get {
      return self.mergerBoardViewDisplayFrontLegendLines_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerBoardViewDisplayBackLegendLines stored property
  //····················································································································

  var mergerBoardViewDisplayBackLegendLines : Bool {
    get {
      return self.mergerBoardViewDisplayBackLegendLines_property.propval
    }
    set {
      self.mergerBoardViewDisplayBackLegendLines_property.setProp (newValue)
    }
  }

  var mergerBoardViewDisplayBackLegendLines_property_selection : EBSelection <Bool> {
    get {
      return self.mergerBoardViewDisplayBackLegendLines_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerColorHoles stored property
  //····················································································································

  var mergerColorHoles : NSColor {
    get {
      return self.mergerColorHoles_property.propval
    }
    set {
      self.mergerColorHoles_property.setProp (newValue)
    }
  }

  var mergerColorHoles_property_selection : EBSelection <NSColor> {
    get {
      return self.mergerColorHoles_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerColorVias stored property
  //····················································································································

  var mergerColorVias : NSColor {
    get {
      return self.mergerColorVias_property.propval
    }
    set {
      self.mergerColorVias_property.setProp (newValue)
    }
  }

  var mergerColorVias_property_selection : EBSelection <NSColor> {
    get {
      return self.mergerColorVias_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerColorFrontPads stored property
  //····················································································································

  var mergerColorFrontPads : NSColor {
    get {
      return self.mergerColorFrontPads_property.propval
    }
    set {
      self.mergerColorFrontPads_property.setProp (newValue)
    }
  }

  var mergerColorFrontPads_property_selection : EBSelection <NSColor> {
    get {
      return self.mergerColorFrontPads_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerColorBoardLimits stored property
  //····················································································································

  var mergerColorBoardLimits : NSColor {
    get {
      return self.mergerColorBoardLimits_property.propval
    }
    set {
      self.mergerColorBoardLimits_property.setProp (newValue)
    }
  }

  var mergerColorBoardLimits_property_selection : EBSelection <NSColor> {
    get {
      return self.mergerColorBoardLimits_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerColorInternalBoardLimits stored property
  //····················································································································

  var mergerColorInternalBoardLimits : NSColor {
    get {
      return self.mergerColorInternalBoardLimits_property.propval
    }
    set {
      self.mergerColorInternalBoardLimits_property.setProp (newValue)
    }
  }

  var mergerColorInternalBoardLimits_property_selection : EBSelection <NSColor> {
    get {
      return self.mergerColorInternalBoardLimits_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerColorFrontComponentNames stored property
  //····················································································································

  var mergerColorFrontComponentNames : NSColor {
    get {
      return self.mergerColorFrontComponentNames_property.propval
    }
    set {
      self.mergerColorFrontComponentNames_property.setProp (newValue)
    }
  }

  var mergerColorFrontComponentNames_property_selection : EBSelection <NSColor> {
    get {
      return self.mergerColorFrontComponentNames_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerColorFrontComponentValues stored property
  //····················································································································

  var mergerColorFrontComponentValues : NSColor {
    get {
      return self.mergerColorFrontComponentValues_property.propval
    }
    set {
      self.mergerColorFrontComponentValues_property.setProp (newValue)
    }
  }

  var mergerColorFrontComponentValues_property_selection : EBSelection <NSColor> {
    get {
      return self.mergerColorFrontComponentValues_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerColorFrontPackages stored property
  //····················································································································

  var mergerColorFrontPackages : NSColor {
    get {
      return self.mergerColorFrontPackages_property.propval
    }
    set {
      self.mergerColorFrontPackages_property.setProp (newValue)
    }
  }

  var mergerColorFrontPackages_property_selection : EBSelection <NSColor> {
    get {
      return self.mergerColorFrontPackages_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerColorFrontLegendTexts stored property
  //····················································································································

  var mergerColorFrontLegendTexts : NSColor {
    get {
      return self.mergerColorFrontLegendTexts_property.propval
    }
    set {
      self.mergerColorFrontLegendTexts_property.setProp (newValue)
    }
  }

  var mergerColorFrontLegendTexts_property_selection : EBSelection <NSColor> {
    get {
      return self.mergerColorFrontLegendTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerColorFrontTracks stored property
  //····················································································································

  var mergerColorFrontTracks : NSColor {
    get {
      return self.mergerColorFrontTracks_property.propval
    }
    set {
      self.mergerColorFrontTracks_property.setProp (newValue)
    }
  }

  var mergerColorFrontTracks_property_selection : EBSelection <NSColor> {
    get {
      return self.mergerColorFrontTracks_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerColorFrontLayoutTexts stored property
  //····················································································································

  var mergerColorFrontLayoutTexts : NSColor {
    get {
      return self.mergerColorFrontLayoutTexts_property.propval
    }
    set {
      self.mergerColorFrontLayoutTexts_property.setProp (newValue)
    }
  }

  var mergerColorFrontLayoutTexts_property_selection : EBSelection <NSColor> {
    get {
      return self.mergerColorFrontLayoutTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerColorBackPads stored property
  //····················································································································

  var mergerColorBackPads : NSColor {
    get {
      return self.mergerColorBackPads_property.propval
    }
    set {
      self.mergerColorBackPads_property.setProp (newValue)
    }
  }

  var mergerColorBackPads_property_selection : EBSelection <NSColor> {
    get {
      return self.mergerColorBackPads_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerColorBackComponentNames stored property
  //····················································································································

  var mergerColorBackComponentNames : NSColor {
    get {
      return self.mergerColorBackComponentNames_property.propval
    }
    set {
      self.mergerColorBackComponentNames_property.setProp (newValue)
    }
  }

  var mergerColorBackComponentNames_property_selection : EBSelection <NSColor> {
    get {
      return self.mergerColorBackComponentNames_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerColorBackComponentValues stored property
  //····················································································································

  var mergerColorBackComponentValues : NSColor {
    get {
      return self.mergerColorBackComponentValues_property.propval
    }
    set {
      self.mergerColorBackComponentValues_property.setProp (newValue)
    }
  }

  var mergerColorBackComponentValues_property_selection : EBSelection <NSColor> {
    get {
      return self.mergerColorBackComponentValues_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerColorBackLegendTexts stored property
  //····················································································································

  var mergerColorBackLegendTexts : NSColor {
    get {
      return self.mergerColorBackLegendTexts_property.propval
    }
    set {
      self.mergerColorBackLegendTexts_property.setProp (newValue)
    }
  }

  var mergerColorBackLegendTexts_property_selection : EBSelection <NSColor> {
    get {
      return self.mergerColorBackLegendTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerColorBackPackages stored property
  //····················································································································

  var mergerColorBackPackages : NSColor {
    get {
      return self.mergerColorBackPackages_property.propval
    }
    set {
      self.mergerColorBackPackages_property.setProp (newValue)
    }
  }

  var mergerColorBackPackages_property_selection : EBSelection <NSColor> {
    get {
      return self.mergerColorBackPackages_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerColorBackTracks stored property
  //····················································································································

  var mergerColorBackTracks : NSColor {
    get {
      return self.mergerColorBackTracks_property.propval
    }
    set {
      self.mergerColorBackTracks_property.setProp (newValue)
    }
  }

  var mergerColorBackTracks_property_selection : EBSelection <NSColor> {
    get {
      return self.mergerColorBackTracks_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerColorBackLayoutTexts stored property
  //····················································································································

  var mergerColorBackLayoutTexts : NSColor {
    get {
      return self.mergerColorBackLayoutTexts_property.propval
    }
    set {
      self.mergerColorBackLayoutTexts_property.setProp (newValue)
    }
  }

  var mergerColorBackLayoutTexts_property_selection : EBSelection <NSColor> {
    get {
      return self.mergerColorBackLayoutTexts_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerColorFrontLegendLines stored property
  //····················································································································

  var mergerColorFrontLegendLines : NSColor {
    get {
      return self.mergerColorFrontLegendLines_property.propval
    }
    set {
      self.mergerColorFrontLegendLines_property.setProp (newValue)
    }
  }

  var mergerColorFrontLegendLines_property_selection : EBSelection <NSColor> {
    get {
      return self.mergerColorFrontLegendLines_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerColorBackLegendLines stored property
  //····················································································································

  var mergerColorBackLegendLines : NSColor {
    get {
      return self.mergerColorBackLegendLines_property.propval
    }
    set {
      self.mergerColorBackLegendLines_property.setProp (newValue)
    }
  }

  var mergerColorBackLegendLines_property_selection : EBSelection <NSColor> {
    get {
      return self.mergerColorBackLegendLines_property.prop
    }
  }

  //····················································································································
  //   Accessing mergerColorBackground stored property
  //····················································································································

  var mergerColorBackground : NSColor {
    get {
      return self.mergerColorBackground_property.propval
    }
    set {
      self.mergerColorBackground_property.setProp (newValue)
    }
  }

  var mergerColorBackground_property_selection : EBSelection <NSColor> {
    get {
      return self.mergerColorBackground_property.prop
    }
  }

  //····················································································································
  //   Accessing mValueRevealInFinder_symbols transient property
  //····················································································································

  var mValueRevealInFinder_symbols_property_selection : EBSelection <CanariMenuItemListClass> {
    get {
      return self.mValueRevealInFinder_symbols_property.prop
    }
  }

  //····················································································································
  //   Accessing mValueRevealInFinder_packages transient property
  //····················································································································

  var mValueRevealInFinder_packages_property_selection : EBSelection <CanariMenuItemListClass> {
    get {
      return self.mValueRevealInFinder_packages_property.prop
    }
  }

  //····················································································································
  //   Accessing mValueRevealInFinder_devices transient property
  //····················································································································

  var mValueRevealInFinder_devices_property_selection : EBSelection <CanariMenuItemListClass> {
    get {
      return self.mValueRevealInFinder_devices_property.prop
    }
  }

  //····················································································································
  //   Accessing mValueRevealInFinder_fonts transient property
  //····················································································································

  var mValueRevealInFinder_fonts_property_selection : EBSelection <CanariMenuItemListClass> {
    get {
      return self.mValueRevealInFinder_fonts_property.prop
    }
  }

  //····················································································································
  //   Accessing mValueRevealInFinder_artworks transient property
  //····················································································································

  var mValueRevealInFinder_artworks_property_selection : EBSelection <CanariMenuItemListClass> {
    get {
      return self.mValueRevealInFinder_artworks_property.prop
    }
  }

  //····················································································································
  //   Accessing additionnalLibraryArray stored array properties
  //····················································································································

  var additionnalLibraryArray_property_selection : EBSelection < [CanariLibraryEntry] > {
    get {
      return self.additionnalLibraryArray_property.prop
    }
  }

  //····················································································································
  //    Simple Stored Properties
  //····················································································································

  var errorMessageColor_property = EBStoredProperty_NSColor (NSColor.red)
  var warningMessageColor_property = EBStoredProperty_NSColor (NSColor.orange)
  var successMessageColor_property = EBStoredProperty_NSColor (NSColor.blue)
  var selectionHiliteColor_property = EBStoredProperty_NSColor (NSColor.cyan)
  var hiliteWidthMultipliedByTen_property = EBStoredProperty_Int (15)
  var symbolColor_property = EBStoredProperty_NSColor (NSColor.brown)
  var dotColorOfSymbolGrid_property = EBStoredProperty_NSColor (NSColor.black)
  var lineColorOfSymbolGrid_property = EBStoredProperty_NSColor (NSColor.gray)
  var symbolBackgroundColor_property = EBStoredProperty_NSColor (NSColor.white)
  var symbolDrawingWidthMultipliedByTen_property = EBStoredProperty_Int (5)
  var pinNameFont_property = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 6.0))
  var dotColorOfPackageGrid_property = EBStoredProperty_NSColor (NSColor.white)
  var lineColorOfPackageGrid_property = EBStoredProperty_NSColor (NSColor.gray)
  var packageBackgroundColor_property = EBStoredProperty_NSColor (NSColor.black)
  var packageColor_property = EBStoredProperty_NSColor (NSColor.brown)
  var topSidePadColor_property = EBStoredProperty_NSColor (NSColor.blue)
  var bottomSidePadColor_property = EBStoredProperty_NSColor (NSColor.green)
  var padNumberColor_property = EBStoredProperty_NSColor (NSColor.red)
  var padNumberFont_property = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 3.0))
  var packageGuideColor_property = EBStoredProperty_NSColor (NSColor.yellow)
  var packageDimensionColor_property = EBStoredProperty_NSColor (NSColor.orange)
  var dimensionFont_property = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 2.0))
  var padZoneColor_property = EBStoredProperty_NSColor (NSColor.magenta)
  var packageDrawingWidthMultipliedByTen_property = EBStoredProperty_Int (15)
  var mSymbolAndPackageGridDotColorForDevice_property = EBStoredProperty_NSColor (NSColor.black)
  var mSymbolAndPackageGridLineColorForDevice_property = EBStoredProperty_NSColor (NSColor.gray)
  var mSymbolAndPackageBackgroundColorForDevice_property = EBStoredProperty_NSColor (NSColor.white)
  var mPackageColorForDevice_property = EBStoredProperty_NSColor (NSColor.brown)
  var mTopSidePadColorForDevice_property = EBStoredProperty_NSColor (NSColor.blue)
  var mBottomSidePadColorForDevice_property = EBStoredProperty_NSColor (NSColor.green)
  var mPadNumberColorForDevice_property = EBStoredProperty_NSColor (NSColor.red)
  var mPackageNameFontForDevice_property = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 9.0))
  var mPadNumberFontForDevice_property = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 5.0))
  var mSymbolColorForDevice_property = EBStoredProperty_NSColor (NSColor.brown)
  var mSymbolNameFontForDevice_property = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 9.0))
  var mPinNameFontForDevice_property = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 6.0))
  var symbolDrawingWidthForDeviceMultipliedByTen_property = EBStoredProperty_Int (15)
  var packageDrawingWidthForDeviceMultipliedByTen_property = EBStoredProperty_Int (15)
  var dotColorGridForSchematic_property = EBStoredProperty_NSColor (NSColor.black)
  var lineColorGridForSchematic_property = EBStoredProperty_NSColor (NSColor.gray)
  var symbolColorForUnplacedComponentsForSchematic_property = EBStoredProperty_NSColor (NSColor.darkGray)
  var symbolColorForSchematic_property = EBStoredProperty_NSColor (NSColor.brown)
  var pinNameFontForSchematic_property = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 6.0))
  var pinNameColorForSchematic_property = EBStoredProperty_NSColor (NSColor.brown)
  var pinNumberFontForSchematic_property = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 6.0))
  var pinNumberColorForSchematic_property = EBStoredProperty_NSColor (NSColor.darkGray)
  var connectionColorForSchematic_property = EBStoredProperty_NSColor (NSColor.black)
  var symbolDrawingWidthMultipliedByTenForSchematic_property = EBStoredProperty_Int (5)
  var dotColorGridForBoard_property = EBStoredProperty_NSColor (NSColor.black)
  var lineColorGridForBoard_property = EBStoredProperty_NSColor (NSColor.gray)
  var boardBackgroundColorForBoard_property = EBStoredProperty_NSColor (NSColor.black)
  var errorBackgroundColorForBoard_property = EBStoredProperty_NSColor (NSColor.red)
  var drawErrorBackgroundForBoard_property = EBStoredProperty_Bool (true)
  var warningBackgroundColorForBoard_property = EBStoredProperty_NSColor (NSColor.orange)
  var drawEWarningBackgroundForBoard_property = EBStoredProperty_Bool (true)
  var boardLimitsColorForBoard_property = EBStoredProperty_NSColor (NSColor.brown)
  var boardClearanceColorForBoard_property = EBStoredProperty_NSColor (NSColor.yellow)
  var topSideRestrictRectangleColorForBoard_property = EBStoredProperty_NSColor (NSColor.blue)
  var bottomSideRestrictRectangleColorForBoard_property = EBStoredProperty_NSColor (NSColor.green)
  var topSideLegendColorForBoard_property = EBStoredProperty_NSColor (NSColor.brown)
  var topSideLayoutColorForBoard_property = EBStoredProperty_NSColor (NSColor.blue)
  var bottomSideLayoutColorForBoard_property = EBStoredProperty_NSColor (NSColor.green)
  var bottomSideLegendColorForBoard_property = EBStoredProperty_NSColor (NSColor.white)
  var topSidePadColorForBoard_property = EBStoredProperty_NSColor (NSColor.blue)
  var bottomSidePadColorForBoard_property = EBStoredProperty_NSColor (NSColor.green)
  var padNumberFontForBoard_property = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 3.0))
  var padNumberColorForBoard_property = EBStoredProperty_NSColor (NSColor.red)
  var packageDrawingWidthMultpliedByTenForBoard_property = EBStoredProperty_Int (5)
  var sampleString_property = EBStoredProperty_String ("The quick brown fox jumps over the lazy dog")
  var sampleStringSize_property = EBStoredProperty_Double (24)
  var showGerberDrawingFlow_property = EBStoredProperty_Bool (true)
  var showGerberDrawingIndexes_property = EBStoredProperty_Bool (true)
  var currentCharacterCodePoint_property = EBStoredProperty_Int (65)
  var fontEditionTransparency_property = EBStoredProperty_Double (0.5)
  var usesUserLibrary_property = EBStoredProperty_Bool (true)
  var checkForSystemLibraryAtStartUp_property = EBStoredProperty_Bool (true)
  var mergerModelViewHorizontalFlip_property = EBStoredProperty_Bool (false)
  var mergerModelViewVerticalFlip_property = EBStoredProperty_Bool (false)
  var mergerModelViewDisplayHoles_property = EBStoredProperty_Bool (true)
  var mergerModelViewDisplayVias_property = EBStoredProperty_Bool (true)
  var mergerModelViewDisplayFrontPads_property = EBStoredProperty_Bool (true)
  var mergerModelViewDisplayBoardLimits_property = EBStoredProperty_Bool (true)
  var mergerModelViewDisplayFrontComponentNames_property = EBStoredProperty_Bool (false)
  var mergerModelViewDisplayFrontComponentValues_property = EBStoredProperty_Bool (false)
  var mergerModelViewDisplayFrontPackages_property = EBStoredProperty_Bool (false)
  var mergerModelViewDisplayFrontLegendTexts_property = EBStoredProperty_Bool (false)
  var mergerModelViewDisplayFrontTracks_property = EBStoredProperty_Bool (false)
  var mergerModelViewDisplayFrontLayoutTexts_property = EBStoredProperty_Bool (false)
  var mergerModelViewDisplayBackPads_property = EBStoredProperty_Bool (true)
  var mergerModelViewDisplayBackComponentNames_property = EBStoredProperty_Bool (false)
  var mergerModelViewDisplayBackComponentValues_property = EBStoredProperty_Bool (false)
  var mergerModelViewDisplayBackLegendTexts_property = EBStoredProperty_Bool (false)
  var mergerModelViewDisplayBackPackages_property = EBStoredProperty_Bool (false)
  var mergerModelViewDisplayBackTracks_property = EBStoredProperty_Bool (false)
  var mergerModelViewDisplayBackLayoutTexts_property = EBStoredProperty_Bool (false)
  var mergerModelViewDisplayFrontLegendLines_property = EBStoredProperty_Bool (false)
  var mergerModelViewDisplayBackLegendLines_property = EBStoredProperty_Bool (true)
  var mergerBoardViewHorizontalFlip_property = EBStoredProperty_Bool (false)
  var mergerBoardViewVerticalFlip_property = EBStoredProperty_Bool (false)
  var mergerBoardViewDisplayHoles_property = EBStoredProperty_Bool (true)
  var mergerBoardViewDisplayVias_property = EBStoredProperty_Bool (true)
  var mergerBoardViewDisplayFrontPads_property = EBStoredProperty_Bool (true)
  var mergerBoardViewDisplayInternalBoardLimits_property = EBStoredProperty_Bool (true)
  var mergerBoardViewDisplayBoardLimits_property = EBStoredProperty_Bool (true)
  var mergerBoardViewDisplayFrontComponentNames_property = EBStoredProperty_Bool (false)
  var mergerBoardViewDisplayFrontComponentValues_property = EBStoredProperty_Bool (false)
  var mergerBoardViewDisplayFrontPackages_property = EBStoredProperty_Bool (false)
  var mergerBoardViewDisplayFrontLegendTexts_property = EBStoredProperty_Bool (false)
  var mergerBoardViewDisplayFrontTracks_property = EBStoredProperty_Bool (false)
  var mergerBoardViewDisplayFrontLayoutTexts_property = EBStoredProperty_Bool (false)
  var mergerBoardViewDisplayBackPads_property = EBStoredProperty_Bool (true)
  var mergerBoardViewDisplayBackComponentNames_property = EBStoredProperty_Bool (false)
  var mergerBoardViewDisplayBackComponentValues_property = EBStoredProperty_Bool (false)
  var mergerBoardViewDisplayBackLegendTexts_property = EBStoredProperty_Bool (false)
  var mergerBoardViewDisplayBackPackages_property = EBStoredProperty_Bool (false)
  var mergerBoardViewDisplayBackTracks_property = EBStoredProperty_Bool (false)
  var mergerBoardViewDisplayBackLayoutTexts_property = EBStoredProperty_Bool (false)
  var mergerBoardViewDisplayFrontLegendLines_property = EBStoredProperty_Bool (false)
  var mergerBoardViewDisplayBackLegendLines_property = EBStoredProperty_Bool (true)
  var mergerColorHoles_property = EBStoredProperty_NSColor (NSColor.white)
  var mergerColorVias_property = EBStoredProperty_NSColor (NSColor.red)
  var mergerColorFrontPads_property = EBStoredProperty_NSColor (NSColor.brown)
  var mergerColorBoardLimits_property = EBStoredProperty_NSColor (NSColor.brown)
  var mergerColorInternalBoardLimits_property = EBStoredProperty_NSColor (NSColor.yellow)
  var mergerColorFrontComponentNames_property = EBStoredProperty_NSColor (NSColor.brown)
  var mergerColorFrontComponentValues_property = EBStoredProperty_NSColor (NSColor.brown)
  var mergerColorFrontPackages_property = EBStoredProperty_NSColor (NSColor.brown)
  var mergerColorFrontLegendTexts_property = EBStoredProperty_NSColor (NSColor.brown)
  var mergerColorFrontTracks_property = EBStoredProperty_NSColor (NSColor.blue)
  var mergerColorFrontLayoutTexts_property = EBStoredProperty_NSColor (NSColor.blue)
  var mergerColorBackPads_property = EBStoredProperty_NSColor (NSColor.orange)
  var mergerColorBackComponentNames_property = EBStoredProperty_NSColor (NSColor.gray)
  var mergerColorBackComponentValues_property = EBStoredProperty_NSColor (NSColor.gray)
  var mergerColorBackLegendTexts_property = EBStoredProperty_NSColor (NSColor.gray)
  var mergerColorBackPackages_property = EBStoredProperty_NSColor (NSColor.gray)
  var mergerColorBackTracks_property = EBStoredProperty_NSColor (NSColor.green)
  var mergerColorBackLayoutTexts_property = EBStoredProperty_NSColor (NSColor.green)
  var mergerColorFrontLegendLines_property = EBStoredProperty_NSColor (NSColor.gray)
  var mergerColorBackLegendLines_property = EBStoredProperty_NSColor (NSColor.green)
  var mergerColorBackground_property = EBStoredProperty_NSColor (NSColor.lightGray)

  //····················································································································
  //    Stored Array Properties
  //····················································································································

  var additionnalLibraryArray_property = EBClassArray_CanariLibraryEntry ()

  //····················································································································
  //    Transient properties
  //····················································································································

  var mValueRevealInFinder_symbols_property = EBTransientProperty_CanariMenuItemListClass ()
  var mValueRevealInFinder_packages_property = EBTransientProperty_CanariMenuItemListClass ()
  var mValueRevealInFinder_devices_property = EBTransientProperty_CanariMenuItemListClass ()
  var mValueRevealInFinder_fonts_property = EBTransientProperty_CanariMenuItemListClass ()
  var mValueRevealInFinder_artworks_property = EBTransientProperty_CanariMenuItemListClass ()


  //····················································································································
  //    Array Controllers
  //····················································································································

  private var additionnalLibraryArrayController = ArrayController_Preferences_additionnalLibraryArrayController ()


  //····················································································································
  //    Init
  //····················································································································

  override init () {
    super.init ()
    g_Preferences = self ;
  //--- Read from preferences
    self.errorMessageColor_property.readInPreferencesWithKey (inKey:"Preferences:errorMessageColor")
    self.warningMessageColor_property.readInPreferencesWithKey (inKey:"Preferences:warningMessageColor")
    self.successMessageColor_property.readInPreferencesWithKey (inKey:"Preferences:successMessageColor")
    self.selectionHiliteColor_property.readInPreferencesWithKey (inKey:"Preferences:selectionHiliteColor")
    self.hiliteWidthMultipliedByTen_property.readInPreferencesWithKey (inKey:"Preferences:hiliteWidthMultipliedByTen")
    self.symbolColor_property.readInPreferencesWithKey (inKey:"Preferences:symbolColor")
    self.dotColorOfSymbolGrid_property.readInPreferencesWithKey (inKey:"Preferences:dotColorOfSymbolGrid")
    self.lineColorOfSymbolGrid_property.readInPreferencesWithKey (inKey:"Preferences:lineColorOfSymbolGrid")
    self.symbolBackgroundColor_property.readInPreferencesWithKey (inKey:"Preferences:symbolBackgroundColor")
    self.symbolDrawingWidthMultipliedByTen_property.readInPreferencesWithKey (inKey:"Preferences:symbolDrawingWidthMultipliedByTen")
    self.pinNameFont_property.readInPreferencesWithKey (inKey:"Preferences:pinNameFont")
    self.dotColorOfPackageGrid_property.readInPreferencesWithKey (inKey:"Preferences:dotColorOfPackageGrid")
    self.lineColorOfPackageGrid_property.readInPreferencesWithKey (inKey:"Preferences:lineColorOfPackageGrid")
    self.packageBackgroundColor_property.readInPreferencesWithKey (inKey:"Preferences:packageBackgroundColor")
    self.packageColor_property.readInPreferencesWithKey (inKey:"Preferences:packageColor")
    self.topSidePadColor_property.readInPreferencesWithKey (inKey:"Preferences:topSidePadColor")
    self.bottomSidePadColor_property.readInPreferencesWithKey (inKey:"Preferences:bottomSidePadColor")
    self.padNumberColor_property.readInPreferencesWithKey (inKey:"Preferences:padNumberColor")
    self.padNumberFont_property.readInPreferencesWithKey (inKey:"Preferences:padNumberFont")
    self.packageGuideColor_property.readInPreferencesWithKey (inKey:"Preferences:packageGuideColor")
    self.packageDimensionColor_property.readInPreferencesWithKey (inKey:"Preferences:packageDimensionColor")
    self.dimensionFont_property.readInPreferencesWithKey (inKey:"Preferences:dimensionFont")
    self.padZoneColor_property.readInPreferencesWithKey (inKey:"Preferences:padZoneColor")
    self.packageDrawingWidthMultipliedByTen_property.readInPreferencesWithKey (inKey:"Preferences:packageDrawingWidthMultipliedByTen")
    self.mSymbolAndPackageGridDotColorForDevice_property.readInPreferencesWithKey (inKey:"Preferences:mSymbolAndPackageGridDotColorForDevice")
    self.mSymbolAndPackageGridLineColorForDevice_property.readInPreferencesWithKey (inKey:"Preferences:mSymbolAndPackageGridLineColorForDevice")
    self.mSymbolAndPackageBackgroundColorForDevice_property.readInPreferencesWithKey (inKey:"Preferences:mSymbolAndPackageBackgroundColorForDevice")
    self.mPackageColorForDevice_property.readInPreferencesWithKey (inKey:"Preferences:mPackageColorForDevice")
    self.mTopSidePadColorForDevice_property.readInPreferencesWithKey (inKey:"Preferences:mTopSidePadColorForDevice")
    self.mBottomSidePadColorForDevice_property.readInPreferencesWithKey (inKey:"Preferences:mBottomSidePadColorForDevice")
    self.mPadNumberColorForDevice_property.readInPreferencesWithKey (inKey:"Preferences:mPadNumberColorForDevice")
    self.mPackageNameFontForDevice_property.readInPreferencesWithKey (inKey:"Preferences:mPackageNameFontForDevice")
    self.mPadNumberFontForDevice_property.readInPreferencesWithKey (inKey:"Preferences:mPadNumberFontForDevice")
    self.mSymbolColorForDevice_property.readInPreferencesWithKey (inKey:"Preferences:mSymbolColorForDevice")
    self.mSymbolNameFontForDevice_property.readInPreferencesWithKey (inKey:"Preferences:mSymbolNameFontForDevice")
    self.mPinNameFontForDevice_property.readInPreferencesWithKey (inKey:"Preferences:mPinNameFontForDevice")
    self.symbolDrawingWidthForDeviceMultipliedByTen_property.readInPreferencesWithKey (inKey:"Preferences:symbolDrawingWidthForDeviceMultipliedByTen")
    self.packageDrawingWidthForDeviceMultipliedByTen_property.readInPreferencesWithKey (inKey:"Preferences:packageDrawingWidthForDeviceMultipliedByTen")
    self.dotColorGridForSchematic_property.readInPreferencesWithKey (inKey:"Preferences:dotColorGridForSchematic")
    self.lineColorGridForSchematic_property.readInPreferencesWithKey (inKey:"Preferences:lineColorGridForSchematic")
    self.symbolColorForUnplacedComponentsForSchematic_property.readInPreferencesWithKey (inKey:"Preferences:symbolColorForUnplacedComponentsForSchematic")
    self.symbolColorForSchematic_property.readInPreferencesWithKey (inKey:"Preferences:symbolColorForSchematic")
    self.pinNameFontForSchematic_property.readInPreferencesWithKey (inKey:"Preferences:pinNameFontForSchematic")
    self.pinNameColorForSchematic_property.readInPreferencesWithKey (inKey:"Preferences:pinNameColorForSchematic")
    self.pinNumberFontForSchematic_property.readInPreferencesWithKey (inKey:"Preferences:pinNumberFontForSchematic")
    self.pinNumberColorForSchematic_property.readInPreferencesWithKey (inKey:"Preferences:pinNumberColorForSchematic")
    self.connectionColorForSchematic_property.readInPreferencesWithKey (inKey:"Preferences:connectionColorForSchematic")
    self.symbolDrawingWidthMultipliedByTenForSchematic_property.readInPreferencesWithKey (inKey:"Preferences:symbolDrawingWidthMultipliedByTenForSchematic")
    self.dotColorGridForBoard_property.readInPreferencesWithKey (inKey:"Preferences:dotColorGridForBoard")
    self.lineColorGridForBoard_property.readInPreferencesWithKey (inKey:"Preferences:lineColorGridForBoard")
    self.boardBackgroundColorForBoard_property.readInPreferencesWithKey (inKey:"Preferences:boardBackgroundColorForBoard")
    self.errorBackgroundColorForBoard_property.readInPreferencesWithKey (inKey:"Preferences:errorBackgroundColorForBoard")
    self.drawErrorBackgroundForBoard_property.readInPreferencesWithKey (inKey:"Preferences:drawErrorBackgroundForBoard")
    self.warningBackgroundColorForBoard_property.readInPreferencesWithKey (inKey:"Preferences:warningBackgroundColorForBoard")
    self.drawEWarningBackgroundForBoard_property.readInPreferencesWithKey (inKey:"Preferences:drawEWarningBackgroundForBoard")
    self.boardLimitsColorForBoard_property.readInPreferencesWithKey (inKey:"Preferences:boardLimitsColorForBoard")
    self.boardClearanceColorForBoard_property.readInPreferencesWithKey (inKey:"Preferences:boardClearanceColorForBoard")
    self.topSideRestrictRectangleColorForBoard_property.readInPreferencesWithKey (inKey:"Preferences:topSideRestrictRectangleColorForBoard")
    self.bottomSideRestrictRectangleColorForBoard_property.readInPreferencesWithKey (inKey:"Preferences:bottomSideRestrictRectangleColorForBoard")
    self.topSideLegendColorForBoard_property.readInPreferencesWithKey (inKey:"Preferences:topSideLegendColorForBoard")
    self.topSideLayoutColorForBoard_property.readInPreferencesWithKey (inKey:"Preferences:topSideLayoutColorForBoard")
    self.bottomSideLayoutColorForBoard_property.readInPreferencesWithKey (inKey:"Preferences:bottomSideLayoutColorForBoard")
    self.bottomSideLegendColorForBoard_property.readInPreferencesWithKey (inKey:"Preferences:bottomSideLegendColorForBoard")
    self.topSidePadColorForBoard_property.readInPreferencesWithKey (inKey:"Preferences:topSidePadColorForBoard")
    self.bottomSidePadColorForBoard_property.readInPreferencesWithKey (inKey:"Preferences:bottomSidePadColorForBoard")
    self.padNumberFontForBoard_property.readInPreferencesWithKey (inKey:"Preferences:padNumberFontForBoard")
    self.padNumberColorForBoard_property.readInPreferencesWithKey (inKey:"Preferences:padNumberColorForBoard")
    self.packageDrawingWidthMultpliedByTenForBoard_property.readInPreferencesWithKey (inKey:"Preferences:packageDrawingWidthMultpliedByTenForBoard")
    self.sampleString_property.readInPreferencesWithKey (inKey:"Preferences:sampleString")
    self.sampleStringSize_property.readInPreferencesWithKey (inKey:"Preferences:sampleStringSize")
    self.showGerberDrawingFlow_property.readInPreferencesWithKey (inKey:"Preferences:showGerberDrawingFlow")
    self.showGerberDrawingIndexes_property.readInPreferencesWithKey (inKey:"Preferences:showGerberDrawingIndexes")
    self.currentCharacterCodePoint_property.readInPreferencesWithKey (inKey:"Preferences:currentCharacterCodePoint")
    self.fontEditionTransparency_property.readInPreferencesWithKey (inKey:"Preferences:fontEditionTransparency")
    self.usesUserLibrary_property.readInPreferencesWithKey (inKey:"Preferences:usesUserLibrary")
    self.checkForSystemLibraryAtStartUp_property.readInPreferencesWithKey (inKey:"Preferences:checkForSystemLibraryAtStartUp")
    self.mergerModelViewHorizontalFlip_property.readInPreferencesWithKey (inKey:"Preferences:mergerModelViewHorizontalFlip")
    self.mergerModelViewVerticalFlip_property.readInPreferencesWithKey (inKey:"Preferences:mergerModelViewVerticalFlip")
    self.mergerModelViewDisplayHoles_property.readInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayHoles")
    self.mergerModelViewDisplayVias_property.readInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayVias")
    self.mergerModelViewDisplayFrontPads_property.readInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayFrontPads")
    self.mergerModelViewDisplayBoardLimits_property.readInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayBoardLimits")
    self.mergerModelViewDisplayFrontComponentNames_property.readInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayFrontComponentNames")
    self.mergerModelViewDisplayFrontComponentValues_property.readInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayFrontComponentValues")
    self.mergerModelViewDisplayFrontPackages_property.readInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayFrontPackages")
    self.mergerModelViewDisplayFrontLegendTexts_property.readInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayFrontLegendTexts")
    self.mergerModelViewDisplayFrontTracks_property.readInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayFrontTracks")
    self.mergerModelViewDisplayFrontLayoutTexts_property.readInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayFrontLayoutTexts")
    self.mergerModelViewDisplayBackPads_property.readInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayBackPads")
    self.mergerModelViewDisplayBackComponentNames_property.readInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayBackComponentNames")
    self.mergerModelViewDisplayBackComponentValues_property.readInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayBackComponentValues")
    self.mergerModelViewDisplayBackLegendTexts_property.readInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayBackLegendTexts")
    self.mergerModelViewDisplayBackPackages_property.readInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayBackPackages")
    self.mergerModelViewDisplayBackTracks_property.readInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayBackTracks")
    self.mergerModelViewDisplayBackLayoutTexts_property.readInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayBackLayoutTexts")
    self.mergerModelViewDisplayFrontLegendLines_property.readInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayFrontLegendLines")
    self.mergerModelViewDisplayBackLegendLines_property.readInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayBackLegendLines")
    self.mergerBoardViewHorizontalFlip_property.readInPreferencesWithKey (inKey:"Preferences:mergerBoardViewHorizontalFlip")
    self.mergerBoardViewVerticalFlip_property.readInPreferencesWithKey (inKey:"Preferences:mergerBoardViewVerticalFlip")
    self.mergerBoardViewDisplayHoles_property.readInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayHoles")
    self.mergerBoardViewDisplayVias_property.readInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayVias")
    self.mergerBoardViewDisplayFrontPads_property.readInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayFrontPads")
    self.mergerBoardViewDisplayInternalBoardLimits_property.readInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayInternalBoardLimits")
    self.mergerBoardViewDisplayBoardLimits_property.readInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayBoardLimits")
    self.mergerBoardViewDisplayFrontComponentNames_property.readInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayFrontComponentNames")
    self.mergerBoardViewDisplayFrontComponentValues_property.readInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayFrontComponentValues")
    self.mergerBoardViewDisplayFrontPackages_property.readInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayFrontPackages")
    self.mergerBoardViewDisplayFrontLegendTexts_property.readInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayFrontLegendTexts")
    self.mergerBoardViewDisplayFrontTracks_property.readInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayFrontTracks")
    self.mergerBoardViewDisplayFrontLayoutTexts_property.readInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayFrontLayoutTexts")
    self.mergerBoardViewDisplayBackPads_property.readInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayBackPads")
    self.mergerBoardViewDisplayBackComponentNames_property.readInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayBackComponentNames")
    self.mergerBoardViewDisplayBackComponentValues_property.readInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayBackComponentValues")
    self.mergerBoardViewDisplayBackLegendTexts_property.readInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayBackLegendTexts")
    self.mergerBoardViewDisplayBackPackages_property.readInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayBackPackages")
    self.mergerBoardViewDisplayBackTracks_property.readInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayBackTracks")
    self.mergerBoardViewDisplayBackLayoutTexts_property.readInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayBackLayoutTexts")
    self.mergerBoardViewDisplayFrontLegendLines_property.readInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayFrontLegendLines")
    self.mergerBoardViewDisplayBackLegendLines_property.readInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayBackLegendLines")
    self.mergerColorHoles_property.readInPreferencesWithKey (inKey:"Preferences:mergerColorHoles")
    self.mergerColorVias_property.readInPreferencesWithKey (inKey:"Preferences:mergerColorVias")
    self.mergerColorFrontPads_property.readInPreferencesWithKey (inKey:"Preferences:mergerColorFrontPads")
    self.mergerColorBoardLimits_property.readInPreferencesWithKey (inKey:"Preferences:mergerColorBoardLimits")
    self.mergerColorInternalBoardLimits_property.readInPreferencesWithKey (inKey:"Preferences:mergerColorInternalBoardLimits")
    self.mergerColorFrontComponentNames_property.readInPreferencesWithKey (inKey:"Preferences:mergerColorFrontComponentNames")
    self.mergerColorFrontComponentValues_property.readInPreferencesWithKey (inKey:"Preferences:mergerColorFrontComponentValues")
    self.mergerColorFrontPackages_property.readInPreferencesWithKey (inKey:"Preferences:mergerColorFrontPackages")
    self.mergerColorFrontLegendTexts_property.readInPreferencesWithKey (inKey:"Preferences:mergerColorFrontLegendTexts")
    self.mergerColorFrontTracks_property.readInPreferencesWithKey (inKey:"Preferences:mergerColorFrontTracks")
    self.mergerColorFrontLayoutTexts_property.readInPreferencesWithKey (inKey:"Preferences:mergerColorFrontLayoutTexts")
    self.mergerColorBackPads_property.readInPreferencesWithKey (inKey:"Preferences:mergerColorBackPads")
    self.mergerColorBackComponentNames_property.readInPreferencesWithKey (inKey:"Preferences:mergerColorBackComponentNames")
    self.mergerColorBackComponentValues_property.readInPreferencesWithKey (inKey:"Preferences:mergerColorBackComponentValues")
    self.mergerColorBackLegendTexts_property.readInPreferencesWithKey (inKey:"Preferences:mergerColorBackLegendTexts")
    self.mergerColorBackPackages_property.readInPreferencesWithKey (inKey:"Preferences:mergerColorBackPackages")
    self.mergerColorBackTracks_property.readInPreferencesWithKey (inKey:"Preferences:mergerColorBackTracks")
    self.mergerColorBackLayoutTexts_property.readInPreferencesWithKey (inKey:"Preferences:mergerColorBackLayoutTexts")
    self.mergerColorFrontLegendLines_property.readInPreferencesWithKey (inKey:"Preferences:mergerColorFrontLegendLines")
    self.mergerColorBackLegendLines_property.readInPreferencesWithKey (inKey:"Preferences:mergerColorBackLegendLines")
    self.mergerColorBackground_property.readInPreferencesWithKey (inKey:"Preferences:mergerColorBackground")
    self.additionnalLibraryArray_property.readInPreferencesWithKey (inKey:"Preferences:additionnalLibraryArray")
  //--- Property validation function
    self.currentCharacterCodePoint_property.validationFunction = self.validate_currentCharacterCodePoint
  //---
    NotificationCenter.default.addObserver (self,
     selector:#selector(Preferences.applicationWillTerminateAction(_:)),
     name:NSNotification.Name.NSApplicationWillTerminate,
     object:nil
    )
  //--- Extern functions
  }

  //····················································································································
  //    awakeFromNib
  //····················································································································

  override func awakeFromNib () {
  //--------------------------- Check mAddLibraryEntryButton' outlet not nil
    if nil == mAddLibraryEntryButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mAddLibraryEntryButton' outlet is nil")
    }
  //--------------------------- Check mAdditionnalLibraryArrayTableView' outlet not nil
    if nil == mAdditionnalLibraryArrayTableView {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mAdditionnalLibraryArrayTableView' outlet is nil")
    }
  //--------------------------- Check mBoardBackgroundColorWell' outlet not nil
    if nil == mBoardBackgroundColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardBackgroundColorWell' outlet is nil")
    }
  //--------------------------- Check mBoardBottomSideLayoutColorWell' outlet not nil
    if nil == mBoardBottomSideLayoutColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardBottomSideLayoutColorWell' outlet is nil")
    }
  //--------------------------- Check mBoardBottomSideLegendColorWell' outlet not nil
    if nil == mBoardBottomSideLegendColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardBottomSideLegendColorWell' outlet is nil")
    }
  //--------------------------- Check mBoardBottomSidePadColorWell' outlet not nil
    if nil == mBoardBottomSidePadColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardBottomSidePadColorWell' outlet is nil")
    }
  //--------------------------- Check mBoardBottomSideRestrictRectangleColorWell' outlet not nil
    if nil == mBoardBottomSideRestrictRectangleColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardBottomSideRestrictRectangleColorWell' outlet is nil")
    }
  //--------------------------- Check mBoardClearanceColorWell' outlet not nil
    if nil == mBoardClearanceColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardClearanceColorWell' outlet is nil")
    }
  //--------------------------- Check mBoardDotColorGridColorWell' outlet not nil
    if nil == mBoardDotColorGridColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardDotColorGridColorWell' outlet is nil")
    }
  //--------------------------- Check mBoardDrawErrorBackgroundCheckbox' outlet not nil
    if nil == mBoardDrawErrorBackgroundCheckbox {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardDrawErrorBackgroundCheckbox' outlet is nil")
    }
  //--------------------------- Check mBoardDrawWarningBackgroundCheckbox' outlet not nil
    if nil == mBoardDrawWarningBackgroundCheckbox {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardDrawWarningBackgroundCheckbox' outlet is nil")
    }
  //--------------------------- Check mBoardErrorBackgroundColorWell' outlet not nil
    if nil == mBoardErrorBackgroundColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardErrorBackgroundColorWell' outlet is nil")
    }
  //--------------------------- Check mBoardLimitsColorWell' outlet not nil
    if nil == mBoardLimitsColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardLimitsColorWell' outlet is nil")
    }
  //--------------------------- Check mBoardLineColorGridColorWell' outlet not nil
    if nil == mBoardLineColorGridColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardLineColorGridColorWell' outlet is nil")
    }
  //--------------------------- Check mBoardPackageDrawingWidthMultipliedByTenPopupButton' outlet not nil
    if nil == mBoardPackageDrawingWidthMultipliedByTenPopupButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardPackageDrawingWidthMultipliedByTenPopupButton' outlet is nil")
    }
  //--------------------------- Check mBoardPadFontButton' outlet not nil
    if nil == mBoardPadFontButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardPadFontButton' outlet is nil")
    }
  //--------------------------- Check mBoardPadNumberColorWell' outlet not nil
    if nil == mBoardPadNumberColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardPadNumberColorWell' outlet is nil")
    }
  //--------------------------- Check mBoardTopSideLayoutColorWell' outlet not nil
    if nil == mBoardTopSideLayoutColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardTopSideLayoutColorWell' outlet is nil")
    }
  //--------------------------- Check mBoardTopSideLegendColorWell' outlet not nil
    if nil == mBoardTopSideLegendColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardTopSideLegendColorWell' outlet is nil")
    }
  //--------------------------- Check mBoardTopSidePadColorWell' outlet not nil
    if nil == mBoardTopSidePadColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardTopSidePadColorWell' outlet is nil")
    }
  //--------------------------- Check mBoardTopSideRestrictRectangleColorWell' outlet not nil
    if nil == mBoardTopSideRestrictRectangleColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardTopSideRestrictRectangleColorWell' outlet is nil")
    }
  //--------------------------- Check mBoardWarningBackgroundColorWell' outlet not nil
    if nil == mBoardWarningBackgroundColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardWarningBackgroundColorWell' outlet is nil")
    }
  //--------------------------- Check mBottomSidePadColorDorDeviveColorWell' outlet not nil
    if nil == mBottomSidePadColorDorDeviveColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBottomSidePadColorDorDeviveColorWell' outlet is nil")
    }
  //--------------------------- Check mBottomSidePadColorWell' outlet not nil
    if nil == mBottomSidePadColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBottomSidePadColorWell' outlet is nil")
    }
  //--------------------------- Check mCheckForLibraryUpdatesButton' outlet not nil
    if nil == mCheckForLibraryUpdatesButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mCheckForLibraryUpdatesButton' outlet is nil")
    }
  //--------------------------- Check mCheckForSystemLibraryAtStartUpSwitch' outlet not nil
    if nil == mCheckForSystemLibraryAtStartUpSwitch {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mCheckForSystemLibraryAtStartUpSwitch' outlet is nil")
    }
  //--------------------------- Check mCheckLibraryAction' outlet not nil
    if nil == mCheckLibraryAction {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mCheckLibraryAction' outlet is nil")
    }
  //--------------------------- Check mCheckLibraryResultTextView' outlet not nil
    if nil == mCheckLibraryResultTextView {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mCheckLibraryResultTextView' outlet is nil")
    }
  //--------------------------- Check mCheckingForLibraryUpdateProgressIndicator' outlet not nil
    if nil == mCheckingForLibraryUpdateProgressIndicator {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mCheckingForLibraryUpdateProgressIndicator' outlet is nil")
    }
  //--------------------------- Check mCheckingForLibraryUpdateWindow' outlet not nil
    if nil == mCheckingForLibraryUpdateWindow {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mCheckingForLibraryUpdateWindow' outlet is nil")
    }
  //--------------------------- Check mConnectionColorForSchematicColorWell' outlet not nil
    if nil == mConnectionColorForSchematicColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mConnectionColorForSchematicColorWell' outlet is nil")
    }
  //--------------------------- Check mDimensionFontButton' outlet not nil
    if nil == mDimensionFontButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mDimensionFontButton' outlet is nil")
    }
  //--------------------------- Check mDotColorGridForSchematicColorWell' outlet not nil
    if nil == mDotColorGridForSchematicColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mDotColorGridForSchematicColorWell' outlet is nil")
    }
  //--------------------------- Check mDotColorOfPackageGridColorWell' outlet not nil
    if nil == mDotColorOfPackageGridColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mDotColorOfPackageGridColorWell' outlet is nil")
    }
  //--------------------------- Check mDotColorOfSymbolGridColorWell' outlet not nil
    if nil == mDotColorOfSymbolGridColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mDotColorOfSymbolGridColorWell' outlet is nil")
    }
  //--------------------------- Check mEditionTransparencySlider' outlet not nil
    if nil == mEditionTransparencySlider {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mEditionTransparencySlider' outlet is nil")
    }
  //--------------------------- Check mEditionTransparencyTextField' outlet not nil
    if nil == mEditionTransparencyTextField {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mEditionTransparencyTextField' outlet is nil")
    }
  //--------------------------- Check mErrorMessageColorColorWell' outlet not nil
    if nil == mErrorMessageColorColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mErrorMessageColorColorWell' outlet is nil")
    }
  //--------------------------- Check mFontCharacterSelectButton' outlet not nil
    if nil == mFontCharacterSelectButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mFontCharacterSelectButton' outlet is nil")
    }
  //--------------------------- Check mInformativeTextInLibraryUpdateWindow' outlet not nil
    if nil == mInformativeTextInLibraryUpdateWindow {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mInformativeTextInLibraryUpdateWindow' outlet is nil")
    }
  //--------------------------- Check mLibraryUpdateWindow' outlet not nil
    if nil == mLibraryUpdateWindow {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mLibraryUpdateWindow' outlet is nil")
    }
  //--------------------------- Check mLineColorGridForSchematicColorWell' outlet not nil
    if nil == mLineColorGridForSchematicColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mLineColorGridForSchematicColorWell' outlet is nil")
    }
  //--------------------------- Check mLineColorOfPackageGridColorWell' outlet not nil
    if nil == mLineColorOfPackageGridColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mLineColorOfPackageGridColorWell' outlet is nil")
    }
  //--------------------------- Check mLineColorOfSymbolGridColorWell' outlet not nil
    if nil == mLineColorOfSymbolGridColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mLineColorOfSymbolGridColorWell' outlet is nil")
    }
  //--------------------------- Check mMenuRevealInFinder_artworks' outlet not nil
    if nil == mMenuRevealInFinder_artworks {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mMenuRevealInFinder_artworks' outlet is nil")
    }
  //--------------------------- Check mMenuRevealInFinder_devices' outlet not nil
    if nil == mMenuRevealInFinder_devices {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mMenuRevealInFinder_devices' outlet is nil")
    }
  //--------------------------- Check mMenuRevealInFinder_fonts' outlet not nil
    if nil == mMenuRevealInFinder_fonts {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mMenuRevealInFinder_fonts' outlet is nil")
    }
  //--------------------------- Check mMenuRevealInFinder_packages' outlet not nil
    if nil == mMenuRevealInFinder_packages {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mMenuRevealInFinder_packages' outlet is nil")
    }
  //--------------------------- Check mMenuRevealInFinder_symbols' outlet not nil
    if nil == mMenuRevealInFinder_symbols {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mMenuRevealInFinder_symbols' outlet is nil")
    }
  //--------------------------- Check mPackageBackgroundColorColorWell' outlet not nil
    if nil == mPackageBackgroundColorColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPackageBackgroundColorColorWell' outlet is nil")
    }
  //--------------------------- Check mPackageColorColorWell' outlet not nil
    if nil == mPackageColorColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPackageColorColorWell' outlet is nil")
    }
  //--------------------------- Check mPackageColorForDeviceColorWell' outlet not nil
    if nil == mPackageColorForDeviceColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPackageColorForDeviceColorWell' outlet is nil")
    }
  //--------------------------- Check mPackageDimensionColorWell' outlet not nil
    if nil == mPackageDimensionColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPackageDimensionColorWell' outlet is nil")
    }
  //--------------------------- Check mPackageDrawingWidthMultipliedByTenForDevicePopupButton' outlet not nil
    if nil == mPackageDrawingWidthMultipliedByTenForDevicePopupButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPackageDrawingWidthMultipliedByTenForDevicePopupButton' outlet is nil")
    }
  //--------------------------- Check mPackageDrawingWidthMultipliedByTenPopupButton' outlet not nil
    if nil == mPackageDrawingWidthMultipliedByTenPopupButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPackageDrawingWidthMultipliedByTenPopupButton' outlet is nil")
    }
  //--------------------------- Check mPackageGuideColorWell' outlet not nil
    if nil == mPackageGuideColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPackageGuideColorWell' outlet is nil")
    }
  //--------------------------- Check mPackageNameFontForDeviceFontButton' outlet not nil
    if nil == mPackageNameFontForDeviceFontButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPackageNameFontForDeviceFontButton' outlet is nil")
    }
  //--------------------------- Check mPadFontButton' outlet not nil
    if nil == mPadFontButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPadFontButton' outlet is nil")
    }
  //--------------------------- Check mPadNumberColorColorWell' outlet not nil
    if nil == mPadNumberColorColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPadNumberColorColorWell' outlet is nil")
    }
  //--------------------------- Check mPadNumberColorForDeviceColorWell' outlet not nil
    if nil == mPadNumberColorForDeviceColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPadNumberColorForDeviceColorWell' outlet is nil")
    }
  //--------------------------- Check mPadNumberFontForDeviceFontButton' outlet not nil
    if nil == mPadNumberFontForDeviceFontButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPadNumberFontForDeviceFontButton' outlet is nil")
    }
  //--------------------------- Check mPadZoneColorColorWell' outlet not nil
    if nil == mPadZoneColorColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPadZoneColorColorWell' outlet is nil")
    }
  //--------------------------- Check mPinNameColorForSchematicColorWell' outlet not nil
    if nil == mPinNameColorForSchematicColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPinNameColorForSchematicColorWell' outlet is nil")
    }
  //--------------------------- Check mPinNameFontButton' outlet not nil
    if nil == mPinNameFontButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPinNameFontButton' outlet is nil")
    }
  //--------------------------- Check mPinNameFontForDeviceFontButton' outlet not nil
    if nil == mPinNameFontForDeviceFontButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPinNameFontForDeviceFontButton' outlet is nil")
    }
  //--------------------------- Check mPinNameFontForSchematicFontButton' outlet not nil
    if nil == mPinNameFontForSchematicFontButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPinNameFontForSchematicFontButton' outlet is nil")
    }
  //--------------------------- Check mPinNumberColorForSchematicColorWell' outlet not nil
    if nil == mPinNumberColorForSchematicColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPinNumberColorForSchematicColorWell' outlet is nil")
    }
  //--------------------------- Check mPinNumberFontForSchematicFontButton' outlet not nil
    if nil == mPinNumberFontForSchematicFontButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPinNumberFontForSchematicFontButton' outlet is nil")
    }
  //--------------------------- Check mPrefsWindow' outlet not nil
    if nil == mPrefsWindow {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPrefsWindow' outlet is nil")
    }
  //--------------------------- Check mProgressIndicatorInLibraryUpdateWindow' outlet not nil
    if nil == mProgressIndicatorInLibraryUpdateWindow {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mProgressIndicatorInLibraryUpdateWindow' outlet is nil")
    }
  //--------------------------- Check mRemoveLibraryEntryButton' outlet not nil
    if nil == mRemoveLibraryEntryButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mRemoveLibraryEntryButton' outlet is nil")
    }
  //--------------------------- Check mRevealInFinderLibraryInUserApplicationSupportButton' outlet not nil
    if nil == mRevealInFinderLibraryInUserApplicationSupportButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mRevealInFinderLibraryInUserApplicationSupportButton' outlet is nil")
    }
  //--------------------------- Check mSampleStringField' outlet not nil
    if nil == mSampleStringField {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSampleStringField' outlet is nil")
    }
  //--------------------------- Check mSampleStringSizeField' outlet not nil
    if nil == mSampleStringSizeField {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSampleStringSizeField' outlet is nil")
    }
  //--------------------------- Check mSelectionHiliteColorColorWell' outlet not nil
    if nil == mSelectionHiliteColorColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSelectionHiliteColorColorWell' outlet is nil")
    }
  //--------------------------- Check mShowGerberDrawingFlowCheckbox' outlet not nil
    if nil == mShowGerberDrawingFlowCheckbox {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mShowGerberDrawingFlowCheckbox' outlet is nil")
    }
  //--------------------------- Check mShowGerberDrawingIndexesCheckbox' outlet not nil
    if nil == mShowGerberDrawingIndexesCheckbox {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mShowGerberDrawingIndexesCheckbox' outlet is nil")
    }
  //--------------------------- Check mSuccessMessageColorColorWell' outlet not nil
    if nil == mSuccessMessageColorColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSuccessMessageColorColorWell' outlet is nil")
    }
  //--------------------------- Check mSymbolAndPackageBackgroundColorForDeviceColorWell' outlet not nil
    if nil == mSymbolAndPackageBackgroundColorForDeviceColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSymbolAndPackageBackgroundColorForDeviceColorWell' outlet is nil")
    }
  //--------------------------- Check mSymbolAndPackageGridDotColorForDeviceColorWell' outlet not nil
    if nil == mSymbolAndPackageGridDotColorForDeviceColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSymbolAndPackageGridDotColorForDeviceColorWell' outlet is nil")
    }
  //--------------------------- Check mSymbolAndPackageLineDotColorForDeviceColorWell' outlet not nil
    if nil == mSymbolAndPackageLineDotColorForDeviceColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSymbolAndPackageLineDotColorForDeviceColorWell' outlet is nil")
    }
  //--------------------------- Check mSymbolBackgroundColorColorWell' outlet not nil
    if nil == mSymbolBackgroundColorColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSymbolBackgroundColorColorWell' outlet is nil")
    }
  //--------------------------- Check mSymbolColorColorWell' outlet not nil
    if nil == mSymbolColorColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSymbolColorColorWell' outlet is nil")
    }
  //--------------------------- Check mSymbolColorForDeviceColorWell' outlet not nil
    if nil == mSymbolColorForDeviceColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSymbolColorForDeviceColorWell' outlet is nil")
    }
  //--------------------------- Check mSymbolColorForSchematicColorWell' outlet not nil
    if nil == mSymbolColorForSchematicColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSymbolColorForSchematicColorWell' outlet is nil")
    }
  //--------------------------- Check mSymbolDrawingWidthMultipliedByTenForDevicePopupButton' outlet not nil
    if nil == mSymbolDrawingWidthMultipliedByTenForDevicePopupButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSymbolDrawingWidthMultipliedByTenForDevicePopupButton' outlet is nil")
    }
  //--------------------------- Check mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton' outlet not nil
    if nil == mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton' outlet is nil")
    }
  //--------------------------- Check mSymbolDrawingWidthMultipliedByTenPopupButton' outlet not nil
    if nil == mSymbolDrawingWidthMultipliedByTenPopupButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSymbolDrawingWidthMultipliedByTenPopupButton' outlet is nil")
    }
  //--------------------------- Check mSymbolNameFontForDeviceFontButton' outlet not nil
    if nil == mSymbolNameFontForDeviceFontButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSymbolNameFontForDeviceFontButton' outlet is nil")
    }
  //--------------------------- Check mTableViewInLibraryUpdateWindow' outlet not nil
    if nil == mTableViewInLibraryUpdateWindow {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mTableViewInLibraryUpdateWindow' outlet is nil")
    }
  //--------------------------- Check mToolbar' outlet not nil
    if nil == mToolbar {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mToolbar' outlet is nil")
    }
  //--------------------------- Check mTopSidePadColorForDeviceColorWell' outlet not nil
    if nil == mTopSidePadColorForDeviceColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mTopSidePadColorForDeviceColorWell' outlet is nil")
    }
  //--------------------------- Check mTopSidePadColorWell' outlet not nil
    if nil == mTopSidePadColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mTopSidePadColorWell' outlet is nil")
    }
  //--------------------------- Check mUnplacedComponentsColorForSchematicColorWell' outlet not nil
    if nil == mUnplacedComponentsColorForSchematicColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mUnplacedComponentsColorForSchematicColorWell' outlet is nil")
    }
  //--------------------------- Check mUpDateButtonInLibraryUpdateWindow' outlet not nil
    if nil == mUpDateButtonInLibraryUpdateWindow {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mUpDateButtonInLibraryUpdateWindow' outlet is nil")
    }
  //--------------------------- Check mUpDateLibraryMenuItemInCanariMenu' outlet not nil
    if nil == mUpDateLibraryMenuItemInCanariMenu {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mUpDateLibraryMenuItemInCanariMenu' outlet is nil")
    }
  //--------------------------- Check mUpdateSystemLibraryBox' outlet not nil
    if nil == mUpdateSystemLibraryBox {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mUpdateSystemLibraryBox' outlet is nil")
    }
  //--------------------------- Check mUseLibraryInUserApplicationSupportPathCheckBox' outlet not nil
    if nil == mUseLibraryInUserApplicationSupportPathCheckBox {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mUseLibraryInUserApplicationSupportPathCheckBox' outlet is nil")
    }
  //--------------------------- Check mWarningMessageColorColorWell' outlet not nil
    if nil == mWarningMessageColorColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mWarningMessageColorColorWell' outlet is nil")
    }
  //--------------------------- Check selectionHilitePopupButton' outlet not nil
    if nil == selectionHilitePopupButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'selectionHilitePopupButton' outlet is nil")
    }
  //--------------------------- Install compute functions for transients
    self.mValueRevealInFinder_symbols_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.usesUserLibrary_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.usesUserLibrary_property_selection, unwSelf.additionnalLibraryArray_property_selection, unwSelf.additionnalLibraryArray_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_Preferences_mValueRevealInFinder_symbols (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mValueRevealInFinder_packages_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.usesUserLibrary_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.usesUserLibrary_property_selection, unwSelf.additionnalLibraryArray_property_selection, unwSelf.additionnalLibraryArray_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_Preferences_mValueRevealInFinder_packages (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mValueRevealInFinder_devices_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.usesUserLibrary_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.usesUserLibrary_property_selection, unwSelf.additionnalLibraryArray_property_selection, unwSelf.additionnalLibraryArray_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_Preferences_mValueRevealInFinder_devices (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mValueRevealInFinder_fonts_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.usesUserLibrary_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.usesUserLibrary_property_selection, unwSelf.additionnalLibraryArray_property_selection, unwSelf.additionnalLibraryArray_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_Preferences_mValueRevealInFinder_fonts (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mValueRevealInFinder_artworks_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.usesUserLibrary_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        kind &= unwSelf.additionnalLibraryArray_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.usesUserLibrary_property_selection, unwSelf.additionnalLibraryArray_property_selection, unwSelf.additionnalLibraryArray_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (compute_Preferences_mValueRevealInFinder_artworks (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
  //--------------------------- Install property observers for transients
    self.usesUserLibrary_property.addEBObserver (self.mValueRevealInFinder_symbols_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mUses (self.mValueRevealInFinder_symbols_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mPath (self.mValueRevealInFinder_symbols_property)
    self.usesUserLibrary_property.addEBObserver (self.mValueRevealInFinder_packages_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mUses (self.mValueRevealInFinder_packages_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mPath (self.mValueRevealInFinder_packages_property)
    self.usesUserLibrary_property.addEBObserver (self.mValueRevealInFinder_devices_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mUses (self.mValueRevealInFinder_devices_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mPath (self.mValueRevealInFinder_devices_property)
    self.usesUserLibrary_property.addEBObserver (self.mValueRevealInFinder_fonts_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mUses (self.mValueRevealInFinder_fonts_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mPath (self.mValueRevealInFinder_fonts_property)
    self.usesUserLibrary_property.addEBObserver (self.mValueRevealInFinder_artworks_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mUses (self.mValueRevealInFinder_artworks_property)
    self.additionnalLibraryArray_property.addEBObserverOf_mPath (self.mValueRevealInFinder_artworks_property)
  //--------------------------- Install bindings
    mErrorMessageColorColorWell?.bind_color (self.errorMessageColor_property, file: #file, line: #line, sendContinously:false)
    mWarningMessageColorColorWell?.bind_color (self.warningMessageColor_property, file: #file, line: #line, sendContinously:false)
    mSuccessMessageColorColorWell?.bind_color (self.successMessageColor_property, file: #file, line: #line, sendContinously:false)
    mSelectionHiliteColorColorWell?.bind_color (self.selectionHiliteColor_property, file: #file, line: #line, sendContinously:false)
    selectionHilitePopupButton?.bind_selectedTag (self.hiliteWidthMultipliedByTen_property, file: #file, line: #line)
    mMenuRevealInFinder_symbols?.bind_populateSubmenus (self.mValueRevealInFinder_symbols_property, file: #file, line: #line)
    mMenuRevealInFinder_packages?.bind_populateSubmenus (self.mValueRevealInFinder_packages_property, file: #file, line: #line)
    mMenuRevealInFinder_devices?.bind_populateSubmenus (self.mValueRevealInFinder_devices_property, file: #file, line: #line)
    mMenuRevealInFinder_fonts?.bind_populateSubmenus (self.mValueRevealInFinder_fonts_property, file: #file, line: #line)
    mMenuRevealInFinder_artworks?.bind_populateSubmenus (self.mValueRevealInFinder_artworks_property, file: #file, line: #line)
    mSymbolColorColorWell?.bind_color (self.symbolColor_property, file: #file, line: #line, sendContinously:false)
    mDotColorOfSymbolGridColorWell?.bind_color (self.dotColorOfSymbolGrid_property, file: #file, line: #line, sendContinously:false)
    mLineColorOfSymbolGridColorWell?.bind_color (self.lineColorOfSymbolGrid_property, file: #file, line: #line, sendContinously:false)
    mSymbolBackgroundColorColorWell?.bind_color (self.symbolBackgroundColor_property, file: #file, line: #line, sendContinously:false)
    mSymbolDrawingWidthMultipliedByTenPopupButton?.bind_selectedTag (self.symbolDrawingWidthMultipliedByTen_property, file: #file, line: #line)
    mPinNameFontButton?.bind_fontValue (self.pinNameFont_property, file: #file, line: #line)
    mDotColorOfPackageGridColorWell?.bind_color (self.dotColorOfPackageGrid_property, file: #file, line: #line, sendContinously:false)
    mLineColorOfPackageGridColorWell?.bind_color (self.lineColorOfPackageGrid_property, file: #file, line: #line, sendContinously:false)
    mPackageBackgroundColorColorWell?.bind_color (self.packageBackgroundColor_property, file: #file, line: #line, sendContinously:false)
    mPackageColorColorWell?.bind_color (self.packageColor_property, file: #file, line: #line, sendContinously:false)
    mTopSidePadColorWell?.bind_color (self.topSidePadColor_property, file: #file, line: #line, sendContinously:false)
    mBottomSidePadColorWell?.bind_color (self.bottomSidePadColor_property, file: #file, line: #line, sendContinously:false)
    mPadNumberColorColorWell?.bind_color (self.padNumberColor_property, file: #file, line: #line, sendContinously:false)
    mPadFontButton?.bind_fontValue (self.padNumberFont_property, file: #file, line: #line)
    mPackageGuideColorWell?.bind_color (self.packageGuideColor_property, file: #file, line: #line, sendContinously:false)
    mPackageDimensionColorWell?.bind_color (self.packageDimensionColor_property, file: #file, line: #line, sendContinously:false)
    mDimensionFontButton?.bind_fontValue (self.dimensionFont_property, file: #file, line: #line)
    mPadZoneColorColorWell?.bind_color (self.padZoneColor_property, file: #file, line: #line, sendContinously:false)
    mPackageDrawingWidthMultipliedByTenPopupButton?.bind_selectedTag (self.packageDrawingWidthMultipliedByTen_property, file: #file, line: #line)
    mSymbolAndPackageGridDotColorForDeviceColorWell?.bind_color (self.mSymbolAndPackageGridDotColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mSymbolAndPackageLineDotColorForDeviceColorWell?.bind_color (self.mSymbolAndPackageGridLineColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mSymbolAndPackageBackgroundColorForDeviceColorWell?.bind_color (self.mSymbolAndPackageBackgroundColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mPackageColorForDeviceColorWell?.bind_color (self.mPackageColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mTopSidePadColorForDeviceColorWell?.bind_color (self.mTopSidePadColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mBottomSidePadColorDorDeviveColorWell?.bind_color (self.mBottomSidePadColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mPadNumberColorForDeviceColorWell?.bind_color (self.mPadNumberColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mPackageNameFontForDeviceFontButton?.bind_fontValue (self.mPadNumberFontForDevice_property, file: #file, line: #line)
    mPadNumberFontForDeviceFontButton?.bind_fontValue (self.mPadNumberFontForDevice_property, file: #file, line: #line)
    mSymbolColorForDeviceColorWell?.bind_color (self.mSymbolColorForDevice_property, file: #file, line: #line, sendContinously:false)
    mSymbolNameFontForDeviceFontButton?.bind_fontValue (self.mSymbolNameFontForDevice_property, file: #file, line: #line)
    mPinNameFontForDeviceFontButton?.bind_fontValue (self.mPinNameFontForDevice_property, file: #file, line: #line)
    mSymbolDrawingWidthMultipliedByTenForDevicePopupButton?.bind_selectedTag (self.symbolDrawingWidthForDeviceMultipliedByTen_property, file: #file, line: #line)
    mPackageDrawingWidthMultipliedByTenForDevicePopupButton?.bind_selectedTag (self.packageDrawingWidthForDeviceMultipliedByTen_property, file: #file, line: #line)
    mDotColorGridForSchematicColorWell?.bind_color (self.dotColorGridForSchematic_property, file: #file, line: #line, sendContinously:false)
    mLineColorGridForSchematicColorWell?.bind_color (self.lineColorGridForSchematic_property, file: #file, line: #line, sendContinously:false)
    mUnplacedComponentsColorForSchematicColorWell?.bind_color (self.symbolColorForUnplacedComponentsForSchematic_property, file: #file, line: #line, sendContinously:false)
    mSymbolColorForSchematicColorWell?.bind_color (self.symbolColorForSchematic_property, file: #file, line: #line, sendContinously:false)
    mPinNameFontForSchematicFontButton?.bind_fontValue (self.pinNameFontForSchematic_property, file: #file, line: #line)
    mPinNameColorForSchematicColorWell?.bind_color (self.pinNameColorForSchematic_property, file: #file, line: #line, sendContinously:false)
    mPinNumberFontForSchematicFontButton?.bind_fontValue (self.pinNumberFontForSchematic_property, file: #file, line: #line)
    mPinNumberColorForSchematicColorWell?.bind_color (self.pinNumberColorForSchematic_property, file: #file, line: #line, sendContinously:false)
    mConnectionColorForSchematicColorWell?.bind_color (self.connectionColorForSchematic_property, file: #file, line: #line, sendContinously:false)
    mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton?.bind_selectedTag (self.symbolDrawingWidthMultipliedByTenForSchematic_property, file: #file, line: #line)
    mBoardDotColorGridColorWell?.bind_color (self.dotColorGridForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardLineColorGridColorWell?.bind_color (self.lineColorGridForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardBackgroundColorWell?.bind_color (self.boardBackgroundColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardErrorBackgroundColorWell?.bind_color (self.errorBackgroundColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardDrawErrorBackgroundCheckbox?.bind_value (self.drawErrorBackgroundForBoard_property, file: #file, line: #line)
    mBoardWarningBackgroundColorWell?.bind_color (self.warningBackgroundColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardDrawWarningBackgroundCheckbox?.bind_value (self.drawEWarningBackgroundForBoard_property, file: #file, line: #line)
    mBoardLimitsColorWell?.bind_color (self.boardLimitsColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardClearanceColorWell?.bind_color (self.boardClearanceColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardTopSideRestrictRectangleColorWell?.bind_color (self.topSideRestrictRectangleColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardBottomSideRestrictRectangleColorWell?.bind_color (self.bottomSideRestrictRectangleColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardTopSideLegendColorWell?.bind_color (self.topSideLegendColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardTopSideLayoutColorWell?.bind_color (self.topSideLayoutColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardBottomSideLayoutColorWell?.bind_color (self.bottomSideLayoutColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardBottomSideLegendColorWell?.bind_color (self.bottomSideLegendColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardTopSidePadColorWell?.bind_color (self.topSidePadColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardBottomSidePadColorWell?.bind_color (self.bottomSidePadColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardPadFontButton?.bind_fontValue (self.padNumberFontForBoard_property, file: #file, line: #line)
    mBoardPadNumberColorWell?.bind_color (self.padNumberColorForBoard_property, file: #file, line: #line, sendContinously:false)
    mBoardPackageDrawingWidthMultipliedByTenPopupButton?.bind_selectedTag (self.packageDrawingWidthMultpliedByTenForBoard_property, file: #file, line: #line)
    mSampleStringField?.bind_value (self.sampleString_property, file: #file, line: #line, sendContinously:true)
    mSampleStringSizeField?.bind_value (self.sampleStringSize_property, file: #file, line: #line, sendContinously:false, autoFormatter:false)
    mShowGerberDrawingFlowCheckbox?.bind_value (self.showGerberDrawingFlow_property, file: #file, line: #line)
    mShowGerberDrawingIndexesCheckbox?.bind_value (self.showGerberDrawingIndexes_property, file: #file, line: #line)
    mFontCharacterSelectButton?.bind_codePoint (self.currentCharacterCodePoint_property, file: #file, line: #line)
    mEditionTransparencySlider?.bind_doubleValue (self.fontEditionTransparency_property, file: #file, line: #line, sendContinously:true)
    mEditionTransparencyTextField?.bind_value (self.fontEditionTransparency_property, file: #file, line: #line, sendContinously:false, autoFormatter:false)
    mUseLibraryInUserApplicationSupportPathCheckBox?.bind_value (self.usesUserLibrary_property, file: #file, line: #line)
    mCheckForSystemLibraryAtStartUpSwitch?.bind_value (self.checkForSystemLibraryAtStartUp_property, file: #file, line: #line)
  //--------------------------- Install multiple bindings
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction:{
          return (self.additionnalLibraryArrayController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet:self.mRemoveLibraryEntryButton
      )
      self.additionnalLibraryArrayController.selectedArray_property.count_property.addEBObserver (controller)
      mController_mRemoveLibraryEntryButton_enabled = controller
    }
  //--------------------------- Array controller
    self.additionnalLibraryArrayController.bind_modelAndView (
      model: self.additionnalLibraryArray_property,
      tableViewArray: [mAdditionnalLibraryArrayTableView!],
      ebView: nil,
      managedObjectContext: nil,
      file: #file,
      line: #line
    )
  //--------------------------- Set targets / actions
    self.mRevealInFinderLibraryInUserApplicationSupportButton?.target = self
    self.mRevealInFinderLibraryInUserApplicationSupportButton?.action = #selector (Preferences.revealUserLibraryInFinderAction (_:))
    self.mAddLibraryEntryButton?.target = self
    self.mAddLibraryEntryButton?.action = #selector (Preferences.addLibraryEntryAction (_:))
    self.mRemoveLibraryEntryButton?.target = additionnalLibraryArrayController
    self.mRemoveLibraryEntryButton?.action = #selector (ArrayController_Preferences_additionnalLibraryArrayController.remove (_:))
    self.mCheckLibraryAction?.target = self
    self.mCheckLibraryAction?.action = #selector (Preferences.checkLibraryAction (_:))
  //--------------------------- Extern functions
    self.setupForLibrary ()
  }

  //····················································································································
  //    Multiple bindings controller
  //····················································································································

  fileprivate var mController_mRemoveLibraryEntryButton_enabled : MultipleBindingController_enabled?

  //····················································································································
  //    applicationWillTerminateAction
  //····················································································································

  func applicationWillTerminateAction (_ : NSNotification) {
    self.errorMessageColor_property.storeInPreferencesWithKey (inKey:"Preferences:errorMessageColor")
    self.warningMessageColor_property.storeInPreferencesWithKey (inKey:"Preferences:warningMessageColor")
    self.successMessageColor_property.storeInPreferencesWithKey (inKey:"Preferences:successMessageColor")
    self.selectionHiliteColor_property.storeInPreferencesWithKey (inKey:"Preferences:selectionHiliteColor")
    self.hiliteWidthMultipliedByTen_property.storeInPreferencesWithKey (inKey:"Preferences:hiliteWidthMultipliedByTen")
    self.symbolColor_property.storeInPreferencesWithKey (inKey:"Preferences:symbolColor")
    self.dotColorOfSymbolGrid_property.storeInPreferencesWithKey (inKey:"Preferences:dotColorOfSymbolGrid")
    self.lineColorOfSymbolGrid_property.storeInPreferencesWithKey (inKey:"Preferences:lineColorOfSymbolGrid")
    self.symbolBackgroundColor_property.storeInPreferencesWithKey (inKey:"Preferences:symbolBackgroundColor")
    self.symbolDrawingWidthMultipliedByTen_property.storeInPreferencesWithKey (inKey:"Preferences:symbolDrawingWidthMultipliedByTen")
    self.pinNameFont_property.storeInPreferencesWithKey (inKey:"Preferences:pinNameFont")
    self.dotColorOfPackageGrid_property.storeInPreferencesWithKey (inKey:"Preferences:dotColorOfPackageGrid")
    self.lineColorOfPackageGrid_property.storeInPreferencesWithKey (inKey:"Preferences:lineColorOfPackageGrid")
    self.packageBackgroundColor_property.storeInPreferencesWithKey (inKey:"Preferences:packageBackgroundColor")
    self.packageColor_property.storeInPreferencesWithKey (inKey:"Preferences:packageColor")
    self.topSidePadColor_property.storeInPreferencesWithKey (inKey:"Preferences:topSidePadColor")
    self.bottomSidePadColor_property.storeInPreferencesWithKey (inKey:"Preferences:bottomSidePadColor")
    self.padNumberColor_property.storeInPreferencesWithKey (inKey:"Preferences:padNumberColor")
    self.padNumberFont_property.storeInPreferencesWithKey (inKey:"Preferences:padNumberFont")
    self.packageGuideColor_property.storeInPreferencesWithKey (inKey:"Preferences:packageGuideColor")
    self.packageDimensionColor_property.storeInPreferencesWithKey (inKey:"Preferences:packageDimensionColor")
    self.dimensionFont_property.storeInPreferencesWithKey (inKey:"Preferences:dimensionFont")
    self.padZoneColor_property.storeInPreferencesWithKey (inKey:"Preferences:padZoneColor")
    self.packageDrawingWidthMultipliedByTen_property.storeInPreferencesWithKey (inKey:"Preferences:packageDrawingWidthMultipliedByTen")
    self.mSymbolAndPackageGridDotColorForDevice_property.storeInPreferencesWithKey (inKey:"Preferences:mSymbolAndPackageGridDotColorForDevice")
    self.mSymbolAndPackageGridLineColorForDevice_property.storeInPreferencesWithKey (inKey:"Preferences:mSymbolAndPackageGridLineColorForDevice")
    self.mSymbolAndPackageBackgroundColorForDevice_property.storeInPreferencesWithKey (inKey:"Preferences:mSymbolAndPackageBackgroundColorForDevice")
    self.mPackageColorForDevice_property.storeInPreferencesWithKey (inKey:"Preferences:mPackageColorForDevice")
    self.mTopSidePadColorForDevice_property.storeInPreferencesWithKey (inKey:"Preferences:mTopSidePadColorForDevice")
    self.mBottomSidePadColorForDevice_property.storeInPreferencesWithKey (inKey:"Preferences:mBottomSidePadColorForDevice")
    self.mPadNumberColorForDevice_property.storeInPreferencesWithKey (inKey:"Preferences:mPadNumberColorForDevice")
    self.mPackageNameFontForDevice_property.storeInPreferencesWithKey (inKey:"Preferences:mPackageNameFontForDevice")
    self.mPadNumberFontForDevice_property.storeInPreferencesWithKey (inKey:"Preferences:mPadNumberFontForDevice")
    self.mSymbolColorForDevice_property.storeInPreferencesWithKey (inKey:"Preferences:mSymbolColorForDevice")
    self.mSymbolNameFontForDevice_property.storeInPreferencesWithKey (inKey:"Preferences:mSymbolNameFontForDevice")
    self.mPinNameFontForDevice_property.storeInPreferencesWithKey (inKey:"Preferences:mPinNameFontForDevice")
    self.symbolDrawingWidthForDeviceMultipliedByTen_property.storeInPreferencesWithKey (inKey:"Preferences:symbolDrawingWidthForDeviceMultipliedByTen")
    self.packageDrawingWidthForDeviceMultipliedByTen_property.storeInPreferencesWithKey (inKey:"Preferences:packageDrawingWidthForDeviceMultipliedByTen")
    self.dotColorGridForSchematic_property.storeInPreferencesWithKey (inKey:"Preferences:dotColorGridForSchematic")
    self.lineColorGridForSchematic_property.storeInPreferencesWithKey (inKey:"Preferences:lineColorGridForSchematic")
    self.symbolColorForUnplacedComponentsForSchematic_property.storeInPreferencesWithKey (inKey:"Preferences:symbolColorForUnplacedComponentsForSchematic")
    self.symbolColorForSchematic_property.storeInPreferencesWithKey (inKey:"Preferences:symbolColorForSchematic")
    self.pinNameFontForSchematic_property.storeInPreferencesWithKey (inKey:"Preferences:pinNameFontForSchematic")
    self.pinNameColorForSchematic_property.storeInPreferencesWithKey (inKey:"Preferences:pinNameColorForSchematic")
    self.pinNumberFontForSchematic_property.storeInPreferencesWithKey (inKey:"Preferences:pinNumberFontForSchematic")
    self.pinNumberColorForSchematic_property.storeInPreferencesWithKey (inKey:"Preferences:pinNumberColorForSchematic")
    self.connectionColorForSchematic_property.storeInPreferencesWithKey (inKey:"Preferences:connectionColorForSchematic")
    self.symbolDrawingWidthMultipliedByTenForSchematic_property.storeInPreferencesWithKey (inKey:"Preferences:symbolDrawingWidthMultipliedByTenForSchematic")
    self.dotColorGridForBoard_property.storeInPreferencesWithKey (inKey:"Preferences:dotColorGridForBoard")
    self.lineColorGridForBoard_property.storeInPreferencesWithKey (inKey:"Preferences:lineColorGridForBoard")
    self.boardBackgroundColorForBoard_property.storeInPreferencesWithKey (inKey:"Preferences:boardBackgroundColorForBoard")
    self.errorBackgroundColorForBoard_property.storeInPreferencesWithKey (inKey:"Preferences:errorBackgroundColorForBoard")
    self.drawErrorBackgroundForBoard_property.storeInPreferencesWithKey (inKey:"Preferences:drawErrorBackgroundForBoard")
    self.warningBackgroundColorForBoard_property.storeInPreferencesWithKey (inKey:"Preferences:warningBackgroundColorForBoard")
    self.drawEWarningBackgroundForBoard_property.storeInPreferencesWithKey (inKey:"Preferences:drawEWarningBackgroundForBoard")
    self.boardLimitsColorForBoard_property.storeInPreferencesWithKey (inKey:"Preferences:boardLimitsColorForBoard")
    self.boardClearanceColorForBoard_property.storeInPreferencesWithKey (inKey:"Preferences:boardClearanceColorForBoard")
    self.topSideRestrictRectangleColorForBoard_property.storeInPreferencesWithKey (inKey:"Preferences:topSideRestrictRectangleColorForBoard")
    self.bottomSideRestrictRectangleColorForBoard_property.storeInPreferencesWithKey (inKey:"Preferences:bottomSideRestrictRectangleColorForBoard")
    self.topSideLegendColorForBoard_property.storeInPreferencesWithKey (inKey:"Preferences:topSideLegendColorForBoard")
    self.topSideLayoutColorForBoard_property.storeInPreferencesWithKey (inKey:"Preferences:topSideLayoutColorForBoard")
    self.bottomSideLayoutColorForBoard_property.storeInPreferencesWithKey (inKey:"Preferences:bottomSideLayoutColorForBoard")
    self.bottomSideLegendColorForBoard_property.storeInPreferencesWithKey (inKey:"Preferences:bottomSideLegendColorForBoard")
    self.topSidePadColorForBoard_property.storeInPreferencesWithKey (inKey:"Preferences:topSidePadColorForBoard")
    self.bottomSidePadColorForBoard_property.storeInPreferencesWithKey (inKey:"Preferences:bottomSidePadColorForBoard")
    self.padNumberFontForBoard_property.storeInPreferencesWithKey (inKey:"Preferences:padNumberFontForBoard")
    self.padNumberColorForBoard_property.storeInPreferencesWithKey (inKey:"Preferences:padNumberColorForBoard")
    self.packageDrawingWidthMultpliedByTenForBoard_property.storeInPreferencesWithKey (inKey:"Preferences:packageDrawingWidthMultpliedByTenForBoard")
    self.sampleString_property.storeInPreferencesWithKey (inKey:"Preferences:sampleString")
    self.sampleStringSize_property.storeInPreferencesWithKey (inKey:"Preferences:sampleStringSize")
    self.showGerberDrawingFlow_property.storeInPreferencesWithKey (inKey:"Preferences:showGerberDrawingFlow")
    self.showGerberDrawingIndexes_property.storeInPreferencesWithKey (inKey:"Preferences:showGerberDrawingIndexes")
    self.currentCharacterCodePoint_property.storeInPreferencesWithKey (inKey:"Preferences:currentCharacterCodePoint")
    self.fontEditionTransparency_property.storeInPreferencesWithKey (inKey:"Preferences:fontEditionTransparency")
    self.usesUserLibrary_property.storeInPreferencesWithKey (inKey:"Preferences:usesUserLibrary")
    self.checkForSystemLibraryAtStartUp_property.storeInPreferencesWithKey (inKey:"Preferences:checkForSystemLibraryAtStartUp")
    self.mergerModelViewHorizontalFlip_property.storeInPreferencesWithKey (inKey:"Preferences:mergerModelViewHorizontalFlip")
    self.mergerModelViewVerticalFlip_property.storeInPreferencesWithKey (inKey:"Preferences:mergerModelViewVerticalFlip")
    self.mergerModelViewDisplayHoles_property.storeInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayHoles")
    self.mergerModelViewDisplayVias_property.storeInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayVias")
    self.mergerModelViewDisplayFrontPads_property.storeInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayFrontPads")
    self.mergerModelViewDisplayBoardLimits_property.storeInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayBoardLimits")
    self.mergerModelViewDisplayFrontComponentNames_property.storeInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayFrontComponentNames")
    self.mergerModelViewDisplayFrontComponentValues_property.storeInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayFrontComponentValues")
    self.mergerModelViewDisplayFrontPackages_property.storeInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayFrontPackages")
    self.mergerModelViewDisplayFrontLegendTexts_property.storeInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayFrontLegendTexts")
    self.mergerModelViewDisplayFrontTracks_property.storeInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayFrontTracks")
    self.mergerModelViewDisplayFrontLayoutTexts_property.storeInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayFrontLayoutTexts")
    self.mergerModelViewDisplayBackPads_property.storeInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayBackPads")
    self.mergerModelViewDisplayBackComponentNames_property.storeInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayBackComponentNames")
    self.mergerModelViewDisplayBackComponentValues_property.storeInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayBackComponentValues")
    self.mergerModelViewDisplayBackLegendTexts_property.storeInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayBackLegendTexts")
    self.mergerModelViewDisplayBackPackages_property.storeInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayBackPackages")
    self.mergerModelViewDisplayBackTracks_property.storeInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayBackTracks")
    self.mergerModelViewDisplayBackLayoutTexts_property.storeInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayBackLayoutTexts")
    self.mergerModelViewDisplayFrontLegendLines_property.storeInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayFrontLegendLines")
    self.mergerModelViewDisplayBackLegendLines_property.storeInPreferencesWithKey (inKey:"Preferences:mergerModelViewDisplayBackLegendLines")
    self.mergerBoardViewHorizontalFlip_property.storeInPreferencesWithKey (inKey:"Preferences:mergerBoardViewHorizontalFlip")
    self.mergerBoardViewVerticalFlip_property.storeInPreferencesWithKey (inKey:"Preferences:mergerBoardViewVerticalFlip")
    self.mergerBoardViewDisplayHoles_property.storeInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayHoles")
    self.mergerBoardViewDisplayVias_property.storeInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayVias")
    self.mergerBoardViewDisplayFrontPads_property.storeInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayFrontPads")
    self.mergerBoardViewDisplayInternalBoardLimits_property.storeInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayInternalBoardLimits")
    self.mergerBoardViewDisplayBoardLimits_property.storeInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayBoardLimits")
    self.mergerBoardViewDisplayFrontComponentNames_property.storeInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayFrontComponentNames")
    self.mergerBoardViewDisplayFrontComponentValues_property.storeInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayFrontComponentValues")
    self.mergerBoardViewDisplayFrontPackages_property.storeInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayFrontPackages")
    self.mergerBoardViewDisplayFrontLegendTexts_property.storeInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayFrontLegendTexts")
    self.mergerBoardViewDisplayFrontTracks_property.storeInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayFrontTracks")
    self.mergerBoardViewDisplayFrontLayoutTexts_property.storeInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayFrontLayoutTexts")
    self.mergerBoardViewDisplayBackPads_property.storeInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayBackPads")
    self.mergerBoardViewDisplayBackComponentNames_property.storeInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayBackComponentNames")
    self.mergerBoardViewDisplayBackComponentValues_property.storeInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayBackComponentValues")
    self.mergerBoardViewDisplayBackLegendTexts_property.storeInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayBackLegendTexts")
    self.mergerBoardViewDisplayBackPackages_property.storeInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayBackPackages")
    self.mergerBoardViewDisplayBackTracks_property.storeInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayBackTracks")
    self.mergerBoardViewDisplayBackLayoutTexts_property.storeInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayBackLayoutTexts")
    self.mergerBoardViewDisplayFrontLegendLines_property.storeInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayFrontLegendLines")
    self.mergerBoardViewDisplayBackLegendLines_property.storeInPreferencesWithKey (inKey:"Preferences:mergerBoardViewDisplayBackLegendLines")
    self.mergerColorHoles_property.storeInPreferencesWithKey (inKey:"Preferences:mergerColorHoles")
    self.mergerColorVias_property.storeInPreferencesWithKey (inKey:"Preferences:mergerColorVias")
    self.mergerColorFrontPads_property.storeInPreferencesWithKey (inKey:"Preferences:mergerColorFrontPads")
    self.mergerColorBoardLimits_property.storeInPreferencesWithKey (inKey:"Preferences:mergerColorBoardLimits")
    self.mergerColorInternalBoardLimits_property.storeInPreferencesWithKey (inKey:"Preferences:mergerColorInternalBoardLimits")
    self.mergerColorFrontComponentNames_property.storeInPreferencesWithKey (inKey:"Preferences:mergerColorFrontComponentNames")
    self.mergerColorFrontComponentValues_property.storeInPreferencesWithKey (inKey:"Preferences:mergerColorFrontComponentValues")
    self.mergerColorFrontPackages_property.storeInPreferencesWithKey (inKey:"Preferences:mergerColorFrontPackages")
    self.mergerColorFrontLegendTexts_property.storeInPreferencesWithKey (inKey:"Preferences:mergerColorFrontLegendTexts")
    self.mergerColorFrontTracks_property.storeInPreferencesWithKey (inKey:"Preferences:mergerColorFrontTracks")
    self.mergerColorFrontLayoutTexts_property.storeInPreferencesWithKey (inKey:"Preferences:mergerColorFrontLayoutTexts")
    self.mergerColorBackPads_property.storeInPreferencesWithKey (inKey:"Preferences:mergerColorBackPads")
    self.mergerColorBackComponentNames_property.storeInPreferencesWithKey (inKey:"Preferences:mergerColorBackComponentNames")
    self.mergerColorBackComponentValues_property.storeInPreferencesWithKey (inKey:"Preferences:mergerColorBackComponentValues")
    self.mergerColorBackLegendTexts_property.storeInPreferencesWithKey (inKey:"Preferences:mergerColorBackLegendTexts")
    self.mergerColorBackPackages_property.storeInPreferencesWithKey (inKey:"Preferences:mergerColorBackPackages")
    self.mergerColorBackTracks_property.storeInPreferencesWithKey (inKey:"Preferences:mergerColorBackTracks")
    self.mergerColorBackLayoutTexts_property.storeInPreferencesWithKey (inKey:"Preferences:mergerColorBackLayoutTexts")
    self.mergerColorFrontLegendLines_property.storeInPreferencesWithKey (inKey:"Preferences:mergerColorFrontLegendLines")
    self.mergerColorBackLegendLines_property.storeInPreferencesWithKey (inKey:"Preferences:mergerColorBackLegendLines")
    self.mergerColorBackground_property.storeInPreferencesWithKey (inKey:"Preferences:mergerColorBackground")
    self.additionnalLibraryArray_property.storeInPreferencesWithKey (inKey:"Preferences:additionnalLibraryArray")
  }

  //····················································································································

}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

