//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

var g_Preferences : Preferences? = nil

//————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

@objc(Preferences) class Preferences : EBObject {

  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var mAddLibraryEntryButton : EBButton? = nil
  @IBOutlet var mAdditionnalLibraryArrayTableView : EBTableView? = nil
  @IBOutlet var mBoardBackgroundColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSideLayoutColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSideLegendColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mBoardBottomSideRestrictRectangleColorWell : EBColorWell? = nil
  @IBOutlet var mBoardClearanceColorWell : EBColorWell? = nil
  @IBOutlet var mBoardDotColorGridColorWell : EBColorWell? = nil
  @IBOutlet var mBoardDrawErrorBackgroundCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardDrawWarningBackgroundCheckbox : EBSwitch? = nil
  @IBOutlet var mBoardErrorBackgroundColorWell : EBColorWell? = nil
  @IBOutlet var mBoardLimitsColorWell : EBColorWell? = nil
  @IBOutlet var mBoardLineColorGridColorWell : EBColorWell? = nil
  @IBOutlet var mBoardPackageDrawingWidthMultipliedByTenPopupButton : EBPopUpButton? = nil
  @IBOutlet var mBoardPadFontButton : EBFontButton? = nil
  @IBOutlet var mBoardPadNumberColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSideLayoutColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSideLegendColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mBoardTopSideRestrictRectangleColorWell : EBColorWell? = nil
  @IBOutlet var mBoardWarningBackgroundColorWell : EBColorWell? = nil
  @IBOutlet var mBottomSidePadColorDorDeviveColorWell : EBColorWell? = nil
  @IBOutlet var mBottomSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mCheckForLibraryUpdatesButton : EBButton? = nil
  @IBOutlet var mCheckForSystemLibraryAtStartUpSwitch : EBSwitch? = nil
  @IBOutlet var mCheckLibraryAction : EBButton? = nil
  @IBOutlet var mCheckLibraryResultTextView : NSTextView? = nil
  @IBOutlet var mCheckingForLibraryUpdateProgressIndicator : EBProgressIndicator? = nil
  @IBOutlet var mCheckingForLibraryUpdateWindow : EBWindow? = nil
  @IBOutlet var mConnectionColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mDimensionFontButton : EBFontButton? = nil
  @IBOutlet var mDotColorGridForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mDotColorOfPackageGridColorWell : EBColorWell? = nil
  @IBOutlet var mDotColorOfSymbolGridColorWell : EBColorWell? = nil
  @IBOutlet var mEditionTransparencySlider : EBSlider? = nil
  @IBOutlet var mEditionTransparencyTextField : EBDoubleField? = nil
  @IBOutlet var mErrorMessageColorColorWell : EBColorWell? = nil
  @IBOutlet var mFontCharacterSelectButton : CanariFontCharacterSelectButton? = nil
  @IBOutlet var mInformativeTextInLibraryUpdateWindow : EBTextField? = nil
  @IBOutlet var mLibraryUpdateWindow : EBWindow? = nil
  @IBOutlet var mLineColorGridForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mLineColorOfPackageGridColorWell : EBColorWell? = nil
  @IBOutlet var mLineColorOfSymbolGridColorWell : EBColorWell? = nil
  @IBOutlet var mMenuRevealInFinder_artworks : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_devices : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_fonts : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_packages : CanariMenu? = nil
  @IBOutlet var mMenuRevealInFinder_symbols : CanariMenu? = nil
  @IBOutlet var mPackageBackgroundColorColorWell : EBColorWell? = nil
  @IBOutlet var mPackageColorColorWell : EBColorWell? = nil
  @IBOutlet var mPackageColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mPackageDimensionColorWell : EBColorWell? = nil
  @IBOutlet var mPackageDrawingWidthMultipliedByTenForDevicePopupButton : EBPopUpButton? = nil
  @IBOutlet var mPackageDrawingWidthMultipliedByTenPopupButton : EBPopUpButton? = nil
  @IBOutlet var mPackageGuideColorWell : EBColorWell? = nil
  @IBOutlet var mPackageNameFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mPadFontButton : EBFontButton? = nil
  @IBOutlet var mPadNumberColorColorWell : EBColorWell? = nil
  @IBOutlet var mPadNumberColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mPadNumberFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mPadZoneColorColorWell : EBColorWell? = nil
  @IBOutlet var mPinNameColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mPinNameFontButton : EBFontButton? = nil
  @IBOutlet var mPinNameFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mPinNameFontForSchematicFontButton : EBFontButton? = nil
  @IBOutlet var mPinNumberColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mPinNumberFontForSchematicFontButton : EBFontButton? = nil
  @IBOutlet var mProgressIndicatorInLibraryUpdateWindow : EBProgressIndicator? = nil
  @IBOutlet var mRemoveLibraryEntryButton : EBButton? = nil
  @IBOutlet var mRevealInFinderLibraryInUserApplicationSupportButton : EBButton? = nil
  @IBOutlet var mSampleStringField : EBTextField? = nil
  @IBOutlet var mSampleStringSizeField : EBDoubleField? = nil
  @IBOutlet var mSelectionHiliteColorColorWell : EBColorWell? = nil
  @IBOutlet var mShowGerberDrawingFlowCheckbox : EBSwitch? = nil
  @IBOutlet var mShowGerberDrawingIndexesCheckbox : EBSwitch? = nil
  @IBOutlet var mSuccessMessageColorColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolAndPackageBackgroundColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolAndPackageGridDotColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolAndPackageLineDotColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolBackgroundColorColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolColorColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mSymbolDrawingWidthMultipliedByTenForDevicePopupButton : EBPopUpButton? = nil
  @IBOutlet var mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton : EBPopUpButton? = nil
  @IBOutlet var mSymbolDrawingWidthMultipliedByTenPopupButton : EBPopUpButton? = nil
  @IBOutlet var mSymbolNameFontForDeviceFontButton : EBFontButton? = nil
  @IBOutlet var mTableViewInLibraryUpdateWindow : EBTableView? = nil
  @IBOutlet var mTopSidePadColorForDeviceColorWell : EBColorWell? = nil
  @IBOutlet var mTopSidePadColorWell : EBColorWell? = nil
  @IBOutlet var mUnplacedComponentsColorForSchematicColorWell : EBColorWell? = nil
  @IBOutlet var mUpDateButtonInLibraryUpdateWindow : EBButton? = nil
  @IBOutlet var mUpDateLibraryMenuItemInCanariMenu : EBMenuItem? = nil
  @IBOutlet var mUpdateSystemLibraryBox : NSBox? = nil
  @IBOutlet var mUseLibraryInUserApplicationSupportPathCheckBox : EBSwitch? = nil
  @IBOutlet var mWarningMessageColorColorWell : EBColorWell? = nil
  @IBOutlet var selectionHilitePopupButton : EBPopUpButton? = nil
 
  //····················································································································
  //    Simple Stored Properties
  //····················································································································

  var errorMessageColor = EBStoredProperty_NSColor (NSColor.red)
  var warningMessageColor = EBStoredProperty_NSColor (NSColor.orange)
  var successMessageColor = EBStoredProperty_NSColor (NSColor.blue)
  var selectionHiliteColor = EBStoredProperty_NSColor (NSColor.cyan)
  var hiliteWidthMultipliedByTen = EBStoredProperty_Int (15)
  var symbolColor = EBStoredProperty_NSColor (NSColor.brown)
  var dotColorOfSymbolGrid = EBStoredProperty_NSColor (NSColor.black)
  var lineColorOfSymbolGrid = EBStoredProperty_NSColor (NSColor.gray)
  var symbolBackgroundColor = EBStoredProperty_NSColor (NSColor.white)
  var symbolDrawingWidthMultipliedByTen = EBStoredProperty_Int (5)
  var pinNameFont = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 6.0))
  var dotColorOfPackageGrid = EBStoredProperty_NSColor (NSColor.white)
  var lineColorOfPackageGrid = EBStoredProperty_NSColor (NSColor.gray)
  var packageBackgroundColor = EBStoredProperty_NSColor (NSColor.black)
  var packageColor = EBStoredProperty_NSColor (NSColor.brown)
  var topSidePadColor = EBStoredProperty_NSColor (NSColor.blue)
  var bottomSidePadColor = EBStoredProperty_NSColor (NSColor.green)
  var padNumberColor = EBStoredProperty_NSColor (NSColor.red)
  var padNumberFont = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 3.0))
  var packageGuideColor = EBStoredProperty_NSColor (NSColor.yellow)
  var packageDimensionColor = EBStoredProperty_NSColor (NSColor.orange)
  var dimensionFont = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 2.0))
  var padZoneColor = EBStoredProperty_NSColor (NSColor.magenta)
  var packageDrawingWidthMultipliedByTen = EBStoredProperty_Int (15)
  var mSymbolAndPackageGridDotColorForDevice = EBStoredProperty_NSColor (NSColor.black)
  var mSymbolAndPackageGridLineColorForDevice = EBStoredProperty_NSColor (NSColor.gray)
  var mSymbolAndPackageBackgroundColorForDevice = EBStoredProperty_NSColor (NSColor.white)
  var mPackageColorForDevice = EBStoredProperty_NSColor (NSColor.brown)
  var mTopSidePadColorForDevice = EBStoredProperty_NSColor (NSColor.blue)
  var mBottomSidePadColorForDevice = EBStoredProperty_NSColor (NSColor.green)
  var mPadNumberColorForDevice = EBStoredProperty_NSColor (NSColor.red)
  var mPackageNameFontForDevice = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 9.0))
  var mPadNumberFontForDevice = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 5.0))
  var mSymbolColorForDevice = EBStoredProperty_NSColor (NSColor.brown)
  var mSymbolNameFontForDevice = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 9.0))
  var mPinNameFontForDevice = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 6.0))
  var symbolDrawingWidthForDeviceMultipliedByTen = EBStoredProperty_Int (15)
  var packageDrawingWidthForDeviceMultipliedByTen = EBStoredProperty_Int (15)
  var dotColorGridForSchematic = EBStoredProperty_NSColor (NSColor.black)
  var lineColorGridForSchematic = EBStoredProperty_NSColor (NSColor.gray)
  var symbolColorForUnplacedComponentsForSchematic = EBStoredProperty_NSColor (NSColor.darkGray)
  var symbolColorForSchematic = EBStoredProperty_NSColor (NSColor.brown)
  var pinNameFontForSchematic = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 6.0))
  var pinNameColorForSchematic = EBStoredProperty_NSColor (NSColor.brown)
  var pinNumberFontForSchematic = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 6.0))
  var pinNumberColorForSchematic = EBStoredProperty_NSColor (NSColor.darkGray)
  var connectionColorForSchematic = EBStoredProperty_NSColor (NSColor.black)
  var symbolDrawingWidthMultipliedByTenForSchematic = EBStoredProperty_Int (5)
  var dotColorGridForBoard = EBStoredProperty_NSColor (NSColor.black)
  var lineColorGridForBoard = EBStoredProperty_NSColor (NSColor.gray)
  var boardBackgroundColorForBoard = EBStoredProperty_NSColor (NSColor.black)
  var errorBackgroundColorForBoard = EBStoredProperty_NSColor (NSColor.red)
  var drawErrorBackgroundForBoard = EBStoredProperty_Bool (true)
  var warningBackgroundColorForBoard = EBStoredProperty_NSColor (NSColor.orange)
  var drawEWarningBackgroundForBoard = EBStoredProperty_Bool (true)
  var boardLimitsColorForBoard = EBStoredProperty_NSColor (NSColor.brown)
  var boardClearanceColorForBoard = EBStoredProperty_NSColor (NSColor.yellow)
  var topSideRestrictRectangleColorForBoard = EBStoredProperty_NSColor (NSColor.blue)
  var bottomSideRestrictRectangleColorForBoard = EBStoredProperty_NSColor (NSColor.green)
  var topSideLegendColorForBoard = EBStoredProperty_NSColor (NSColor.brown)
  var topSideLayoutColorForBoard = EBStoredProperty_NSColor (NSColor.blue)
  var bottomSideLayoutColorForBoard = EBStoredProperty_NSColor (NSColor.green)
  var bottomSideLegendColorForBoard = EBStoredProperty_NSColor (NSColor.white)
  var topSidePadColorForBoard = EBStoredProperty_NSColor (NSColor.blue)
  var bottomSidePadColorForBoard = EBStoredProperty_NSColor (NSColor.green)
  var padNumberFontForBoard = EBStoredProperty_NSFont (NSFont.systemFont (ofSize: 3.0))
  var padNumberColorForBoard = EBStoredProperty_NSColor (NSColor.red)
  var packageDrawingWidthMultpliedByTenForBoard = EBStoredProperty_Int (5)
  var sampleString = EBStoredProperty_String ("The quick brown fox jumps over the lazy dog")
  var sampleStringSize = EBStoredProperty_Double (24)
  var showGerberDrawingFlow = EBStoredProperty_Bool (true)
  var showGerberDrawingIndexes = EBStoredProperty_Bool (true)
  var currentCharacterCodePoint = EBStoredProperty_Int (65)
  var fontEditionTransparency = EBStoredProperty_Double (0.5)
  var usesUserLibrary = EBStoredProperty_Bool (true)
  var checkForSystemLibraryAtStartUp = EBStoredProperty_Bool (true)

  //····················································································································
  //    Stored Array Properties
  //····················································································································

  var additionnalLibraryArray = EBClassArray_CanariLibraryEntry ()

  //····················································································································
  //    Transient properties
  //····················································································································

  var mValueRevealInFinder_symbols = EBTransientProperty_CanariMenuItemListClass ()
  var mValueRevealInFinder_packages = EBTransientProperty_CanariMenuItemListClass ()
  var mValueRevealInFinder_devices = EBTransientProperty_CanariMenuItemListClass ()
  var mValueRevealInFinder_fonts = EBTransientProperty_CanariMenuItemListClass ()
  var mValueRevealInFinder_artworks = EBTransientProperty_CanariMenuItemListClass ()


  //····················································································································
  //    Array Controllers
  //····················································································································

  private var additionnalLibraryArrayController = ArrayController_Preferences_additionnalLibraryArrayController ()


  //····················································································································
  //    Init
  //····················································································································

  override init () {
    super.init ()
    g_Preferences = self ;
  //--- Read from preferences
    errorMessageColor.readInPreferencesWithKey (inKey:"Preferences:errorMessageColor")
    warningMessageColor.readInPreferencesWithKey (inKey:"Preferences:warningMessageColor")
    successMessageColor.readInPreferencesWithKey (inKey:"Preferences:successMessageColor")
    selectionHiliteColor.readInPreferencesWithKey (inKey:"Preferences:selectionHiliteColor")
    hiliteWidthMultipliedByTen.readInPreferencesWithKey (inKey:"Preferences:hiliteWidthMultipliedByTen")
    symbolColor.readInPreferencesWithKey (inKey:"Preferences:symbolColor")
    dotColorOfSymbolGrid.readInPreferencesWithKey (inKey:"Preferences:dotColorOfSymbolGrid")
    lineColorOfSymbolGrid.readInPreferencesWithKey (inKey:"Preferences:lineColorOfSymbolGrid")
    symbolBackgroundColor.readInPreferencesWithKey (inKey:"Preferences:symbolBackgroundColor")
    symbolDrawingWidthMultipliedByTen.readInPreferencesWithKey (inKey:"Preferences:symbolDrawingWidthMultipliedByTen")
    pinNameFont.readInPreferencesWithKey (inKey:"Preferences:pinNameFont")
    dotColorOfPackageGrid.readInPreferencesWithKey (inKey:"Preferences:dotColorOfPackageGrid")
    lineColorOfPackageGrid.readInPreferencesWithKey (inKey:"Preferences:lineColorOfPackageGrid")
    packageBackgroundColor.readInPreferencesWithKey (inKey:"Preferences:packageBackgroundColor")
    packageColor.readInPreferencesWithKey (inKey:"Preferences:packageColor")
    topSidePadColor.readInPreferencesWithKey (inKey:"Preferences:topSidePadColor")
    bottomSidePadColor.readInPreferencesWithKey (inKey:"Preferences:bottomSidePadColor")
    padNumberColor.readInPreferencesWithKey (inKey:"Preferences:padNumberColor")
    padNumberFont.readInPreferencesWithKey (inKey:"Preferences:padNumberFont")
    packageGuideColor.readInPreferencesWithKey (inKey:"Preferences:packageGuideColor")
    packageDimensionColor.readInPreferencesWithKey (inKey:"Preferences:packageDimensionColor")
    dimensionFont.readInPreferencesWithKey (inKey:"Preferences:dimensionFont")
    padZoneColor.readInPreferencesWithKey (inKey:"Preferences:padZoneColor")
    packageDrawingWidthMultipliedByTen.readInPreferencesWithKey (inKey:"Preferences:packageDrawingWidthMultipliedByTen")
    mSymbolAndPackageGridDotColorForDevice.readInPreferencesWithKey (inKey:"Preferences:mSymbolAndPackageGridDotColorForDevice")
    mSymbolAndPackageGridLineColorForDevice.readInPreferencesWithKey (inKey:"Preferences:mSymbolAndPackageGridLineColorForDevice")
    mSymbolAndPackageBackgroundColorForDevice.readInPreferencesWithKey (inKey:"Preferences:mSymbolAndPackageBackgroundColorForDevice")
    mPackageColorForDevice.readInPreferencesWithKey (inKey:"Preferences:mPackageColorForDevice")
    mTopSidePadColorForDevice.readInPreferencesWithKey (inKey:"Preferences:mTopSidePadColorForDevice")
    mBottomSidePadColorForDevice.readInPreferencesWithKey (inKey:"Preferences:mBottomSidePadColorForDevice")
    mPadNumberColorForDevice.readInPreferencesWithKey (inKey:"Preferences:mPadNumberColorForDevice")
    mPackageNameFontForDevice.readInPreferencesWithKey (inKey:"Preferences:mPackageNameFontForDevice")
    mPadNumberFontForDevice.readInPreferencesWithKey (inKey:"Preferences:mPadNumberFontForDevice")
    mSymbolColorForDevice.readInPreferencesWithKey (inKey:"Preferences:mSymbolColorForDevice")
    mSymbolNameFontForDevice.readInPreferencesWithKey (inKey:"Preferences:mSymbolNameFontForDevice")
    mPinNameFontForDevice.readInPreferencesWithKey (inKey:"Preferences:mPinNameFontForDevice")
    symbolDrawingWidthForDeviceMultipliedByTen.readInPreferencesWithKey (inKey:"Preferences:symbolDrawingWidthForDeviceMultipliedByTen")
    packageDrawingWidthForDeviceMultipliedByTen.readInPreferencesWithKey (inKey:"Preferences:packageDrawingWidthForDeviceMultipliedByTen")
    dotColorGridForSchematic.readInPreferencesWithKey (inKey:"Preferences:dotColorGridForSchematic")
    lineColorGridForSchematic.readInPreferencesWithKey (inKey:"Preferences:lineColorGridForSchematic")
    symbolColorForUnplacedComponentsForSchematic.readInPreferencesWithKey (inKey:"Preferences:symbolColorForUnplacedComponentsForSchematic")
    symbolColorForSchematic.readInPreferencesWithKey (inKey:"Preferences:symbolColorForSchematic")
    pinNameFontForSchematic.readInPreferencesWithKey (inKey:"Preferences:pinNameFontForSchematic")
    pinNameColorForSchematic.readInPreferencesWithKey (inKey:"Preferences:pinNameColorForSchematic")
    pinNumberFontForSchematic.readInPreferencesWithKey (inKey:"Preferences:pinNumberFontForSchematic")
    pinNumberColorForSchematic.readInPreferencesWithKey (inKey:"Preferences:pinNumberColorForSchematic")
    connectionColorForSchematic.readInPreferencesWithKey (inKey:"Preferences:connectionColorForSchematic")
    symbolDrawingWidthMultipliedByTenForSchematic.readInPreferencesWithKey (inKey:"Preferences:symbolDrawingWidthMultipliedByTenForSchematic")
    dotColorGridForBoard.readInPreferencesWithKey (inKey:"Preferences:dotColorGridForBoard")
    lineColorGridForBoard.readInPreferencesWithKey (inKey:"Preferences:lineColorGridForBoard")
    boardBackgroundColorForBoard.readInPreferencesWithKey (inKey:"Preferences:boardBackgroundColorForBoard")
    errorBackgroundColorForBoard.readInPreferencesWithKey (inKey:"Preferences:errorBackgroundColorForBoard")
    drawErrorBackgroundForBoard.readInPreferencesWithKey (inKey:"Preferences:drawErrorBackgroundForBoard")
    warningBackgroundColorForBoard.readInPreferencesWithKey (inKey:"Preferences:warningBackgroundColorForBoard")
    drawEWarningBackgroundForBoard.readInPreferencesWithKey (inKey:"Preferences:drawEWarningBackgroundForBoard")
    boardLimitsColorForBoard.readInPreferencesWithKey (inKey:"Preferences:boardLimitsColorForBoard")
    boardClearanceColorForBoard.readInPreferencesWithKey (inKey:"Preferences:boardClearanceColorForBoard")
    topSideRestrictRectangleColorForBoard.readInPreferencesWithKey (inKey:"Preferences:topSideRestrictRectangleColorForBoard")
    bottomSideRestrictRectangleColorForBoard.readInPreferencesWithKey (inKey:"Preferences:bottomSideRestrictRectangleColorForBoard")
    topSideLegendColorForBoard.readInPreferencesWithKey (inKey:"Preferences:topSideLegendColorForBoard")
    topSideLayoutColorForBoard.readInPreferencesWithKey (inKey:"Preferences:topSideLayoutColorForBoard")
    bottomSideLayoutColorForBoard.readInPreferencesWithKey (inKey:"Preferences:bottomSideLayoutColorForBoard")
    bottomSideLegendColorForBoard.readInPreferencesWithKey (inKey:"Preferences:bottomSideLegendColorForBoard")
    topSidePadColorForBoard.readInPreferencesWithKey (inKey:"Preferences:topSidePadColorForBoard")
    bottomSidePadColorForBoard.readInPreferencesWithKey (inKey:"Preferences:bottomSidePadColorForBoard")
    padNumberFontForBoard.readInPreferencesWithKey (inKey:"Preferences:padNumberFontForBoard")
    padNumberColorForBoard.readInPreferencesWithKey (inKey:"Preferences:padNumberColorForBoard")
    packageDrawingWidthMultpliedByTenForBoard.readInPreferencesWithKey (inKey:"Preferences:packageDrawingWidthMultpliedByTenForBoard")
    sampleString.readInPreferencesWithKey (inKey:"Preferences:sampleString")
    sampleStringSize.readInPreferencesWithKey (inKey:"Preferences:sampleStringSize")
    showGerberDrawingFlow.readInPreferencesWithKey (inKey:"Preferences:showGerberDrawingFlow")
    showGerberDrawingIndexes.readInPreferencesWithKey (inKey:"Preferences:showGerberDrawingIndexes")
    currentCharacterCodePoint.readInPreferencesWithKey (inKey:"Preferences:currentCharacterCodePoint")
    fontEditionTransparency.readInPreferencesWithKey (inKey:"Preferences:fontEditionTransparency")
    usesUserLibrary.readInPreferencesWithKey (inKey:"Preferences:usesUserLibrary")
    checkForSystemLibraryAtStartUp.readInPreferencesWithKey (inKey:"Preferences:checkForSystemLibraryAtStartUp")
    additionnalLibraryArray.readInPreferencesWithKey (inKey:"Preferences:additionnalLibraryArray")
  //--- Property validation function
    currentCharacterCodePoint.validationFunction = self.validate_currentCharacterCodePoint
  //---
    NotificationCenter.default.addObserver (self,
     selector:#selector(Preferences.applicationWillTerminateAction(_:)),
     name:NSNotification.Name.NSApplicationWillTerminate,
     object:nil
    )
  //--- Extern functions
  }

  //····················································································································
  //    awakeFromNib
  //····················································································································

  override func awakeFromNib () {
  //--- Check mAddLibraryEntryButton' outlet not nil
    if nil == mAddLibraryEntryButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mAddLibraryEntryButton' outlet is nil")
    }
  //--- Check mAdditionnalLibraryArrayTableView' outlet not nil
    if nil == mAdditionnalLibraryArrayTableView {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mAdditionnalLibraryArrayTableView' outlet is nil")
    }
  //--- Check mBoardBackgroundColorWell' outlet not nil
    if nil == mBoardBackgroundColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardBackgroundColorWell' outlet is nil")
    }
  //--- Check mBoardBottomSideLayoutColorWell' outlet not nil
    if nil == mBoardBottomSideLayoutColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardBottomSideLayoutColorWell' outlet is nil")
    }
  //--- Check mBoardBottomSideLegendColorWell' outlet not nil
    if nil == mBoardBottomSideLegendColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardBottomSideLegendColorWell' outlet is nil")
    }
  //--- Check mBoardBottomSidePadColorWell' outlet not nil
    if nil == mBoardBottomSidePadColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardBottomSidePadColorWell' outlet is nil")
    }
  //--- Check mBoardBottomSideRestrictRectangleColorWell' outlet not nil
    if nil == mBoardBottomSideRestrictRectangleColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardBottomSideRestrictRectangleColorWell' outlet is nil")
    }
  //--- Check mBoardClearanceColorWell' outlet not nil
    if nil == mBoardClearanceColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardClearanceColorWell' outlet is nil")
    }
  //--- Check mBoardDotColorGridColorWell' outlet not nil
    if nil == mBoardDotColorGridColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardDotColorGridColorWell' outlet is nil")
    }
  //--- Check mBoardDrawErrorBackgroundCheckbox' outlet not nil
    if nil == mBoardDrawErrorBackgroundCheckbox {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardDrawErrorBackgroundCheckbox' outlet is nil")
    }
  //--- Check mBoardDrawWarningBackgroundCheckbox' outlet not nil
    if nil == mBoardDrawWarningBackgroundCheckbox {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardDrawWarningBackgroundCheckbox' outlet is nil")
    }
  //--- Check mBoardErrorBackgroundColorWell' outlet not nil
    if nil == mBoardErrorBackgroundColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardErrorBackgroundColorWell' outlet is nil")
    }
  //--- Check mBoardLimitsColorWell' outlet not nil
    if nil == mBoardLimitsColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardLimitsColorWell' outlet is nil")
    }
  //--- Check mBoardLineColorGridColorWell' outlet not nil
    if nil == mBoardLineColorGridColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardLineColorGridColorWell' outlet is nil")
    }
  //--- Check mBoardPackageDrawingWidthMultipliedByTenPopupButton' outlet not nil
    if nil == mBoardPackageDrawingWidthMultipliedByTenPopupButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardPackageDrawingWidthMultipliedByTenPopupButton' outlet is nil")
    }
  //--- Check mBoardPadFontButton' outlet not nil
    if nil == mBoardPadFontButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardPadFontButton' outlet is nil")
    }
  //--- Check mBoardPadNumberColorWell' outlet not nil
    if nil == mBoardPadNumberColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardPadNumberColorWell' outlet is nil")
    }
  //--- Check mBoardTopSideLayoutColorWell' outlet not nil
    if nil == mBoardTopSideLayoutColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardTopSideLayoutColorWell' outlet is nil")
    }
  //--- Check mBoardTopSideLegendColorWell' outlet not nil
    if nil == mBoardTopSideLegendColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardTopSideLegendColorWell' outlet is nil")
    }
  //--- Check mBoardTopSidePadColorWell' outlet not nil
    if nil == mBoardTopSidePadColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardTopSidePadColorWell' outlet is nil")
    }
  //--- Check mBoardTopSideRestrictRectangleColorWell' outlet not nil
    if nil == mBoardTopSideRestrictRectangleColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardTopSideRestrictRectangleColorWell' outlet is nil")
    }
  //--- Check mBoardWarningBackgroundColorWell' outlet not nil
    if nil == mBoardWarningBackgroundColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBoardWarningBackgroundColorWell' outlet is nil")
    }
  //--- Check mBottomSidePadColorDorDeviveColorWell' outlet not nil
    if nil == mBottomSidePadColorDorDeviveColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBottomSidePadColorDorDeviveColorWell' outlet is nil")
    }
  //--- Check mBottomSidePadColorWell' outlet not nil
    if nil == mBottomSidePadColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mBottomSidePadColorWell' outlet is nil")
    }
  //--- Check mCheckForLibraryUpdatesButton' outlet not nil
    if nil == mCheckForLibraryUpdatesButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mCheckForLibraryUpdatesButton' outlet is nil")
    }
  //--- Check mCheckForSystemLibraryAtStartUpSwitch' outlet not nil
    if nil == mCheckForSystemLibraryAtStartUpSwitch {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mCheckForSystemLibraryAtStartUpSwitch' outlet is nil")
    }
  //--- Check mCheckLibraryAction' outlet not nil
    if nil == mCheckLibraryAction {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mCheckLibraryAction' outlet is nil")
    }
  //--- Check mCheckLibraryResultTextView' outlet not nil
    if nil == mCheckLibraryResultTextView {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mCheckLibraryResultTextView' outlet is nil")
    }
  //--- Check mCheckingForLibraryUpdateProgressIndicator' outlet not nil
    if nil == mCheckingForLibraryUpdateProgressIndicator {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mCheckingForLibraryUpdateProgressIndicator' outlet is nil")
    }
  //--- Check mCheckingForLibraryUpdateWindow' outlet not nil
    if nil == mCheckingForLibraryUpdateWindow {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mCheckingForLibraryUpdateWindow' outlet is nil")
    }
  //--- Check mConnectionColorForSchematicColorWell' outlet not nil
    if nil == mConnectionColorForSchematicColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mConnectionColorForSchematicColorWell' outlet is nil")
    }
  //--- Check mDimensionFontButton' outlet not nil
    if nil == mDimensionFontButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mDimensionFontButton' outlet is nil")
    }
  //--- Check mDotColorGridForSchematicColorWell' outlet not nil
    if nil == mDotColorGridForSchematicColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mDotColorGridForSchematicColorWell' outlet is nil")
    }
  //--- Check mDotColorOfPackageGridColorWell' outlet not nil
    if nil == mDotColorOfPackageGridColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mDotColorOfPackageGridColorWell' outlet is nil")
    }
  //--- Check mDotColorOfSymbolGridColorWell' outlet not nil
    if nil == mDotColorOfSymbolGridColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mDotColorOfSymbolGridColorWell' outlet is nil")
    }
  //--- Check mEditionTransparencySlider' outlet not nil
    if nil == mEditionTransparencySlider {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mEditionTransparencySlider' outlet is nil")
    }
  //--- Check mEditionTransparencyTextField' outlet not nil
    if nil == mEditionTransparencyTextField {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mEditionTransparencyTextField' outlet is nil")
    }
  //--- Check mErrorMessageColorColorWell' outlet not nil
    if nil == mErrorMessageColorColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mErrorMessageColorColorWell' outlet is nil")
    }
  //--- Check mFontCharacterSelectButton' outlet not nil
    if nil == mFontCharacterSelectButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mFontCharacterSelectButton' outlet is nil")
    }
  //--- Check mInformativeTextInLibraryUpdateWindow' outlet not nil
    if nil == mInformativeTextInLibraryUpdateWindow {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mInformativeTextInLibraryUpdateWindow' outlet is nil")
    }
  //--- Check mLibraryUpdateWindow' outlet not nil
    if nil == mLibraryUpdateWindow {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mLibraryUpdateWindow' outlet is nil")
    }
  //--- Check mLineColorGridForSchematicColorWell' outlet not nil
    if nil == mLineColorGridForSchematicColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mLineColorGridForSchematicColorWell' outlet is nil")
    }
  //--- Check mLineColorOfPackageGridColorWell' outlet not nil
    if nil == mLineColorOfPackageGridColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mLineColorOfPackageGridColorWell' outlet is nil")
    }
  //--- Check mLineColorOfSymbolGridColorWell' outlet not nil
    if nil == mLineColorOfSymbolGridColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mLineColorOfSymbolGridColorWell' outlet is nil")
    }
  //--- Check mMenuRevealInFinder_artworks' outlet not nil
    if nil == mMenuRevealInFinder_artworks {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mMenuRevealInFinder_artworks' outlet is nil")
    }
  //--- Check mMenuRevealInFinder_devices' outlet not nil
    if nil == mMenuRevealInFinder_devices {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mMenuRevealInFinder_devices' outlet is nil")
    }
  //--- Check mMenuRevealInFinder_fonts' outlet not nil
    if nil == mMenuRevealInFinder_fonts {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mMenuRevealInFinder_fonts' outlet is nil")
    }
  //--- Check mMenuRevealInFinder_packages' outlet not nil
    if nil == mMenuRevealInFinder_packages {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mMenuRevealInFinder_packages' outlet is nil")
    }
  //--- Check mMenuRevealInFinder_symbols' outlet not nil
    if nil == mMenuRevealInFinder_symbols {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mMenuRevealInFinder_symbols' outlet is nil")
    }
  //--- Check mPackageBackgroundColorColorWell' outlet not nil
    if nil == mPackageBackgroundColorColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPackageBackgroundColorColorWell' outlet is nil")
    }
  //--- Check mPackageColorColorWell' outlet not nil
    if nil == mPackageColorColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPackageColorColorWell' outlet is nil")
    }
  //--- Check mPackageColorForDeviceColorWell' outlet not nil
    if nil == mPackageColorForDeviceColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPackageColorForDeviceColorWell' outlet is nil")
    }
  //--- Check mPackageDimensionColorWell' outlet not nil
    if nil == mPackageDimensionColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPackageDimensionColorWell' outlet is nil")
    }
  //--- Check mPackageDrawingWidthMultipliedByTenForDevicePopupButton' outlet not nil
    if nil == mPackageDrawingWidthMultipliedByTenForDevicePopupButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPackageDrawingWidthMultipliedByTenForDevicePopupButton' outlet is nil")
    }
  //--- Check mPackageDrawingWidthMultipliedByTenPopupButton' outlet not nil
    if nil == mPackageDrawingWidthMultipliedByTenPopupButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPackageDrawingWidthMultipliedByTenPopupButton' outlet is nil")
    }
  //--- Check mPackageGuideColorWell' outlet not nil
    if nil == mPackageGuideColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPackageGuideColorWell' outlet is nil")
    }
  //--- Check mPackageNameFontForDeviceFontButton' outlet not nil
    if nil == mPackageNameFontForDeviceFontButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPackageNameFontForDeviceFontButton' outlet is nil")
    }
  //--- Check mPadFontButton' outlet not nil
    if nil == mPadFontButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPadFontButton' outlet is nil")
    }
  //--- Check mPadNumberColorColorWell' outlet not nil
    if nil == mPadNumberColorColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPadNumberColorColorWell' outlet is nil")
    }
  //--- Check mPadNumberColorForDeviceColorWell' outlet not nil
    if nil == mPadNumberColorForDeviceColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPadNumberColorForDeviceColorWell' outlet is nil")
    }
  //--- Check mPadNumberFontForDeviceFontButton' outlet not nil
    if nil == mPadNumberFontForDeviceFontButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPadNumberFontForDeviceFontButton' outlet is nil")
    }
  //--- Check mPadZoneColorColorWell' outlet not nil
    if nil == mPadZoneColorColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPadZoneColorColorWell' outlet is nil")
    }
  //--- Check mPinNameColorForSchematicColorWell' outlet not nil
    if nil == mPinNameColorForSchematicColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPinNameColorForSchematicColorWell' outlet is nil")
    }
  //--- Check mPinNameFontButton' outlet not nil
    if nil == mPinNameFontButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPinNameFontButton' outlet is nil")
    }
  //--- Check mPinNameFontForDeviceFontButton' outlet not nil
    if nil == mPinNameFontForDeviceFontButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPinNameFontForDeviceFontButton' outlet is nil")
    }
  //--- Check mPinNameFontForSchematicFontButton' outlet not nil
    if nil == mPinNameFontForSchematicFontButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPinNameFontForSchematicFontButton' outlet is nil")
    }
  //--- Check mPinNumberColorForSchematicColorWell' outlet not nil
    if nil == mPinNumberColorForSchematicColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPinNumberColorForSchematicColorWell' outlet is nil")
    }
  //--- Check mPinNumberFontForSchematicFontButton' outlet not nil
    if nil == mPinNumberFontForSchematicFontButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mPinNumberFontForSchematicFontButton' outlet is nil")
    }
  //--- Check mProgressIndicatorInLibraryUpdateWindow' outlet not nil
    if nil == mProgressIndicatorInLibraryUpdateWindow {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mProgressIndicatorInLibraryUpdateWindow' outlet is nil")
    }
  //--- Check mRemoveLibraryEntryButton' outlet not nil
    if nil == mRemoveLibraryEntryButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mRemoveLibraryEntryButton' outlet is nil")
    }
  //--- Check mRevealInFinderLibraryInUserApplicationSupportButton' outlet not nil
    if nil == mRevealInFinderLibraryInUserApplicationSupportButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mRevealInFinderLibraryInUserApplicationSupportButton' outlet is nil")
    }
  //--- Check mSampleStringField' outlet not nil
    if nil == mSampleStringField {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSampleStringField' outlet is nil")
    }
  //--- Check mSampleStringSizeField' outlet not nil
    if nil == mSampleStringSizeField {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSampleStringSizeField' outlet is nil")
    }
  //--- Check mSelectionHiliteColorColorWell' outlet not nil
    if nil == mSelectionHiliteColorColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSelectionHiliteColorColorWell' outlet is nil")
    }
  //--- Check mShowGerberDrawingFlowCheckbox' outlet not nil
    if nil == mShowGerberDrawingFlowCheckbox {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mShowGerberDrawingFlowCheckbox' outlet is nil")
    }
  //--- Check mShowGerberDrawingIndexesCheckbox' outlet not nil
    if nil == mShowGerberDrawingIndexesCheckbox {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mShowGerberDrawingIndexesCheckbox' outlet is nil")
    }
  //--- Check mSuccessMessageColorColorWell' outlet not nil
    if nil == mSuccessMessageColorColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSuccessMessageColorColorWell' outlet is nil")
    }
  //--- Check mSymbolAndPackageBackgroundColorForDeviceColorWell' outlet not nil
    if nil == mSymbolAndPackageBackgroundColorForDeviceColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSymbolAndPackageBackgroundColorForDeviceColorWell' outlet is nil")
    }
  //--- Check mSymbolAndPackageGridDotColorForDeviceColorWell' outlet not nil
    if nil == mSymbolAndPackageGridDotColorForDeviceColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSymbolAndPackageGridDotColorForDeviceColorWell' outlet is nil")
    }
  //--- Check mSymbolAndPackageLineDotColorForDeviceColorWell' outlet not nil
    if nil == mSymbolAndPackageLineDotColorForDeviceColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSymbolAndPackageLineDotColorForDeviceColorWell' outlet is nil")
    }
  //--- Check mSymbolBackgroundColorColorWell' outlet not nil
    if nil == mSymbolBackgroundColorColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSymbolBackgroundColorColorWell' outlet is nil")
    }
  //--- Check mSymbolColorColorWell' outlet not nil
    if nil == mSymbolColorColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSymbolColorColorWell' outlet is nil")
    }
  //--- Check mSymbolColorForDeviceColorWell' outlet not nil
    if nil == mSymbolColorForDeviceColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSymbolColorForDeviceColorWell' outlet is nil")
    }
  //--- Check mSymbolColorForSchematicColorWell' outlet not nil
    if nil == mSymbolColorForSchematicColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSymbolColorForSchematicColorWell' outlet is nil")
    }
  //--- Check mSymbolDrawingWidthMultipliedByTenForDevicePopupButton' outlet not nil
    if nil == mSymbolDrawingWidthMultipliedByTenForDevicePopupButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSymbolDrawingWidthMultipliedByTenForDevicePopupButton' outlet is nil")
    }
  //--- Check mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton' outlet not nil
    if nil == mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton' outlet is nil")
    }
  //--- Check mSymbolDrawingWidthMultipliedByTenPopupButton' outlet not nil
    if nil == mSymbolDrawingWidthMultipliedByTenPopupButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSymbolDrawingWidthMultipliedByTenPopupButton' outlet is nil")
    }
  //--- Check mSymbolNameFontForDeviceFontButton' outlet not nil
    if nil == mSymbolNameFontForDeviceFontButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mSymbolNameFontForDeviceFontButton' outlet is nil")
    }
  //--- Check mTableViewInLibraryUpdateWindow' outlet not nil
    if nil == mTableViewInLibraryUpdateWindow {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mTableViewInLibraryUpdateWindow' outlet is nil")
    }
  //--- Check mTopSidePadColorForDeviceColorWell' outlet not nil
    if nil == mTopSidePadColorForDeviceColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mTopSidePadColorForDeviceColorWell' outlet is nil")
    }
  //--- Check mTopSidePadColorWell' outlet not nil
    if nil == mTopSidePadColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mTopSidePadColorWell' outlet is nil")
    }
  //--- Check mUnplacedComponentsColorForSchematicColorWell' outlet not nil
    if nil == mUnplacedComponentsColorForSchematicColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mUnplacedComponentsColorForSchematicColorWell' outlet is nil")
    }
  //--- Check mUpDateButtonInLibraryUpdateWindow' outlet not nil
    if nil == mUpDateButtonInLibraryUpdateWindow {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mUpDateButtonInLibraryUpdateWindow' outlet is nil")
    }
  //--- Check mUpDateLibraryMenuItemInCanariMenu' outlet not nil
    if nil == mUpDateLibraryMenuItemInCanariMenu {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mUpDateLibraryMenuItemInCanariMenu' outlet is nil")
    }
  //--- Check mUpdateSystemLibraryBox' outlet not nil
    if nil == mUpdateSystemLibraryBox {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mUpdateSystemLibraryBox' outlet is nil")
    }
  //--- Check mUseLibraryInUserApplicationSupportPathCheckBox' outlet not nil
    if nil == mUseLibraryInUserApplicationSupportPathCheckBox {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mUseLibraryInUserApplicationSupportPathCheckBox' outlet is nil")
    }
  //--- Check mWarningMessageColorColorWell' outlet not nil
    if nil == mWarningMessageColorColorWell {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'mWarningMessageColorColorWell' outlet is nil")
    }
  //--- Check selectionHilitePopupButton' outlet not nil
    if nil == selectionHilitePopupButton {
      presentErrorWindow (file: #file, line: #line, errorMessage: "the 'selectionHilitePopupButton' outlet is nil")
    }
  //--- Install compute functions for transients
    mValueRevealInFinder_symbols.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.usesUserLibrary.prop.kind ()
        kind &= unwSelf.additionnalLibraryArray.prop.kind ()
        kind &= unwSelf.additionnalLibraryArray.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.usesUserLibrary.prop, unwSelf.additionnalLibraryArray.prop, unwSelf.additionnalLibraryArray.prop) {
          case (.singleSelection (let v0), .singleSelection (let v1), .singleSelection (let v2)) :
            return .singleSelection (compute_Preferences_mValueRevealInFinder_symbols (v0, v1, v2))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    mValueRevealInFinder_packages.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.usesUserLibrary.prop.kind ()
        kind &= unwSelf.additionnalLibraryArray.prop.kind ()
        kind &= unwSelf.additionnalLibraryArray.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.usesUserLibrary.prop, unwSelf.additionnalLibraryArray.prop, unwSelf.additionnalLibraryArray.prop) {
          case (.singleSelection (let v0), .singleSelection (let v1), .singleSelection (let v2)) :
            return .singleSelection (compute_Preferences_mValueRevealInFinder_packages (v0, v1, v2))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    mValueRevealInFinder_devices.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.usesUserLibrary.prop.kind ()
        kind &= unwSelf.additionnalLibraryArray.prop.kind ()
        kind &= unwSelf.additionnalLibraryArray.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.usesUserLibrary.prop, unwSelf.additionnalLibraryArray.prop, unwSelf.additionnalLibraryArray.prop) {
          case (.singleSelection (let v0), .singleSelection (let v1), .singleSelection (let v2)) :
            return .singleSelection (compute_Preferences_mValueRevealInFinder_devices (v0, v1, v2))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    mValueRevealInFinder_fonts.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.usesUserLibrary.prop.kind ()
        kind &= unwSelf.additionnalLibraryArray.prop.kind ()
        kind &= unwSelf.additionnalLibraryArray.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.usesUserLibrary.prop, unwSelf.additionnalLibraryArray.prop, unwSelf.additionnalLibraryArray.prop) {
          case (.singleSelection (let v0), .singleSelection (let v1), .singleSelection (let v2)) :
            return .singleSelection (compute_Preferences_mValueRevealInFinder_fonts (v0, v1, v2))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
    mValueRevealInFinder_artworks.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.usesUserLibrary.prop.kind ()
        kind &= unwSelf.additionnalLibraryArray.prop.kind ()
        kind &= unwSelf.additionnalLibraryArray.prop.kind ()
        switch kind {
        case .noSelectionKind :
          return .noSelection
        case .multipleSelectionKind :
          return .multipleSelection
        case .singleSelectionKind :
          switch (unwSelf.usesUserLibrary.prop, unwSelf.additionnalLibraryArray.prop, unwSelf.additionnalLibraryArray.prop) {
          case (.singleSelection (let v0), .singleSelection (let v1), .singleSelection (let v2)) :
            return .singleSelection (compute_Preferences_mValueRevealInFinder_artworks (v0, v1, v2))
          default :
            return .noSelection
          }
        }
      }else{
        return .noSelection
      }
    }
  //--- Install property observers for transients
    usesUserLibrary.addEBObserver (mValueRevealInFinder_symbols)
    additionnalLibraryArray.addEBObserverOf_mUses (mValueRevealInFinder_symbols)
    additionnalLibraryArray.addEBObserverOf_mPath (mValueRevealInFinder_symbols)
    usesUserLibrary.addEBObserver (mValueRevealInFinder_packages)
    additionnalLibraryArray.addEBObserverOf_mUses (mValueRevealInFinder_packages)
    additionnalLibraryArray.addEBObserverOf_mPath (mValueRevealInFinder_packages)
    usesUserLibrary.addEBObserver (mValueRevealInFinder_devices)
    additionnalLibraryArray.addEBObserverOf_mUses (mValueRevealInFinder_devices)
    additionnalLibraryArray.addEBObserverOf_mPath (mValueRevealInFinder_devices)
    usesUserLibrary.addEBObserver (mValueRevealInFinder_fonts)
    additionnalLibraryArray.addEBObserverOf_mUses (mValueRevealInFinder_fonts)
    additionnalLibraryArray.addEBObserverOf_mPath (mValueRevealInFinder_fonts)
    usesUserLibrary.addEBObserver (mValueRevealInFinder_artworks)
    additionnalLibraryArray.addEBObserverOf_mUses (mValueRevealInFinder_artworks)
    additionnalLibraryArray.addEBObserverOf_mPath (mValueRevealInFinder_artworks)
  //--- Install bindings
    mErrorMessageColorColorWell?.bind_color (self.errorMessageColor, file: #file, line: #line, sendContinously:false)
    mWarningMessageColorColorWell?.bind_color (self.warningMessageColor, file: #file, line: #line, sendContinously:false)
    mSuccessMessageColorColorWell?.bind_color (self.successMessageColor, file: #file, line: #line, sendContinously:false)
    mSelectionHiliteColorColorWell?.bind_color (self.selectionHiliteColor, file: #file, line: #line, sendContinously:false)
    selectionHilitePopupButton?.bind_selectedTag (self.hiliteWidthMultipliedByTen, file: #file, line: #line)
    mMenuRevealInFinder_symbols?.bind_populateSubmenus (self.mValueRevealInFinder_symbols, file: #file, line: #line)
    mMenuRevealInFinder_packages?.bind_populateSubmenus (self.mValueRevealInFinder_packages, file: #file, line: #line)
    mMenuRevealInFinder_devices?.bind_populateSubmenus (self.mValueRevealInFinder_devices, file: #file, line: #line)
    mMenuRevealInFinder_fonts?.bind_populateSubmenus (self.mValueRevealInFinder_fonts, file: #file, line: #line)
    mMenuRevealInFinder_artworks?.bind_populateSubmenus (self.mValueRevealInFinder_artworks, file: #file, line: #line)
    mSymbolColorColorWell?.bind_color (self.symbolColor, file: #file, line: #line, sendContinously:false)
    mDotColorOfSymbolGridColorWell?.bind_color (self.dotColorOfSymbolGrid, file: #file, line: #line, sendContinously:false)
    mLineColorOfSymbolGridColorWell?.bind_color (self.lineColorOfSymbolGrid, file: #file, line: #line, sendContinously:false)
    mSymbolBackgroundColorColorWell?.bind_color (self.symbolBackgroundColor, file: #file, line: #line, sendContinously:false)
    mSymbolDrawingWidthMultipliedByTenPopupButton?.bind_selectedTag (self.symbolDrawingWidthMultipliedByTen, file: #file, line: #line)
    mPinNameFontButton?.bind_fontValue (self.pinNameFont, file: #file, line: #line)
    mDotColorOfPackageGridColorWell?.bind_color (self.dotColorOfPackageGrid, file: #file, line: #line, sendContinously:false)
    mLineColorOfPackageGridColorWell?.bind_color (self.lineColorOfPackageGrid, file: #file, line: #line, sendContinously:false)
    mPackageBackgroundColorColorWell?.bind_color (self.packageBackgroundColor, file: #file, line: #line, sendContinously:false)
    mPackageColorColorWell?.bind_color (self.packageColor, file: #file, line: #line, sendContinously:false)
    mTopSidePadColorWell?.bind_color (self.topSidePadColor, file: #file, line: #line, sendContinously:false)
    mBottomSidePadColorWell?.bind_color (self.bottomSidePadColor, file: #file, line: #line, sendContinously:false)
    mPadNumberColorColorWell?.bind_color (self.padNumberColor, file: #file, line: #line, sendContinously:false)
    mPadFontButton?.bind_fontValue (self.padNumberFont, file: #file, line: #line)
    mPackageGuideColorWell?.bind_color (self.packageGuideColor, file: #file, line: #line, sendContinously:false)
    mPackageDimensionColorWell?.bind_color (self.packageDimensionColor, file: #file, line: #line, sendContinously:false)
    mDimensionFontButton?.bind_fontValue (self.dimensionFont, file: #file, line: #line)
    mPadZoneColorColorWell?.bind_color (self.padZoneColor, file: #file, line: #line, sendContinously:false)
    mPackageDrawingWidthMultipliedByTenPopupButton?.bind_selectedTag (self.packageDrawingWidthMultipliedByTen, file: #file, line: #line)
    mSymbolAndPackageGridDotColorForDeviceColorWell?.bind_color (self.mSymbolAndPackageGridDotColorForDevice, file: #file, line: #line, sendContinously:false)
    mSymbolAndPackageLineDotColorForDeviceColorWell?.bind_color (self.mSymbolAndPackageGridLineColorForDevice, file: #file, line: #line, sendContinously:false)
    mSymbolAndPackageBackgroundColorForDeviceColorWell?.bind_color (self.mSymbolAndPackageBackgroundColorForDevice, file: #file, line: #line, sendContinously:false)
    mPackageColorForDeviceColorWell?.bind_color (self.mPackageColorForDevice, file: #file, line: #line, sendContinously:false)
    mTopSidePadColorForDeviceColorWell?.bind_color (self.mTopSidePadColorForDevice, file: #file, line: #line, sendContinously:false)
    mBottomSidePadColorDorDeviveColorWell?.bind_color (self.mBottomSidePadColorForDevice, file: #file, line: #line, sendContinously:false)
    mPadNumberColorForDeviceColorWell?.bind_color (self.mPadNumberColorForDevice, file: #file, line: #line, sendContinously:false)
    mPackageNameFontForDeviceFontButton?.bind_fontValue (self.mPadNumberFontForDevice, file: #file, line: #line)
    mPadNumberFontForDeviceFontButton?.bind_fontValue (self.mPadNumberFontForDevice, file: #file, line: #line)
    mSymbolColorForDeviceColorWell?.bind_color (self.mSymbolColorForDevice, file: #file, line: #line, sendContinously:false)
    mSymbolNameFontForDeviceFontButton?.bind_fontValue (self.mSymbolNameFontForDevice, file: #file, line: #line)
    mPinNameFontForDeviceFontButton?.bind_fontValue (self.mPinNameFontForDevice, file: #file, line: #line)
    mSymbolDrawingWidthMultipliedByTenForDevicePopupButton?.bind_selectedTag (self.symbolDrawingWidthForDeviceMultipliedByTen, file: #file, line: #line)
    mPackageDrawingWidthMultipliedByTenForDevicePopupButton?.bind_selectedTag (self.packageDrawingWidthForDeviceMultipliedByTen, file: #file, line: #line)
    mDotColorGridForSchematicColorWell?.bind_color (self.dotColorGridForSchematic, file: #file, line: #line, sendContinously:false)
    mLineColorGridForSchematicColorWell?.bind_color (self.lineColorGridForSchematic, file: #file, line: #line, sendContinously:false)
    mUnplacedComponentsColorForSchematicColorWell?.bind_color (self.symbolColorForUnplacedComponentsForSchematic, file: #file, line: #line, sendContinously:false)
    mSymbolColorForSchematicColorWell?.bind_color (self.symbolColorForSchematic, file: #file, line: #line, sendContinously:false)
    mPinNameFontForSchematicFontButton?.bind_fontValue (self.pinNameFontForSchematic, file: #file, line: #line)
    mPinNameColorForSchematicColorWell?.bind_color (self.pinNameColorForSchematic, file: #file, line: #line, sendContinously:false)
    mPinNumberFontForSchematicFontButton?.bind_fontValue (self.pinNumberFontForSchematic, file: #file, line: #line)
    mPinNumberColorForSchematicColorWell?.bind_color (self.pinNumberColorForSchematic, file: #file, line: #line, sendContinously:false)
    mConnectionColorForSchematicColorWell?.bind_color (self.connectionColorForSchematic, file: #file, line: #line, sendContinously:false)
    mSymbolDrawingWidthMultipliedByTenForSchematicPopUpButton?.bind_selectedTag (self.symbolDrawingWidthMultipliedByTenForSchematic, file: #file, line: #line)
    mBoardDotColorGridColorWell?.bind_color (self.dotColorGridForBoard, file: #file, line: #line, sendContinously:false)
    mBoardLineColorGridColorWell?.bind_color (self.lineColorGridForBoard, file: #file, line: #line, sendContinously:false)
    mBoardBackgroundColorWell?.bind_color (self.boardBackgroundColorForBoard, file: #file, line: #line, sendContinously:false)
    mBoardErrorBackgroundColorWell?.bind_color (self.errorBackgroundColorForBoard, file: #file, line: #line, sendContinously:false)
    mBoardDrawErrorBackgroundCheckbox?.bind_value (self.drawErrorBackgroundForBoard, file: #file, line: #line)
    mBoardWarningBackgroundColorWell?.bind_color (self.warningBackgroundColorForBoard, file: #file, line: #line, sendContinously:false)
    mBoardDrawWarningBackgroundCheckbox?.bind_value (self.drawEWarningBackgroundForBoard, file: #file, line: #line)
    mBoardLimitsColorWell?.bind_color (self.boardLimitsColorForBoard, file: #file, line: #line, sendContinously:false)
    mBoardClearanceColorWell?.bind_color (self.boardClearanceColorForBoard, file: #file, line: #line, sendContinously:false)
    mBoardTopSideRestrictRectangleColorWell?.bind_color (self.topSideRestrictRectangleColorForBoard, file: #file, line: #line, sendContinously:false)
    mBoardBottomSideRestrictRectangleColorWell?.bind_color (self.bottomSideRestrictRectangleColorForBoard, file: #file, line: #line, sendContinously:false)
    mBoardTopSideLegendColorWell?.bind_color (self.topSideLegendColorForBoard, file: #file, line: #line, sendContinously:false)
    mBoardTopSideLayoutColorWell?.bind_color (self.topSideLayoutColorForBoard, file: #file, line: #line, sendContinously:false)
    mBoardBottomSideLayoutColorWell?.bind_color (self.bottomSideLayoutColorForBoard, file: #file, line: #line, sendContinously:false)
    mBoardBottomSideLegendColorWell?.bind_color (self.bottomSideLegendColorForBoard, file: #file, line: #line, sendContinously:false)
    mBoardTopSidePadColorWell?.bind_color (self.topSidePadColorForBoard, file: #file, line: #line, sendContinously:false)
    mBoardBottomSidePadColorWell?.bind_color (self.bottomSidePadColorForBoard, file: #file, line: #line, sendContinously:false)
    mBoardPadFontButton?.bind_fontValue (self.padNumberFontForBoard, file: #file, line: #line)
    mBoardPadNumberColorWell?.bind_color (self.padNumberColorForBoard, file: #file, line: #line, sendContinously:false)
    mBoardPackageDrawingWidthMultipliedByTenPopupButton?.bind_selectedTag (self.packageDrawingWidthMultpliedByTenForBoard, file: #file, line: #line)
    mSampleStringField?.bind_value (self.sampleString, file: #file, line: #line, sendContinously:true)
    mSampleStringSizeField?.bind_value (self.sampleStringSize, file: #file, line: #line, sendContinously:false, autoFormatter:false)
    mShowGerberDrawingFlowCheckbox?.bind_value (self.showGerberDrawingFlow, file: #file, line: #line)
    mShowGerberDrawingIndexesCheckbox?.bind_value (self.showGerberDrawingIndexes, file: #file, line: #line)
    mFontCharacterSelectButton?.bind_codePoint (self.currentCharacterCodePoint, file: #file, line: #line)
    mEditionTransparencySlider?.bind_doubleValue (self.fontEditionTransparency, file: #file, line: #line, sendContinously:true)
    mEditionTransparencyTextField?.bind_value (self.fontEditionTransparency, file: #file, line: #line, sendContinously:false, autoFormatter:false)
    mUseLibraryInUserApplicationSupportPathCheckBox?.bind_value (self.usesUserLibrary, file: #file, line: #line)
    mCheckForSystemLibraryAtStartUpSwitch?.bind_value (self.checkForSystemLibraryAtStartUp, file: #file, line: #line)
  //--- Install multiple bindings
    mRemoveLibraryEntryButton?.bind_enabled (
      [self.additionnalLibraryArrayController.selectedArray.count],
      computeFunction:{
        return (self.additionnalLibraryArrayController.selectedArray.count.prop > EBProperty.singleSelection (0))
      },
      file: #file, line: #line
    )
  //--------------------------- Array controller
    additionnalLibraryArrayController.bind_modelAndView (
      model: self.additionnalLibraryArray,
      tableViewArray: [mAdditionnalLibraryArrayTableView!],
      file: #file,
      line: #line
    )
  //--------------------------- Set targets / actions
    mRevealInFinderLibraryInUserApplicationSupportButton?.target = self
    mRevealInFinderLibraryInUserApplicationSupportButton?.action = #selector (Preferences.revealUserLibraryInFinderAction (_:))
    mAddLibraryEntryButton?.target = self
    mAddLibraryEntryButton?.action = #selector (Preferences.addLibraryEntryAction (_:))
    mRemoveLibraryEntryButton?.target = additionnalLibraryArrayController
    mRemoveLibraryEntryButton?.action = #selector (ArrayController_Preferences_additionnalLibraryArrayController.remove (_:))
    mCheckLibraryAction?.target = self
    mCheckLibraryAction?.action = #selector (Preferences.checkLibraryAction (_:))
  //--- Extern functions
    self.setupForLibrary ()
  }
  
  //····················································································································
  //    applicationWillTerminateAction
  //····················································································································

  func applicationWillTerminateAction (_ : NSNotification) {
    errorMessageColor.storeInPreferencesWithKey (inKey:"Preferences:errorMessageColor")
    warningMessageColor.storeInPreferencesWithKey (inKey:"Preferences:warningMessageColor")
    successMessageColor.storeInPreferencesWithKey (inKey:"Preferences:successMessageColor")
    selectionHiliteColor.storeInPreferencesWithKey (inKey:"Preferences:selectionHiliteColor")
    hiliteWidthMultipliedByTen.storeInPreferencesWithKey (inKey:"Preferences:hiliteWidthMultipliedByTen")
    symbolColor.storeInPreferencesWithKey (inKey:"Preferences:symbolColor")
    dotColorOfSymbolGrid.storeInPreferencesWithKey (inKey:"Preferences:dotColorOfSymbolGrid")
    lineColorOfSymbolGrid.storeInPreferencesWithKey (inKey:"Preferences:lineColorOfSymbolGrid")
    symbolBackgroundColor.storeInPreferencesWithKey (inKey:"Preferences:symbolBackgroundColor")
    symbolDrawingWidthMultipliedByTen.storeInPreferencesWithKey (inKey:"Preferences:symbolDrawingWidthMultipliedByTen")
    pinNameFont.storeInPreferencesWithKey (inKey:"Preferences:pinNameFont")
    dotColorOfPackageGrid.storeInPreferencesWithKey (inKey:"Preferences:dotColorOfPackageGrid")
    lineColorOfPackageGrid.storeInPreferencesWithKey (inKey:"Preferences:lineColorOfPackageGrid")
    packageBackgroundColor.storeInPreferencesWithKey (inKey:"Preferences:packageBackgroundColor")
    packageColor.storeInPreferencesWithKey (inKey:"Preferences:packageColor")
    topSidePadColor.storeInPreferencesWithKey (inKey:"Preferences:topSidePadColor")
    bottomSidePadColor.storeInPreferencesWithKey (inKey:"Preferences:bottomSidePadColor")
    padNumberColor.storeInPreferencesWithKey (inKey:"Preferences:padNumberColor")
    padNumberFont.storeInPreferencesWithKey (inKey:"Preferences:padNumberFont")
    packageGuideColor.storeInPreferencesWithKey (inKey:"Preferences:packageGuideColor")
    packageDimensionColor.storeInPreferencesWithKey (inKey:"Preferences:packageDimensionColor")
    dimensionFont.storeInPreferencesWithKey (inKey:"Preferences:dimensionFont")
    padZoneColor.storeInPreferencesWithKey (inKey:"Preferences:padZoneColor")
    packageDrawingWidthMultipliedByTen.storeInPreferencesWithKey (inKey:"Preferences:packageDrawingWidthMultipliedByTen")
    mSymbolAndPackageGridDotColorForDevice.storeInPreferencesWithKey (inKey:"Preferences:mSymbolAndPackageGridDotColorForDevice")
    mSymbolAndPackageGridLineColorForDevice.storeInPreferencesWithKey (inKey:"Preferences:mSymbolAndPackageGridLineColorForDevice")
    mSymbolAndPackageBackgroundColorForDevice.storeInPreferencesWithKey (inKey:"Preferences:mSymbolAndPackageBackgroundColorForDevice")
    mPackageColorForDevice.storeInPreferencesWithKey (inKey:"Preferences:mPackageColorForDevice")
    mTopSidePadColorForDevice.storeInPreferencesWithKey (inKey:"Preferences:mTopSidePadColorForDevice")
    mBottomSidePadColorForDevice.storeInPreferencesWithKey (inKey:"Preferences:mBottomSidePadColorForDevice")
    mPadNumberColorForDevice.storeInPreferencesWithKey (inKey:"Preferences:mPadNumberColorForDevice")
    mPackageNameFontForDevice.storeInPreferencesWithKey (inKey:"Preferences:mPackageNameFontForDevice")
    mPadNumberFontForDevice.storeInPreferencesWithKey (inKey:"Preferences:mPadNumberFontForDevice")
    mSymbolColorForDevice.storeInPreferencesWithKey (inKey:"Preferences:mSymbolColorForDevice")
    mSymbolNameFontForDevice.storeInPreferencesWithKey (inKey:"Preferences:mSymbolNameFontForDevice")
    mPinNameFontForDevice.storeInPreferencesWithKey (inKey:"Preferences:mPinNameFontForDevice")
    symbolDrawingWidthForDeviceMultipliedByTen.storeInPreferencesWithKey (inKey:"Preferences:symbolDrawingWidthForDeviceMultipliedByTen")
    packageDrawingWidthForDeviceMultipliedByTen.storeInPreferencesWithKey (inKey:"Preferences:packageDrawingWidthForDeviceMultipliedByTen")
    dotColorGridForSchematic.storeInPreferencesWithKey (inKey:"Preferences:dotColorGridForSchematic")
    lineColorGridForSchematic.storeInPreferencesWithKey (inKey:"Preferences:lineColorGridForSchematic")
    symbolColorForUnplacedComponentsForSchematic.storeInPreferencesWithKey (inKey:"Preferences:symbolColorForUnplacedComponentsForSchematic")
    symbolColorForSchematic.storeInPreferencesWithKey (inKey:"Preferences:symbolColorForSchematic")
    pinNameFontForSchematic.storeInPreferencesWithKey (inKey:"Preferences:pinNameFontForSchematic")
    pinNameColorForSchematic.storeInPreferencesWithKey (inKey:"Preferences:pinNameColorForSchematic")
    pinNumberFontForSchematic.storeInPreferencesWithKey (inKey:"Preferences:pinNumberFontForSchematic")
    pinNumberColorForSchematic.storeInPreferencesWithKey (inKey:"Preferences:pinNumberColorForSchematic")
    connectionColorForSchematic.storeInPreferencesWithKey (inKey:"Preferences:connectionColorForSchematic")
    symbolDrawingWidthMultipliedByTenForSchematic.storeInPreferencesWithKey (inKey:"Preferences:symbolDrawingWidthMultipliedByTenForSchematic")
    dotColorGridForBoard.storeInPreferencesWithKey (inKey:"Preferences:dotColorGridForBoard")
    lineColorGridForBoard.storeInPreferencesWithKey (inKey:"Preferences:lineColorGridForBoard")
    boardBackgroundColorForBoard.storeInPreferencesWithKey (inKey:"Preferences:boardBackgroundColorForBoard")
    errorBackgroundColorForBoard.storeInPreferencesWithKey (inKey:"Preferences:errorBackgroundColorForBoard")
    drawErrorBackgroundForBoard.storeInPreferencesWithKey (inKey:"Preferences:drawErrorBackgroundForBoard")
    warningBackgroundColorForBoard.storeInPreferencesWithKey (inKey:"Preferences:warningBackgroundColorForBoard")
    drawEWarningBackgroundForBoard.storeInPreferencesWithKey (inKey:"Preferences:drawEWarningBackgroundForBoard")
    boardLimitsColorForBoard.storeInPreferencesWithKey (inKey:"Preferences:boardLimitsColorForBoard")
    boardClearanceColorForBoard.storeInPreferencesWithKey (inKey:"Preferences:boardClearanceColorForBoard")
    topSideRestrictRectangleColorForBoard.storeInPreferencesWithKey (inKey:"Preferences:topSideRestrictRectangleColorForBoard")
    bottomSideRestrictRectangleColorForBoard.storeInPreferencesWithKey (inKey:"Preferences:bottomSideRestrictRectangleColorForBoard")
    topSideLegendColorForBoard.storeInPreferencesWithKey (inKey:"Preferences:topSideLegendColorForBoard")
    topSideLayoutColorForBoard.storeInPreferencesWithKey (inKey:"Preferences:topSideLayoutColorForBoard")
    bottomSideLayoutColorForBoard.storeInPreferencesWithKey (inKey:"Preferences:bottomSideLayoutColorForBoard")
    bottomSideLegendColorForBoard.storeInPreferencesWithKey (inKey:"Preferences:bottomSideLegendColorForBoard")
    topSidePadColorForBoard.storeInPreferencesWithKey (inKey:"Preferences:topSidePadColorForBoard")
    bottomSidePadColorForBoard.storeInPreferencesWithKey (inKey:"Preferences:bottomSidePadColorForBoard")
    padNumberFontForBoard.storeInPreferencesWithKey (inKey:"Preferences:padNumberFontForBoard")
    padNumberColorForBoard.storeInPreferencesWithKey (inKey:"Preferences:padNumberColorForBoard")
    packageDrawingWidthMultpliedByTenForBoard.storeInPreferencesWithKey (inKey:"Preferences:packageDrawingWidthMultpliedByTenForBoard")
    sampleString.storeInPreferencesWithKey (inKey:"Preferences:sampleString")
    sampleStringSize.storeInPreferencesWithKey (inKey:"Preferences:sampleStringSize")
    showGerberDrawingFlow.storeInPreferencesWithKey (inKey:"Preferences:showGerberDrawingFlow")
    showGerberDrawingIndexes.storeInPreferencesWithKey (inKey:"Preferences:showGerberDrawingIndexes")
    currentCharacterCodePoint.storeInPreferencesWithKey (inKey:"Preferences:currentCharacterCodePoint")
    fontEditionTransparency.storeInPreferencesWithKey (inKey:"Preferences:fontEditionTransparency")
    usesUserLibrary.storeInPreferencesWithKey (inKey:"Preferences:usesUserLibrary")
    checkForSystemLibraryAtStartUp.storeInPreferencesWithKey (inKey:"Preferences:checkForSystemLibraryAtStartUp")
    additionnalLibraryArray.storeInPreferencesWithKey (inKey:"Preferences:additionnalLibraryArray")
  }

  //····················································································································

}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

