//
//  AutoLayoutImageObserverView.swift
//  ElCanari
//
//  Created by Pierre Molinaro on 05/02/2021.
//
//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//   AutoLayoutImageObserverView
//----------------------------------------------------------------------------------------------------------------------

class AutoLayoutImageObserverView : NSImageView, EBUserClassNameProtocol {

  //····················································································································

  private let mSmall : Bool

  //····················································································································

  init (small inSmall : Bool) {
    self.mSmall = inSmall
    super.init (frame: NSRect ())
    noteObjectAllocation (self)
    self.imageScaling = .scaleProportionallyUpOrDown
    self.imageFrameStyle = .none
  }

  //····················································································································

  required init? (coder : NSCoder) {
    fatalError ("init(coder:) has not been implemented")
  }

  //····················································································································

  override func ebCleanUp () {
    self.mImageController?.unregister ()
    self.mImageController = nil
    self.mTooltipController?.unregister ()
    self.mTooltipController = nil
    super.ebCleanUp ()
  }

  //····················································································································

  override var intrinsicContentSize : NSSize {
    let s = self.mSmall ? 17.0 : 24.0
    return NSSize (width: s, height: s)
  }

  //····················································································································
  //  image binding
  //····················································································································

  fileprivate func updateImage (_ object : EBReadOnlyProperty_NSImage) {
    switch object.selection {
    case .empty :
      self.image = nil
      self.enable (fromValueBinding: false)
    case .multiple :
      self.image = nil
      self.enable (fromValueBinding: false)
    case .single (let propertyValue) :
      self.image = propertyValue
      self.enable (fromValueBinding: true)
    }
  }

  //····················································································································

  fileprivate var mImageController : EBReadOnlyPropertyController? = nil

  //····················································································································

  func bind_image (_ object : EBReadOnlyProperty_NSImage) -> Self {
    self.mImageController = EBReadOnlyPropertyController (
      observedObjects: [object],
      callBack: { [weak self] in self?.updateImage (object) ; }
    )
    return self
  }

  //····················································································································
  //  tooltip binding
  //····················································································································

  fileprivate func updateTooltip (_ object : EBReadOnlyProperty_String) {
    switch object.selection {
    case .empty :
      self.toolTip = nil
      self.enable (fromValueBinding: false)
    case .multiple :
      self.toolTip = nil
      self.enable (fromValueBinding: false)
    case .single (let propertyValue) :
      self.toolTip = propertyValue
      self.enable (fromValueBinding: true)
    }
  }

  //····················································································································

  private var mTooltipController : EBReadOnlyPropertyController? = nil

  //····················································································································

  func bind_tooltip (_ object : EBReadOnlyProperty_String) -> Self {
    self.mTooltipController = EBReadOnlyPropertyController (
      observedObjects: [object],
      callBack: { [weak self] in self?.updateTooltip (object) }
    )
    return self
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   EBImageObserverView_TableViewCell
//----------------------------------------------------------------------------------------------------------------------

//@objc(EBImageObserverView_TableViewCell) class EBImageObserverView_TableViewCell : EBTableCellView {
//
//  //····················································································································
//
//  @IBOutlet var mCellOutlet : EBImageObserverView? = nil
//
//  //····················································································································
//
//  func checkOutlet (columnName : String, file : String, line : Int) {
//    checkOutletConnection (self.mCellOutlet, "\"\(columnName)\" column view", EBImageObserverView.self, file, line)
//  }
//
//  //····················································································································
//
//  func update () {
//    self.mCellOutlet?.mImageController?.mEventCallBack? ()
//  }
//
//  //····················································································································
//}

//----------------------------------------------------------------------------------------------------------------------
