//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_BoardTrack 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_BoardTrack : ReadOnlyAbstractObjectProperty <BoardTrack> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : BoardTrack?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
 //     oldValue.mSide_property.removeEBObserversFrom (&self.mObserversOf_mSide) // Stored property
      oldValue.mSide_property.removeEBObserver (self.mSide_property) // Stored property
 //     oldValue.mDefaultTrackWidthUnit_property.removeEBObserversFrom (&self.mObserversOf_mDefaultTrackWidthUnit) // Stored property
      oldValue.mDefaultTrackWidthUnit_property.removeEBObserver (self.mDefaultTrackWidthUnit_property) // Stored property
 //     oldValue.mCustomTrackWidth_property.removeEBObserversFrom (&self.mObserversOf_mCustomTrackWidth) // Stored property
      oldValue.mCustomTrackWidth_property.removeEBObserver (self.mCustomTrackWidth_property) // Stored property
 //     oldValue.mCustomTrackWidthUnit_property.removeEBObserversFrom (&self.mObserversOf_mCustomTrackWidthUnit) // Stored property
      oldValue.mCustomTrackWidthUnit_property.removeEBObserver (self.mCustomTrackWidthUnit_property) // Stored property
 //     oldValue.mUsesCustomTrackWidth_property.removeEBObserversFrom (&self.mObserversOf_mUsesCustomTrackWidth) // Stored property
      oldValue.mUsesCustomTrackWidth_property.removeEBObserver (self.mUsesCustomTrackWidth_property) // Stored property
 //     oldValue.mIsPreservedByAutoRouter_property.removeEBObserversFrom (&self.mObserversOf_mIsPreservedByAutoRouter) // Stored property
      oldValue.mIsPreservedByAutoRouter_property.removeEBObserver (self.mIsPreservedByAutoRouter_property) // Stored property
 //     oldValue.mP1XUnit_property.removeEBObserversFrom (&self.mObserversOf_mP1XUnit) // Stored property
      oldValue.mP1XUnit_property.removeEBObserver (self.mP1XUnit_property) // Stored property
 //     oldValue.mP1YUnit_property.removeEBObserversFrom (&self.mObserversOf_mP1YUnit) // Stored property
      oldValue.mP1YUnit_property.removeEBObserver (self.mP1YUnit_property) // Stored property
 //     oldValue.mP2XUnit_property.removeEBObserversFrom (&self.mObserversOf_mP2XUnit) // Stored property
      oldValue.mP2XUnit_property.removeEBObserver (self.mP2XUnit_property) // Stored property
 //     oldValue.mP2YUnit_property.removeEBObserversFrom (&self.mObserversOf_mP2YUnit) // Stored property
      oldValue.mP2YUnit_property.removeEBObserver (self.mP2YUnit_property) // Stored property
 //     oldValue.mManualLockP1_property.removeEBObserversFrom (&self.mObserversOf_mManualLockP1) // Stored property
      oldValue.mManualLockP1_property.removeEBObserver (self.mManualLockP1_property) // Stored property
 //     oldValue.mManualLockP2_property.removeEBObserversFrom (&self.mObserversOf_mManualLockP2) // Stored property
      oldValue.mManualLockP2_property.removeEBObserver (self.mManualLockP2_property) // Stored property
 //     oldValue.mDirectionLockOnKnobDragging_property.removeEBObserversFrom (&self.mObserversOf_mDirectionLockOnKnobDragging) // Stored property
      oldValue.mDirectionLockOnKnobDragging_property.removeEBObserver (self.mDirectionLockOnKnobDragging_property) // Stored property
 //     oldValue.actualTrackWidth_property.removeEBObserversFrom (&self.mObserversOf_actualTrackWidth) // Transient property
      oldValue.actualTrackWidth_property.removeEBObserver (self.actualTrackWidth_property) // Transient property
 //     oldValue.netName_property.removeEBObserversFrom (&self.mObserversOf_netName) // Transient property
      oldValue.netName_property.removeEBObserver (self.netName_property) // Transient property
 //     oldValue.netClassName_property.removeEBObserversFrom (&self.mObserversOf_netClassName) // Transient property
      oldValue.netClassName_property.removeEBObserver (self.netClassName_property) // Transient property
 //     oldValue.netClassTrackWidth_property.removeEBObserversFrom (&self.mObserversOf_netClassTrackWidth) // Transient property
      oldValue.netClassTrackWidth_property.removeEBObserver (self.netClassTrackWidth_property) // Transient property
 //     oldValue.netClassViaHoleDiameter_property.removeEBObserversFrom (&self.mObserversOf_netClassViaHoleDiameter) // Transient property
      oldValue.netClassViaHoleDiameter_property.removeEBObserver (self.netClassViaHoleDiameter_property) // Transient property
 //     oldValue.netClassViaPadDiameter_property.removeEBObserversFrom (&self.mObserversOf_netClassViaPadDiameter) // Transient property
      oldValue.netClassViaPadDiameter_property.removeEBObserver (self.netClassViaPadDiameter_property) // Transient property
 //     oldValue.trackLengthInCanariUnit_property.removeEBObserversFrom (&self.mObserversOf_trackLengthInCanariUnit) // Transient property
      oldValue.trackLengthInCanariUnit_property.removeEBObserver (self.trackLengthInCanariUnit_property) // Transient property
 //     oldValue.signatureForERCChecking_property.removeEBObserversFrom (&self.mObserversOf_signatureForERCChecking) // Transient property
      oldValue.signatureForERCChecking_property.removeEBObserver (self.signatureForERCChecking_property) // Transient property
 //     oldValue.p1ConnectedToSomePad_property.removeEBObserversFrom (&self.mObserversOf_p1ConnectedToSomePad) // Transient property
      oldValue.p1ConnectedToSomePad_property.removeEBObserver (self.p1ConnectedToSomePad_property) // Transient property
 //     oldValue.p2ConnectedToSomePad_property.removeEBObserversFrom (&self.mObserversOf_p2ConnectedToSomePad) // Transient property
      oldValue.p2ConnectedToSomePad_property.removeEBObserver (self.p2ConnectedToSomePad_property) // Transient property
 //     oldValue.objectDisplay_property.removeEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
      oldValue.objectDisplay_property.removeEBObserver (self.objectDisplay_property) // Transient property
 //     oldValue.p1CanMove_property.removeEBObserversFrom (&self.mObserversOf_p1CanMove) // Transient property
      oldValue.p1CanMove_property.removeEBObserver (self.p1CanMove_property) // Transient property
 //     oldValue.p2CanMove_property.removeEBObserversFrom (&self.mObserversOf_p2CanMove) // Transient property
      oldValue.p2CanMove_property.removeEBObserver (self.p2CanMove_property) // Transient property
 //     oldValue.trackCanRotate_property.removeEBObserversFrom (&self.mObserversOf_trackCanRotate) // Transient property
      oldValue.trackCanRotate_property.removeEBObserver (self.trackCanRotate_property) // Transient property
 //     oldValue.selectionDisplay_property.removeEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
      oldValue.selectionDisplay_property.removeEBObserver (self.selectionDisplay_property) // Transient property
   //   oldValue.trackDirectionInDegrees_property.removeEBObserversFrom (&self.mObserversOf_trackDirectionInDegrees) // Computed property
      oldValue.trackDirectionInDegrees_property.removeEBObserver (self.trackDirectionInDegrees_property) // Computed property
   //   oldValue.computedP1X_property.removeEBObserversFrom (&self.mObserversOf_computedP1X) // Computed property
      oldValue.computedP1X_property.removeEBObserver (self.computedP1X_property) // Computed property
   //   oldValue.computedP1Y_property.removeEBObserversFrom (&self.mObserversOf_computedP1Y) // Computed property
      oldValue.computedP1Y_property.removeEBObserver (self.computedP1Y_property) // Computed property
   //   oldValue.computedP2X_property.removeEBObserversFrom (&self.mObserversOf_computedP2X) // Computed property
      oldValue.computedP2X_property.removeEBObserver (self.computedP2X_property) // Computed property
   //   oldValue.computedP2Y_property.removeEBObserversFrom (&self.mObserversOf_computedP2Y) // Computed property
      oldValue.computedP2Y_property.removeEBObserver (self.computedP2Y_property) // Computed property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
 //     newValue.mSide_property.addEBObserversFrom (&self.mObserversOf_mSide) // Stored property
      newValue.mSide_property.addEBObserver (self.mSide_property) // Stored property
 //     newValue.mDefaultTrackWidthUnit_property.addEBObserversFrom (&self.mObserversOf_mDefaultTrackWidthUnit) // Stored property
      newValue.mDefaultTrackWidthUnit_property.addEBObserver (self.mDefaultTrackWidthUnit_property) // Stored property
 //     newValue.mCustomTrackWidth_property.addEBObserversFrom (&self.mObserversOf_mCustomTrackWidth) // Stored property
      newValue.mCustomTrackWidth_property.addEBObserver (self.mCustomTrackWidth_property) // Stored property
 //     newValue.mCustomTrackWidthUnit_property.addEBObserversFrom (&self.mObserversOf_mCustomTrackWidthUnit) // Stored property
      newValue.mCustomTrackWidthUnit_property.addEBObserver (self.mCustomTrackWidthUnit_property) // Stored property
 //     newValue.mUsesCustomTrackWidth_property.addEBObserversFrom (&self.mObserversOf_mUsesCustomTrackWidth) // Stored property
      newValue.mUsesCustomTrackWidth_property.addEBObserver (self.mUsesCustomTrackWidth_property) // Stored property
 //     newValue.mIsPreservedByAutoRouter_property.addEBObserversFrom (&self.mObserversOf_mIsPreservedByAutoRouter) // Stored property
      newValue.mIsPreservedByAutoRouter_property.addEBObserver (self.mIsPreservedByAutoRouter_property) // Stored property
 //     newValue.mP1XUnit_property.addEBObserversFrom (&self.mObserversOf_mP1XUnit) // Stored property
      newValue.mP1XUnit_property.addEBObserver (self.mP1XUnit_property) // Stored property
 //     newValue.mP1YUnit_property.addEBObserversFrom (&self.mObserversOf_mP1YUnit) // Stored property
      newValue.mP1YUnit_property.addEBObserver (self.mP1YUnit_property) // Stored property
 //     newValue.mP2XUnit_property.addEBObserversFrom (&self.mObserversOf_mP2XUnit) // Stored property
      newValue.mP2XUnit_property.addEBObserver (self.mP2XUnit_property) // Stored property
 //     newValue.mP2YUnit_property.addEBObserversFrom (&self.mObserversOf_mP2YUnit) // Stored property
      newValue.mP2YUnit_property.addEBObserver (self.mP2YUnit_property) // Stored property
 //     newValue.mManualLockP1_property.addEBObserversFrom (&self.mObserversOf_mManualLockP1) // Stored property
      newValue.mManualLockP1_property.addEBObserver (self.mManualLockP1_property) // Stored property
 //     newValue.mManualLockP2_property.addEBObserversFrom (&self.mObserversOf_mManualLockP2) // Stored property
      newValue.mManualLockP2_property.addEBObserver (self.mManualLockP2_property) // Stored property
 //     newValue.mDirectionLockOnKnobDragging_property.addEBObserversFrom (&self.mObserversOf_mDirectionLockOnKnobDragging) // Stored property
      newValue.mDirectionLockOnKnobDragging_property.addEBObserver (self.mDirectionLockOnKnobDragging_property) // Stored property
  //    newValue.actualTrackWidth_property.addEBObserversFrom (&self.mObserversOf_actualTrackWidth) // Transient property
      newValue.actualTrackWidth_property.addEBObserver (self.actualTrackWidth_property) // Transient property
  //    newValue.netName_property.addEBObserversFrom (&self.mObserversOf_netName) // Transient property
      newValue.netName_property.addEBObserver (self.netName_property) // Transient property
  //    newValue.netClassName_property.addEBObserversFrom (&self.mObserversOf_netClassName) // Transient property
      newValue.netClassName_property.addEBObserver (self.netClassName_property) // Transient property
  //    newValue.netClassTrackWidth_property.addEBObserversFrom (&self.mObserversOf_netClassTrackWidth) // Transient property
      newValue.netClassTrackWidth_property.addEBObserver (self.netClassTrackWidth_property) // Transient property
  //    newValue.netClassViaHoleDiameter_property.addEBObserversFrom (&self.mObserversOf_netClassViaHoleDiameter) // Transient property
      newValue.netClassViaHoleDiameter_property.addEBObserver (self.netClassViaHoleDiameter_property) // Transient property
  //    newValue.netClassViaPadDiameter_property.addEBObserversFrom (&self.mObserversOf_netClassViaPadDiameter) // Transient property
      newValue.netClassViaPadDiameter_property.addEBObserver (self.netClassViaPadDiameter_property) // Transient property
  //    newValue.trackLengthInCanariUnit_property.addEBObserversFrom (&self.mObserversOf_trackLengthInCanariUnit) // Transient property
      newValue.trackLengthInCanariUnit_property.addEBObserver (self.trackLengthInCanariUnit_property) // Transient property
  //    newValue.signatureForERCChecking_property.addEBObserversFrom (&self.mObserversOf_signatureForERCChecking) // Transient property
      newValue.signatureForERCChecking_property.addEBObserver (self.signatureForERCChecking_property) // Transient property
  //    newValue.p1ConnectedToSomePad_property.addEBObserversFrom (&self.mObserversOf_p1ConnectedToSomePad) // Transient property
      newValue.p1ConnectedToSomePad_property.addEBObserver (self.p1ConnectedToSomePad_property) // Transient property
  //    newValue.p2ConnectedToSomePad_property.addEBObserversFrom (&self.mObserversOf_p2ConnectedToSomePad) // Transient property
      newValue.p2ConnectedToSomePad_property.addEBObserver (self.p2ConnectedToSomePad_property) // Transient property
  //    newValue.objectDisplay_property.addEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
      newValue.objectDisplay_property.addEBObserver (self.objectDisplay_property) // Transient property
  //    newValue.p1CanMove_property.addEBObserversFrom (&self.mObserversOf_p1CanMove) // Transient property
      newValue.p1CanMove_property.addEBObserver (self.p1CanMove_property) // Transient property
  //    newValue.p2CanMove_property.addEBObserversFrom (&self.mObserversOf_p2CanMove) // Transient property
      newValue.p2CanMove_property.addEBObserver (self.p2CanMove_property) // Transient property
  //    newValue.trackCanRotate_property.addEBObserversFrom (&self.mObserversOf_trackCanRotate) // Transient property
      newValue.trackCanRotate_property.addEBObserver (self.trackCanRotate_property) // Transient property
  //    newValue.selectionDisplay_property.addEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
      newValue.selectionDisplay_property.addEBObserver (self.selectionDisplay_property) // Transient property
  //    newValue.trackDirectionInDegrees_property.addEBObserversFrom (&self.mObserversOf_trackDirectionInDegrees) // Computed property
      newValue.trackDirectionInDegrees_property.addEBObserver (self.trackDirectionInDegrees_property) // Computed property
  //    newValue.computedP1X_property.addEBObserversFrom (&self.mObserversOf_computedP1X) // Computed property
      newValue.computedP1X_property.addEBObserver (self.computedP1X_property) // Computed property
  //    newValue.computedP1Y_property.addEBObserversFrom (&self.mObserversOf_computedP1Y) // Computed property
      newValue.computedP1Y_property.addEBObserver (self.computedP1Y_property) // Computed property
  //    newValue.computedP2X_property.addEBObserversFrom (&self.mObserversOf_computedP2X) // Computed property
      newValue.computedP2X_property.addEBObserver (self.computedP2X_property) // Computed property
  //    newValue.computedP2Y_property.addEBObserversFrom (&self.mObserversOf_computedP2Y) // Computed property
      newValue.computedP2Y_property.addEBObserver (self.computedP2Y_property) // Computed property
    }
  }

  //····················································································································
  //   Observers of 'mSide' stored property
  //····················································································································

  final let mSide_property = EBGenericTransientProperty <TrackSide?> ()
//  private final var mObserversOf_mSide = EBWeakEventSet ()

  //····················································································································

  final var mSide_property_selection : EBSelection <TrackSide?> { // §
    return self.mSide_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mSide (_ inObserver : EBEvent) {
    self.mSide_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSide_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSide (_ inObserver : EBEvent) {
    self.mSide_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSide_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mDefaultTrackWidthUnit' stored property
  //····················································································································

  final let mDefaultTrackWidthUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mDefaultTrackWidthUnit = EBWeakEventSet ()

  //····················································································································

  final var mDefaultTrackWidthUnit_property_selection : EBSelection <Int?> { // §
    return self.mDefaultTrackWidthUnit_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mDefaultTrackWidthUnit (_ inObserver : EBEvent) {
    self.mDefaultTrackWidthUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mDefaultTrackWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mDefaultTrackWidthUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mDefaultTrackWidthUnit (_ inObserver : EBEvent) {
    self.mDefaultTrackWidthUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mDefaultTrackWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mDefaultTrackWidthUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mCustomTrackWidth' stored property
  //····················································································································

  final let mCustomTrackWidth_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mCustomTrackWidth = EBWeakEventSet ()

  //····················································································································

  final var mCustomTrackWidth_property_selection : EBSelection <Int?> { // §
    return self.mCustomTrackWidth_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mCustomTrackWidth (_ inObserver : EBEvent) {
    self.mCustomTrackWidth_property.addEBObserver (inObserver)
/*    self.mObserversOf_mCustomTrackWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mCustomTrackWidth_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mCustomTrackWidth (_ inObserver : EBEvent) {
    self.mCustomTrackWidth_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mCustomTrackWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mCustomTrackWidth_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mCustomTrackWidthUnit' stored property
  //····················································································································

  final let mCustomTrackWidthUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mCustomTrackWidthUnit = EBWeakEventSet ()

  //····················································································································

  final var mCustomTrackWidthUnit_property_selection : EBSelection <Int?> { // §
    return self.mCustomTrackWidthUnit_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mCustomTrackWidthUnit (_ inObserver : EBEvent) {
    self.mCustomTrackWidthUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mCustomTrackWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mCustomTrackWidthUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mCustomTrackWidthUnit (_ inObserver : EBEvent) {
    self.mCustomTrackWidthUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mCustomTrackWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mCustomTrackWidthUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mUsesCustomTrackWidth' stored property
  //····················································································································

  final let mUsesCustomTrackWidth_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mUsesCustomTrackWidth = EBWeakEventSet ()

  //····················································································································

  final var mUsesCustomTrackWidth_property_selection : EBSelection <Bool?> { // §
    return self.mUsesCustomTrackWidth_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mUsesCustomTrackWidth (_ inObserver : EBEvent) {
    self.mUsesCustomTrackWidth_property.addEBObserver (inObserver)
/*    self.mObserversOf_mUsesCustomTrackWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mUsesCustomTrackWidth_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mUsesCustomTrackWidth (_ inObserver : EBEvent) {
    self.mUsesCustomTrackWidth_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mUsesCustomTrackWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mUsesCustomTrackWidth_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mIsPreservedByAutoRouter' stored property
  //····················································································································

  final let mIsPreservedByAutoRouter_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mIsPreservedByAutoRouter = EBWeakEventSet ()

  //····················································································································

  final var mIsPreservedByAutoRouter_property_selection : EBSelection <Bool?> { // §
    return self.mIsPreservedByAutoRouter_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mIsPreservedByAutoRouter (_ inObserver : EBEvent) {
    self.mIsPreservedByAutoRouter_property.addEBObserver (inObserver)
/*    self.mObserversOf_mIsPreservedByAutoRouter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mIsPreservedByAutoRouter_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mIsPreservedByAutoRouter (_ inObserver : EBEvent) {
    self.mIsPreservedByAutoRouter_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mIsPreservedByAutoRouter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mIsPreservedByAutoRouter_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mP1XUnit' stored property
  //····················································································································

  final let mP1XUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mP1XUnit = EBWeakEventSet ()

  //····················································································································

  final var mP1XUnit_property_selection : EBSelection <Int?> { // §
    return self.mP1XUnit_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mP1XUnit (_ inObserver : EBEvent) {
    self.mP1XUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mP1XUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mP1XUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mP1XUnit (_ inObserver : EBEvent) {
    self.mP1XUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mP1XUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mP1XUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mP1YUnit' stored property
  //····················································································································

  final let mP1YUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mP1YUnit = EBWeakEventSet ()

  //····················································································································

  final var mP1YUnit_property_selection : EBSelection <Int?> { // §
    return self.mP1YUnit_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mP1YUnit (_ inObserver : EBEvent) {
    self.mP1YUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mP1YUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mP1YUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mP1YUnit (_ inObserver : EBEvent) {
    self.mP1YUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mP1YUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mP1YUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mP2XUnit' stored property
  //····················································································································

  final let mP2XUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mP2XUnit = EBWeakEventSet ()

  //····················································································································

  final var mP2XUnit_property_selection : EBSelection <Int?> { // §
    return self.mP2XUnit_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mP2XUnit (_ inObserver : EBEvent) {
    self.mP2XUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mP2XUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mP2XUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mP2XUnit (_ inObserver : EBEvent) {
    self.mP2XUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mP2XUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mP2XUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mP2YUnit' stored property
  //····················································································································

  final let mP2YUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mP2YUnit = EBWeakEventSet ()

  //····················································································································

  final var mP2YUnit_property_selection : EBSelection <Int?> { // §
    return self.mP2YUnit_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mP2YUnit (_ inObserver : EBEvent) {
    self.mP2YUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mP2YUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mP2YUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mP2YUnit (_ inObserver : EBEvent) {
    self.mP2YUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mP2YUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mP2YUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mManualLockP1' stored property
  //····················································································································

  final let mManualLockP1_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mManualLockP1 = EBWeakEventSet ()

  //····················································································································

  final var mManualLockP1_property_selection : EBSelection <Bool?> { // §
    return self.mManualLockP1_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mManualLockP1 (_ inObserver : EBEvent) {
    self.mManualLockP1_property.addEBObserver (inObserver)
/*    self.mObserversOf_mManualLockP1.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mManualLockP1_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mManualLockP1 (_ inObserver : EBEvent) {
    self.mManualLockP1_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mManualLockP1.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mManualLockP1_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mManualLockP2' stored property
  //····················································································································

  final let mManualLockP2_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mManualLockP2 = EBWeakEventSet ()

  //····················································································································

  final var mManualLockP2_property_selection : EBSelection <Bool?> { // §
    return self.mManualLockP2_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mManualLockP2 (_ inObserver : EBEvent) {
    self.mManualLockP2_property.addEBObserver (inObserver)
/*    self.mObserversOf_mManualLockP2.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mManualLockP2_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mManualLockP2 (_ inObserver : EBEvent) {
    self.mManualLockP2_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mManualLockP2.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mManualLockP2_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mDirectionLockOnKnobDragging' stored property
  //····················································································································

  final let mDirectionLockOnKnobDragging_property = EBGenericTransientProperty <TrackLockDirection?> ()
//  private final var mObserversOf_mDirectionLockOnKnobDragging = EBWeakEventSet ()

  //····················································································································

  final var mDirectionLockOnKnobDragging_property_selection : EBSelection <TrackLockDirection?> { // §
    return self.mDirectionLockOnKnobDragging_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mDirectionLockOnKnobDragging (_ inObserver : EBEvent) {
    self.mDirectionLockOnKnobDragging_property.addEBObserver (inObserver)
/*    self.mObserversOf_mDirectionLockOnKnobDragging.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mDirectionLockOnKnobDragging_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mDirectionLockOnKnobDragging (_ inObserver : EBEvent) {
    self.mDirectionLockOnKnobDragging_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mDirectionLockOnKnobDragging.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mDirectionLockOnKnobDragging_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'actualTrackWidth' transient property
  //····················································································································

  final let actualTrackWidth_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_actualTrackWidth = EBWeakEventSet ()

  //····················································································································

  final var actualTrackWidth_property_selection : EBSelection <Int?> {
    return self.actualTrackWidth_property.selection
  }

  //····················································································································

  final func addEBObserverOf_actualTrackWidth (_ inObserver : EBEvent) {
    self.actualTrackWidth_property.addEBObserver (inObserver)
/*    self.mObserversOf_actualTrackWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.actualTrackWidth_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_actualTrackWidth (_ inObserver : EBEvent) {
    self.actualTrackWidth_property.removeEBObserver (inObserver)
/*    self.mObserversOf_actualTrackWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.actualTrackWidth_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'netName' transient property
  //····················································································································

  final let netName_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_netName = EBWeakEventSet ()

  //····················································································································

  final var netName_property_selection : EBSelection <String?> {
    return self.netName_property.selection
  }

  //····················································································································

  final func addEBObserverOf_netName (_ inObserver : EBEvent) {
    self.netName_property.addEBObserver (inObserver)
/*    self.mObserversOf_netName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_netName (_ inObserver : EBEvent) {
    self.netName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_netName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netName_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'netClassName' transient property
  //····················································································································

  final let netClassName_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_netClassName = EBWeakEventSet ()

  //····················································································································

  final var netClassName_property_selection : EBSelection <String?> {
    return self.netClassName_property.selection
  }

  //····················································································································

  final func addEBObserverOf_netClassName (_ inObserver : EBEvent) {
    self.netClassName_property.addEBObserver (inObserver)
/*    self.mObserversOf_netClassName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netClassName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_netClassName (_ inObserver : EBEvent) {
    self.netClassName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_netClassName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netClassName_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'netClassTrackWidth' transient property
  //····················································································································

  final let netClassTrackWidth_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_netClassTrackWidth = EBWeakEventSet ()

  //····················································································································

  final var netClassTrackWidth_property_selection : EBSelection <Int?> {
    return self.netClassTrackWidth_property.selection
  }

  //····················································································································

  final func addEBObserverOf_netClassTrackWidth (_ inObserver : EBEvent) {
    self.netClassTrackWidth_property.addEBObserver (inObserver)
/*    self.mObserversOf_netClassTrackWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netClassTrackWidth_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_netClassTrackWidth (_ inObserver : EBEvent) {
    self.netClassTrackWidth_property.removeEBObserver (inObserver)
/*    self.mObserversOf_netClassTrackWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netClassTrackWidth_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'netClassViaHoleDiameter' transient property
  //····················································································································

  final let netClassViaHoleDiameter_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_netClassViaHoleDiameter = EBWeakEventSet ()

  //····················································································································

  final var netClassViaHoleDiameter_property_selection : EBSelection <Int?> {
    return self.netClassViaHoleDiameter_property.selection
  }

  //····················································································································

  final func addEBObserverOf_netClassViaHoleDiameter (_ inObserver : EBEvent) {
    self.netClassViaHoleDiameter_property.addEBObserver (inObserver)
/*    self.mObserversOf_netClassViaHoleDiameter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netClassViaHoleDiameter_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_netClassViaHoleDiameter (_ inObserver : EBEvent) {
    self.netClassViaHoleDiameter_property.removeEBObserver (inObserver)
/*    self.mObserversOf_netClassViaHoleDiameter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netClassViaHoleDiameter_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'netClassViaPadDiameter' transient property
  //····················································································································

  final let netClassViaPadDiameter_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_netClassViaPadDiameter = EBWeakEventSet ()

  //····················································································································

  final var netClassViaPadDiameter_property_selection : EBSelection <Int?> {
    return self.netClassViaPadDiameter_property.selection
  }

  //····················································································································

  final func addEBObserverOf_netClassViaPadDiameter (_ inObserver : EBEvent) {
    self.netClassViaPadDiameter_property.addEBObserver (inObserver)
/*    self.mObserversOf_netClassViaPadDiameter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netClassViaPadDiameter_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_netClassViaPadDiameter (_ inObserver : EBEvent) {
    self.netClassViaPadDiameter_property.removeEBObserver (inObserver)
/*    self.mObserversOf_netClassViaPadDiameter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netClassViaPadDiameter_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'trackLengthInCanariUnit' transient property
  //····················································································································

  final let trackLengthInCanariUnit_property = EBGenericTransientProperty <Double?> ()
//  private final var mObserversOf_trackLengthInCanariUnit = EBWeakEventSet ()

  //····················································································································

  final var trackLengthInCanariUnit_property_selection : EBSelection <Double?> {
    return self.trackLengthInCanariUnit_property.selection
  }

  //····················································································································

  final func addEBObserverOf_trackLengthInCanariUnit (_ inObserver : EBEvent) {
    self.trackLengthInCanariUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_trackLengthInCanariUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.trackLengthInCanariUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_trackLengthInCanariUnit (_ inObserver : EBEvent) {
    self.trackLengthInCanariUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_trackLengthInCanariUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.trackLengthInCanariUnit_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  final let signatureForERCChecking_property = EBGenericTransientProperty <UInt32?> ()
//  private final var mObserversOf_signatureForERCChecking = EBWeakEventSet ()

  //····················································································································

  final var signatureForERCChecking_property_selection : EBSelection <UInt32?> {
    return self.signatureForERCChecking_property.selection
  }

  //····················································································································

  final func addEBObserverOf_signatureForERCChecking (_ inObserver : EBEvent) {
    self.signatureForERCChecking_property.addEBObserver (inObserver)
/*    self.mObserversOf_signatureForERCChecking.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.signatureForERCChecking_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_signatureForERCChecking (_ inObserver : EBEvent) {
    self.signatureForERCChecking_property.removeEBObserver (inObserver)
/*    self.mObserversOf_signatureForERCChecking.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.signatureForERCChecking_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'p1ConnectedToSomePad' transient property
  //····················································································································

  final let p1ConnectedToSomePad_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_p1ConnectedToSomePad = EBWeakEventSet ()

  //····················································································································

  final var p1ConnectedToSomePad_property_selection : EBSelection <Bool?> {
    return self.p1ConnectedToSomePad_property.selection
  }

  //····················································································································

  final func addEBObserverOf_p1ConnectedToSomePad (_ inObserver : EBEvent) {
    self.p1ConnectedToSomePad_property.addEBObserver (inObserver)
/*    self.mObserversOf_p1ConnectedToSomePad.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.p1ConnectedToSomePad_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_p1ConnectedToSomePad (_ inObserver : EBEvent) {
    self.p1ConnectedToSomePad_property.removeEBObserver (inObserver)
/*    self.mObserversOf_p1ConnectedToSomePad.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.p1ConnectedToSomePad_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'p2ConnectedToSomePad' transient property
  //····················································································································

  final let p2ConnectedToSomePad_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_p2ConnectedToSomePad = EBWeakEventSet ()

  //····················································································································

  final var p2ConnectedToSomePad_property_selection : EBSelection <Bool?> {
    return self.p2ConnectedToSomePad_property.selection
  }

  //····················································································································

  final func addEBObserverOf_p2ConnectedToSomePad (_ inObserver : EBEvent) {
    self.p2ConnectedToSomePad_property.addEBObserver (inObserver)
/*    self.mObserversOf_p2ConnectedToSomePad.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.p2ConnectedToSomePad_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_p2ConnectedToSomePad (_ inObserver : EBEvent) {
    self.p2ConnectedToSomePad_property.removeEBObserver (inObserver)
/*    self.mObserversOf_p2ConnectedToSomePad.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.p2ConnectedToSomePad_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  final let objectDisplay_property = EBGenericTransientProperty <EBShape?> ()
//  private final var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final var objectDisplay_property_selection : EBSelection <EBShape?> {
    return self.objectDisplay_property.selection
  }

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.objectDisplay_property.addEBObserver (inObserver)
/*    self.mObserversOf_objectDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.objectDisplay_property.removeEBObserver (inObserver)
/*    self.mObserversOf_objectDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'p1CanMove' transient property
  //····················································································································

  final let p1CanMove_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_p1CanMove = EBWeakEventSet ()

  //····················································································································

  final var p1CanMove_property_selection : EBSelection <Bool?> {
    return self.p1CanMove_property.selection
  }

  //····················································································································

  final func addEBObserverOf_p1CanMove (_ inObserver : EBEvent) {
    self.p1CanMove_property.addEBObserver (inObserver)
/*    self.mObserversOf_p1CanMove.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.p1CanMove_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_p1CanMove (_ inObserver : EBEvent) {
    self.p1CanMove_property.removeEBObserver (inObserver)
/*    self.mObserversOf_p1CanMove.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.p1CanMove_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'p2CanMove' transient property
  //····················································································································

  final let p2CanMove_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_p2CanMove = EBWeakEventSet ()

  //····················································································································

  final var p2CanMove_property_selection : EBSelection <Bool?> {
    return self.p2CanMove_property.selection
  }

  //····················································································································

  final func addEBObserverOf_p2CanMove (_ inObserver : EBEvent) {
    self.p2CanMove_property.addEBObserver (inObserver)
/*    self.mObserversOf_p2CanMove.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.p2CanMove_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_p2CanMove (_ inObserver : EBEvent) {
    self.p2CanMove_property.removeEBObserver (inObserver)
/*    self.mObserversOf_p2CanMove.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.p2CanMove_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'trackCanRotate' transient property
  //····················································································································

  final let trackCanRotate_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_trackCanRotate = EBWeakEventSet ()

  //····················································································································

  final var trackCanRotate_property_selection : EBSelection <Bool?> {
    return self.trackCanRotate_property.selection
  }

  //····················································································································

  final func addEBObserverOf_trackCanRotate (_ inObserver : EBEvent) {
    self.trackCanRotate_property.addEBObserver (inObserver)
/*    self.mObserversOf_trackCanRotate.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.trackCanRotate_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_trackCanRotate (_ inObserver : EBEvent) {
    self.trackCanRotate_property.removeEBObserver (inObserver)
/*    self.mObserversOf_trackCanRotate.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.trackCanRotate_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  final let selectionDisplay_property = EBGenericTransientProperty <EBShape?> ()
//  private final var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final var selectionDisplay_property_selection : EBSelection <EBShape?> {
    return self.selectionDisplay_property.selection
  }

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.selectionDisplay_property.addEBObserver (inObserver)
/*    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.selectionDisplay_property.removeEBObserver (inObserver)
/*    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'trackDirectionInDegrees' computed property
  //····················································································································

  final let trackDirectionInDegrees_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_trackDirectionInDegrees = EBWeakEventSet () // §§

  //····················································································································

  final var trackDirectionInDegrees_property_selection : EBSelection <Int?> {
    return self.trackDirectionInDegrees_property.selection
  }

  //····················································································································

  final func addEBObserverOf_trackDirectionInDegrees (_ inObserver : EBEvent) {
    self.trackDirectionInDegrees_property.addEBObserver (inObserver)
/*    self.mObserversOf_trackDirectionInDegrees.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.trackDirectionInDegrees_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_trackDirectionInDegrees (_ inObserver : EBEvent) {
    self.trackDirectionInDegrees_property.removeEBObserver (inObserver)
/*    self.mObserversOf_trackDirectionInDegrees.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.trackDirectionInDegrees_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'computedP1X' computed property
  //····················································································································

  final let computedP1X_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_computedP1X = EBWeakEventSet () // §§

  //····················································································································

  final var computedP1X_property_selection : EBSelection <Int?> {
    return self.computedP1X_property.selection
  }

  //····················································································································

  final func addEBObserverOf_computedP1X (_ inObserver : EBEvent) {
    self.computedP1X_property.addEBObserver (inObserver)
/*    self.mObserversOf_computedP1X.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.computedP1X_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_computedP1X (_ inObserver : EBEvent) {
    self.computedP1X_property.removeEBObserver (inObserver)
/*    self.mObserversOf_computedP1X.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.computedP1X_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'computedP1Y' computed property
  //····················································································································

  final let computedP1Y_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_computedP1Y = EBWeakEventSet () // §§

  //····················································································································

  final var computedP1Y_property_selection : EBSelection <Int?> {
    return self.computedP1Y_property.selection
  }

  //····················································································································

  final func addEBObserverOf_computedP1Y (_ inObserver : EBEvent) {
    self.computedP1Y_property.addEBObserver (inObserver)
/*    self.mObserversOf_computedP1Y.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.computedP1Y_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_computedP1Y (_ inObserver : EBEvent) {
    self.computedP1Y_property.removeEBObserver (inObserver)
/*    self.mObserversOf_computedP1Y.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.computedP1Y_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'computedP2X' computed property
  //····················································································································

  final let computedP2X_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_computedP2X = EBWeakEventSet () // §§

  //····················································································································

  final var computedP2X_property_selection : EBSelection <Int?> {
    return self.computedP2X_property.selection
  }

  //····················································································································

  final func addEBObserverOf_computedP2X (_ inObserver : EBEvent) {
    self.computedP2X_property.addEBObserver (inObserver)
/*    self.mObserversOf_computedP2X.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.computedP2X_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_computedP2X (_ inObserver : EBEvent) {
    self.computedP2X_property.removeEBObserver (inObserver)
/*    self.mObserversOf_computedP2X.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.computedP2X_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'computedP2Y' computed property
  //····················································································································

  final let computedP2Y_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_computedP2Y = EBWeakEventSet () // §§

  //····················································································································

  final var computedP2Y_property_selection : EBSelection <Int?> {
    return self.computedP2Y_property.selection
  }

  //····················································································································

  final func addEBObserverOf_computedP2Y (_ inObserver : EBEvent) {
    self.computedP2Y_property.addEBObserver (inObserver)
/*    self.mObserversOf_computedP2Y.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.computedP2Y_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_computedP2Y (_ inObserver : EBEvent) {
    self.computedP2Y_property.removeEBObserver (inObserver)
/*    self.mObserversOf_computedP2Y.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.computedP2Y_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   INIT 
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mSide simple stored property
    self.mSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mDefaultTrackWidthUnit simple stored property
    self.mDefaultTrackWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mDefaultTrackWidthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mCustomTrackWidth simple stored property
    self.mCustomTrackWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mCustomTrackWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mCustomTrackWidthUnit simple stored property
    self.mCustomTrackWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mCustomTrackWidthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mUsesCustomTrackWidth simple stored property
    self.mUsesCustomTrackWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mUsesCustomTrackWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mIsPreservedByAutoRouter simple stored property
    self.mIsPreservedByAutoRouter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mIsPreservedByAutoRouter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mP1XUnit simple stored property
    self.mP1XUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mP1XUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mP1YUnit simple stored property
    self.mP1YUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mP1YUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mP2XUnit simple stored property
    self.mP2XUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mP2XUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mP2YUnit simple stored property
    self.mP2YUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mP2YUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mManualLockP1 simple stored property
    self.mManualLockP1_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mManualLockP1_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mManualLockP2 simple stored property
    self.mManualLockP2_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mManualLockP2_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mDirectionLockOnKnobDragging simple stored property
    self.mDirectionLockOnKnobDragging_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mDirectionLockOnKnobDragging_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure actualTrackWidth transient property
    self.actualTrackWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.actualTrackWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netName transient property
    self.netName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.netName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netClassName transient property
    self.netClassName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.netClassName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netClassTrackWidth transient property
    self.netClassTrackWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.netClassTrackWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netClassViaHoleDiameter transient property
    self.netClassViaHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.netClassViaHoleDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netClassViaPadDiameter transient property
    self.netClassViaPadDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.netClassViaPadDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure trackLengthInCanariUnit transient property
    self.trackLengthInCanariUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.trackLengthInCanariUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure signatureForERCChecking transient property
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.signatureForERCChecking_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure p1ConnectedToSomePad transient property
    self.p1ConnectedToSomePad_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.p1ConnectedToSomePad_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure p2ConnectedToSomePad transient property
    self.p2ConnectedToSomePad_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.p2ConnectedToSomePad_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure objectDisplay transient property
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.objectDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure p1CanMove transient property
    self.p1CanMove_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.p1CanMove_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure p2CanMove transient property
    self.p2CanMove_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.p2CanMove_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure trackCanRotate transient property
    self.trackCanRotate_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.trackCanRotate_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure selectionDisplay transient property
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.selectionDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure trackDirectionInDegrees computed property
    self.trackDirectionInDegrees_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.trackDirectionInDegrees_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure computedP1X computed property
    self.computedP1X_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.computedP1X_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure computedP1Y computed property
    self.computedP1Y_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.computedP1Y_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure computedP2X computed property
    self.computedP2X_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.computedP2X_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure computedP2Y computed property
    self.computedP2Y_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.computedP2Y_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject BoardTrack
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_BoardTrack : ReadOnlyObject_BoardTrack {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_BoardTrack? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_BoardTrack?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : BoardTrack? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < BoardTrack? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : BoardTrack? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_BoardTrack
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_BoardTrack : ReadOnlyObject_BoardTrack {

  //····················································································································
 
  func setProp (_ inValue : BoardTrack?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_BoardTrack
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_BoardTrack : ReadWriteObject_BoardTrack {

  //····················································································································

  private var mModel : ReadWriteObject_BoardTrack? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_BoardTrack?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : BoardTrack?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : BoardTrack?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < BoardTrack? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : BoardTrack? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_BoardTrack 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_BoardTrack : ReadWriteObject_BoardTrack, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : BoardTrack) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : BoardTrack) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BoardTrack) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : BoardTrack) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : BoardTrack?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < BoardTrack? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : BoardTrack?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : BoardTrack? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

