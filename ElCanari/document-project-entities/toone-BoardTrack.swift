//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_BoardTrack 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_BoardTrack : ReadOnlyAbstractObjectProperty <BoardTrack> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : BoardTrack?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.mSide_property.removeEBObserver (self.mSide_property) // Stored property
    inOldValue?.mDefaultTrackWidthUnit_property.removeEBObserver (self.mDefaultTrackWidthUnit_property) // Stored property
    inOldValue?.mCustomTrackWidth_property.removeEBObserver (self.mCustomTrackWidth_property) // Stored property
    inOldValue?.mCustomTrackWidthUnit_property.removeEBObserver (self.mCustomTrackWidthUnit_property) // Stored property
    inOldValue?.mUsesCustomTrackWidth_property.removeEBObserver (self.mUsesCustomTrackWidth_property) // Stored property
    inOldValue?.mIsPreservedByAutoRouter_property.removeEBObserver (self.mIsPreservedByAutoRouter_property) // Stored property
    inOldValue?.actualTrackWidth_property.removeEBObserver (self.actualTrackWidth_property) // Transient property
    inOldValue?.selectionDisplay_property.removeEBObserver (self.selectionDisplay_property) // Transient property
    inOldValue?.netName_property.removeEBObserver (self.netName_property) // Transient property
    inOldValue?.netClassName_property.removeEBObserver (self.netClassName_property) // Transient property
    inOldValue?.netClassTrackWidth_property.removeEBObserver (self.netClassTrackWidth_property) // Transient property
    inOldValue?.netClassViaHoleDiameter_property.removeEBObserver (self.netClassViaHoleDiameter_property) // Transient property
    inOldValue?.netClassViaPadDiameter_property.removeEBObserver (self.netClassViaPadDiameter_property) // Transient property
    inOldValue?.trackLength_property.removeEBObserver (self.trackLength_property) // Transient property
    inOldValue?.endPointsLocation_property.removeEBObserver (self.endPointsLocation_property) // Transient property
    inOldValue?.signatureForERCChecking_property.removeEBObserver (self.signatureForERCChecking_property) // Transient property
    inOldValue?.objectDisplay_property.removeEBObserver (self.objectDisplay_property) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.mSide_property.addEBObserver (self.mSide_property) // Stored property
    self.mInternalValue?.mDefaultTrackWidthUnit_property.addEBObserver (self.mDefaultTrackWidthUnit_property) // Stored property
    self.mInternalValue?.mCustomTrackWidth_property.addEBObserver (self.mCustomTrackWidth_property) // Stored property
    self.mInternalValue?.mCustomTrackWidthUnit_property.addEBObserver (self.mCustomTrackWidthUnit_property) // Stored property
    self.mInternalValue?.mUsesCustomTrackWidth_property.addEBObserver (self.mUsesCustomTrackWidth_property) // Stored property
    self.mInternalValue?.mIsPreservedByAutoRouter_property.addEBObserver (self.mIsPreservedByAutoRouter_property) // Stored property
    self.mInternalValue?.actualTrackWidth_property.addEBObserver (self.actualTrackWidth_property) // Transient property
    self.mInternalValue?.selectionDisplay_property.addEBObserver (self.selectionDisplay_property) // Transient property
    self.mInternalValue?.netName_property.addEBObserver (self.netName_property) // Transient property
    self.mInternalValue?.netClassName_property.addEBObserver (self.netClassName_property) // Transient property
    self.mInternalValue?.netClassTrackWidth_property.addEBObserver (self.netClassTrackWidth_property) // Transient property
    self.mInternalValue?.netClassViaHoleDiameter_property.addEBObserver (self.netClassViaHoleDiameter_property) // Transient property
    self.mInternalValue?.netClassViaPadDiameter_property.addEBObserver (self.netClassViaPadDiameter_property) // Transient property
    self.mInternalValue?.trackLength_property.addEBObserver (self.trackLength_property) // Transient property
    self.mInternalValue?.endPointsLocation_property.addEBObserver (self.endPointsLocation_property) // Transient property
    self.mInternalValue?.signatureForERCChecking_property.addEBObserver (self.signatureForERCChecking_property) // Transient property
    self.mInternalValue?.objectDisplay_property.addEBObserver (self.objectDisplay_property) // Transient property
  }

  //····················································································································
  //   init
  //····················································································································

  override init () {
    super.init ()
    self.mSide_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mSide_property.prop ?? .empty }
    self.mSide_property.mWriteModelFunction = { [weak self] (inValue : TrackSide) in self?.mInternalValue?.mSide_property.setProp (inValue) }
    self.mDefaultTrackWidthUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mDefaultTrackWidthUnit_property.prop ?? .empty }
    self.mDefaultTrackWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mDefaultTrackWidthUnit_property.setProp (inValue) }
    self.mCustomTrackWidth_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mCustomTrackWidth_property.prop ?? .empty }
    self.mCustomTrackWidth_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mCustomTrackWidth_property.setProp (inValue) }
    self.mCustomTrackWidthUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mCustomTrackWidthUnit_property.prop ?? .empty }
    self.mCustomTrackWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mCustomTrackWidthUnit_property.setProp (inValue) }
    self.mUsesCustomTrackWidth_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mUsesCustomTrackWidth_property.prop ?? .empty }
    self.mUsesCustomTrackWidth_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mUsesCustomTrackWidth_property.setProp (inValue) }
    self.mIsPreservedByAutoRouter_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mIsPreservedByAutoRouter_property.prop ?? .empty }
    self.mIsPreservedByAutoRouter_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mIsPreservedByAutoRouter_property.setProp (inValue) }
    self.actualTrackWidth_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.actualTrackWidth_property.prop ?? .empty }
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.selectionDisplay_property.prop ?? .empty }
    self.netName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.netName_property.prop ?? .empty }
    self.netClassName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.netClassName_property.prop ?? .empty }
    self.netClassTrackWidth_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.netClassTrackWidth_property.prop ?? .empty }
    self.netClassViaHoleDiameter_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.netClassViaHoleDiameter_property.prop ?? .empty }
    self.netClassViaPadDiameter_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.netClassViaPadDiameter_property.prop ?? .empty }
    self.trackLength_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.trackLength_property.prop ?? .empty }
    self.endPointsLocation_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.endPointsLocation_property.prop ?? .empty }
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.signatureForERCChecking_property.prop ?? .empty }
    self.objectDisplay_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.objectDisplay_property.prop ?? .empty }
  }

  //····················································································································
  //   Proxy of 'mSide' stored property
  //····················································································································

  let mSide_property = EBPropertyProxy_TrackSide ()

  var mSide_property_selection : EBSelection <TrackSide> {
    switch (self.mSide_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mDefaultTrackWidthUnit' stored property
  //····················································································································

  let mDefaultTrackWidthUnit_property = EBPropertyProxy_Int ()

  var mDefaultTrackWidthUnit_property_selection : EBSelection <Int> {
    switch (self.mDefaultTrackWidthUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mCustomTrackWidth' stored property
  //····················································································································

  let mCustomTrackWidth_property = EBPropertyProxy_Int ()

  var mCustomTrackWidth_property_selection : EBSelection <Int> {
    switch (self.mCustomTrackWidth_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mCustomTrackWidthUnit' stored property
  //····················································································································

  let mCustomTrackWidthUnit_property = EBPropertyProxy_Int ()

  var mCustomTrackWidthUnit_property_selection : EBSelection <Int> {
    switch (self.mCustomTrackWidthUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mUsesCustomTrackWidth' stored property
  //····················································································································

  let mUsesCustomTrackWidth_property = EBPropertyProxy_Bool ()

  var mUsesCustomTrackWidth_property_selection : EBSelection <Bool> {
    switch (self.mUsesCustomTrackWidth_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mIsPreservedByAutoRouter' stored property
  //····················································································································

  let mIsPreservedByAutoRouter_property = EBPropertyProxy_Bool ()

  var mIsPreservedByAutoRouter_property_selection : EBSelection <Bool> {
    switch (self.mIsPreservedByAutoRouter_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'actualTrackWidth' transient property
  //····················································································································

  let actualTrackWidth_property = EBTransientProperty_Int ()

  var actualTrackWidth_property_selection : EBSelection <Int> {
    switch (self.actualTrackWidth_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'selectionDisplay' transient property
  //····················································································································

  let selectionDisplay_property = EBTransientProperty_EBShape ()

  var selectionDisplay_property_selection : EBSelection <EBShape> {
    switch (self.selectionDisplay_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'netName' transient property
  //····················································································································

  let netName_property = EBTransientProperty_String ()

  var netName_property_selection : EBSelection <String> {
    switch (self.netName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'netClassName' transient property
  //····················································································································

  let netClassName_property = EBTransientProperty_String ()

  var netClassName_property_selection : EBSelection <String> {
    switch (self.netClassName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'netClassTrackWidth' transient property
  //····················································································································

  let netClassTrackWidth_property = EBTransientProperty_Int ()

  var netClassTrackWidth_property_selection : EBSelection <Int> {
    switch (self.netClassTrackWidth_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'netClassViaHoleDiameter' transient property
  //····················································································································

  let netClassViaHoleDiameter_property = EBTransientProperty_Int ()

  var netClassViaHoleDiameter_property_selection : EBSelection <Int> {
    switch (self.netClassViaHoleDiameter_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'netClassViaPadDiameter' transient property
  //····················································································································

  let netClassViaPadDiameter_property = EBTransientProperty_Int ()

  var netClassViaPadDiameter_property_selection : EBSelection <Int> {
    switch (self.netClassViaPadDiameter_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'trackLength' transient property
  //····················································································································

  let trackLength_property = EBTransientProperty_Double ()

  var trackLength_property_selection : EBSelection <Double> {
    switch (self.trackLength_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'endPointsLocation' transient property
  //····················································································································

  let endPointsLocation_property = EBTransientProperty_CanariPointArray ()

  var endPointsLocation_property_selection : EBSelection <CanariPointArray> {
    switch (self.endPointsLocation_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'signatureForERCChecking' transient property
  //····················································································································

  let signatureForERCChecking_property = EBTransientProperty_UInt32 ()

  var signatureForERCChecking_property_selection : EBSelection <UInt32> {
    switch (self.signatureForERCChecking_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'objectDisplay' transient property
  //····················································································································

  let objectDisplay_property = EBTransientProperty_EBShape ()

  var objectDisplay_property_selection : EBSelection <EBShape> {
    switch (self.objectDisplay_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    TransientObject BoardTrack
//----------------------------------------------------------------------------------------------------------------------

class TransientObject_BoardTrack : ReadOnlyObject_BoardTrack {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_BoardTrack? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_BoardTrack?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : BoardTrack? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < BoardTrack? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : BoardTrack? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_BoardTrack
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_BoardTrack : ReadOnlyObject_BoardTrack {

  //····················································································································
 
  func setProp (_ inValue : BoardTrack?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_BoardTrack
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_BoardTrack : ReadWriteObject_BoardTrack {

  //····················································································································

  private var mModel : ReadWriteObject_BoardTrack? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_BoardTrack?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : BoardTrack?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : BoardTrack?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < BoardTrack? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : BoardTrack? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_BoardTrack 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_BoardTrack : ReadWriteObject_BoardTrack, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : BoardTrack) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : BoardTrack) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BoardTrack) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : BoardTrack) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : BoardTrack?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < BoardTrack? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : BoardTrack?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : BoardTrack? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

