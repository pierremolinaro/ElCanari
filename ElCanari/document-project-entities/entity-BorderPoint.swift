//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderPoint_mX : class {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderPoint_mY : class {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BorderPoint
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class BorderPoint : EBManagedObject,
         BorderPoint_mX,
         BorderPoint_mY {

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  let mX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································

  var mX_property_selection : EBSelection <Int> { return self.mX_property.prop }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  let mY_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································

  var mY_property_selection : EBSelection <Int> { return self.mY_property.prop }

  //····················································································································
  //   To one property: mCurve2
  //····················································································································

   let mCurve2_property = StoredObject_BoardLimit ()

  //····················································································································

  var mCurve2_property_selection : EBSelection <BoardLimit?> {
    return .single (self.mCurve2_property.propval)
  }

  //····················································································································

  var mCurve2 : BoardLimit? {
    get {
      return self.mCurve2_property.propval
    }
    set {
      if self.mCurve2_property.propval != nil {
        self.mCurve2_property.setProp (nil)
      }
      if newValue != nil {
        self.mCurve2_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mCurve2_none : StoredObject_BoardLimit { return self.mCurve2_property }

  //····················································································································

  var mCurve2_none_selection : EBSelection <Bool> {
    return .single (self.mCurve2_property.propval == nil)
  }

  //····················································································································
  //   To one property: mCurve1
  //····················································································································

   let mCurve1_property = StoredObject_BoardLimit ()

  //····················································································································

  var mCurve1_property_selection : EBSelection <BoardLimit?> {
    return .single (self.mCurve1_property.propval)
  }

  //····················································································································

  var mCurve1 : BoardLimit? {
    get {
      return self.mCurve1_property.propval
    }
    set {
      if self.mCurve1_property.propval != nil {
        self.mCurve1_property.setProp (nil)
      }
      if newValue != nil {
        self.mCurve1_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mCurve1_none : StoredObject_BoardLimit { return self.mCurve1_property }

  //····················································································································

  var mCurve1_none_selection : EBSelection <Bool> {
    return .single (self.mCurve1_property.propval == nil)
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mX
    self.mX_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mY
    self.mY_property.ebUndoManager = self.ebUndoManager
  //--- To one property: mCurve2 (has opposite to one relationship: mP2) §
    self.mCurve2_property.ebUndoManager = self.ebUndoManager
    self.mCurve2_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mP2_property.setProp (me) } },
      resetter: { inObject in inObject.mP2_property.setProp (nil) }
    )
  //--- To one property: mCurve1 (has opposite to one relationship: mP1) §
    self.mCurve1_property.ebUndoManager = self.ebUndoManager
    self.mCurve1_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mP1_property.setProp (me) } },
      resetter: { inObject in inObject.mP1_property.setProp (nil) }
    )
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mX",
      idx: self.mX_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mX_property.mObserverExplorer,
      valueExplorer: &self.mX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mY",
      idx: self.mY_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mY_property.mObserverExplorer,
      valueExplorer: &self.mY_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "mCurve2",
      idx:self.mCurve2_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mCurve2_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mCurve1",
      idx:self.mCurve1_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mCurve1_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mX
    self.mX_property.mObserverExplorer = nil
    self.mX_property.mValueExplorer = nil
  //--- Atomic property: mY
    self.mY_property.mObserverExplorer = nil
    self.mY_property.mValueExplorer = nil
  //--- To one property: mCurve2
    self.mCurve2_property.mObserverExplorer = nil
    self.mCurve2_property.mValueExplorer = nil
  //--- To one property: mCurve1
    self.mCurve1_property.mObserverExplorer = nil
    self.mCurve1_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mCurve2 = nil
    self.mCurve1 = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mX
    self.mX_property.storeIn (dictionary: ioDictionary, forKey:"mX")
  //--- Atomic property: mY
    self.mY_property.storeIn (dictionary: ioDictionary, forKey:"mY")
  //--- To one property: mCurve2 // Opposite is toOne mP2
    self.store (managedObject:self.mCurve2_property.propval,
      relationshipName: "mCurve2",
      intoDictionary: ioDictionary)
  //--- To one property: mCurve1 // Opposite is toOne mP1
    self.store (managedObject:self.mCurve1_property.propval,
      relationshipName: "mCurve1",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To one property: mCurve2
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mCurve2",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? BoardLimit {
        self.mCurve2_property.setProp (entity)
      }
    }
  //--- To one property: mCurve1
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mCurve1",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? BoardLimit {
        self.mCurve1_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey:"mX")
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey:"mY")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To one property: mCurve2
    if let object = self.mCurve2 {
      objects.append (object)
    }
  //--- To one property: mCurve1
    if let object = self.mCurve1 {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To one property: mCurve2
    if let object = self.mCurve2 {
      objects.append (object)
    }
  //--- To one property: mCurve1
    if let object = self.mCurve1 {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

