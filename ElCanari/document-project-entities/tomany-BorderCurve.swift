//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_BorderCurve : ReadOnlyAbstractArrayProperty <BorderCurve> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <BorderCurve>, addedSet inAddedSet : Set <BorderCurve>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_mX_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mY_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mCPX1_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mCPY1_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mCPX2_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mCPY2_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mShape_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_p1Xstring_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_p1Ystring_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_p2Xstring_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_p2Ystring_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_cp1Xstring_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_cp1Ystring_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_cp2Xstring_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_cp2Ystring_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_descriptor_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_objectDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_isLine_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_mX_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mY_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mCPX1_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mCPY1_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mCPX2_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mCPY2_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mShape_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_p1Xstring_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_p1Ystring_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_p2Xstring_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_p2Ystring_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_cp1Xstring_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_cp1Ystring_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_cp2Xstring_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_cp2Ystring_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_descriptor_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_objectDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_isLine_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_selectionDisplay_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mX (_ inObserver : EBEvent, postEvent inPostEvent : Bool) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mX.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.addEBObserver (inObserver, postEvent: inPostEvent)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mX.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mX_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_mX.apply { (_ observer : EBEvent) in
        managedObject.mX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    self.mObserversOf_mX.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private var mObserversOf_mY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mY (_ inObserver : EBEvent, postEvent inPostEvent : Bool) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mY.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.addEBObserver (inObserver, postEvent: inPostEvent)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mY.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mY_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_mY.apply { (_ observer : EBEvent) in
        managedObject.mY_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mY_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    self.mObserversOf_mY.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mCPX1' stored property
  //····················································································································

  private var mObserversOf_mCPX1 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mCPX1 (_ inObserver : EBEvent, postEvent inPostEvent : Bool) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCPX1.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCPX1_property.addEBObserver (inObserver, postEvent: inPostEvent)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCPX1 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCPX1.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCPX1_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mCPX1_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_mCPX1.apply { (_ observer : EBEvent) in
        managedObject.mCPX1_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCPX1_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    self.mObserversOf_mCPX1.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mCPX1_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mCPY1' stored property
  //····················································································································

  private var mObserversOf_mCPY1 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mCPY1 (_ inObserver : EBEvent, postEvent inPostEvent : Bool) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCPY1.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCPY1_property.addEBObserver (inObserver, postEvent: inPostEvent)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCPY1 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCPY1.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCPY1_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mCPY1_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_mCPY1.apply { (_ observer : EBEvent) in
        managedObject.mCPY1_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCPY1_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    self.mObserversOf_mCPY1.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mCPY1_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mCPX2' stored property
  //····················································································································

  private var mObserversOf_mCPX2 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mCPX2 (_ inObserver : EBEvent, postEvent inPostEvent : Bool) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCPX2.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCPX2_property.addEBObserver (inObserver, postEvent: inPostEvent)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCPX2 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCPX2.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCPX2_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mCPX2_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_mCPX2.apply { (_ observer : EBEvent) in
        managedObject.mCPX2_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCPX2_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    self.mObserversOf_mCPX2.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mCPX2_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mCPY2' stored property
  //····················································································································

  private var mObserversOf_mCPY2 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mCPY2 (_ inObserver : EBEvent, postEvent inPostEvent : Bool) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCPY2.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCPY2_property.addEBObserver (inObserver, postEvent: inPostEvent)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCPY2 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCPY2.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCPY2_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mCPY2_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_mCPY2.apply { (_ observer : EBEvent) in
        managedObject.mCPY2_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCPY2_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    self.mObserversOf_mCPY2.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mCPY2_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mShape' stored property
  //····················································································································

  private var mObserversOf_mShape = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mShape (_ inObserver : EBEvent, postEvent inPostEvent : Bool) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mShape.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShape_property.addEBObserver (inObserver, postEvent: inPostEvent)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShape (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mShape.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShape_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mShape_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_mShape.apply { (_ observer : EBEvent) in
        managedObject.mShape_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mShape_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    self.mObserversOf_mShape.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mShape_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'p1Xstring' transient property
  //····················································································································

  private var mObserversOf_p1Xstring = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_p1Xstring (_ inObserver : EBEvent, postEvent inPostEvent : Bool) {
    self.addEBObserver (inObserver)
    self.mObserversOf_p1Xstring.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.p1Xstring_property.addEBObserver (inObserver, postEvent: inPostEvent)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_p1Xstring (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_p1Xstring.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.p1Xstring_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_p1Xstring_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_p1Xstring.apply { (_ observer : EBEvent) in
        managedObject.p1Xstring_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_p1Xstring_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_p1Xstring.apply { (_ observer : EBEvent) in
        managedObject.p1Xstring_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'p1Ystring' transient property
  //····················································································································

  private var mObserversOf_p1Ystring = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_p1Ystring (_ inObserver : EBEvent, postEvent inPostEvent : Bool) {
    self.addEBObserver (inObserver)
    self.mObserversOf_p1Ystring.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.p1Ystring_property.addEBObserver (inObserver, postEvent: inPostEvent)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_p1Ystring (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_p1Ystring.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.p1Ystring_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_p1Ystring_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_p1Ystring.apply { (_ observer : EBEvent) in
        managedObject.p1Ystring_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_p1Ystring_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_p1Ystring.apply { (_ observer : EBEvent) in
        managedObject.p1Ystring_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'p2Xstring' transient property
  //····················································································································

  private var mObserversOf_p2Xstring = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_p2Xstring (_ inObserver : EBEvent, postEvent inPostEvent : Bool) {
    self.addEBObserver (inObserver)
    self.mObserversOf_p2Xstring.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.p2Xstring_property.addEBObserver (inObserver, postEvent: inPostEvent)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_p2Xstring (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_p2Xstring.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.p2Xstring_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_p2Xstring_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_p2Xstring.apply { (_ observer : EBEvent) in
        managedObject.p2Xstring_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_p2Xstring_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_p2Xstring.apply { (_ observer : EBEvent) in
        managedObject.p2Xstring_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'p2Ystring' transient property
  //····················································································································

  private var mObserversOf_p2Ystring = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_p2Ystring (_ inObserver : EBEvent, postEvent inPostEvent : Bool) {
    self.addEBObserver (inObserver)
    self.mObserversOf_p2Ystring.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.p2Ystring_property.addEBObserver (inObserver, postEvent: inPostEvent)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_p2Ystring (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_p2Ystring.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.p2Ystring_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_p2Ystring_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_p2Ystring.apply { (_ observer : EBEvent) in
        managedObject.p2Ystring_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_p2Ystring_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_p2Ystring.apply { (_ observer : EBEvent) in
        managedObject.p2Ystring_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'cp1Xstring' transient property
  //····················································································································

  private var mObserversOf_cp1Xstring = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_cp1Xstring (_ inObserver : EBEvent, postEvent inPostEvent : Bool) {
    self.addEBObserver (inObserver)
    self.mObserversOf_cp1Xstring.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cp1Xstring_property.addEBObserver (inObserver, postEvent: inPostEvent)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_cp1Xstring (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_cp1Xstring.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cp1Xstring_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_cp1Xstring_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_cp1Xstring.apply { (_ observer : EBEvent) in
        managedObject.cp1Xstring_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_cp1Xstring_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_cp1Xstring.apply { (_ observer : EBEvent) in
        managedObject.cp1Xstring_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'cp1Ystring' transient property
  //····················································································································

  private var mObserversOf_cp1Ystring = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_cp1Ystring (_ inObserver : EBEvent, postEvent inPostEvent : Bool) {
    self.addEBObserver (inObserver)
    self.mObserversOf_cp1Ystring.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cp1Ystring_property.addEBObserver (inObserver, postEvent: inPostEvent)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_cp1Ystring (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_cp1Ystring.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cp1Ystring_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_cp1Ystring_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_cp1Ystring.apply { (_ observer : EBEvent) in
        managedObject.cp1Ystring_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_cp1Ystring_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_cp1Ystring.apply { (_ observer : EBEvent) in
        managedObject.cp1Ystring_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'cp2Xstring' transient property
  //····················································································································

  private var mObserversOf_cp2Xstring = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_cp2Xstring (_ inObserver : EBEvent, postEvent inPostEvent : Bool) {
    self.addEBObserver (inObserver)
    self.mObserversOf_cp2Xstring.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cp2Xstring_property.addEBObserver (inObserver, postEvent: inPostEvent)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_cp2Xstring (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_cp2Xstring.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cp2Xstring_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_cp2Xstring_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_cp2Xstring.apply { (_ observer : EBEvent) in
        managedObject.cp2Xstring_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_cp2Xstring_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_cp2Xstring.apply { (_ observer : EBEvent) in
        managedObject.cp2Xstring_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'cp2Ystring' transient property
  //····················································································································

  private var mObserversOf_cp2Ystring = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_cp2Ystring (_ inObserver : EBEvent, postEvent inPostEvent : Bool) {
    self.addEBObserver (inObserver)
    self.mObserversOf_cp2Ystring.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cp2Ystring_property.addEBObserver (inObserver, postEvent: inPostEvent)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_cp2Ystring (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_cp2Ystring.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cp2Ystring_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_cp2Ystring_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_cp2Ystring.apply { (_ observer : EBEvent) in
        managedObject.cp2Ystring_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_cp2Ystring_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_cp2Ystring.apply { (_ observer : EBEvent) in
        managedObject.cp2Ystring_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'descriptor' transient property
  //····················································································································

  private var mObserversOf_descriptor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_descriptor (_ inObserver : EBEvent, postEvent inPostEvent : Bool) {
    self.addEBObserver (inObserver)
    self.mObserversOf_descriptor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.descriptor_property.addEBObserver (inObserver, postEvent: inPostEvent)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_descriptor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_descriptor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.descriptor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_descriptor_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_descriptor.apply { (_ observer : EBEvent) in
        managedObject.descriptor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_descriptor_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_descriptor.apply { (_ observer : EBEvent) in
        managedObject.descriptor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent, postEvent inPostEvent : Bool) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver, postEvent: inPostEvent)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'isLine' transient property
  //····················································································································

  private var mObserversOf_isLine = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_isLine (_ inObserver : EBEvent, postEvent inPostEvent : Bool) {
    self.addEBObserver (inObserver)
    self.mObserversOf_isLine.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isLine_property.addEBObserver (inObserver, postEvent: inPostEvent)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_isLine (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_isLine.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isLine_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_isLine_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_isLine.apply { (_ observer : EBEvent) in
        managedObject.isLine_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_isLine_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_isLine.apply { (_ observer : EBEvent) in
        managedObject.isLine_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent, postEvent inPostEvent : Bool) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver, postEvent: inPostEvent)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_BorderCurve : ReadOnlyArrayOf_BorderCurve {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : BorderCurve, _ right : BorderCurve) -> Bool > = nil 
  private var mSortObserver : EBModelNotifierEvent? = nil
  private var mModelDidChange = true

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_BorderCurve? = nil
  private var mTransientKind : PropertyKind = .empty

 
  func setDataProvider (_ inProvider : ReadOnlyArrayOf_BorderCurve,
                        sortCallback inSortCallBack : Optional < (_ left : BorderCurve, _ right : BorderCurve) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = []
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    self.mModelDidChange = true
    super.notifyModelDidChange ()
  }
 
  //····················································································································

  private func computeModelArray() {
   if self.mModelDidChange {
     self.mModelDidChange = false
     let newArray : [BorderCurve] 
      if let dataProvider = self.mDataProvider {
        switch dataProvider.prop {
        case .empty :
          newArray = []
          self.mTransientKind = .empty
        case .single (let v) :
          if let sortFunction = self.mIsOrderedBefore {
            newArray = v.sorted { sortFunction ($0, $1) }
          }else{
            newArray = v
          }
          self.mTransientKind = .single
        case .multiple :
          newArray = []
          self.mTransientKind = .multiple
        }
      }else{
        newArray = []
        self.mTransientKind = .empty
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var prop : EBSelection < [BorderCurve] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [BorderCurve] { self.computeModelArray() ; return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_BorderCurve <SUPER : EBManagedObject> : ReadOnlyArrayOf_BorderCurve {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty
  private var mModelDidChange = true

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
     self.mModelDidChange = true
    super.notifyModelDidChange ()
  }
 
  //····················································································································

  private func computeModelArray() {
   if self.mModelDidChange {
     self.mModelDidChange = false
     var newModelArray : [SUPER] 
      if let dataProvider = self.mDataProvider {
        switch dataProvider.prop {
        case .empty :
          newModelArray = []
          self.mTransientKind = .empty
        case .single (let v) :
          newModelArray = v
          self.mTransientKind = .single
         case .multiple :
          newModelArray = []
          self.mTransientKind = .multiple
        }
      }else{
        newModelArray = []
        self.mTransientKind = .empty
      }
      var newArray = [BorderCurve] ()
      for superObject in newModelArray {
        if let object = superObject as? BorderCurve {
          newArray.append (object)
        }
      }
      self.mInternalArrayValue = newArray
    }
  }

  //····················································································································

  override var prop : EBSelection < [BorderCurve] > {
    self.computeModelArray ()
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [BorderCurve] { self.computeModelArray () ; return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_BorderCurve : ReadOnlyArrayOf_BorderCurve {

  //····················································································································
 
  func setProp (_ value :  [BorderCurve]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_BorderCurve : ReadWriteArrayOf_BorderCurve {

  //····················································································································

  private var mModel : ReadWriteArrayOf_BorderCurve? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_BorderCurve?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [BorderCurve]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [BorderCurve]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [BorderCurve] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : [BorderCurve] {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_BorderCurve : ReadWriteArrayOf_BorderCurve, EBSignatureObserverProtocol {

  //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : BorderCurve) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : BorderCurve) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BorderCurve) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : BorderCurve) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [BorderCurve]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [BorderCurve]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <BorderCurve>, addedSet inAddedSet : Set <BorderCurve>) {
    for managedObject in inRemovedSet {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet {
      if self.mUsedForSignature {
        managedObject.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }
 
  //····················································································································

  override var prop : EBSelection < [BorderCurve] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [BorderCurve]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [BorderCurve] { return self.mInternalArrayValue }

  //····················································································································

  func remove (_ object : BorderCurve) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : BorderCurve) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StandAloneArrayOf_BorderCurve : ReadWriteArrayOf_BorderCurve {

  //····················································································································

  override var prop : EBSelection < [BorderCurve] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [BorderCurve]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [BorderCurve] { return self.mInternalArrayValue }

  //····················································································································

  override func notifyModelDidChange () {
    self.postEvent ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  func remove (_ object : BorderCurve) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : BorderCurve) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PreferencesArrayOf_BorderCurve : StoredArrayOf_BorderCurve {

  //····················································································································

  private let mPrefKey : String
  private let mObserverForWritingPreferences = EBOutletEvent ()
  
  //····················································································································

  init (prefKey : String) {
    self.mPrefKey = prefKey
    super.init (usedForSignature: false)
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [BorderCurve] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "BorderCurve") as? BorderCurve {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
    self.addEBObserverOf_mX (self.mObserverForWritingPreferences, postEvent: true)
    self.addEBObserverOf_mY (self.mObserverForWritingPreferences, postEvent: true)
    self.addEBObserverOf_mCPX1 (self.mObserverForWritingPreferences, postEvent: true)
    self.addEBObserverOf_mCPY1 (self.mObserverForWritingPreferences, postEvent: true)
    self.addEBObserverOf_mCPX2 (self.mObserverForWritingPreferences, postEvent: true)
    self.addEBObserverOf_mCPY2 (self.mObserverForWritingPreferences, postEvent: true)
    self.addEBObserverOf_mShape (self.mObserverForWritingPreferences, postEvent: true)
    self.mObserverForWritingPreferences.mEventCallBack = { self.writeInPreferences () }
 }

  //····················································································································
 
  private func writeInPreferences () {
    var dictionaryArray = [NSDictionary] ()
    for object in self.mInternalArrayValue {
      let d = NSMutableDictionary ()
      object.saveIntoDictionary (d)
      d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
      dictionaryArray.append (d)
    }
    UserDefaults.standard.set (dictionaryArray, forKey: self.mPrefKey)
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

