//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mSymbolInstanceName : class {
  var mSymbolInstanceName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mSymbolTypeName : class {
  var mSymbolTypeName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mPinX : class {
  var mPinX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mPinY : class {
  var mPinY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mXName : class {
  var mXName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mYName : class {
  var mYName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mNameHorizontalAlignment : class {
  var mNameHorizontalAlignment : HorizontalAlignment { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mPinNameIsDisplayedInSchematics : class {
  var mPinNameIsDisplayedInSchematics : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mXNumber : class {
  var mXNumber : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mYNumber : class {
  var mYNumber : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mNumberHorizontalAlignment : class {
  var mNumberHorizontalAlignment : HorizontalAlignment { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_mPinName : class {
  var mPinName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_pinQualifiedName : class {
  var pinQualifiedName : PinQualifiedNameStruct? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DevicePinInProject_descriptor : class {
  var descriptor : PinInProjectDescriptor? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class DevicePinInProject : EBManagedObject,
         DevicePinInProject_mSymbolInstanceName,
         DevicePinInProject_mSymbolTypeName,
         DevicePinInProject_mPinX,
         DevicePinInProject_mPinY,
         DevicePinInProject_mXName,
         DevicePinInProject_mYName,
         DevicePinInProject_mNameHorizontalAlignment,
         DevicePinInProject_mPinNameIsDisplayedInSchematics,
         DevicePinInProject_mXNumber,
         DevicePinInProject_mYNumber,
         DevicePinInProject_mNumberHorizontalAlignment,
         DevicePinInProject_mPinName,
         DevicePinInProject_pinQualifiedName,
         DevicePinInProject_descriptor {

  //····················································································································
  //   Atomic property: mSymbolInstanceName
  //····················································································································

  let mSymbolInstanceName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mSymbolInstanceName : String {
    get { return self.mSymbolInstanceName_property.propval }
    set { self.mSymbolInstanceName_property.setProp (newValue) }
  }

  //····················································································································

  var mSymbolInstanceName_property_selection : EBSelection <String> { return self.mSymbolInstanceName_property.prop }

  //····················································································································
  //   Atomic property: mSymbolTypeName
  //····················································································································

  let mSymbolTypeName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mSymbolTypeName : String {
    get { return self.mSymbolTypeName_property.propval }
    set { self.mSymbolTypeName_property.setProp (newValue) }
  }

  //····················································································································

  var mSymbolTypeName_property_selection : EBSelection <String> { return self.mSymbolTypeName_property.prop }

  //····················································································································
  //   Atomic property: mPinX
  //····················································································································

  let mPinX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mPinX : Int {
    get { return self.mPinX_property.propval }
    set { self.mPinX_property.setProp (newValue) }
  }

  //····················································································································

  var mPinX_property_selection : EBSelection <Int> { return self.mPinX_property.prop }

  //····················································································································
  //   Atomic property: mPinY
  //····················································································································

  let mPinY_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mPinY : Int {
    get { return self.mPinY_property.propval }
    set { self.mPinY_property.setProp (newValue) }
  }

  //····················································································································

  var mPinY_property_selection : EBSelection <Int> { return self.mPinY_property.prop }

  //····················································································································
  //   Atomic property: mXName
  //····················································································································

  let mXName_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mXName : Int {
    get { return self.mXName_property.propval }
    set { self.mXName_property.setProp (newValue) }
  }

  //····················································································································

  var mXName_property_selection : EBSelection <Int> { return self.mXName_property.prop }

  //····················································································································
  //   Atomic property: mYName
  //····················································································································

  let mYName_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mYName : Int {
    get { return self.mYName_property.propval }
    set { self.mYName_property.setProp (newValue) }
  }

  //····················································································································

  var mYName_property_selection : EBSelection <Int> { return self.mYName_property.prop }

  //····················································································································
  //   Atomic property: mNameHorizontalAlignment
  //····················································································································

  let mNameHorizontalAlignment_property = EBStoredProperty_HorizontalAlignment (defaultValue: HorizontalAlignment.center)

  //····················································································································

  var mNameHorizontalAlignment : HorizontalAlignment {
    get { return self.mNameHorizontalAlignment_property.propval }
    set { self.mNameHorizontalAlignment_property.setProp (newValue) }
  }

  //····················································································································

  var mNameHorizontalAlignment_property_selection : EBSelection <HorizontalAlignment> { return self.mNameHorizontalAlignment_property.prop }

  //····················································································································
  //   Atomic property: mPinNameIsDisplayedInSchematics
  //····················································································································

  let mPinNameIsDisplayedInSchematics_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var mPinNameIsDisplayedInSchematics : Bool {
    get { return self.mPinNameIsDisplayedInSchematics_property.propval }
    set { self.mPinNameIsDisplayedInSchematics_property.setProp (newValue) }
  }

  //····················································································································

  var mPinNameIsDisplayedInSchematics_property_selection : EBSelection <Bool> { return self.mPinNameIsDisplayedInSchematics_property.prop }

  //····················································································································
  //   Atomic property: mXNumber
  //····················································································································

  let mXNumber_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mXNumber : Int {
    get { return self.mXNumber_property.propval }
    set { self.mXNumber_property.setProp (newValue) }
  }

  //····················································································································

  var mXNumber_property_selection : EBSelection <Int> { return self.mXNumber_property.prop }

  //····················································································································
  //   Atomic property: mYNumber
  //····················································································································

  let mYNumber_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mYNumber : Int {
    get { return self.mYNumber_property.propval }
    set { self.mYNumber_property.setProp (newValue) }
  }

  //····················································································································

  var mYNumber_property_selection : EBSelection <Int> { return self.mYNumber_property.prop }

  //····················································································································
  //   Atomic property: mNumberHorizontalAlignment
  //····················································································································

  let mNumberHorizontalAlignment_property = EBStoredProperty_HorizontalAlignment (defaultValue: HorizontalAlignment.center)

  //····················································································································

  var mNumberHorizontalAlignment : HorizontalAlignment {
    get { return self.mNumberHorizontalAlignment_property.propval }
    set { self.mNumberHorizontalAlignment_property.setProp (newValue) }
  }

  //····················································································································

  var mNumberHorizontalAlignment_property_selection : EBSelection <HorizontalAlignment> { return self.mNumberHorizontalAlignment_property.prop }

  //····················································································································
  //   Atomic property: mPinName
  //····················································································································

  let mPinName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mPinName : String {
    get { return self.mPinName_property.propval }
    set { self.mPinName_property.setProp (newValue) }
  }

  //····················································································································

  var mPinName_property_selection : EBSelection <String> { return self.mPinName_property.prop }

  //····················································································································
  //   Transient property: pinQualifiedName
  //····················································································································

  let pinQualifiedName_property = EBTransientProperty_PinQualifiedNameStruct ()

  //····················································································································

  var pinQualifiedName_property_selection : EBSelection <PinQualifiedNameStruct> {
    return self.pinQualifiedName_property.prop
  }

  //····················································································································

  var pinQualifiedName : PinQualifiedNameStruct? {
    switch self.pinQualifiedName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: descriptor
  //····················································································································

  let descriptor_property = EBTransientProperty_PinInProjectDescriptor ()

  //····················································································································

  var descriptor_property_selection : EBSelection <PinInProjectDescriptor> {
    return self.descriptor_property.prop
  }

  //····················································································································

  var descriptor : PinInProjectDescriptor? {
    switch self.descriptor_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mSymbolInstanceName
    self.mSymbolInstanceName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSymbolTypeName
    self.mSymbolTypeName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mPinX
    self.mPinX_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mPinY
    self.mPinY_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mXName
    self.mXName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mYName
    self.mYName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mNameHorizontalAlignment
    self.mNameHorizontalAlignment_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mPinNameIsDisplayedInSchematics
    self.mPinNameIsDisplayedInSchematics_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mXNumber
    self.mXNumber_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mYNumber
    self.mYNumber_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mNumberHorizontalAlignment
    self.mNumberHorizontalAlignment_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mPinName
    self.mPinName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: pinQualifiedName
    self.pinQualifiedName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mSymbolInstanceName_property_selection.kind ()
        kind &= unwSelf.mPinName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSymbolInstanceName_property_selection, unwSelf.mPinName_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_DevicePinInProject_pinQualifiedName (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbolInstanceName_property.addEBObserver (self.pinQualifiedName_property)
    self.mPinName_property.addEBObserver (self.pinQualifiedName_property)
  //--- Atomic property: descriptor
    self.descriptor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mPinName_property_selection.kind ()
        kind &= unwSelf.mSymbolInstanceName_property_selection.kind ()
        kind &= unwSelf.mSymbolTypeName_property_selection.kind ()
        kind &= unwSelf.mPinX_property_selection.kind ()
        kind &= unwSelf.mPinY_property_selection.kind ()
        kind &= unwSelf.mXName_property_selection.kind ()
        kind &= unwSelf.mYName_property_selection.kind ()
        kind &= unwSelf.mNameHorizontalAlignment_property_selection.kind ()
        kind &= unwSelf.mPinNameIsDisplayedInSchematics_property_selection.kind ()
        kind &= unwSelf.mXNumber_property_selection.kind ()
        kind &= unwSelf.mYNumber_property_selection.kind ()
        kind &= unwSelf.mNumberHorizontalAlignment_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mPinName_property_selection, unwSelf.mSymbolInstanceName_property_selection, unwSelf.mSymbolTypeName_property_selection, unwSelf.mPinX_property_selection, unwSelf.mPinY_property_selection, unwSelf.mXName_property_selection, unwSelf.mYName_property_selection, unwSelf.mNameHorizontalAlignment_property_selection, unwSelf.mPinNameIsDisplayedInSchematics_property_selection, unwSelf.mXNumber_property_selection, unwSelf.mYNumber_property_selection, unwSelf.mNumberHorizontalAlignment_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11)) :
            return .single (transient_DevicePinInProject_descriptor (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPinName_property.addEBObserver (self.descriptor_property)
    self.mSymbolInstanceName_property.addEBObserver (self.descriptor_property)
    self.mSymbolTypeName_property.addEBObserver (self.descriptor_property)
    self.mPinX_property.addEBObserver (self.descriptor_property)
    self.mPinY_property.addEBObserver (self.descriptor_property)
    self.mXName_property.addEBObserver (self.descriptor_property)
    self.mYName_property.addEBObserver (self.descriptor_property)
    self.mNameHorizontalAlignment_property.addEBObserver (self.descriptor_property)
    self.mPinNameIsDisplayedInSchematics_property.addEBObserver (self.descriptor_property)
    self.mXNumber_property.addEBObserver (self.descriptor_property)
    self.mYNumber_property.addEBObserver (self.descriptor_property)
    self.mNumberHorizontalAlignment_property.addEBObserver (self.descriptor_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mSymbolInstanceName_property.removeEBObserver (self.pinQualifiedName_property)
    self.mPinName_property.removeEBObserver (self.pinQualifiedName_property)
    self.mPinName_property.removeEBObserver (self.descriptor_property)
    self.mSymbolInstanceName_property.removeEBObserver (self.descriptor_property)
    self.mSymbolTypeName_property.removeEBObserver (self.descriptor_property)
    self.mPinX_property.removeEBObserver (self.descriptor_property)
    self.mPinY_property.removeEBObserver (self.descriptor_property)
    self.mXName_property.removeEBObserver (self.descriptor_property)
    self.mYName_property.removeEBObserver (self.descriptor_property)
    self.mNameHorizontalAlignment_property.removeEBObserver (self.descriptor_property)
    self.mPinNameIsDisplayedInSchematics_property.removeEBObserver (self.descriptor_property)
    self.mXNumber_property.removeEBObserver (self.descriptor_property)
    self.mYNumber_property.removeEBObserver (self.descriptor_property)
    self.mNumberHorizontalAlignment_property.removeEBObserver (self.descriptor_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mSymbolInstanceName",
      idx:self.mSymbolInstanceName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mSymbolInstanceName_property.mObserverExplorer,
      valueExplorer:&self.mSymbolInstanceName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSymbolTypeName",
      idx:self.mSymbolTypeName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mSymbolTypeName_property.mObserverExplorer,
      valueExplorer:&self.mSymbolTypeName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPinX",
      idx:self.mPinX_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mPinX_property.mObserverExplorer,
      valueExplorer:&self.mPinX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPinY",
      idx:self.mPinY_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mPinY_property.mObserverExplorer,
      valueExplorer:&self.mPinY_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mXName",
      idx:self.mXName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mXName_property.mObserverExplorer,
      valueExplorer:&self.mXName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mYName",
      idx:self.mYName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mYName_property.mObserverExplorer,
      valueExplorer:&self.mYName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNameHorizontalAlignment",
      idx:self.mNameHorizontalAlignment_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mNameHorizontalAlignment_property.mObserverExplorer,
      valueExplorer:&self.mNameHorizontalAlignment_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPinNameIsDisplayedInSchematics",
      idx:self.mPinNameIsDisplayedInSchematics_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mPinNameIsDisplayedInSchematics_property.mObserverExplorer,
      valueExplorer:&self.mPinNameIsDisplayedInSchematics_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mXNumber",
      idx:self.mXNumber_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mXNumber_property.mObserverExplorer,
      valueExplorer:&self.mXNumber_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mYNumber",
      idx:self.mYNumber_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mYNumber_property.mObserverExplorer,
      valueExplorer:&self.mYNumber_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNumberHorizontalAlignment",
      idx:self.mNumberHorizontalAlignment_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mNumberHorizontalAlignment_property.mObserverExplorer,
      valueExplorer:&self.mNumberHorizontalAlignment_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPinName",
      idx:self.mPinName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mPinName_property.mObserverExplorer,
      valueExplorer:&self.mPinName_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "pinQualifiedName",
      idx:self.pinQualifiedName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.pinQualifiedName_property.mObserverExplorer,
      valueExplorer:&self.pinQualifiedName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "descriptor",
      idx:self.descriptor_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.descriptor_property.mObserverExplorer,
      valueExplorer:&self.descriptor_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mSymbolInstanceName
    self.mSymbolInstanceName_property.mObserverExplorer = nil
    self.mSymbolInstanceName_property.mValueExplorer = nil
  //--- Atomic property: mSymbolTypeName
    self.mSymbolTypeName_property.mObserverExplorer = nil
    self.mSymbolTypeName_property.mValueExplorer = nil
  //--- Atomic property: mPinX
    self.mPinX_property.mObserverExplorer = nil
    self.mPinX_property.mValueExplorer = nil
  //--- Atomic property: mPinY
    self.mPinY_property.mObserverExplorer = nil
    self.mPinY_property.mValueExplorer = nil
  //--- Atomic property: mXName
    self.mXName_property.mObserverExplorer = nil
    self.mXName_property.mValueExplorer = nil
  //--- Atomic property: mYName
    self.mYName_property.mObserverExplorer = nil
    self.mYName_property.mValueExplorer = nil
  //--- Atomic property: mNameHorizontalAlignment
    self.mNameHorizontalAlignment_property.mObserverExplorer = nil
    self.mNameHorizontalAlignment_property.mValueExplorer = nil
  //--- Atomic property: mPinNameIsDisplayedInSchematics
    self.mPinNameIsDisplayedInSchematics_property.mObserverExplorer = nil
    self.mPinNameIsDisplayedInSchematics_property.mValueExplorer = nil
  //--- Atomic property: mXNumber
    self.mXNumber_property.mObserverExplorer = nil
    self.mXNumber_property.mValueExplorer = nil
  //--- Atomic property: mYNumber
    self.mYNumber_property.mObserverExplorer = nil
    self.mYNumber_property.mValueExplorer = nil
  //--- Atomic property: mNumberHorizontalAlignment
    self.mNumberHorizontalAlignment_property.mObserverExplorer = nil
    self.mNumberHorizontalAlignment_property.mValueExplorer = nil
  //--- Atomic property: mPinName
    self.mPinName_property.mObserverExplorer = nil
    self.mPinName_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mSymbolInstanceName
    self.mSymbolInstanceName_property.storeIn (dictionary: ioDictionary, forKey:"mSymbolInstanceName")
  //--- Atomic property: mSymbolTypeName
    self.mSymbolTypeName_property.storeIn (dictionary: ioDictionary, forKey:"mSymbolTypeName")
  //--- Atomic property: mPinX
    self.mPinX_property.storeIn (dictionary: ioDictionary, forKey:"mPinX")
  //--- Atomic property: mPinY
    self.mPinY_property.storeIn (dictionary: ioDictionary, forKey:"mPinY")
  //--- Atomic property: mXName
    self.mXName_property.storeIn (dictionary: ioDictionary, forKey:"mXName")
  //--- Atomic property: mYName
    self.mYName_property.storeIn (dictionary: ioDictionary, forKey:"mYName")
  //--- Atomic property: mNameHorizontalAlignment
    self.mNameHorizontalAlignment_property.storeIn (dictionary: ioDictionary, forKey:"mNameHorizontalAlignment")
  //--- Atomic property: mPinNameIsDisplayedInSchematics
    self.mPinNameIsDisplayedInSchematics_property.storeIn (dictionary: ioDictionary, forKey:"mPinNameIsDisplayedInSchematics")
  //--- Atomic property: mXNumber
    self.mXNumber_property.storeIn (dictionary: ioDictionary, forKey:"mXNumber")
  //--- Atomic property: mYNumber
    self.mYNumber_property.storeIn (dictionary: ioDictionary, forKey:"mYNumber")
  //--- Atomic property: mNumberHorizontalAlignment
    self.mNumberHorizontalAlignment_property.storeIn (dictionary: ioDictionary, forKey:"mNumberHorizontalAlignment")
  //--- Atomic property: mPinName
    self.mPinName_property.storeIn (dictionary: ioDictionary, forKey:"mPinName")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mSymbolInstanceName
    self.mSymbolInstanceName_property.readFrom (dictionary: inDictionary, forKey:"mSymbolInstanceName")
  //--- Atomic property: mSymbolTypeName
    self.mSymbolTypeName_property.readFrom (dictionary: inDictionary, forKey:"mSymbolTypeName")
  //--- Atomic property: mPinX
    self.mPinX_property.readFrom (dictionary: inDictionary, forKey:"mPinX")
  //--- Atomic property: mPinY
    self.mPinY_property.readFrom (dictionary: inDictionary, forKey:"mPinY")
  //--- Atomic property: mXName
    self.mXName_property.readFrom (dictionary: inDictionary, forKey:"mXName")
  //--- Atomic property: mYName
    self.mYName_property.readFrom (dictionary: inDictionary, forKey:"mYName")
  //--- Atomic property: mNameHorizontalAlignment
    self.mNameHorizontalAlignment_property.readFrom (dictionary: inDictionary, forKey:"mNameHorizontalAlignment")
  //--- Atomic property: mPinNameIsDisplayedInSchematics
    self.mPinNameIsDisplayedInSchematics_property.readFrom (dictionary: inDictionary, forKey:"mPinNameIsDisplayedInSchematics")
  //--- Atomic property: mXNumber
    self.mXNumber_property.readFrom (dictionary: inDictionary, forKey:"mXNumber")
  //--- Atomic property: mYNumber
    self.mYNumber_property.readFrom (dictionary: inDictionary, forKey:"mYNumber")
  //--- Atomic property: mNumberHorizontalAlignment
    self.mNumberHorizontalAlignment_property.readFrom (dictionary: inDictionary, forKey:"mNumberHorizontalAlignment")
  //--- Atomic property: mPinName
    self.mPinName_property.readFrom (dictionary: inDictionary, forKey:"mPinName")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_DevicePinInProject : ReadOnlyAbstractArrayProperty <DevicePinInProject> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <DevicePinInProject>, addedSet inAddedSet : Set <DevicePinInProject>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_mSymbolInstanceName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSymbolTypeName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mPinX_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mPinY_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mXName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mYName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mNameHorizontalAlignment_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mPinNameIsDisplayedInSchematics_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mXNumber_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mYNumber_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mNumberHorizontalAlignment_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mPinName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_pinQualifiedName_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_descriptor_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_mSymbolInstanceName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSymbolTypeName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mPinX_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mPinY_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mXName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mYName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mNameHorizontalAlignment_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mPinNameIsDisplayedInSchematics_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mXNumber_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mYNumber_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mNumberHorizontalAlignment_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mPinName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_pinQualifiedName_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_descriptor_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'mSymbolInstanceName' stored property
  //····················································································································

  private var mObserversOf_mSymbolInstanceName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSymbolInstanceName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolInstanceName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolInstanceName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolInstanceName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolInstanceName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolInstanceName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolInstanceName_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mSymbolInstanceName.apply { (_ observer : EBEvent) in
        managedObject.mSymbolInstanceName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolInstanceName_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mSymbolInstanceName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSymbolInstanceName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSymbolTypeName' stored property
  //····················································································································

  private var mObserversOf_mSymbolTypeName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSymbolTypeName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolTypeName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolTypeName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolTypeName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolTypeName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolTypeName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolTypeName_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mSymbolTypeName.apply { (_ observer : EBEvent) in
        managedObject.mSymbolTypeName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolTypeName_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mSymbolTypeName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSymbolTypeName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPinX' stored property
  //····················································································································

  private var mObserversOf_mPinX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPinX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPinX.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPinX.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPinX_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mPinX.apply { (_ observer : EBEvent) in
        managedObject.mPinX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPinX_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mPinX.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPinX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPinY' stored property
  //····················································································································

  private var mObserversOf_mPinY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPinY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPinY.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPinY.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPinY_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mPinY.apply { (_ observer : EBEvent) in
        managedObject.mPinY_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPinY_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mPinY.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPinY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mXName' stored property
  //····················································································································

  private var mObserversOf_mXName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mXName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mXName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mXName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mXName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mXName_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mXName.apply { (_ observer : EBEvent) in
        managedObject.mXName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mXName_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mXName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mXName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mYName' stored property
  //····················································································································

  private var mObserversOf_mYName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mYName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mYName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mYName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mYName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mYName_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mYName.apply { (_ observer : EBEvent) in
        managedObject.mYName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mYName_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mYName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mYName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNameHorizontalAlignment' stored property
  //····················································································································

  private var mObserversOf_mNameHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNameHorizontalAlignment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNameHorizontalAlignment.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameHorizontalAlignment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNameHorizontalAlignment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNameHorizontalAlignment.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameHorizontalAlignment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNameHorizontalAlignment_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNameHorizontalAlignment.apply { (_ observer : EBEvent) in
        managedObject.mNameHorizontalAlignment_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNameHorizontalAlignment_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mNameHorizontalAlignment.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNameHorizontalAlignment_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPinNameIsDisplayedInSchematics' stored property
  //····················································································································

  private var mObserversOf_mPinNameIsDisplayedInSchematics = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPinNameIsDisplayedInSchematics (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPinNameIsDisplayedInSchematics.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinNameIsDisplayedInSchematics_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinNameIsDisplayedInSchematics (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPinNameIsDisplayedInSchematics.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinNameIsDisplayedInSchematics_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPinNameIsDisplayedInSchematics_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mPinNameIsDisplayedInSchematics.apply { (_ observer : EBEvent) in
        managedObject.mPinNameIsDisplayedInSchematics_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPinNameIsDisplayedInSchematics_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mPinNameIsDisplayedInSchematics.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPinNameIsDisplayedInSchematics_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mXNumber' stored property
  //····················································································································

  private var mObserversOf_mXNumber = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mXNumber (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mXNumber.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXNumber_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mXNumber (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mXNumber.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXNumber_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mXNumber_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mXNumber.apply { (_ observer : EBEvent) in
        managedObject.mXNumber_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mXNumber_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mXNumber.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mXNumber_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mYNumber' stored property
  //····················································································································

  private var mObserversOf_mYNumber = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mYNumber (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mYNumber.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYNumber_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mYNumber (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mYNumber.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYNumber_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mYNumber_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mYNumber.apply { (_ observer : EBEvent) in
        managedObject.mYNumber_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mYNumber_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mYNumber.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mYNumber_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNumberHorizontalAlignment' stored property
  //····················································································································

  private var mObserversOf_mNumberHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNumberHorizontalAlignment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNumberHorizontalAlignment.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNumberHorizontalAlignment_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNumberHorizontalAlignment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNumberHorizontalAlignment.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNumberHorizontalAlignment_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNumberHorizontalAlignment_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNumberHorizontalAlignment.apply { (_ observer : EBEvent) in
        managedObject.mNumberHorizontalAlignment_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNumberHorizontalAlignment_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mNumberHorizontalAlignment.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNumberHorizontalAlignment_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPinName' stored property
  //····················································································································

  private var mObserversOf_mPinName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPinName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPinName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPinName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPinName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPinName_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mPinName.apply { (_ observer : EBEvent) in
        managedObject.mPinName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPinName_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mPinName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPinName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'pinQualifiedName' transient property
  //····················································································································

  private var mObserversOf_pinQualifiedName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_pinQualifiedName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_pinQualifiedName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinQualifiedName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_pinQualifiedName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_pinQualifiedName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinQualifiedName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_pinQualifiedName_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_pinQualifiedName.apply { (_ observer : EBEvent) in
        managedObject.pinQualifiedName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_pinQualifiedName_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_pinQualifiedName.apply { (_ observer : EBEvent) in
        managedObject.pinQualifiedName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'descriptor' transient property
  //····················································································································

  private var mObserversOf_descriptor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_descriptor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_descriptor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.descriptor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_descriptor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_descriptor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.descriptor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_descriptor_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_descriptor.apply { (_ observer : EBEvent) in
        managedObject.descriptor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_descriptor_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_descriptor.apply { (_ observer : EBEvent) in
        managedObject.descriptor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_DevicePinInProject : ReadOnlyArrayOf_DevicePinInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_DevicePinInProject? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_DevicePinInProject?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newArray : [DevicePinInProject] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newArray = v
        self.mTransientKind = .single
       case .multiple :
        newArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newArray = []
      self.mTransientKind = .empty
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [DevicePinInProject] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [DevicePinInProject] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_DevicePinInProject <SUPER : EBManagedObject> : ReadOnlyArrayOf_DevicePinInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    var newModelArray : [SUPER] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newModelArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newModelArray = v
        self.mTransientKind = .single
       case .multiple :
        newModelArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newModelArray = []
      self.mTransientKind = .empty
    }
    var newArray = [DevicePinInProject] ()
    for superObject in newModelArray {
      if let object = superObject as? DevicePinInProject {
        newArray.append (object)
      }
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [DevicePinInProject] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [DevicePinInProject] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_DevicePinInProject : ReadOnlyArrayOf_DevicePinInProject {

  //····················································································································
 
  func setProp (_ value :  [DevicePinInProject]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_DevicePinInProject : ReadWriteArrayOf_DevicePinInProject {

  //····················································································································

  private var mModel : ReadWriteArrayOf_DevicePinInProject? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_DevicePinInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [DevicePinInProject]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [DevicePinInProject]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [DevicePinInProject] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : [DevicePinInProject] {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_DevicePinInProject : ReadWriteArrayOf_DevicePinInProject, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : DevicePinInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : DevicePinInProject) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : DevicePinInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : DevicePinInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  //  Init
  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [DevicePinInProject] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "DevicePinInProject") as? DevicePinInProject {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [DevicePinInProject]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [DevicePinInProject]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //--- Write in preferences ?
    self.writeInPreferences ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <DevicePinInProject>, addedSet inAddedSet : Set <DevicePinInProject>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //---
    for managedObject in inRemovedSet {
      managedObject.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (managedObject)
    }
  //---
    for managedObject in inAddedSet {
      managedObject.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (managedObject)
    }
  }
 
  //····················································································································

  override var prop : EBSelection < [DevicePinInProject] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [DevicePinInProject]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [DevicePinInProject] { return self.mInternalArrayValue }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mInternalArrayValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  func remove (_ object : DevicePinInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : DevicePinInProject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mInternalArrayValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_DevicePinInProject 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_DevicePinInProject : ReadOnlyAbstractObjectProperty <DevicePinInProject> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : DevicePinInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.mSymbolInstanceName_property.removeEBObserversFrom (&self.mObserversOf_mSymbolInstanceName) // Stored property
    inOldValue?.mSymbolTypeName_property.removeEBObserversFrom (&self.mObserversOf_mSymbolTypeName) // Stored property
    inOldValue?.mPinX_property.removeEBObserversFrom (&self.mObserversOf_mPinX) // Stored property
    inOldValue?.mPinY_property.removeEBObserversFrom (&self.mObserversOf_mPinY) // Stored property
    inOldValue?.mXName_property.removeEBObserversFrom (&self.mObserversOf_mXName) // Stored property
    inOldValue?.mYName_property.removeEBObserversFrom (&self.mObserversOf_mYName) // Stored property
    inOldValue?.mNameHorizontalAlignment_property.removeEBObserversFrom (&self.mObserversOf_mNameHorizontalAlignment) // Stored property
    inOldValue?.mPinNameIsDisplayedInSchematics_property.removeEBObserversFrom (&self.mObserversOf_mPinNameIsDisplayedInSchematics) // Stored property
    inOldValue?.mXNumber_property.removeEBObserversFrom (&self.mObserversOf_mXNumber) // Stored property
    inOldValue?.mYNumber_property.removeEBObserversFrom (&self.mObserversOf_mYNumber) // Stored property
    inOldValue?.mNumberHorizontalAlignment_property.removeEBObserversFrom (&self.mObserversOf_mNumberHorizontalAlignment) // Stored property
    inOldValue?.mPinName_property.removeEBObserversFrom (&self.mObserversOf_mPinName) // Stored property
    inOldValue?.pinQualifiedName_property.removeEBObserversFrom (&self.mObserversOf_pinQualifiedName) // Transient property
    inOldValue?.descriptor_property.removeEBObserversFrom (&self.mObserversOf_descriptor) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.mSymbolInstanceName_property.addEBObserversFrom (&self.mObserversOf_mSymbolInstanceName) // Stored property
    self.mInternalValue?.mSymbolTypeName_property.addEBObserversFrom (&self.mObserversOf_mSymbolTypeName) // Stored property
    self.mInternalValue?.mPinX_property.addEBObserversFrom (&self.mObserversOf_mPinX) // Stored property
    self.mInternalValue?.mPinY_property.addEBObserversFrom (&self.mObserversOf_mPinY) // Stored property
    self.mInternalValue?.mXName_property.addEBObserversFrom (&self.mObserversOf_mXName) // Stored property
    self.mInternalValue?.mYName_property.addEBObserversFrom (&self.mObserversOf_mYName) // Stored property
    self.mInternalValue?.mNameHorizontalAlignment_property.addEBObserversFrom (&self.mObserversOf_mNameHorizontalAlignment) // Stored property
    self.mInternalValue?.mPinNameIsDisplayedInSchematics_property.addEBObserversFrom (&self.mObserversOf_mPinNameIsDisplayedInSchematics) // Stored property
    self.mInternalValue?.mXNumber_property.addEBObserversFrom (&self.mObserversOf_mXNumber) // Stored property
    self.mInternalValue?.mYNumber_property.addEBObserversFrom (&self.mObserversOf_mYNumber) // Stored property
    self.mInternalValue?.mNumberHorizontalAlignment_property.addEBObserversFrom (&self.mObserversOf_mNumberHorizontalAlignment) // Stored property
    self.mInternalValue?.mPinName_property.addEBObserversFrom (&self.mObserversOf_mPinName) // Stored property
    self.mInternalValue?.pinQualifiedName_property.addEBObserversFrom (&self.mObserversOf_pinQualifiedName) // Transient property
    self.mInternalValue?.descriptor_property.addEBObserversFrom (&self.mObserversOf_descriptor) // Transient property
  }

  //····················································································································
  //   Observers of 'mSymbolInstanceName' stored property
  //····················································································································

  private var mObserversOf_mSymbolInstanceName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSymbolInstanceName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolInstanceName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.mSymbolInstanceName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolInstanceName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolInstanceName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.mSymbolInstanceName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolInstanceName_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mSymbolInstanceName.apply { (_ observer : EBEvent) in
        managedObject.mSymbolInstanceName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolInstanceName_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mSymbolInstanceName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSymbolInstanceName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSymbolTypeName' stored property
  //····················································································································

  private var mObserversOf_mSymbolTypeName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSymbolTypeName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolTypeName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.mSymbolTypeName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolTypeName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolTypeName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.mSymbolTypeName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolTypeName_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mSymbolTypeName.apply { (_ observer : EBEvent) in
        managedObject.mSymbolTypeName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolTypeName_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mSymbolTypeName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSymbolTypeName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPinX' stored property
  //····················································································································

  private var mObserversOf_mPinX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPinX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPinX.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.mPinX_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPinX.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.mPinX_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mPinX_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mPinX.apply { (_ observer : EBEvent) in
        managedObject.mPinX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPinX_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mPinX.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPinX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPinY' stored property
  //····················································································································

  private var mObserversOf_mPinY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPinY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPinY.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.mPinY_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPinY.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.mPinY_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mPinY_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mPinY.apply { (_ observer : EBEvent) in
        managedObject.mPinY_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPinY_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mPinY.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPinY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mXName' stored property
  //····················································································································

  private var mObserversOf_mXName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mXName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mXName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.mXName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mXName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mXName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.mXName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mXName_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mXName.apply { (_ observer : EBEvent) in
        managedObject.mXName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mXName_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mXName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mXName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mYName' stored property
  //····················································································································

  private var mObserversOf_mYName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mYName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mYName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.mYName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mYName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mYName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.mYName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mYName_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mYName.apply { (_ observer : EBEvent) in
        managedObject.mYName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mYName_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mYName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mYName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNameHorizontalAlignment' stored property
  //····················································································································

  private var mObserversOf_mNameHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNameHorizontalAlignment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNameHorizontalAlignment.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.mNameHorizontalAlignment_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNameHorizontalAlignment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNameHorizontalAlignment.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.mNameHorizontalAlignment_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mNameHorizontalAlignment_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNameHorizontalAlignment.apply { (_ observer : EBEvent) in
        managedObject.mNameHorizontalAlignment_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNameHorizontalAlignment_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mNameHorizontalAlignment.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNameHorizontalAlignment_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPinNameIsDisplayedInSchematics' stored property
  //····················································································································

  private var mObserversOf_mPinNameIsDisplayedInSchematics = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPinNameIsDisplayedInSchematics (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPinNameIsDisplayedInSchematics.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.mPinNameIsDisplayedInSchematics_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinNameIsDisplayedInSchematics (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPinNameIsDisplayedInSchematics.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.mPinNameIsDisplayedInSchematics_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mPinNameIsDisplayedInSchematics_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mPinNameIsDisplayedInSchematics.apply { (_ observer : EBEvent) in
        managedObject.mPinNameIsDisplayedInSchematics_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPinNameIsDisplayedInSchematics_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mPinNameIsDisplayedInSchematics.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPinNameIsDisplayedInSchematics_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mXNumber' stored property
  //····················································································································

  private var mObserversOf_mXNumber = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mXNumber (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mXNumber.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.mXNumber_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mXNumber (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mXNumber.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.mXNumber_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mXNumber_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mXNumber.apply { (_ observer : EBEvent) in
        managedObject.mXNumber_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mXNumber_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mXNumber.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mXNumber_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mYNumber' stored property
  //····················································································································

  private var mObserversOf_mYNumber = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mYNumber (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mYNumber.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.mYNumber_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mYNumber (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mYNumber.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.mYNumber_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mYNumber_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mYNumber.apply { (_ observer : EBEvent) in
        managedObject.mYNumber_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mYNumber_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mYNumber.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mYNumber_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNumberHorizontalAlignment' stored property
  //····················································································································

  private var mObserversOf_mNumberHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNumberHorizontalAlignment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNumberHorizontalAlignment.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.mNumberHorizontalAlignment_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNumberHorizontalAlignment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNumberHorizontalAlignment.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.mNumberHorizontalAlignment_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mNumberHorizontalAlignment_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNumberHorizontalAlignment.apply { (_ observer : EBEvent) in
        managedObject.mNumberHorizontalAlignment_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNumberHorizontalAlignment_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mNumberHorizontalAlignment.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNumberHorizontalAlignment_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPinName' stored property
  //····················································································································

  private var mObserversOf_mPinName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPinName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPinName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v.mPinName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPinName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.mPinName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mPinName_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mPinName.apply { (_ observer : EBEvent) in
        managedObject.mPinName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPinName_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    self.mObserversOf_mPinName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPinName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'pinQualifiedName' transient property
  //····················································································································

  private var mObserversOf_pinQualifiedName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_pinQualifiedName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_pinQualifiedName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.pinQualifiedName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_pinQualifiedName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_pinQualifiedName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.pinQualifiedName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_pinQualifiedName_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_pinQualifiedName.apply { (_ observer : EBEvent) in
        managedObject.pinQualifiedName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_pinQualifiedName_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_pinQualifiedName.apply { (_ observer : EBEvent) in
        managedObject.pinQualifiedName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'descriptor' transient property
  //····················································································································

  private var mObserversOf_descriptor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_descriptor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_descriptor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.descriptor_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_descriptor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_descriptor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v.descriptor_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_descriptor_toElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_descriptor.apply { (_ observer : EBEvent) in
        managedObject.descriptor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_descriptor_fromElementsOfSet (_ inSet : Set<DevicePinInProject>) {
    for managedObject in inSet {
      self.mObserversOf_descriptor.apply { (_ observer : EBEvent) in
        managedObject.descriptor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientObject DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientObject_DevicePinInProject : ReadOnlyObject_DevicePinInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_DevicePinInProject? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_DevicePinInProject?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : DevicePinInProject? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < DevicePinInProject > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : DevicePinInProject? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_DevicePinInProject : ReadOnlyObject_DevicePinInProject {

  //····················································································································
 
  func setProp (_ inValue : DevicePinInProject?) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_DevicePinInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_DevicePinInProject : ReadWriteObject_DevicePinInProject {

  //····················································································································

  private var mModel : ReadWriteObject_DevicePinInProject? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_DevicePinInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : DevicePinInProject?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : DevicePinInProject?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < DevicePinInProject > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : DevicePinInProject? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_DevicePinInProject 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_DevicePinInProject : ReadWriteObject_DevicePinInProject, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : DevicePinInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : DevicePinInProject) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : DevicePinInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : DevicePinInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  //  Init
  //····················································································································

 /* convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [DevicePinInProject] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "DevicePinInProject") as? DevicePinInProject {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  } */

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : DevicePinInProject?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    if let object = inOldValue {
      object.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      object.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : DevicePinInProject?) {
    self.mInternalValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < DevicePinInProject > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : DevicePinInProject?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : DevicePinInProject? { return self.mInternalValue }

  //····················································································································

  func remove (_ object : DevicePinInProject) {
    if object === self.mInternalValue {
      self.mInternalValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : DevicePinInProject) {
    if object !== self.mInternalValue {
      self.mInternalValue = object
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    self.mInternalValue?.setSignatureObserver (observer: observer)
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
