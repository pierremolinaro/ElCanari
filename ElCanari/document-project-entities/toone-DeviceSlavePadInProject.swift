//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_DeviceSlavePadInProject 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_DeviceSlavePadInProject : ReadOnlyAbstractObjectProperty <DeviceSlavePadInProject> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : DeviceSlavePadInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
 //     oldValue.mCenterX_property.removeEBObserversFrom (&self.mObserversOf_mCenterX) // Stored property
      oldValue.mCenterX_property.removeEBObserver (self.mCenterX_property) // Stored property
 //     oldValue.mCenterY_property.removeEBObserversFrom (&self.mObserversOf_mCenterY) // Stored property
      oldValue.mCenterY_property.removeEBObserver (self.mCenterY_property) // Stored property
 //     oldValue.mWidth_property.removeEBObserversFrom (&self.mObserversOf_mWidth) // Stored property
      oldValue.mWidth_property.removeEBObserver (self.mWidth_property) // Stored property
 //     oldValue.mHeight_property.removeEBObserversFrom (&self.mObserversOf_mHeight) // Stored property
      oldValue.mHeight_property.removeEBObserver (self.mHeight_property) // Stored property
 //     oldValue.mHoleWidth_property.removeEBObserversFrom (&self.mObserversOf_mHoleWidth) // Stored property
      oldValue.mHoleWidth_property.removeEBObserver (self.mHoleWidth_property) // Stored property
 //     oldValue.mHoleHeight_property.removeEBObserversFrom (&self.mObserversOf_mHoleHeight) // Stored property
      oldValue.mHoleHeight_property.removeEBObserver (self.mHoleHeight_property) // Stored property
 //     oldValue.mShape_property.removeEBObserversFrom (&self.mObserversOf_mShape) // Stored property
      oldValue.mShape_property.removeEBObserver (self.mShape_property) // Stored property
 //     oldValue.mStyle_property.removeEBObserversFrom (&self.mObserversOf_mStyle) // Stored property
      oldValue.mStyle_property.removeEBObserver (self.mStyle_property) // Stored property
 //     oldValue.descriptor_property.removeEBObserversFrom (&self.mObserversOf_descriptor) // Transient property
      oldValue.descriptor_property.removeEBObserver (self.descriptor_property) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
 //     newValue.mCenterX_property.addEBObserversFrom (&self.mObserversOf_mCenterX) // Stored property
      newValue.mCenterX_property.addEBObserver (self.mCenterX_property) // Stored property
 //     newValue.mCenterY_property.addEBObserversFrom (&self.mObserversOf_mCenterY) // Stored property
      newValue.mCenterY_property.addEBObserver (self.mCenterY_property) // Stored property
 //     newValue.mWidth_property.addEBObserversFrom (&self.mObserversOf_mWidth) // Stored property
      newValue.mWidth_property.addEBObserver (self.mWidth_property) // Stored property
 //     newValue.mHeight_property.addEBObserversFrom (&self.mObserversOf_mHeight) // Stored property
      newValue.mHeight_property.addEBObserver (self.mHeight_property) // Stored property
 //     newValue.mHoleWidth_property.addEBObserversFrom (&self.mObserversOf_mHoleWidth) // Stored property
      newValue.mHoleWidth_property.addEBObserver (self.mHoleWidth_property) // Stored property
 //     newValue.mHoleHeight_property.addEBObserversFrom (&self.mObserversOf_mHoleHeight) // Stored property
      newValue.mHoleHeight_property.addEBObserver (self.mHoleHeight_property) // Stored property
 //     newValue.mShape_property.addEBObserversFrom (&self.mObserversOf_mShape) // Stored property
      newValue.mShape_property.addEBObserver (self.mShape_property) // Stored property
 //     newValue.mStyle_property.addEBObserversFrom (&self.mObserversOf_mStyle) // Stored property
      newValue.mStyle_property.addEBObserver (self.mStyle_property) // Stored property
  //    newValue.descriptor_property.addEBObserversFrom (&self.mObserversOf_descriptor) // Transient property
      newValue.descriptor_property.addEBObserver (self.descriptor_property) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mCenterX' stored property
  //····················································································································

  final let mCenterX_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mCenterX = EBWeakEventSet ()

  //····················································································································

  final var mCenterX_property_selection : EBSelection <Int?> { // §
    return self.mCenterX_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mCenterX (_ inObserver : EBEvent) {
    self.mCenterX_property.addEBObserver (inObserver)
/*    self.mObserversOf_mCenterX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mCenterX_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mCenterX (_ inObserver : EBEvent) {
    self.mCenterX_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mCenterX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mCenterX_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mCenterY' stored property
  //····················································································································

  final let mCenterY_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mCenterY = EBWeakEventSet ()

  //····················································································································

  final var mCenterY_property_selection : EBSelection <Int?> { // §
    return self.mCenterY_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mCenterY (_ inObserver : EBEvent) {
    self.mCenterY_property.addEBObserver (inObserver)
/*    self.mObserversOf_mCenterY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mCenterY_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mCenterY (_ inObserver : EBEvent) {
    self.mCenterY_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mCenterY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mCenterY_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mWidth' stored property
  //····················································································································

  final let mWidth_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mWidth = EBWeakEventSet ()

  //····················································································································

  final var mWidth_property_selection : EBSelection <Int?> { // §
    return self.mWidth_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mWidth (_ inObserver : EBEvent) {
    self.mWidth_property.addEBObserver (inObserver)
/*    self.mObserversOf_mWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mWidth_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mWidth (_ inObserver : EBEvent) {
    self.mWidth_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mWidth_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mHeight' stored property
  //····················································································································

  final let mHeight_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mHeight = EBWeakEventSet ()

  //····················································································································

  final var mHeight_property_selection : EBSelection <Int?> { // §
    return self.mHeight_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mHeight (_ inObserver : EBEvent) {
    self.mHeight_property.addEBObserver (inObserver)
/*    self.mObserversOf_mHeight.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mHeight_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mHeight (_ inObserver : EBEvent) {
    self.mHeight_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mHeight.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mHeight_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mHoleWidth' stored property
  //····················································································································

  final let mHoleWidth_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mHoleWidth = EBWeakEventSet ()

  //····················································································································

  final var mHoleWidth_property_selection : EBSelection <Int?> { // §
    return self.mHoleWidth_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mHoleWidth (_ inObserver : EBEvent) {
    self.mHoleWidth_property.addEBObserver (inObserver)
/*    self.mObserversOf_mHoleWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mHoleWidth_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mHoleWidth (_ inObserver : EBEvent) {
    self.mHoleWidth_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mHoleWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mHoleWidth_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mHoleHeight' stored property
  //····················································································································

  final let mHoleHeight_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mHoleHeight = EBWeakEventSet ()

  //····················································································································

  final var mHoleHeight_property_selection : EBSelection <Int?> { // §
    return self.mHoleHeight_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mHoleHeight (_ inObserver : EBEvent) {
    self.mHoleHeight_property.addEBObserver (inObserver)
/*    self.mObserversOf_mHoleHeight.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mHoleHeight_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mHoleHeight (_ inObserver : EBEvent) {
    self.mHoleHeight_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mHoleHeight.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mHoleHeight_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mShape' stored property
  //····················································································································

  final let mShape_property = EBGenericTransientProperty <PadShape?> ()
//  private final var mObserversOf_mShape = EBWeakEventSet ()

  //····················································································································

  final var mShape_property_selection : EBSelection <PadShape?> { // §
    return self.mShape_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mShape (_ inObserver : EBEvent) {
    self.mShape_property.addEBObserver (inObserver)
/*    self.mObserversOf_mShape.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mShape_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mShape (_ inObserver : EBEvent) {
    self.mShape_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mShape.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mShape_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mStyle' stored property
  //····················································································································

  final let mStyle_property = EBGenericTransientProperty <SlavePadStyle?> ()
//  private final var mObserversOf_mStyle = EBWeakEventSet ()

  //····················································································································

  final var mStyle_property_selection : EBSelection <SlavePadStyle?> { // §
    return self.mStyle_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mStyle (_ inObserver : EBEvent) {
    self.mStyle_property.addEBObserver (inObserver)
/*    self.mObserversOf_mStyle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mStyle_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mStyle (_ inObserver : EBEvent) {
    self.mStyle_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mStyle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mStyle_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'descriptor' transient property
  //····················································································································

  final let descriptor_property = EBGenericTransientProperty <SlavePadDescriptor?> ()
//  private final var mObserversOf_descriptor = EBWeakEventSet ()

  //····················································································································

  final var descriptor_property_selection : EBSelection <SlavePadDescriptor?> {
    return self.descriptor_property.selection
  }

  //····················································································································

  final func addEBObserverOf_descriptor (_ inObserver : EBEvent) {
    self.descriptor_property.addEBObserver (inObserver)
/*    self.mObserversOf_descriptor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.descriptor_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_descriptor (_ inObserver : EBEvent) {
    self.descriptor_property.removeEBObserver (inObserver)
/*    self.mObserversOf_descriptor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.descriptor_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   INIT 
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mCenterX simple stored property
    self.mCenterX_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mCenterX_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mCenterY simple stored property
    self.mCenterY_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mCenterY_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mWidth simple stored property
    self.mWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mHeight simple stored property
    self.mHeight_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mHeight_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mHoleWidth simple stored property
    self.mHoleWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mHoleWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mHoleHeight simple stored property
    self.mHoleHeight_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mHoleHeight_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mShape simple stored property
    self.mShape_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mShape_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mStyle simple stored property
    self.mStyle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mStyle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure descriptor transient property
    self.descriptor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.descriptor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject DeviceSlavePadInProject
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_DeviceSlavePadInProject : ReadOnlyObject_DeviceSlavePadInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_DeviceSlavePadInProject? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_DeviceSlavePadInProject?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : DeviceSlavePadInProject? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < DeviceSlavePadInProject? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : DeviceSlavePadInProject? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_DeviceSlavePadInProject
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_DeviceSlavePadInProject : ReadOnlyObject_DeviceSlavePadInProject {

  //····················································································································
 
  func setProp (_ inValue : DeviceSlavePadInProject?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_DeviceSlavePadInProject
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_DeviceSlavePadInProject : ReadWriteObject_DeviceSlavePadInProject {

  //····················································································································

  private var mModel : ReadWriteObject_DeviceSlavePadInProject? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_DeviceSlavePadInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : DeviceSlavePadInProject?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : DeviceSlavePadInProject?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < DeviceSlavePadInProject? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : DeviceSlavePadInProject? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_DeviceSlavePadInProject 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_DeviceSlavePadInProject : ReadWriteObject_DeviceSlavePadInProject, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : DeviceSlavePadInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : DeviceSlavePadInProject) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : DeviceSlavePadInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : DeviceSlavePadInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : DeviceSlavePadInProject?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < DeviceSlavePadInProject? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : DeviceSlavePadInProject?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : DeviceSlavePadInProject? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

