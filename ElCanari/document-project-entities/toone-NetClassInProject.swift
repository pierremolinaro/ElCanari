//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_NetClassInProject 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_NetClassInProject : ReadOnlyAbstractObjectProperty <NetClassInProject> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : NetClassInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.mNetClassName_property.removeEBObserver (self.mNetClassName_property) // Stored property
    inOldValue?.mNetClassColor_property.removeEBObserver (self.mNetClassColor_property) // Stored property
    inOldValue?.mTrackWidth_property.removeEBObserver (self.mTrackWidth_property) // Stored property
    inOldValue?.mTrackWidthUnit_property.removeEBObserver (self.mTrackWidthUnit_property) // Stored property
    inOldValue?.mViaHoleDiameter_property.removeEBObserver (self.mViaHoleDiameter_property) // Stored property
    inOldValue?.mViaHoleDiameterUnit_property.removeEBObserver (self.mViaHoleDiameterUnit_property) // Stored property
    inOldValue?.mViaPadDiameter_property.removeEBObserver (self.mViaPadDiameter_property) // Stored property
    inOldValue?.mViaPadDiameterUnit_property.removeEBObserver (self.mViaPadDiameterUnit_property) // Stored property
    inOldValue?.mAllowTracksOnFrontSide_property.removeEBObserver (self.mAllowTracksOnFrontSide_property) // Stored property
    inOldValue?.mAllowTracksOnBackSide_property.removeEBObserver (self.mAllowTracksOnBackSide_property) // Stored property
    inOldValue?.trackWidthString_property.removeEBObserver (self.trackWidthString_property) // Transient property
    inOldValue?.viaHoleDiameter_property.removeEBObserver (self.viaHoleDiameter_property) // Transient property
    inOldValue?.viaPadDiameter_property.removeEBObserver (self.viaPadDiameter_property) // Transient property
    inOldValue?.allowTracksOnFrontSideString_property.removeEBObserver (self.allowTracksOnFrontSideString_property) // Transient property
    inOldValue?.allowTracksOnBackSideString_property.removeEBObserver (self.allowTracksOnBackSideString_property) // Transient property
    inOldValue?.canRemove_property.removeEBObserver (self.canRemove_property) // Transient property
    inOldValue?.netUsage_property.removeEBObserver (self.netUsage_property) // Transient property
    inOldValue?.netsDescription_property.removeEBObserver (self.netsDescription_property) // Transient property
    inOldValue?.netWarningCount_property.removeEBObserver (self.netWarningCount_property) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.mNetClassName_property.addEBObserver (self.mNetClassName_property) // Stored property
    self.mInternalValue?.mNetClassColor_property.addEBObserver (self.mNetClassColor_property) // Stored property
    self.mInternalValue?.mTrackWidth_property.addEBObserver (self.mTrackWidth_property) // Stored property
    self.mInternalValue?.mTrackWidthUnit_property.addEBObserver (self.mTrackWidthUnit_property) // Stored property
    self.mInternalValue?.mViaHoleDiameter_property.addEBObserver (self.mViaHoleDiameter_property) // Stored property
    self.mInternalValue?.mViaHoleDiameterUnit_property.addEBObserver (self.mViaHoleDiameterUnit_property) // Stored property
    self.mInternalValue?.mViaPadDiameter_property.addEBObserver (self.mViaPadDiameter_property) // Stored property
    self.mInternalValue?.mViaPadDiameterUnit_property.addEBObserver (self.mViaPadDiameterUnit_property) // Stored property
    self.mInternalValue?.mAllowTracksOnFrontSide_property.addEBObserver (self.mAllowTracksOnFrontSide_property) // Stored property
    self.mInternalValue?.mAllowTracksOnBackSide_property.addEBObserver (self.mAllowTracksOnBackSide_property) // Stored property
    self.mInternalValue?.trackWidthString_property.addEBObserver (self.trackWidthString_property) // Transient property
    self.mInternalValue?.viaHoleDiameter_property.addEBObserver (self.viaHoleDiameter_property) // Transient property
    self.mInternalValue?.viaPadDiameter_property.addEBObserver (self.viaPadDiameter_property) // Transient property
    self.mInternalValue?.allowTracksOnFrontSideString_property.addEBObserver (self.allowTracksOnFrontSideString_property) // Transient property
    self.mInternalValue?.allowTracksOnBackSideString_property.addEBObserver (self.allowTracksOnBackSideString_property) // Transient property
    self.mInternalValue?.canRemove_property.addEBObserver (self.canRemove_property) // Transient property
    self.mInternalValue?.netUsage_property.addEBObserver (self.netUsage_property) // Transient property
    self.mInternalValue?.netsDescription_property.addEBObserver (self.netsDescription_property) // Transient property
    self.mInternalValue?.netWarningCount_property.addEBObserver (self.netWarningCount_property) // Transient property
  }

  //····················································································································
  //   init
  //····················································································································

  override init () {
    super.init ()
    self.mNetClassName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mNetClassName_property.prop ?? .empty }
    self.mNetClassName_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.mNetClassName_property.setProp (inValue) }
    self.mNetClassColor_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mNetClassColor_property.prop ?? .empty }
    self.mNetClassColor_property.mWriteModelFunction = { [weak self] (inValue : NSColor) in self?.mInternalValue?.mNetClassColor_property.setProp (inValue) }
    self.mTrackWidth_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mTrackWidth_property.prop ?? .empty }
    self.mTrackWidth_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mTrackWidth_property.setProp (inValue) }
    self.mTrackWidthUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mTrackWidthUnit_property.prop ?? .empty }
    self.mTrackWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mTrackWidthUnit_property.setProp (inValue) }
    self.mViaHoleDiameter_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mViaHoleDiameter_property.prop ?? .empty }
    self.mViaHoleDiameter_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mViaHoleDiameter_property.setProp (inValue) }
    self.mViaHoleDiameterUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mViaHoleDiameterUnit_property.prop ?? .empty }
    self.mViaHoleDiameterUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mViaHoleDiameterUnit_property.setProp (inValue) }
    self.mViaPadDiameter_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mViaPadDiameter_property.prop ?? .empty }
    self.mViaPadDiameter_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mViaPadDiameter_property.setProp (inValue) }
    self.mViaPadDiameterUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mViaPadDiameterUnit_property.prop ?? .empty }
    self.mViaPadDiameterUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mViaPadDiameterUnit_property.setProp (inValue) }
    self.mAllowTracksOnFrontSide_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mAllowTracksOnFrontSide_property.prop ?? .empty }
    self.mAllowTracksOnFrontSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mAllowTracksOnFrontSide_property.setProp (inValue) }
    self.mAllowTracksOnBackSide_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mAllowTracksOnBackSide_property.prop ?? .empty }
    self.mAllowTracksOnBackSide_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mAllowTracksOnBackSide_property.setProp (inValue) }
    self.trackWidthString_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.trackWidthString_property.prop ?? .empty }
    self.viaHoleDiameter_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.viaHoleDiameter_property.prop ?? .empty }
    self.viaPadDiameter_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.viaPadDiameter_property.prop ?? .empty }
    self.allowTracksOnFrontSideString_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.allowTracksOnFrontSideString_property.prop ?? .empty }
    self.allowTracksOnBackSideString_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.allowTracksOnBackSideString_property.prop ?? .empty }
    self.canRemove_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.canRemove_property.prop ?? .empty }
    self.netUsage_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.netUsage_property.prop ?? .empty }
    self.netsDescription_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.netsDescription_property.prop ?? .empty }
    self.netWarningCount_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.netWarningCount_property.prop ?? .empty }
  }

  //····················································································································
  //   Proxy of 'mNetClassName' stored property
  //····················································································································

  let mNetClassName_property = EBPropertyProxy_String ()

  var mNetClassName_property_selection : EBSelection <String> {
    switch (self.mNetClassName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mNetClassColor' stored property
  //····················································································································

  let mNetClassColor_property = EBPropertyProxy_NSColor ()

  var mNetClassColor_property_selection : EBSelection <NSColor> {
    switch (self.mNetClassColor_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mTrackWidth' stored property
  //····················································································································

  let mTrackWidth_property = EBPropertyProxy_Int ()

  var mTrackWidth_property_selection : EBSelection <Int> {
    switch (self.mTrackWidth_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mTrackWidthUnit' stored property
  //····················································································································

  let mTrackWidthUnit_property = EBPropertyProxy_Int ()

  var mTrackWidthUnit_property_selection : EBSelection <Int> {
    switch (self.mTrackWidthUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mViaHoleDiameter' stored property
  //····················································································································

  let mViaHoleDiameter_property = EBPropertyProxy_Int ()

  var mViaHoleDiameter_property_selection : EBSelection <Int> {
    switch (self.mViaHoleDiameter_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mViaHoleDiameterUnit' stored property
  //····················································································································

  let mViaHoleDiameterUnit_property = EBPropertyProxy_Int ()

  var mViaHoleDiameterUnit_property_selection : EBSelection <Int> {
    switch (self.mViaHoleDiameterUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mViaPadDiameter' stored property
  //····················································································································

  let mViaPadDiameter_property = EBPropertyProxy_Int ()

  var mViaPadDiameter_property_selection : EBSelection <Int> {
    switch (self.mViaPadDiameter_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mViaPadDiameterUnit' stored property
  //····················································································································

  let mViaPadDiameterUnit_property = EBPropertyProxy_Int ()

  var mViaPadDiameterUnit_property_selection : EBSelection <Int> {
    switch (self.mViaPadDiameterUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mAllowTracksOnFrontSide' stored property
  //····················································································································

  let mAllowTracksOnFrontSide_property = EBPropertyProxy_Bool ()

  var mAllowTracksOnFrontSide_property_selection : EBSelection <Bool> {
    switch (self.mAllowTracksOnFrontSide_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mAllowTracksOnBackSide' stored property
  //····················································································································

  let mAllowTracksOnBackSide_property = EBPropertyProxy_Bool ()

  var mAllowTracksOnBackSide_property_selection : EBSelection <Bool> {
    switch (self.mAllowTracksOnBackSide_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'trackWidthString' transient property
  //····················································································································

  let trackWidthString_property = EBTransientProperty_String ()

  var trackWidthString_property_selection : EBSelection <String> {
    switch (self.trackWidthString_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'viaHoleDiameter' transient property
  //····················································································································

  let viaHoleDiameter_property = EBTransientProperty_String ()

  var viaHoleDiameter_property_selection : EBSelection <String> {
    switch (self.viaHoleDiameter_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'viaPadDiameter' transient property
  //····················································································································

  let viaPadDiameter_property = EBTransientProperty_String ()

  var viaPadDiameter_property_selection : EBSelection <String> {
    switch (self.viaPadDiameter_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'allowTracksOnFrontSideString' transient property
  //····················································································································

  let allowTracksOnFrontSideString_property = EBTransientProperty_String ()

  var allowTracksOnFrontSideString_property_selection : EBSelection <String> {
    switch (self.allowTracksOnFrontSideString_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'allowTracksOnBackSideString' transient property
  //····················································································································

  let allowTracksOnBackSideString_property = EBTransientProperty_String ()

  var allowTracksOnBackSideString_property_selection : EBSelection <String> {
    switch (self.allowTracksOnBackSideString_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'canRemove' transient property
  //····················································································································

  let canRemove_property = EBTransientProperty_Bool ()

  var canRemove_property_selection : EBSelection <Bool> {
    switch (self.canRemove_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'netUsage' transient property
  //····················································································································

  let netUsage_property = EBTransientProperty_String ()

  var netUsage_property_selection : EBSelection <String> {
    switch (self.netUsage_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'netsDescription' transient property
  //····················································································································

  let netsDescription_property = EBTransientProperty_NetInfoArray ()

  var netsDescription_property_selection : EBSelection <NetInfoArray> {
    switch (self.netsDescription_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'netWarningCount' transient property
  //····················································································································

  let netWarningCount_property = EBTransientProperty_Int ()

  var netWarningCount_property_selection : EBSelection <Int> {
    switch (self.netWarningCount_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observable toMany property: mNets
  //····················································································································

  private var mObserversOf_mNets = EBWeakEventSet ()

  //····················································································································

  var mNets_property_selection : EBSelection <[NetInProject]> {
    if let model = self.propval {
      switch (model.mNets_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mNets (_ inObserver : EBEvent) {
    self.mObserversOf_mNets.insert (inObserver)
    if let object = self.propval {
      object.mNets_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNets (_ inObserver : EBEvent) {
    self.mObserversOf_mNets.remove (inObserver)
    if let object = self.propval {
      object.mNets_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    TransientObject NetClassInProject
//----------------------------------------------------------------------------------------------------------------------

class TransientObject_NetClassInProject : ReadOnlyObject_NetClassInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_NetClassInProject? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_NetClassInProject?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : NetClassInProject? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < NetClassInProject? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : NetClassInProject? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_NetClassInProject
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_NetClassInProject : ReadOnlyObject_NetClassInProject {

  //····················································································································
 
  func setProp (_ inValue : NetClassInProject?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_NetClassInProject
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_NetClassInProject : ReadWriteObject_NetClassInProject {

  //····················································································································

  private var mModel : ReadWriteObject_NetClassInProject? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_NetClassInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : NetClassInProject?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : NetClassInProject?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < NetClassInProject? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : NetClassInProject? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_NetClassInProject 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_NetClassInProject : ReadWriteObject_NetClassInProject, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : NetClassInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : NetClassInProject) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : NetClassInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : NetClassInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : NetClassInProject?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < NetClassInProject? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : NetClassInProject?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : NetClassInProject? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

