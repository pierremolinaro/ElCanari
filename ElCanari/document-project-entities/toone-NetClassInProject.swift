//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_NetClassInProject 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_NetClassInProject : ReadOnlyAbstractObjectProperty <NetClassInProject> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : NetClassInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
 //     oldValue.mNetClassName_property.removeEBObserversFrom (&self.mObserversOf_mNetClassName) // Stored property
      oldValue.mNetClassName_property.removeEBObserver (self.mNetClassName_property) // Stored property
 //     oldValue.mNetClassColor_property.removeEBObserversFrom (&self.mObserversOf_mNetClassColor) // Stored property
      oldValue.mNetClassColor_property.removeEBObserver (self.mNetClassColor_property) // Stored property
 //     oldValue.mTrackWidth_property.removeEBObserversFrom (&self.mObserversOf_mTrackWidth) // Stored property
      oldValue.mTrackWidth_property.removeEBObserver (self.mTrackWidth_property) // Stored property
 //     oldValue.mTrackWidthUnit_property.removeEBObserversFrom (&self.mObserversOf_mTrackWidthUnit) // Stored property
      oldValue.mTrackWidthUnit_property.removeEBObserver (self.mTrackWidthUnit_property) // Stored property
 //     oldValue.mViaHoleDiameter_property.removeEBObserversFrom (&self.mObserversOf_mViaHoleDiameter) // Stored property
      oldValue.mViaHoleDiameter_property.removeEBObserver (self.mViaHoleDiameter_property) // Stored property
 //     oldValue.mViaHoleDiameterUnit_property.removeEBObserversFrom (&self.mObserversOf_mViaHoleDiameterUnit) // Stored property
      oldValue.mViaHoleDiameterUnit_property.removeEBObserver (self.mViaHoleDiameterUnit_property) // Stored property
 //     oldValue.mViaPadDiameter_property.removeEBObserversFrom (&self.mObserversOf_mViaPadDiameter) // Stored property
      oldValue.mViaPadDiameter_property.removeEBObserver (self.mViaPadDiameter_property) // Stored property
 //     oldValue.mViaPadDiameterUnit_property.removeEBObserversFrom (&self.mObserversOf_mViaPadDiameterUnit) // Stored property
      oldValue.mViaPadDiameterUnit_property.removeEBObserver (self.mViaPadDiameterUnit_property) // Stored property
 //     oldValue.mAllowTracksOnFrontSide_property.removeEBObserversFrom (&self.mObserversOf_mAllowTracksOnFrontSide) // Stored property
      oldValue.mAllowTracksOnFrontSide_property.removeEBObserver (self.mAllowTracksOnFrontSide_property) // Stored property
 //     oldValue.mAllowTracksOnBackSide_property.removeEBObserversFrom (&self.mObserversOf_mAllowTracksOnBackSide) // Stored property
      oldValue.mAllowTracksOnBackSide_property.removeEBObserver (self.mAllowTracksOnBackSide_property) // Stored property
 //     oldValue.trackWidthString_property.removeEBObserversFrom (&self.mObserversOf_trackWidthString) // Transient property
      oldValue.trackWidthString_property.removeEBObserver (self.trackWidthString_property) // Transient property
 //     oldValue.viaHoleDiameter_property.removeEBObserversFrom (&self.mObserversOf_viaHoleDiameter) // Transient property
      oldValue.viaHoleDiameter_property.removeEBObserver (self.viaHoleDiameter_property) // Transient property
 //     oldValue.viaPadDiameter_property.removeEBObserversFrom (&self.mObserversOf_viaPadDiameter) // Transient property
      oldValue.viaPadDiameter_property.removeEBObserver (self.viaPadDiameter_property) // Transient property
 //     oldValue.allowTracksOnFrontSideString_property.removeEBObserversFrom (&self.mObserversOf_allowTracksOnFrontSideString) // Transient property
      oldValue.allowTracksOnFrontSideString_property.removeEBObserver (self.allowTracksOnFrontSideString_property) // Transient property
 //     oldValue.allowTracksOnBackSideString_property.removeEBObserversFrom (&self.mObserversOf_allowTracksOnBackSideString) // Transient property
      oldValue.allowTracksOnBackSideString_property.removeEBObserver (self.allowTracksOnBackSideString_property) // Transient property
 //     oldValue.canRemove_property.removeEBObserversFrom (&self.mObserversOf_canRemove) // Transient property
      oldValue.canRemove_property.removeEBObserver (self.canRemove_property) // Transient property
 //     oldValue.netUsage_property.removeEBObserversFrom (&self.mObserversOf_netUsage) // Transient property
      oldValue.netUsage_property.removeEBObserver (self.netUsage_property) // Transient property
 //     oldValue.netsDescription_property.removeEBObserversFrom (&self.mObserversOf_netsDescription) // Transient property
      oldValue.netsDescription_property.removeEBObserver (self.netsDescription_property) // Transient property
 //     oldValue.netWarningCount_property.removeEBObserversFrom (&self.mObserversOf_netWarningCount) // Transient property
      oldValue.netWarningCount_property.removeEBObserver (self.netWarningCount_property) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
 //     newValue.mNetClassName_property.addEBObserversFrom (&self.mObserversOf_mNetClassName) // Stored property
      newValue.mNetClassName_property.addEBObserver (self.mNetClassName_property) // Stored property
 //     newValue.mNetClassColor_property.addEBObserversFrom (&self.mObserversOf_mNetClassColor) // Stored property
      newValue.mNetClassColor_property.addEBObserver (self.mNetClassColor_property) // Stored property
 //     newValue.mTrackWidth_property.addEBObserversFrom (&self.mObserversOf_mTrackWidth) // Stored property
      newValue.mTrackWidth_property.addEBObserver (self.mTrackWidth_property) // Stored property
 //     newValue.mTrackWidthUnit_property.addEBObserversFrom (&self.mObserversOf_mTrackWidthUnit) // Stored property
      newValue.mTrackWidthUnit_property.addEBObserver (self.mTrackWidthUnit_property) // Stored property
 //     newValue.mViaHoleDiameter_property.addEBObserversFrom (&self.mObserversOf_mViaHoleDiameter) // Stored property
      newValue.mViaHoleDiameter_property.addEBObserver (self.mViaHoleDiameter_property) // Stored property
 //     newValue.mViaHoleDiameterUnit_property.addEBObserversFrom (&self.mObserversOf_mViaHoleDiameterUnit) // Stored property
      newValue.mViaHoleDiameterUnit_property.addEBObserver (self.mViaHoleDiameterUnit_property) // Stored property
 //     newValue.mViaPadDiameter_property.addEBObserversFrom (&self.mObserversOf_mViaPadDiameter) // Stored property
      newValue.mViaPadDiameter_property.addEBObserver (self.mViaPadDiameter_property) // Stored property
 //     newValue.mViaPadDiameterUnit_property.addEBObserversFrom (&self.mObserversOf_mViaPadDiameterUnit) // Stored property
      newValue.mViaPadDiameterUnit_property.addEBObserver (self.mViaPadDiameterUnit_property) // Stored property
 //     newValue.mAllowTracksOnFrontSide_property.addEBObserversFrom (&self.mObserversOf_mAllowTracksOnFrontSide) // Stored property
      newValue.mAllowTracksOnFrontSide_property.addEBObserver (self.mAllowTracksOnFrontSide_property) // Stored property
 //     newValue.mAllowTracksOnBackSide_property.addEBObserversFrom (&self.mObserversOf_mAllowTracksOnBackSide) // Stored property
      newValue.mAllowTracksOnBackSide_property.addEBObserver (self.mAllowTracksOnBackSide_property) // Stored property
  //    newValue.trackWidthString_property.addEBObserversFrom (&self.mObserversOf_trackWidthString) // Transient property
      newValue.trackWidthString_property.addEBObserver (self.trackWidthString_property) // Transient property
  //    newValue.viaHoleDiameter_property.addEBObserversFrom (&self.mObserversOf_viaHoleDiameter) // Transient property
      newValue.viaHoleDiameter_property.addEBObserver (self.viaHoleDiameter_property) // Transient property
  //    newValue.viaPadDiameter_property.addEBObserversFrom (&self.mObserversOf_viaPadDiameter) // Transient property
      newValue.viaPadDiameter_property.addEBObserver (self.viaPadDiameter_property) // Transient property
  //    newValue.allowTracksOnFrontSideString_property.addEBObserversFrom (&self.mObserversOf_allowTracksOnFrontSideString) // Transient property
      newValue.allowTracksOnFrontSideString_property.addEBObserver (self.allowTracksOnFrontSideString_property) // Transient property
  //    newValue.allowTracksOnBackSideString_property.addEBObserversFrom (&self.mObserversOf_allowTracksOnBackSideString) // Transient property
      newValue.allowTracksOnBackSideString_property.addEBObserver (self.allowTracksOnBackSideString_property) // Transient property
  //    newValue.canRemove_property.addEBObserversFrom (&self.mObserversOf_canRemove) // Transient property
      newValue.canRemove_property.addEBObserver (self.canRemove_property) // Transient property
  //    newValue.netUsage_property.addEBObserversFrom (&self.mObserversOf_netUsage) // Transient property
      newValue.netUsage_property.addEBObserver (self.netUsage_property) // Transient property
  //    newValue.netsDescription_property.addEBObserversFrom (&self.mObserversOf_netsDescription) // Transient property
      newValue.netsDescription_property.addEBObserver (self.netsDescription_property) // Transient property
  //    newValue.netWarningCount_property.addEBObserversFrom (&self.mObserversOf_netWarningCount) // Transient property
      newValue.netWarningCount_property.addEBObserver (self.netWarningCount_property) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mNetClassName' stored property
  //····················································································································

  final let mNetClassName_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_mNetClassName = EBWeakEventSet ()

  //····················································································································

  final var mNetClassName_property_selection : EBSelection <String?> { // §
    return self.mNetClassName_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mNetClassName (_ inObserver : EBEvent) {
    self.mNetClassName_property.addEBObserver (inObserver)
/*    self.mObserversOf_mNetClassName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mNetClassName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mNetClassName (_ inObserver : EBEvent) {
    self.mNetClassName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mNetClassName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mNetClassName_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mNetClassColor' stored property
  //····················································································································

  final let mNetClassColor_property = EBGenericTransientProperty <NSColor?> ()
//  private final var mObserversOf_mNetClassColor = EBWeakEventSet ()

  //····················································································································

  final var mNetClassColor_property_selection : EBSelection <NSColor?> { // §
    return self.mNetClassColor_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mNetClassColor (_ inObserver : EBEvent) {
    self.mNetClassColor_property.addEBObserver (inObserver)
/*    self.mObserversOf_mNetClassColor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mNetClassColor_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mNetClassColor (_ inObserver : EBEvent) {
    self.mNetClassColor_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mNetClassColor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mNetClassColor_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mTrackWidth' stored property
  //····················································································································

  final let mTrackWidth_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mTrackWidth = EBWeakEventSet ()

  //····················································································································

  final var mTrackWidth_property_selection : EBSelection <Int?> { // §
    return self.mTrackWidth_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mTrackWidth (_ inObserver : EBEvent) {
    self.mTrackWidth_property.addEBObserver (inObserver)
/*    self.mObserversOf_mTrackWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mTrackWidth_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mTrackWidth (_ inObserver : EBEvent) {
    self.mTrackWidth_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mTrackWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mTrackWidth_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mTrackWidthUnit' stored property
  //····················································································································

  final let mTrackWidthUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mTrackWidthUnit = EBWeakEventSet ()

  //····················································································································

  final var mTrackWidthUnit_property_selection : EBSelection <Int?> { // §
    return self.mTrackWidthUnit_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mTrackWidthUnit (_ inObserver : EBEvent) {
    self.mTrackWidthUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mTrackWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mTrackWidthUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mTrackWidthUnit (_ inObserver : EBEvent) {
    self.mTrackWidthUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mTrackWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mTrackWidthUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mViaHoleDiameter' stored property
  //····················································································································

  final let mViaHoleDiameter_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mViaHoleDiameter = EBWeakEventSet ()

  //····················································································································

  final var mViaHoleDiameter_property_selection : EBSelection <Int?> { // §
    return self.mViaHoleDiameter_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mViaHoleDiameter (_ inObserver : EBEvent) {
    self.mViaHoleDiameter_property.addEBObserver (inObserver)
/*    self.mObserversOf_mViaHoleDiameter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mViaHoleDiameter_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mViaHoleDiameter (_ inObserver : EBEvent) {
    self.mViaHoleDiameter_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mViaHoleDiameter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mViaHoleDiameter_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mViaHoleDiameterUnit' stored property
  //····················································································································

  final let mViaHoleDiameterUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mViaHoleDiameterUnit = EBWeakEventSet ()

  //····················································································································

  final var mViaHoleDiameterUnit_property_selection : EBSelection <Int?> { // §
    return self.mViaHoleDiameterUnit_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mViaHoleDiameterUnit (_ inObserver : EBEvent) {
    self.mViaHoleDiameterUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mViaHoleDiameterUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mViaHoleDiameterUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mViaHoleDiameterUnit (_ inObserver : EBEvent) {
    self.mViaHoleDiameterUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mViaHoleDiameterUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mViaHoleDiameterUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mViaPadDiameter' stored property
  //····················································································································

  final let mViaPadDiameter_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mViaPadDiameter = EBWeakEventSet ()

  //····················································································································

  final var mViaPadDiameter_property_selection : EBSelection <Int?> { // §
    return self.mViaPadDiameter_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mViaPadDiameter (_ inObserver : EBEvent) {
    self.mViaPadDiameter_property.addEBObserver (inObserver)
/*    self.mObserversOf_mViaPadDiameter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mViaPadDiameter_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mViaPadDiameter (_ inObserver : EBEvent) {
    self.mViaPadDiameter_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mViaPadDiameter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mViaPadDiameter_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mViaPadDiameterUnit' stored property
  //····················································································································

  final let mViaPadDiameterUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mViaPadDiameterUnit = EBWeakEventSet ()

  //····················································································································

  final var mViaPadDiameterUnit_property_selection : EBSelection <Int?> { // §
    return self.mViaPadDiameterUnit_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mViaPadDiameterUnit (_ inObserver : EBEvent) {
    self.mViaPadDiameterUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mViaPadDiameterUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mViaPadDiameterUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mViaPadDiameterUnit (_ inObserver : EBEvent) {
    self.mViaPadDiameterUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mViaPadDiameterUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mViaPadDiameterUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mAllowTracksOnFrontSide' stored property
  //····················································································································

  final let mAllowTracksOnFrontSide_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mAllowTracksOnFrontSide = EBWeakEventSet ()

  //····················································································································

  final var mAllowTracksOnFrontSide_property_selection : EBSelection <Bool?> { // §
    return self.mAllowTracksOnFrontSide_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mAllowTracksOnFrontSide (_ inObserver : EBEvent) {
    self.mAllowTracksOnFrontSide_property.addEBObserver (inObserver)
/*    self.mObserversOf_mAllowTracksOnFrontSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mAllowTracksOnFrontSide_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mAllowTracksOnFrontSide (_ inObserver : EBEvent) {
    self.mAllowTracksOnFrontSide_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mAllowTracksOnFrontSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mAllowTracksOnFrontSide_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mAllowTracksOnBackSide' stored property
  //····················································································································

  final let mAllowTracksOnBackSide_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mAllowTracksOnBackSide = EBWeakEventSet ()

  //····················································································································

  final var mAllowTracksOnBackSide_property_selection : EBSelection <Bool?> { // §
    return self.mAllowTracksOnBackSide_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mAllowTracksOnBackSide (_ inObserver : EBEvent) {
    self.mAllowTracksOnBackSide_property.addEBObserver (inObserver)
/*    self.mObserversOf_mAllowTracksOnBackSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mAllowTracksOnBackSide_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mAllowTracksOnBackSide (_ inObserver : EBEvent) {
    self.mAllowTracksOnBackSide_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mAllowTracksOnBackSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mAllowTracksOnBackSide_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'trackWidthString' transient property
  //····················································································································

  final let trackWidthString_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_trackWidthString = EBWeakEventSet ()

  //····················································································································

  final var trackWidthString_property_selection : EBSelection <String?> {
    return self.trackWidthString_property.selection
  }

  //····················································································································

  final func addEBObserverOf_trackWidthString (_ inObserver : EBEvent) {
    self.trackWidthString_property.addEBObserver (inObserver)
/*    self.mObserversOf_trackWidthString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.trackWidthString_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_trackWidthString (_ inObserver : EBEvent) {
    self.trackWidthString_property.removeEBObserver (inObserver)
/*    self.mObserversOf_trackWidthString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.trackWidthString_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'viaHoleDiameter' transient property
  //····················································································································

  final let viaHoleDiameter_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_viaHoleDiameter = EBWeakEventSet ()

  //····················································································································

  final var viaHoleDiameter_property_selection : EBSelection <String?> {
    return self.viaHoleDiameter_property.selection
  }

  //····················································································································

  final func addEBObserverOf_viaHoleDiameter (_ inObserver : EBEvent) {
    self.viaHoleDiameter_property.addEBObserver (inObserver)
/*    self.mObserversOf_viaHoleDiameter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.viaHoleDiameter_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_viaHoleDiameter (_ inObserver : EBEvent) {
    self.viaHoleDiameter_property.removeEBObserver (inObserver)
/*    self.mObserversOf_viaHoleDiameter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.viaHoleDiameter_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'viaPadDiameter' transient property
  //····················································································································

  final let viaPadDiameter_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_viaPadDiameter = EBWeakEventSet ()

  //····················································································································

  final var viaPadDiameter_property_selection : EBSelection <String?> {
    return self.viaPadDiameter_property.selection
  }

  //····················································································································

  final func addEBObserverOf_viaPadDiameter (_ inObserver : EBEvent) {
    self.viaPadDiameter_property.addEBObserver (inObserver)
/*    self.mObserversOf_viaPadDiameter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.viaPadDiameter_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_viaPadDiameter (_ inObserver : EBEvent) {
    self.viaPadDiameter_property.removeEBObserver (inObserver)
/*    self.mObserversOf_viaPadDiameter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.viaPadDiameter_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'allowTracksOnFrontSideString' transient property
  //····················································································································

  final let allowTracksOnFrontSideString_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_allowTracksOnFrontSideString = EBWeakEventSet ()

  //····················································································································

  final var allowTracksOnFrontSideString_property_selection : EBSelection <String?> {
    return self.allowTracksOnFrontSideString_property.selection
  }

  //····················································································································

  final func addEBObserverOf_allowTracksOnFrontSideString (_ inObserver : EBEvent) {
    self.allowTracksOnFrontSideString_property.addEBObserver (inObserver)
/*    self.mObserversOf_allowTracksOnFrontSideString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.allowTracksOnFrontSideString_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_allowTracksOnFrontSideString (_ inObserver : EBEvent) {
    self.allowTracksOnFrontSideString_property.removeEBObserver (inObserver)
/*    self.mObserversOf_allowTracksOnFrontSideString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.allowTracksOnFrontSideString_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'allowTracksOnBackSideString' transient property
  //····················································································································

  final let allowTracksOnBackSideString_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_allowTracksOnBackSideString = EBWeakEventSet ()

  //····················································································································

  final var allowTracksOnBackSideString_property_selection : EBSelection <String?> {
    return self.allowTracksOnBackSideString_property.selection
  }

  //····················································································································

  final func addEBObserverOf_allowTracksOnBackSideString (_ inObserver : EBEvent) {
    self.allowTracksOnBackSideString_property.addEBObserver (inObserver)
/*    self.mObserversOf_allowTracksOnBackSideString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.allowTracksOnBackSideString_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_allowTracksOnBackSideString (_ inObserver : EBEvent) {
    self.allowTracksOnBackSideString_property.removeEBObserver (inObserver)
/*    self.mObserversOf_allowTracksOnBackSideString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.allowTracksOnBackSideString_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'canRemove' transient property
  //····················································································································

  final let canRemove_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_canRemove = EBWeakEventSet ()

  //····················································································································

  final var canRemove_property_selection : EBSelection <Bool?> {
    return self.canRemove_property.selection
  }

  //····················································································································

  final func addEBObserverOf_canRemove (_ inObserver : EBEvent) {
    self.canRemove_property.addEBObserver (inObserver)
/*    self.mObserversOf_canRemove.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.canRemove_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_canRemove (_ inObserver : EBEvent) {
    self.canRemove_property.removeEBObserver (inObserver)
/*    self.mObserversOf_canRemove.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.canRemove_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'netUsage' transient property
  //····················································································································

  final let netUsage_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_netUsage = EBWeakEventSet ()

  //····················································································································

  final var netUsage_property_selection : EBSelection <String?> {
    return self.netUsage_property.selection
  }

  //····················································································································

  final func addEBObserverOf_netUsage (_ inObserver : EBEvent) {
    self.netUsage_property.addEBObserver (inObserver)
/*    self.mObserversOf_netUsage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netUsage_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_netUsage (_ inObserver : EBEvent) {
    self.netUsage_property.removeEBObserver (inObserver)
/*    self.mObserversOf_netUsage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netUsage_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'netsDescription' transient property
  //····················································································································

  final let netsDescription_property = EBGenericTransientProperty <NetInfoArray?> ()
//  private final var mObserversOf_netsDescription = EBWeakEventSet ()

  //····················································································································

  final var netsDescription_property_selection : EBSelection <NetInfoArray?> {
    return self.netsDescription_property.selection
  }

  //····················································································································

  final func addEBObserverOf_netsDescription (_ inObserver : EBEvent) {
    self.netsDescription_property.addEBObserver (inObserver)
/*    self.mObserversOf_netsDescription.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netsDescription_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_netsDescription (_ inObserver : EBEvent) {
    self.netsDescription_property.removeEBObserver (inObserver)
/*    self.mObserversOf_netsDescription.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netsDescription_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'netWarningCount' transient property
  //····················································································································

  final let netWarningCount_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_netWarningCount = EBWeakEventSet ()

  //····················································································································

  final var netWarningCount_property_selection : EBSelection <Int?> {
    return self.netWarningCount_property.selection
  }

  //····················································································································

  final func addEBObserverOf_netWarningCount (_ inObserver : EBEvent) {
    self.netWarningCount_property.addEBObserver (inObserver)
/*    self.mObserversOf_netWarningCount.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netWarningCount_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_netWarningCount (_ inObserver : EBEvent) {
    self.netWarningCount_property.removeEBObserver (inObserver)
/*    self.mObserversOf_netWarningCount.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netWarningCount_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observable toMany property: mNets
  //····················································································································

  private final var mObserversOf_mNets = EBWeakEventSet ()

  //····················································································································

  final var mNets_property_selection : EBSelection <[NetInProject]> {
    if let model = self.propval {
      switch (model.mNets_property.selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mNets (_ inObserver : EBEvent) {
    self.mObserversOf_mNets.insert (inObserver)
    if let object = self.propval {
      object.mNets_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNets (_ inObserver : EBEvent) {
    self.mObserversOf_mNets.remove (inObserver)
    if let object = self.propval {
      object.mNets_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT 
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mNetClassName simple stored property
    self.mNetClassName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mNetClassName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mNetClassColor simple stored property
    self.mNetClassColor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mNetClassColor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mTrackWidth simple stored property
    self.mTrackWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mTrackWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mTrackWidthUnit simple stored property
    self.mTrackWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mTrackWidthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mViaHoleDiameter simple stored property
    self.mViaHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mViaHoleDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mViaHoleDiameterUnit simple stored property
    self.mViaHoleDiameterUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mViaHoleDiameterUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mViaPadDiameter simple stored property
    self.mViaPadDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mViaPadDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mViaPadDiameterUnit simple stored property
    self.mViaPadDiameterUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mViaPadDiameterUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mAllowTracksOnFrontSide simple stored property
    self.mAllowTracksOnFrontSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mAllowTracksOnFrontSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mAllowTracksOnBackSide simple stored property
    self.mAllowTracksOnBackSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mAllowTracksOnBackSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure trackWidthString transient property
    self.trackWidthString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.trackWidthString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure viaHoleDiameter transient property
    self.viaHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.viaHoleDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure viaPadDiameter transient property
    self.viaPadDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.viaPadDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure allowTracksOnFrontSideString transient property
    self.allowTracksOnFrontSideString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.allowTracksOnFrontSideString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure allowTracksOnBackSideString transient property
    self.allowTracksOnBackSideString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.allowTracksOnBackSideString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure canRemove transient property
    self.canRemove_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.canRemove_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netUsage transient property
    self.netUsage_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.netUsage_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netsDescription transient property
    self.netsDescription_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.netsDescription_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netWarningCount transient property
    self.netWarningCount_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.netWarningCount_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject NetClassInProject
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_NetClassInProject : ReadOnlyObject_NetClassInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_NetClassInProject? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_NetClassInProject?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : NetClassInProject? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < NetClassInProject? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : NetClassInProject? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_NetClassInProject
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_NetClassInProject : ReadOnlyObject_NetClassInProject {

  //····················································································································
 
  func setProp (_ inValue : NetClassInProject?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_NetClassInProject
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_NetClassInProject : ReadWriteObject_NetClassInProject {

  //····················································································································

  private var mModel : ReadWriteObject_NetClassInProject? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_NetClassInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : NetClassInProject?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : NetClassInProject?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < NetClassInProject? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : NetClassInProject? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_NetClassInProject 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_NetClassInProject : ReadWriteObject_NetClassInProject, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : NetClassInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : NetClassInProject) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : NetClassInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : NetClassInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : NetClassInProject?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < NetClassInProject? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : NetClassInProject?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : NetClassInProject? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

