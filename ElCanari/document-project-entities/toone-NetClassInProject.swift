//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_NetClassInProject 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_NetClassInProject : ReadOnlyAbstractObjectProperty <NetClassInProject> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : NetClassInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.mNetClassName_property.removeEBObserversFrom (&self.mObserversOf_mNetClassName) // Stored property
    inOldValue?.mNetClassColor_property.removeEBObserversFrom (&self.mObserversOf_mNetClassColor) // Stored property
    inOldValue?.mTrackWidth_property.removeEBObserversFrom (&self.mObserversOf_mTrackWidth) // Stored property
    inOldValue?.mTrackWidthUnit_property.removeEBObserversFrom (&self.mObserversOf_mTrackWidthUnit) // Stored property
    inOldValue?.mViaHoleDiameter_property.removeEBObserversFrom (&self.mObserversOf_mViaHoleDiameter) // Stored property
    inOldValue?.mViaHoleDiameterUnit_property.removeEBObserversFrom (&self.mObserversOf_mViaHoleDiameterUnit) // Stored property
    inOldValue?.mViaPadDiameter_property.removeEBObserversFrom (&self.mObserversOf_mViaPadDiameter) // Stored property
    inOldValue?.mViaPadDiameterUnit_property.removeEBObserversFrom (&self.mObserversOf_mViaPadDiameterUnit) // Stored property
    inOldValue?.mAllowTracksOnFrontSide_property.removeEBObserversFrom (&self.mObserversOf_mAllowTracksOnFrontSide) // Stored property
    inOldValue?.mAllowTracksOnBackSide_property.removeEBObserversFrom (&self.mObserversOf_mAllowTracksOnBackSide) // Stored property
    inOldValue?.trackWidthString_property.removeEBObserversFrom (&self.mObserversOf_trackWidthString) // Transient property
    inOldValue?.viaHoleDiameter_property.removeEBObserversFrom (&self.mObserversOf_viaHoleDiameter) // Transient property
    inOldValue?.viaPadDiameter_property.removeEBObserversFrom (&self.mObserversOf_viaPadDiameter) // Transient property
    inOldValue?.allowTracksOnFrontSideString_property.removeEBObserversFrom (&self.mObserversOf_allowTracksOnFrontSideString) // Transient property
    inOldValue?.allowTracksOnBackSideString_property.removeEBObserversFrom (&self.mObserversOf_allowTracksOnBackSideString) // Transient property
    inOldValue?.canRemove_property.removeEBObserversFrom (&self.mObserversOf_canRemove) // Transient property
    inOldValue?.netUsage_property.removeEBObserversFrom (&self.mObserversOf_netUsage) // Transient property
    inOldValue?.netsDescription_property.removeEBObserversFrom (&self.mObserversOf_netsDescription) // Transient property
    inOldValue?.netWarningCount_property.removeEBObserversFrom (&self.mObserversOf_netWarningCount) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.mNetClassName_property.addEBObserversFrom (&self.mObserversOf_mNetClassName) // Stored property
    self.mInternalValue?.mNetClassColor_property.addEBObserversFrom (&self.mObserversOf_mNetClassColor) // Stored property
    self.mInternalValue?.mTrackWidth_property.addEBObserversFrom (&self.mObserversOf_mTrackWidth) // Stored property
    self.mInternalValue?.mTrackWidthUnit_property.addEBObserversFrom (&self.mObserversOf_mTrackWidthUnit) // Stored property
    self.mInternalValue?.mViaHoleDiameter_property.addEBObserversFrom (&self.mObserversOf_mViaHoleDiameter) // Stored property
    self.mInternalValue?.mViaHoleDiameterUnit_property.addEBObserversFrom (&self.mObserversOf_mViaHoleDiameterUnit) // Stored property
    self.mInternalValue?.mViaPadDiameter_property.addEBObserversFrom (&self.mObserversOf_mViaPadDiameter) // Stored property
    self.mInternalValue?.mViaPadDiameterUnit_property.addEBObserversFrom (&self.mObserversOf_mViaPadDiameterUnit) // Stored property
    self.mInternalValue?.mAllowTracksOnFrontSide_property.addEBObserversFrom (&self.mObserversOf_mAllowTracksOnFrontSide) // Stored property
    self.mInternalValue?.mAllowTracksOnBackSide_property.addEBObserversFrom (&self.mObserversOf_mAllowTracksOnBackSide) // Stored property
    self.mInternalValue?.trackWidthString_property.addEBObserversFrom (&self.mObserversOf_trackWidthString) // Transient property
    self.mInternalValue?.viaHoleDiameter_property.addEBObserversFrom (&self.mObserversOf_viaHoleDiameter) // Transient property
    self.mInternalValue?.viaPadDiameter_property.addEBObserversFrom (&self.mObserversOf_viaPadDiameter) // Transient property
    self.mInternalValue?.allowTracksOnFrontSideString_property.addEBObserversFrom (&self.mObserversOf_allowTracksOnFrontSideString) // Transient property
    self.mInternalValue?.allowTracksOnBackSideString_property.addEBObserversFrom (&self.mObserversOf_allowTracksOnBackSideString) // Transient property
    self.mInternalValue?.canRemove_property.addEBObserversFrom (&self.mObserversOf_canRemove) // Transient property
    self.mInternalValue?.netUsage_property.addEBObserversFrom (&self.mObserversOf_netUsage) // Transient property
    self.mInternalValue?.netsDescription_property.addEBObserversFrom (&self.mObserversOf_netsDescription) // Transient property
    self.mInternalValue?.netWarningCount_property.addEBObserversFrom (&self.mObserversOf_netWarningCount) // Transient property
  }

  //····················································································································
  //   Observers of 'mNetClassName' stored property
  //····················································································································

  private var mObserversOf_mNetClassName = EBWeakEventSet ()

  //····················································································································

  var mNetClassName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mNetClassName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mNetClassName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNetClassName.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mNetClassName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetClassName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNetClassName.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mNetClassName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mNetClassName_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNetClassName.apply { (_ observer : EBEvent) in
        managedObject.mNetClassName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNetClassName_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mNetClassName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNetClassName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNetClassColor' stored property
  //····················································································································

  private var mObserversOf_mNetClassColor = EBWeakEventSet ()

  //····················································································································

  var mNetClassColor_property_selection : EBSelection <NSColor?> {
    if let model = self.propval {
      switch (model.mNetClassColor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mNetClassColor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNetClassColor.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mNetClassColor_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetClassColor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNetClassColor.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mNetClassColor_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mNetClassColor_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNetClassColor.apply { (_ observer : EBEvent) in
        managedObject.mNetClassColor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNetClassColor_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mNetClassColor.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNetClassColor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mTrackWidth' stored property
  //····················································································································

  private var mObserversOf_mTrackWidth = EBWeakEventSet ()

  //····················································································································

  var mTrackWidth_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mTrackWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mTrackWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mTrackWidth.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mTrackWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mTrackWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mTrackWidth.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mTrackWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mTrackWidth_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mTrackWidth.apply { (_ observer : EBEvent) in
        managedObject.mTrackWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mTrackWidth_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mTrackWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mTrackWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mTrackWidthUnit' stored property
  //····················································································································

  private var mObserversOf_mTrackWidthUnit = EBWeakEventSet ()

  //····················································································································

  var mTrackWidthUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mTrackWidthUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mTrackWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mTrackWidthUnit.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mTrackWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mTrackWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mTrackWidthUnit.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mTrackWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mTrackWidthUnit_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mTrackWidthUnit.apply { (_ observer : EBEvent) in
        managedObject.mTrackWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mTrackWidthUnit_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mTrackWidthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mTrackWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mViaHoleDiameter' stored property
  //····················································································································

  private var mObserversOf_mViaHoleDiameter = EBWeakEventSet ()

  //····················································································································

  var mViaHoleDiameter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mViaHoleDiameter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mViaHoleDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mViaHoleDiameter.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mViaHoleDiameter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mViaHoleDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mViaHoleDiameter.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mViaHoleDiameter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mViaHoleDiameter_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mViaHoleDiameter.apply { (_ observer : EBEvent) in
        managedObject.mViaHoleDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mViaHoleDiameter_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mViaHoleDiameter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mViaHoleDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mViaHoleDiameterUnit' stored property
  //····················································································································

  private var mObserversOf_mViaHoleDiameterUnit = EBWeakEventSet ()

  //····················································································································

  var mViaHoleDiameterUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mViaHoleDiameterUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mViaHoleDiameterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mViaHoleDiameterUnit.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mViaHoleDiameterUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mViaHoleDiameterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mViaHoleDiameterUnit.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mViaHoleDiameterUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mViaHoleDiameterUnit_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mViaHoleDiameterUnit.apply { (_ observer : EBEvent) in
        managedObject.mViaHoleDiameterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mViaHoleDiameterUnit_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mViaHoleDiameterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mViaHoleDiameterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mViaPadDiameter' stored property
  //····················································································································

  private var mObserversOf_mViaPadDiameter = EBWeakEventSet ()

  //····················································································································

  var mViaPadDiameter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mViaPadDiameter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mViaPadDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mViaPadDiameter.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mViaPadDiameter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mViaPadDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mViaPadDiameter.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mViaPadDiameter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mViaPadDiameter_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mViaPadDiameter.apply { (_ observer : EBEvent) in
        managedObject.mViaPadDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mViaPadDiameter_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mViaPadDiameter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mViaPadDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mViaPadDiameterUnit' stored property
  //····················································································································

  private var mObserversOf_mViaPadDiameterUnit = EBWeakEventSet ()

  //····················································································································

  var mViaPadDiameterUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mViaPadDiameterUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mViaPadDiameterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mViaPadDiameterUnit.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mViaPadDiameterUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mViaPadDiameterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mViaPadDiameterUnit.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mViaPadDiameterUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mViaPadDiameterUnit_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mViaPadDiameterUnit.apply { (_ observer : EBEvent) in
        managedObject.mViaPadDiameterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mViaPadDiameterUnit_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mViaPadDiameterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mViaPadDiameterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mAllowTracksOnFrontSide' stored property
  //····················································································································

  private var mObserversOf_mAllowTracksOnFrontSide = EBWeakEventSet ()

  //····················································································································

  var mAllowTracksOnFrontSide_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mAllowTracksOnFrontSide_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mAllowTracksOnFrontSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mAllowTracksOnFrontSide.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mAllowTracksOnFrontSide_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mAllowTracksOnFrontSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mAllowTracksOnFrontSide.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mAllowTracksOnFrontSide_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mAllowTracksOnFrontSide_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mAllowTracksOnFrontSide.apply { (_ observer : EBEvent) in
        managedObject.mAllowTracksOnFrontSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mAllowTracksOnFrontSide_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mAllowTracksOnFrontSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mAllowTracksOnFrontSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mAllowTracksOnBackSide' stored property
  //····················································································································

  private var mObserversOf_mAllowTracksOnBackSide = EBWeakEventSet ()

  //····················································································································

  var mAllowTracksOnBackSide_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mAllowTracksOnBackSide_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mAllowTracksOnBackSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mAllowTracksOnBackSide.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mAllowTracksOnBackSide_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mAllowTracksOnBackSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mAllowTracksOnBackSide.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mAllowTracksOnBackSide_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mAllowTracksOnBackSide_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mAllowTracksOnBackSide.apply { (_ observer : EBEvent) in
        managedObject.mAllowTracksOnBackSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mAllowTracksOnBackSide_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mAllowTracksOnBackSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mAllowTracksOnBackSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'trackWidthString' transient property
  //····················································································································

  private var mObserversOf_trackWidthString = EBWeakEventSet ()

  //····················································································································

  var trackWidthString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.trackWidthString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_trackWidthString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_trackWidthString.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.trackWidthString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_trackWidthString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_trackWidthString.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.trackWidthString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_trackWidthString_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_trackWidthString.apply { (_ observer : EBEvent) in
        managedObject.trackWidthString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_trackWidthString_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_trackWidthString.apply { (_ observer : EBEvent) in
        managedObject.trackWidthString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaHoleDiameter' transient property
  //····················································································································

  private var mObserversOf_viaHoleDiameter = EBWeakEventSet ()

  //····················································································································

  var viaHoleDiameter_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.viaHoleDiameter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_viaHoleDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_viaHoleDiameter.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.viaHoleDiameter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaHoleDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_viaHoleDiameter.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.viaHoleDiameter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_viaHoleDiameter_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_viaHoleDiameter.apply { (_ observer : EBEvent) in
        managedObject.viaHoleDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaHoleDiameter_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_viaHoleDiameter.apply { (_ observer : EBEvent) in
        managedObject.viaHoleDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaPadDiameter' transient property
  //····················································································································

  private var mObserversOf_viaPadDiameter = EBWeakEventSet ()

  //····················································································································

  var viaPadDiameter_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.viaPadDiameter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_viaPadDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_viaPadDiameter.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.viaPadDiameter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaPadDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_viaPadDiameter.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.viaPadDiameter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_viaPadDiameter_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_viaPadDiameter.apply { (_ observer : EBEvent) in
        managedObject.viaPadDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaPadDiameter_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_viaPadDiameter.apply { (_ observer : EBEvent) in
        managedObject.viaPadDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'allowTracksOnFrontSideString' transient property
  //····················································································································

  private var mObserversOf_allowTracksOnFrontSideString = EBWeakEventSet ()

  //····················································································································

  var allowTracksOnFrontSideString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.allowTracksOnFrontSideString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_allowTracksOnFrontSideString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_allowTracksOnFrontSideString.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.allowTracksOnFrontSideString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_allowTracksOnFrontSideString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_allowTracksOnFrontSideString.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.allowTracksOnFrontSideString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_allowTracksOnFrontSideString_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_allowTracksOnFrontSideString.apply { (_ observer : EBEvent) in
        managedObject.allowTracksOnFrontSideString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_allowTracksOnFrontSideString_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_allowTracksOnFrontSideString.apply { (_ observer : EBEvent) in
        managedObject.allowTracksOnFrontSideString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'allowTracksOnBackSideString' transient property
  //····················································································································

  private var mObserversOf_allowTracksOnBackSideString = EBWeakEventSet ()

  //····················································································································

  var allowTracksOnBackSideString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.allowTracksOnBackSideString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_allowTracksOnBackSideString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_allowTracksOnBackSideString.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.allowTracksOnBackSideString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_allowTracksOnBackSideString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_allowTracksOnBackSideString.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.allowTracksOnBackSideString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_allowTracksOnBackSideString_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_allowTracksOnBackSideString.apply { (_ observer : EBEvent) in
        managedObject.allowTracksOnBackSideString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_allowTracksOnBackSideString_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_allowTracksOnBackSideString.apply { (_ observer : EBEvent) in
        managedObject.allowTracksOnBackSideString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'canRemove' transient property
  //····················································································································

  private var mObserversOf_canRemove = EBWeakEventSet ()

  //····················································································································

  var canRemove_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.canRemove_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_canRemove (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_canRemove.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.canRemove_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_canRemove (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_canRemove.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.canRemove_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_canRemove_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_canRemove.apply { (_ observer : EBEvent) in
        managedObject.canRemove_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_canRemove_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_canRemove.apply { (_ observer : EBEvent) in
        managedObject.canRemove_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netUsage' transient property
  //····················································································································

  private var mObserversOf_netUsage = EBWeakEventSet ()

  //····················································································································

  var netUsage_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.netUsage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_netUsage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netUsage.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netUsage_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_netUsage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netUsage.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netUsage_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_netUsage_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_netUsage.apply { (_ observer : EBEvent) in
        managedObject.netUsage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netUsage_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_netUsage.apply { (_ observer : EBEvent) in
        managedObject.netUsage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netsDescription' transient property
  //····················································································································

  private var mObserversOf_netsDescription = EBWeakEventSet ()

  //····················································································································

  var netsDescription_property_selection : EBSelection <NetInfoArray?> {
    if let model = self.propval {
      switch (model.netsDescription_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_netsDescription (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netsDescription.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netsDescription_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_netsDescription (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netsDescription.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netsDescription_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_netsDescription_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_netsDescription.apply { (_ observer : EBEvent) in
        managedObject.netsDescription_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netsDescription_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_netsDescription.apply { (_ observer : EBEvent) in
        managedObject.netsDescription_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netWarningCount' transient property
  //····················································································································

  private var mObserversOf_netWarningCount = EBWeakEventSet ()

  //····················································································································

  var netWarningCount_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.netWarningCount_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_netWarningCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netWarningCount.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netWarningCount_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_netWarningCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netWarningCount.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netWarningCount_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_netWarningCount_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_netWarningCount.apply { (_ observer : EBEvent) in
        managedObject.netWarningCount_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netWarningCount_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_netWarningCount.apply { (_ observer : EBEvent) in
        managedObject.netWarningCount_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observable toMany property: mNets
  //····················································································································

  private var mObserversOf_mNets = EBWeakEventSet ()

  //····················································································································

  var mNets_property_selection : EBSelection <[NetInProject]> {
    if let model = self.propval {
      switch (model.mNets_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mNets (_ inObserver : EBEvent) {
    self.mObserversOf_mNets.insert (inObserver)
    if let object = self.propval {
      object.mNets_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNets (_ inObserver : EBEvent) {
    self.mObserversOf_mNets.remove (inObserver)
    if let object = self.propval {
      object.mNets_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientObject NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientObject_NetClassInProject : ReadOnlyObject_NetClassInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_NetClassInProject? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_NetClassInProject?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : NetClassInProject? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < NetClassInProject? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : NetClassInProject? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_NetClassInProject : ReadOnlyObject_NetClassInProject {

  //····················································································································
 
  func setProp (_ inValue : NetClassInProject?) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_NetClassInProject : ReadWriteObject_NetClassInProject {

  //····················································································································

  private var mModel : ReadWriteObject_NetClassInProject? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_NetClassInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : NetClassInProject?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : NetClassInProject?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < NetClassInProject? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : NetClassInProject? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_NetClassInProject 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_NetClassInProject : ReadWriteObject_NetClassInProject, EBSignatureObserverProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : NetClassInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : NetClassInProject) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : NetClassInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : NetClassInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : NetClassInProject?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : NetClassInProject?) {
    self.mInternalValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < NetClassInProject? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : NetClassInProject?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : NetClassInProject? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

