//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_mX : class {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_mY : class {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_mCPX1 : class {
  var mCPX1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_mCPY1 : class {
  var mCPY1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_mCPX2 : class {
  var mCPX2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_mCPY2 : class {
  var mCPY2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_mShape : class {
  var mShape : BorderCurveShape { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_p1Xstring : class {
  var p1Xstring : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_p1Ystring : class {
  var p1Ystring : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_p2Xstring : class {
  var p2Xstring : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_p2Ystring : class {
  var p2Ystring : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_cp1Xstring : class {
  var cp1Xstring : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_cp1Ystring : class {
  var cp1Ystring : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_cp2Xstring : class {
  var cp2Xstring : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_cp2Ystring : class {
  var cp2Ystring : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_descriptor : class {
  var descriptor : BorderCurveDescriptor? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_isLine : class {
  var isLine : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BorderCurve_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class BorderCurve : EBGraphicManagedObject,
         BorderCurve_mX,
         BorderCurve_mY,
         BorderCurve_mCPX1,
         BorderCurve_mCPY1,
         BorderCurve_mCPX2,
         BorderCurve_mCPY2,
         BorderCurve_mShape,
         BorderCurve_p1Xstring,
         BorderCurve_p1Ystring,
         BorderCurve_p2Xstring,
         BorderCurve_p2Ystring,
         BorderCurve_cp1Xstring,
         BorderCurve_cp1Ystring,
         BorderCurve_cp2Xstring,
         BorderCurve_cp2Ystring,
         BorderCurve_descriptor,
         BorderCurve_objectDisplay,
         BorderCurve_isLine,
         BorderCurve_selectionDisplay {

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  let mX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································

  var mX_property_selection : EBSelection <Int> { return self.mX_property.prop }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  let mY_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································

  var mY_property_selection : EBSelection <Int> { return self.mY_property.prop }

  //····················································································································
  //   Atomic property: mCPX1
  //····················································································································

  let mCPX1_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mCPX1 : Int {
    get { return self.mCPX1_property.propval }
    set { self.mCPX1_property.setProp (newValue) }
  }

  //····················································································································

  var mCPX1_property_selection : EBSelection <Int> { return self.mCPX1_property.prop }

  //····················································································································
  //   Atomic property: mCPY1
  //····················································································································

  let mCPY1_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mCPY1 : Int {
    get { return self.mCPY1_property.propval }
    set { self.mCPY1_property.setProp (newValue) }
  }

  //····················································································································

  var mCPY1_property_selection : EBSelection <Int> { return self.mCPY1_property.prop }

  //····················································································································
  //   Atomic property: mCPX2
  //····················································································································

  let mCPX2_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mCPX2 : Int {
    get { return self.mCPX2_property.propval }
    set { self.mCPX2_property.setProp (newValue) }
  }

  //····················································································································

  var mCPX2_property_selection : EBSelection <Int> { return self.mCPX2_property.prop }

  //····················································································································
  //   Atomic property: mCPY2
  //····················································································································

  let mCPY2_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mCPY2 : Int {
    get { return self.mCPY2_property.propval }
    set { self.mCPY2_property.setProp (newValue) }
  }

  //····················································································································

  var mCPY2_property_selection : EBSelection <Int> { return self.mCPY2_property.prop }

  //····················································································································
  //   Atomic property: mShape
  //····················································································································

  let mShape_property = EBStoredProperty_BorderCurveShape (defaultValue: BorderCurveShape.line)

  //····················································································································

  var mShape : BorderCurveShape {
    get { return self.mShape_property.propval }
    set { self.mShape_property.setProp (newValue) }
  }

  //····················································································································

  var mShape_property_selection : EBSelection <BorderCurveShape> { return self.mShape_property.prop }

  //····················································································································
  //   To one property: mRoot
  //····················································································································

   let mRoot_property = StoredObject_ProjectRoot (usedForSignature: false)

  //····················································································································

  var mRoot_property_selection : EBSelection <ProjectRoot?> {
    return .single (self.mRoot_property.propval)
  }

  //····················································································································

  var mRoot : ProjectRoot? {
    get {
      return self.mRoot_property.propval
    }
    set {
      if self.mRoot_property.propval != nil {
        self.mRoot_property.setProp (nil)
      }
      if newValue != nil {
        self.mRoot_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mRoot_none : StoredObject_ProjectRoot { return self.mRoot_property }

  //····················································································································

  var mRoot_none_selection : EBSelection <Bool> {
    return .single (self.mRoot_property.propval == nil)
  }

  //····················································································································
  //   To one property: mNext
  //····················································································································

   let mNext_property = StoredObject_BorderCurve (usedForSignature: false)

  //····················································································································

  var mNext_property_selection : EBSelection <BorderCurve?> {
    return .single (self.mNext_property.propval)
  }

  //····················································································································

  var mNext : BorderCurve? {
    get {
      return self.mNext_property.propval
    }
    set {
      if self.mNext_property.propval != nil {
        self.mNext_property.setProp (nil)
      }
      if newValue != nil {
        self.mNext_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mNext_none : StoredObject_BorderCurve { return self.mNext_property }

  //····················································································································

  var mNext_none_selection : EBSelection <Bool> {
    return .single (self.mNext_property.propval == nil)
  }

  //····················································································································
  //   To one property: mPrevious
  //····················································································································

   let mPrevious_property = StoredObject_BorderCurve (usedForSignature: false)

  //····················································································································

  var mPrevious_property_selection : EBSelection <BorderCurve?> {
    return .single (self.mPrevious_property.propval)
  }

  //····················································································································

  var mPrevious : BorderCurve? {
    get {
      return self.mPrevious_property.propval
    }
    set {
      if self.mPrevious_property.propval != nil {
        self.mPrevious_property.setProp (nil)
      }
      if newValue != nil {
        self.mPrevious_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mPrevious_none : StoredObject_BorderCurve { return self.mPrevious_property }

  //····················································································································

  var mPrevious_none_selection : EBSelection <Bool> {
    return .single (self.mPrevious_property.propval == nil)
  }

  //····················································································································
  //   Transient property: p1Xstring
  //····················································································································

  let p1Xstring_property = EBTransientProperty_String ()

  //····················································································································

  var p1Xstring_property_selection : EBSelection <String> {
    return self.p1Xstring_property.prop
  }

  //····················································································································

  var p1Xstring : String? {
    switch self.p1Xstring_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: p1Ystring
  //····················································································································

  let p1Ystring_property = EBTransientProperty_String ()

  //····················································································································

  var p1Ystring_property_selection : EBSelection <String> {
    return self.p1Ystring_property.prop
  }

  //····················································································································

  var p1Ystring : String? {
    switch self.p1Ystring_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: p2Xstring
  //····················································································································

  let p2Xstring_property = EBTransientProperty_String ()

  //····················································································································

  var p2Xstring_property_selection : EBSelection <String> {
    return self.p2Xstring_property.prop
  }

  //····················································································································

  var p2Xstring : String? {
    switch self.p2Xstring_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: p2Ystring
  //····················································································································

  let p2Ystring_property = EBTransientProperty_String ()

  //····················································································································

  var p2Ystring_property_selection : EBSelection <String> {
    return self.p2Ystring_property.prop
  }

  //····················································································································

  var p2Ystring : String? {
    switch self.p2Ystring_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: cp1Xstring
  //····················································································································

  let cp1Xstring_property = EBTransientProperty_String ()

  //····················································································································

  var cp1Xstring_property_selection : EBSelection <String> {
    return self.cp1Xstring_property.prop
  }

  //····················································································································

  var cp1Xstring : String? {
    switch self.cp1Xstring_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: cp1Ystring
  //····················································································································

  let cp1Ystring_property = EBTransientProperty_String ()

  //····················································································································

  var cp1Ystring_property_selection : EBSelection <String> {
    return self.cp1Ystring_property.prop
  }

  //····················································································································

  var cp1Ystring : String? {
    switch self.cp1Ystring_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: cp2Xstring
  //····················································································································

  let cp2Xstring_property = EBTransientProperty_String ()

  //····················································································································

  var cp2Xstring_property_selection : EBSelection <String> {
    return self.cp2Xstring_property.prop
  }

  //····················································································································

  var cp2Xstring : String? {
    switch self.cp2Xstring_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: cp2Ystring
  //····················································································································

  let cp2Ystring_property = EBTransientProperty_String ()

  //····················································································································

  var cp2Ystring_property_selection : EBSelection <String> {
    return self.cp2Ystring_property.prop
  }

  //····················································································································

  var cp2Ystring : String? {
    switch self.cp2Ystring_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: descriptor
  //····················································································································

  let descriptor_property = EBTransientProperty_BorderCurveDescriptor ()

  //····················································································································

  var descriptor_property_selection : EBSelection <BorderCurveDescriptor> {
    return self.descriptor_property.prop
  }

  //····················································································································

  var descriptor : BorderCurveDescriptor? {
    switch self.descriptor_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: isLine
  //····················································································································

  let isLine_property = EBTransientProperty_Bool ()

  //····················································································································

  var isLine_property_selection : EBSelection <Bool> {
    return self.isLine_property.prop
  }

  //····················································································································

  var isLine : Bool? {
    switch self.isLine_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mX
    self.mX_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mY
    self.mY_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mCPX1
    self.mCPX1_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mCPY1
    self.mCPY1_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mCPX2
    self.mCPX2_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mCPY2
    self.mCPY2_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mShape
    self.mShape_property.ebUndoManager = self.ebUndoManager
  //--- To one property: mRoot (has opposite to many relationship: mBorderCurves)
    self.mRoot_property.ebUndoManager = self.ebUndoManager
    self.mRoot_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mBorderCurves_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mBorderCurves_property.remove (me) } }
    )
  //--- To one property: mNext (has opposite to one relationship: mPrevious)
    self.mNext_property.ebUndoManager = self.ebUndoManager
    self.mNext_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPrevious_property.setProp (me) } },
      resetter: { inObject in inObject.mPrevious_property.setProp (nil) }
    )
  //--- To one property: mPrevious (has opposite to one relationship: mNext)
    self.mPrevious_property.ebUndoManager = self.ebUndoManager
    self.mPrevious_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mNext_property.setProp (me) } },
      resetter: { inObject in inObject.mNext_property.setProp (nil) }
    )
  //--- Atomic property: p1Xstring
    self.p1Xstring_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mBoardSelectedCurveDisplayUnit_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mX_property_selection, unwSelf.mRoot_property.mBoardSelectedCurveDisplayUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_BorderCurve_p1Xstring (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.p1Xstring_property, postEvent: false)
    self.mRoot_property.addEBObserverOf_mBoardSelectedCurveDisplayUnit (self.p1Xstring_property, postEvent: false)
    self.p1Xstring_property.postEvent ()
  //--- Atomic property: p1Ystring
    self.p1Ystring_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mY_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mBoardSelectedCurveDisplayUnit_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mY_property_selection, unwSelf.mRoot_property.mBoardSelectedCurveDisplayUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_BorderCurve_p1Ystring (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mY_property.addEBObserver (self.p1Ystring_property, postEvent: false)
    self.mRoot_property.addEBObserverOf_mBoardSelectedCurveDisplayUnit (self.p1Ystring_property, postEvent: false)
    self.p1Ystring_property.postEvent ()
  //--- Atomic property: p2Xstring
    self.p2Xstring_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mNext_property.mX_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mBoardSelectedCurveDisplayUnit_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNext_property.mX_property_selection, unwSelf.mRoot_property.mBoardSelectedCurveDisplayUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_BorderCurve_p2Xstring (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNext_property.addEBObserverOf_mX (self.p2Xstring_property, postEvent: false)
    self.mRoot_property.addEBObserverOf_mBoardSelectedCurveDisplayUnit (self.p2Xstring_property, postEvent: false)
    self.p2Xstring_property.postEvent ()
  //--- Atomic property: p2Ystring
    self.p2Ystring_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mNext_property.mY_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mBoardSelectedCurveDisplayUnit_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNext_property.mY_property_selection, unwSelf.mRoot_property.mBoardSelectedCurveDisplayUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_BorderCurve_p2Ystring (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNext_property.addEBObserverOf_mY (self.p2Ystring_property, postEvent: false)
    self.mRoot_property.addEBObserverOf_mBoardSelectedCurveDisplayUnit (self.p2Ystring_property, postEvent: false)
    self.p2Ystring_property.postEvent ()
  //--- Atomic property: cp1Xstring
    self.cp1Xstring_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mCPX1_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mBoardSelectedCurveDisplayUnit_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mCPX1_property_selection, unwSelf.mRoot_property.mBoardSelectedCurveDisplayUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_BorderCurve_cp1Xstring (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mCPX1_property.addEBObserver (self.cp1Xstring_property, postEvent: false)
    self.mRoot_property.addEBObserverOf_mBoardSelectedCurveDisplayUnit (self.cp1Xstring_property, postEvent: false)
    self.cp1Xstring_property.postEvent ()
  //--- Atomic property: cp1Ystring
    self.cp1Ystring_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mCPY1_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mBoardSelectedCurveDisplayUnit_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mCPY1_property_selection, unwSelf.mRoot_property.mBoardSelectedCurveDisplayUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_BorderCurve_cp1Ystring (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mCPY1_property.addEBObserver (self.cp1Ystring_property, postEvent: false)
    self.mRoot_property.addEBObserverOf_mBoardSelectedCurveDisplayUnit (self.cp1Ystring_property, postEvent: false)
    self.cp1Ystring_property.postEvent ()
  //--- Atomic property: cp2Xstring
    self.cp2Xstring_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mCPX2_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mBoardSelectedCurveDisplayUnit_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mCPX2_property_selection, unwSelf.mRoot_property.mBoardSelectedCurveDisplayUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_BorderCurve_cp2Xstring (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mCPX2_property.addEBObserver (self.cp2Xstring_property, postEvent: false)
    self.mRoot_property.addEBObserverOf_mBoardSelectedCurveDisplayUnit (self.cp2Xstring_property, postEvent: false)
    self.cp2Xstring_property.postEvent ()
  //--- Atomic property: cp2Ystring
    self.cp2Ystring_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mCPY2_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mBoardSelectedCurveDisplayUnit_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mCPY2_property_selection, unwSelf.mRoot_property.mBoardSelectedCurveDisplayUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_BorderCurve_cp2Ystring (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mCPY2_property.addEBObserver (self.cp2Ystring_property, postEvent: false)
    self.mRoot_property.addEBObserverOf_mBoardSelectedCurveDisplayUnit (self.cp2Ystring_property, postEvent: false)
    self.cp2Ystring_property.postEvent ()
  //--- Atomic property: descriptor
    self.descriptor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        kind &= unwSelf.mNext_property.mX_property_selection.kind ()
        kind &= unwSelf.mNext_property.mY_property_selection.kind ()
        kind &= unwSelf.mCPX1_property_selection.kind ()
        kind &= unwSelf.mCPY1_property_selection.kind ()
        kind &= unwSelf.mCPX2_property_selection.kind ()
        kind &= unwSelf.mCPY2_property_selection.kind ()
        kind &= unwSelf.mShape_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mX_property_selection, unwSelf.mY_property_selection, unwSelf.mNext_property.mX_property_selection, unwSelf.mNext_property.mY_property_selection, unwSelf.mCPX1_property_selection, unwSelf.mCPY1_property_selection, unwSelf.mCPX2_property_selection, unwSelf.mCPY2_property_selection, unwSelf.mShape_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8)) :
            return .single (transient_BorderCurve_descriptor (v0, v1, v2, v3, v4, v5, v6, v7, v8))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.descriptor_property, postEvent: false)
    self.mY_property.addEBObserver (self.descriptor_property, postEvent: false)
    self.mNext_property.addEBObserverOf_mX (self.descriptor_property, postEvent: false)
    self.mNext_property.addEBObserverOf_mY (self.descriptor_property, postEvent: false)
    self.mCPX1_property.addEBObserver (self.descriptor_property, postEvent: false)
    self.mCPY1_property.addEBObserver (self.descriptor_property, postEvent: false)
    self.mCPX2_property.addEBObserver (self.descriptor_property, postEvent: false)
    self.mCPY2_property.addEBObserver (self.descriptor_property, postEvent: false)
    self.mShape_property.addEBObserver (self.descriptor_property, postEvent: false)
    self.descriptor_property.postEvent ()
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        kind &= unwSelf.mNext_property.mX_property_selection.kind ()
        kind &= unwSelf.mNext_property.mY_property_selection.kind ()
        kind &= unwSelf.mCPX1_property_selection.kind ()
        kind &= unwSelf.mCPY1_property_selection.kind ()
        kind &= unwSelf.mCPX2_property_selection.kind ()
        kind &= unwSelf.mCPY2_property_selection.kind ()
        kind &= unwSelf.mShape_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mBoardLimitsWidth_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mBoardClearance_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mX_property_selection, unwSelf.mY_property_selection, unwSelf.mNext_property.mX_property_selection, unwSelf.mNext_property.mY_property_selection, unwSelf.mCPX1_property_selection, unwSelf.mCPY1_property_selection, unwSelf.mCPX2_property_selection, unwSelf.mCPY2_property_selection, unwSelf.mShape_property_selection, unwSelf.mRoot_property.mBoardLimitsWidth_property_selection, unwSelf.mRoot_property.mBoardClearance_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10)) :
            return .single (transient_BorderCurve_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.objectDisplay_property, postEvent: false)
    self.mY_property.addEBObserver (self.objectDisplay_property, postEvent: false)
    self.mNext_property.addEBObserverOf_mX (self.objectDisplay_property, postEvent: false)
    self.mNext_property.addEBObserverOf_mY (self.objectDisplay_property, postEvent: false)
    self.mCPX1_property.addEBObserver (self.objectDisplay_property, postEvent: false)
    self.mCPY1_property.addEBObserver (self.objectDisplay_property, postEvent: false)
    self.mCPX2_property.addEBObserver (self.objectDisplay_property, postEvent: false)
    self.mCPY2_property.addEBObserver (self.objectDisplay_property, postEvent: false)
    self.mShape_property.addEBObserver (self.objectDisplay_property, postEvent: false)
    self.mRoot_property.addEBObserverOf_mBoardLimitsWidth (self.objectDisplay_property, postEvent: false)
    self.mRoot_property.addEBObserverOf_mBoardClearance (self.objectDisplay_property, postEvent: false)
    self.objectDisplay_property.postEvent ()
  //--- Atomic property: isLine
    self.isLine_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mShape_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mShape_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BorderCurve_isLine (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mShape_property.addEBObserver (self.isLine_property, postEvent: false)
    self.isLine_property.postEvent ()
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        kind &= unwSelf.mNext_property.mX_property_selection.kind ()
        kind &= unwSelf.mNext_property.mY_property_selection.kind ()
        kind &= unwSelf.mCPX1_property_selection.kind ()
        kind &= unwSelf.mCPY1_property_selection.kind ()
        kind &= unwSelf.mCPX2_property_selection.kind ()
        kind &= unwSelf.mCPY2_property_selection.kind ()
        kind &= unwSelf.mShape_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mX_property_selection, unwSelf.mY_property_selection, unwSelf.mNext_property.mX_property_selection, unwSelf.mNext_property.mY_property_selection, unwSelf.mCPX1_property_selection, unwSelf.mCPY1_property_selection, unwSelf.mCPX2_property_selection, unwSelf.mCPY2_property_selection, unwSelf.mShape_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8)) :
            return .single (transient_BorderCurve_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.selectionDisplay_property, postEvent: false)
    self.mY_property.addEBObserver (self.selectionDisplay_property, postEvent: false)
    self.mNext_property.addEBObserverOf_mX (self.selectionDisplay_property, postEvent: false)
    self.mNext_property.addEBObserverOf_mY (self.selectionDisplay_property, postEvent: false)
    self.mCPX1_property.addEBObserver (self.selectionDisplay_property, postEvent: false)
    self.mCPY1_property.addEBObserver (self.selectionDisplay_property, postEvent: false)
    self.mCPX2_property.addEBObserver (self.selectionDisplay_property, postEvent: false)
    self.mCPY2_property.addEBObserver (self.selectionDisplay_property, postEvent: false)
    self.mShape_property.addEBObserver (self.selectionDisplay_property, postEvent: false)
    self.selectionDisplay_property.postEvent ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mX_property.removeEBObserver (self.p1Xstring_property)
    self.mRoot_property.removeEBObserverOf_mBoardSelectedCurveDisplayUnit (self.p1Xstring_property)
    self.mY_property.removeEBObserver (self.p1Ystring_property)
    self.mRoot_property.removeEBObserverOf_mBoardSelectedCurveDisplayUnit (self.p1Ystring_property)
    self.mNext_property.removeEBObserverOf_mX (self.p2Xstring_property)
    self.mRoot_property.removeEBObserverOf_mBoardSelectedCurveDisplayUnit (self.p2Xstring_property)
    self.mNext_property.removeEBObserverOf_mY (self.p2Ystring_property)
    self.mRoot_property.removeEBObserverOf_mBoardSelectedCurveDisplayUnit (self.p2Ystring_property)
    self.mCPX1_property.removeEBObserver (self.cp1Xstring_property)
    self.mRoot_property.removeEBObserverOf_mBoardSelectedCurveDisplayUnit (self.cp1Xstring_property)
    self.mCPY1_property.removeEBObserver (self.cp1Ystring_property)
    self.mRoot_property.removeEBObserverOf_mBoardSelectedCurveDisplayUnit (self.cp1Ystring_property)
    self.mCPX2_property.removeEBObserver (self.cp2Xstring_property)
    self.mRoot_property.removeEBObserverOf_mBoardSelectedCurveDisplayUnit (self.cp2Xstring_property)
    self.mCPY2_property.removeEBObserver (self.cp2Ystring_property)
    self.mRoot_property.removeEBObserverOf_mBoardSelectedCurveDisplayUnit (self.cp2Ystring_property)
    self.mX_property.removeEBObserver (self.descriptor_property)
    self.mY_property.removeEBObserver (self.descriptor_property)
    self.mNext_property.removeEBObserverOf_mX (self.descriptor_property)
    self.mNext_property.removeEBObserverOf_mY (self.descriptor_property)
    self.mCPX1_property.removeEBObserver (self.descriptor_property)
    self.mCPY1_property.removeEBObserver (self.descriptor_property)
    self.mCPX2_property.removeEBObserver (self.descriptor_property)
    self.mCPY2_property.removeEBObserver (self.descriptor_property)
    self.mShape_property.removeEBObserver (self.descriptor_property)
    self.mX_property.removeEBObserver (self.objectDisplay_property)
    self.mY_property.removeEBObserver (self.objectDisplay_property)
    self.mNext_property.removeEBObserverOf_mX (self.objectDisplay_property)
    self.mNext_property.removeEBObserverOf_mY (self.objectDisplay_property)
    self.mCPX1_property.removeEBObserver (self.objectDisplay_property)
    self.mCPY1_property.removeEBObserver (self.objectDisplay_property)
    self.mCPX2_property.removeEBObserver (self.objectDisplay_property)
    self.mCPY2_property.removeEBObserver (self.objectDisplay_property)
    self.mShape_property.removeEBObserver (self.objectDisplay_property)
    self.mRoot_property.removeEBObserverOf_mBoardLimitsWidth (self.objectDisplay_property)
    self.mRoot_property.removeEBObserverOf_mBoardClearance (self.objectDisplay_property)
    self.mShape_property.removeEBObserver (self.isLine_property)
    self.mX_property.removeEBObserver (self.selectionDisplay_property)
    self.mY_property.removeEBObserver (self.selectionDisplay_property)
    self.mNext_property.removeEBObserverOf_mX (self.selectionDisplay_property)
    self.mNext_property.removeEBObserverOf_mY (self.selectionDisplay_property)
    self.mCPX1_property.removeEBObserver (self.selectionDisplay_property)
    self.mCPY1_property.removeEBObserver (self.selectionDisplay_property)
    self.mCPX2_property.removeEBObserver (self.selectionDisplay_property)
    self.mCPY2_property.removeEBObserver (self.selectionDisplay_property)
    self.mShape_property.removeEBObserver (self.selectionDisplay_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mX",
      idx: self.mX_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mX_property.mObserverExplorer,
      valueExplorer: &self.mX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mY",
      idx: self.mY_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mY_property.mObserverExplorer,
      valueExplorer: &self.mY_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mCPX1",
      idx: self.mCPX1_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCPX1_property.mObserverExplorer,
      valueExplorer: &self.mCPX1_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mCPY1",
      idx: self.mCPY1_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCPY1_property.mObserverExplorer,
      valueExplorer: &self.mCPY1_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mCPX2",
      idx: self.mCPX2_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCPX2_property.mObserverExplorer,
      valueExplorer: &self.mCPX2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mCPY2",
      idx: self.mCPY2_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCPY2_property.mObserverExplorer,
      valueExplorer: &self.mCPY2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mShape",
      idx: self.mShape_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mShape_property.mObserverExplorer,
      valueExplorer: &self.mShape_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "p1Xstring",
      idx: self.p1Xstring_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.p1Xstring_property.mObserverExplorer,
      valueExplorer: &self.p1Xstring_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "p1Ystring",
      idx: self.p1Ystring_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.p1Ystring_property.mObserverExplorer,
      valueExplorer: &self.p1Ystring_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "p2Xstring",
      idx: self.p2Xstring_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.p2Xstring_property.mObserverExplorer,
      valueExplorer: &self.p2Xstring_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "p2Ystring",
      idx: self.p2Ystring_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.p2Ystring_property.mObserverExplorer,
      valueExplorer: &self.p2Ystring_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cp1Xstring",
      idx: self.cp1Xstring_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.cp1Xstring_property.mObserverExplorer,
      valueExplorer: &self.cp1Xstring_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cp1Ystring",
      idx: self.cp1Ystring_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.cp1Ystring_property.mObserverExplorer,
      valueExplorer: &self.cp1Ystring_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cp2Xstring",
      idx: self.cp2Xstring_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.cp2Xstring_property.mObserverExplorer,
      valueExplorer: &self.cp2Xstring_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cp2Ystring",
      idx: self.cp2Ystring_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.cp2Ystring_property.mObserverExplorer,
      valueExplorer: &self.cp2Ystring_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "descriptor",
      idx: self.descriptor_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.descriptor_property.mObserverExplorer,
      valueExplorer: &self.descriptor_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx: self.objectDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.objectDisplay_property.mObserverExplorer,
      valueExplorer: &self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "isLine",
      idx: self.isLine_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.isLine_property.mObserverExplorer,
      valueExplorer: &self.isLine_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx: self.selectionDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
      valueExplorer: &self.selectionDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "mRoot",
      idx:self.mRoot_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mRoot_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mNext",
      idx:self.mNext_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mNext_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mPrevious",
      idx:self.mPrevious_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mPrevious_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mX
    self.mX_property.mObserverExplorer = nil
    self.mX_property.mValueExplorer = nil
  //--- Atomic property: mY
    self.mY_property.mObserverExplorer = nil
    self.mY_property.mValueExplorer = nil
  //--- Atomic property: mCPX1
    self.mCPX1_property.mObserverExplorer = nil
    self.mCPX1_property.mValueExplorer = nil
  //--- Atomic property: mCPY1
    self.mCPY1_property.mObserverExplorer = nil
    self.mCPY1_property.mValueExplorer = nil
  //--- Atomic property: mCPX2
    self.mCPX2_property.mObserverExplorer = nil
    self.mCPX2_property.mValueExplorer = nil
  //--- Atomic property: mCPY2
    self.mCPY2_property.mObserverExplorer = nil
    self.mCPY2_property.mValueExplorer = nil
  //--- Atomic property: mShape
    self.mShape_property.mObserverExplorer = nil
    self.mShape_property.mValueExplorer = nil
  //--- To one property: mRoot
    self.mRoot_property.mObserverExplorer = nil
    self.mRoot_property.mValueExplorer = nil
  //--- To one property: mNext
    self.mNext_property.mObserverExplorer = nil
    self.mNext_property.mValueExplorer = nil
  //--- To one property: mPrevious
    self.mPrevious_property.mObserverExplorer = nil
    self.mPrevious_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mRoot = nil
    self.mNext = nil
    self.mPrevious = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mX
    self.mX_property.storeIn (dictionary: ioDictionary, forKey:"mX")
  //--- Atomic property: mY
    self.mY_property.storeIn (dictionary: ioDictionary, forKey:"mY")
  //--- Atomic property: mCPX1
    self.mCPX1_property.storeIn (dictionary: ioDictionary, forKey:"mCPX1")
  //--- Atomic property: mCPY1
    self.mCPY1_property.storeIn (dictionary: ioDictionary, forKey:"mCPY1")
  //--- Atomic property: mCPX2
    self.mCPX2_property.storeIn (dictionary: ioDictionary, forKey:"mCPX2")
  //--- Atomic property: mCPY2
    self.mCPY2_property.storeIn (dictionary: ioDictionary, forKey:"mCPY2")
  //--- Atomic property: mShape
    self.mShape_property.storeIn (dictionary: ioDictionary, forKey:"mShape")
  //--- To one property: mNext // Opposite is toOne mPrevious
    self.store (managedObject:self.mNext_property.propval,
      relationshipName: "mNext",
      intoDictionary: ioDictionary)
  //--- To one property: mPrevious // Opposite is toOne mNext
    self.store (managedObject:self.mPrevious_property.propval,
      relationshipName: "mPrevious",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To one property: mRoot
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mRoot",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? ProjectRoot {
        self.mRoot_property.setProp (entity)
      }
    }
  //--- To one property: mNext
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mNext",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? BorderCurve {
        self.mNext_property.setProp (entity)
      }
    }
  //--- To one property: mPrevious
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mPrevious",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? BorderCurve {
        self.mPrevious_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey:"mX")
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey:"mY")
  //--- Atomic property: mCPX1
    self.mCPX1_property.readFrom (dictionary: inDictionary, forKey:"mCPX1")
  //--- Atomic property: mCPY1
    self.mCPY1_property.readFrom (dictionary: inDictionary, forKey:"mCPY1")
  //--- Atomic property: mCPX2
    self.mCPX2_property.readFrom (dictionary: inDictionary, forKey:"mCPX2")
  //--- Atomic property: mCPY2
    self.mCPY2_property.readFrom (dictionary: inDictionary, forKey:"mCPY2")
  //--- Atomic property: mShape
    self.mShape_property.readFrom (dictionary: inDictionary, forKey:"mShape")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To one property: mRoot
    if let object = self.mRoot {
      objects.append (object)
    }
  //--- To one property: mNext
    if let object = self.mNext {
      objects.append (object)
    }
  //--- To one property: mPrevious
    if let object = self.mPrevious {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To one property: mRoot
    if let object = self.mRoot {
      objects.append (object)
    }
  //--- To one property: mNext
    if let object = self.mNext {
      objects.append (object)
    }
  //--- To one property: mPrevious
    if let object = self.mPrevious {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

