//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ProjectRoot : ReadOnlyAbstractArrayProperty <ProjectRoot> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <ProjectRoot>, addedSet inAddedSet : Set <ProjectRoot>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_mArtworkName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mLastERCCheckingIsSuccess_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mLastERCCheckingSignature_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mAutoRouterPreferredDirections_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mAutorouterSnapAngle_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mTrackLengthUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mLayoutClearance_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mLayoutClearanceUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardSelectedInspector_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardHorizontalFlip_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardVerticalFlip_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardGridStyle_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardGridDisplayFactor_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardZoom_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardGridStep_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardGridStepUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mDisplayFrontPads_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mDisplayBackPads_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mDisplayPadNumbers_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mDisplayFrontLegend_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mDisplayBackLegend_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mDisplayFrontLayout_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mDisplayBackLayout_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mDisplayFrontRestrictRectangles_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mDisplayBackRestrictRectangles_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mErrorOrWarningIssueSize_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mControlKeyHiliteDiameter_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardLimitsWidth_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardLimitsWidthUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardLimitsSelectedInspector_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardLimitsHorizontalFlip_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardLimitsVerticalFlip_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardLimitsGridStyle_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardLimitsGridDisplayFactor_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardLimitsZoom_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardLimitsGridStep_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardLimitsGridStepUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardLimitsBoundingBoxUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardPointsBoundingBoxUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardSelectedCurveDisplayUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardClearance_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardClearanceUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSelectedPageIndex_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSelectedSchematicInspector_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicTitle_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicVersion_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicDate_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicHorizontalFlip_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicVerticalFlip_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicZoom_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicGridStyle_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicGridDisplayFactor_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicSheetOrientation_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_boardGridStepMultipliedByDisplayFactor_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardLimitsGridStepMultipliedByDisplayFactor_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_selectedSheetIssues_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_connectedPoints_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_connexionWarningString_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_connexionErrorString_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_sheetIndexes_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_netsDescription_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_signatureForERCChecking_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_ercStatusImage_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_ercStatusMessage_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_viaCountString_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_trackCountString_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_trackLengthString_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardIssues_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_issuesDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardStatusImage_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardStatusMessage_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_interiorBoundBox_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardInteriorTop_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardInteriorBottom_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardInteriorLeft_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardInteriorRight_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardLimitBorderTop_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardLimitBorderBottom_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardLimitBorderLeft_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardLimitBorderRight_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_borderElementCountString_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_borderOutlineBackground_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boarderViewBackground_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_deviceNames_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_schematicBackgroundDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_netWarningCount_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_unplacedSymbols_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_unplacedPackages_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_schematicStatusMessage_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_schematicStatusImage_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_selectedSheetObjects_fromElementsOfSet (inAddedSet) // ToMany proxy
  //--- Add observers to added objects
    self.addEBObserversOf_mArtworkName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mLastERCCheckingIsSuccess_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mLastERCCheckingSignature_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mAutoRouterPreferredDirections_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mAutorouterSnapAngle_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mTrackLengthUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mLayoutClearance_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mLayoutClearanceUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardSelectedInspector_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardHorizontalFlip_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardVerticalFlip_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardGridStyle_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardGridDisplayFactor_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardZoom_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardGridStep_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardGridStepUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mDisplayFrontPads_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mDisplayBackPads_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mDisplayPadNumbers_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mDisplayFrontLegend_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mDisplayBackLegend_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mDisplayFrontLayout_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mDisplayBackLayout_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mDisplayFrontRestrictRectangles_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mDisplayBackRestrictRectangles_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mErrorOrWarningIssueSize_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mControlKeyHiliteDiameter_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardLimitsWidth_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardLimitsWidthUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardLimitsSelectedInspector_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardLimitsHorizontalFlip_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardLimitsVerticalFlip_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardLimitsGridStyle_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardLimitsGridDisplayFactor_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardLimitsZoom_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardLimitsGridStep_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardLimitsGridStepUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardLimitsBoundingBoxUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardPointsBoundingBoxUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardSelectedCurveDisplayUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardClearance_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardClearanceUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSelectedPageIndex_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSelectedSchematicInspector_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicTitle_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicVersion_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicDate_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicHorizontalFlip_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicVerticalFlip_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicZoom_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicGridStyle_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicGridDisplayFactor_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicSheetOrientation_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_boardGridStepMultipliedByDisplayFactor_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardLimitsGridStepMultipliedByDisplayFactor_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_selectedSheetIssues_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_connectedPoints_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_connexionWarningString_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_connexionErrorString_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_sheetIndexes_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_netsDescription_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_signatureForERCChecking_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_ercStatusImage_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_ercStatusMessage_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_viaCountString_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_trackCountString_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_trackLengthString_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardIssues_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_issuesDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardStatusImage_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardStatusMessage_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_interiorBoundBox_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardInteriorTop_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardInteriorBottom_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardInteriorLeft_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardInteriorRight_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardLimitBorderTop_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardLimitBorderBottom_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardLimitBorderLeft_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardLimitBorderRight_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_borderElementCountString_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_borderOutlineBackground_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boarderViewBackground_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_deviceNames_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_schematicBackgroundDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_netWarningCount_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_unplacedSymbols_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_unplacedPackages_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_schematicStatusMessage_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_schematicStatusImage_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_selectedSheetObjects_toElementsOfSet (inAddedSet) // ToMany proxy
  }

  //····················································································································
  //   Observers of 'mArtworkName' stored property
  //····················································································································

  private var mObserversOf_mArtworkName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mArtworkName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mArtworkName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mArtworkName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mArtworkName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mArtworkName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mArtworkName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mArtworkName_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mArtworkName.apply { (_ observer : EBEvent) in
        managedObject.mArtworkName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mArtworkName_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mArtworkName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mArtworkName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mLastERCCheckingIsSuccess' stored property
  //····················································································································

  private var mObserversOf_mLastERCCheckingIsSuccess = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mLastERCCheckingIsSuccess (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mLastERCCheckingIsSuccess.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLastERCCheckingIsSuccess_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mLastERCCheckingIsSuccess (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mLastERCCheckingIsSuccess.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLastERCCheckingIsSuccess_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mLastERCCheckingIsSuccess_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mLastERCCheckingIsSuccess.apply { (_ observer : EBEvent) in
        managedObject.mLastERCCheckingIsSuccess_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mLastERCCheckingIsSuccess_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mLastERCCheckingIsSuccess.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mLastERCCheckingIsSuccess_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mLastERCCheckingSignature' stored property
  //····················································································································

  private var mObserversOf_mLastERCCheckingSignature = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mLastERCCheckingSignature (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mLastERCCheckingSignature.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLastERCCheckingSignature_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mLastERCCheckingSignature (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mLastERCCheckingSignature.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLastERCCheckingSignature_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mLastERCCheckingSignature_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mLastERCCheckingSignature.apply { (_ observer : EBEvent) in
        managedObject.mLastERCCheckingSignature_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mLastERCCheckingSignature_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mLastERCCheckingSignature.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mLastERCCheckingSignature_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mAutoRouterPreferredDirections' stored property
  //····················································································································

  private var mObserversOf_mAutoRouterPreferredDirections = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mAutoRouterPreferredDirections (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mAutoRouterPreferredDirections.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mAutoRouterPreferredDirections_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mAutoRouterPreferredDirections (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mAutoRouterPreferredDirections.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mAutoRouterPreferredDirections_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mAutoRouterPreferredDirections_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mAutoRouterPreferredDirections.apply { (_ observer : EBEvent) in
        managedObject.mAutoRouterPreferredDirections_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mAutoRouterPreferredDirections_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mAutoRouterPreferredDirections.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mAutoRouterPreferredDirections_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mAutorouterSnapAngle' stored property
  //····················································································································

  private var mObserversOf_mAutorouterSnapAngle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mAutorouterSnapAngle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mAutorouterSnapAngle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mAutorouterSnapAngle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mAutorouterSnapAngle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mAutorouterSnapAngle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mAutorouterSnapAngle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mAutorouterSnapAngle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mAutorouterSnapAngle.apply { (_ observer : EBEvent) in
        managedObject.mAutorouterSnapAngle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mAutorouterSnapAngle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mAutorouterSnapAngle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mAutorouterSnapAngle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mTrackLengthUnit' stored property
  //····················································································································

  private var mObserversOf_mTrackLengthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mTrackLengthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mTrackLengthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mTrackLengthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mTrackLengthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mTrackLengthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mTrackLengthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mTrackLengthUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mTrackLengthUnit.apply { (_ observer : EBEvent) in
        managedObject.mTrackLengthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mTrackLengthUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mTrackLengthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mTrackLengthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mLayoutClearance' stored property
  //····················································································································

  private var mObserversOf_mLayoutClearance = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mLayoutClearance (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mLayoutClearance.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLayoutClearance_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mLayoutClearance (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mLayoutClearance.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLayoutClearance_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mLayoutClearance_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mLayoutClearance.apply { (_ observer : EBEvent) in
        managedObject.mLayoutClearance_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mLayoutClearance_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mLayoutClearance.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mLayoutClearance_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mLayoutClearanceUnit' stored property
  //····················································································································

  private var mObserversOf_mLayoutClearanceUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mLayoutClearanceUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mLayoutClearanceUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLayoutClearanceUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mLayoutClearanceUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mLayoutClearanceUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mLayoutClearanceUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mLayoutClearanceUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mLayoutClearanceUnit.apply { (_ observer : EBEvent) in
        managedObject.mLayoutClearanceUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mLayoutClearanceUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mLayoutClearanceUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mLayoutClearanceUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardSelectedInspector' stored property
  //····················································································································

  private var mObserversOf_mBoardSelectedInspector = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardSelectedInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardSelectedInspector.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardSelectedInspector_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardSelectedInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardSelectedInspector.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardSelectedInspector_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardSelectedInspector_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardSelectedInspector.apply { (_ observer : EBEvent) in
        managedObject.mBoardSelectedInspector_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardSelectedInspector_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardSelectedInspector.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardSelectedInspector_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardHorizontalFlip' stored property
  //····················································································································

  private var mObserversOf_mBoardHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardHorizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardHorizontalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardHorizontalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardHorizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardHorizontalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardHorizontalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardHorizontalFlip_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardHorizontalFlip.apply { (_ observer : EBEvent) in
        managedObject.mBoardHorizontalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardHorizontalFlip_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardHorizontalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardHorizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardVerticalFlip' stored property
  //····················································································································

  private var mObserversOf_mBoardVerticalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardVerticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardVerticalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardVerticalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardVerticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardVerticalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardVerticalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardVerticalFlip_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardVerticalFlip.apply { (_ observer : EBEvent) in
        managedObject.mBoardVerticalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardVerticalFlip_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardVerticalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardVerticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardGridStyle' stored property
  //····················································································································

  private var mObserversOf_mBoardGridStyle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardGridStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardGridStyle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardGridStyle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardGridStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardGridStyle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardGridStyle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardGridStyle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardGridStyle.apply { (_ observer : EBEvent) in
        managedObject.mBoardGridStyle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardGridStyle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardGridStyle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardGridStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardGridDisplayFactor' stored property
  //····················································································································

  private var mObserversOf_mBoardGridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardGridDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardGridDisplayFactor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardGridDisplayFactor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardGridDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardGridDisplayFactor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardGridDisplayFactor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardGridDisplayFactor_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardGridDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.mBoardGridDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardGridDisplayFactor_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardGridDisplayFactor.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardGridDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardZoom' stored property
  //····················································································································

  private var mObserversOf_mBoardZoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardZoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardZoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardZoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardZoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardZoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardZoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardZoom_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardZoom.apply { (_ observer : EBEvent) in
        managedObject.mBoardZoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardZoom_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardZoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardZoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardGridStep' stored property
  //····················································································································

  private var mObserversOf_mBoardGridStep = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardGridStep (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardGridStep.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardGridStep_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardGridStep (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardGridStep.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardGridStep_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardGridStep_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardGridStep.apply { (_ observer : EBEvent) in
        managedObject.mBoardGridStep_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardGridStep_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardGridStep.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardGridStep_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardGridStepUnit' stored property
  //····················································································································

  private var mObserversOf_mBoardGridStepUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardGridStepUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardGridStepUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardGridStepUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardGridStepUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardGridStepUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardGridStepUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardGridStepUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardGridStepUnit.apply { (_ observer : EBEvent) in
        managedObject.mBoardGridStepUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardGridStepUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardGridStepUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardGridStepUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDisplayFrontPads' stored property
  //····················································································································

  private var mObserversOf_mDisplayFrontPads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDisplayFrontPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDisplayFrontPads.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayFrontPads_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayFrontPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDisplayFrontPads.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayFrontPads_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDisplayFrontPads_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mDisplayFrontPads.apply { (_ observer : EBEvent) in
        managedObject.mDisplayFrontPads_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDisplayFrontPads_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mDisplayFrontPads.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDisplayFrontPads_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDisplayBackPads' stored property
  //····················································································································

  private var mObserversOf_mDisplayBackPads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDisplayBackPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDisplayBackPads.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayBackPads_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayBackPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDisplayBackPads.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayBackPads_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDisplayBackPads_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mDisplayBackPads.apply { (_ observer : EBEvent) in
        managedObject.mDisplayBackPads_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDisplayBackPads_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mDisplayBackPads.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDisplayBackPads_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDisplayPadNumbers' stored property
  //····················································································································

  private var mObserversOf_mDisplayPadNumbers = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDisplayPadNumbers (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDisplayPadNumbers.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayPadNumbers_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayPadNumbers (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDisplayPadNumbers.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayPadNumbers_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDisplayPadNumbers_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mDisplayPadNumbers.apply { (_ observer : EBEvent) in
        managedObject.mDisplayPadNumbers_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDisplayPadNumbers_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mDisplayPadNumbers.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDisplayPadNumbers_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDisplayFrontLegend' stored property
  //····················································································································

  private var mObserversOf_mDisplayFrontLegend = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDisplayFrontLegend (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDisplayFrontLegend.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayFrontLegend_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayFrontLegend (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDisplayFrontLegend.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayFrontLegend_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDisplayFrontLegend_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mDisplayFrontLegend.apply { (_ observer : EBEvent) in
        managedObject.mDisplayFrontLegend_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDisplayFrontLegend_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mDisplayFrontLegend.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDisplayFrontLegend_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDisplayBackLegend' stored property
  //····················································································································

  private var mObserversOf_mDisplayBackLegend = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDisplayBackLegend (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDisplayBackLegend.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayBackLegend_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayBackLegend (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDisplayBackLegend.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayBackLegend_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDisplayBackLegend_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mDisplayBackLegend.apply { (_ observer : EBEvent) in
        managedObject.mDisplayBackLegend_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDisplayBackLegend_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mDisplayBackLegend.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDisplayBackLegend_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDisplayFrontLayout' stored property
  //····················································································································

  private var mObserversOf_mDisplayFrontLayout = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDisplayFrontLayout (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDisplayFrontLayout.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayFrontLayout_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayFrontLayout (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDisplayFrontLayout.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayFrontLayout_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDisplayFrontLayout_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mDisplayFrontLayout.apply { (_ observer : EBEvent) in
        managedObject.mDisplayFrontLayout_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDisplayFrontLayout_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mDisplayFrontLayout.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDisplayFrontLayout_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDisplayBackLayout' stored property
  //····················································································································

  private var mObserversOf_mDisplayBackLayout = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDisplayBackLayout (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDisplayBackLayout.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayBackLayout_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayBackLayout (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDisplayBackLayout.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayBackLayout_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDisplayBackLayout_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mDisplayBackLayout.apply { (_ observer : EBEvent) in
        managedObject.mDisplayBackLayout_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDisplayBackLayout_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mDisplayBackLayout.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDisplayBackLayout_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDisplayFrontRestrictRectangles' stored property
  //····················································································································

  private var mObserversOf_mDisplayFrontRestrictRectangles = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDisplayFrontRestrictRectangles (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDisplayFrontRestrictRectangles.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayFrontRestrictRectangles_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayFrontRestrictRectangles (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDisplayFrontRestrictRectangles.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayFrontRestrictRectangles_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDisplayFrontRestrictRectangles_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mDisplayFrontRestrictRectangles.apply { (_ observer : EBEvent) in
        managedObject.mDisplayFrontRestrictRectangles_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDisplayFrontRestrictRectangles_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mDisplayFrontRestrictRectangles.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDisplayFrontRestrictRectangles_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDisplayBackRestrictRectangles' stored property
  //····················································································································

  private var mObserversOf_mDisplayBackRestrictRectangles = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDisplayBackRestrictRectangles (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDisplayBackRestrictRectangles.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayBackRestrictRectangles_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayBackRestrictRectangles (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDisplayBackRestrictRectangles.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDisplayBackRestrictRectangles_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDisplayBackRestrictRectangles_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mDisplayBackRestrictRectangles.apply { (_ observer : EBEvent) in
        managedObject.mDisplayBackRestrictRectangles_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDisplayBackRestrictRectangles_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mDisplayBackRestrictRectangles.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDisplayBackRestrictRectangles_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mErrorOrWarningIssueSize' stored property
  //····················································································································

  private var mObserversOf_mErrorOrWarningIssueSize = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mErrorOrWarningIssueSize (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mErrorOrWarningIssueSize.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mErrorOrWarningIssueSize_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mErrorOrWarningIssueSize (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mErrorOrWarningIssueSize.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mErrorOrWarningIssueSize_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mErrorOrWarningIssueSize_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mErrorOrWarningIssueSize.apply { (_ observer : EBEvent) in
        managedObject.mErrorOrWarningIssueSize_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mErrorOrWarningIssueSize_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mErrorOrWarningIssueSize.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mErrorOrWarningIssueSize_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mControlKeyHiliteDiameter' stored property
  //····················································································································

  private var mObserversOf_mControlKeyHiliteDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mControlKeyHiliteDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mControlKeyHiliteDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mControlKeyHiliteDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mControlKeyHiliteDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mControlKeyHiliteDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mControlKeyHiliteDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mControlKeyHiliteDiameter_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mControlKeyHiliteDiameter.apply { (_ observer : EBEvent) in
        managedObject.mControlKeyHiliteDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mControlKeyHiliteDiameter_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mControlKeyHiliteDiameter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mControlKeyHiliteDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsWidth' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsWidth_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsWidth.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsWidth_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsWidthUnit' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsWidthUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsWidthUnit.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsWidthUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsWidthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsSelectedInspector' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsSelectedInspector = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsSelectedInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsSelectedInspector.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsSelectedInspector_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsSelectedInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsSelectedInspector.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsSelectedInspector_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsSelectedInspector_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsSelectedInspector.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsSelectedInspector_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsSelectedInspector_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsSelectedInspector.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsSelectedInspector_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsHorizontalFlip' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsHorizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsHorizontalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsHorizontalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsHorizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsHorizontalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsHorizontalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsHorizontalFlip_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsHorizontalFlip.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsHorizontalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsHorizontalFlip_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsHorizontalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsHorizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsVerticalFlip' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsVerticalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsVerticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsVerticalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsVerticalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsVerticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsVerticalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsVerticalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsVerticalFlip_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsVerticalFlip.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsVerticalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsVerticalFlip_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsVerticalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsVerticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsGridStyle' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsGridStyle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsGridStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStyle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridStyle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsGridStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStyle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridStyle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsGridStyle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsGridStyle.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsGridStyle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsGridStyle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsGridStyle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsGridStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsGridDisplayFactor' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsGridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsGridDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridDisplayFactor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridDisplayFactor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsGridDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridDisplayFactor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridDisplayFactor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsGridDisplayFactor_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsGridDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsGridDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsGridDisplayFactor_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsGridDisplayFactor.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsGridDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsZoom' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsZoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsZoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsZoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsZoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsZoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsZoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsZoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsZoom_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsZoom.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsZoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsZoom_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsZoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsZoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsGridStep' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsGridStep = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsGridStep (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStep.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridStep_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsGridStep (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStep.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridStep_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsGridStep_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsGridStep.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsGridStep_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsGridStep_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsGridStep.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsGridStep_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsGridStepUnit' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsGridStepUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsGridStepUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStepUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridStepUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsGridStepUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStepUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridStepUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsGridStepUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsGridStepUnit.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsGridStepUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsGridStepUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsGridStepUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsGridStepUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsBoundingBoxUnit' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsBoundingBoxUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsBoundingBoxUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsBoundingBoxUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsBoundingBoxUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsBoundingBoxUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsBoundingBoxUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsBoundingBoxUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsBoundingBoxUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsBoundingBoxUnit.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsBoundingBoxUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsBoundingBoxUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsBoundingBoxUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsBoundingBoxUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardPointsBoundingBoxUnit' stored property
  //····················································································································

  private var mObserversOf_mBoardPointsBoundingBoxUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardPointsBoundingBoxUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardPointsBoundingBoxUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardPointsBoundingBoxUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardPointsBoundingBoxUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardPointsBoundingBoxUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardPointsBoundingBoxUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardPointsBoundingBoxUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardPointsBoundingBoxUnit.apply { (_ observer : EBEvent) in
        managedObject.mBoardPointsBoundingBoxUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardPointsBoundingBoxUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardPointsBoundingBoxUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardPointsBoundingBoxUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardSelectedCurveDisplayUnit' stored property
  //····················································································································

  private var mObserversOf_mBoardSelectedCurveDisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardSelectedCurveDisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardSelectedCurveDisplayUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardSelectedCurveDisplayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardSelectedCurveDisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardSelectedCurveDisplayUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardSelectedCurveDisplayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardSelectedCurveDisplayUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardSelectedCurveDisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.mBoardSelectedCurveDisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardSelectedCurveDisplayUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardSelectedCurveDisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardSelectedCurveDisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardClearance' stored property
  //····················································································································

  private var mObserversOf_mBoardClearance = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardClearance (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardClearance.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardClearance_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardClearance (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardClearance.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardClearance_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardClearance_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardClearance.apply { (_ observer : EBEvent) in
        managedObject.mBoardClearance_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardClearance_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardClearance.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardClearance_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardClearanceUnit' stored property
  //····················································································································

  private var mObserversOf_mBoardClearanceUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardClearanceUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardClearanceUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardClearanceUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardClearanceUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardClearanceUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardClearanceUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardClearanceUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardClearanceUnit.apply { (_ observer : EBEvent) in
        managedObject.mBoardClearanceUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardClearanceUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardClearanceUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardClearanceUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSelectedPageIndex' stored property
  //····················································································································

  private var mObserversOf_mSelectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSelectedPageIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedPageIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSelectedPageIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedPageIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSelectedPageIndex_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSelectedPageIndex.apply { (_ observer : EBEvent) in
        managedObject.mSelectedPageIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSelectedPageIndex_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSelectedPageIndex.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSelectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSelectedSchematicInspector' stored property
  //····················································································································

  private var mObserversOf_mSelectedSchematicInspector = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSelectedSchematicInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSelectedSchematicInspector.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedSchematicInspector_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSelectedSchematicInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSelectedSchematicInspector.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedSchematicInspector_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSelectedSchematicInspector_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSelectedSchematicInspector.apply { (_ observer : EBEvent) in
        managedObject.mSelectedSchematicInspector_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSelectedSchematicInspector_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSelectedSchematicInspector.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSelectedSchematicInspector_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicTitle' stored property
  //····················································································································

  private var mObserversOf_mSchematicTitle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicTitle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicTitle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicTitle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicTitle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicTitle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicTitle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicTitle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicTitle.apply { (_ observer : EBEvent) in
        managedObject.mSchematicTitle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicTitle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicTitle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicTitle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicVersion' stored property
  //····················································································································

  private var mObserversOf_mSchematicVersion = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicVersion (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicVersion.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicVersion_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicVersion (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicVersion.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicVersion_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicVersion_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicVersion.apply { (_ observer : EBEvent) in
        managedObject.mSchematicVersion_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicVersion_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicVersion.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicVersion_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicDate' stored property
  //····················································································································

  private var mObserversOf_mSchematicDate = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicDate (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicDate.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicDate_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicDate (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicDate.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicDate_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicDate_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicDate.apply { (_ observer : EBEvent) in
        managedObject.mSchematicDate_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicDate_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicDate.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicDate_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicHorizontalFlip' stored property
  //····················································································································

  private var mObserversOf_mSchematicHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicHorizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicHorizontalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicHorizontalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicHorizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicHorizontalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicHorizontalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicHorizontalFlip_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicHorizontalFlip.apply { (_ observer : EBEvent) in
        managedObject.mSchematicHorizontalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicHorizontalFlip_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicHorizontalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicHorizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicVerticalFlip' stored property
  //····················································································································

  private var mObserversOf_mSchematicVerticalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicVerticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicVerticalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicVerticalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicVerticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicVerticalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicVerticalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicVerticalFlip_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicVerticalFlip.apply { (_ observer : EBEvent) in
        managedObject.mSchematicVerticalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicVerticalFlip_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicVerticalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicVerticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicZoom' stored property
  //····················································································································

  private var mObserversOf_mSchematicZoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicZoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicZoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicZoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicZoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicZoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicZoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicZoom_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicZoom.apply { (_ observer : EBEvent) in
        managedObject.mSchematicZoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicZoom_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicZoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicZoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicGridStyle' stored property
  //····················································································································

  private var mObserversOf_mSchematicGridStyle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicGridStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicGridStyle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicGridStyle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicGridStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicGridStyle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicGridStyle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicGridStyle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicGridStyle.apply { (_ observer : EBEvent) in
        managedObject.mSchematicGridStyle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicGridStyle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicGridStyle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicGridStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicGridDisplayFactor' stored property
  //····················································································································

  private var mObserversOf_mSchematicGridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicGridDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicGridDisplayFactor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicGridDisplayFactor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicGridDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicGridDisplayFactor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicGridDisplayFactor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicGridDisplayFactor_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicGridDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.mSchematicGridDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicGridDisplayFactor_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicGridDisplayFactor.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicGridDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicSheetOrientation' stored property
  //····················································································································

  private var mObserversOf_mSchematicSheetOrientation = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicSheetOrientation (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicSheetOrientation.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicSheetOrientation_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicSheetOrientation (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicSheetOrientation.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicSheetOrientation_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicSheetOrientation_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicSheetOrientation.apply { (_ observer : EBEvent) in
        managedObject.mSchematicSheetOrientation_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicSheetOrientation_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicSheetOrientation.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicSheetOrientation_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedSheetObjects' toMany proxy
  //····················································································································

  private var mObserversOf_selectedSheetObjects = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedSheetObjects (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedSheetObjects.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedSheetObjects_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedSheetObjects (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedSheetObjects.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedSheetObjects_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedSheetObjects_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedSheetObjects.apply { (_ observer : EBEvent) in
        managedObject.selectedSheetObjects_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedSheetObjects_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_selectedSheetObjects.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedSheetObjects_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedSheetTitle' proxy property
  //····················································································································

  private var mObserversOf_selectedSheetTitle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedSheetTitle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedSheetTitle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedSheetTitle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedSheetTitle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedSheetTitle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedSheetTitle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedSheetTitle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedSheetTitle.apply { (_ observer : EBEvent) in
        managedObject.selectedSheetTitle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedSheetTitle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_selectedSheetTitle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedSheetTitle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardGridStepMultipliedByDisplayFactor' transient property
  //····················································································································

  private var mObserversOf_boardGridStepMultipliedByDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardGridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardGridStepMultipliedByDisplayFactor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardGridStepMultipliedByDisplayFactor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardGridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardGridStepMultipliedByDisplayFactor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardGridStepMultipliedByDisplayFactor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardGridStepMultipliedByDisplayFactor_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardGridStepMultipliedByDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.boardGridStepMultipliedByDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardGridStepMultipliedByDisplayFactor_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardGridStepMultipliedByDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.boardGridStepMultipliedByDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitsGridStepMultipliedByDisplayFactor' transient property
  //····················································································································

  private var mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitsGridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitsGridStepMultipliedByDisplayFactor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitsGridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitsGridStepMultipliedByDisplayFactor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitsGridStepMultipliedByDisplayFactor_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.boardLimitsGridStepMultipliedByDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitsGridStepMultipliedByDisplayFactor_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.boardLimitsGridStepMultipliedByDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedSheetIssues' transient property
  //····················································································································

  private var mObserversOf_selectedSheetIssues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedSheetIssues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedSheetIssues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedSheetIssues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedSheetIssues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedSheetIssues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedSheetIssues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedSheetIssues_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedSheetIssues.apply { (_ observer : EBEvent) in
        managedObject.selectedSheetIssues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedSheetIssues_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedSheetIssues.apply { (_ observer : EBEvent) in
        managedObject.selectedSheetIssues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connectedPoints' transient property
  //····················································································································

  private var mObserversOf_connectedPoints = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connectedPoints.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connectedPoints_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connectedPoints.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connectedPoints_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_connectedPoints_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connectedPoints.apply { (_ observer : EBEvent) in
        managedObject.connectedPoints_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connectedPoints_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connectedPoints.apply { (_ observer : EBEvent) in
        managedObject.connectedPoints_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connexionWarningString' transient property
  //····················································································································

  private var mObserversOf_connexionWarningString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_connexionWarningString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connexionWarningString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connexionWarningString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_connexionWarningString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connexionWarningString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connexionWarningString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_connexionWarningString_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connexionWarningString.apply { (_ observer : EBEvent) in
        managedObject.connexionWarningString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connexionWarningString_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connexionWarningString.apply { (_ observer : EBEvent) in
        managedObject.connexionWarningString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connexionErrorString' transient property
  //····················································································································

  private var mObserversOf_connexionErrorString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_connexionErrorString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connexionErrorString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connexionErrorString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_connexionErrorString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connexionErrorString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connexionErrorString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_connexionErrorString_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connexionErrorString.apply { (_ observer : EBEvent) in
        managedObject.connexionErrorString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connexionErrorString_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connexionErrorString.apply { (_ observer : EBEvent) in
        managedObject.connexionErrorString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sheetIndexes' transient property
  //····················································································································

  private var mObserversOf_sheetIndexes = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_sheetIndexes (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_sheetIndexes.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sheetIndexes_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_sheetIndexes (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_sheetIndexes.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sheetIndexes_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_sheetIndexes_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_sheetIndexes.apply { (_ observer : EBEvent) in
        managedObject.sheetIndexes_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sheetIndexes_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_sheetIndexes.apply { (_ observer : EBEvent) in
        managedObject.sheetIndexes_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netsDescription' transient property
  //····················································································································

  private var mObserversOf_netsDescription = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netsDescription (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netsDescription.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netsDescription_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netsDescription (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netsDescription.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netsDescription_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netsDescription_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_netsDescription.apply { (_ observer : EBEvent) in
        managedObject.netsDescription_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netsDescription_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_netsDescription.apply { (_ observer : EBEvent) in
        managedObject.netsDescription_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  private var mObserversOf_signatureForERCChecking = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_signatureForERCChecking (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_signatureForERCChecking.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.signatureForERCChecking_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_signatureForERCChecking (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_signatureForERCChecking.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.signatureForERCChecking_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_signatureForERCChecking_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_signatureForERCChecking.apply { (_ observer : EBEvent) in
        managedObject.signatureForERCChecking_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_signatureForERCChecking_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_signatureForERCChecking.apply { (_ observer : EBEvent) in
        managedObject.signatureForERCChecking_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'ercStatusImage' transient property
  //····················································································································

  private var mObserversOf_ercStatusImage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_ercStatusImage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_ercStatusImage.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.ercStatusImage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_ercStatusImage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_ercStatusImage.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.ercStatusImage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_ercStatusImage_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_ercStatusImage.apply { (_ observer : EBEvent) in
        managedObject.ercStatusImage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_ercStatusImage_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_ercStatusImage.apply { (_ observer : EBEvent) in
        managedObject.ercStatusImage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'ercStatusMessage' transient property
  //····················································································································

  private var mObserversOf_ercStatusMessage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_ercStatusMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_ercStatusMessage.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.ercStatusMessage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_ercStatusMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_ercStatusMessage.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.ercStatusMessage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_ercStatusMessage_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_ercStatusMessage.apply { (_ observer : EBEvent) in
        managedObject.ercStatusMessage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_ercStatusMessage_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_ercStatusMessage.apply { (_ observer : EBEvent) in
        managedObject.ercStatusMessage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaCountString' transient property
  //····················································································································

  private var mObserversOf_viaCountString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaCountString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_viaCountString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaCountString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaCountString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_viaCountString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaCountString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaCountString_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_viaCountString.apply { (_ observer : EBEvent) in
        managedObject.viaCountString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaCountString_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_viaCountString.apply { (_ observer : EBEvent) in
        managedObject.viaCountString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'trackCountString' transient property
  //····················································································································

  private var mObserversOf_trackCountString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_trackCountString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_trackCountString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackCountString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_trackCountString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_trackCountString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackCountString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_trackCountString_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_trackCountString.apply { (_ observer : EBEvent) in
        managedObject.trackCountString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_trackCountString_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_trackCountString.apply { (_ observer : EBEvent) in
        managedObject.trackCountString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'trackLengthString' transient property
  //····················································································································

  private var mObserversOf_trackLengthString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_trackLengthString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_trackLengthString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackLengthString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_trackLengthString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_trackLengthString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.trackLengthString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_trackLengthString_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_trackLengthString.apply { (_ observer : EBEvent) in
        managedObject.trackLengthString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_trackLengthString_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_trackLengthString.apply { (_ observer : EBEvent) in
        managedObject.trackLengthString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardIssues' transient property
  //····················································································································

  private var mObserversOf_boardIssues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardIssues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardIssues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardIssues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardIssues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardIssues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardIssues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardIssues_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardIssues.apply { (_ observer : EBEvent) in
        managedObject.boardIssues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardIssues_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardIssues.apply { (_ observer : EBEvent) in
        managedObject.boardIssues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issuesDisplay' transient property
  //····················································································································

  private var mObserversOf_issuesDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issuesDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issuesDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issuesDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issuesDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issuesDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issuesDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issuesDisplay_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_issuesDisplay.apply { (_ observer : EBEvent) in
        managedObject.issuesDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issuesDisplay_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_issuesDisplay.apply { (_ observer : EBEvent) in
        managedObject.issuesDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardStatusImage' transient property
  //····················································································································

  private var mObserversOf_boardStatusImage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardStatusImage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardStatusImage.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardStatusImage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardStatusImage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardStatusImage.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardStatusImage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardStatusImage_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardStatusImage.apply { (_ observer : EBEvent) in
        managedObject.boardStatusImage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardStatusImage_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardStatusImage.apply { (_ observer : EBEvent) in
        managedObject.boardStatusImage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardStatusMessage' transient property
  //····················································································································

  private var mObserversOf_boardStatusMessage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardStatusMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardStatusMessage.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardStatusMessage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardStatusMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardStatusMessage.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardStatusMessage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardStatusMessage_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardStatusMessage.apply { (_ observer : EBEvent) in
        managedObject.boardStatusMessage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardStatusMessage_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardStatusMessage.apply { (_ observer : EBEvent) in
        managedObject.boardStatusMessage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'interiorBoundBox' transient property
  //····················································································································

  private var mObserversOf_interiorBoundBox = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_interiorBoundBox (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_interiorBoundBox.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.interiorBoundBox_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_interiorBoundBox (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_interiorBoundBox.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.interiorBoundBox_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_interiorBoundBox_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_interiorBoundBox.apply { (_ observer : EBEvent) in
        managedObject.interiorBoundBox_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_interiorBoundBox_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_interiorBoundBox.apply { (_ observer : EBEvent) in
        managedObject.interiorBoundBox_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardInteriorTop' transient property
  //····················································································································

  private var mObserversOf_boardInteriorTop = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardInteriorTop (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardInteriorTop.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardInteriorTop_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardInteriorTop (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardInteriorTop.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardInteriorTop_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardInteriorTop_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardInteriorTop.apply { (_ observer : EBEvent) in
        managedObject.boardInteriorTop_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardInteriorTop_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardInteriorTop.apply { (_ observer : EBEvent) in
        managedObject.boardInteriorTop_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardInteriorBottom' transient property
  //····················································································································

  private var mObserversOf_boardInteriorBottom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardInteriorBottom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardInteriorBottom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardInteriorBottom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardInteriorBottom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardInteriorBottom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardInteriorBottom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardInteriorBottom_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardInteriorBottom.apply { (_ observer : EBEvent) in
        managedObject.boardInteriorBottom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardInteriorBottom_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardInteriorBottom.apply { (_ observer : EBEvent) in
        managedObject.boardInteriorBottom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardInteriorLeft' transient property
  //····················································································································

  private var mObserversOf_boardInteriorLeft = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardInteriorLeft (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardInteriorLeft.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardInteriorLeft_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardInteriorLeft (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardInteriorLeft.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardInteriorLeft_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardInteriorLeft_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardInteriorLeft.apply { (_ observer : EBEvent) in
        managedObject.boardInteriorLeft_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardInteriorLeft_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardInteriorLeft.apply { (_ observer : EBEvent) in
        managedObject.boardInteriorLeft_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardInteriorRight' transient property
  //····················································································································

  private var mObserversOf_boardInteriorRight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardInteriorRight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardInteriorRight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardInteriorRight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardInteriorRight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardInteriorRight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardInteriorRight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardInteriorRight_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardInteriorRight.apply { (_ observer : EBEvent) in
        managedObject.boardInteriorRight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardInteriorRight_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardInteriorRight.apply { (_ observer : EBEvent) in
        managedObject.boardInteriorRight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitBorderTop' transient property
  //····················································································································

  private var mObserversOf_boardLimitBorderTop = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitBorderTop (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderTop.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderTop_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitBorderTop (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderTop.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderTop_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitBorderTop_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderTop.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderTop_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitBorderTop_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderTop.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderTop_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitBorderBottom' transient property
  //····················································································································

  private var mObserversOf_boardLimitBorderBottom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitBorderBottom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderBottom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderBottom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitBorderBottom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderBottom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderBottom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitBorderBottom_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderBottom.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderBottom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitBorderBottom_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderBottom.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderBottom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitBorderLeft' transient property
  //····················································································································

  private var mObserversOf_boardLimitBorderLeft = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitBorderLeft (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderLeft.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderLeft_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitBorderLeft (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderLeft.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderLeft_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitBorderLeft_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderLeft.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderLeft_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitBorderLeft_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderLeft.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderLeft_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitBorderRight' transient property
  //····················································································································

  private var mObserversOf_boardLimitBorderRight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitBorderRight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderRight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderRight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitBorderRight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderRight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderRight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitBorderRight_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderRight.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderRight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitBorderRight_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderRight.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderRight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'borderElementCountString' transient property
  //····················································································································

  private var mObserversOf_borderElementCountString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_borderElementCountString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_borderElementCountString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.borderElementCountString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_borderElementCountString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_borderElementCountString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.borderElementCountString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_borderElementCountString_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_borderElementCountString.apply { (_ observer : EBEvent) in
        managedObject.borderElementCountString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_borderElementCountString_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_borderElementCountString.apply { (_ observer : EBEvent) in
        managedObject.borderElementCountString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'borderOutlineBackground' transient property
  //····················································································································

  private var mObserversOf_borderOutlineBackground = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_borderOutlineBackground (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_borderOutlineBackground.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.borderOutlineBackground_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_borderOutlineBackground (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_borderOutlineBackground.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.borderOutlineBackground_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_borderOutlineBackground_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_borderOutlineBackground.apply { (_ observer : EBEvent) in
        managedObject.borderOutlineBackground_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_borderOutlineBackground_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_borderOutlineBackground.apply { (_ observer : EBEvent) in
        managedObject.borderOutlineBackground_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boarderViewBackground' transient property
  //····················································································································

  private var mObserversOf_boarderViewBackground = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boarderViewBackground (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boarderViewBackground.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boarderViewBackground_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boarderViewBackground (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boarderViewBackground.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boarderViewBackground_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boarderViewBackground_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boarderViewBackground.apply { (_ observer : EBEvent) in
        managedObject.boarderViewBackground_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boarderViewBackground_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boarderViewBackground.apply { (_ observer : EBEvent) in
        managedObject.boarderViewBackground_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'deviceNames' transient property
  //····················································································································

  private var mObserversOf_deviceNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_deviceNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_deviceNames.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceNames_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_deviceNames.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceNames_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_deviceNames_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_deviceNames.apply { (_ observer : EBEvent) in
        managedObject.deviceNames_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_deviceNames_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_deviceNames.apply { (_ observer : EBEvent) in
        managedObject.deviceNames_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'schematicBackgroundDisplay' transient property
  //····················································································································

  private var mObserversOf_schematicBackgroundDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_schematicBackgroundDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_schematicBackgroundDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicBackgroundDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_schematicBackgroundDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_schematicBackgroundDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicBackgroundDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_schematicBackgroundDisplay_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicBackgroundDisplay.apply { (_ observer : EBEvent) in
        managedObject.schematicBackgroundDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_schematicBackgroundDisplay_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicBackgroundDisplay.apply { (_ observer : EBEvent) in
        managedObject.schematicBackgroundDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netWarningCount' transient property
  //····················································································································

  private var mObserversOf_netWarningCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netWarningCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netWarningCount.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netWarningCount_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netWarningCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netWarningCount.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netWarningCount_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netWarningCount_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_netWarningCount.apply { (_ observer : EBEvent) in
        managedObject.netWarningCount_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netWarningCount_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_netWarningCount.apply { (_ observer : EBEvent) in
        managedObject.netWarningCount_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'unplacedSymbols' transient property
  //····················································································································

  private var mObserversOf_unplacedSymbols = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unplacedSymbols_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unplacedSymbols_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_unplacedSymbols_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_unplacedSymbols.apply { (_ observer : EBEvent) in
        managedObject.unplacedSymbols_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_unplacedSymbols_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_unplacedSymbols.apply { (_ observer : EBEvent) in
        managedObject.unplacedSymbols_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'unplacedPackages' transient property
  //····················································································································

  private var mObserversOf_unplacedPackages = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_unplacedPackages (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unplacedPackages.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unplacedPackages_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_unplacedPackages (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unplacedPackages.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unplacedPackages_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_unplacedPackages_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_unplacedPackages.apply { (_ observer : EBEvent) in
        managedObject.unplacedPackages_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_unplacedPackages_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_unplacedPackages.apply { (_ observer : EBEvent) in
        managedObject.unplacedPackages_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'schematicStatusMessage' transient property
  //····················································································································

  private var mObserversOf_schematicStatusMessage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_schematicStatusMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_schematicStatusMessage.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicStatusMessage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_schematicStatusMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_schematicStatusMessage.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicStatusMessage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_schematicStatusMessage_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicStatusMessage.apply { (_ observer : EBEvent) in
        managedObject.schematicStatusMessage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_schematicStatusMessage_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicStatusMessage.apply { (_ observer : EBEvent) in
        managedObject.schematicStatusMessage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'schematicStatusImage' transient property
  //····················································································································

  private var mObserversOf_schematicStatusImage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_schematicStatusImage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_schematicStatusImage.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicStatusImage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_schematicStatusImage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_schematicStatusImage.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicStatusImage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_schematicStatusImage_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicStatusImage.apply { (_ observer : EBEvent) in
        managedObject.schematicStatusImage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_schematicStatusImage_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicStatusImage.apply { (_ observer : EBEvent) in
        managedObject.schematicStatusImage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_ProjectRoot : ReadOnlyArrayOf_ProjectRoot {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : ProjectRoot, _ right : ProjectRoot) -> Bool > = nil 
  private var mSortObserver : EBModelNotifierEvent? = nil

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_ProjectRoot? = nil
  private var mTransientKind : PropertyKind = .empty

 
  func setDataProvider (_ inProvider : ReadOnlyArrayOf_ProjectRoot,
                        sortCallback inSortCallBack : Optional < (_ left : ProjectRoot, _ right : ProjectRoot) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = []
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newArray : [ProjectRoot] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        if let sortFunction = self.mIsOrderedBefore {
          newArray = v.sorted { sortFunction ($0, $1) }
        }else{
          newArray = v
        }
        self.mTransientKind = .single
       case .multiple :
        newArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newArray = []
      self.mTransientKind = .empty
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [ProjectRoot] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [ProjectRoot] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_ProjectRoot <SUPER : EBManagedObject> : ReadOnlyArrayOf_ProjectRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    var newModelArray : [SUPER] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newModelArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newModelArray = v
        self.mTransientKind = .single
       case .multiple :
        newModelArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newModelArray = []
      self.mTransientKind = .empty
    }
    var newArray = [ProjectRoot] ()
    for superObject in newModelArray {
      if let object = superObject as? ProjectRoot {
        newArray.append (object)
      }
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [ProjectRoot] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [ProjectRoot] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_ProjectRoot : ReadOnlyArrayOf_ProjectRoot {

  //····················································································································
 
  func setProp (_ value :  [ProjectRoot]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_ProjectRoot : ReadWriteArrayOf_ProjectRoot {

  //····················································································································

  private var mModel : ReadWriteArrayOf_ProjectRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_ProjectRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [ProjectRoot]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [ProjectRoot]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [ProjectRoot] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : [ProjectRoot] {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_ProjectRoot : ReadWriteArrayOf_ProjectRoot, EBSignatureObserverProtocol {

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ProjectRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ProjectRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ProjectRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ProjectRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [ProjectRoot]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [ProjectRoot]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <ProjectRoot>, addedSet inAddedSet : Set <ProjectRoot>) {
    for managedObject in inRemovedSet {
      managedObject.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (managedObject)
    }
  //---
    for managedObject in inAddedSet {
      managedObject.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }
 
  //····················································································································

  override var prop : EBSelection < [ProjectRoot] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [ProjectRoot]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [ProjectRoot] { return self.mInternalArrayValue }

  //····················································································································

  func remove (_ object : ProjectRoot) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : ProjectRoot) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mInternalArrayValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PreferencesArrayOf_ProjectRoot : StoredArrayOf_ProjectRoot {

  //····················································································································

  private let mPrefKey : String
  private let mObserverForWritingPreferences = EBOutletEvent ()
  
  //····················································································································

  init (prefKey : String) {
    self.mPrefKey = prefKey
    super.init ()
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [ProjectRoot] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "ProjectRoot") as? ProjectRoot {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
    self.addEBObserverOf_mArtworkName (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mLastERCCheckingIsSuccess (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mLastERCCheckingSignature (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mAutoRouterPreferredDirections (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mAutorouterSnapAngle (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mTrackLengthUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mLayoutClearance (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mLayoutClearanceUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardSelectedInspector (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardHorizontalFlip (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardVerticalFlip (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardGridStyle (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardGridDisplayFactor (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardZoom (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardGridStep (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardGridStepUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mDisplayFrontPads (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mDisplayBackPads (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mDisplayPadNumbers (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mDisplayFrontLegend (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mDisplayBackLegend (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mDisplayFrontLayout (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mDisplayBackLayout (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mDisplayFrontRestrictRectangles (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mDisplayBackRestrictRectangles (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mErrorOrWarningIssueSize (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mControlKeyHiliteDiameter (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitsWidth (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitsWidthUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitsSelectedInspector (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitsHorizontalFlip (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitsVerticalFlip (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitsGridStyle (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitsGridDisplayFactor (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitsZoom (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitsGridStep (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitsGridStepUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardLimitsBoundingBoxUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardPointsBoundingBoxUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardSelectedCurveDisplayUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardClearance (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mBoardClearanceUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSelectedPageIndex (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSelectedSchematicInspector (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSchematicTitle (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSchematicVersion (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSchematicDate (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSchematicHorizontalFlip (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSchematicVerticalFlip (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSchematicZoom (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSchematicGridStyle (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSchematicGridDisplayFactor (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSchematicSheetOrientation (self.mObserverForWritingPreferences)
    self.mObserverForWritingPreferences.mEventCallBack = { [weak self] in self?.writeInPreferences () }
 }

  //····················································································································
 
  private func writeInPreferences () {
    var dictionaryArray = [NSDictionary] ()
    for object in self.mInternalArrayValue {
      let d = NSMutableDictionary ()
      object.saveIntoDictionary (d)
      d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
      dictionaryArray.append (d)
    }
    UserDefaults.standard.set (dictionaryArray, forKey: self.mPrefKey)
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

