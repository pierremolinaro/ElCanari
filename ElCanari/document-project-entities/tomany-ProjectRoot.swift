//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ProjectRoot : ReadOnlyAbstractArrayProperty <ProjectRoot> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <ProjectRoot>, addedSet inAddedSet : Set <ProjectRoot>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_mBoardLimitsWidth_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardLimitsWidthUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardLimitsSelectedInspector_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardLimitsHorizontalFlip_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardLimitsVerticalFlip_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardLimitsGridStyle_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardLimitsGridDisplayFactor_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardLimitsZoom_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardLimitsGridStep_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardLimitsGridStepUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardLimitsBoundingBoxUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardPointsBoundingBoxUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardSelectedCurveDisplayUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardClearance_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mBoardClearanceUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSelectedPageIndex_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSelectedSchematicInspector_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicTitle_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicVersion_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicDate_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicHorizontalFlip_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicVerticalFlip_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicZoom_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicGridStyle_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicGridDisplayFactor_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicSheetOrientation_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_boardLimitsGridStepMultipliedByDisplayFactor_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_selectedSheetIssues_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_connectedPoints_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_connexionWarningString_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_connexionErrorString_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_sheetIndexes_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_unplacedSymbols_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_netsDescription_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardBoundBox_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardLimitPointsTop_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardLimitPointsBottom_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardLimitPointsLeft_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardLimitPointsRight_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardLimitBorderTop_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardLimitBorderBottom_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardLimitBorderLeft_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_boardLimitBorderRight_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_borderElementCountString_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_borderClearanceBackground_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_deviceNames_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_schematicBackgroundDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_netWarningCount_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_schematicStatusImage_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_schematicStatusMessage_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_mBoardLimitsWidth_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardLimitsWidthUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardLimitsSelectedInspector_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardLimitsHorizontalFlip_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardLimitsVerticalFlip_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardLimitsGridStyle_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardLimitsGridDisplayFactor_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardLimitsZoom_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardLimitsGridStep_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardLimitsGridStepUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardLimitsBoundingBoxUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardPointsBoundingBoxUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardSelectedCurveDisplayUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardClearance_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mBoardClearanceUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSelectedPageIndex_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSelectedSchematicInspector_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicTitle_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicVersion_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicDate_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicHorizontalFlip_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicVerticalFlip_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicZoom_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicGridStyle_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicGridDisplayFactor_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicSheetOrientation_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_boardLimitsGridStepMultipliedByDisplayFactor_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_selectedSheetIssues_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_connectedPoints_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_connexionWarningString_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_connexionErrorString_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_sheetIndexes_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_unplacedSymbols_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_netsDescription_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardBoundBox_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardLimitPointsTop_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardLimitPointsBottom_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardLimitPointsLeft_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardLimitPointsRight_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardLimitBorderTop_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardLimitBorderBottom_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardLimitBorderLeft_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_boardLimitBorderRight_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_borderElementCountString_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_borderClearanceBackground_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_deviceNames_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_schematicBackgroundDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_netWarningCount_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_schematicStatusImage_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_schematicStatusMessage_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'mBoardLimitsWidth' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsWidth_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsWidth.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsWidth_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsWidthUnit' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsWidthUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsWidthUnit.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsWidthUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsWidthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsSelectedInspector' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsSelectedInspector = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsSelectedInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsSelectedInspector.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsSelectedInspector_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsSelectedInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsSelectedInspector.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsSelectedInspector_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsSelectedInspector_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsSelectedInspector.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsSelectedInspector_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsSelectedInspector_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsSelectedInspector.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsSelectedInspector_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsHorizontalFlip' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsHorizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsHorizontalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsHorizontalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsHorizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsHorizontalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsHorizontalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsHorizontalFlip_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsHorizontalFlip.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsHorizontalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsHorizontalFlip_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsHorizontalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsHorizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsVerticalFlip' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsVerticalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsVerticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsVerticalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsVerticalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsVerticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsVerticalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsVerticalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsVerticalFlip_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsVerticalFlip.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsVerticalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsVerticalFlip_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsVerticalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsVerticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsGridStyle' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsGridStyle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsGridStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStyle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridStyle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsGridStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStyle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridStyle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsGridStyle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsGridStyle.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsGridStyle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsGridStyle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsGridStyle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsGridStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsGridDisplayFactor' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsGridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsGridDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridDisplayFactor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridDisplayFactor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsGridDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridDisplayFactor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridDisplayFactor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsGridDisplayFactor_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsGridDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsGridDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsGridDisplayFactor_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsGridDisplayFactor.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsGridDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsZoom' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsZoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsZoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsZoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsZoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsZoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsZoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsZoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsZoom_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsZoom.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsZoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsZoom_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsZoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsZoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsGridStep' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsGridStep = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsGridStep (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStep.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridStep_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsGridStep (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStep.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridStep_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsGridStep_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsGridStep.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsGridStep_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsGridStep_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsGridStep.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsGridStep_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsGridStepUnit' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsGridStepUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsGridStepUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStepUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridStepUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsGridStepUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStepUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsGridStepUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsGridStepUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsGridStepUnit.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsGridStepUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsGridStepUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsGridStepUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsGridStepUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsBoundingBoxUnit' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsBoundingBoxUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardLimitsBoundingBoxUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsBoundingBoxUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsBoundingBoxUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsBoundingBoxUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsBoundingBoxUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardLimitsBoundingBoxUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsBoundingBoxUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsBoundingBoxUnit.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsBoundingBoxUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsBoundingBoxUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsBoundingBoxUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsBoundingBoxUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardPointsBoundingBoxUnit' stored property
  //····················································································································

  private var mObserversOf_mBoardPointsBoundingBoxUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardPointsBoundingBoxUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardPointsBoundingBoxUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardPointsBoundingBoxUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardPointsBoundingBoxUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardPointsBoundingBoxUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardPointsBoundingBoxUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardPointsBoundingBoxUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardPointsBoundingBoxUnit.apply { (_ observer : EBEvent) in
        managedObject.mBoardPointsBoundingBoxUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardPointsBoundingBoxUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardPointsBoundingBoxUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardPointsBoundingBoxUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardSelectedCurveDisplayUnit' stored property
  //····················································································································

  private var mObserversOf_mBoardSelectedCurveDisplayUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardSelectedCurveDisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardSelectedCurveDisplayUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardSelectedCurveDisplayUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardSelectedCurveDisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardSelectedCurveDisplayUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardSelectedCurveDisplayUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardSelectedCurveDisplayUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardSelectedCurveDisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.mBoardSelectedCurveDisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardSelectedCurveDisplayUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardSelectedCurveDisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardSelectedCurveDisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardClearance' stored property
  //····················································································································

  private var mObserversOf_mBoardClearance = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardClearance (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardClearance.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardClearance_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardClearance (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardClearance.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardClearance_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardClearance_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardClearance.apply { (_ observer : EBEvent) in
        managedObject.mBoardClearance_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardClearance_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardClearance.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardClearance_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardClearanceUnit' stored property
  //····················································································································

  private var mObserversOf_mBoardClearanceUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mBoardClearanceUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardClearanceUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardClearanceUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardClearanceUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardClearanceUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mBoardClearanceUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardClearanceUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardClearanceUnit.apply { (_ observer : EBEvent) in
        managedObject.mBoardClearanceUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardClearanceUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardClearanceUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardClearanceUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSelectedPageIndex' stored property
  //····················································································································

  private var mObserversOf_mSelectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSelectedPageIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedPageIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSelectedPageIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedPageIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSelectedPageIndex_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSelectedPageIndex.apply { (_ observer : EBEvent) in
        managedObject.mSelectedPageIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSelectedPageIndex_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSelectedPageIndex.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSelectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSelectedSchematicInspector' stored property
  //····················································································································

  private var mObserversOf_mSelectedSchematicInspector = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSelectedSchematicInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSelectedSchematicInspector.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedSchematicInspector_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSelectedSchematicInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSelectedSchematicInspector.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedSchematicInspector_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSelectedSchematicInspector_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSelectedSchematicInspector.apply { (_ observer : EBEvent) in
        managedObject.mSelectedSchematicInspector_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSelectedSchematicInspector_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSelectedSchematicInspector.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSelectedSchematicInspector_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicTitle' stored property
  //····················································································································

  private var mObserversOf_mSchematicTitle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicTitle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicTitle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicTitle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicTitle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicTitle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicTitle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicTitle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicTitle.apply { (_ observer : EBEvent) in
        managedObject.mSchematicTitle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicTitle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicTitle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicTitle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicVersion' stored property
  //····················································································································

  private var mObserversOf_mSchematicVersion = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicVersion (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicVersion.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicVersion_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicVersion (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicVersion.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicVersion_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicVersion_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicVersion.apply { (_ observer : EBEvent) in
        managedObject.mSchematicVersion_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicVersion_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicVersion.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicVersion_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicDate' stored property
  //····················································································································

  private var mObserversOf_mSchematicDate = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicDate (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicDate.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicDate_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicDate (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicDate.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicDate_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicDate_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicDate.apply { (_ observer : EBEvent) in
        managedObject.mSchematicDate_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicDate_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicDate.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicDate_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicHorizontalFlip' stored property
  //····················································································································

  private var mObserversOf_mSchematicHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicHorizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicHorizontalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicHorizontalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicHorizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicHorizontalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicHorizontalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicHorizontalFlip_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicHorizontalFlip.apply { (_ observer : EBEvent) in
        managedObject.mSchematicHorizontalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicHorizontalFlip_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicHorizontalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicHorizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicVerticalFlip' stored property
  //····················································································································

  private var mObserversOf_mSchematicVerticalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicVerticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicVerticalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicVerticalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicVerticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicVerticalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicVerticalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicVerticalFlip_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicVerticalFlip.apply { (_ observer : EBEvent) in
        managedObject.mSchematicVerticalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicVerticalFlip_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicVerticalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicVerticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicZoom' stored property
  //····················································································································

  private var mObserversOf_mSchematicZoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicZoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicZoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicZoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicZoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicZoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicZoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicZoom_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicZoom.apply { (_ observer : EBEvent) in
        managedObject.mSchematicZoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicZoom_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicZoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicZoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicGridStyle' stored property
  //····················································································································

  private var mObserversOf_mSchematicGridStyle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicGridStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicGridStyle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicGridStyle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicGridStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicGridStyle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicGridStyle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicGridStyle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicGridStyle.apply { (_ observer : EBEvent) in
        managedObject.mSchematicGridStyle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicGridStyle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicGridStyle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicGridStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicGridDisplayFactor' stored property
  //····················································································································

  private var mObserversOf_mSchematicGridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicGridDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicGridDisplayFactor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicGridDisplayFactor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicGridDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicGridDisplayFactor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicGridDisplayFactor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicGridDisplayFactor_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicGridDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.mSchematicGridDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicGridDisplayFactor_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicGridDisplayFactor.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicGridDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicSheetOrientation' stored property
  //····················································································································

  private var mObserversOf_mSchematicSheetOrientation = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicSheetOrientation (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicSheetOrientation.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicSheetOrientation_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicSheetOrientation (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicSheetOrientation.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicSheetOrientation_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicSheetOrientation_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicSheetOrientation.apply { (_ observer : EBEvent) in
        managedObject.mSchematicSheetOrientation_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicSheetOrientation_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicSheetOrientation.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicSheetOrientation_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedSheetTitle' proxy property
  //····················································································································

  private var mObserversOf_selectedSheetTitle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedSheetTitle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedSheetTitle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedSheetTitle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedSheetTitle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedSheetTitle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedSheetTitle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedSheetTitle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedSheetTitle.apply { (_ observer : EBEvent) in
        managedObject.selectedSheetTitle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedSheetTitle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_selectedSheetTitle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedSheetTitle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitsGridStepMultipliedByDisplayFactor' transient property
  //····················································································································

  private var mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitsGridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitsGridStepMultipliedByDisplayFactor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitsGridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitsGridStepMultipliedByDisplayFactor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitsGridStepMultipliedByDisplayFactor_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.boardLimitsGridStepMultipliedByDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitsGridStepMultipliedByDisplayFactor_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.boardLimitsGridStepMultipliedByDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedSheetIssues' transient property
  //····················································································································

  private var mObserversOf_selectedSheetIssues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedSheetIssues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedSheetIssues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedSheetIssues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedSheetIssues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedSheetIssues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedSheetIssues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedSheetIssues_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedSheetIssues.apply { (_ observer : EBEvent) in
        managedObject.selectedSheetIssues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedSheetIssues_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedSheetIssues.apply { (_ observer : EBEvent) in
        managedObject.selectedSheetIssues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connectedPoints' transient property
  //····················································································································

  private var mObserversOf_connectedPoints = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connectedPoints.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connectedPoints_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connectedPoints.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connectedPoints_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_connectedPoints_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connectedPoints.apply { (_ observer : EBEvent) in
        managedObject.connectedPoints_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connectedPoints_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connectedPoints.apply { (_ observer : EBEvent) in
        managedObject.connectedPoints_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connexionWarningString' transient property
  //····················································································································

  private var mObserversOf_connexionWarningString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_connexionWarningString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connexionWarningString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connexionWarningString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_connexionWarningString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connexionWarningString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connexionWarningString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_connexionWarningString_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connexionWarningString.apply { (_ observer : EBEvent) in
        managedObject.connexionWarningString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connexionWarningString_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connexionWarningString.apply { (_ observer : EBEvent) in
        managedObject.connexionWarningString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connexionErrorString' transient property
  //····················································································································

  private var mObserversOf_connexionErrorString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_connexionErrorString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connexionErrorString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connexionErrorString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_connexionErrorString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connexionErrorString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connexionErrorString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_connexionErrorString_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connexionErrorString.apply { (_ observer : EBEvent) in
        managedObject.connexionErrorString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connexionErrorString_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connexionErrorString.apply { (_ observer : EBEvent) in
        managedObject.connexionErrorString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sheetIndexes' transient property
  //····················································································································

  private var mObserversOf_sheetIndexes = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_sheetIndexes (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_sheetIndexes.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sheetIndexes_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_sheetIndexes (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_sheetIndexes.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sheetIndexes_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_sheetIndexes_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_sheetIndexes.apply { (_ observer : EBEvent) in
        managedObject.sheetIndexes_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sheetIndexes_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_sheetIndexes.apply { (_ observer : EBEvent) in
        managedObject.sheetIndexes_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'unplacedSymbols' transient property
  //····················································································································

  private var mObserversOf_unplacedSymbols = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unplacedSymbols_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unplacedSymbols_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_unplacedSymbols_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_unplacedSymbols.apply { (_ observer : EBEvent) in
        managedObject.unplacedSymbols_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_unplacedSymbols_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_unplacedSymbols.apply { (_ observer : EBEvent) in
        managedObject.unplacedSymbols_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netsDescription' transient property
  //····················································································································

  private var mObserversOf_netsDescription = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netsDescription (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netsDescription.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netsDescription_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netsDescription (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netsDescription.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netsDescription_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netsDescription_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_netsDescription.apply { (_ observer : EBEvent) in
        managedObject.netsDescription_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netsDescription_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_netsDescription.apply { (_ observer : EBEvent) in
        managedObject.netsDescription_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardBoundBox' transient property
  //····················································································································

  private var mObserversOf_boardBoundBox = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardBoundBox (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardBoundBox.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardBoundBox_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardBoundBox (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardBoundBox.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardBoundBox_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardBoundBox_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardBoundBox.apply { (_ observer : EBEvent) in
        managedObject.boardBoundBox_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardBoundBox_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardBoundBox.apply { (_ observer : EBEvent) in
        managedObject.boardBoundBox_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitPointsTop' transient property
  //····················································································································

  private var mObserversOf_boardLimitPointsTop = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitPointsTop (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitPointsTop.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitPointsTop_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitPointsTop (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitPointsTop.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitPointsTop_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitPointsTop_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitPointsTop.apply { (_ observer : EBEvent) in
        managedObject.boardLimitPointsTop_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitPointsTop_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitPointsTop.apply { (_ observer : EBEvent) in
        managedObject.boardLimitPointsTop_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitPointsBottom' transient property
  //····················································································································

  private var mObserversOf_boardLimitPointsBottom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitPointsBottom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitPointsBottom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitPointsBottom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitPointsBottom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitPointsBottom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitPointsBottom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitPointsBottom_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitPointsBottom.apply { (_ observer : EBEvent) in
        managedObject.boardLimitPointsBottom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitPointsBottom_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitPointsBottom.apply { (_ observer : EBEvent) in
        managedObject.boardLimitPointsBottom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitPointsLeft' transient property
  //····················································································································

  private var mObserversOf_boardLimitPointsLeft = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitPointsLeft (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitPointsLeft.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitPointsLeft_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitPointsLeft (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitPointsLeft.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitPointsLeft_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitPointsLeft_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitPointsLeft.apply { (_ observer : EBEvent) in
        managedObject.boardLimitPointsLeft_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitPointsLeft_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitPointsLeft.apply { (_ observer : EBEvent) in
        managedObject.boardLimitPointsLeft_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitPointsRight' transient property
  //····················································································································

  private var mObserversOf_boardLimitPointsRight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitPointsRight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitPointsRight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitPointsRight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitPointsRight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitPointsRight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitPointsRight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitPointsRight_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitPointsRight.apply { (_ observer : EBEvent) in
        managedObject.boardLimitPointsRight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitPointsRight_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitPointsRight.apply { (_ observer : EBEvent) in
        managedObject.boardLimitPointsRight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitBorderTop' transient property
  //····················································································································

  private var mObserversOf_boardLimitBorderTop = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitBorderTop (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderTop.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderTop_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitBorderTop (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderTop.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderTop_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitBorderTop_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderTop.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderTop_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitBorderTop_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderTop.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderTop_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitBorderBottom' transient property
  //····················································································································

  private var mObserversOf_boardLimitBorderBottom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitBorderBottom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderBottom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderBottom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitBorderBottom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderBottom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderBottom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitBorderBottom_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderBottom.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderBottom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitBorderBottom_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderBottom.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderBottom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitBorderLeft' transient property
  //····················································································································

  private var mObserversOf_boardLimitBorderLeft = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitBorderLeft (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderLeft.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderLeft_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitBorderLeft (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderLeft.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderLeft_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitBorderLeft_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderLeft.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderLeft_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitBorderLeft_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderLeft.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderLeft_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitBorderRight' transient property
  //····················································································································

  private var mObserversOf_boardLimitBorderRight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_boardLimitBorderRight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderRight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderRight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitBorderRight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderRight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.boardLimitBorderRight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitBorderRight_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderRight.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderRight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitBorderRight_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderRight.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderRight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'borderElementCountString' transient property
  //····················································································································

  private var mObserversOf_borderElementCountString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_borderElementCountString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_borderElementCountString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.borderElementCountString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_borderElementCountString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_borderElementCountString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.borderElementCountString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_borderElementCountString_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_borderElementCountString.apply { (_ observer : EBEvent) in
        managedObject.borderElementCountString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_borderElementCountString_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_borderElementCountString.apply { (_ observer : EBEvent) in
        managedObject.borderElementCountString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'borderClearanceBackground' transient property
  //····················································································································

  private var mObserversOf_borderClearanceBackground = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_borderClearanceBackground (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_borderClearanceBackground.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.borderClearanceBackground_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_borderClearanceBackground (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_borderClearanceBackground.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.borderClearanceBackground_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_borderClearanceBackground_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_borderClearanceBackground.apply { (_ observer : EBEvent) in
        managedObject.borderClearanceBackground_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_borderClearanceBackground_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_borderClearanceBackground.apply { (_ observer : EBEvent) in
        managedObject.borderClearanceBackground_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'deviceNames' transient property
  //····················································································································

  private var mObserversOf_deviceNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_deviceNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_deviceNames.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceNames_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_deviceNames.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceNames_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_deviceNames_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_deviceNames.apply { (_ observer : EBEvent) in
        managedObject.deviceNames_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_deviceNames_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_deviceNames.apply { (_ observer : EBEvent) in
        managedObject.deviceNames_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'schematicBackgroundDisplay' transient property
  //····················································································································

  private var mObserversOf_schematicBackgroundDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_schematicBackgroundDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_schematicBackgroundDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicBackgroundDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_schematicBackgroundDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_schematicBackgroundDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicBackgroundDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_schematicBackgroundDisplay_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicBackgroundDisplay.apply { (_ observer : EBEvent) in
        managedObject.schematicBackgroundDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_schematicBackgroundDisplay_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicBackgroundDisplay.apply { (_ observer : EBEvent) in
        managedObject.schematicBackgroundDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netWarningCount' transient property
  //····················································································································

  private var mObserversOf_netWarningCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netWarningCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netWarningCount.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netWarningCount_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netWarningCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netWarningCount.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netWarningCount_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netWarningCount_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_netWarningCount.apply { (_ observer : EBEvent) in
        managedObject.netWarningCount_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netWarningCount_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_netWarningCount.apply { (_ observer : EBEvent) in
        managedObject.netWarningCount_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'schematicStatusImage' transient property
  //····················································································································

  private var mObserversOf_schematicStatusImage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_schematicStatusImage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_schematicStatusImage.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicStatusImage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_schematicStatusImage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_schematicStatusImage.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicStatusImage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_schematicStatusImage_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicStatusImage.apply { (_ observer : EBEvent) in
        managedObject.schematicStatusImage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_schematicStatusImage_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicStatusImage.apply { (_ observer : EBEvent) in
        managedObject.schematicStatusImage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'schematicStatusMessage' transient property
  //····················································································································

  private var mObserversOf_schematicStatusMessage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_schematicStatusMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_schematicStatusMessage.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicStatusMessage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_schematicStatusMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_schematicStatusMessage.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicStatusMessage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_schematicStatusMessage_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicStatusMessage.apply { (_ observer : EBEvent) in
        managedObject.schematicStatusMessage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_schematicStatusMessage_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicStatusMessage.apply { (_ observer : EBEvent) in
        managedObject.schematicStatusMessage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_ProjectRoot : ReadOnlyArrayOf_ProjectRoot {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : ProjectRoot, _ right : ProjectRoot) -> Bool > = nil 
  private var mSortObserver : EBModelNotifierEvent? = nil

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_ProjectRoot? = nil
  private var mTransientKind : PropertyKind = .empty

 
  func setDataProvider (_ inProvider : ReadOnlyArrayOf_ProjectRoot,
                        sortCallback inSortCallBack : Optional < (_ left : ProjectRoot, _ right : ProjectRoot) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = []
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newArray : [ProjectRoot] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        if let sortFunction = self.mIsOrderedBefore {
          newArray = v.sorted { sortFunction ($0, $1) }
        }else{
          newArray = v
        }
        self.mTransientKind = .single
       case .multiple :
        newArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newArray = []
      self.mTransientKind = .empty
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [ProjectRoot] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [ProjectRoot] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_ProjectRoot <SUPER : EBManagedObject> : ReadOnlyArrayOf_ProjectRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    var newModelArray : [SUPER] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newModelArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newModelArray = v
        self.mTransientKind = .single
       case .multiple :
        newModelArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newModelArray = []
      self.mTransientKind = .empty
    }
    var newArray = [ProjectRoot] ()
    for superObject in newModelArray {
      if let object = superObject as? ProjectRoot {
        newArray.append (object)
      }
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [ProjectRoot] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [ProjectRoot] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_ProjectRoot : ReadOnlyArrayOf_ProjectRoot {

  //····················································································································
 
  func setProp (_ value :  [ProjectRoot]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_ProjectRoot : ReadWriteArrayOf_ProjectRoot {

  //····················································································································

  private var mModel : ReadWriteArrayOf_ProjectRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_ProjectRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [ProjectRoot]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [ProjectRoot]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [ProjectRoot] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : [ProjectRoot] {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_ProjectRoot : ReadWriteArrayOf_ProjectRoot, EBSignatureObserverProtocol {

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ProjectRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ProjectRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ProjectRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ProjectRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  //  Init
  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [ProjectRoot] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "ProjectRoot") as? ProjectRoot {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [ProjectRoot]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [ProjectRoot]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //--- Write in preferences ?
    self.writeInPreferences ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <ProjectRoot>, addedSet inAddedSet : Set <ProjectRoot>) {
    for managedObject in inRemovedSet {
      managedObject.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (managedObject)
    }
  //---
    for managedObject in inAddedSet {
      managedObject.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }
 
  //····················································································································

  override var prop : EBSelection < [ProjectRoot] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [ProjectRoot]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [ProjectRoot] { return self.mInternalArrayValue }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mInternalArrayValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  func remove (_ object : ProjectRoot) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : ProjectRoot) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mInternalArrayValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

