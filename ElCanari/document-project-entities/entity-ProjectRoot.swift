//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mArtworkName : class {
  var mArtworkName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mArtworkVersion : class {
  var mArtworkVersion : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mCheckClearanceBetweenPadsOfSameNet : class {
  var mCheckClearanceBetweenPadsOfSameNet : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mLastERCCheckingIsSuccess : class {
  var mLastERCCheckingIsSuccess : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mLastERCCheckingSignature : class {
  var mLastERCCheckingSignature : UInt32 { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mAutoRouterPreferredDirections : class {
  var mAutoRouterPreferredDirections : AutorouterPreferredDirections { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mAutorouterSnapAngle : class {
  var mAutorouterSnapAngle : AutorouterSnapAngle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mRouteDirection : class {
  var mRouteDirection : RouteDirection { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mRouteOrigin : class {
  var mRouteOrigin : RouteOrigin { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mTrackLengthUnit : class {
  var mTrackLengthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mLayoutClearance : class {
  var mLayoutClearance : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mLayoutClearanceUnit : class {
  var mLayoutClearanceUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardSelectedInspector : class {
  var mBoardSelectedInspector : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardHorizontalFlip : class {
  var mBoardHorizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardVerticalFlip : class {
  var mBoardVerticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardGridStyle : class {
  var mBoardGridStyle : GridStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardGridDisplayFactor : class {
  var mBoardGridDisplayFactor : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardZoom : class {
  var mBoardZoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardGridStep : class {
  var mBoardGridStep : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardGridStepUnit : class {
  var mBoardGridStepUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mErrorOrWarningIssueSize : class {
  var mErrorOrWarningIssueSize : Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mControlKeyHiliteDiameter : class {
  var mControlKeyHiliteDiameter : Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardLimitsWidth : class {
  var mBoardLimitsWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardLimitsWidthUnit : class {
  var mBoardLimitsWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardClearance : class {
  var mBoardClearance : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardClearanceUnit : class {
  var mBoardClearanceUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardLimitsSelectedInspector : class {
  var mBoardLimitsSelectedInspector : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardLimitsHorizontalFlip : class {
  var mBoardLimitsHorizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardLimitsVerticalFlip : class {
  var mBoardLimitsVerticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardLimitsGridStyle : class {
  var mBoardLimitsGridStyle : GridStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardLimitsGridDisplayFactor : class {
  var mBoardLimitsGridDisplayFactor : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardLimitsZoom : class {
  var mBoardLimitsZoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardLimitsGridStep : class {
  var mBoardLimitsGridStep : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardLimitsGridStepUnit : class {
  var mBoardLimitsGridStepUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardLimitsBoundingBoxUnit : class {
  var mBoardLimitsBoundingBoxUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardPointsBoundingBoxUnit : class {
  var mBoardPointsBoundingBoxUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardSelectedCurveDisplayUnit : class {
  var mBoardSelectedCurveDisplayUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mBoardShape : class {
  var mBoardShape : BoardShape { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mRectangularBoardWidth : class {
  var mRectangularBoardWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mRectangularBoardWidthUnit : class {
  var mRectangularBoardWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mRectangularBoardHeight : class {
  var mRectangularBoardHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mRectangularBoardHeightUnit : class {
  var mRectangularBoardHeightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mDefaultNetClassName : class {
  var mDefaultNetClassName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSelectedPageIndex : class {
  var mSelectedPageIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSelectedSchematicInspector : class {
  var mSelectedSchematicInspector : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicTitle : class {
  var mSchematicTitle : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicVersion : class {
  var mSchematicVersion : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicDate : class {
  var mSchematicDate : Date { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicHorizontalFlip : class {
  var mSchematicHorizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicVerticalFlip : class {
  var mSchematicVerticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicZoom : class {
  var mSchematicZoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicGridStyle : class {
  var mSchematicGridStyle : GridStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicGridDisplayFactor : class {
  var mSchematicGridDisplayFactor : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicCustomWidth : class {
  var mSchematicCustomWidth : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicCustomWidthUnit : class {
  var mSchematicCustomWidthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicCustomHeight : class {
  var mSchematicCustomHeight : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicCustomHeightUnit : class {
  var mSchematicCustomHeightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicSheetOrientation : class {
  var mSchematicSheetOrientation : SchematicSheetOrientation { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mRastnetDisplay : class {
  var mRastnetDisplay : RastnetDisplay { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mRastnetDisplayedNetName : class {
  var mRastnetDisplayedNetName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mRastnetDisplayedComponentName : class {
  var mRastnetDisplayedComponentName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_minPPTPTTTWdisplayUnit : class {
  var minPPTPTTTWdisplayUnit : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_minPPTPTTTW : class {
  var minPPTPTTTW : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_minValueForOARdisplayUnit : class {
  var minValueForOARdisplayUnit : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_minValueForOARinEBUnit : class {
  var minValueForOARinEBUnit : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_minValueForPHDdisplayUnit : class {
  var minValueForPHDdisplayUnit : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_minValueForPHDinEBUnit : class {
  var minValueForPHDinEBUnit : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_minValueForBoardLimitWidth : class {
  var minValueForBoardLimitWidth : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_minValueForBoardLimitWidthDisplayUnit : class {
  var minValueForBoardLimitWidthDisplayUnit : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_drillDataFileExtension : class {
  var drillDataFileExtension : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_comments : class {
  var comments : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_selectedSheetTitle : class {
  var selectedSheetTitle : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_boardGridStepMultipliedByDisplayFactor : class {
  var boardGridStepMultipliedByDisplayFactor : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_boardLimitsGridStepMultipliedByDisplayFactor : class {
  var boardLimitsGridStepMultipliedByDisplayFactor : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_boardShapeIsRectangular : class {
  var boardShapeIsRectangular : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_selectedSheetIssues : class {
  var selectedSheetIssues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_connectedPoints : class {
  var connectedPoints : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_connexionWarningString : class {
  var connexionWarningString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_connexionErrorString : class {
  var connexionErrorString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_sheetIndexes : class {
  var sheetIndexes : IntArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_netsDescription : class {
  var netsDescription : NetInfoArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_boardIssues : class {
  var boardIssues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_signatureForERCChecking : class {
  var signatureForERCChecking : UInt32? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_ercStatusImage : class {
  var ercStatusImage : NSImage? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_ercStatusMessage : class {
  var ercStatusMessage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_viaCountString : class {
  var viaCountString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_trackCountString : class {
  var trackCountString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_trackLengthString : class {
  var trackLengthString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_boardStatusImage : class {
  var boardStatusImage : NSImage? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_boardStatusMessage : class {
  var boardStatusMessage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_interiorBoundBox : class {
  var interiorBoundBox : CanariRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_boardBoundBox : class {
  var boardBoundBox : CanariRect? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_boardInteriorTop : class {
  var boardInteriorTop : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_boardInteriorBottom : class {
  var boardInteriorBottom : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_boardInteriorLeft : class {
  var boardInteriorLeft : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_boardInteriorRight : class {
  var boardInteriorRight : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_boardLimitBorderTop : class {
  var boardLimitBorderTop : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_boardLimitBorderBottom : class {
  var boardLimitBorderBottom : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_boardLimitBorderLeft : class {
  var boardLimitBorderLeft : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_boardLimitBorderRight : class {
  var boardLimitBorderRight : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_borderElementCountString : class {
  var borderElementCountString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_borderOutlineBackground : class {
  var borderOutlineBackground : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_boarderViewBackground : class {
  var boarderViewBackground : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_deviceNames : class {
  var deviceNames : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_allClassNames : class {
  var allClassNames : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_sheetGeometry : class {
  var sheetGeometry : SchematicSheetGeometry? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_schematicBackgroundDisplay : class {
  var schematicBackgroundDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_netWarningCount : class {
  var netWarningCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_netNamesArray : class {
  var netNamesArray : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_unplacedSymbols : class {
  var unplacedSymbols : StringTagArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_unplacedPackages : class {
  var unplacedPackages : StringTagArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_componentsPlacedInBoard : class {
  var componentsPlacedInBoard : StringTagArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_placedComponentNameArray : class {
  var placedComponentNameArray : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_schematicStatusMessage : class {
  var schematicStatusMessage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_schematicStatusImage : class {
  var schematicStatusImage : NSImage? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ProjectRoot : EBManagedObject,
         ProjectRoot_mArtworkName,
         ProjectRoot_mArtworkVersion,
         ProjectRoot_mCheckClearanceBetweenPadsOfSameNet,
         ProjectRoot_mLastERCCheckingIsSuccess,
         ProjectRoot_mLastERCCheckingSignature,
         ProjectRoot_mAutoRouterPreferredDirections,
         ProjectRoot_mAutorouterSnapAngle,
         ProjectRoot_mRouteDirection,
         ProjectRoot_mRouteOrigin,
         ProjectRoot_mTrackLengthUnit,
         ProjectRoot_mLayoutClearance,
         ProjectRoot_mLayoutClearanceUnit,
         ProjectRoot_mBoardSelectedInspector,
         ProjectRoot_mBoardHorizontalFlip,
         ProjectRoot_mBoardVerticalFlip,
         ProjectRoot_mBoardGridStyle,
         ProjectRoot_mBoardGridDisplayFactor,
         ProjectRoot_mBoardZoom,
         ProjectRoot_mBoardGridStep,
         ProjectRoot_mBoardGridStepUnit,
         ProjectRoot_mErrorOrWarningIssueSize,
         ProjectRoot_mControlKeyHiliteDiameter,
         ProjectRoot_mBoardLimitsWidth,
         ProjectRoot_mBoardLimitsWidthUnit,
         ProjectRoot_mBoardClearance,
         ProjectRoot_mBoardClearanceUnit,
         ProjectRoot_mBoardLimitsSelectedInspector,
         ProjectRoot_mBoardLimitsHorizontalFlip,
         ProjectRoot_mBoardLimitsVerticalFlip,
         ProjectRoot_mBoardLimitsGridStyle,
         ProjectRoot_mBoardLimitsGridDisplayFactor,
         ProjectRoot_mBoardLimitsZoom,
         ProjectRoot_mBoardLimitsGridStep,
         ProjectRoot_mBoardLimitsGridStepUnit,
         ProjectRoot_mBoardLimitsBoundingBoxUnit,
         ProjectRoot_mBoardPointsBoundingBoxUnit,
         ProjectRoot_mBoardSelectedCurveDisplayUnit,
         ProjectRoot_mBoardShape,
         ProjectRoot_mRectangularBoardWidth,
         ProjectRoot_mRectangularBoardWidthUnit,
         ProjectRoot_mRectangularBoardHeight,
         ProjectRoot_mRectangularBoardHeightUnit,
         ProjectRoot_mDefaultNetClassName,
         ProjectRoot_mSelectedPageIndex,
         ProjectRoot_mSelectedSchematicInspector,
         ProjectRoot_mSchematicTitle,
         ProjectRoot_mSchematicVersion,
         ProjectRoot_mSchematicDate,
         ProjectRoot_mSchematicHorizontalFlip,
         ProjectRoot_mSchematicVerticalFlip,
         ProjectRoot_mSchematicZoom,
         ProjectRoot_mSchematicGridStyle,
         ProjectRoot_mSchematicGridDisplayFactor,
         ProjectRoot_mSchematicCustomWidth,
         ProjectRoot_mSchematicCustomWidthUnit,
         ProjectRoot_mSchematicCustomHeight,
         ProjectRoot_mSchematicCustomHeightUnit,
         ProjectRoot_mSchematicSheetOrientation,
         ProjectRoot_mRastnetDisplay,
         ProjectRoot_mRastnetDisplayedNetName,
         ProjectRoot_mRastnetDisplayedComponentName,
         ProjectRoot_minPPTPTTTWdisplayUnit,
         ProjectRoot_minPPTPTTTW,
         ProjectRoot_minValueForOARdisplayUnit,
         ProjectRoot_minValueForOARinEBUnit,
         ProjectRoot_minValueForPHDdisplayUnit,
         ProjectRoot_minValueForPHDinEBUnit,
         ProjectRoot_minValueForBoardLimitWidth,
         ProjectRoot_minValueForBoardLimitWidthDisplayUnit,
         ProjectRoot_drillDataFileExtension,
         ProjectRoot_comments,
         ProjectRoot_selectedSheetTitle,
         ProjectRoot_boardGridStepMultipliedByDisplayFactor,
         ProjectRoot_boardLimitsGridStepMultipliedByDisplayFactor,
         ProjectRoot_boardShapeIsRectangular,
         ProjectRoot_selectedSheetIssues,
         ProjectRoot_connectedPoints,
         ProjectRoot_connexionWarningString,
         ProjectRoot_connexionErrorString,
         ProjectRoot_sheetIndexes,
         ProjectRoot_netsDescription,
         ProjectRoot_boardIssues,
         ProjectRoot_signatureForERCChecking,
         ProjectRoot_ercStatusImage,
         ProjectRoot_ercStatusMessage,
         ProjectRoot_viaCountString,
         ProjectRoot_trackCountString,
         ProjectRoot_trackLengthString,
         ProjectRoot_boardStatusImage,
         ProjectRoot_boardStatusMessage,
         ProjectRoot_interiorBoundBox,
         ProjectRoot_boardBoundBox,
         ProjectRoot_boardInteriorTop,
         ProjectRoot_boardInteriorBottom,
         ProjectRoot_boardInteriorLeft,
         ProjectRoot_boardInteriorRight,
         ProjectRoot_boardLimitBorderTop,
         ProjectRoot_boardLimitBorderBottom,
         ProjectRoot_boardLimitBorderLeft,
         ProjectRoot_boardLimitBorderRight,
         ProjectRoot_borderElementCountString,
         ProjectRoot_borderOutlineBackground,
         ProjectRoot_boarderViewBackground,
         ProjectRoot_deviceNames,
         ProjectRoot_allClassNames,
         ProjectRoot_sheetGeometry,
         ProjectRoot_schematicBackgroundDisplay,
         ProjectRoot_netWarningCount,
         ProjectRoot_netNamesArray,
         ProjectRoot_unplacedSymbols,
         ProjectRoot_unplacedPackages,
         ProjectRoot_componentsPlacedInBoard,
         ProjectRoot_placedComponentNameArray,
         ProjectRoot_schematicStatusMessage,
         ProjectRoot_schematicStatusImage {

  //····················································································································
  //   Atomic property: mArtworkName
  //····················································································································

  let mArtworkName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mArtworkName : String {
    get { return self.mArtworkName_property.propval }
    set { self.mArtworkName_property.setProp (newValue) }
  }

  //····················································································································

  var mArtworkName_property_selection : EBSelection <String> { return self.mArtworkName_property.prop }

  //····················································································································
  //   Atomic property: mArtworkVersion
  //····················································································································

  let mArtworkVersion_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mArtworkVersion : Int {
    get { return self.mArtworkVersion_property.propval }
    set { self.mArtworkVersion_property.setProp (newValue) }
  }

  //····················································································································

  var mArtworkVersion_property_selection : EBSelection <Int> { return self.mArtworkVersion_property.prop }

  //····················································································································
  //   Atomic property: mCheckClearanceBetweenPadsOfSameNet
  //····················································································································

  let mCheckClearanceBetweenPadsOfSameNet_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var mCheckClearanceBetweenPadsOfSameNet : Bool {
    get { return self.mCheckClearanceBetweenPadsOfSameNet_property.propval }
    set { self.mCheckClearanceBetweenPadsOfSameNet_property.setProp (newValue) }
  }

  //····················································································································

  var mCheckClearanceBetweenPadsOfSameNet_property_selection : EBSelection <Bool> { return self.mCheckClearanceBetweenPadsOfSameNet_property.prop }

  //····················································································································
  //   Atomic property: mLastERCCheckingIsSuccess
  //····················································································································

  let mLastERCCheckingIsSuccess_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mLastERCCheckingIsSuccess : Bool {
    get { return self.mLastERCCheckingIsSuccess_property.propval }
    set { self.mLastERCCheckingIsSuccess_property.setProp (newValue) }
  }

  //····················································································································

  var mLastERCCheckingIsSuccess_property_selection : EBSelection <Bool> { return self.mLastERCCheckingIsSuccess_property.prop }

  //····················································································································
  //   Atomic property: mLastERCCheckingSignature
  //····················································································································

  let mLastERCCheckingSignature_property = EBStoredProperty_UInt32 (defaultValue: 1)

  //····················································································································

  var mLastERCCheckingSignature : UInt32 {
    get { return self.mLastERCCheckingSignature_property.propval }
    set { self.mLastERCCheckingSignature_property.setProp (newValue) }
  }

  //····················································································································

  var mLastERCCheckingSignature_property_selection : EBSelection <UInt32> { return self.mLastERCCheckingSignature_property.prop }

  //····················································································································
  //   Atomic property: mAutoRouterPreferredDirections
  //····················································································································

  let mAutoRouterPreferredDirections_property = EBStoredProperty_AutorouterPreferredDirections (defaultValue: AutorouterPreferredDirections.vFrontHback)

  //····················································································································

  var mAutoRouterPreferredDirections : AutorouterPreferredDirections {
    get { return self.mAutoRouterPreferredDirections_property.propval }
    set { self.mAutoRouterPreferredDirections_property.setProp (newValue) }
  }

  //····················································································································

  var mAutoRouterPreferredDirections_property_selection : EBSelection <AutorouterPreferredDirections> { return self.mAutoRouterPreferredDirections_property.prop }

  //····················································································································
  //   Atomic property: mAutorouterSnapAngle
  //····················································································································

  let mAutorouterSnapAngle_property = EBStoredProperty_AutorouterSnapAngle (defaultValue: AutorouterSnapAngle.octolinear)

  //····················································································································

  var mAutorouterSnapAngle : AutorouterSnapAngle {
    get { return self.mAutorouterSnapAngle_property.propval }
    set { self.mAutorouterSnapAngle_property.setProp (newValue) }
  }

  //····················································································································

  var mAutorouterSnapAngle_property_selection : EBSelection <AutorouterSnapAngle> { return self.mAutorouterSnapAngle_property.prop }

  //····················································································································
  //   Atomic property: mRouteDirection
  //····················································································································

  let mRouteDirection_property = EBStoredProperty_RouteDirection (defaultValue: RouteDirection.from)

  //····················································································································

  var mRouteDirection : RouteDirection {
    get { return self.mRouteDirection_property.propval }
    set { self.mRouteDirection_property.setProp (newValue) }
  }

  //····················································································································

  var mRouteDirection_property_selection : EBSelection <RouteDirection> { return self.mRouteDirection_property.prop }

  //····················································································································
  //   Atomic property: mRouteOrigin
  //····················································································································

  let mRouteOrigin_property = EBStoredProperty_RouteOrigin (defaultValue: RouteOrigin.center)

  //····················································································································

  var mRouteOrigin : RouteOrigin {
    get { return self.mRouteOrigin_property.propval }
    set { self.mRouteOrigin_property.setProp (newValue) }
  }

  //····················································································································

  var mRouteOrigin_property_selection : EBSelection <RouteOrigin> { return self.mRouteOrigin_property.prop }

  //····················································································································
  //   Atomic property: mTrackLengthUnit
  //····················································································································

  let mTrackLengthUnit_property = EBStoredProperty_Int (defaultValue: 90000000)

  //····················································································································

  var mTrackLengthUnit : Int {
    get { return self.mTrackLengthUnit_property.propval }
    set { self.mTrackLengthUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mTrackLengthUnit_property_selection : EBSelection <Int> { return self.mTrackLengthUnit_property.prop }

  //····················································································································
  //   Atomic property: mLayoutClearance
  //····················································································································

  let mLayoutClearance_property = EBStoredProperty_Int (defaultValue: 45720)

  //····················································································································

  var mLayoutClearance : Int {
    get { return self.mLayoutClearance_property.propval }
    set { self.mLayoutClearance_property.setProp (newValue) }
  }

  //····················································································································

  var mLayoutClearance_property_selection : EBSelection <Int> { return self.mLayoutClearance_property.prop }

  //····················································································································
  //   Atomic property: mLayoutClearanceUnit
  //····················································································································

  let mLayoutClearanceUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var mLayoutClearanceUnit : Int {
    get { return self.mLayoutClearanceUnit_property.propval }
    set { self.mLayoutClearanceUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mLayoutClearanceUnit_property_selection : EBSelection <Int> { return self.mLayoutClearanceUnit_property.prop }

  //····················································································································
  //   Atomic property: mBoardSelectedInspector
  //····················································································································

  let mBoardSelectedInspector_property = EBStoredProperty_Int (defaultValue: 1)

  //····················································································································

  var mBoardSelectedInspector : Int {
    get { return self.mBoardSelectedInspector_property.propval }
    set { self.mBoardSelectedInspector_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardSelectedInspector_property_selection : EBSelection <Int> { return self.mBoardSelectedInspector_property.prop }

  //····················································································································
  //   Atomic property: mBoardHorizontalFlip
  //····················································································································

  let mBoardHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mBoardHorizontalFlip : Bool {
    get { return self.mBoardHorizontalFlip_property.propval }
    set { self.mBoardHorizontalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardHorizontalFlip_property_selection : EBSelection <Bool> { return self.mBoardHorizontalFlip_property.prop }

  //····················································································································
  //   Atomic property: mBoardVerticalFlip
  //····················································································································

  let mBoardVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mBoardVerticalFlip : Bool {
    get { return self.mBoardVerticalFlip_property.propval }
    set { self.mBoardVerticalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardVerticalFlip_property_selection : EBSelection <Bool> { return self.mBoardVerticalFlip_property.prop }

  //····················································································································
  //   Atomic property: mBoardGridStyle
  //····················································································································

  let mBoardGridStyle_property = EBStoredProperty_GridStyle (defaultValue: GridStyle.line)

  //····················································································································

  var mBoardGridStyle : GridStyle {
    get { return self.mBoardGridStyle_property.propval }
    set { self.mBoardGridStyle_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardGridStyle_property_selection : EBSelection <GridStyle> { return self.mBoardGridStyle_property.prop }

  //····················································································································
  //   Atomic property: mBoardGridDisplayFactor
  //····················································································································

  let mBoardGridDisplayFactor_property = EBStoredProperty_Int (defaultValue: 4)

  //····················································································································

  var mBoardGridDisplayFactor : Int {
    get { return self.mBoardGridDisplayFactor_property.propval }
    set { self.mBoardGridDisplayFactor_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardGridDisplayFactor_property_selection : EBSelection <Int> { return self.mBoardGridDisplayFactor_property.prop }

  //····················································································································
  //   Atomic property: mBoardZoom
  //····················································································································

  let mBoardZoom_property = EBStoredProperty_Int (defaultValue: 200)

  //····················································································································

  var mBoardZoom : Int {
    get { return self.mBoardZoom_property.propval }
    set { self.mBoardZoom_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardZoom_property_selection : EBSelection <Int> { return self.mBoardZoom_property.prop }

  //····················································································································
  //   Atomic property: mBoardGridStep
  //····················································································································

  let mBoardGridStep_property = EBStoredProperty_Int (defaultValue: 57150)

  //····················································································································

  var mBoardGridStep : Int {
    get { return self.mBoardGridStep_property.propval }
    set { self.mBoardGridStep_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardGridStep_property_selection : EBSelection <Int> { return self.mBoardGridStep_property.prop }

  //····················································································································
  //   Atomic property: mBoardGridStepUnit
  //····················································································································

  let mBoardGridStepUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var mBoardGridStepUnit : Int {
    get { return self.mBoardGridStepUnit_property.propval }
    set { self.mBoardGridStepUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardGridStepUnit_property_selection : EBSelection <Int> { return self.mBoardGridStepUnit_property.prop }

  //····················································································································
  //   Atomic property: mErrorOrWarningIssueSize
  //····················································································································

  let mErrorOrWarningIssueSize_property = EBStoredProperty_Double (defaultValue: 6)

  //····················································································································

  var mErrorOrWarningIssueSize : Double {
    get { return self.mErrorOrWarningIssueSize_property.propval }
    set { self.mErrorOrWarningIssueSize_property.setProp (newValue) }
  }

  //····················································································································

  var mErrorOrWarningIssueSize_property_selection : EBSelection <Double> { return self.mErrorOrWarningIssueSize_property.prop }

  //····················································································································
  //   Atomic property: mControlKeyHiliteDiameter
  //····················································································································

  let mControlKeyHiliteDiameter_property = EBStoredProperty_Double (defaultValue: 100)

  //····················································································································

  var mControlKeyHiliteDiameter : Double {
    get { return self.mControlKeyHiliteDiameter_property.propval }
    set { self.mControlKeyHiliteDiameter_property.setProp (newValue) }
  }

  //····················································································································

  var mControlKeyHiliteDiameter_property_selection : EBSelection <Double> { return self.mControlKeyHiliteDiameter_property.prop }

  //····················································································································
  //   Atomic property: mBoardLimitsWidth
  //····················································································································

  let mBoardLimitsWidth_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var mBoardLimitsWidth : Int {
    get { return self.mBoardLimitsWidth_property.propval }
    set { self.mBoardLimitsWidth_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardLimitsWidth_property_selection : EBSelection <Int> { return self.mBoardLimitsWidth_property.prop }

  //····················································································································
  //   Atomic property: mBoardLimitsWidthUnit
  //····················································································································

  let mBoardLimitsWidthUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var mBoardLimitsWidthUnit : Int {
    get { return self.mBoardLimitsWidthUnit_property.propval }
    set { self.mBoardLimitsWidthUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardLimitsWidthUnit_property_selection : EBSelection <Int> { return self.mBoardLimitsWidthUnit_property.prop }

  //····················································································································
  //   Atomic property: mBoardClearance
  //····················································································································

  let mBoardClearance_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var mBoardClearance : Int {
    get { return self.mBoardClearance_property.propval }
    set { self.mBoardClearance_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardClearance_property_selection : EBSelection <Int> { return self.mBoardClearance_property.prop }

  //····················································································································
  //   Atomic property: mBoardClearanceUnit
  //····················································································································

  let mBoardClearanceUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var mBoardClearanceUnit : Int {
    get { return self.mBoardClearanceUnit_property.propval }
    set { self.mBoardClearanceUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardClearanceUnit_property_selection : EBSelection <Int> { return self.mBoardClearanceUnit_property.prop }

  //····················································································································
  //   Atomic property: mBoardLimitsSelectedInspector
  //····················································································································

  let mBoardLimitsSelectedInspector_property = EBStoredProperty_Int (defaultValue: 1)

  //····················································································································

  var mBoardLimitsSelectedInspector : Int {
    get { return self.mBoardLimitsSelectedInspector_property.propval }
    set { self.mBoardLimitsSelectedInspector_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardLimitsSelectedInspector_property_selection : EBSelection <Int> { return self.mBoardLimitsSelectedInspector_property.prop }

  //····················································································································
  //   Atomic property: mBoardLimitsHorizontalFlip
  //····················································································································

  let mBoardLimitsHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mBoardLimitsHorizontalFlip : Bool {
    get { return self.mBoardLimitsHorizontalFlip_property.propval }
    set { self.mBoardLimitsHorizontalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardLimitsHorizontalFlip_property_selection : EBSelection <Bool> { return self.mBoardLimitsHorizontalFlip_property.prop }

  //····················································································································
  //   Atomic property: mBoardLimitsVerticalFlip
  //····················································································································

  let mBoardLimitsVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mBoardLimitsVerticalFlip : Bool {
    get { return self.mBoardLimitsVerticalFlip_property.propval }
    set { self.mBoardLimitsVerticalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardLimitsVerticalFlip_property_selection : EBSelection <Bool> { return self.mBoardLimitsVerticalFlip_property.prop }

  //····················································································································
  //   Atomic property: mBoardLimitsGridStyle
  //····················································································································

  let mBoardLimitsGridStyle_property = EBStoredProperty_GridStyle (defaultValue: GridStyle.line)

  //····················································································································

  var mBoardLimitsGridStyle : GridStyle {
    get { return self.mBoardLimitsGridStyle_property.propval }
    set { self.mBoardLimitsGridStyle_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardLimitsGridStyle_property_selection : EBSelection <GridStyle> { return self.mBoardLimitsGridStyle_property.prop }

  //····················································································································
  //   Atomic property: mBoardLimitsGridDisplayFactor
  //····················································································································

  let mBoardLimitsGridDisplayFactor_property = EBStoredProperty_Int (defaultValue: 5)

  //····················································································································

  var mBoardLimitsGridDisplayFactor : Int {
    get { return self.mBoardLimitsGridDisplayFactor_property.propval }
    set { self.mBoardLimitsGridDisplayFactor_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardLimitsGridDisplayFactor_property_selection : EBSelection <Int> { return self.mBoardLimitsGridDisplayFactor_property.prop }

  //····················································································································
  //   Atomic property: mBoardLimitsZoom
  //····················································································································

  let mBoardLimitsZoom_property = EBStoredProperty_Int (defaultValue: 200)

  //····················································································································

  var mBoardLimitsZoom : Int {
    get { return self.mBoardLimitsZoom_property.propval }
    set { self.mBoardLimitsZoom_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardLimitsZoom_property_selection : EBSelection <Int> { return self.mBoardLimitsZoom_property.prop }

  //····················································································································
  //   Atomic property: mBoardLimitsGridStep
  //····················································································································

  let mBoardLimitsGridStep_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var mBoardLimitsGridStep : Int {
    get { return self.mBoardLimitsGridStep_property.propval }
    set { self.mBoardLimitsGridStep_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardLimitsGridStep_property_selection : EBSelection <Int> { return self.mBoardLimitsGridStep_property.prop }

  //····················································································································
  //   Atomic property: mBoardLimitsGridStepUnit
  //····················································································································

  let mBoardLimitsGridStepUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var mBoardLimitsGridStepUnit : Int {
    get { return self.mBoardLimitsGridStepUnit_property.propval }
    set { self.mBoardLimitsGridStepUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardLimitsGridStepUnit_property_selection : EBSelection <Int> { return self.mBoardLimitsGridStepUnit_property.prop }

  //····················································································································
  //   Atomic property: mBoardLimitsBoundingBoxUnit
  //····················································································································

  let mBoardLimitsBoundingBoxUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var mBoardLimitsBoundingBoxUnit : Int {
    get { return self.mBoardLimitsBoundingBoxUnit_property.propval }
    set { self.mBoardLimitsBoundingBoxUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardLimitsBoundingBoxUnit_property_selection : EBSelection <Int> { return self.mBoardLimitsBoundingBoxUnit_property.prop }

  //····················································································································
  //   Atomic property: mBoardPointsBoundingBoxUnit
  //····················································································································

  let mBoardPointsBoundingBoxUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var mBoardPointsBoundingBoxUnit : Int {
    get { return self.mBoardPointsBoundingBoxUnit_property.propval }
    set { self.mBoardPointsBoundingBoxUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardPointsBoundingBoxUnit_property_selection : EBSelection <Int> { return self.mBoardPointsBoundingBoxUnit_property.prop }

  //····················································································································
  //   Atomic property: mBoardSelectedCurveDisplayUnit
  //····················································································································

  let mBoardSelectedCurveDisplayUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var mBoardSelectedCurveDisplayUnit : Int {
    get { return self.mBoardSelectedCurveDisplayUnit_property.propval }
    set { self.mBoardSelectedCurveDisplayUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardSelectedCurveDisplayUnit_property_selection : EBSelection <Int> { return self.mBoardSelectedCurveDisplayUnit_property.prop }

  //····················································································································
  //   Atomic property: mBoardShape
  //····················································································································

  let mBoardShape_property = EBStoredProperty_BoardShape (defaultValue: BoardShape.rectangular)

  //····················································································································

  var mBoardShape : BoardShape {
    get { return self.mBoardShape_property.propval }
    set { self.mBoardShape_property.setProp (newValue) }
  }

  //····················································································································

  var mBoardShape_property_selection : EBSelection <BoardShape> { return self.mBoardShape_property.prop }

  //····················································································································
  //   Atomic property: mRectangularBoardWidth
  //····················································································································

  let mRectangularBoardWidth_property = EBStoredProperty_Int (defaultValue: 9000000)

  //····················································································································

  var mRectangularBoardWidth : Int {
    get { return self.mRectangularBoardWidth_property.propval }
    set { self.mRectangularBoardWidth_property.setProp (newValue) }
  }

  //····················································································································

  var mRectangularBoardWidth_property_selection : EBSelection <Int> { return self.mRectangularBoardWidth_property.prop }

  //····················································································································
  //   Atomic property: mRectangularBoardWidthUnit
  //····················································································································

  let mRectangularBoardWidthUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var mRectangularBoardWidthUnit : Int {
    get { return self.mRectangularBoardWidthUnit_property.propval }
    set { self.mRectangularBoardWidthUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mRectangularBoardWidthUnit_property_selection : EBSelection <Int> { return self.mRectangularBoardWidthUnit_property.prop }

  //····················································································································
  //   Atomic property: mRectangularBoardHeight
  //····················································································································

  let mRectangularBoardHeight_property = EBStoredProperty_Int (defaultValue: 9000000)

  //····················································································································

  var mRectangularBoardHeight : Int {
    get { return self.mRectangularBoardHeight_property.propval }
    set { self.mRectangularBoardHeight_property.setProp (newValue) }
  }

  //····················································································································

  var mRectangularBoardHeight_property_selection : EBSelection <Int> { return self.mRectangularBoardHeight_property.prop }

  //····················································································································
  //   Atomic property: mRectangularBoardHeightUnit
  //····················································································································

  let mRectangularBoardHeightUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var mRectangularBoardHeightUnit : Int {
    get { return self.mRectangularBoardHeightUnit_property.propval }
    set { self.mRectangularBoardHeightUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mRectangularBoardHeightUnit_property_selection : EBSelection <Int> { return self.mRectangularBoardHeightUnit_property.prop }

  //····················································································································
  //   To many property: mSheets
  //····················································································································

  let mSheets_property = StoredArrayOf_SheetInProject (usedForSignature: false)

  //····················································································································

  var mSheets_property_selection : EBSelection < [SheetInProject] > {
    return self.mSheets_property.prop
  }

  //····················································································································

  var mSheets : [SheetInProject] {
    get { return self.mSheets_property.propval }
    set { self.mSheets_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDefaultNetClassName
  //····················································································································

  let mDefaultNetClassName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mDefaultNetClassName : String {
    get { return self.mDefaultNetClassName_property.propval }
    set { self.mDefaultNetClassName_property.setProp (newValue) }
  }

  //····················································································································

  var mDefaultNetClassName_property_selection : EBSelection <String> { return self.mDefaultNetClassName_property.prop }

  //····················································································································
  //   Atomic property: mSelectedPageIndex
  //····················································································································

  let mSelectedPageIndex_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mSelectedPageIndex : Int {
    get { return self.mSelectedPageIndex_property.propval }
    set { self.mSelectedPageIndex_property.setProp (newValue) }
  }

  //····················································································································

  var mSelectedPageIndex_property_selection : EBSelection <Int> { return self.mSelectedPageIndex_property.prop }

  //····················································································································
  //   Atomic property: mSelectedSchematicInspector
  //····················································································································

  let mSelectedSchematicInspector_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mSelectedSchematicInspector : Int {
    get { return self.mSelectedSchematicInspector_property.propval }
    set { self.mSelectedSchematicInspector_property.setProp (newValue) }
  }

  //····················································································································

  var mSelectedSchematicInspector_property_selection : EBSelection <Int> { return self.mSelectedSchematicInspector_property.prop }

  //····················································································································
  //   Atomic property: mSchematicTitle
  //····················································································································

  let mSchematicTitle_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mSchematicTitle : String {
    get { return self.mSchematicTitle_property.propval }
    set { self.mSchematicTitle_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicTitle_property_selection : EBSelection <String> { return self.mSchematicTitle_property.prop }

  //····················································································································
  //   Atomic property: mSchematicVersion
  //····················································································································

  let mSchematicVersion_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mSchematicVersion : String {
    get { return self.mSchematicVersion_property.propval }
    set { self.mSchematicVersion_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicVersion_property_selection : EBSelection <String> { return self.mSchematicVersion_property.prop }

  //····················································································································
  //   Atomic property: mSchematicDate
  //····················································································································

  let mSchematicDate_property = EBStoredProperty_Date (defaultValue: Date ())

  //····················································································································

  var mSchematicDate : Date {
    get { return self.mSchematicDate_property.propval }
    set { self.mSchematicDate_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicDate_property_selection : EBSelection <Date> { return self.mSchematicDate_property.prop }

  //····················································································································
  //   Atomic property: mSchematicHorizontalFlip
  //····················································································································

  let mSchematicHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mSchematicHorizontalFlip : Bool {
    get { return self.mSchematicHorizontalFlip_property.propval }
    set { self.mSchematicHorizontalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicHorizontalFlip_property_selection : EBSelection <Bool> { return self.mSchematicHorizontalFlip_property.prop }

  //····················································································································
  //   Atomic property: mSchematicVerticalFlip
  //····················································································································

  let mSchematicVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mSchematicVerticalFlip : Bool {
    get { return self.mSchematicVerticalFlip_property.propval }
    set { self.mSchematicVerticalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicVerticalFlip_property_selection : EBSelection <Bool> { return self.mSchematicVerticalFlip_property.prop }

  //····················································································································
  //   Atomic property: mSchematicZoom
  //····················································································································

  let mSchematicZoom_property = EBStoredProperty_Int (defaultValue: 100)

  //····················································································································

  var mSchematicZoom : Int {
    get { return self.mSchematicZoom_property.propval }
    set { self.mSchematicZoom_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicZoom_property_selection : EBSelection <Int> { return self.mSchematicZoom_property.prop }

  //····················································································································
  //   Atomic property: mSchematicGridStyle
  //····················································································································

  let mSchematicGridStyle_property = EBStoredProperty_GridStyle (defaultValue: GridStyle.line)

  //····················································································································

  var mSchematicGridStyle : GridStyle {
    get { return self.mSchematicGridStyle_property.propval }
    set { self.mSchematicGridStyle_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicGridStyle_property_selection : EBSelection <GridStyle> { return self.mSchematicGridStyle_property.prop }

  //····················································································································
  //   Atomic property: mSchematicGridDisplayFactor
  //····················································································································

  let mSchematicGridDisplayFactor_property = EBStoredProperty_Int (defaultValue: 4)

  //····················································································································

  var mSchematicGridDisplayFactor : Int {
    get { return self.mSchematicGridDisplayFactor_property.propval }
    set { self.mSchematicGridDisplayFactor_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicGridDisplayFactor_property_selection : EBSelection <Int> { return self.mSchematicGridDisplayFactor_property.prop }

  //····················································································································
  //   Atomic property: mSchematicCustomWidth
  //····················································································································

  let mSchematicCustomWidth_property = EBStoredProperty_Int (defaultValue: 27000000)

  //····················································································································

  var mSchematicCustomWidth : Int {
    get { return self.mSchematicCustomWidth_property.propval }
    set { self.mSchematicCustomWidth_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicCustomWidth_property_selection : EBSelection <Int> { return self.mSchematicCustomWidth_property.prop }

  //····················································································································
  //   Atomic property: mSchematicCustomWidthUnit
  //····················································································································

  let mSchematicCustomWidthUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var mSchematicCustomWidthUnit : Int {
    get { return self.mSchematicCustomWidthUnit_property.propval }
    set { self.mSchematicCustomWidthUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicCustomWidthUnit_property_selection : EBSelection <Int> { return self.mSchematicCustomWidthUnit_property.prop }

  //····················································································································
  //   Atomic property: mSchematicCustomHeight
  //····················································································································

  let mSchematicCustomHeight_property = EBStoredProperty_Int (defaultValue: 27000000)

  //····················································································································

  var mSchematicCustomHeight : Int {
    get { return self.mSchematicCustomHeight_property.propval }
    set { self.mSchematicCustomHeight_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicCustomHeight_property_selection : EBSelection <Int> { return self.mSchematicCustomHeight_property.prop }

  //····················································································································
  //   Atomic property: mSchematicCustomHeightUnit
  //····················································································································

  let mSchematicCustomHeightUnit_property = EBStoredProperty_Int (defaultValue: 90000)

  //····················································································································

  var mSchematicCustomHeightUnit : Int {
    get { return self.mSchematicCustomHeightUnit_property.propval }
    set { self.mSchematicCustomHeightUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicCustomHeightUnit_property_selection : EBSelection <Int> { return self.mSchematicCustomHeightUnit_property.prop }

  //····················································································································
  //   To many property: mNetClasses
  //····················································································································

  let mNetClasses_property = StoredArrayOf_NetClassInProject (usedForSignature: false)

  //····················································································································

  var mNetClasses_property_selection : EBSelection < [NetClassInProject] > {
    return self.mNetClasses_property.prop
  }

  //····················································································································

  var mNetClasses : [NetClassInProject] {
    get { return self.mNetClasses_property.propval }
    set { self.mNetClasses_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mFonts
  //····················································································································

  let mFonts_property = StoredArrayOf_FontInProject (usedForSignature: false)

  //····················································································································

  var mFonts_property_selection : EBSelection < [FontInProject] > {
    return self.mFonts_property.prop
  }

  //····················································································································

  var mFonts : [FontInProject] {
    get { return self.mFonts_property.propval }
    set { self.mFonts_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mDevices
  //····················································································································

  let mDevices_property = StoredArrayOf_DeviceInProject (usedForSignature: false)

  //····················································································································

  var mDevices_property_selection : EBSelection < [DeviceInProject] > {
    return self.mDevices_property.prop
  }

  //····················································································································

  var mDevices : [DeviceInProject] {
    get { return self.mDevices_property.propval }
    set { self.mDevices_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSchematicSheetOrientation
  //····················································································································

  let mSchematicSheetOrientation_property = EBStoredProperty_SchematicSheetOrientation (defaultValue: SchematicSheetOrientation.a4Horizontal)

  //····················································································································

  var mSchematicSheetOrientation : SchematicSheetOrientation {
    get { return self.mSchematicSheetOrientation_property.propval }
    set { self.mSchematicSheetOrientation_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicSheetOrientation_property_selection : EBSelection <SchematicSheetOrientation> { return self.mSchematicSheetOrientation_property.prop }

  //····················································································································
  //   To many property: mBorderCurves
  //····················································································································

  let mBorderCurves_property = StoredArrayOf_BorderCurve (usedForSignature: false)

  //····················································································································

  var mBorderCurves_property_selection : EBSelection < [BorderCurve] > {
    return self.mBorderCurves_property.prop
  }

  //····················································································································

  var mBorderCurves : [BorderCurve] {
    get { return self.mBorderCurves_property.propval }
    set { self.mBorderCurves_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mBoardObjects
  //····················································································································

  let mBoardObjects_property = StoredArrayOf_BoardObject (usedForSignature: false)

  //····················································································································

  var mBoardObjects_property_selection : EBSelection < [BoardObject] > {
    return self.mBoardObjects_property.prop
  }

  //····················································································································

  var mBoardObjects : [BoardObject] {
    get { return self.mBoardObjects_property.propval }
    set { self.mBoardObjects_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mRastnetDisplay
  //····················································································································

  let mRastnetDisplay_property = EBStoredProperty_RastnetDisplay (defaultValue: RastnetDisplay.allNets)

  //····················································································································

  var mRastnetDisplay : RastnetDisplay {
    get { return self.mRastnetDisplay_property.propval }
    set { self.mRastnetDisplay_property.setProp (newValue) }
  }

  //····················································································································

  var mRastnetDisplay_property_selection : EBSelection <RastnetDisplay> { return self.mRastnetDisplay_property.prop }

  //····················································································································
  //   Atomic property: mRastnetDisplayedNetName
  //····················································································································

  let mRastnetDisplayedNetName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mRastnetDisplayedNetName : String {
    get { return self.mRastnetDisplayedNetName_property.propval }
    set { self.mRastnetDisplayedNetName_property.setProp (newValue) }
  }

  //····················································································································

  var mRastnetDisplayedNetName_property_selection : EBSelection <String> { return self.mRastnetDisplayedNetName_property.prop }

  //····················································································································
  //   Atomic property: mRastnetDisplayedComponentName
  //····················································································································

  let mRastnetDisplayedComponentName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mRastnetDisplayedComponentName : String {
    get { return self.mRastnetDisplayedComponentName_property.propval }
    set { self.mRastnetDisplayedComponentName_property.setProp (newValue) }
  }

  //····················································································································

  var mRastnetDisplayedComponentName_property_selection : EBSelection <String> { return self.mRastnetDisplayedComponentName_property.prop }

  //····················································································································
  //   To many property: mComponents
  //····················································································································

  let mComponents_property = StoredArrayOf_ComponentInProject (usedForSignature: false)

  //····················································································································

  var mComponents_property_selection : EBSelection < [ComponentInProject] > {
    return self.mComponents_property.prop
  }

  //····················································································································

  var mComponents : [ComponentInProject] {
    get { return self.mComponents_property.propval }
    set { self.mComponents_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic proxy property: minPPTPTTTWdisplayUnit
  //····················································································································

  let minPPTPTTTWdisplayUnit_property = EBPropertyProxy_Int ()

  //····················································································································

  var minPPTPTTTWdisplayUnit : Int? {
    get {
      switch self.minPPTPTTTWdisplayUnit_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minPPTPTTTWdisplayUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var minPPTPTTTWdisplayUnit_property_selection : EBSelection <Int> { return self.minPPTPTTTWdisplayUnit_property.prop }

  //····················································································································
  //   Atomic proxy property: minPPTPTTTW
  //····················································································································

  let minPPTPTTTW_property = EBPropertyProxy_Int ()

  //····················································································································

  var minPPTPTTTW : Int? {
    get {
      switch self.minPPTPTTTW_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minPPTPTTTW_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var minPPTPTTTW_property_selection : EBSelection <Int> { return self.minPPTPTTTW_property.prop }

  //····················································································································
  //   Atomic proxy property: minValueForOARdisplayUnit
  //····················································································································

  let minValueForOARdisplayUnit_property = EBPropertyProxy_Int ()

  //····················································································································

  var minValueForOARdisplayUnit : Int? {
    get {
      switch self.minValueForOARdisplayUnit_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForOARdisplayUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var minValueForOARdisplayUnit_property_selection : EBSelection <Int> { return self.minValueForOARdisplayUnit_property.prop }

  //····················································································································
  //   Atomic proxy property: minValueForOARinEBUnit
  //····················································································································

  let minValueForOARinEBUnit_property = EBPropertyProxy_Int ()

  //····················································································································

  var minValueForOARinEBUnit : Int? {
    get {
      switch self.minValueForOARinEBUnit_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForOARinEBUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var minValueForOARinEBUnit_property_selection : EBSelection <Int> { return self.minValueForOARinEBUnit_property.prop }

  //····················································································································
  //   Atomic proxy property: minValueForPHDdisplayUnit
  //····················································································································

  let minValueForPHDdisplayUnit_property = EBPropertyProxy_Int ()

  //····················································································································

  var minValueForPHDdisplayUnit : Int? {
    get {
      switch self.minValueForPHDdisplayUnit_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForPHDdisplayUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var minValueForPHDdisplayUnit_property_selection : EBSelection <Int> { return self.minValueForPHDdisplayUnit_property.prop }

  //····················································································································
  //   Atomic proxy property: minValueForPHDinEBUnit
  //····················································································································

  let minValueForPHDinEBUnit_property = EBPropertyProxy_Int ()

  //····················································································································

  var minValueForPHDinEBUnit : Int? {
    get {
      switch self.minValueForPHDinEBUnit_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForPHDinEBUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var minValueForPHDinEBUnit_property_selection : EBSelection <Int> { return self.minValueForPHDinEBUnit_property.prop }

  //····················································································································
  //   Atomic proxy property: minValueForBoardLimitWidth
  //····················································································································

  let minValueForBoardLimitWidth_property = EBPropertyProxy_Int ()

  //····················································································································

  var minValueForBoardLimitWidth : Int? {
    get {
      switch self.minValueForBoardLimitWidth_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForBoardLimitWidth_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var minValueForBoardLimitWidth_property_selection : EBSelection <Int> { return self.minValueForBoardLimitWidth_property.prop }

  //····················································································································
  //   Atomic proxy property: minValueForBoardLimitWidthDisplayUnit
  //····················································································································

  let minValueForBoardLimitWidthDisplayUnit_property = EBPropertyProxy_Int ()

  //····················································································································

  var minValueForBoardLimitWidthDisplayUnit : Int? {
    get {
      switch self.minValueForBoardLimitWidthDisplayUnit_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.minValueForBoardLimitWidthDisplayUnit_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var minValueForBoardLimitWidthDisplayUnit_property_selection : EBSelection <Int> { return self.minValueForBoardLimitWidthDisplayUnit_property.prop }

  //····················································································································
  //   Atomic proxy property: drillDataFileExtension
  //····················································································································

  let drillDataFileExtension_property = EBPropertyProxy_String ()

  //····················································································································

  var drillDataFileExtension : String? {
    get {
      switch self.drillDataFileExtension_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.drillDataFileExtension_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var drillDataFileExtension_property_selection : EBSelection <String> { return self.drillDataFileExtension_property.prop }

  //····················································································································
  //   Atomic proxy property: comments
  //····················································································································

  let comments_property = EBPropertyProxy_String ()

  //····················································································································

  var comments : String? {
    get {
      switch self.comments_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.comments_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var comments_property_selection : EBSelection <String> { return self.comments_property.prop }

  //····················································································································
  //   Atomic proxy property: selectedSheetTitle
  //····················································································································

  let selectedSheetTitle_property = EBPropertyProxy_String ()

  //····················································································································

  var selectedSheetTitle : String? {
    get {
      switch self.selectedSheetTitle_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.selectedSheetTitle_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var selectedSheetTitle_property_selection : EBSelection <String> { return self.selectedSheetTitle_property.prop }

  //····················································································································
  //   ToMany proxy: selectedSheetObjects
  //····················································································································

  var selectedSheetObjects_modelDidChangeController : EBSimpleController? = nil
  // var selectedSheetObjects_boundObjectDidChangeController : EBSimpleController? = nil
  let selectedSheetObjects_property = ProxyArrayOf_SchematicObject ()

  //····················································································································

  var selectedSheetObjects : [SchematicObject] {
    get {
      switch self.selectedSheetObjects_property.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }
    set {
      self.selectedSheetObjects_property.setProp (newValue)
    }
  }

  //····················································································································

  var selectedSheetObjects_property_selection : EBSelection <[SchematicObject]> {
    return self.selectedSheetObjects_property.prop
  }

  //····················································································································
  //   ToMany proxy: fileGenerationParameterArray
  //····················································································································

  var fileGenerationParameterArray_modelDidChangeController : EBSimpleController? = nil
  // var fileGenerationParameterArray_boundObjectDidChangeController : EBSimpleController? = nil
  let fileGenerationParameterArray_property = ProxyArrayOf_ArtworkFileGenerationParameters ()

  //····················································································································

  var fileGenerationParameterArray : [ArtworkFileGenerationParameters] {
    get {
      switch self.fileGenerationParameterArray_property.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }
    set {
      self.fileGenerationParameterArray_property.setProp (newValue)
    }
  }

  //····················································································································

  var fileGenerationParameterArray_property_selection : EBSelection <[ArtworkFileGenerationParameters]> {
    return self.fileGenerationParameterArray_property.prop
  }

  //····················································································································
  //   Transient property: boardGridStepMultipliedByDisplayFactor
  //····················································································································

  let boardGridStepMultipliedByDisplayFactor_property = EBTransientProperty_Int ()

  //····················································································································

  var boardGridStepMultipliedByDisplayFactor_property_selection : EBSelection <Int> {
    return self.boardGridStepMultipliedByDisplayFactor_property.prop
  }

  //····················································································································

  var boardGridStepMultipliedByDisplayFactor : Int? {
    switch self.boardGridStepMultipliedByDisplayFactor_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardLimitsGridStepMultipliedByDisplayFactor
  //····················································································································

  let boardLimitsGridStepMultipliedByDisplayFactor_property = EBTransientProperty_Int ()

  //····················································································································

  var boardLimitsGridStepMultipliedByDisplayFactor_property_selection : EBSelection <Int> {
    return self.boardLimitsGridStepMultipliedByDisplayFactor_property.prop
  }

  //····················································································································

  var boardLimitsGridStepMultipliedByDisplayFactor : Int? {
    switch self.boardLimitsGridStepMultipliedByDisplayFactor_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardShapeIsRectangular
  //····················································································································

  let boardShapeIsRectangular_property = EBTransientProperty_Bool ()

  //····················································································································

  var boardShapeIsRectangular_property_selection : EBSelection <Bool> {
    return self.boardShapeIsRectangular_property.prop
  }

  //····················································································································

  var boardShapeIsRectangular : Bool? {
    switch self.boardShapeIsRectangular_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   To one property: mSelectedSheet
  //····················································································································

   let mSelectedSheet_property = StoredObject_SheetInProject (usedForSignature: false)

  //····················································································································

  var mSelectedSheet_property_selection : EBSelection <SheetInProject?> {
    return .single (self.mSelectedSheet_property.propval)
  }

  //····················································································································

  var mSelectedSheet : SheetInProject? {
    get {
      return self.mSelectedSheet_property.propval
    }
    set {
      if self.mSelectedSheet_property.propval != nil {
        self.mSelectedSheet_property.setProp (nil)
      }
      if newValue != nil {
        self.mSelectedSheet_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mSelectedSheet_none : StoredObject_SheetInProject { return self.mSelectedSheet_property }

  //····················································································································

  var mSelectedSheet_none_selection : EBSelection <Bool> {
    return .single (self.mSelectedSheet_property.propval == nil)
  }

  //····················································································································
  //   Transient property: selectedSheetIssues
  //····················································································································

  let selectedSheetIssues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  var selectedSheetIssues_property_selection : EBSelection <CanariIssueArray> {
    return self.selectedSheetIssues_property.prop
  }

  //····················································································································

  var selectedSheetIssues : CanariIssueArray? {
    switch self.selectedSheetIssues_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: connectedPoints
  //····················································································································

  let connectedPoints_property = EBTransientProperty_EBShape ()

  //····················································································································

  var connectedPoints_property_selection : EBSelection <EBShape> {
    return self.connectedPoints_property.prop
  }

  //····················································································································

  var connectedPoints : EBShape? {
    switch self.connectedPoints_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: connexionWarningString
  //····················································································································

  let connexionWarningString_property = EBTransientProperty_String ()

  //····················································································································

  var connexionWarningString_property_selection : EBSelection <String> {
    return self.connexionWarningString_property.prop
  }

  //····················································································································

  var connexionWarningString : String? {
    switch self.connexionWarningString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: connexionErrorString
  //····················································································································

  let connexionErrorString_property = EBTransientProperty_String ()

  //····················································································································

  var connexionErrorString_property_selection : EBSelection <String> {
    return self.connexionErrorString_property.prop
  }

  //····················································································································

  var connexionErrorString : String? {
    switch self.connexionErrorString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: sheetIndexes
  //····················································································································

  let sheetIndexes_property = EBTransientProperty_IntArray ()

  //····················································································································

  var sheetIndexes_property_selection : EBSelection <IntArray> {
    return self.sheetIndexes_property.prop
  }

  //····················································································································

  var sheetIndexes : IntArray? {
    switch self.sheetIndexes_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netsDescription
  //····················································································································

  let netsDescription_property = EBTransientProperty_NetInfoArray ()

  //····················································································································

  var netsDescription_property_selection : EBSelection <NetInfoArray> {
    return self.netsDescription_property.prop
  }

  //····················································································································

  var netsDescription : NetInfoArray? {
    switch self.netsDescription_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardIssues
  //····················································································································

  let boardIssues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  var boardIssues_property_selection : EBSelection <CanariIssueArray> {
    return self.boardIssues_property.prop
  }

  //····················································································································

  var boardIssues : CanariIssueArray? {
    switch self.boardIssues_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   To one property: mArtwork
  //····················································································································

   let mArtwork_property = StoredObject_ArtworkRoot (usedForSignature: false)

  //····················································································································

  var mArtwork_property_selection : EBSelection <ArtworkRoot?> {
    return .single (self.mArtwork_property.propval)
  }

  //····················································································································

  var mArtwork : ArtworkRoot? {
    get {
      return self.mArtwork_property.propval
    }
    set {
      if self.mArtwork_property.propval != nil {
        self.mArtwork_property.setProp (nil)
      }
      if newValue != nil {
        self.mArtwork_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mArtwork_none : StoredObject_ArtworkRoot { return self.mArtwork_property }

  //····················································································································

  var mArtwork_none_selection : EBSelection <Bool> {
    return .single (self.mArtwork_property.propval == nil)
  }

  //····················································································································
  //   Transient property: signatureForERCChecking
  //····················································································································

  let signatureForERCChecking_property = EBTransientProperty_UInt32 ()

  //····················································································································

  var signatureForERCChecking_property_selection : EBSelection <UInt32> {
    return self.signatureForERCChecking_property.prop
  }

  //····················································································································

  var signatureForERCChecking : UInt32? {
    switch self.signatureForERCChecking_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: ercStatusImage
  //····················································································································

  let ercStatusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  var ercStatusImage_property_selection : EBSelection <NSImage> {
    return self.ercStatusImage_property.prop
  }

  //····················································································································

  var ercStatusImage : NSImage? {
    switch self.ercStatusImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: ercStatusMessage
  //····················································································································

  let ercStatusMessage_property = EBTransientProperty_String ()

  //····················································································································

  var ercStatusMessage_property_selection : EBSelection <String> {
    return self.ercStatusMessage_property.prop
  }

  //····················································································································

  var ercStatusMessage : String? {
    switch self.ercStatusMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: viaCountString
  //····················································································································

  let viaCountString_property = EBTransientProperty_String ()

  //····················································································································

  var viaCountString_property_selection : EBSelection <String> {
    return self.viaCountString_property.prop
  }

  //····················································································································

  var viaCountString : String? {
    switch self.viaCountString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: trackCountString
  //····················································································································

  let trackCountString_property = EBTransientProperty_String ()

  //····················································································································

  var trackCountString_property_selection : EBSelection <String> {
    return self.trackCountString_property.prop
  }

  //····················································································································

  var trackCountString : String? {
    switch self.trackCountString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: trackLengthString
  //····················································································································

  let trackLengthString_property = EBTransientProperty_String ()

  //····················································································································

  var trackLengthString_property_selection : EBSelection <String> {
    return self.trackLengthString_property.prop
  }

  //····················································································································

  var trackLengthString : String? {
    switch self.trackLengthString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardStatusImage
  //····················································································································

  let boardStatusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  var boardStatusImage_property_selection : EBSelection <NSImage> {
    return self.boardStatusImage_property.prop
  }

  //····················································································································

  var boardStatusImage : NSImage? {
    switch self.boardStatusImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardStatusMessage
  //····················································································································

  let boardStatusMessage_property = EBTransientProperty_String ()

  //····················································································································

  var boardStatusMessage_property_selection : EBSelection <String> {
    return self.boardStatusMessage_property.prop
  }

  //····················································································································

  var boardStatusMessage : String? {
    switch self.boardStatusMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: interiorBoundBox
  //····················································································································

  let interiorBoundBox_property = EBTransientProperty_CanariRect ()

  //····················································································································

  var interiorBoundBox_property_selection : EBSelection <CanariRect> {
    return self.interiorBoundBox_property.prop
  }

  //····················································································································

  var interiorBoundBox : CanariRect? {
    switch self.interiorBoundBox_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardBoundBox
  //····················································································································

  let boardBoundBox_property = EBTransientProperty_CanariRect ()

  //····················································································································

  var boardBoundBox_property_selection : EBSelection <CanariRect> {
    return self.boardBoundBox_property.prop
  }

  //····················································································································

  var boardBoundBox : CanariRect? {
    switch self.boardBoundBox_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardInteriorTop
  //····················································································································

  let boardInteriorTop_property = EBTransientProperty_String ()

  //····················································································································

  var boardInteriorTop_property_selection : EBSelection <String> {
    return self.boardInteriorTop_property.prop
  }

  //····················································································································

  var boardInteriorTop : String? {
    switch self.boardInteriorTop_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardInteriorBottom
  //····················································································································

  let boardInteriorBottom_property = EBTransientProperty_String ()

  //····················································································································

  var boardInteriorBottom_property_selection : EBSelection <String> {
    return self.boardInteriorBottom_property.prop
  }

  //····················································································································

  var boardInteriorBottom : String? {
    switch self.boardInteriorBottom_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardInteriorLeft
  //····················································································································

  let boardInteriorLeft_property = EBTransientProperty_String ()

  //····················································································································

  var boardInteriorLeft_property_selection : EBSelection <String> {
    return self.boardInteriorLeft_property.prop
  }

  //····················································································································

  var boardInteriorLeft : String? {
    switch self.boardInteriorLeft_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardInteriorRight
  //····················································································································

  let boardInteriorRight_property = EBTransientProperty_String ()

  //····················································································································

  var boardInteriorRight_property_selection : EBSelection <String> {
    return self.boardInteriorRight_property.prop
  }

  //····················································································································

  var boardInteriorRight : String? {
    switch self.boardInteriorRight_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardLimitBorderTop
  //····················································································································

  let boardLimitBorderTop_property = EBTransientProperty_String ()

  //····················································································································

  var boardLimitBorderTop_property_selection : EBSelection <String> {
    return self.boardLimitBorderTop_property.prop
  }

  //····················································································································

  var boardLimitBorderTop : String? {
    switch self.boardLimitBorderTop_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardLimitBorderBottom
  //····················································································································

  let boardLimitBorderBottom_property = EBTransientProperty_String ()

  //····················································································································

  var boardLimitBorderBottom_property_selection : EBSelection <String> {
    return self.boardLimitBorderBottom_property.prop
  }

  //····················································································································

  var boardLimitBorderBottom : String? {
    switch self.boardLimitBorderBottom_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardLimitBorderLeft
  //····················································································································

  let boardLimitBorderLeft_property = EBTransientProperty_String ()

  //····················································································································

  var boardLimitBorderLeft_property_selection : EBSelection <String> {
    return self.boardLimitBorderLeft_property.prop
  }

  //····················································································································

  var boardLimitBorderLeft : String? {
    switch self.boardLimitBorderLeft_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boardLimitBorderRight
  //····················································································································

  let boardLimitBorderRight_property = EBTransientProperty_String ()

  //····················································································································

  var boardLimitBorderRight_property_selection : EBSelection <String> {
    return self.boardLimitBorderRight_property.prop
  }

  //····················································································································

  var boardLimitBorderRight : String? {
    switch self.boardLimitBorderRight_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: borderElementCountString
  //····················································································································

  let borderElementCountString_property = EBTransientProperty_String ()

  //····················································································································

  var borderElementCountString_property_selection : EBSelection <String> {
    return self.borderElementCountString_property.prop
  }

  //····················································································································

  var borderElementCountString : String? {
    switch self.borderElementCountString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: borderOutlineBackground
  //····················································································································

  let borderOutlineBackground_property = EBTransientProperty_EBShape ()

  //····················································································································

  var borderOutlineBackground_property_selection : EBSelection <EBShape> {
    return self.borderOutlineBackground_property.prop
  }

  //····················································································································

  var borderOutlineBackground : EBShape? {
    switch self.borderOutlineBackground_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: boarderViewBackground
  //····················································································································

  let boarderViewBackground_property = EBTransientProperty_EBShape ()

  //····················································································································

  var boarderViewBackground_property_selection : EBSelection <EBShape> {
    return self.boarderViewBackground_property.prop
  }

  //····················································································································

  var boarderViewBackground : EBShape? {
    switch self.boarderViewBackground_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: deviceNames
  //····················································································································

  let deviceNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  var deviceNames_property_selection : EBSelection <StringArray> {
    return self.deviceNames_property.prop
  }

  //····················································································································

  var deviceNames : StringArray? {
    switch self.deviceNames_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: allClassNames
  //····················································································································

  let allClassNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  var allClassNames_property_selection : EBSelection <StringArray> {
    return self.allClassNames_property.prop
  }

  //····················································································································

  var allClassNames : StringArray? {
    switch self.allClassNames_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: sheetGeometry
  //····················································································································

  let sheetGeometry_property = EBTransientProperty_SchematicSheetGeometry ()

  //····················································································································

  var sheetGeometry_property_selection : EBSelection <SchematicSheetGeometry> {
    return self.sheetGeometry_property.prop
  }

  //····················································································································

  var sheetGeometry : SchematicSheetGeometry? {
    switch self.sheetGeometry_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: schematicBackgroundDisplay
  //····················································································································

  let schematicBackgroundDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  var schematicBackgroundDisplay_property_selection : EBSelection <EBShape> {
    return self.schematicBackgroundDisplay_property.prop
  }

  //····················································································································

  var schematicBackgroundDisplay : EBShape? {
    switch self.schematicBackgroundDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netWarningCount
  //····················································································································

  let netWarningCount_property = EBTransientProperty_Int ()

  //····················································································································

  var netWarningCount_property_selection : EBSelection <Int> {
    return self.netWarningCount_property.prop
  }

  //····················································································································

  var netWarningCount : Int? {
    switch self.netWarningCount_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netNamesArray
  //····················································································································

  let netNamesArray_property = EBTransientProperty_StringArray ()

  //····················································································································

  var netNamesArray_property_selection : EBSelection <StringArray> {
    return self.netNamesArray_property.prop
  }

  //····················································································································

  var netNamesArray : StringArray? {
    switch self.netNamesArray_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unplacedSymbols
  //····················································································································

  let unplacedSymbols_property = EBTransientProperty_StringTagArray ()

  //····················································································································

  var unplacedSymbols_property_selection : EBSelection <StringTagArray> {
    return self.unplacedSymbols_property.prop
  }

  //····················································································································

  var unplacedSymbols : StringTagArray? {
    switch self.unplacedSymbols_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unplacedPackages
  //····················································································································

  let unplacedPackages_property = EBTransientProperty_StringTagArray ()

  //····················································································································

  var unplacedPackages_property_selection : EBSelection <StringTagArray> {
    return self.unplacedPackages_property.prop
  }

  //····················································································································

  var unplacedPackages : StringTagArray? {
    switch self.unplacedPackages_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentsPlacedInBoard
  //····················································································································

  let componentsPlacedInBoard_property = EBTransientProperty_StringTagArray ()

  //····················································································································

  var componentsPlacedInBoard_property_selection : EBSelection <StringTagArray> {
    return self.componentsPlacedInBoard_property.prop
  }

  //····················································································································

  var componentsPlacedInBoard : StringTagArray? {
    switch self.componentsPlacedInBoard_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: placedComponentNameArray
  //····················································································································

  let placedComponentNameArray_property = EBTransientProperty_StringArray ()

  //····················································································································

  var placedComponentNameArray_property_selection : EBSelection <StringArray> {
    return self.placedComponentNameArray_property.prop
  }

  //····················································································································

  var placedComponentNameArray : StringArray? {
    switch self.placedComponentNameArray_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: schematicStatusMessage
  //····················································································································

  let schematicStatusMessage_property = EBTransientProperty_String ()

  //····················································································································

  var schematicStatusMessage_property_selection : EBSelection <String> {
    return self.schematicStatusMessage_property.prop
  }

  //····················································································································

  var schematicStatusMessage : String? {
    switch self.schematicStatusMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: schematicStatusImage
  //····················································································································

  let schematicStatusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  var schematicStatusImage_property_selection : EBSelection <NSImage> {
    return self.schematicStatusImage_property.prop
  }

  //····················································································································

  var schematicStatusImage : NSImage? {
    switch self.schematicStatusImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
    self.configureObject ()
  }
  
  //····················································································································

  private final func configureObject () {
  //--- Atomic property: mArtworkName
    self.mArtworkName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mArtworkVersion
    self.mArtworkVersion_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mCheckClearanceBetweenPadsOfSameNet
    self.mCheckClearanceBetweenPadsOfSameNet_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mLastERCCheckingIsSuccess
    self.mLastERCCheckingIsSuccess_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mLastERCCheckingSignature
    self.mLastERCCheckingSignature_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mAutoRouterPreferredDirections
    self.mAutoRouterPreferredDirections_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mAutorouterSnapAngle
    self.mAutorouterSnapAngle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mRouteDirection
    self.mRouteDirection_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mRouteOrigin
    self.mRouteOrigin_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mTrackLengthUnit
    self.mTrackLengthUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mLayoutClearance
    self.mLayoutClearance_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mLayoutClearanceUnit
    self.mLayoutClearanceUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardSelectedInspector
    self.mBoardSelectedInspector_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardHorizontalFlip
    self.mBoardHorizontalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardVerticalFlip
    self.mBoardVerticalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardGridStyle
    self.mBoardGridStyle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardGridDisplayFactor
    self.mBoardGridDisplayFactor_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardZoom
    self.mBoardZoom_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardGridStep
    self.mBoardGridStep_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardGridStepUnit
    self.mBoardGridStepUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mErrorOrWarningIssueSize
    self.mErrorOrWarningIssueSize_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mControlKeyHiliteDiameter
    self.mControlKeyHiliteDiameter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardLimitsWidth
    self.mBoardLimitsWidth_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardLimitsWidthUnit
    self.mBoardLimitsWidthUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardClearance
    self.mBoardClearance_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardClearanceUnit
    self.mBoardClearanceUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardLimitsSelectedInspector
    self.mBoardLimitsSelectedInspector_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardLimitsHorizontalFlip
    self.mBoardLimitsHorizontalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardLimitsVerticalFlip
    self.mBoardLimitsVerticalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardLimitsGridStyle
    self.mBoardLimitsGridStyle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardLimitsGridDisplayFactor
    self.mBoardLimitsGridDisplayFactor_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardLimitsZoom
    self.mBoardLimitsZoom_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardLimitsGridStep
    self.mBoardLimitsGridStep_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardLimitsGridStepUnit
    self.mBoardLimitsGridStepUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardLimitsBoundingBoxUnit
    self.mBoardLimitsBoundingBoxUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardPointsBoundingBoxUnit
    self.mBoardPointsBoundingBoxUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardSelectedCurveDisplayUnit
    self.mBoardSelectedCurveDisplayUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mBoardShape
    self.mBoardShape_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mRectangularBoardWidth
    self.mRectangularBoardWidth_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mRectangularBoardWidthUnit
    self.mRectangularBoardWidthUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mRectangularBoardHeight
    self.mRectangularBoardHeight_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mRectangularBoardHeightUnit
    self.mRectangularBoardHeightUnit_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mSheets (has opposite relationship)
    self.mSheets_property.ebUndoManager = self.ebUndoManager
    self.mSheets_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- Atomic property: mDefaultNetClassName
    self.mDefaultNetClassName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSelectedSchematicInspector
    self.mSelectedSchematicInspector_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicTitle
    self.mSchematicTitle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicVersion
    self.mSchematicVersion_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicDate
    self.mSchematicDate_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicHorizontalFlip
    self.mSchematicHorizontalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicVerticalFlip
    self.mSchematicVerticalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicZoom
    self.mSchematicZoom_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicGridStyle
    self.mSchematicGridStyle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicGridDisplayFactor
    self.mSchematicGridDisplayFactor_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicCustomWidth
    self.mSchematicCustomWidth_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicCustomWidthUnit
    self.mSchematicCustomWidthUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicCustomHeight
    self.mSchematicCustomHeight_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicCustomHeightUnit
    self.mSchematicCustomHeightUnit_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mNetClasses (no option)
    self.mNetClasses_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mFonts (no option)
    self.mFonts_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mDevices (no option)
    self.mDevices_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicSheetOrientation
    self.mSchematicSheetOrientation_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mBorderCurves (has opposite relationship)
    self.mBorderCurves_property.ebUndoManager = self.ebUndoManager
    self.mBorderCurves_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- To many property: mBoardObjects (has opposite relationship)
    self.mBoardObjects_property.ebUndoManager = self.ebUndoManager
    self.mBoardObjects_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- Atomic property: mRastnetDisplay
    self.mRastnetDisplay_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mRastnetDisplayedNetName
    self.mRastnetDisplayedNetName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mRastnetDisplayedComponentName
    self.mRastnetDisplayedComponentName_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mComponents (no option)
    self.mComponents_property.ebUndoManager = self.ebUndoManager
  //--- Atomic proxy property: minPPTPTTTWdisplayUnit
    self.minPPTPTTTWdisplayUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork {
        return .single (object.minPPTPTTTWdisplayUnit)
      }else{
        return .empty
      }
    }
    self.minPPTPTTTWdisplayUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minPPTPTTTWdisplayUnit = inValue
    }
    self.minPPTPTTTWdisplayUnit_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Int, _ inWindow : NSWindow?) -> Bool in
      return self?.mArtwork?.minPPTPTTTWdisplayUnit_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mArtwork_property.addEBObserverOf_minPPTPTTTWdisplayUnit (self.minPPTPTTTWdisplayUnit_property)
  //--- Atomic proxy property: minPPTPTTTW
    self.minPPTPTTTW_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork {
        return .single (object.minPPTPTTTW)
      }else{
        return .empty
      }
    }
    self.minPPTPTTTW_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minPPTPTTTW = inValue
    }
    self.minPPTPTTTW_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Int, _ inWindow : NSWindow?) -> Bool in
      return self?.mArtwork?.minPPTPTTTW_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mArtwork_property.addEBObserverOf_minPPTPTTTW (self.minPPTPTTTW_property)
  //--- Atomic proxy property: minValueForOARdisplayUnit
    self.minValueForOARdisplayUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork {
        return .single (object.minValueForOARdisplayUnit)
      }else{
        return .empty
      }
    }
    self.minValueForOARdisplayUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForOARdisplayUnit = inValue
    }
    self.minValueForOARdisplayUnit_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Int, _ inWindow : NSWindow?) -> Bool in
      return self?.mArtwork?.minValueForOARdisplayUnit_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mArtwork_property.addEBObserverOf_minValueForOARdisplayUnit (self.minValueForOARdisplayUnit_property)
  //--- Atomic proxy property: minValueForOARinEBUnit
    self.minValueForOARinEBUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork {
        return .single (object.minValueForOARinEBUnit)
      }else{
        return .empty
      }
    }
    self.minValueForOARinEBUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForOARinEBUnit = inValue
    }
    self.minValueForOARinEBUnit_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Int, _ inWindow : NSWindow?) -> Bool in
      return self?.mArtwork?.minValueForOARinEBUnit_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mArtwork_property.addEBObserverOf_minValueForOARinEBUnit (self.minValueForOARinEBUnit_property)
  //--- Atomic proxy property: minValueForPHDdisplayUnit
    self.minValueForPHDdisplayUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork {
        return .single (object.minValueForPHDdisplayUnit)
      }else{
        return .empty
      }
    }
    self.minValueForPHDdisplayUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForPHDdisplayUnit = inValue
    }
    self.minValueForPHDdisplayUnit_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Int, _ inWindow : NSWindow?) -> Bool in
      return self?.mArtwork?.minValueForPHDdisplayUnit_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mArtwork_property.addEBObserverOf_minValueForPHDdisplayUnit (self.minValueForPHDdisplayUnit_property)
  //--- Atomic proxy property: minValueForPHDinEBUnit
    self.minValueForPHDinEBUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork {
        return .single (object.minValueForPHDinEBUnit)
      }else{
        return .empty
      }
    }
    self.minValueForPHDinEBUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForPHDinEBUnit = inValue
    }
    self.minValueForPHDinEBUnit_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Int, _ inWindow : NSWindow?) -> Bool in
      return self?.mArtwork?.minValueForPHDinEBUnit_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mArtwork_property.addEBObserverOf_minValueForPHDinEBUnit (self.minValueForPHDinEBUnit_property)
  //--- Atomic proxy property: minValueForBoardLimitWidth
    self.minValueForBoardLimitWidth_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork {
        return .single (object.minValueForBoardLimitWidth)
      }else{
        return .empty
      }
    }
    self.minValueForBoardLimitWidth_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForBoardLimitWidth = inValue
    }
    self.minValueForBoardLimitWidth_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Int, _ inWindow : NSWindow?) -> Bool in
      return self?.mArtwork?.minValueForBoardLimitWidth_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mArtwork_property.addEBObserverOf_minValueForBoardLimitWidth (self.minValueForBoardLimitWidth_property)
  //--- Atomic proxy property: minValueForBoardLimitWidthDisplayUnit
    self.minValueForBoardLimitWidthDisplayUnit_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork {
        return .single (object.minValueForBoardLimitWidthDisplayUnit)
      }else{
        return .empty
      }
    }
    self.minValueForBoardLimitWidthDisplayUnit_property.mWriteModelFunction = { [weak self] (_ inValue : Int) in
      self?.mArtwork?.minValueForBoardLimitWidthDisplayUnit = inValue
    }
    self.minValueForBoardLimitWidthDisplayUnit_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : Int, _ inWindow : NSWindow?) -> Bool in
      return self?.mArtwork?.minValueForBoardLimitWidthDisplayUnit_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mArtwork_property.addEBObserverOf_minValueForBoardLimitWidthDisplayUnit (self.minValueForBoardLimitWidthDisplayUnit_property)
  //--- Atomic proxy property: drillDataFileExtension
    self.drillDataFileExtension_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork {
        return .single (object.drillDataFileExtension)
      }else{
        return .empty
      }
    }
    self.drillDataFileExtension_property.mWriteModelFunction = { [weak self] (_ inValue : String) in
      self?.mArtwork?.drillDataFileExtension = inValue
    }
    self.drillDataFileExtension_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : String, _ inWindow : NSWindow?) -> Bool in
      return self?.mArtwork?.drillDataFileExtension_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mArtwork_property.addEBObserverOf_drillDataFileExtension (self.drillDataFileExtension_property)
  //--- Atomic proxy property: comments
    self.comments_property.mReadModelFunction = { [weak self] in
      if let object = self?.mArtwork {
        return .single (object.comments)
      }else{
        return .empty
      }
    }
    self.comments_property.mWriteModelFunction = { [weak self] (_ inValue : String) in
      self?.mArtwork?.comments = inValue
    }
    self.comments_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : String, _ inWindow : NSWindow?) -> Bool in
      return self?.mArtwork?.comments_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mArtwork_property.addEBObserverOf_comments (self.comments_property)
  //--- Atomic proxy property: selectedSheetTitle
    self.selectedSheetTitle_property.mReadModelFunction = { [weak self] in
      if let object = self?.mSelectedSheet {
        return .single (object.mSheetTitle)
      }else{
        return .empty
      }
    }
    self.selectedSheetTitle_property.mWriteModelFunction = { [weak self] (_ inValue : String) in
      self?.mSelectedSheet?.mSheetTitle = inValue
    }
    self.selectedSheetTitle_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : String, _ inWindow : NSWindow?) -> Bool in
      return self?.mSelectedSheet?.mSheetTitle_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mSelectedSheet_property.addEBObserverOf_mSheetTitle (self.selectedSheetTitle_property)
  //--- ToMany proxy: selectedSheetObjects
    do{
      let controller = EBSimpleController (
        observedObjects: [self.mSelectedSheet_property],
        callBack: { [weak self] in
          if let me = self, let model = me.mSelectedSheet {
            me.selectedSheetObjects_property.setModel (model.mObjects_property)
          }
        }
      )
      self.mSelectedSheet_property.addEBObserverOf_mObjects (controller)
      self.selectedSheetObjects_modelDidChangeController = controller
    }
  //--- ToMany proxy: fileGenerationParameterArray
    do{
      let controller = EBSimpleController (
        observedObjects: [self.mArtwork_property],
        callBack: { [weak self] in
          if let me = self, let model = me.mArtwork {
            me.fileGenerationParameterArray_property.setModel (model.fileGenerationParameterArray_property)
          }
        }
      )
      self.mArtwork_property.addEBObserverOf_fileGenerationParameterArray (controller)
      self.fileGenerationParameterArray_modelDidChangeController = controller
    }
  //--- Atomic property: boardGridStepMultipliedByDisplayFactor
    self.boardGridStepMultipliedByDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mBoardGridStep_property_selection.kind ()
        kind &= unwSelf.mBoardGridDisplayFactor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mBoardGridStep_property_selection, unwSelf.mBoardGridDisplayFactor_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ProjectRoot_boardGridStepMultipliedByDisplayFactor (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mBoardGridStep_property.addEBObserver (self.boardGridStepMultipliedByDisplayFactor_property)
    self.mBoardGridDisplayFactor_property.addEBObserver (self.boardGridStepMultipliedByDisplayFactor_property)
  //--- Atomic property: boardLimitsGridStepMultipliedByDisplayFactor
    self.boardLimitsGridStepMultipliedByDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mBoardLimitsGridStep_property_selection.kind ()
        kind &= unwSelf.mBoardLimitsGridDisplayFactor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mBoardLimitsGridStep_property_selection, unwSelf.mBoardLimitsGridDisplayFactor_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ProjectRoot_boardLimitsGridStepMultipliedByDisplayFactor (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mBoardLimitsGridStep_property.addEBObserver (self.boardLimitsGridStepMultipliedByDisplayFactor_property)
    self.mBoardLimitsGridDisplayFactor_property.addEBObserver (self.boardLimitsGridStepMultipliedByDisplayFactor_property)
  //--- Atomic property: boardShapeIsRectangular
    self.boardShapeIsRectangular_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mBoardShape_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mBoardShape_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_boardShapeIsRectangular (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mBoardShape_property.addEBObserver (self.boardShapeIsRectangular_property)
  //--- To one property: mSelectedSheet
    self.mSelectedSheet_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: selectedSheetIssues
    self.selectedSheetIssues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSelectedSheet_property.issues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSelectedSheet_property.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_selectedSheetIssues (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSelectedSheet_property.addEBObserverOf_issues (self.selectedSheetIssues_property)
  //--- Atomic property: connectedPoints
    self.connectedPoints_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mSelectedSheet_property.connectedPoints_property_selection.kind ()
        kind &= unwSelf.selectedSheetIssues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSelectedSheet_property.connectedPoints_property_selection, unwSelf.selectedSheetIssues_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ProjectRoot_connectedPoints (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSelectedSheet_property.addEBObserverOf_connectedPoints (self.connectedPoints_property)
    self.selectedSheetIssues_property.addEBObserver (self.connectedPoints_property)
  //--- Atomic property: connexionWarningString
    self.connexionWarningString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSheets_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSheets_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_connexionWarningString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSheets_property.addEBObserverOf_connexionWarnings (self.connexionWarningString_property)
  //--- Atomic property: connexionErrorString
    self.connexionErrorString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSheets_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSheets_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_connexionErrorString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSheets_property.addEBObserverOf_connexionErrors (self.connexionErrorString_property)
  //--- Atomic property: sheetIndexes
    self.sheetIndexes_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSheets_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSheets_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_sheetIndexes (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSheets_property.addEBObserver (self.sheetIndexes_property)
  //--- Atomic property: netsDescription
    self.netsDescription_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNetClasses_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNetClasses_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_netsDescription (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNetClasses_property.addEBObserverOf_netsDescription (self.netsDescription_property)
  //--- Atomic property: boardIssues
    self.boardIssues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mBoardObjects_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mBoardObjects_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_boardIssues (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.addEBObserverOf_issues (self.boardIssues_property)
  //--- To one property: mArtwork
    self.mArtwork_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mBoardObjects_property_selection.kind ()
        kind &= unwSelf.mArtwork_property.signatureForERCChecking_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mBoardObjects_property_selection, unwSelf.mArtwork_property.signatureForERCChecking_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ProjectRoot_signatureForERCChecking (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.addEBObserverOf_signatureForERCChecking (self.signatureForERCChecking_property)
    self.mArtwork_property.addEBObserverOf_signatureForERCChecking (self.signatureForERCChecking_property)
  //--- Atomic property: ercStatusImage
    self.ercStatusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mLastERCCheckingIsSuccess_property_selection.kind ()
        kind &= unwSelf.mLastERCCheckingSignature_property_selection.kind ()
        kind &= unwSelf.signatureForERCChecking_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mLastERCCheckingIsSuccess_property_selection, unwSelf.mLastERCCheckingSignature_property_selection, unwSelf.signatureForERCChecking_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_ProjectRoot_ercStatusImage (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mLastERCCheckingIsSuccess_property.addEBObserver (self.ercStatusImage_property)
    self.mLastERCCheckingSignature_property.addEBObserver (self.ercStatusImage_property)
    self.signatureForERCChecking_property.addEBObserver (self.ercStatusImage_property)
  //--- Atomic property: ercStatusMessage
    self.ercStatusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mLastERCCheckingIsSuccess_property_selection.kind ()
        kind &= unwSelf.mLastERCCheckingSignature_property_selection.kind ()
        kind &= unwSelf.signatureForERCChecking_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mLastERCCheckingIsSuccess_property_selection, unwSelf.mLastERCCheckingSignature_property_selection, unwSelf.signatureForERCChecking_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_ProjectRoot_ercStatusMessage (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mLastERCCheckingIsSuccess_property.addEBObserver (self.ercStatusMessage_property)
    self.mLastERCCheckingSignature_property.addEBObserver (self.ercStatusMessage_property)
    self.signatureForERCChecking_property.addEBObserver (self.ercStatusMessage_property)
  //--- Atomic property: viaCountString
    self.viaCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mBoardObjects_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mBoardObjects_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_viaCountString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.addEBObserverOf_isVia (self.viaCountString_property)
  //--- Atomic property: trackCountString
    self.trackCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mBoardObjects_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mBoardObjects_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_trackCountString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.addEBObserverOf_trackLength (self.trackCountString_property)
  //--- Atomic property: trackLengthString
    self.trackLengthString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mBoardObjects_property_selection.kind ()
        kind &= unwSelf.mTrackLengthUnit_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mBoardObjects_property_selection, unwSelf.mTrackLengthUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ProjectRoot_trackLengthString (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mBoardObjects_property.addEBObserverOf_trackLength (self.trackLengthString_property)
    self.mTrackLengthUnit_property.addEBObserver (self.trackLengthString_property)
  //--- Atomic property: boardStatusImage
    self.boardStatusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.boardIssues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.boardIssues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_boardStatusImage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardIssues_property.addEBObserver (self.boardStatusImage_property)
  //--- Atomic property: boardStatusMessage
    self.boardStatusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.boardIssues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.boardIssues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_boardStatusMessage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardIssues_property.addEBObserver (self.boardStatusMessage_property)
  //--- Atomic property: interiorBoundBox
    self.interiorBoundBox_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mBorderCurves_property_selection.kind ()
        kind &= unwSelf.mBoardShape_property_selection.kind ()
        kind &= unwSelf.mRectangularBoardWidth_property_selection.kind ()
        kind &= unwSelf.mRectangularBoardHeight_property_selection.kind ()
        kind &= unwSelf.mBoardClearance_property_selection.kind ()
        kind &= unwSelf.mBoardLimitsWidth_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mBorderCurves_property_selection, unwSelf.mBoardShape_property_selection, unwSelf.mRectangularBoardWidth_property_selection, unwSelf.mRectangularBoardHeight_property_selection, unwSelf.mBoardClearance_property_selection, unwSelf.mBoardLimitsWidth_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5)) :
            return .single (transient_ProjectRoot_interiorBoundBox (v0, v1, v2, v3, v4, v5))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mBorderCurves_property.addEBObserverOf_descriptor (self.interiorBoundBox_property)
    self.mBoardShape_property.addEBObserver (self.interiorBoundBox_property)
    self.mRectangularBoardWidth_property.addEBObserver (self.interiorBoundBox_property)
    self.mRectangularBoardHeight_property.addEBObserver (self.interiorBoundBox_property)
    self.mBoardClearance_property.addEBObserver (self.interiorBoundBox_property)
    self.mBoardLimitsWidth_property.addEBObserver (self.interiorBoundBox_property)
  //--- Atomic property: boardBoundBox
    self.boardBoundBox_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.interiorBoundBox_property_selection.kind ()
        kind &= unwSelf.mBoardLimitsWidth_property_selection.kind ()
        kind &= unwSelf.mBoardClearance_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.interiorBoundBox_property_selection, unwSelf.mBoardLimitsWidth_property_selection, unwSelf.mBoardClearance_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_ProjectRoot_boardBoundBox (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.interiorBoundBox_property.addEBObserver (self.boardBoundBox_property)
    self.mBoardLimitsWidth_property.addEBObserver (self.boardBoundBox_property)
    self.mBoardClearance_property.addEBObserver (self.boardBoundBox_property)
  //--- Atomic property: boardInteriorTop
    self.boardInteriorTop_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.interiorBoundBox_property_selection.kind ()
        kind &= unwSelf.mBoardPointsBoundingBoxUnit_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.interiorBoundBox_property_selection, unwSelf.mBoardPointsBoundingBoxUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ProjectRoot_boardInteriorTop (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.interiorBoundBox_property.addEBObserver (self.boardInteriorTop_property)
    self.mBoardPointsBoundingBoxUnit_property.addEBObserver (self.boardInteriorTop_property)
  //--- Atomic property: boardInteriorBottom
    self.boardInteriorBottom_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.interiorBoundBox_property_selection.kind ()
        kind &= unwSelf.mBoardPointsBoundingBoxUnit_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.interiorBoundBox_property_selection, unwSelf.mBoardPointsBoundingBoxUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ProjectRoot_boardInteriorBottom (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.interiorBoundBox_property.addEBObserver (self.boardInteriorBottom_property)
    self.mBoardPointsBoundingBoxUnit_property.addEBObserver (self.boardInteriorBottom_property)
  //--- Atomic property: boardInteriorLeft
    self.boardInteriorLeft_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.interiorBoundBox_property_selection.kind ()
        kind &= unwSelf.mBoardPointsBoundingBoxUnit_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.interiorBoundBox_property_selection, unwSelf.mBoardPointsBoundingBoxUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ProjectRoot_boardInteriorLeft (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.interiorBoundBox_property.addEBObserver (self.boardInteriorLeft_property)
    self.mBoardPointsBoundingBoxUnit_property.addEBObserver (self.boardInteriorLeft_property)
  //--- Atomic property: boardInteriorRight
    self.boardInteriorRight_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.interiorBoundBox_property_selection.kind ()
        kind &= unwSelf.mBoardPointsBoundingBoxUnit_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.interiorBoundBox_property_selection, unwSelf.mBoardPointsBoundingBoxUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ProjectRoot_boardInteriorRight (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.interiorBoundBox_property.addEBObserver (self.boardInteriorRight_property)
    self.mBoardPointsBoundingBoxUnit_property.addEBObserver (self.boardInteriorRight_property)
  //--- Atomic property: boardLimitBorderTop
    self.boardLimitBorderTop_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.boardBoundBox_property_selection.kind ()
        kind &= unwSelf.mBoardLimitsBoundingBoxUnit_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.boardBoundBox_property_selection, unwSelf.mBoardLimitsBoundingBoxUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ProjectRoot_boardLimitBorderTop (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardBoundBox_property.addEBObserver (self.boardLimitBorderTop_property)
    self.mBoardLimitsBoundingBoxUnit_property.addEBObserver (self.boardLimitBorderTop_property)
  //--- Atomic property: boardLimitBorderBottom
    self.boardLimitBorderBottom_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.boardBoundBox_property_selection.kind ()
        kind &= unwSelf.mBoardLimitsBoundingBoxUnit_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.boardBoundBox_property_selection, unwSelf.mBoardLimitsBoundingBoxUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ProjectRoot_boardLimitBorderBottom (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardBoundBox_property.addEBObserver (self.boardLimitBorderBottom_property)
    self.mBoardLimitsBoundingBoxUnit_property.addEBObserver (self.boardLimitBorderBottom_property)
  //--- Atomic property: boardLimitBorderLeft
    self.boardLimitBorderLeft_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.boardBoundBox_property_selection.kind ()
        kind &= unwSelf.mBoardLimitsBoundingBoxUnit_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.boardBoundBox_property_selection, unwSelf.mBoardLimitsBoundingBoxUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ProjectRoot_boardLimitBorderLeft (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardBoundBox_property.addEBObserver (self.boardLimitBorderLeft_property)
    self.mBoardLimitsBoundingBoxUnit_property.addEBObserver (self.boardLimitBorderLeft_property)
  //--- Atomic property: boardLimitBorderRight
    self.boardLimitBorderRight_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.boardBoundBox_property_selection.kind ()
        kind &= unwSelf.mBoardLimitsBoundingBoxUnit_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.boardBoundBox_property_selection, unwSelf.mBoardLimitsBoundingBoxUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ProjectRoot_boardLimitBorderRight (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.boardBoundBox_property.addEBObserver (self.boardLimitBorderRight_property)
    self.mBoardLimitsBoundingBoxUnit_property.addEBObserver (self.boardLimitBorderRight_property)
  //--- Atomic property: borderElementCountString
    self.borderElementCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mBorderCurves_property.count_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mBorderCurves_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_borderElementCountString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mBorderCurves_property.addEBObserver (self.borderElementCountString_property)
  //--- Atomic property: borderOutlineBackground
    self.borderOutlineBackground_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mBorderCurves_property_selection.kind ()
        kind &= unwSelf.mBoardShape_property_selection.kind ()
        kind &= unwSelf.mRectangularBoardWidth_property_selection.kind ()
        kind &= unwSelf.mRectangularBoardHeight_property_selection.kind ()
        kind &= unwSelf.mBoardLimitsWidth_property_selection.kind ()
        kind &= g_Preferences!.boardLimitsColorForBoard_property_selection.kind ()
        kind &= unwSelf.mBoardClearance_property_selection.kind ()
        kind &= g_Preferences!.boardClearanceColorForBoard_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mBorderCurves_property_selection, unwSelf.mBoardShape_property_selection, unwSelf.mRectangularBoardWidth_property_selection, unwSelf.mRectangularBoardHeight_property_selection, unwSelf.mBoardLimitsWidth_property_selection, g_Preferences!.boardLimitsColorForBoard_property_selection, unwSelf.mBoardClearance_property_selection, g_Preferences!.boardClearanceColorForBoard_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (transient_ProjectRoot_borderOutlineBackground (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mBorderCurves_property.addEBObserverOf_descriptor (self.borderOutlineBackground_property)
    self.mBoardShape_property.addEBObserver (self.borderOutlineBackground_property)
    self.mRectangularBoardWidth_property.addEBObserver (self.borderOutlineBackground_property)
    self.mRectangularBoardHeight_property.addEBObserver (self.borderOutlineBackground_property)
    self.mBoardLimitsWidth_property.addEBObserver (self.borderOutlineBackground_property)
    g_Preferences?.boardLimitsColorForBoard_property.addEBObserver (self.borderOutlineBackground_property)
    self.mBoardClearance_property.addEBObserver (self.borderOutlineBackground_property)
    g_Preferences?.boardClearanceColorForBoard_property.addEBObserver (self.borderOutlineBackground_property)
  //--- Atomic property: boarderViewBackground
    self.boarderViewBackground_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.boardBackgroundColorForBoard_property_selection.kind ()
        kind &= unwSelf.borderOutlineBackground_property_selection.kind ()
        kind &= unwSelf.mBoardObjects_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (g_Preferences!.boardBackgroundColorForBoard_property_selection, unwSelf.borderOutlineBackground_property_selection, unwSelf.mBoardObjects_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_ProjectRoot_boarderViewBackground (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    g_Preferences?.boardBackgroundColorForBoard_property.addEBObserver (self.boarderViewBackground_property)
    self.borderOutlineBackground_property.addEBObserver (self.boarderViewBackground_property)
    self.mBoardObjects_property.addEBObserverOf_objectDisplay (self.boarderViewBackground_property)
  //--- Atomic property: deviceNames
    self.deviceNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDevices_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mDevices_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_deviceNames (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDevices_property.addEBObserverOf_mDeviceName (self.deviceNames_property)
  //--- Atomic property: allClassNames
    self.allClassNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNetClasses_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNetClasses_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_allClassNames (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNetClasses_property.addEBObserverOf_mNetClassName (self.allClassNames_property)
  //--- Atomic property: sheetGeometry
    self.sheetGeometry_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mSchematicSheetOrientation_property_selection.kind ()
        kind &= unwSelf.mSchematicCustomWidth_property_selection.kind ()
        kind &= unwSelf.mSchematicCustomHeight_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSchematicSheetOrientation_property_selection, unwSelf.mSchematicCustomWidth_property_selection, unwSelf.mSchematicCustomHeight_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_ProjectRoot_sheetGeometry (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSchematicSheetOrientation_property.addEBObserver (self.sheetGeometry_property)
    self.mSchematicCustomWidth_property.addEBObserver (self.sheetGeometry_property)
    self.mSchematicCustomHeight_property.addEBObserver (self.sheetGeometry_property)
  //--- Atomic property: schematicBackgroundDisplay
    self.schematicBackgroundDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mSchematicTitle_property_selection.kind ()
        kind &= unwSelf.mSchematicVersion_property_selection.kind ()
        kind &= unwSelf.sheetGeometry_property_selection.kind ()
        kind &= unwSelf.mSelectedSheet_property.mSheetTitle_property_selection.kind ()
        kind &= unwSelf.mSheets_property_selection.kind ()
        kind &= unwSelf.mSelectedSheet_property_selection.kind ()
        kind &= unwSelf.mSchematicDate_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSchematicTitle_property_selection, unwSelf.mSchematicVersion_property_selection, unwSelf.sheetGeometry_property_selection, unwSelf.mSelectedSheet_property.mSheetTitle_property_selection, unwSelf.mSheets_property_selection, unwSelf.mSelectedSheet_property_selection, unwSelf.mSchematicDate_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6)) :
            return .single (transient_ProjectRoot_schematicBackgroundDisplay (v0, v1, v2, v3, v4, v5, v6))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSchematicTitle_property.addEBObserver (self.schematicBackgroundDisplay_property)
    self.mSchematicVersion_property.addEBObserver (self.schematicBackgroundDisplay_property)
    self.sheetGeometry_property.addEBObserver (self.schematicBackgroundDisplay_property)
    self.mSelectedSheet_property.addEBObserverOf_mSheetTitle (self.schematicBackgroundDisplay_property)
    self.mSheets_property.addEBObserver (self.schematicBackgroundDisplay_property)
    self.mSelectedSheet_property.addEBObserver (self.schematicBackgroundDisplay_property)
    self.mSchematicDate_property.addEBObserver (self.schematicBackgroundDisplay_property)
  //--- Atomic property: netWarningCount
    self.netWarningCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNetClasses_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNetClasses_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_netWarningCount (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNetClasses_property.addEBObserverOf_netWarningCount (self.netWarningCount_property)
  //--- Atomic property: netNamesArray
    self.netNamesArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNetClasses_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNetClasses_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_netNamesArray (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNetClasses_property.addEBObserverOf_netsDescription (self.netNamesArray_property)
  //--- Atomic property: unplacedSymbols
    self.unplacedSymbols_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mComponents_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mComponents_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_unplacedSymbols (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mComponents_property.addEBObserverOf_unplacedSymbols (self.unplacedSymbols_property)
  //--- Atomic property: unplacedPackages
    self.unplacedPackages_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mComponents_property_selection.kind ()
        kind &= unwSelf.mComponents_property_selection.kind ()
        kind &= unwSelf.mComponents_property_selection.kind ()
        kind &= unwSelf.mComponents_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mComponents_property_selection, unwSelf.mComponents_property_selection, unwSelf.mComponents_property_selection, unwSelf.mComponents_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_ProjectRoot_unplacedPackages (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mComponents_property.addEBObserver (self.unplacedPackages_property)
    self.mComponents_property.addEBObserverOf_componentName (self.unplacedPackages_property)
    self.mComponents_property.addEBObserverOf_mComponentValue (self.unplacedPackages_property)
    self.mComponents_property.addEBObserverOf_componentIsPlacedInBoard (self.unplacedPackages_property)
  //--- Atomic property: componentsPlacedInBoard
    self.componentsPlacedInBoard_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mComponents_property_selection.kind ()
        kind &= unwSelf.mComponents_property_selection.kind ()
        kind &= unwSelf.mComponents_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mComponents_property_selection, unwSelf.mComponents_property_selection, unwSelf.mComponents_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_ProjectRoot_componentsPlacedInBoard (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mComponents_property.addEBObserverOf_mNamePrefix (self.componentsPlacedInBoard_property)
    self.mComponents_property.addEBObserverOf_mNameIndex (self.componentsPlacedInBoard_property)
    self.mComponents_property.addEBObserverOf_componentIsPlacedInBoard (self.componentsPlacedInBoard_property)
  //--- Atomic property: placedComponentNameArray
    self.placedComponentNameArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mComponents_property_selection.kind ()
        kind &= unwSelf.mComponents_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mComponents_property_selection, unwSelf.mComponents_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ProjectRoot_placedComponentNameArray (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mComponents_property.addEBObserverOf_componentName (self.placedComponentNameArray_property)
    self.mComponents_property.addEBObserverOf_componentIsPlacedInBoard (self.placedComponentNameArray_property)
  //--- Atomic property: schematicStatusMessage
    self.schematicStatusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.unplacedSymbols_property_selection.kind ()
        kind &= unwSelf.netWarningCount_property_selection.kind ()
        kind &= unwSelf.mSheets_property_selection.kind ()
        kind &= unwSelf.mSheets_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.unplacedSymbols_property_selection, unwSelf.netWarningCount_property_selection, unwSelf.mSheets_property_selection, unwSelf.mSheets_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_ProjectRoot_schematicStatusMessage (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.unplacedSymbols_property.addEBObserver (self.schematicStatusMessage_property)
    self.netWarningCount_property.addEBObserver (self.schematicStatusMessage_property)
    self.mSheets_property.addEBObserverOf_connexionWarnings (self.schematicStatusMessage_property)
    self.mSheets_property.addEBObserverOf_connexionErrors (self.schematicStatusMessage_property)
  //--- Atomic property: schematicStatusImage
    self.schematicStatusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.unplacedSymbols_property_selection.kind ()
        kind &= unwSelf.netWarningCount_property_selection.kind ()
        kind &= unwSelf.mSheets_property_selection.kind ()
        kind &= unwSelf.mSheets_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.unplacedSymbols_property_selection, unwSelf.netWarningCount_property_selection, unwSelf.mSheets_property_selection, unwSelf.mSheets_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_ProjectRoot_schematicStatusImage (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.unplacedSymbols_property.addEBObserver (self.schematicStatusImage_property)
    self.netWarningCount_property.addEBObserver (self.schematicStatusImage_property)
    self.mSheets_property.addEBObserverOf_connexionWarnings (self.schematicStatusImage_property)
    self.mSheets_property.addEBObserverOf_connexionErrors (self.schematicStatusImage_property)
  //--- Install undoers and opposite setter for relationships
    self.mSheets_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
    self.mBorderCurves_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
    self.mBoardObjects_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- Atomic proxy property: minPPTPTTTWdisplayUnit
    self.minPPTPTTTWdisplayUnit_property.mReadModelFunction = nil
    self.minPPTPTTTWdisplayUnit_property.mWriteModelFunction = nil
    self.minPPTPTTTWdisplayUnit_property.mValidateAndWriteModelFunction = nil
    self.mArtwork_property.removeEBObserverOf_minPPTPTTTWdisplayUnit (self.minPPTPTTTWdisplayUnit_property)
  //--- Atomic proxy property: minPPTPTTTW
    self.minPPTPTTTW_property.mReadModelFunction = nil
    self.minPPTPTTTW_property.mWriteModelFunction = nil
    self.minPPTPTTTW_property.mValidateAndWriteModelFunction = nil
    self.mArtwork_property.removeEBObserverOf_minPPTPTTTW (self.minPPTPTTTW_property)
  //--- Atomic proxy property: minValueForOARdisplayUnit
    self.minValueForOARdisplayUnit_property.mReadModelFunction = nil
    self.minValueForOARdisplayUnit_property.mWriteModelFunction = nil
    self.minValueForOARdisplayUnit_property.mValidateAndWriteModelFunction = nil
    self.mArtwork_property.removeEBObserverOf_minValueForOARdisplayUnit (self.minValueForOARdisplayUnit_property)
  //--- Atomic proxy property: minValueForOARinEBUnit
    self.minValueForOARinEBUnit_property.mReadModelFunction = nil
    self.minValueForOARinEBUnit_property.mWriteModelFunction = nil
    self.minValueForOARinEBUnit_property.mValidateAndWriteModelFunction = nil
    self.mArtwork_property.removeEBObserverOf_minValueForOARinEBUnit (self.minValueForOARinEBUnit_property)
  //--- Atomic proxy property: minValueForPHDdisplayUnit
    self.minValueForPHDdisplayUnit_property.mReadModelFunction = nil
    self.minValueForPHDdisplayUnit_property.mWriteModelFunction = nil
    self.minValueForPHDdisplayUnit_property.mValidateAndWriteModelFunction = nil
    self.mArtwork_property.removeEBObserverOf_minValueForPHDdisplayUnit (self.minValueForPHDdisplayUnit_property)
  //--- Atomic proxy property: minValueForPHDinEBUnit
    self.minValueForPHDinEBUnit_property.mReadModelFunction = nil
    self.minValueForPHDinEBUnit_property.mWriteModelFunction = nil
    self.minValueForPHDinEBUnit_property.mValidateAndWriteModelFunction = nil
    self.mArtwork_property.removeEBObserverOf_minValueForPHDinEBUnit (self.minValueForPHDinEBUnit_property)
  //--- Atomic proxy property: minValueForBoardLimitWidth
    self.minValueForBoardLimitWidth_property.mReadModelFunction = nil
    self.minValueForBoardLimitWidth_property.mWriteModelFunction = nil
    self.minValueForBoardLimitWidth_property.mValidateAndWriteModelFunction = nil
    self.mArtwork_property.removeEBObserverOf_minValueForBoardLimitWidth (self.minValueForBoardLimitWidth_property)
  //--- Atomic proxy property: minValueForBoardLimitWidthDisplayUnit
    self.minValueForBoardLimitWidthDisplayUnit_property.mReadModelFunction = nil
    self.minValueForBoardLimitWidthDisplayUnit_property.mWriteModelFunction = nil
    self.minValueForBoardLimitWidthDisplayUnit_property.mValidateAndWriteModelFunction = nil
    self.mArtwork_property.removeEBObserverOf_minValueForBoardLimitWidthDisplayUnit (self.minValueForBoardLimitWidthDisplayUnit_property)
  //--- Atomic proxy property: drillDataFileExtension
    self.drillDataFileExtension_property.mReadModelFunction = nil
    self.drillDataFileExtension_property.mWriteModelFunction = nil
    self.drillDataFileExtension_property.mValidateAndWriteModelFunction = nil
    self.mArtwork_property.removeEBObserverOf_drillDataFileExtension (self.drillDataFileExtension_property)
  //--- Atomic proxy property: comments
    self.comments_property.mReadModelFunction = nil
    self.comments_property.mWriteModelFunction = nil
    self.comments_property.mValidateAndWriteModelFunction = nil
    self.mArtwork_property.removeEBObserverOf_comments (self.comments_property)
  //--- Atomic proxy property: selectedSheetTitle
    self.selectedSheetTitle_property.mReadModelFunction = nil
    self.selectedSheetTitle_property.mWriteModelFunction = nil
    self.selectedSheetTitle_property.mValidateAndWriteModelFunction = nil
    self.mSelectedSheet_property.removeEBObserverOf_mSheetTitle (self.selectedSheetTitle_property)
  //--- ToMany proxy: selectedSheetObjects
    self.selectedSheetObjects_property.setModel (nil)
    self.selectedSheetObjects_modelDidChangeController?.unregister ()
    self.selectedSheetObjects_modelDidChangeController = nil
  //--- ToMany proxy: fileGenerationParameterArray
    self.fileGenerationParameterArray_property.setModel (nil)
    self.fileGenerationParameterArray_modelDidChangeController?.unregister ()
    self.fileGenerationParameterArray_modelDidChangeController = nil
    self.mBoardGridStep_property.removeEBObserver (self.boardGridStepMultipliedByDisplayFactor_property)
    self.mBoardGridDisplayFactor_property.removeEBObserver (self.boardGridStepMultipliedByDisplayFactor_property)
    self.mBoardLimitsGridStep_property.removeEBObserver (self.boardLimitsGridStepMultipliedByDisplayFactor_property)
    self.mBoardLimitsGridDisplayFactor_property.removeEBObserver (self.boardLimitsGridStepMultipliedByDisplayFactor_property)
    self.mBoardShape_property.removeEBObserver (self.boardShapeIsRectangular_property)
    self.mSelectedSheet_property.removeEBObserverOf_issues (self.selectedSheetIssues_property)
    self.mSelectedSheet_property.removeEBObserverOf_connectedPoints (self.connectedPoints_property)
    self.selectedSheetIssues_property.removeEBObserver (self.connectedPoints_property)
    self.mSheets_property.removeEBObserverOf_connexionWarnings (self.connexionWarningString_property)
    self.mSheets_property.removeEBObserverOf_connexionErrors (self.connexionErrorString_property)
    self.mSheets_property.removeEBObserver (self.sheetIndexes_property)
    self.mNetClasses_property.removeEBObserverOf_netsDescription (self.netsDescription_property)
    self.mBoardObjects_property.removeEBObserverOf_issues (self.boardIssues_property)
    self.mBoardObjects_property.removeEBObserverOf_signatureForERCChecking (self.signatureForERCChecking_property)
    self.mArtwork_property.removeEBObserverOf_signatureForERCChecking (self.signatureForERCChecking_property)
    self.mLastERCCheckingIsSuccess_property.removeEBObserver (self.ercStatusImage_property)
    self.mLastERCCheckingSignature_property.removeEBObserver (self.ercStatusImage_property)
    self.signatureForERCChecking_property.removeEBObserver (self.ercStatusImage_property)
    self.mLastERCCheckingIsSuccess_property.removeEBObserver (self.ercStatusMessage_property)
    self.mLastERCCheckingSignature_property.removeEBObserver (self.ercStatusMessage_property)
    self.signatureForERCChecking_property.removeEBObserver (self.ercStatusMessage_property)
    self.mBoardObjects_property.removeEBObserverOf_isVia (self.viaCountString_property)
    self.mBoardObjects_property.removeEBObserverOf_trackLength (self.trackCountString_property)
    self.mBoardObjects_property.removeEBObserverOf_trackLength (self.trackLengthString_property)
    self.mTrackLengthUnit_property.removeEBObserver (self.trackLengthString_property)
    self.boardIssues_property.removeEBObserver (self.boardStatusImage_property)
    self.boardIssues_property.removeEBObserver (self.boardStatusMessage_property)
    self.mBorderCurves_property.removeEBObserverOf_descriptor (self.interiorBoundBox_property)
    self.mBoardShape_property.removeEBObserver (self.interiorBoundBox_property)
    self.mRectangularBoardWidth_property.removeEBObserver (self.interiorBoundBox_property)
    self.mRectangularBoardHeight_property.removeEBObserver (self.interiorBoundBox_property)
    self.mBoardClearance_property.removeEBObserver (self.interiorBoundBox_property)
    self.mBoardLimitsWidth_property.removeEBObserver (self.interiorBoundBox_property)
    self.interiorBoundBox_property.removeEBObserver (self.boardBoundBox_property)
    self.mBoardLimitsWidth_property.removeEBObserver (self.boardBoundBox_property)
    self.mBoardClearance_property.removeEBObserver (self.boardBoundBox_property)
    self.interiorBoundBox_property.removeEBObserver (self.boardInteriorTop_property)
    self.mBoardPointsBoundingBoxUnit_property.removeEBObserver (self.boardInteriorTop_property)
    self.interiorBoundBox_property.removeEBObserver (self.boardInteriorBottom_property)
    self.mBoardPointsBoundingBoxUnit_property.removeEBObserver (self.boardInteriorBottom_property)
    self.interiorBoundBox_property.removeEBObserver (self.boardInteriorLeft_property)
    self.mBoardPointsBoundingBoxUnit_property.removeEBObserver (self.boardInteriorLeft_property)
    self.interiorBoundBox_property.removeEBObserver (self.boardInteriorRight_property)
    self.mBoardPointsBoundingBoxUnit_property.removeEBObserver (self.boardInteriorRight_property)
    self.boardBoundBox_property.removeEBObserver (self.boardLimitBorderTop_property)
    self.mBoardLimitsBoundingBoxUnit_property.removeEBObserver (self.boardLimitBorderTop_property)
    self.boardBoundBox_property.removeEBObserver (self.boardLimitBorderBottom_property)
    self.mBoardLimitsBoundingBoxUnit_property.removeEBObserver (self.boardLimitBorderBottom_property)
    self.boardBoundBox_property.removeEBObserver (self.boardLimitBorderLeft_property)
    self.mBoardLimitsBoundingBoxUnit_property.removeEBObserver (self.boardLimitBorderLeft_property)
    self.boardBoundBox_property.removeEBObserver (self.boardLimitBorderRight_property)
    self.mBoardLimitsBoundingBoxUnit_property.removeEBObserver (self.boardLimitBorderRight_property)
    self.mBorderCurves_property.removeEBObserver (self.borderElementCountString_property)
    self.mBorderCurves_property.removeEBObserverOf_descriptor (self.borderOutlineBackground_property)
    self.mBoardShape_property.removeEBObserver (self.borderOutlineBackground_property)
    self.mRectangularBoardWidth_property.removeEBObserver (self.borderOutlineBackground_property)
    self.mRectangularBoardHeight_property.removeEBObserver (self.borderOutlineBackground_property)
    self.mBoardLimitsWidth_property.removeEBObserver (self.borderOutlineBackground_property)
    g_Preferences?.boardLimitsColorForBoard_property.removeEBObserver (self.borderOutlineBackground_property)
    self.mBoardClearance_property.removeEBObserver (self.borderOutlineBackground_property)
    g_Preferences?.boardClearanceColorForBoard_property.removeEBObserver (self.borderOutlineBackground_property)
    g_Preferences?.boardBackgroundColorForBoard_property.removeEBObserver (self.boarderViewBackground_property)
    self.borderOutlineBackground_property.removeEBObserver (self.boarderViewBackground_property)
    self.mBoardObjects_property.removeEBObserverOf_objectDisplay (self.boarderViewBackground_property)
    self.mDevices_property.removeEBObserverOf_mDeviceName (self.deviceNames_property)
    self.mNetClasses_property.removeEBObserverOf_mNetClassName (self.allClassNames_property)
    self.mSchematicSheetOrientation_property.removeEBObserver (self.sheetGeometry_property)
    self.mSchematicCustomWidth_property.removeEBObserver (self.sheetGeometry_property)
    self.mSchematicCustomHeight_property.removeEBObserver (self.sheetGeometry_property)
    self.mSchematicTitle_property.removeEBObserver (self.schematicBackgroundDisplay_property)
    self.mSchematicVersion_property.removeEBObserver (self.schematicBackgroundDisplay_property)
    self.sheetGeometry_property.removeEBObserver (self.schematicBackgroundDisplay_property)
    self.mSelectedSheet_property.removeEBObserverOf_mSheetTitle (self.schematicBackgroundDisplay_property)
    self.mSheets_property.removeEBObserver (self.schematicBackgroundDisplay_property)
    self.mSelectedSheet_property.removeEBObserver (self.schematicBackgroundDisplay_property)
    self.mSchematicDate_property.removeEBObserver (self.schematicBackgroundDisplay_property)
    self.mNetClasses_property.removeEBObserverOf_netWarningCount (self.netWarningCount_property)
    self.mNetClasses_property.removeEBObserverOf_netsDescription (self.netNamesArray_property)
    self.mComponents_property.removeEBObserverOf_unplacedSymbols (self.unplacedSymbols_property)
    self.mComponents_property.removeEBObserver (self.unplacedPackages_property)
    self.mComponents_property.removeEBObserverOf_componentName (self.unplacedPackages_property)
    self.mComponents_property.removeEBObserverOf_mComponentValue (self.unplacedPackages_property)
    self.mComponents_property.removeEBObserverOf_componentIsPlacedInBoard (self.unplacedPackages_property)
    self.mComponents_property.removeEBObserverOf_mNamePrefix (self.componentsPlacedInBoard_property)
    self.mComponents_property.removeEBObserverOf_mNameIndex (self.componentsPlacedInBoard_property)
    self.mComponents_property.removeEBObserverOf_componentIsPlacedInBoard (self.componentsPlacedInBoard_property)
    self.mComponents_property.removeEBObserverOf_componentName (self.placedComponentNameArray_property)
    self.mComponents_property.removeEBObserverOf_componentIsPlacedInBoard (self.placedComponentNameArray_property)
    self.unplacedSymbols_property.removeEBObserver (self.schematicStatusMessage_property)
    self.netWarningCount_property.removeEBObserver (self.schematicStatusMessage_property)
    self.mSheets_property.removeEBObserverOf_connexionWarnings (self.schematicStatusMessage_property)
    self.mSheets_property.removeEBObserverOf_connexionErrors (self.schematicStatusMessage_property)
    self.unplacedSymbols_property.removeEBObserver (self.schematicStatusImage_property)
    self.netWarningCount_property.removeEBObserver (self.schematicStatusImage_property)
    self.mSheets_property.removeEBObserverOf_connexionWarnings (self.schematicStatusImage_property)
    self.mSheets_property.removeEBObserverOf_connexionErrors (self.schematicStatusImage_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mArtworkName",
      idx: self.mArtworkName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mArtworkName_property.mObserverExplorer,
      valueExplorer: &self.mArtworkName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mArtworkVersion",
      idx: self.mArtworkVersion_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mArtworkVersion_property.mObserverExplorer,
      valueExplorer: &self.mArtworkVersion_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mCheckClearanceBetweenPadsOfSameNet",
      idx: self.mCheckClearanceBetweenPadsOfSameNet_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCheckClearanceBetweenPadsOfSameNet_property.mObserverExplorer,
      valueExplorer: &self.mCheckClearanceBetweenPadsOfSameNet_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mLastERCCheckingIsSuccess",
      idx: self.mLastERCCheckingIsSuccess_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mLastERCCheckingIsSuccess_property.mObserverExplorer,
      valueExplorer: &self.mLastERCCheckingIsSuccess_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mLastERCCheckingSignature",
      idx: self.mLastERCCheckingSignature_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mLastERCCheckingSignature_property.mObserverExplorer,
      valueExplorer: &self.mLastERCCheckingSignature_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mAutoRouterPreferredDirections",
      idx: self.mAutoRouterPreferredDirections_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mAutoRouterPreferredDirections_property.mObserverExplorer,
      valueExplorer: &self.mAutoRouterPreferredDirections_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mAutorouterSnapAngle",
      idx: self.mAutorouterSnapAngle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mAutorouterSnapAngle_property.mObserverExplorer,
      valueExplorer: &self.mAutorouterSnapAngle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mRouteDirection",
      idx: self.mRouteDirection_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mRouteDirection_property.mObserverExplorer,
      valueExplorer: &self.mRouteDirection_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mRouteOrigin",
      idx: self.mRouteOrigin_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mRouteOrigin_property.mObserverExplorer,
      valueExplorer: &self.mRouteOrigin_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mTrackLengthUnit",
      idx: self.mTrackLengthUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mTrackLengthUnit_property.mObserverExplorer,
      valueExplorer: &self.mTrackLengthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mLayoutClearance",
      idx: self.mLayoutClearance_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mLayoutClearance_property.mObserverExplorer,
      valueExplorer: &self.mLayoutClearance_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mLayoutClearanceUnit",
      idx: self.mLayoutClearanceUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mLayoutClearanceUnit_property.mObserverExplorer,
      valueExplorer: &self.mLayoutClearanceUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardSelectedInspector",
      idx: self.mBoardSelectedInspector_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardSelectedInspector_property.mObserverExplorer,
      valueExplorer: &self.mBoardSelectedInspector_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardHorizontalFlip",
      idx: self.mBoardHorizontalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardHorizontalFlip_property.mObserverExplorer,
      valueExplorer: &self.mBoardHorizontalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardVerticalFlip",
      idx: self.mBoardVerticalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardVerticalFlip_property.mObserverExplorer,
      valueExplorer: &self.mBoardVerticalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardGridStyle",
      idx: self.mBoardGridStyle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardGridStyle_property.mObserverExplorer,
      valueExplorer: &self.mBoardGridStyle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardGridDisplayFactor",
      idx: self.mBoardGridDisplayFactor_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardGridDisplayFactor_property.mObserverExplorer,
      valueExplorer: &self.mBoardGridDisplayFactor_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardZoom",
      idx: self.mBoardZoom_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardZoom_property.mObserverExplorer,
      valueExplorer: &self.mBoardZoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardGridStep",
      idx: self.mBoardGridStep_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardGridStep_property.mObserverExplorer,
      valueExplorer: &self.mBoardGridStep_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardGridStepUnit",
      idx: self.mBoardGridStepUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardGridStepUnit_property.mObserverExplorer,
      valueExplorer: &self.mBoardGridStepUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mErrorOrWarningIssueSize",
      idx: self.mErrorOrWarningIssueSize_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mErrorOrWarningIssueSize_property.mObserverExplorer,
      valueExplorer: &self.mErrorOrWarningIssueSize_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mControlKeyHiliteDiameter",
      idx: self.mControlKeyHiliteDiameter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mControlKeyHiliteDiameter_property.mObserverExplorer,
      valueExplorer: &self.mControlKeyHiliteDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardLimitsWidth",
      idx: self.mBoardLimitsWidth_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardLimitsWidth_property.mObserverExplorer,
      valueExplorer: &self.mBoardLimitsWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardLimitsWidthUnit",
      idx: self.mBoardLimitsWidthUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardLimitsWidthUnit_property.mObserverExplorer,
      valueExplorer: &self.mBoardLimitsWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardClearance",
      idx: self.mBoardClearance_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardClearance_property.mObserverExplorer,
      valueExplorer: &self.mBoardClearance_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardClearanceUnit",
      idx: self.mBoardClearanceUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardClearanceUnit_property.mObserverExplorer,
      valueExplorer: &self.mBoardClearanceUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardLimitsSelectedInspector",
      idx: self.mBoardLimitsSelectedInspector_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardLimitsSelectedInspector_property.mObserverExplorer,
      valueExplorer: &self.mBoardLimitsSelectedInspector_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardLimitsHorizontalFlip",
      idx: self.mBoardLimitsHorizontalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardLimitsHorizontalFlip_property.mObserverExplorer,
      valueExplorer: &self.mBoardLimitsHorizontalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardLimitsVerticalFlip",
      idx: self.mBoardLimitsVerticalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardLimitsVerticalFlip_property.mObserverExplorer,
      valueExplorer: &self.mBoardLimitsVerticalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardLimitsGridStyle",
      idx: self.mBoardLimitsGridStyle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardLimitsGridStyle_property.mObserverExplorer,
      valueExplorer: &self.mBoardLimitsGridStyle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardLimitsGridDisplayFactor",
      idx: self.mBoardLimitsGridDisplayFactor_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardLimitsGridDisplayFactor_property.mObserverExplorer,
      valueExplorer: &self.mBoardLimitsGridDisplayFactor_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardLimitsZoom",
      idx: self.mBoardLimitsZoom_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardLimitsZoom_property.mObserverExplorer,
      valueExplorer: &self.mBoardLimitsZoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardLimitsGridStep",
      idx: self.mBoardLimitsGridStep_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardLimitsGridStep_property.mObserverExplorer,
      valueExplorer: &self.mBoardLimitsGridStep_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardLimitsGridStepUnit",
      idx: self.mBoardLimitsGridStepUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardLimitsGridStepUnit_property.mObserverExplorer,
      valueExplorer: &self.mBoardLimitsGridStepUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardLimitsBoundingBoxUnit",
      idx: self.mBoardLimitsBoundingBoxUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardLimitsBoundingBoxUnit_property.mObserverExplorer,
      valueExplorer: &self.mBoardLimitsBoundingBoxUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardPointsBoundingBoxUnit",
      idx: self.mBoardPointsBoundingBoxUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardPointsBoundingBoxUnit_property.mObserverExplorer,
      valueExplorer: &self.mBoardPointsBoundingBoxUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardSelectedCurveDisplayUnit",
      idx: self.mBoardSelectedCurveDisplayUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardSelectedCurveDisplayUnit_property.mObserverExplorer,
      valueExplorer: &self.mBoardSelectedCurveDisplayUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mBoardShape",
      idx: self.mBoardShape_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mBoardShape_property.mObserverExplorer,
      valueExplorer: &self.mBoardShape_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mRectangularBoardWidth",
      idx: self.mRectangularBoardWidth_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mRectangularBoardWidth_property.mObserverExplorer,
      valueExplorer: &self.mRectangularBoardWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mRectangularBoardWidthUnit",
      idx: self.mRectangularBoardWidthUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mRectangularBoardWidthUnit_property.mObserverExplorer,
      valueExplorer: &self.mRectangularBoardWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mRectangularBoardHeight",
      idx: self.mRectangularBoardHeight_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mRectangularBoardHeight_property.mObserverExplorer,
      valueExplorer: &self.mRectangularBoardHeight_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mRectangularBoardHeightUnit",
      idx: self.mRectangularBoardHeightUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mRectangularBoardHeightUnit_property.mObserverExplorer,
      valueExplorer: &self.mRectangularBoardHeightUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDefaultNetClassName",
      idx: self.mDefaultNetClassName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDefaultNetClassName_property.mObserverExplorer,
      valueExplorer: &self.mDefaultNetClassName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSelectedPageIndex",
      idx: self.mSelectedPageIndex_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSelectedPageIndex_property.mObserverExplorer,
      valueExplorer: &self.mSelectedPageIndex_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSelectedSchematicInspector",
      idx: self.mSelectedSchematicInspector_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSelectedSchematicInspector_property.mObserverExplorer,
      valueExplorer: &self.mSelectedSchematicInspector_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicTitle",
      idx: self.mSchematicTitle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicTitle_property.mObserverExplorer,
      valueExplorer: &self.mSchematicTitle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicVersion",
      idx: self.mSchematicVersion_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicVersion_property.mObserverExplorer,
      valueExplorer: &self.mSchematicVersion_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicDate",
      idx: self.mSchematicDate_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicDate_property.mObserverExplorer,
      valueExplorer: &self.mSchematicDate_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicHorizontalFlip",
      idx: self.mSchematicHorizontalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicHorizontalFlip_property.mObserverExplorer,
      valueExplorer: &self.mSchematicHorizontalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicVerticalFlip",
      idx: self.mSchematicVerticalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicVerticalFlip_property.mObserverExplorer,
      valueExplorer: &self.mSchematicVerticalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicZoom",
      idx: self.mSchematicZoom_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicZoom_property.mObserverExplorer,
      valueExplorer: &self.mSchematicZoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicGridStyle",
      idx: self.mSchematicGridStyle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicGridStyle_property.mObserverExplorer,
      valueExplorer: &self.mSchematicGridStyle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicGridDisplayFactor",
      idx: self.mSchematicGridDisplayFactor_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicGridDisplayFactor_property.mObserverExplorer,
      valueExplorer: &self.mSchematicGridDisplayFactor_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicCustomWidth",
      idx: self.mSchematicCustomWidth_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicCustomWidth_property.mObserverExplorer,
      valueExplorer: &self.mSchematicCustomWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicCustomWidthUnit",
      idx: self.mSchematicCustomWidthUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicCustomWidthUnit_property.mObserverExplorer,
      valueExplorer: &self.mSchematicCustomWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicCustomHeight",
      idx: self.mSchematicCustomHeight_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicCustomHeight_property.mObserverExplorer,
      valueExplorer: &self.mSchematicCustomHeight_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicCustomHeightUnit",
      idx: self.mSchematicCustomHeightUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicCustomHeightUnit_property.mObserverExplorer,
      valueExplorer: &self.mSchematicCustomHeightUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicSheetOrientation",
      idx: self.mSchematicSheetOrientation_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicSheetOrientation_property.mObserverExplorer,
      valueExplorer: &self.mSchematicSheetOrientation_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mRastnetDisplay",
      idx: self.mRastnetDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mRastnetDisplay_property.mObserverExplorer,
      valueExplorer: &self.mRastnetDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mRastnetDisplayedNetName",
      idx: self.mRastnetDisplayedNetName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mRastnetDisplayedNetName_property.mObserverExplorer,
      valueExplorer: &self.mRastnetDisplayedNetName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mRastnetDisplayedComponentName",
      idx: self.mRastnetDisplayedComponentName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mRastnetDisplayedComponentName_property.mObserverExplorer,
      valueExplorer: &self.mRastnetDisplayedComponentName_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "boardGridStepMultipliedByDisplayFactor",
      idx: self.boardGridStepMultipliedByDisplayFactor_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardGridStepMultipliedByDisplayFactor_property.mObserverExplorer,
      valueExplorer: &self.boardGridStepMultipliedByDisplayFactor_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitsGridStepMultipliedByDisplayFactor",
      idx: self.boardLimitsGridStepMultipliedByDisplayFactor_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardLimitsGridStepMultipliedByDisplayFactor_property.mObserverExplorer,
      valueExplorer: &self.boardLimitsGridStepMultipliedByDisplayFactor_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardShapeIsRectangular",
      idx: self.boardShapeIsRectangular_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardShapeIsRectangular_property.mObserverExplorer,
      valueExplorer: &self.boardShapeIsRectangular_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedSheetIssues",
      idx: self.selectedSheetIssues_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectedSheetIssues_property.mObserverExplorer,
      valueExplorer: &self.selectedSheetIssues_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "connectedPoints",
      idx: self.connectedPoints_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.connectedPoints_property.mObserverExplorer,
      valueExplorer: &self.connectedPoints_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "connexionWarningString",
      idx: self.connexionWarningString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.connexionWarningString_property.mObserverExplorer,
      valueExplorer: &self.connexionWarningString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "connexionErrorString",
      idx: self.connexionErrorString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.connexionErrorString_property.mObserverExplorer,
      valueExplorer: &self.connexionErrorString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "sheetIndexes",
      idx: self.sheetIndexes_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.sheetIndexes_property.mObserverExplorer,
      valueExplorer: &self.sheetIndexes_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netsDescription",
      idx: self.netsDescription_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netsDescription_property.mObserverExplorer,
      valueExplorer: &self.netsDescription_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardIssues",
      idx: self.boardIssues_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardIssues_property.mObserverExplorer,
      valueExplorer: &self.boardIssues_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "signatureForERCChecking",
      idx: self.signatureForERCChecking_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.signatureForERCChecking_property.mObserverExplorer,
      valueExplorer: &self.signatureForERCChecking_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "ercStatusImage",
      idx: self.ercStatusImage_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.ercStatusImage_property.mObserverExplorer,
      valueExplorer: &self.ercStatusImage_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "ercStatusMessage",
      idx: self.ercStatusMessage_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.ercStatusMessage_property.mObserverExplorer,
      valueExplorer: &self.ercStatusMessage_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viaCountString",
      idx: self.viaCountString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.viaCountString_property.mObserverExplorer,
      valueExplorer: &self.viaCountString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "trackCountString",
      idx: self.trackCountString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.trackCountString_property.mObserverExplorer,
      valueExplorer: &self.trackCountString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "trackLengthString",
      idx: self.trackLengthString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.trackLengthString_property.mObserverExplorer,
      valueExplorer: &self.trackLengthString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardStatusImage",
      idx: self.boardStatusImage_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardStatusImage_property.mObserverExplorer,
      valueExplorer: &self.boardStatusImage_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardStatusMessage",
      idx: self.boardStatusMessage_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardStatusMessage_property.mObserverExplorer,
      valueExplorer: &self.boardStatusMessage_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "interiorBoundBox",
      idx: self.interiorBoundBox_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.interiorBoundBox_property.mObserverExplorer,
      valueExplorer: &self.interiorBoundBox_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardBoundBox",
      idx: self.boardBoundBox_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardBoundBox_property.mObserverExplorer,
      valueExplorer: &self.boardBoundBox_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardInteriorTop",
      idx: self.boardInteriorTop_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardInteriorTop_property.mObserverExplorer,
      valueExplorer: &self.boardInteriorTop_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardInteriorBottom",
      idx: self.boardInteriorBottom_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardInteriorBottom_property.mObserverExplorer,
      valueExplorer: &self.boardInteriorBottom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardInteriorLeft",
      idx: self.boardInteriorLeft_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardInteriorLeft_property.mObserverExplorer,
      valueExplorer: &self.boardInteriorLeft_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardInteriorRight",
      idx: self.boardInteriorRight_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardInteriorRight_property.mObserverExplorer,
      valueExplorer: &self.boardInteriorRight_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitBorderTop",
      idx: self.boardLimitBorderTop_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardLimitBorderTop_property.mObserverExplorer,
      valueExplorer: &self.boardLimitBorderTop_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitBorderBottom",
      idx: self.boardLimitBorderBottom_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardLimitBorderBottom_property.mObserverExplorer,
      valueExplorer: &self.boardLimitBorderBottom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitBorderLeft",
      idx: self.boardLimitBorderLeft_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardLimitBorderLeft_property.mObserverExplorer,
      valueExplorer: &self.boardLimitBorderLeft_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boardLimitBorderRight",
      idx: self.boardLimitBorderRight_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boardLimitBorderRight_property.mObserverExplorer,
      valueExplorer: &self.boardLimitBorderRight_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "borderElementCountString",
      idx: self.borderElementCountString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.borderElementCountString_property.mObserverExplorer,
      valueExplorer: &self.borderElementCountString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "borderOutlineBackground",
      idx: self.borderOutlineBackground_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.borderOutlineBackground_property.mObserverExplorer,
      valueExplorer: &self.borderOutlineBackground_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "boarderViewBackground",
      idx: self.boarderViewBackground_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.boarderViewBackground_property.mObserverExplorer,
      valueExplorer: &self.boarderViewBackground_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "deviceNames",
      idx: self.deviceNames_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.deviceNames_property.mObserverExplorer,
      valueExplorer: &self.deviceNames_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "allClassNames",
      idx: self.allClassNames_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.allClassNames_property.mObserverExplorer,
      valueExplorer: &self.allClassNames_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "sheetGeometry",
      idx: self.sheetGeometry_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.sheetGeometry_property.mObserverExplorer,
      valueExplorer: &self.sheetGeometry_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "schematicBackgroundDisplay",
      idx: self.schematicBackgroundDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.schematicBackgroundDisplay_property.mObserverExplorer,
      valueExplorer: &self.schematicBackgroundDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netWarningCount",
      idx: self.netWarningCount_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netWarningCount_property.mObserverExplorer,
      valueExplorer: &self.netWarningCount_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netNamesArray",
      idx: self.netNamesArray_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netNamesArray_property.mObserverExplorer,
      valueExplorer: &self.netNamesArray_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "unplacedSymbols",
      idx: self.unplacedSymbols_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.unplacedSymbols_property.mObserverExplorer,
      valueExplorer: &self.unplacedSymbols_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "unplacedPackages",
      idx: self.unplacedPackages_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.unplacedPackages_property.mObserverExplorer,
      valueExplorer: &self.unplacedPackages_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "componentsPlacedInBoard",
      idx: self.componentsPlacedInBoard_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.componentsPlacedInBoard_property.mObserverExplorer,
      valueExplorer: &self.componentsPlacedInBoard_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "placedComponentNameArray",
      idx: self.placedComponentNameArray_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.placedComponentNameArray_property.mObserverExplorer,
      valueExplorer: &self.placedComponentNameArray_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "schematicStatusMessage",
      idx: self.schematicStatusMessage_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.schematicStatusMessage_property.mObserverExplorer,
      valueExplorer: &self.schematicStatusMessage_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "schematicStatusImage",
      idx: self.schematicStatusImage_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.schematicStatusImage_property.mObserverExplorer,
      valueExplorer: &self.schematicStatusImage_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "mSheets",
      idx:mSheets_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mSheets_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mNetClasses",
      idx:mNetClasses_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mNetClasses_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mFonts",
      idx:mFonts_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mFonts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mDevices",
      idx:mDevices_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mDevices_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mBorderCurves",
      idx:mBorderCurves_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mBorderCurves_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mBoardObjects",
      idx:mBoardObjects_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mBoardObjects_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mComponents",
      idx:mComponents_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mComponents_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "mSelectedSheet",
      idx:self.mSelectedSheet_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mSelectedSheet_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mArtwork",
      idx:self.mArtwork_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mArtwork_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mArtworkName
    self.mArtworkName_property.mObserverExplorer = nil
    self.mArtworkName_property.mValueExplorer = nil
  //--- Atomic property: mArtworkVersion
    self.mArtworkVersion_property.mObserverExplorer = nil
    self.mArtworkVersion_property.mValueExplorer = nil
  //--- Atomic property: mCheckClearanceBetweenPadsOfSameNet
    self.mCheckClearanceBetweenPadsOfSameNet_property.mObserverExplorer = nil
    self.mCheckClearanceBetweenPadsOfSameNet_property.mValueExplorer = nil
  //--- Atomic property: mLastERCCheckingIsSuccess
    self.mLastERCCheckingIsSuccess_property.mObserverExplorer = nil
    self.mLastERCCheckingIsSuccess_property.mValueExplorer = nil
  //--- Atomic property: mLastERCCheckingSignature
    self.mLastERCCheckingSignature_property.mObserverExplorer = nil
    self.mLastERCCheckingSignature_property.mValueExplorer = nil
  //--- Atomic property: mAutoRouterPreferredDirections
    self.mAutoRouterPreferredDirections_property.mObserverExplorer = nil
    self.mAutoRouterPreferredDirections_property.mValueExplorer = nil
  //--- Atomic property: mAutorouterSnapAngle
    self.mAutorouterSnapAngle_property.mObserverExplorer = nil
    self.mAutorouterSnapAngle_property.mValueExplorer = nil
  //--- Atomic property: mRouteDirection
    self.mRouteDirection_property.mObserverExplorer = nil
    self.mRouteDirection_property.mValueExplorer = nil
  //--- Atomic property: mRouteOrigin
    self.mRouteOrigin_property.mObserverExplorer = nil
    self.mRouteOrigin_property.mValueExplorer = nil
  //--- Atomic property: mTrackLengthUnit
    self.mTrackLengthUnit_property.mObserverExplorer = nil
    self.mTrackLengthUnit_property.mValueExplorer = nil
  //--- Atomic property: mLayoutClearance
    self.mLayoutClearance_property.mObserverExplorer = nil
    self.mLayoutClearance_property.mValueExplorer = nil
  //--- Atomic property: mLayoutClearanceUnit
    self.mLayoutClearanceUnit_property.mObserverExplorer = nil
    self.mLayoutClearanceUnit_property.mValueExplorer = nil
  //--- Atomic property: mBoardSelectedInspector
    self.mBoardSelectedInspector_property.mObserverExplorer = nil
    self.mBoardSelectedInspector_property.mValueExplorer = nil
  //--- Atomic property: mBoardHorizontalFlip
    self.mBoardHorizontalFlip_property.mObserverExplorer = nil
    self.mBoardHorizontalFlip_property.mValueExplorer = nil
  //--- Atomic property: mBoardVerticalFlip
    self.mBoardVerticalFlip_property.mObserverExplorer = nil
    self.mBoardVerticalFlip_property.mValueExplorer = nil
  //--- Atomic property: mBoardGridStyle
    self.mBoardGridStyle_property.mObserverExplorer = nil
    self.mBoardGridStyle_property.mValueExplorer = nil
  //--- Atomic property: mBoardGridDisplayFactor
    self.mBoardGridDisplayFactor_property.mObserverExplorer = nil
    self.mBoardGridDisplayFactor_property.mValueExplorer = nil
  //--- Atomic property: mBoardZoom
    self.mBoardZoom_property.mObserverExplorer = nil
    self.mBoardZoom_property.mValueExplorer = nil
  //--- Atomic property: mBoardGridStep
    self.mBoardGridStep_property.mObserverExplorer = nil
    self.mBoardGridStep_property.mValueExplorer = nil
  //--- Atomic property: mBoardGridStepUnit
    self.mBoardGridStepUnit_property.mObserverExplorer = nil
    self.mBoardGridStepUnit_property.mValueExplorer = nil
  //--- Atomic property: mErrorOrWarningIssueSize
    self.mErrorOrWarningIssueSize_property.mObserverExplorer = nil
    self.mErrorOrWarningIssueSize_property.mValueExplorer = nil
  //--- Atomic property: mControlKeyHiliteDiameter
    self.mControlKeyHiliteDiameter_property.mObserverExplorer = nil
    self.mControlKeyHiliteDiameter_property.mValueExplorer = nil
  //--- Atomic property: mBoardLimitsWidth
    self.mBoardLimitsWidth_property.mObserverExplorer = nil
    self.mBoardLimitsWidth_property.mValueExplorer = nil
  //--- Atomic property: mBoardLimitsWidthUnit
    self.mBoardLimitsWidthUnit_property.mObserverExplorer = nil
    self.mBoardLimitsWidthUnit_property.mValueExplorer = nil
  //--- Atomic property: mBoardClearance
    self.mBoardClearance_property.mObserverExplorer = nil
    self.mBoardClearance_property.mValueExplorer = nil
  //--- Atomic property: mBoardClearanceUnit
    self.mBoardClearanceUnit_property.mObserverExplorer = nil
    self.mBoardClearanceUnit_property.mValueExplorer = nil
  //--- Atomic property: mBoardLimitsSelectedInspector
    self.mBoardLimitsSelectedInspector_property.mObserverExplorer = nil
    self.mBoardLimitsSelectedInspector_property.mValueExplorer = nil
  //--- Atomic property: mBoardLimitsHorizontalFlip
    self.mBoardLimitsHorizontalFlip_property.mObserverExplorer = nil
    self.mBoardLimitsHorizontalFlip_property.mValueExplorer = nil
  //--- Atomic property: mBoardLimitsVerticalFlip
    self.mBoardLimitsVerticalFlip_property.mObserverExplorer = nil
    self.mBoardLimitsVerticalFlip_property.mValueExplorer = nil
  //--- Atomic property: mBoardLimitsGridStyle
    self.mBoardLimitsGridStyle_property.mObserverExplorer = nil
    self.mBoardLimitsGridStyle_property.mValueExplorer = nil
  //--- Atomic property: mBoardLimitsGridDisplayFactor
    self.mBoardLimitsGridDisplayFactor_property.mObserverExplorer = nil
    self.mBoardLimitsGridDisplayFactor_property.mValueExplorer = nil
  //--- Atomic property: mBoardLimitsZoom
    self.mBoardLimitsZoom_property.mObserverExplorer = nil
    self.mBoardLimitsZoom_property.mValueExplorer = nil
  //--- Atomic property: mBoardLimitsGridStep
    self.mBoardLimitsGridStep_property.mObserverExplorer = nil
    self.mBoardLimitsGridStep_property.mValueExplorer = nil
  //--- Atomic property: mBoardLimitsGridStepUnit
    self.mBoardLimitsGridStepUnit_property.mObserverExplorer = nil
    self.mBoardLimitsGridStepUnit_property.mValueExplorer = nil
  //--- Atomic property: mBoardLimitsBoundingBoxUnit
    self.mBoardLimitsBoundingBoxUnit_property.mObserverExplorer = nil
    self.mBoardLimitsBoundingBoxUnit_property.mValueExplorer = nil
  //--- Atomic property: mBoardPointsBoundingBoxUnit
    self.mBoardPointsBoundingBoxUnit_property.mObserverExplorer = nil
    self.mBoardPointsBoundingBoxUnit_property.mValueExplorer = nil
  //--- Atomic property: mBoardSelectedCurveDisplayUnit
    self.mBoardSelectedCurveDisplayUnit_property.mObserverExplorer = nil
    self.mBoardSelectedCurveDisplayUnit_property.mValueExplorer = nil
  //--- Atomic property: mBoardShape
    self.mBoardShape_property.mObserverExplorer = nil
    self.mBoardShape_property.mValueExplorer = nil
  //--- Atomic property: mRectangularBoardWidth
    self.mRectangularBoardWidth_property.mObserverExplorer = nil
    self.mRectangularBoardWidth_property.mValueExplorer = nil
  //--- Atomic property: mRectangularBoardWidthUnit
    self.mRectangularBoardWidthUnit_property.mObserverExplorer = nil
    self.mRectangularBoardWidthUnit_property.mValueExplorer = nil
  //--- Atomic property: mRectangularBoardHeight
    self.mRectangularBoardHeight_property.mObserverExplorer = nil
    self.mRectangularBoardHeight_property.mValueExplorer = nil
  //--- Atomic property: mRectangularBoardHeightUnit
    self.mRectangularBoardHeightUnit_property.mObserverExplorer = nil
    self.mRectangularBoardHeightUnit_property.mValueExplorer = nil
  //--- To many property: mSheets
    self.mSheets_property.mValueExplorer = nil
  //--- Atomic property: mDefaultNetClassName
    self.mDefaultNetClassName_property.mObserverExplorer = nil
    self.mDefaultNetClassName_property.mValueExplorer = nil
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.mObserverExplorer = nil
    self.mSelectedPageIndex_property.mValueExplorer = nil
  //--- Atomic property: mSelectedSchematicInspector
    self.mSelectedSchematicInspector_property.mObserverExplorer = nil
    self.mSelectedSchematicInspector_property.mValueExplorer = nil
  //--- Atomic property: mSchematicTitle
    self.mSchematicTitle_property.mObserverExplorer = nil
    self.mSchematicTitle_property.mValueExplorer = nil
  //--- Atomic property: mSchematicVersion
    self.mSchematicVersion_property.mObserverExplorer = nil
    self.mSchematicVersion_property.mValueExplorer = nil
  //--- Atomic property: mSchematicDate
    self.mSchematicDate_property.mObserverExplorer = nil
    self.mSchematicDate_property.mValueExplorer = nil
  //--- Atomic property: mSchematicHorizontalFlip
    self.mSchematicHorizontalFlip_property.mObserverExplorer = nil
    self.mSchematicHorizontalFlip_property.mValueExplorer = nil
  //--- Atomic property: mSchematicVerticalFlip
    self.mSchematicVerticalFlip_property.mObserverExplorer = nil
    self.mSchematicVerticalFlip_property.mValueExplorer = nil
  //--- Atomic property: mSchematicZoom
    self.mSchematicZoom_property.mObserverExplorer = nil
    self.mSchematicZoom_property.mValueExplorer = nil
  //--- Atomic property: mSchematicGridStyle
    self.mSchematicGridStyle_property.mObserverExplorer = nil
    self.mSchematicGridStyle_property.mValueExplorer = nil
  //--- Atomic property: mSchematicGridDisplayFactor
    self.mSchematicGridDisplayFactor_property.mObserverExplorer = nil
    self.mSchematicGridDisplayFactor_property.mValueExplorer = nil
  //--- Atomic property: mSchematicCustomWidth
    self.mSchematicCustomWidth_property.mObserverExplorer = nil
    self.mSchematicCustomWidth_property.mValueExplorer = nil
  //--- Atomic property: mSchematicCustomWidthUnit
    self.mSchematicCustomWidthUnit_property.mObserverExplorer = nil
    self.mSchematicCustomWidthUnit_property.mValueExplorer = nil
  //--- Atomic property: mSchematicCustomHeight
    self.mSchematicCustomHeight_property.mObserverExplorer = nil
    self.mSchematicCustomHeight_property.mValueExplorer = nil
  //--- Atomic property: mSchematicCustomHeightUnit
    self.mSchematicCustomHeightUnit_property.mObserverExplorer = nil
    self.mSchematicCustomHeightUnit_property.mValueExplorer = nil
  //--- To many property: mNetClasses
    self.mNetClasses_property.mValueExplorer = nil
  //--- To many property: mFonts
    self.mFonts_property.mValueExplorer = nil
  //--- To many property: mDevices
    self.mDevices_property.mValueExplorer = nil
  //--- Atomic property: mSchematicSheetOrientation
    self.mSchematicSheetOrientation_property.mObserverExplorer = nil
    self.mSchematicSheetOrientation_property.mValueExplorer = nil
  //--- To many property: mBorderCurves
    self.mBorderCurves_property.mValueExplorer = nil
  //--- To many property: mBoardObjects
    self.mBoardObjects_property.mValueExplorer = nil
  //--- Atomic property: mRastnetDisplay
    self.mRastnetDisplay_property.mObserverExplorer = nil
    self.mRastnetDisplay_property.mValueExplorer = nil
  //--- Atomic property: mRastnetDisplayedNetName
    self.mRastnetDisplayedNetName_property.mObserverExplorer = nil
    self.mRastnetDisplayedNetName_property.mValueExplorer = nil
  //--- Atomic property: mRastnetDisplayedComponentName
    self.mRastnetDisplayedComponentName_property.mObserverExplorer = nil
    self.mRastnetDisplayedComponentName_property.mValueExplorer = nil
  //--- To many property: mComponents
    self.mComponents_property.mValueExplorer = nil
  //--- Atomic proxy property: minPPTPTTTWdisplayUnit
    self.minPPTPTTTWdisplayUnit_property.mObserverExplorer = nil
    self.minPPTPTTTWdisplayUnit_property.mValueExplorer = nil
  //--- Atomic proxy property: minPPTPTTTW
    self.minPPTPTTTW_property.mObserverExplorer = nil
    self.minPPTPTTTW_property.mValueExplorer = nil
  //--- Atomic proxy property: minValueForOARdisplayUnit
    self.minValueForOARdisplayUnit_property.mObserverExplorer = nil
    self.minValueForOARdisplayUnit_property.mValueExplorer = nil
  //--- Atomic proxy property: minValueForOARinEBUnit
    self.minValueForOARinEBUnit_property.mObserverExplorer = nil
    self.minValueForOARinEBUnit_property.mValueExplorer = nil
  //--- Atomic proxy property: minValueForPHDdisplayUnit
    self.minValueForPHDdisplayUnit_property.mObserverExplorer = nil
    self.minValueForPHDdisplayUnit_property.mValueExplorer = nil
  //--- Atomic proxy property: minValueForPHDinEBUnit
    self.minValueForPHDinEBUnit_property.mObserverExplorer = nil
    self.minValueForPHDinEBUnit_property.mValueExplorer = nil
  //--- Atomic proxy property: minValueForBoardLimitWidth
    self.minValueForBoardLimitWidth_property.mObserverExplorer = nil
    self.minValueForBoardLimitWidth_property.mValueExplorer = nil
  //--- Atomic proxy property: minValueForBoardLimitWidthDisplayUnit
    self.minValueForBoardLimitWidthDisplayUnit_property.mObserverExplorer = nil
    self.minValueForBoardLimitWidthDisplayUnit_property.mValueExplorer = nil
  //--- Atomic proxy property: drillDataFileExtension
    self.drillDataFileExtension_property.mObserverExplorer = nil
    self.drillDataFileExtension_property.mValueExplorer = nil
  //--- Atomic proxy property: comments
    self.comments_property.mObserverExplorer = nil
    self.comments_property.mValueExplorer = nil
  //--- Atomic proxy property: selectedSheetTitle
    self.selectedSheetTitle_property.mObserverExplorer = nil
    self.selectedSheetTitle_property.mValueExplorer = nil
  //--- ToMany proxy: selectedSheetObjects
    self.selectedSheetObjects_property.mObserverExplorer = nil
  //--- ToMany proxy: fileGenerationParameterArray
    self.fileGenerationParameterArray_property.mObserverExplorer = nil
  //--- To one property: mSelectedSheet
    self.mSelectedSheet_property.mObserverExplorer = nil
    self.mSelectedSheet_property.mValueExplorer = nil
  //--- To one property: mArtwork
    self.mArtwork_property.mObserverExplorer = nil
    self.mArtwork_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mSheets = []
    self.mNetClasses = []
    self.mFonts = []
    self.mDevices = []
    self.mBorderCurves = []
    self.mBoardObjects = []
    self.mComponents = []
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mSelectedSheet = nil
    self.mArtwork = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mArtworkName
    self.mArtworkName_property.storeIn (dictionary: ioDictionary, forKey:"mArtworkName")
  //--- Atomic property: mArtworkVersion
    self.mArtworkVersion_property.storeIn (dictionary: ioDictionary, forKey:"mArtworkVersion")
  //--- Atomic property: mCheckClearanceBetweenPadsOfSameNet
    self.mCheckClearanceBetweenPadsOfSameNet_property.storeIn (dictionary: ioDictionary, forKey:"mCheckClearanceBetweenPadsOfSameNet")
  //--- Atomic property: mLastERCCheckingIsSuccess
    self.mLastERCCheckingIsSuccess_property.storeIn (dictionary: ioDictionary, forKey:"mLastERCCheckingIsSuccess")
  //--- Atomic property: mLastERCCheckingSignature
    self.mLastERCCheckingSignature_property.storeIn (dictionary: ioDictionary, forKey:"mLastERCCheckingSignature")
  //--- Atomic property: mAutoRouterPreferredDirections
    self.mAutoRouterPreferredDirections_property.storeIn (dictionary: ioDictionary, forKey:"mAutoRouterPreferredDirections")
  //--- Atomic property: mAutorouterSnapAngle
    self.mAutorouterSnapAngle_property.storeIn (dictionary: ioDictionary, forKey:"mAutorouterSnapAngle")
  //--- Atomic property: mRouteDirection
    self.mRouteDirection_property.storeIn (dictionary: ioDictionary, forKey:"mRouteDirection")
  //--- Atomic property: mRouteOrigin
    self.mRouteOrigin_property.storeIn (dictionary: ioDictionary, forKey:"mRouteOrigin")
  //--- Atomic property: mTrackLengthUnit
    self.mTrackLengthUnit_property.storeIn (dictionary: ioDictionary, forKey:"mTrackLengthUnit")
  //--- Atomic property: mLayoutClearance
    self.mLayoutClearance_property.storeIn (dictionary: ioDictionary, forKey:"mLayoutClearance")
  //--- Atomic property: mLayoutClearanceUnit
    self.mLayoutClearanceUnit_property.storeIn (dictionary: ioDictionary, forKey:"mLayoutClearanceUnit")
  //--- Atomic property: mBoardSelectedInspector
    self.mBoardSelectedInspector_property.storeIn (dictionary: ioDictionary, forKey:"mBoardSelectedInspector")
  //--- Atomic property: mBoardHorizontalFlip
    self.mBoardHorizontalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mBoardHorizontalFlip")
  //--- Atomic property: mBoardVerticalFlip
    self.mBoardVerticalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mBoardVerticalFlip")
  //--- Atomic property: mBoardGridStyle
    self.mBoardGridStyle_property.storeIn (dictionary: ioDictionary, forKey:"mBoardGridStyle")
  //--- Atomic property: mBoardGridDisplayFactor
    self.mBoardGridDisplayFactor_property.storeIn (dictionary: ioDictionary, forKey:"mBoardGridDisplayFactor")
  //--- Atomic property: mBoardZoom
    self.mBoardZoom_property.storeIn (dictionary: ioDictionary, forKey:"mBoardZoom")
  //--- Atomic property: mBoardGridStep
    self.mBoardGridStep_property.storeIn (dictionary: ioDictionary, forKey:"mBoardGridStep")
  //--- Atomic property: mBoardGridStepUnit
    self.mBoardGridStepUnit_property.storeIn (dictionary: ioDictionary, forKey:"mBoardGridStepUnit")
  //--- Atomic property: mErrorOrWarningIssueSize
    self.mErrorOrWarningIssueSize_property.storeIn (dictionary: ioDictionary, forKey:"mErrorOrWarningIssueSize")
  //--- Atomic property: mControlKeyHiliteDiameter
    self.mControlKeyHiliteDiameter_property.storeIn (dictionary: ioDictionary, forKey:"mControlKeyHiliteDiameter")
  //--- Atomic property: mBoardLimitsWidth
    self.mBoardLimitsWidth_property.storeIn (dictionary: ioDictionary, forKey:"mBoardLimitsWidth")
  //--- Atomic property: mBoardLimitsWidthUnit
    self.mBoardLimitsWidthUnit_property.storeIn (dictionary: ioDictionary, forKey:"mBoardLimitsWidthUnit")
  //--- Atomic property: mBoardClearance
    self.mBoardClearance_property.storeIn (dictionary: ioDictionary, forKey:"mBoardClearance")
  //--- Atomic property: mBoardClearanceUnit
    self.mBoardClearanceUnit_property.storeIn (dictionary: ioDictionary, forKey:"mBoardClearanceUnit")
  //--- Atomic property: mBoardLimitsSelectedInspector
    self.mBoardLimitsSelectedInspector_property.storeIn (dictionary: ioDictionary, forKey:"mBoardLimitsSelectedInspector")
  //--- Atomic property: mBoardLimitsHorizontalFlip
    self.mBoardLimitsHorizontalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mBoardLimitsHorizontalFlip")
  //--- Atomic property: mBoardLimitsVerticalFlip
    self.mBoardLimitsVerticalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mBoardLimitsVerticalFlip")
  //--- Atomic property: mBoardLimitsGridStyle
    self.mBoardLimitsGridStyle_property.storeIn (dictionary: ioDictionary, forKey:"mBoardLimitsGridStyle")
  //--- Atomic property: mBoardLimitsGridDisplayFactor
    self.mBoardLimitsGridDisplayFactor_property.storeIn (dictionary: ioDictionary, forKey:"mBoardLimitsGridDisplayFactor")
  //--- Atomic property: mBoardLimitsZoom
    self.mBoardLimitsZoom_property.storeIn (dictionary: ioDictionary, forKey:"mBoardLimitsZoom")
  //--- Atomic property: mBoardLimitsGridStep
    self.mBoardLimitsGridStep_property.storeIn (dictionary: ioDictionary, forKey:"mBoardLimitsGridStep")
  //--- Atomic property: mBoardLimitsGridStepUnit
    self.mBoardLimitsGridStepUnit_property.storeIn (dictionary: ioDictionary, forKey:"mBoardLimitsGridStepUnit")
  //--- Atomic property: mBoardLimitsBoundingBoxUnit
    self.mBoardLimitsBoundingBoxUnit_property.storeIn (dictionary: ioDictionary, forKey:"mBoardLimitsBoundingBoxUnit")
  //--- Atomic property: mBoardPointsBoundingBoxUnit
    self.mBoardPointsBoundingBoxUnit_property.storeIn (dictionary: ioDictionary, forKey:"mBoardPointsBoundingBoxUnit")
  //--- Atomic property: mBoardSelectedCurveDisplayUnit
    self.mBoardSelectedCurveDisplayUnit_property.storeIn (dictionary: ioDictionary, forKey:"mBoardSelectedCurveDisplayUnit")
  //--- Atomic property: mBoardShape
    self.mBoardShape_property.storeIn (dictionary: ioDictionary, forKey:"mBoardShape")
  //--- Atomic property: mRectangularBoardWidth
    self.mRectangularBoardWidth_property.storeIn (dictionary: ioDictionary, forKey:"mRectangularBoardWidth")
  //--- Atomic property: mRectangularBoardWidthUnit
    self.mRectangularBoardWidthUnit_property.storeIn (dictionary: ioDictionary, forKey:"mRectangularBoardWidthUnit")
  //--- Atomic property: mRectangularBoardHeight
    self.mRectangularBoardHeight_property.storeIn (dictionary: ioDictionary, forKey:"mRectangularBoardHeight")
  //--- Atomic property: mRectangularBoardHeightUnit
    self.mRectangularBoardHeightUnit_property.storeIn (dictionary: ioDictionary, forKey:"mRectangularBoardHeightUnit")
  //--- To many property: mSheets
    self.store (
      managedObjectArray: self.mSheets_property.propval,
      relationshipName: "mSheets",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: mDefaultNetClassName
    self.mDefaultNetClassName_property.storeIn (dictionary: ioDictionary, forKey:"mDefaultNetClassName")
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.storeIn (dictionary: ioDictionary, forKey:"mSelectedPageIndex")
  //--- Atomic property: mSelectedSchematicInspector
    self.mSelectedSchematicInspector_property.storeIn (dictionary: ioDictionary, forKey:"mSelectedSchematicInspector")
  //--- Atomic property: mSchematicTitle
    self.mSchematicTitle_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicTitle")
  //--- Atomic property: mSchematicVersion
    self.mSchematicVersion_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicVersion")
  //--- Atomic property: mSchematicDate
    self.mSchematicDate_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicDate")
  //--- Atomic property: mSchematicHorizontalFlip
    self.mSchematicHorizontalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicHorizontalFlip")
  //--- Atomic property: mSchematicVerticalFlip
    self.mSchematicVerticalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicVerticalFlip")
  //--- Atomic property: mSchematicZoom
    self.mSchematicZoom_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicZoom")
  //--- Atomic property: mSchematicGridStyle
    self.mSchematicGridStyle_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicGridStyle")
  //--- Atomic property: mSchematicGridDisplayFactor
    self.mSchematicGridDisplayFactor_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicGridDisplayFactor")
  //--- Atomic property: mSchematicCustomWidth
    self.mSchematicCustomWidth_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicCustomWidth")
  //--- Atomic property: mSchematicCustomWidthUnit
    self.mSchematicCustomWidthUnit_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicCustomWidthUnit")
  //--- Atomic property: mSchematicCustomHeight
    self.mSchematicCustomHeight_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicCustomHeight")
  //--- Atomic property: mSchematicCustomHeightUnit
    self.mSchematicCustomHeightUnit_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicCustomHeightUnit")
  //--- To many property: mNetClasses
    self.store (
      managedObjectArray: self.mNetClasses_property.propval,
      relationshipName: "mNetClasses",
      intoDictionary: ioDictionary
    )
  //--- To many property: mFonts
    self.store (
      managedObjectArray: self.mFonts_property.propval,
      relationshipName: "mFonts",
      intoDictionary: ioDictionary
    )
  //--- To many property: mDevices
    self.store (
      managedObjectArray: self.mDevices_property.propval,
      relationshipName: "mDevices",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: mSchematicSheetOrientation
    self.mSchematicSheetOrientation_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicSheetOrientation")
  //--- To many property: mBorderCurves
    self.store (
      managedObjectArray: self.mBorderCurves_property.propval,
      relationshipName: "mBorderCurves",
      intoDictionary: ioDictionary
    )
  //--- To many property: mBoardObjects
    self.store (
      managedObjectArray: self.mBoardObjects_property.propval,
      relationshipName: "mBoardObjects",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: mRastnetDisplay
    self.mRastnetDisplay_property.storeIn (dictionary: ioDictionary, forKey:"mRastnetDisplay")
  //--- Atomic property: mRastnetDisplayedNetName
    self.mRastnetDisplayedNetName_property.storeIn (dictionary: ioDictionary, forKey:"mRastnetDisplayedNetName")
  //--- Atomic property: mRastnetDisplayedComponentName
    self.mRastnetDisplayedComponentName_property.storeIn (dictionary: ioDictionary, forKey:"mRastnetDisplayedComponentName")
  //--- To many property: mComponents
    self.store (
      managedObjectArray: self.mComponents_property.propval,
      relationshipName: "mComponents",
      intoDictionary: ioDictionary
    )
  //--- To one property: mSelectedSheet
    self.store (managedObject:self.mSelectedSheet_property.propval,
      relationshipName: "mSelectedSheet",
      intoDictionary: ioDictionary)
  //--- To one property: mArtwork
    self.store (managedObject:self.mArtwork_property.propval,
      relationshipName: "mArtwork",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mSheets
    self.mSheets_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mSheets",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SheetInProject])
  //--- To many property: mNetClasses
    self.mNetClasses_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mNetClasses",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [NetClassInProject])
  //--- To many property: mFonts
    self.mFonts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mFonts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [FontInProject])
  //--- To many property: mDevices
    self.mDevices_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mDevices",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [DeviceInProject])
  //--- To many property: mBorderCurves
    self.mBorderCurves_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mBorderCurves",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BorderCurve])
  //--- To many property: mBoardObjects
    self.mBoardObjects_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mBoardObjects",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardObject])
  //--- To many property: mComponents
    self.mComponents_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mComponents",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [ComponentInProject])
  //--- To one property: mSelectedSheet
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mSelectedSheet",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? SheetInProject {
        self.mSelectedSheet_property.setProp (entity)
      }
    }
  //--- To one property: mArtwork
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mArtwork",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? ArtworkRoot {
        self.mArtwork_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mArtworkName
    self.mArtworkName_property.readFrom (dictionary: inDictionary, forKey:"mArtworkName")
  //--- Atomic property: mArtworkVersion
    self.mArtworkVersion_property.readFrom (dictionary: inDictionary, forKey:"mArtworkVersion")
  //--- Atomic property: mCheckClearanceBetweenPadsOfSameNet
    self.mCheckClearanceBetweenPadsOfSameNet_property.readFrom (dictionary: inDictionary, forKey:"mCheckClearanceBetweenPadsOfSameNet")
  //--- Atomic property: mLastERCCheckingIsSuccess
    self.mLastERCCheckingIsSuccess_property.readFrom (dictionary: inDictionary, forKey:"mLastERCCheckingIsSuccess")
  //--- Atomic property: mLastERCCheckingSignature
    self.mLastERCCheckingSignature_property.readFrom (dictionary: inDictionary, forKey:"mLastERCCheckingSignature")
  //--- Atomic property: mAutoRouterPreferredDirections
    self.mAutoRouterPreferredDirections_property.readFrom (dictionary: inDictionary, forKey:"mAutoRouterPreferredDirections")
  //--- Atomic property: mAutorouterSnapAngle
    self.mAutorouterSnapAngle_property.readFrom (dictionary: inDictionary, forKey:"mAutorouterSnapAngle")
  //--- Atomic property: mRouteDirection
    self.mRouteDirection_property.readFrom (dictionary: inDictionary, forKey:"mRouteDirection")
  //--- Atomic property: mRouteOrigin
    self.mRouteOrigin_property.readFrom (dictionary: inDictionary, forKey:"mRouteOrigin")
  //--- Atomic property: mTrackLengthUnit
    self.mTrackLengthUnit_property.readFrom (dictionary: inDictionary, forKey:"mTrackLengthUnit")
  //--- Atomic property: mLayoutClearance
    self.mLayoutClearance_property.readFrom (dictionary: inDictionary, forKey:"mLayoutClearance")
  //--- Atomic property: mLayoutClearanceUnit
    self.mLayoutClearanceUnit_property.readFrom (dictionary: inDictionary, forKey:"mLayoutClearanceUnit")
  //--- Atomic property: mBoardSelectedInspector
    self.mBoardSelectedInspector_property.readFrom (dictionary: inDictionary, forKey:"mBoardSelectedInspector")
  //--- Atomic property: mBoardHorizontalFlip
    self.mBoardHorizontalFlip_property.readFrom (dictionary: inDictionary, forKey:"mBoardHorizontalFlip")
  //--- Atomic property: mBoardVerticalFlip
    self.mBoardVerticalFlip_property.readFrom (dictionary: inDictionary, forKey:"mBoardVerticalFlip")
  //--- Atomic property: mBoardGridStyle
    self.mBoardGridStyle_property.readFrom (dictionary: inDictionary, forKey:"mBoardGridStyle")
  //--- Atomic property: mBoardGridDisplayFactor
    self.mBoardGridDisplayFactor_property.readFrom (dictionary: inDictionary, forKey:"mBoardGridDisplayFactor")
  //--- Atomic property: mBoardZoom
    self.mBoardZoom_property.readFrom (dictionary: inDictionary, forKey:"mBoardZoom")
  //--- Atomic property: mBoardGridStep
    self.mBoardGridStep_property.readFrom (dictionary: inDictionary, forKey:"mBoardGridStep")
  //--- Atomic property: mBoardGridStepUnit
    self.mBoardGridStepUnit_property.readFrom (dictionary: inDictionary, forKey:"mBoardGridStepUnit")
  //--- Atomic property: mErrorOrWarningIssueSize
    self.mErrorOrWarningIssueSize_property.readFrom (dictionary: inDictionary, forKey:"mErrorOrWarningIssueSize")
  //--- Atomic property: mControlKeyHiliteDiameter
    self.mControlKeyHiliteDiameter_property.readFrom (dictionary: inDictionary, forKey:"mControlKeyHiliteDiameter")
  //--- Atomic property: mBoardLimitsWidth
    self.mBoardLimitsWidth_property.readFrom (dictionary: inDictionary, forKey:"mBoardLimitsWidth")
  //--- Atomic property: mBoardLimitsWidthUnit
    self.mBoardLimitsWidthUnit_property.readFrom (dictionary: inDictionary, forKey:"mBoardLimitsWidthUnit")
  //--- Atomic property: mBoardClearance
    self.mBoardClearance_property.readFrom (dictionary: inDictionary, forKey:"mBoardClearance")
  //--- Atomic property: mBoardClearanceUnit
    self.mBoardClearanceUnit_property.readFrom (dictionary: inDictionary, forKey:"mBoardClearanceUnit")
  //--- Atomic property: mBoardLimitsSelectedInspector
    self.mBoardLimitsSelectedInspector_property.readFrom (dictionary: inDictionary, forKey:"mBoardLimitsSelectedInspector")
  //--- Atomic property: mBoardLimitsHorizontalFlip
    self.mBoardLimitsHorizontalFlip_property.readFrom (dictionary: inDictionary, forKey:"mBoardLimitsHorizontalFlip")
  //--- Atomic property: mBoardLimitsVerticalFlip
    self.mBoardLimitsVerticalFlip_property.readFrom (dictionary: inDictionary, forKey:"mBoardLimitsVerticalFlip")
  //--- Atomic property: mBoardLimitsGridStyle
    self.mBoardLimitsGridStyle_property.readFrom (dictionary: inDictionary, forKey:"mBoardLimitsGridStyle")
  //--- Atomic property: mBoardLimitsGridDisplayFactor
    self.mBoardLimitsGridDisplayFactor_property.readFrom (dictionary: inDictionary, forKey:"mBoardLimitsGridDisplayFactor")
  //--- Atomic property: mBoardLimitsZoom
    self.mBoardLimitsZoom_property.readFrom (dictionary: inDictionary, forKey:"mBoardLimitsZoom")
  //--- Atomic property: mBoardLimitsGridStep
    self.mBoardLimitsGridStep_property.readFrom (dictionary: inDictionary, forKey:"mBoardLimitsGridStep")
  //--- Atomic property: mBoardLimitsGridStepUnit
    self.mBoardLimitsGridStepUnit_property.readFrom (dictionary: inDictionary, forKey:"mBoardLimitsGridStepUnit")
  //--- Atomic property: mBoardLimitsBoundingBoxUnit
    self.mBoardLimitsBoundingBoxUnit_property.readFrom (dictionary: inDictionary, forKey:"mBoardLimitsBoundingBoxUnit")
  //--- Atomic property: mBoardPointsBoundingBoxUnit
    self.mBoardPointsBoundingBoxUnit_property.readFrom (dictionary: inDictionary, forKey:"mBoardPointsBoundingBoxUnit")
  //--- Atomic property: mBoardSelectedCurveDisplayUnit
    self.mBoardSelectedCurveDisplayUnit_property.readFrom (dictionary: inDictionary, forKey:"mBoardSelectedCurveDisplayUnit")
  //--- Atomic property: mBoardShape
    self.mBoardShape_property.readFrom (dictionary: inDictionary, forKey:"mBoardShape")
  //--- Atomic property: mRectangularBoardWidth
    self.mRectangularBoardWidth_property.readFrom (dictionary: inDictionary, forKey:"mRectangularBoardWidth")
  //--- Atomic property: mRectangularBoardWidthUnit
    self.mRectangularBoardWidthUnit_property.readFrom (dictionary: inDictionary, forKey:"mRectangularBoardWidthUnit")
  //--- Atomic property: mRectangularBoardHeight
    self.mRectangularBoardHeight_property.readFrom (dictionary: inDictionary, forKey:"mRectangularBoardHeight")
  //--- Atomic property: mRectangularBoardHeightUnit
    self.mRectangularBoardHeightUnit_property.readFrom (dictionary: inDictionary, forKey:"mRectangularBoardHeightUnit")
  //--- Atomic property: mDefaultNetClassName
    self.mDefaultNetClassName_property.readFrom (dictionary: inDictionary, forKey:"mDefaultNetClassName")
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.readFrom (dictionary: inDictionary, forKey:"mSelectedPageIndex")
  //--- Atomic property: mSelectedSchematicInspector
    self.mSelectedSchematicInspector_property.readFrom (dictionary: inDictionary, forKey:"mSelectedSchematicInspector")
  //--- Atomic property: mSchematicTitle
    self.mSchematicTitle_property.readFrom (dictionary: inDictionary, forKey:"mSchematicTitle")
  //--- Atomic property: mSchematicVersion
    self.mSchematicVersion_property.readFrom (dictionary: inDictionary, forKey:"mSchematicVersion")
  //--- Atomic property: mSchematicDate
    self.mSchematicDate_property.readFrom (dictionary: inDictionary, forKey:"mSchematicDate")
  //--- Atomic property: mSchematicHorizontalFlip
    self.mSchematicHorizontalFlip_property.readFrom (dictionary: inDictionary, forKey:"mSchematicHorizontalFlip")
  //--- Atomic property: mSchematicVerticalFlip
    self.mSchematicVerticalFlip_property.readFrom (dictionary: inDictionary, forKey:"mSchematicVerticalFlip")
  //--- Atomic property: mSchematicZoom
    self.mSchematicZoom_property.readFrom (dictionary: inDictionary, forKey:"mSchematicZoom")
  //--- Atomic property: mSchematicGridStyle
    self.mSchematicGridStyle_property.readFrom (dictionary: inDictionary, forKey:"mSchematicGridStyle")
  //--- Atomic property: mSchematicGridDisplayFactor
    self.mSchematicGridDisplayFactor_property.readFrom (dictionary: inDictionary, forKey:"mSchematicGridDisplayFactor")
  //--- Atomic property: mSchematicCustomWidth
    self.mSchematicCustomWidth_property.readFrom (dictionary: inDictionary, forKey:"mSchematicCustomWidth")
  //--- Atomic property: mSchematicCustomWidthUnit
    self.mSchematicCustomWidthUnit_property.readFrom (dictionary: inDictionary, forKey:"mSchematicCustomWidthUnit")
  //--- Atomic property: mSchematicCustomHeight
    self.mSchematicCustomHeight_property.readFrom (dictionary: inDictionary, forKey:"mSchematicCustomHeight")
  //--- Atomic property: mSchematicCustomHeightUnit
    self.mSchematicCustomHeightUnit_property.readFrom (dictionary: inDictionary, forKey:"mSchematicCustomHeightUnit")
  //--- Atomic property: mSchematicSheetOrientation
    self.mSchematicSheetOrientation_property.readFrom (dictionary: inDictionary, forKey:"mSchematicSheetOrientation")
  //--- Atomic property: mRastnetDisplay
    self.mRastnetDisplay_property.readFrom (dictionary: inDictionary, forKey:"mRastnetDisplay")
  //--- Atomic property: mRastnetDisplayedNetName
    self.mRastnetDisplayedNetName_property.readFrom (dictionary: inDictionary, forKey:"mRastnetDisplayedNetName")
  //--- Atomic property: mRastnetDisplayedComponentName
    self.mRastnetDisplayedComponentName_property.readFrom (dictionary: inDictionary, forKey:"mRastnetDisplayedComponentName")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mArtworkName\n"
    ioString += "mArtworkVersion\n"
    ioString += "mCheckClearanceBetweenPadsOfSameNet\n"
    ioString += "mLastERCCheckingIsSuccess\n"
    ioString += "mLastERCCheckingSignature\n"
    ioString += "mAutoRouterPreferredDirections\n"
    ioString += "mAutorouterSnapAngle\n"
    ioString += "mRouteDirection\n"
    ioString += "mRouteOrigin\n"
    ioString += "mTrackLengthUnit\n"
    ioString += "mLayoutClearance\n"
    ioString += "mLayoutClearanceUnit\n"
    ioString += "mBoardSelectedInspector\n"
    ioString += "mBoardHorizontalFlip\n"
    ioString += "mBoardVerticalFlip\n"
    ioString += "mBoardGridStyle\n"
    ioString += "mBoardGridDisplayFactor\n"
    ioString += "mBoardZoom\n"
    ioString += "mBoardGridStep\n"
    ioString += "mBoardGridStepUnit\n"
    ioString += "mErrorOrWarningIssueSize\n"
    ioString += "mControlKeyHiliteDiameter\n"
    ioString += "mBoardLimitsWidth\n"
    ioString += "mBoardLimitsWidthUnit\n"
    ioString += "mBoardClearance\n"
    ioString += "mBoardClearanceUnit\n"
    ioString += "mBoardLimitsSelectedInspector\n"
    ioString += "mBoardLimitsHorizontalFlip\n"
    ioString += "mBoardLimitsVerticalFlip\n"
    ioString += "mBoardLimitsGridStyle\n"
    ioString += "mBoardLimitsGridDisplayFactor\n"
    ioString += "mBoardLimitsZoom\n"
    ioString += "mBoardLimitsGridStep\n"
    ioString += "mBoardLimitsGridStepUnit\n"
    ioString += "mBoardLimitsBoundingBoxUnit\n"
    ioString += "mBoardPointsBoundingBoxUnit\n"
    ioString += "mBoardSelectedCurveDisplayUnit\n"
    ioString += "mBoardShape\n"
    ioString += "mRectangularBoardWidth\n"
    ioString += "mRectangularBoardWidthUnit\n"
    ioString += "mRectangularBoardHeight\n"
    ioString += "mRectangularBoardHeightUnit\n"
    ioString += "mDefaultNetClassName\n"
    ioString += "mSelectedPageIndex\n"
    ioString += "mSelectedSchematicInspector\n"
    ioString += "mSchematicTitle\n"
    ioString += "mSchematicVersion\n"
    ioString += "mSchematicDate\n"
    ioString += "mSchematicHorizontalFlip\n"
    ioString += "mSchematicVerticalFlip\n"
    ioString += "mSchematicZoom\n"
    ioString += "mSchematicGridStyle\n"
    ioString += "mSchematicGridDisplayFactor\n"
    ioString += "mSchematicCustomWidth\n"
    ioString += "mSchematicCustomWidthUnit\n"
    ioString += "mSchematicCustomHeight\n"
    ioString += "mSchematicCustomHeightUnit\n"
    ioString += "mSchematicSheetOrientation\n"
    ioString += "mRastnetDisplay\n"
    ioString += "mRastnetDisplayedNetName\n"
    ioString += "mRastnetDisplayedComponentName\n"
  //--- To one relationships
    ioString += "mSelectedSheet\n"
    ioString += "mArtwork\n"
  //--- To many relationships
    ioString += "mSheets\n"
    ioString += "mNetClasses\n"
    ioString += "mFonts\n"
    ioString += "mDevices\n"
    ioString += "mBorderCurves\n"
    ioString += "mBoardObjects\n"
    ioString += "mComponents\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mArtworkName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mArtworkVersion.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mCheckClearanceBetweenPadsOfSameNet.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mLastERCCheckingIsSuccess.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mLastERCCheckingSignature.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mAutoRouterPreferredDirections.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mAutorouterSnapAngle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mRouteDirection.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mRouteOrigin.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mTrackLengthUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mLayoutClearance.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mLayoutClearanceUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardSelectedInspector.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardHorizontalFlip.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardVerticalFlip.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardGridStyle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardGridDisplayFactor.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardZoom.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardGridStep.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardGridStepUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mErrorOrWarningIssueSize.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mControlKeyHiliteDiameter.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardLimitsWidth.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardLimitsWidthUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardClearance.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardClearanceUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardLimitsSelectedInspector.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardLimitsHorizontalFlip.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardLimitsVerticalFlip.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardLimitsGridStyle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardLimitsGridDisplayFactor.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardLimitsZoom.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardLimitsGridStep.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardLimitsGridStepUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardLimitsBoundingBoxUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardPointsBoundingBoxUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardSelectedCurveDisplayUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mBoardShape.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mRectangularBoardWidth.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mRectangularBoardWidthUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mRectangularBoardHeight.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mRectangularBoardHeightUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDefaultNetClassName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSelectedPageIndex.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSelectedSchematicInspector.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSchematicTitle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSchematicVersion.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSchematicDate.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSchematicHorizontalFlip.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSchematicVerticalFlip.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSchematicZoom.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSchematicGridStyle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSchematicGridDisplayFactor.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSchematicCustomWidth.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSchematicCustomWidthUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSchematicCustomHeight.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSchematicCustomHeightUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSchematicSheetOrientation.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mRastnetDisplay.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mRastnetDisplayedNetName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mRastnetDisplayedComponentName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.mSelectedSheet {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mArtwork {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mSheets {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mNetClasses {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mFonts {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mDevices {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mBorderCurves {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mBoardObjects {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mComponents {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mSheets
    for managedObject in self.mSheets {
      objects.append (managedObject)
    }
  //--- To many property: mNetClasses
    for managedObject in self.mNetClasses {
      objects.append (managedObject)
    }
  //--- To many property: mFonts
    for managedObject in self.mFonts {
      objects.append (managedObject)
    }
  //--- To many property: mDevices
    for managedObject in self.mDevices {
      objects.append (managedObject)
    }
  //--- To many property: mBorderCurves
    for managedObject in self.mBorderCurves {
      objects.append (managedObject)
    }
  //--- To many property: mBoardObjects
    for managedObject in self.mBoardObjects {
      objects.append (managedObject)
    }
  //--- To many property: mComponents
    for managedObject in self.mComponents {
      objects.append (managedObject)
    }
  //--- To one property: mSelectedSheet
    if let object = self.mSelectedSheet {
      objects.append (object)
    }
  //--- To one property: mArtwork
    if let object = self.mArtwork {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mSheets
    for managedObject in self.mSheets {
      objects.append (managedObject)
    }
  //--- To many property: mNetClasses
    for managedObject in self.mNetClasses {
      objects.append (managedObject)
    }
  //--- To many property: mFonts
    for managedObject in self.mFonts {
      objects.append (managedObject)
    }
  //--- To many property: mDevices
    for managedObject in self.mDevices {
      objects.append (managedObject)
    }
  //--- To many property: mBorderCurves
    for managedObject in self.mBorderCurves {
      objects.append (managedObject)
    }
  //--- To many property: mBoardObjects
    for managedObject in self.mBoardObjects {
      objects.append (managedObject)
    }
  //--- To many property: mComponents
    for managedObject in self.mComponents {
      objects.append (managedObject)
    }
  //--- To one property: mSelectedSheet
    if let object = self.mSelectedSheet {
      objects.append (object)
    }
  //--- To one property: mArtwork
    if let object = self.mArtwork {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

