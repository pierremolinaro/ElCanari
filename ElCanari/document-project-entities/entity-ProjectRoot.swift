//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSelectedPageIndex : class {
  var mSelectedPageIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSelectedSchematicsInspector : class {
  var mSelectedSchematicsInspector : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicTitle : class {
  var mSchematicTitle : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicVersion : class {
  var mSchematicVersion : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicDate : class {
  var mSchematicDate : Date { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicHorizontalFlip : class {
  var mSchematicHorizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicVerticalFlip : class {
  var mSchematicVerticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicZoom : class {
  var mSchematicZoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicGridStyle : class {
  var mSchematicGridStyle : GridStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicGridDisplayFactor : class {
  var mSchematicGridDisplayFactor : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicSheetOrientation : class {
  var mSchematicSheetOrientation : SchematicsSheetOrientation { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_selectedSheetTitle : class {
  var selectedSheetTitle : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_selectedSheetIssues : class {
  var selectedSheetIssues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_connectedPoints : class {
  var connectedPoints : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_unplacedSymbols : class {
  var unplacedSymbols : StringTagArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_netsDescription : class {
  var netsDescription : NetInfoArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_deviceNames : class {
  var deviceNames : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_schematicsBackgroundDisplay : class {
  var schematicsBackgroundDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_connexionWarningString : class {
  var connexionWarningString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_connexionErrorString : class {
  var connexionErrorString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicStatusMessage : class {
  var mSchematicStatusMessage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicStatusImage : class {
  var mSchematicStatusImage : NSImage? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ProjectRoot : EBManagedObject,
         ProjectRoot_mSelectedPageIndex,
         ProjectRoot_mSelectedSchematicsInspector,
         ProjectRoot_mSchematicTitle,
         ProjectRoot_mSchematicVersion,
         ProjectRoot_mSchematicDate,
         ProjectRoot_mSchematicHorizontalFlip,
         ProjectRoot_mSchematicVerticalFlip,
         ProjectRoot_mSchematicZoom,
         ProjectRoot_mSchematicGridStyle,
         ProjectRoot_mSchematicGridDisplayFactor,
         ProjectRoot_mSchematicSheetOrientation,
         ProjectRoot_selectedSheetTitle,
         ProjectRoot_selectedSheetIssues,
         ProjectRoot_connectedPoints,
         ProjectRoot_unplacedSymbols,
         ProjectRoot_netsDescription,
         ProjectRoot_deviceNames,
         ProjectRoot_schematicsBackgroundDisplay,
         ProjectRoot_connexionWarningString,
         ProjectRoot_connexionErrorString,
         ProjectRoot_mSchematicStatusMessage,
         ProjectRoot_mSchematicStatusImage {

  //····················································································································
  //   Atomic property: mSelectedPageIndex
  //····················································································································

  let mSelectedPageIndex_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mSelectedPageIndex : Int {
    get { return self.mSelectedPageIndex_property.propval }
    set { self.mSelectedPageIndex_property.setProp (newValue) }
  }

  //····················································································································

  var mSelectedPageIndex_property_selection : EBSelection <Int> { return self.mSelectedPageIndex_property.prop }

  //····················································································································
  //   Atomic property: mSelectedSchematicsInspector
  //····················································································································

  let mSelectedSchematicsInspector_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mSelectedSchematicsInspector : Int {
    get { return self.mSelectedSchematicsInspector_property.propval }
    set { self.mSelectedSchematicsInspector_property.setProp (newValue) }
  }

  //····················································································································

  var mSelectedSchematicsInspector_property_selection : EBSelection <Int> { return self.mSelectedSchematicsInspector_property.prop }

  //····················································································································
  //   Atomic property: mSchematicTitle
  //····················································································································

  let mSchematicTitle_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mSchematicTitle : String {
    get { return self.mSchematicTitle_property.propval }
    set { self.mSchematicTitle_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicTitle_property_selection : EBSelection <String> { return self.mSchematicTitle_property.prop }

  //····················································································································
  //   Atomic property: mSchematicVersion
  //····················································································································

  let mSchematicVersion_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mSchematicVersion : String {
    get { return self.mSchematicVersion_property.propval }
    set { self.mSchematicVersion_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicVersion_property_selection : EBSelection <String> { return self.mSchematicVersion_property.prop }

  //····················································································································
  //   Atomic property: mSchematicDate
  //····················································································································

  let mSchematicDate_property = EBStoredProperty_Date (defaultValue: Date ())

  //····················································································································

  var mSchematicDate : Date {
    get { return self.mSchematicDate_property.propval }
    set { self.mSchematicDate_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicDate_property_selection : EBSelection <Date> { return self.mSchematicDate_property.prop }

  //····················································································································
  //   Atomic property: mSchematicHorizontalFlip
  //····················································································································

  let mSchematicHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mSchematicHorizontalFlip : Bool {
    get { return self.mSchematicHorizontalFlip_property.propval }
    set { self.mSchematicHorizontalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicHorizontalFlip_property_selection : EBSelection <Bool> { return self.mSchematicHorizontalFlip_property.prop }

  //····················································································································
  //   Atomic property: mSchematicVerticalFlip
  //····················································································································

  let mSchematicVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mSchematicVerticalFlip : Bool {
    get { return self.mSchematicVerticalFlip_property.propval }
    set { self.mSchematicVerticalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicVerticalFlip_property_selection : EBSelection <Bool> { return self.mSchematicVerticalFlip_property.prop }

  //····················································································································
  //   Atomic property: mSchematicZoom
  //····················································································································

  let mSchematicZoom_property = EBStoredProperty_Int (defaultValue: 100)

  //····················································································································

  var mSchematicZoom : Int {
    get { return self.mSchematicZoom_property.propval }
    set { self.mSchematicZoom_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicZoom_property_selection : EBSelection <Int> { return self.mSchematicZoom_property.prop }

  //····················································································································
  //   Atomic property: mSchematicGridStyle
  //····················································································································

  let mSchematicGridStyle_property = EBStoredProperty_GridStyle (defaultValue: GridStyle.line)

  //····················································································································

  var mSchematicGridStyle : GridStyle {
    get { return self.mSchematicGridStyle_property.propval }
    set { self.mSchematicGridStyle_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicGridStyle_property_selection : EBSelection <GridStyle> { return self.mSchematicGridStyle_property.prop }

  //····················································································································
  //   Atomic property: mSchematicGridDisplayFactor
  //····················································································································

  let mSchematicGridDisplayFactor_property = EBStoredProperty_Int (defaultValue: 4)

  //····················································································································

  var mSchematicGridDisplayFactor : Int {
    get { return self.mSchematicGridDisplayFactor_property.propval }
    set { self.mSchematicGridDisplayFactor_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicGridDisplayFactor_property_selection : EBSelection <Int> { return self.mSchematicGridDisplayFactor_property.prop }

  //····················································································································
  //   To many property: mComponents
  //····················································································································

  let mComponents_property = StoredArrayOf_ComponentInProject ()

  //····················································································································

  var mComponents_property_selection : EBSelection < [ComponentInProject] > {
    return self.mComponents_property.prop
  }

  //····················································································································

  var mComponents : [ComponentInProject] {
    get { return self.mComponents_property.propval }
    set { self.mComponents_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mNetClasses
  //····················································································································

  let mNetClasses_property = StoredArrayOf_NetClassInProject ()

  //····················································································································

  var mNetClasses_property_selection : EBSelection < [NetClassInProject] > {
    return self.mNetClasses_property.prop
  }

  //····················································································································

  var mNetClasses : [NetClassInProject] {
    get { return self.mNetClasses_property.propval }
    set { self.mNetClasses_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mFonts
  //····················································································································

  let mFonts_property = StoredArrayOf_FontInProject ()

  //····················································································································

  var mFonts_property_selection : EBSelection < [FontInProject] > {
    return self.mFonts_property.prop
  }

  //····················································································································

  var mFonts : [FontInProject] {
    get { return self.mFonts_property.propval }
    set { self.mFonts_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mDevices
  //····················································································································

  let mDevices_property = StoredArrayOf_DeviceInProject ()

  //····················································································································

  var mDevices_property_selection : EBSelection < [DeviceInProject] > {
    return self.mDevices_property.prop
  }

  //····················································································································

  var mDevices : [DeviceInProject] {
    get { return self.mDevices_property.propval }
    set { self.mDevices_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mSheets
  //····················································································································

  let mSheets_property = StoredArrayOf_SheetInProject ()

  //····················································································································

  var mSheets_property_selection : EBSelection < [SheetInProject] > {
    return self.mSheets_property.prop
  }

  //····················································································································

  var mSheets : [SheetInProject] {
    get { return self.mSheets_property.propval }
    set { self.mSheets_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSchematicSheetOrientation
  //····················································································································

  let mSchematicSheetOrientation_property = EBStoredProperty_SchematicsSheetOrientation (defaultValue: SchematicsSheetOrientation.horizontal)

  //····················································································································

  var mSchematicSheetOrientation : SchematicsSheetOrientation {
    get { return self.mSchematicSheetOrientation_property.propval }
    set { self.mSchematicSheetOrientation_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicSheetOrientation_property_selection : EBSelection <SchematicsSheetOrientation> { return self.mSchematicSheetOrientation_property.prop }

  //····················································································································
  //   Atomic proxy property: selectedSheetTitle
  //····················································································································

  let selectedSheetTitle_property = EBPropertyProxy_String ()

  //····················································································································

  var selectedSheetTitle : String? {
    get {
      switch self.selectedSheetTitle_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.selectedSheetTitle_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var selectedSheetTitle_property_selection : EBSelection <String> { return self.selectedSheetTitle_property.prop }

  //····················································································································
  //   ToMany proxy: selectedSheetObjects
  //····················································································································

  var selectedSheetObjects_modelDidChangeController : EBSimpleController? = nil
  // var selectedSheetObjects_boundObjectDidChangeController : EBSimpleController? = nil
  let selectedSheetObjects_property = ProxyArrayOf_SchematicObject ()

  //····················································································································

  var selectedSheetObjects : [SchematicObject] {
    get {
      switch self.selectedSheetObjects_property.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }
    set {
      self.selectedSheetObjects_property.setProp (newValue)
    }
  }

  //····················································································································

  var selectedSheetObjects_property_selection : EBSelection <[SchematicObject]> {
    return self.selectedSheetObjects_property.prop
  }

  //····················································································································
  //   To one property: mSelectedSheet
  //····················································································································

   let mSelectedSheet_property = StoredObject_SheetInProject ()

  //····················································································································

  var mSelectedSheet_property_selection : EBSelection <SheetInProject?> {
    return .single (self.mSelectedSheet_property.propval)
  }

  //····················································································································

  var mSelectedSheet : SheetInProject? {
    get {
      return self.mSelectedSheet_property.propval
    }
    set {
      if self.mSelectedSheet_property.propval != nil {
        self.mSelectedSheet_property.setProp (nil)
      }
      if newValue != nil {
        self.mSelectedSheet_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mSelectedSheet_none : StoredObject_SheetInProject { return self.mSelectedSheet_property }

  //····················································································································

  var mSelectedSheet_none_selection : EBSelection <Bool> {
    return .single (self.mSelectedSheet_property.propval == nil)
  }

  //····················································································································
  //   Transient property: selectedSheetIssues
  //····················································································································

  let selectedSheetIssues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  var selectedSheetIssues_property_selection : EBSelection <CanariIssueArray> {
    return self.selectedSheetIssues_property.prop
  }

  //····················································································································

  var selectedSheetIssues : CanariIssueArray? {
    switch self.selectedSheetIssues_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: connectedPoints
  //····················································································································

  let connectedPoints_property = EBTransientProperty_EBShape ()

  //····················································································································

  var connectedPoints_property_selection : EBSelection <EBShape> {
    return self.connectedPoints_property.prop
  }

  //····················································································································

  var connectedPoints : EBShape? {
    switch self.connectedPoints_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unplacedSymbols
  //····················································································································

  let unplacedSymbols_property = EBTransientProperty_StringTagArray ()

  //····················································································································

  var unplacedSymbols_property_selection : EBSelection <StringTagArray> {
    return self.unplacedSymbols_property.prop
  }

  //····················································································································

  var unplacedSymbols : StringTagArray? {
    switch self.unplacedSymbols_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netsDescription
  //····················································································································

  let netsDescription_property = EBTransientProperty_NetInfoArray ()

  //····················································································································

  var netsDescription_property_selection : EBSelection <NetInfoArray> {
    return self.netsDescription_property.prop
  }

  //····················································································································

  var netsDescription : NetInfoArray? {
    switch self.netsDescription_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: deviceNames
  //····················································································································

  let deviceNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  var deviceNames_property_selection : EBSelection <StringArray> {
    return self.deviceNames_property.prop
  }

  //····················································································································

  var deviceNames : StringArray? {
    switch self.deviceNames_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: schematicsBackgroundDisplay
  //····················································································································

  let schematicsBackgroundDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  var schematicsBackgroundDisplay_property_selection : EBSelection <EBShape> {
    return self.schematicsBackgroundDisplay_property.prop
  }

  //····················································································································

  var schematicsBackgroundDisplay : EBShape? {
    switch self.schematicsBackgroundDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: connexionWarningString
  //····················································································································

  let connexionWarningString_property = EBTransientProperty_String ()

  //····················································································································

  var connexionWarningString_property_selection : EBSelection <String> {
    return self.connexionWarningString_property.prop
  }

  //····················································································································

  var connexionWarningString : String? {
    switch self.connexionWarningString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: connexionErrorString
  //····················································································································

  let connexionErrorString_property = EBTransientProperty_String ()

  //····················································································································

  var connexionErrorString_property_selection : EBSelection <String> {
    return self.connexionErrorString_property.prop
  }

  //····················································································································

  var connexionErrorString : String? {
    switch self.connexionErrorString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mSchematicStatusMessage
  //····················································································································

  let mSchematicStatusMessage_property = EBTransientProperty_String ()

  //····················································································································

  var mSchematicStatusMessage_property_selection : EBSelection <String> {
    return self.mSchematicStatusMessage_property.prop
  }

  //····················································································································

  var mSchematicStatusMessage : String? {
    switch self.mSchematicStatusMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mSchematicStatusImage
  //····················································································································

  let mSchematicStatusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  var mSchematicStatusImage_property_selection : EBSelection <NSImage> {
    return self.mSchematicStatusImage_property.prop
  }

  //····················································································································

  var mSchematicStatusImage : NSImage? {
    switch self.mSchematicStatusImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSelectedSchematicsInspector
    self.mSelectedSchematicsInspector_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicTitle
    self.mSchematicTitle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicVersion
    self.mSchematicVersion_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicDate
    self.mSchematicDate_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicHorizontalFlip
    self.mSchematicHorizontalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicVerticalFlip
    self.mSchematicVerticalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicZoom
    self.mSchematicZoom_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicGridStyle
    self.mSchematicGridStyle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicGridDisplayFactor
    self.mSchematicGridDisplayFactor_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mComponents (no option)
    self.mComponents_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mNetClasses (no option)
    self.mNetClasses_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mFonts (no option)
    self.mFonts_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mDevices (no option)
    self.mDevices_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mSheets (no option)
    self.mSheets_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicSheetOrientation
    self.mSchematicSheetOrientation_property.ebUndoManager = self.ebUndoManager
  //--- Atomic proxy property: selectedSheetTitle
    self.selectedSheetTitle_property.mReadModelFunction = { [weak self] in
      if let object = self?.mSelectedSheet {
        return .single (object.mSheetTitle)
      }else{
        return .empty
      }
    }
    self.selectedSheetTitle_property.mWriteModelFunction = { [weak self] (_ inValue : String) in
      self?.mSelectedSheet?.mSheetTitle = inValue
    }
    self.selectedSheetTitle_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : String, _ inWindow : NSWindow?) -> Bool in
      return self?.mSelectedSheet?.mSheetTitle_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mSelectedSheet_property.addEBObserverOf_mSheetTitle (self.selectedSheetTitle_property)
  //--- ToMany proxy: selectedSheetObjects
    do{
      let controller = EBSimpleController (
        observedObjects: [self.mSelectedSheet_property],
        callBack: { [weak self] in
          if let me = self, let model = me.mSelectedSheet {
            me.selectedSheetObjects_property.setModel (model.mObjects_property)
          }
        }
      )
      self.mSelectedSheet_property.addEBObserverOf_mObjects (controller)
      self.selectedSheetObjects_modelDidChangeController = controller
    }
  //--- To one property: mSelectedSheet
    self.mSelectedSheet_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: selectedSheetIssues
    self.selectedSheetIssues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSelectedSheet_property.issues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSelectedSheet_property.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_selectedSheetIssues (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSelectedSheet_property.addEBObserverOf_issues (self.selectedSheetIssues_property)
  //--- Atomic property: connectedPoints
    self.connectedPoints_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mSelectedSheet_property.connectedPoints_property_selection.kind ()
        kind &= unwSelf.selectedSheetIssues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSelectedSheet_property.connectedPoints_property_selection, unwSelf.selectedSheetIssues_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ProjectRoot_connectedPoints (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSelectedSheet_property.addEBObserverOf_connectedPoints (self.connectedPoints_property)
    self.selectedSheetIssues_property.addEBObserver (self.connectedPoints_property)
  //--- Atomic property: unplacedSymbols
    self.unplacedSymbols_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mComponents_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mComponents_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_unplacedSymbols (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mComponents_property.addEBObserverOf_unplacedSymbols (self.unplacedSymbols_property)
  //--- Atomic property: netsDescription
    self.netsDescription_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNetClasses_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNetClasses_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_netsDescription (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNetClasses_property.addEBObserverOf_netsDescription (self.netsDescription_property)
  //--- Atomic property: deviceNames
    self.deviceNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDevices_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mDevices_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_deviceNames (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDevices_property.addEBObserverOf_mDeviceName (self.deviceNames_property)
  //--- Atomic property: schematicsBackgroundDisplay
    self.schematicsBackgroundDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mSchematicTitle_property_selection.kind ()
        kind &= unwSelf.mSchematicVersion_property_selection.kind ()
        kind &= unwSelf.mSchematicSheetOrientation_property_selection.kind ()
        kind &= unwSelf.mSelectedSheet_property.mSheetTitle_property_selection.kind ()
        kind &= unwSelf.mSheets_property_selection.kind ()
        kind &= unwSelf.mSelectedSheet_property_selection.kind ()
        kind &= unwSelf.mSchematicDate_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSchematicTitle_property_selection, unwSelf.mSchematicVersion_property_selection, unwSelf.mSchematicSheetOrientation_property_selection, unwSelf.mSelectedSheet_property.mSheetTitle_property_selection, unwSelf.mSheets_property_selection, unwSelf.mSelectedSheet_property_selection, unwSelf.mSchematicDate_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6)) :
            return .single (transient_ProjectRoot_schematicsBackgroundDisplay (v0, v1, v2, v3, v4, v5, v6))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSchematicTitle_property.addEBObserver (self.schematicsBackgroundDisplay_property)
    self.mSchematicVersion_property.addEBObserver (self.schematicsBackgroundDisplay_property)
    self.mSchematicSheetOrientation_property.addEBObserver (self.schematicsBackgroundDisplay_property)
    self.mSelectedSheet_property.addEBObserverOf_mSheetTitle (self.schematicsBackgroundDisplay_property)
    self.mSheets_property.addEBObserver (self.schematicsBackgroundDisplay_property)
    self.mSelectedSheet_property.addEBObserver (self.schematicsBackgroundDisplay_property)
    self.mSchematicDate_property.addEBObserver (self.schematicsBackgroundDisplay_property)
  //--- Atomic property: connexionWarningString
    self.connexionWarningString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSheets_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSheets_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_connexionWarningString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSheets_property.addEBObserverOf_connexionWarnings (self.connexionWarningString_property)
  //--- Atomic property: connexionErrorString
    self.connexionErrorString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSheets_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSheets_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_connexionErrorString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSheets_property.addEBObserverOf_connexionErrors (self.connexionErrorString_property)
  //--- Atomic property: mSchematicStatusMessage
    self.mSchematicStatusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.unplacedSymbols_property_selection.kind ()
        kind &= unwSelf.mSheets_property_selection.kind ()
        kind &= unwSelf.mSheets_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.unplacedSymbols_property_selection, unwSelf.mSheets_property_selection, unwSelf.mSheets_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_ProjectRoot_mSchematicStatusMessage (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.unplacedSymbols_property.addEBObserver (self.mSchematicStatusMessage_property)
    self.mSheets_property.addEBObserverOf_connexionWarnings (self.mSchematicStatusMessage_property)
    self.mSheets_property.addEBObserverOf_connexionErrors (self.mSchematicStatusMessage_property)
  //--- Atomic property: mSchematicStatusImage
    self.mSchematicStatusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.unplacedSymbols_property_selection.kind ()
        kind &= unwSelf.mSheets_property_selection.kind ()
        kind &= unwSelf.mSheets_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.unplacedSymbols_property_selection, unwSelf.mSheets_property_selection, unwSelf.mSheets_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_ProjectRoot_mSchematicStatusImage (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.unplacedSymbols_property.addEBObserver (self.mSchematicStatusImage_property)
    self.mSheets_property.addEBObserverOf_connexionWarnings (self.mSchematicStatusImage_property)
    self.mSheets_property.addEBObserverOf_connexionErrors (self.mSchematicStatusImage_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- Atomic proxy property: selectedSheetTitle
    self.selectedSheetTitle_property.mReadModelFunction = nil
    self.selectedSheetTitle_property.mWriteModelFunction = nil
    self.selectedSheetTitle_property.mValidateAndWriteModelFunction = nil
    self.mSelectedSheet_property.removeEBObserverOf_mSheetTitle (self.selectedSheetTitle_property)
  //--- ToMany proxy: selectedSheetObjects
    self.selectedSheetObjects_property.setModel (nil)
    self.selectedSheetObjects_modelDidChangeController?.unregister ()
    self.selectedSheetObjects_modelDidChangeController = nil
    self.mSelectedSheet_property.removeEBObserverOf_issues (self.selectedSheetIssues_property)
    self.mSelectedSheet_property.removeEBObserverOf_connectedPoints (self.connectedPoints_property)
    self.selectedSheetIssues_property.removeEBObserver (self.connectedPoints_property)
    self.mComponents_property.removeEBObserverOf_unplacedSymbols (self.unplacedSymbols_property)
    self.mNetClasses_property.removeEBObserverOf_netsDescription (self.netsDescription_property)
    self.mDevices_property.removeEBObserverOf_mDeviceName (self.deviceNames_property)
    self.mSchematicTitle_property.removeEBObserver (self.schematicsBackgroundDisplay_property)
    self.mSchematicVersion_property.removeEBObserver (self.schematicsBackgroundDisplay_property)
    self.mSchematicSheetOrientation_property.removeEBObserver (self.schematicsBackgroundDisplay_property)
    self.mSelectedSheet_property.removeEBObserverOf_mSheetTitle (self.schematicsBackgroundDisplay_property)
    self.mSheets_property.removeEBObserver (self.schematicsBackgroundDisplay_property)
    self.mSelectedSheet_property.removeEBObserver (self.schematicsBackgroundDisplay_property)
    self.mSchematicDate_property.removeEBObserver (self.schematicsBackgroundDisplay_property)
    self.mSheets_property.removeEBObserverOf_connexionWarnings (self.connexionWarningString_property)
    self.mSheets_property.removeEBObserverOf_connexionErrors (self.connexionErrorString_property)
    self.unplacedSymbols_property.removeEBObserver (self.mSchematicStatusMessage_property)
    self.mSheets_property.removeEBObserverOf_connexionWarnings (self.mSchematicStatusMessage_property)
    self.mSheets_property.removeEBObserverOf_connexionErrors (self.mSchematicStatusMessage_property)
    self.unplacedSymbols_property.removeEBObserver (self.mSchematicStatusImage_property)
    self.mSheets_property.removeEBObserverOf_connexionWarnings (self.mSchematicStatusImage_property)
    self.mSheets_property.removeEBObserverOf_connexionErrors (self.mSchematicStatusImage_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mSelectedPageIndex",
      idx: self.mSelectedPageIndex_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSelectedPageIndex_property.mObserverExplorer,
      valueExplorer: &self.mSelectedPageIndex_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSelectedSchematicsInspector",
      idx: self.mSelectedSchematicsInspector_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSelectedSchematicsInspector_property.mObserverExplorer,
      valueExplorer: &self.mSelectedSchematicsInspector_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicTitle",
      idx: self.mSchematicTitle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicTitle_property.mObserverExplorer,
      valueExplorer: &self.mSchematicTitle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicVersion",
      idx: self.mSchematicVersion_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicVersion_property.mObserverExplorer,
      valueExplorer: &self.mSchematicVersion_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicDate",
      idx: self.mSchematicDate_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicDate_property.mObserverExplorer,
      valueExplorer: &self.mSchematicDate_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicHorizontalFlip",
      idx: self.mSchematicHorizontalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicHorizontalFlip_property.mObserverExplorer,
      valueExplorer: &self.mSchematicHorizontalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicVerticalFlip",
      idx: self.mSchematicVerticalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicVerticalFlip_property.mObserverExplorer,
      valueExplorer: &self.mSchematicVerticalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicZoom",
      idx: self.mSchematicZoom_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicZoom_property.mObserverExplorer,
      valueExplorer: &self.mSchematicZoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicGridStyle",
      idx: self.mSchematicGridStyle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicGridStyle_property.mObserverExplorer,
      valueExplorer: &self.mSchematicGridStyle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicGridDisplayFactor",
      idx: self.mSchematicGridDisplayFactor_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicGridDisplayFactor_property.mObserverExplorer,
      valueExplorer: &self.mSchematicGridDisplayFactor_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicSheetOrientation",
      idx: self.mSchematicSheetOrientation_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicSheetOrientation_property.mObserverExplorer,
      valueExplorer: &self.mSchematicSheetOrientation_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "selectedSheetIssues",
      idx: self.selectedSheetIssues_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectedSheetIssues_property.mObserverExplorer,
      valueExplorer: &self.selectedSheetIssues_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "connectedPoints",
      idx: self.connectedPoints_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.connectedPoints_property.mObserverExplorer,
      valueExplorer: &self.connectedPoints_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "unplacedSymbols",
      idx: self.unplacedSymbols_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.unplacedSymbols_property.mObserverExplorer,
      valueExplorer: &self.unplacedSymbols_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netsDescription",
      idx: self.netsDescription_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netsDescription_property.mObserverExplorer,
      valueExplorer: &self.netsDescription_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "deviceNames",
      idx: self.deviceNames_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.deviceNames_property.mObserverExplorer,
      valueExplorer: &self.deviceNames_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "schematicsBackgroundDisplay",
      idx: self.schematicsBackgroundDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.schematicsBackgroundDisplay_property.mObserverExplorer,
      valueExplorer: &self.schematicsBackgroundDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "connexionWarningString",
      idx: self.connexionWarningString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.connexionWarningString_property.mObserverExplorer,
      valueExplorer: &self.connexionWarningString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "connexionErrorString",
      idx: self.connexionErrorString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.connexionErrorString_property.mObserverExplorer,
      valueExplorer: &self.connexionErrorString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicStatusMessage",
      idx: self.mSchematicStatusMessage_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicStatusMessage_property.mObserverExplorer,
      valueExplorer: &self.mSchematicStatusMessage_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicStatusImage",
      idx: self.mSchematicStatusImage_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicStatusImage_property.mObserverExplorer,
      valueExplorer: &self.mSchematicStatusImage_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "mComponents",
      idx:mComponents_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mComponents_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mNetClasses",
      idx:mNetClasses_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mNetClasses_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mFonts",
      idx:mFonts_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mFonts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mDevices",
      idx:mDevices_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mDevices_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mSheets",
      idx:mSheets_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mSheets_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "mSelectedSheet",
      idx:self.mSelectedSheet_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mSelectedSheet_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.mObserverExplorer = nil
    self.mSelectedPageIndex_property.mValueExplorer = nil
  //--- Atomic property: mSelectedSchematicsInspector
    self.mSelectedSchematicsInspector_property.mObserverExplorer = nil
    self.mSelectedSchematicsInspector_property.mValueExplorer = nil
  //--- Atomic property: mSchematicTitle
    self.mSchematicTitle_property.mObserverExplorer = nil
    self.mSchematicTitle_property.mValueExplorer = nil
  //--- Atomic property: mSchematicVersion
    self.mSchematicVersion_property.mObserverExplorer = nil
    self.mSchematicVersion_property.mValueExplorer = nil
  //--- Atomic property: mSchematicDate
    self.mSchematicDate_property.mObserverExplorer = nil
    self.mSchematicDate_property.mValueExplorer = nil
  //--- Atomic property: mSchematicHorizontalFlip
    self.mSchematicHorizontalFlip_property.mObserverExplorer = nil
    self.mSchematicHorizontalFlip_property.mValueExplorer = nil
  //--- Atomic property: mSchematicVerticalFlip
    self.mSchematicVerticalFlip_property.mObserverExplorer = nil
    self.mSchematicVerticalFlip_property.mValueExplorer = nil
  //--- Atomic property: mSchematicZoom
    self.mSchematicZoom_property.mObserverExplorer = nil
    self.mSchematicZoom_property.mValueExplorer = nil
  //--- Atomic property: mSchematicGridStyle
    self.mSchematicGridStyle_property.mObserverExplorer = nil
    self.mSchematicGridStyle_property.mValueExplorer = nil
  //--- Atomic property: mSchematicGridDisplayFactor
    self.mSchematicGridDisplayFactor_property.mObserverExplorer = nil
    self.mSchematicGridDisplayFactor_property.mValueExplorer = nil
  //--- To many property: mComponents
    self.mComponents_property.mValueExplorer = nil
  //--- To many property: mNetClasses
    self.mNetClasses_property.mValueExplorer = nil
  //--- To many property: mFonts
    self.mFonts_property.mValueExplorer = nil
  //--- To many property: mDevices
    self.mDevices_property.mValueExplorer = nil
  //--- To many property: mSheets
    self.mSheets_property.mValueExplorer = nil
  //--- Atomic property: mSchematicSheetOrientation
    self.mSchematicSheetOrientation_property.mObserverExplorer = nil
    self.mSchematicSheetOrientation_property.mValueExplorer = nil
  //--- Atomic proxy property: selectedSheetTitle
    self.selectedSheetTitle_property.mObserverExplorer = nil
    self.selectedSheetTitle_property.mValueExplorer = nil
  //--- ToMany proxy: selectedSheetObjects
    self.selectedSheetObjects_property.mObserverExplorer = nil
  //--- To one property: mSelectedSheet
    self.mSelectedSheet_property.mObserverExplorer = nil
    self.mSelectedSheet_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mComponents_property.setProp ([])
    self.mNetClasses_property.setProp ([])
    self.mFonts_property.setProp ([])
    self.mDevices_property.setProp ([])
    self.mSheets_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mSelectedSheet_property.setProp (nil)
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.storeIn (dictionary: ioDictionary, forKey:"mSelectedPageIndex")
  //--- Atomic property: mSelectedSchematicsInspector
    self.mSelectedSchematicsInspector_property.storeIn (dictionary: ioDictionary, forKey:"mSelectedSchematicsInspector")
  //--- Atomic property: mSchematicTitle
    self.mSchematicTitle_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicTitle")
  //--- Atomic property: mSchematicVersion
    self.mSchematicVersion_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicVersion")
  //--- Atomic property: mSchematicDate
    self.mSchematicDate_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicDate")
  //--- Atomic property: mSchematicHorizontalFlip
    self.mSchematicHorizontalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicHorizontalFlip")
  //--- Atomic property: mSchematicVerticalFlip
    self.mSchematicVerticalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicVerticalFlip")
  //--- Atomic property: mSchematicZoom
    self.mSchematicZoom_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicZoom")
  //--- Atomic property: mSchematicGridStyle
    self.mSchematicGridStyle_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicGridStyle")
  //--- Atomic property: mSchematicGridDisplayFactor
    self.mSchematicGridDisplayFactor_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicGridDisplayFactor")
  //--- To many property: mComponents
    self.store (
      managedObjectArray: self.mComponents_property.propval,
      relationshipName: "mComponents",
      intoDictionary: ioDictionary
    )
  //--- To many property: mNetClasses
    self.store (
      managedObjectArray: self.mNetClasses_property.propval,
      relationshipName: "mNetClasses",
      intoDictionary: ioDictionary
    )
  //--- To many property: mFonts
    self.store (
      managedObjectArray: self.mFonts_property.propval,
      relationshipName: "mFonts",
      intoDictionary: ioDictionary
    )
  //--- To many property: mDevices
    self.store (
      managedObjectArray: self.mDevices_property.propval,
      relationshipName: "mDevices",
      intoDictionary: ioDictionary
    )
  //--- To many property: mSheets
    self.store (
      managedObjectArray: self.mSheets_property.propval,
      relationshipName: "mSheets",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: mSchematicSheetOrientation
    self.mSchematicSheetOrientation_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicSheetOrientation")
  //--- To one property: mSelectedSheet
    self.store (managedObject:self.mSelectedSheet_property.propval,
      relationshipName: "mSelectedSheet",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mComponents
    self.mComponents_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mComponents",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [ComponentInProject])
  //--- To many property: mNetClasses
    self.mNetClasses_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mNetClasses",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [NetClassInProject])
  //--- To many property: mFonts
    self.mFonts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mFonts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [FontInProject])
  //--- To many property: mDevices
    self.mDevices_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mDevices",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [DeviceInProject])
  //--- To many property: mSheets
    self.mSheets_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mSheets",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SheetInProject])
  //--- To one property: mSelectedSheet
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mSelectedSheet",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? SheetInProject {
        self.mSelectedSheet_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.readFrom (dictionary: inDictionary, forKey:"mSelectedPageIndex")
  //--- Atomic property: mSelectedSchematicsInspector
    self.mSelectedSchematicsInspector_property.readFrom (dictionary: inDictionary, forKey:"mSelectedSchematicsInspector")
  //--- Atomic property: mSchematicTitle
    self.mSchematicTitle_property.readFrom (dictionary: inDictionary, forKey:"mSchematicTitle")
  //--- Atomic property: mSchematicVersion
    self.mSchematicVersion_property.readFrom (dictionary: inDictionary, forKey:"mSchematicVersion")
  //--- Atomic property: mSchematicDate
    self.mSchematicDate_property.readFrom (dictionary: inDictionary, forKey:"mSchematicDate")
  //--- Atomic property: mSchematicHorizontalFlip
    self.mSchematicHorizontalFlip_property.readFrom (dictionary: inDictionary, forKey:"mSchematicHorizontalFlip")
  //--- Atomic property: mSchematicVerticalFlip
    self.mSchematicVerticalFlip_property.readFrom (dictionary: inDictionary, forKey:"mSchematicVerticalFlip")
  //--- Atomic property: mSchematicZoom
    self.mSchematicZoom_property.readFrom (dictionary: inDictionary, forKey:"mSchematicZoom")
  //--- Atomic property: mSchematicGridStyle
    self.mSchematicGridStyle_property.readFrom (dictionary: inDictionary, forKey:"mSchematicGridStyle")
  //--- Atomic property: mSchematicGridDisplayFactor
    self.mSchematicGridDisplayFactor_property.readFrom (dictionary: inDictionary, forKey:"mSchematicGridDisplayFactor")
  //--- Atomic property: mSchematicSheetOrientation
    self.mSchematicSheetOrientation_property.readFrom (dictionary: inDictionary, forKey:"mSchematicSheetOrientation")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mComponents
    for managedObject in self.mComponents_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mNetClasses
    for managedObject in self.mNetClasses_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mFonts
    for managedObject in self.mFonts_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mDevices
    for managedObject in self.mDevices_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mSheets
    for managedObject in self.mSheets_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mSelectedSheet
    if let managedObject = self.mSelectedSheet_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mComponents
    for managedObject in self.mComponents_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mNetClasses
    for managedObject in self.mNetClasses_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mFonts
    for managedObject in self.mFonts_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mDevices
    for managedObject in self.mDevices_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mSheets
    for managedObject in self.mSheets_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mSelectedSheet
    if let managedObject = self.mSelectedSheet_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ProjectRoot : ReadOnlyAbstractArrayProperty <ProjectRoot> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <ProjectRoot>, addedSet inAddedSet : Set <ProjectRoot>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_mSelectedPageIndex_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSelectedSchematicsInspector_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicTitle_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicVersion_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicDate_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicHorizontalFlip_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicVerticalFlip_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicZoom_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicGridStyle_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicGridDisplayFactor_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSchematicSheetOrientation_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_selectedSheetIssues_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_connectedPoints_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_unplacedSymbols_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_netsDescription_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_deviceNames_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_schematicsBackgroundDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_connexionWarningString_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_connexionErrorString_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_mSchematicStatusMessage_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_mSchematicStatusImage_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_mSelectedPageIndex_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSelectedSchematicsInspector_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicTitle_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicVersion_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicDate_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicHorizontalFlip_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicVerticalFlip_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicZoom_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicGridStyle_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicGridDisplayFactor_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSchematicSheetOrientation_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_selectedSheetIssues_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_connectedPoints_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_unplacedSymbols_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_netsDescription_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_deviceNames_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_schematicsBackgroundDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_connexionWarningString_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_connexionErrorString_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_mSchematicStatusMessage_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_mSchematicStatusImage_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'mSelectedPageIndex' stored property
  //····················································································································

  private var mObserversOf_mSelectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSelectedPageIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedPageIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSelectedPageIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedPageIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSelectedPageIndex_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSelectedPageIndex.apply { (_ observer : EBEvent) in
        managedObject.mSelectedPageIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSelectedPageIndex_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSelectedPageIndex.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSelectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSelectedSchematicsInspector' stored property
  //····················································································································

  private var mObserversOf_mSelectedSchematicsInspector = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSelectedSchematicsInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSelectedSchematicsInspector.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedSchematicsInspector_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSelectedSchematicsInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSelectedSchematicsInspector.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedSchematicsInspector_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSelectedSchematicsInspector_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSelectedSchematicsInspector.apply { (_ observer : EBEvent) in
        managedObject.mSelectedSchematicsInspector_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSelectedSchematicsInspector_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSelectedSchematicsInspector.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSelectedSchematicsInspector_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicTitle' stored property
  //····················································································································

  private var mObserversOf_mSchematicTitle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicTitle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicTitle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicTitle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicTitle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicTitle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicTitle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicTitle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicTitle.apply { (_ observer : EBEvent) in
        managedObject.mSchematicTitle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicTitle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicTitle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicTitle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicVersion' stored property
  //····················································································································

  private var mObserversOf_mSchematicVersion = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicVersion (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicVersion.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicVersion_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicVersion (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicVersion.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicVersion_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicVersion_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicVersion.apply { (_ observer : EBEvent) in
        managedObject.mSchematicVersion_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicVersion_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicVersion.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicVersion_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicDate' stored property
  //····················································································································

  private var mObserversOf_mSchematicDate = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicDate (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicDate.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicDate_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicDate (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicDate.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicDate_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicDate_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicDate.apply { (_ observer : EBEvent) in
        managedObject.mSchematicDate_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicDate_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicDate.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicDate_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicHorizontalFlip' stored property
  //····················································································································

  private var mObserversOf_mSchematicHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicHorizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicHorizontalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicHorizontalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicHorizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicHorizontalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicHorizontalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicHorizontalFlip_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicHorizontalFlip.apply { (_ observer : EBEvent) in
        managedObject.mSchematicHorizontalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicHorizontalFlip_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicHorizontalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicHorizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicVerticalFlip' stored property
  //····················································································································

  private var mObserversOf_mSchematicVerticalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicVerticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicVerticalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicVerticalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicVerticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicVerticalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicVerticalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicVerticalFlip_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicVerticalFlip.apply { (_ observer : EBEvent) in
        managedObject.mSchematicVerticalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicVerticalFlip_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicVerticalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicVerticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicZoom' stored property
  //····················································································································

  private var mObserversOf_mSchematicZoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicZoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicZoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicZoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicZoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicZoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicZoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicZoom_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicZoom.apply { (_ observer : EBEvent) in
        managedObject.mSchematicZoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicZoom_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicZoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicZoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicGridStyle' stored property
  //····················································································································

  private var mObserversOf_mSchematicGridStyle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicGridStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicGridStyle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicGridStyle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicGridStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicGridStyle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicGridStyle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicGridStyle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicGridStyle.apply { (_ observer : EBEvent) in
        managedObject.mSchematicGridStyle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicGridStyle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicGridStyle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicGridStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicGridDisplayFactor' stored property
  //····················································································································

  private var mObserversOf_mSchematicGridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicGridDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicGridDisplayFactor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicGridDisplayFactor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicGridDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicGridDisplayFactor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicGridDisplayFactor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicGridDisplayFactor_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicGridDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.mSchematicGridDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicGridDisplayFactor_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicGridDisplayFactor.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicGridDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicSheetOrientation' stored property
  //····················································································································

  private var mObserversOf_mSchematicSheetOrientation = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicSheetOrientation (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicSheetOrientation.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicSheetOrientation_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicSheetOrientation (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicSheetOrientation.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicSheetOrientation_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicSheetOrientation_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicSheetOrientation.apply { (_ observer : EBEvent) in
        managedObject.mSchematicSheetOrientation_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicSheetOrientation_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicSheetOrientation.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicSheetOrientation_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedSheetTitle' proxy property
  //····················································································································

  private var mObserversOf_selectedSheetTitle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedSheetTitle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedSheetTitle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedSheetTitle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedSheetTitle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedSheetTitle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedSheetTitle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedSheetTitle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedSheetTitle.apply { (_ observer : EBEvent) in
        managedObject.selectedSheetTitle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedSheetTitle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_selectedSheetTitle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedSheetTitle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedSheetIssues' transient property
  //····················································································································

  private var mObserversOf_selectedSheetIssues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedSheetIssues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedSheetIssues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedSheetIssues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedSheetIssues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedSheetIssues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedSheetIssues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedSheetIssues_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedSheetIssues.apply { (_ observer : EBEvent) in
        managedObject.selectedSheetIssues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedSheetIssues_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedSheetIssues.apply { (_ observer : EBEvent) in
        managedObject.selectedSheetIssues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connectedPoints' transient property
  //····················································································································

  private var mObserversOf_connectedPoints = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connectedPoints.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connectedPoints_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connectedPoints.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connectedPoints_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_connectedPoints_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connectedPoints.apply { (_ observer : EBEvent) in
        managedObject.connectedPoints_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connectedPoints_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connectedPoints.apply { (_ observer : EBEvent) in
        managedObject.connectedPoints_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'unplacedSymbols' transient property
  //····················································································································

  private var mObserversOf_unplacedSymbols = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unplacedSymbols_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unplacedSymbols_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_unplacedSymbols_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_unplacedSymbols.apply { (_ observer : EBEvent) in
        managedObject.unplacedSymbols_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_unplacedSymbols_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_unplacedSymbols.apply { (_ observer : EBEvent) in
        managedObject.unplacedSymbols_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netsDescription' transient property
  //····················································································································

  private var mObserversOf_netsDescription = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netsDescription (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netsDescription.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netsDescription_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netsDescription (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netsDescription.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netsDescription_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netsDescription_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_netsDescription.apply { (_ observer : EBEvent) in
        managedObject.netsDescription_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netsDescription_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_netsDescription.apply { (_ observer : EBEvent) in
        managedObject.netsDescription_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'deviceNames' transient property
  //····················································································································

  private var mObserversOf_deviceNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_deviceNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_deviceNames.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceNames_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_deviceNames.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceNames_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_deviceNames_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_deviceNames.apply { (_ observer : EBEvent) in
        managedObject.deviceNames_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_deviceNames_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_deviceNames.apply { (_ observer : EBEvent) in
        managedObject.deviceNames_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'schematicsBackgroundDisplay' transient property
  //····················································································································

  private var mObserversOf_schematicsBackgroundDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_schematicsBackgroundDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_schematicsBackgroundDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicsBackgroundDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_schematicsBackgroundDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_schematicsBackgroundDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.schematicsBackgroundDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_schematicsBackgroundDisplay_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicsBackgroundDisplay.apply { (_ observer : EBEvent) in
        managedObject.schematicsBackgroundDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_schematicsBackgroundDisplay_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicsBackgroundDisplay.apply { (_ observer : EBEvent) in
        managedObject.schematicsBackgroundDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connexionWarningString' transient property
  //····················································································································

  private var mObserversOf_connexionWarningString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_connexionWarningString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connexionWarningString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connexionWarningString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_connexionWarningString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connexionWarningString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connexionWarningString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_connexionWarningString_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connexionWarningString.apply { (_ observer : EBEvent) in
        managedObject.connexionWarningString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connexionWarningString_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connexionWarningString.apply { (_ observer : EBEvent) in
        managedObject.connexionWarningString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connexionErrorString' transient property
  //····················································································································

  private var mObserversOf_connexionErrorString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_connexionErrorString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connexionErrorString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connexionErrorString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_connexionErrorString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connexionErrorString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connexionErrorString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_connexionErrorString_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connexionErrorString.apply { (_ observer : EBEvent) in
        managedObject.connexionErrorString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connexionErrorString_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connexionErrorString.apply { (_ observer : EBEvent) in
        managedObject.connexionErrorString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicStatusMessage' transient property
  //····················································································································

  private var mObserversOf_mSchematicStatusMessage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicStatusMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicStatusMessage.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicStatusMessage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicStatusMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicStatusMessage.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicStatusMessage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicStatusMessage_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicStatusMessage.apply { (_ observer : EBEvent) in
        managedObject.mSchematicStatusMessage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicStatusMessage_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicStatusMessage.apply { (_ observer : EBEvent) in
        managedObject.mSchematicStatusMessage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicStatusImage' transient property
  //····················································································································

  private var mObserversOf_mSchematicStatusImage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSchematicStatusImage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicStatusImage.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicStatusImage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicStatusImage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicStatusImage.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSchematicStatusImage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicStatusImage_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicStatusImage.apply { (_ observer : EBEvent) in
        managedObject.mSchematicStatusImage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicStatusImage_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicStatusImage.apply { (_ observer : EBEvent) in
        managedObject.mSchematicStatusImage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_ProjectRoot : ReadOnlyArrayOf_ProjectRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_ProjectRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_ProjectRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newArray : [ProjectRoot] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newArray = v
        self.mTransientKind = .single
       case .multiple :
        newArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newArray = []
      self.mTransientKind = .empty
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [ProjectRoot] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [ProjectRoot] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_ProjectRoot <SUPER : EBManagedObject> : ReadOnlyArrayOf_ProjectRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    var newModelArray : [SUPER] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newModelArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newModelArray = v
        self.mTransientKind = .single
       case .multiple :
        newModelArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newModelArray = []
      self.mTransientKind = .empty
    }
    var newArray = [ProjectRoot] ()
    for superObject in newModelArray {
      if let object = superObject as? ProjectRoot {
        newArray.append (object)
      }
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [ProjectRoot] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [ProjectRoot] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_ProjectRoot : ReadOnlyArrayOf_ProjectRoot {

  //····················································································································
 
  func setProp (_ value :  [ProjectRoot]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_ProjectRoot : ReadWriteArrayOf_ProjectRoot {

  //····················································································································

  private var mModel : ReadWriteArrayOf_ProjectRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_ProjectRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [ProjectRoot]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [ProjectRoot]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [ProjectRoot] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : [ProjectRoot] {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_ProjectRoot : ReadWriteArrayOf_ProjectRoot, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ProjectRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ProjectRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ProjectRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ProjectRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  //  Init
  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [ProjectRoot] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "ProjectRoot") as? ProjectRoot {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [ProjectRoot]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [ProjectRoot]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //--- Write in preferences ?
    self.writeInPreferences ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <ProjectRoot>, addedSet inAddedSet : Set <ProjectRoot>) {
    for managedObject in inRemovedSet {
      managedObject.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (managedObject)
    }
  //---
    for managedObject in inAddedSet {
      managedObject.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }
 
  //····················································································································

  override var prop : EBSelection < [ProjectRoot] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [ProjectRoot]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [ProjectRoot] { return self.mInternalArrayValue }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mInternalArrayValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  func remove (_ object : ProjectRoot) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : ProjectRoot) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mInternalArrayValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_ProjectRoot 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_ProjectRoot : ReadOnlyAbstractObjectProperty <ProjectRoot> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : ProjectRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.mSelectedPageIndex_property.removeEBObserversFrom (&self.mObserversOf_mSelectedPageIndex) // Stored property
    inOldValue?.mSelectedSchematicsInspector_property.removeEBObserversFrom (&self.mObserversOf_mSelectedSchematicsInspector) // Stored property
    inOldValue?.mSchematicTitle_property.removeEBObserversFrom (&self.mObserversOf_mSchematicTitle) // Stored property
    inOldValue?.mSchematicVersion_property.removeEBObserversFrom (&self.mObserversOf_mSchematicVersion) // Stored property
    inOldValue?.mSchematicDate_property.removeEBObserversFrom (&self.mObserversOf_mSchematicDate) // Stored property
    inOldValue?.mSchematicHorizontalFlip_property.removeEBObserversFrom (&self.mObserversOf_mSchematicHorizontalFlip) // Stored property
    inOldValue?.mSchematicVerticalFlip_property.removeEBObserversFrom (&self.mObserversOf_mSchematicVerticalFlip) // Stored property
    inOldValue?.mSchematicZoom_property.removeEBObserversFrom (&self.mObserversOf_mSchematicZoom) // Stored property
    inOldValue?.mSchematicGridStyle_property.removeEBObserversFrom (&self.mObserversOf_mSchematicGridStyle) // Stored property
    inOldValue?.mSchematicGridDisplayFactor_property.removeEBObserversFrom (&self.mObserversOf_mSchematicGridDisplayFactor) // Stored property
    inOldValue?.mSchematicSheetOrientation_property.removeEBObserversFrom (&self.mObserversOf_mSchematicSheetOrientation) // Stored property
    inOldValue?.selectedSheetIssues_property.removeEBObserversFrom (&self.mObserversOf_selectedSheetIssues) // Transient property
    inOldValue?.connectedPoints_property.removeEBObserversFrom (&self.mObserversOf_connectedPoints) // Transient property
    inOldValue?.unplacedSymbols_property.removeEBObserversFrom (&self.mObserversOf_unplacedSymbols) // Transient property
    inOldValue?.netsDescription_property.removeEBObserversFrom (&self.mObserversOf_netsDescription) // Transient property
    inOldValue?.deviceNames_property.removeEBObserversFrom (&self.mObserversOf_deviceNames) // Transient property
    inOldValue?.schematicsBackgroundDisplay_property.removeEBObserversFrom (&self.mObserversOf_schematicsBackgroundDisplay) // Transient property
    inOldValue?.connexionWarningString_property.removeEBObserversFrom (&self.mObserversOf_connexionWarningString) // Transient property
    inOldValue?.connexionErrorString_property.removeEBObserversFrom (&self.mObserversOf_connexionErrorString) // Transient property
    inOldValue?.mSchematicStatusMessage_property.removeEBObserversFrom (&self.mObserversOf_mSchematicStatusMessage) // Transient property
    inOldValue?.mSchematicStatusImage_property.removeEBObserversFrom (&self.mObserversOf_mSchematicStatusImage) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.mSelectedPageIndex_property.addEBObserversFrom (&self.mObserversOf_mSelectedPageIndex) // Stored property
    self.mInternalValue?.mSelectedSchematicsInspector_property.addEBObserversFrom (&self.mObserversOf_mSelectedSchematicsInspector) // Stored property
    self.mInternalValue?.mSchematicTitle_property.addEBObserversFrom (&self.mObserversOf_mSchematicTitle) // Stored property
    self.mInternalValue?.mSchematicVersion_property.addEBObserversFrom (&self.mObserversOf_mSchematicVersion) // Stored property
    self.mInternalValue?.mSchematicDate_property.addEBObserversFrom (&self.mObserversOf_mSchematicDate) // Stored property
    self.mInternalValue?.mSchematicHorizontalFlip_property.addEBObserversFrom (&self.mObserversOf_mSchematicHorizontalFlip) // Stored property
    self.mInternalValue?.mSchematicVerticalFlip_property.addEBObserversFrom (&self.mObserversOf_mSchematicVerticalFlip) // Stored property
    self.mInternalValue?.mSchematicZoom_property.addEBObserversFrom (&self.mObserversOf_mSchematicZoom) // Stored property
    self.mInternalValue?.mSchematicGridStyle_property.addEBObserversFrom (&self.mObserversOf_mSchematicGridStyle) // Stored property
    self.mInternalValue?.mSchematicGridDisplayFactor_property.addEBObserversFrom (&self.mObserversOf_mSchematicGridDisplayFactor) // Stored property
    self.mInternalValue?.mSchematicSheetOrientation_property.addEBObserversFrom (&self.mObserversOf_mSchematicSheetOrientation) // Stored property
    self.mInternalValue?.selectedSheetIssues_property.addEBObserversFrom (&self.mObserversOf_selectedSheetIssues) // Transient property
    self.mInternalValue?.connectedPoints_property.addEBObserversFrom (&self.mObserversOf_connectedPoints) // Transient property
    self.mInternalValue?.unplacedSymbols_property.addEBObserversFrom (&self.mObserversOf_unplacedSymbols) // Transient property
    self.mInternalValue?.netsDescription_property.addEBObserversFrom (&self.mObserversOf_netsDescription) // Transient property
    self.mInternalValue?.deviceNames_property.addEBObserversFrom (&self.mObserversOf_deviceNames) // Transient property
    self.mInternalValue?.schematicsBackgroundDisplay_property.addEBObserversFrom (&self.mObserversOf_schematicsBackgroundDisplay) // Transient property
    self.mInternalValue?.connexionWarningString_property.addEBObserversFrom (&self.mObserversOf_connexionWarningString) // Transient property
    self.mInternalValue?.connexionErrorString_property.addEBObserversFrom (&self.mObserversOf_connexionErrorString) // Transient property
    self.mInternalValue?.mSchematicStatusMessage_property.addEBObserversFrom (&self.mObserversOf_mSchematicStatusMessage) // Transient property
    self.mInternalValue?.mSchematicStatusImage_property.addEBObserversFrom (&self.mObserversOf_mSchematicStatusImage) // Transient property
  }

  //····················································································································
  //   Observers of 'mSelectedPageIndex' stored property
  //····················································································································

  private var mObserversOf_mSelectedPageIndex = EBWeakEventSet ()

  //····················································································································

  var mSelectedPageIndex_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mSelectedPageIndex_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSelectedPageIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSelectedPageIndex_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSelectedPageIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSelectedPageIndex_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSelectedPageIndex_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSelectedPageIndex.apply { (_ observer : EBEvent) in
        managedObject.mSelectedPageIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSelectedPageIndex_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSelectedPageIndex.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSelectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSelectedSchematicsInspector' stored property
  //····················································································································

  private var mObserversOf_mSelectedSchematicsInspector = EBWeakEventSet ()

  //····················································································································

  var mSelectedSchematicsInspector_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mSelectedSchematicsInspector_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSelectedSchematicsInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSelectedSchematicsInspector.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSelectedSchematicsInspector_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSelectedSchematicsInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSelectedSchematicsInspector.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSelectedSchematicsInspector_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSelectedSchematicsInspector_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSelectedSchematicsInspector.apply { (_ observer : EBEvent) in
        managedObject.mSelectedSchematicsInspector_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSelectedSchematicsInspector_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSelectedSchematicsInspector.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSelectedSchematicsInspector_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicTitle' stored property
  //····················································································································

  private var mObserversOf_mSchematicTitle = EBWeakEventSet ()

  //····················································································································

  var mSchematicTitle_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mSchematicTitle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSchematicTitle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicTitle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicTitle_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicTitle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicTitle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicTitle_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicTitle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicTitle.apply { (_ observer : EBEvent) in
        managedObject.mSchematicTitle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicTitle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicTitle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicTitle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicVersion' stored property
  //····················································································································

  private var mObserversOf_mSchematicVersion = EBWeakEventSet ()

  //····················································································································

  var mSchematicVersion_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mSchematicVersion_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSchematicVersion (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicVersion.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicVersion_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicVersion (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicVersion.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicVersion_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicVersion_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicVersion.apply { (_ observer : EBEvent) in
        managedObject.mSchematicVersion_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicVersion_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicVersion.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicVersion_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicDate' stored property
  //····················································································································

  private var mObserversOf_mSchematicDate = EBWeakEventSet ()

  //····················································································································

  var mSchematicDate_property_selection : EBSelection <Date?> {
    if let model = self.propval {
      switch (model.mSchematicDate_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSchematicDate (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicDate.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicDate_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicDate (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicDate.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicDate_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicDate_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicDate.apply { (_ observer : EBEvent) in
        managedObject.mSchematicDate_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicDate_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicDate.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicDate_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicHorizontalFlip' stored property
  //····················································································································

  private var mObserversOf_mSchematicHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  var mSchematicHorizontalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mSchematicHorizontalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSchematicHorizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicHorizontalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicHorizontalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicHorizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicHorizontalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicHorizontalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicHorizontalFlip_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicHorizontalFlip.apply { (_ observer : EBEvent) in
        managedObject.mSchematicHorizontalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicHorizontalFlip_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicHorizontalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicHorizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicVerticalFlip' stored property
  //····················································································································

  private var mObserversOf_mSchematicVerticalFlip = EBWeakEventSet ()

  //····················································································································

  var mSchematicVerticalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mSchematicVerticalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSchematicVerticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicVerticalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicVerticalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicVerticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicVerticalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicVerticalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicVerticalFlip_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicVerticalFlip.apply { (_ observer : EBEvent) in
        managedObject.mSchematicVerticalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicVerticalFlip_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicVerticalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicVerticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicZoom' stored property
  //····················································································································

  private var mObserversOf_mSchematicZoom = EBWeakEventSet ()

  //····················································································································

  var mSchematicZoom_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mSchematicZoom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSchematicZoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicZoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicZoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicZoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicZoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicZoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicZoom_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicZoom.apply { (_ observer : EBEvent) in
        managedObject.mSchematicZoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicZoom_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicZoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicZoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicGridStyle' stored property
  //····················································································································

  private var mObserversOf_mSchematicGridStyle = EBWeakEventSet ()

  //····················································································································

  var mSchematicGridStyle_property_selection : EBSelection <GridStyle?> {
    if let model = self.propval {
      switch (model.mSchematicGridStyle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSchematicGridStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicGridStyle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicGridStyle_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicGridStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicGridStyle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicGridStyle_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicGridStyle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicGridStyle.apply { (_ observer : EBEvent) in
        managedObject.mSchematicGridStyle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicGridStyle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicGridStyle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicGridStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicGridDisplayFactor' stored property
  //····················································································································

  private var mObserversOf_mSchematicGridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  var mSchematicGridDisplayFactor_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mSchematicGridDisplayFactor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSchematicGridDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicGridDisplayFactor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicGridDisplayFactor_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicGridDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicGridDisplayFactor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicGridDisplayFactor_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicGridDisplayFactor_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicGridDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.mSchematicGridDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicGridDisplayFactor_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicGridDisplayFactor.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicGridDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicSheetOrientation' stored property
  //····················································································································

  private var mObserversOf_mSchematicSheetOrientation = EBWeakEventSet ()

  //····················································································································

  var mSchematicSheetOrientation_property_selection : EBSelection <SchematicsSheetOrientation?> {
    if let model = self.propval {
      switch (model.mSchematicSheetOrientation_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSchematicSheetOrientation (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicSheetOrientation.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicSheetOrientation_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicSheetOrientation (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicSheetOrientation.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicSheetOrientation_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicSheetOrientation_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicSheetOrientation.apply { (_ observer : EBEvent) in
        managedObject.mSchematicSheetOrientation_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicSheetOrientation_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicSheetOrientation.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicSheetOrientation_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedSheetTitle' proxy property
  //····················································································································

  private var mObserversOf_selectedSheetTitle = EBWeakEventSet ()

  //····················································································································

  var selectedSheetTitle_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.selectedSheetTitle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedSheetTitle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedSheetTitle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedSheetTitle_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedSheetTitle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedSheetTitle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedSheetTitle_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedSheetTitle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedSheetTitle.apply { (_ observer : EBEvent) in
        managedObject.selectedSheetTitle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedSheetTitle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_selectedSheetTitle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedSheetTitle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedSheetIssues' transient property
  //····················································································································

  private var mObserversOf_selectedSheetIssues = EBWeakEventSet ()

  //····················································································································

  var selectedSheetIssues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.selectedSheetIssues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedSheetIssues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedSheetIssues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedSheetIssues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedSheetIssues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedSheetIssues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedSheetIssues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedSheetIssues_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedSheetIssues.apply { (_ observer : EBEvent) in
        managedObject.selectedSheetIssues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedSheetIssues_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedSheetIssues.apply { (_ observer : EBEvent) in
        managedObject.selectedSheetIssues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connectedPoints' transient property
  //····················································································································

  private var mObserversOf_connectedPoints = EBWeakEventSet ()

  //····················································································································

  var connectedPoints_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.connectedPoints_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connectedPoints.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connectedPoints_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connectedPoints.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connectedPoints_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_connectedPoints_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connectedPoints.apply { (_ observer : EBEvent) in
        managedObject.connectedPoints_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connectedPoints_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connectedPoints.apply { (_ observer : EBEvent) in
        managedObject.connectedPoints_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'unplacedSymbols' transient property
  //····················································································································

  private var mObserversOf_unplacedSymbols = EBWeakEventSet ()

  //····················································································································

  var unplacedSymbols_property_selection : EBSelection <StringTagArray?> {
    if let model = self.propval {
      switch (model.unplacedSymbols_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.unplacedSymbols_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.unplacedSymbols_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_unplacedSymbols_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_unplacedSymbols.apply { (_ observer : EBEvent) in
        managedObject.unplacedSymbols_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_unplacedSymbols_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_unplacedSymbols.apply { (_ observer : EBEvent) in
        managedObject.unplacedSymbols_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netsDescription' transient property
  //····················································································································

  private var mObserversOf_netsDescription = EBWeakEventSet ()

  //····················································································································

  var netsDescription_property_selection : EBSelection <NetInfoArray?> {
    if let model = self.propval {
      switch (model.netsDescription_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_netsDescription (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netsDescription.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netsDescription_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_netsDescription (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netsDescription.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netsDescription_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_netsDescription_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_netsDescription.apply { (_ observer : EBEvent) in
        managedObject.netsDescription_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netsDescription_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_netsDescription.apply { (_ observer : EBEvent) in
        managedObject.netsDescription_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'deviceNames' transient property
  //····················································································································

  private var mObserversOf_deviceNames = EBWeakEventSet ()

  //····················································································································

  var deviceNames_property_selection : EBSelection <StringArray?> {
    if let model = self.propval {
      switch (model.deviceNames_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_deviceNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_deviceNames.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.deviceNames_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_deviceNames.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.deviceNames_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_deviceNames_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_deviceNames.apply { (_ observer : EBEvent) in
        managedObject.deviceNames_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_deviceNames_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_deviceNames.apply { (_ observer : EBEvent) in
        managedObject.deviceNames_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'schematicsBackgroundDisplay' transient property
  //····················································································································

  private var mObserversOf_schematicsBackgroundDisplay = EBWeakEventSet ()

  //····················································································································

  var schematicsBackgroundDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.schematicsBackgroundDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_schematicsBackgroundDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_schematicsBackgroundDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.schematicsBackgroundDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_schematicsBackgroundDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_schematicsBackgroundDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.schematicsBackgroundDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_schematicsBackgroundDisplay_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicsBackgroundDisplay.apply { (_ observer : EBEvent) in
        managedObject.schematicsBackgroundDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_schematicsBackgroundDisplay_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicsBackgroundDisplay.apply { (_ observer : EBEvent) in
        managedObject.schematicsBackgroundDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connexionWarningString' transient property
  //····················································································································

  private var mObserversOf_connexionWarningString = EBWeakEventSet ()

  //····················································································································

  var connexionWarningString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.connexionWarningString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_connexionWarningString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connexionWarningString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connexionWarningString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_connexionWarningString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connexionWarningString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connexionWarningString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_connexionWarningString_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connexionWarningString.apply { (_ observer : EBEvent) in
        managedObject.connexionWarningString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connexionWarningString_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connexionWarningString.apply { (_ observer : EBEvent) in
        managedObject.connexionWarningString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connexionErrorString' transient property
  //····················································································································

  private var mObserversOf_connexionErrorString = EBWeakEventSet ()

  //····················································································································

  var connexionErrorString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.connexionErrorString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_connexionErrorString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connexionErrorString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connexionErrorString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_connexionErrorString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connexionErrorString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connexionErrorString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_connexionErrorString_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connexionErrorString.apply { (_ observer : EBEvent) in
        managedObject.connexionErrorString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connexionErrorString_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connexionErrorString.apply { (_ observer : EBEvent) in
        managedObject.connexionErrorString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicStatusMessage' transient property
  //····················································································································

  private var mObserversOf_mSchematicStatusMessage = EBWeakEventSet ()

  //····················································································································

  var mSchematicStatusMessage_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mSchematicStatusMessage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSchematicStatusMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicStatusMessage.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicStatusMessage_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicStatusMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicStatusMessage.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicStatusMessage_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicStatusMessage_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicStatusMessage.apply { (_ observer : EBEvent) in
        managedObject.mSchematicStatusMessage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicStatusMessage_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicStatusMessage.apply { (_ observer : EBEvent) in
        managedObject.mSchematicStatusMessage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicStatusImage' transient property
  //····················································································································

  private var mObserversOf_mSchematicStatusImage = EBWeakEventSet ()

  //····················································································································

  var mSchematicStatusImage_property_selection : EBSelection <NSImage?> {
    if let model = self.propval {
      switch (model.mSchematicStatusImage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSchematicStatusImage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicStatusImage.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicStatusImage_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicStatusImage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicStatusImage.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicStatusImage_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicStatusImage_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicStatusImage.apply { (_ observer : EBEvent) in
        managedObject.mSchematicStatusImage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicStatusImage_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicStatusImage.apply { (_ observer : EBEvent) in
        managedObject.mSchematicStatusImage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observable toMany property: mComponents
  //····················································································································

  private var mObserversOf_mComponents = EBWeakEventSet ()

  //····················································································································

  var mComponents_property_selection : EBSelection <[ComponentInProject]> {
    if let model = self.propval {
      switch (model.mComponents_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mComponents (_ inObserver : EBEvent) {
    self.mObserversOf_mComponents.insert (inObserver)
    if let object = self.propval {
      object.mComponents_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComponents (_ inObserver : EBEvent) {
    self.mObserversOf_mComponents.remove (inObserver)
    if let object = self.propval {
      object.mComponents_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mNetClasses
  //····················································································································

  private var mObserversOf_mNetClasses = EBWeakEventSet ()

  //····················································································································

  var mNetClasses_property_selection : EBSelection <[NetClassInProject]> {
    if let model = self.propval {
      switch (model.mNetClasses_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mNetClasses (_ inObserver : EBEvent) {
    self.mObserversOf_mNetClasses.insert (inObserver)
    if let object = self.propval {
      object.mNetClasses_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetClasses (_ inObserver : EBEvent) {
    self.mObserversOf_mNetClasses.remove (inObserver)
    if let object = self.propval {
      object.mNetClasses_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mFonts
  //····················································································································

  private var mObserversOf_mFonts = EBWeakEventSet ()

  //····················································································································

  var mFonts_property_selection : EBSelection <[FontInProject]> {
    if let model = self.propval {
      switch (model.mFonts_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mFonts (_ inObserver : EBEvent) {
    self.mObserversOf_mFonts.insert (inObserver)
    if let object = self.propval {
      object.mFonts_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mFonts (_ inObserver : EBEvent) {
    self.mObserversOf_mFonts.remove (inObserver)
    if let object = self.propval {
      object.mFonts_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mDevices
  //····················································································································

  private var mObserversOf_mDevices = EBWeakEventSet ()

  //····················································································································

  var mDevices_property_selection : EBSelection <[DeviceInProject]> {
    if let model = self.propval {
      switch (model.mDevices_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mDevices (_ inObserver : EBEvent) {
    self.mObserversOf_mDevices.insert (inObserver)
    if let object = self.propval {
      object.mDevices_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDevices (_ inObserver : EBEvent) {
    self.mObserversOf_mDevices.remove (inObserver)
    if let object = self.propval {
      object.mDevices_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mSheets
  //····················································································································

  private var mObserversOf_mSheets = EBWeakEventSet ()

  //····················································································································

  var mSheets_property_selection : EBSelection <[SheetInProject]> {
    if let model = self.propval {
      switch (model.mSheets_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mSheets (_ inObserver : EBEvent) {
    self.mObserversOf_mSheets.insert (inObserver)
    if let object = self.propval {
      object.mSheets_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSheets (_ inObserver : EBEvent) {
    self.mObserversOf_mSheets.remove (inObserver)
    if let object = self.propval {
      object.mSheets_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientObject ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientObject_ProjectRoot : ReadOnlyObject_ProjectRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_ProjectRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_ProjectRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : ProjectRoot? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < ProjectRoot? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : ProjectRoot? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_ProjectRoot : ReadOnlyObject_ProjectRoot {

  //····················································································································
 
  func setProp (_ inValue : ProjectRoot?) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_ProjectRoot : ReadWriteObject_ProjectRoot {

  //····················································································································

  private var mModel : ReadWriteObject_ProjectRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_ProjectRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : ProjectRoot?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : ProjectRoot?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < ProjectRoot? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : ProjectRoot? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_ProjectRoot 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_ProjectRoot : ReadWriteObject_ProjectRoot, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ProjectRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ProjectRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ProjectRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ProjectRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : ProjectRoot?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    if let object = inOldValue {
      object.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      object.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : ProjectRoot?) {
    self.mInternalValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < ProjectRoot? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : ProjectRoot?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : ProjectRoot? { return self.mInternalValue }

  //····················································································································

  func remove (_ object : ProjectRoot) {
    if object === self.mInternalValue {
      self.mInternalValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : ProjectRoot) {
    if object !== self.mInternalValue {
      self.mInternalValue = object
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    self.mInternalValue?.setSignatureObserver (observer: observer)
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

