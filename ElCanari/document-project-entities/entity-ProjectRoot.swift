//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSelectedPageIndex : class {
  var mSelectedPageIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSelectedSchematicInspector : class {
  var mSelectedSchematicInspector : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicTitle : class {
  var mSchematicTitle : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicVersion : class {
  var mSchematicVersion : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicDate : class {
  var mSchematicDate : Date { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicHorizontalFlip : class {
  var mSchematicHorizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicVerticalFlip : class {
  var mSchematicVerticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicZoom : class {
  var mSchematicZoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicGridStyle : class {
  var mSchematicGridStyle : GridStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicGridDisplayFactor : class {
  var mSchematicGridDisplayFactor : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_mSchematicSheetOrientation : class {
  var mSchematicSheetOrientation : SchematicSheetOrientation { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_selectedSheetTitle : class {
  var selectedSheetTitle : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_selectedSheetIssues : class {
  var selectedSheetIssues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_connectedPoints : class {
  var connectedPoints : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_connexionWarningString : class {
  var connexionWarningString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_connexionErrorString : class {
  var connexionErrorString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_unplacedSymbols : class {
  var unplacedSymbols : StringTagArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_netsDescription : class {
  var netsDescription : NetInfoArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_deviceNames : class {
  var deviceNames : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_schematicBackgroundDisplay : class {
  var schematicBackgroundDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_schematicStatusMessage : class {
  var schematicStatusMessage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ProjectRoot_schematicStatusImage : class {
  var schematicStatusImage : NSImage? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ProjectRoot : EBManagedObject,
         ProjectRoot_mSelectedPageIndex,
         ProjectRoot_mSelectedSchematicInspector,
         ProjectRoot_mSchematicTitle,
         ProjectRoot_mSchematicVersion,
         ProjectRoot_mSchematicDate,
         ProjectRoot_mSchematicHorizontalFlip,
         ProjectRoot_mSchematicVerticalFlip,
         ProjectRoot_mSchematicZoom,
         ProjectRoot_mSchematicGridStyle,
         ProjectRoot_mSchematicGridDisplayFactor,
         ProjectRoot_mSchematicSheetOrientation,
         ProjectRoot_selectedSheetTitle,
         ProjectRoot_selectedSheetIssues,
         ProjectRoot_connectedPoints,
         ProjectRoot_connexionWarningString,
         ProjectRoot_connexionErrorString,
         ProjectRoot_unplacedSymbols,
         ProjectRoot_netsDescription,
         ProjectRoot_deviceNames,
         ProjectRoot_schematicBackgroundDisplay,
         ProjectRoot_schematicStatusMessage,
         ProjectRoot_schematicStatusImage {

  //····················································································································
  //   To many property: mSheets
  //····················································································································

  let mSheets_property = StoredArrayOf_SheetInProject ()

  //····················································································································

  var mSheets_property_selection : EBSelection < [SheetInProject] > {
    return self.mSheets_property.prop
  }

  //····················································································································

  var mSheets : [SheetInProject] {
    get { return self.mSheets_property.propval }
    set { self.mSheets_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSelectedPageIndex
  //····················································································································

  let mSelectedPageIndex_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mSelectedPageIndex : Int {
    get { return self.mSelectedPageIndex_property.propval }
    set { self.mSelectedPageIndex_property.setProp (newValue) }
  }

  //····················································································································

  var mSelectedPageIndex_property_selection : EBSelection <Int> { return self.mSelectedPageIndex_property.prop }

  //····················································································································
  //   Atomic property: mSelectedSchematicInspector
  //····················································································································

  let mSelectedSchematicInspector_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mSelectedSchematicInspector : Int {
    get { return self.mSelectedSchematicInspector_property.propval }
    set { self.mSelectedSchematicInspector_property.setProp (newValue) }
  }

  //····················································································································

  var mSelectedSchematicInspector_property_selection : EBSelection <Int> { return self.mSelectedSchematicInspector_property.prop }

  //····················································································································
  //   Atomic property: mSchematicTitle
  //····················································································································

  let mSchematicTitle_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mSchematicTitle : String {
    get { return self.mSchematicTitle_property.propval }
    set { self.mSchematicTitle_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicTitle_property_selection : EBSelection <String> { return self.mSchematicTitle_property.prop }

  //····················································································································
  //   Atomic property: mSchematicVersion
  //····················································································································

  let mSchematicVersion_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mSchematicVersion : String {
    get { return self.mSchematicVersion_property.propval }
    set { self.mSchematicVersion_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicVersion_property_selection : EBSelection <String> { return self.mSchematicVersion_property.prop }

  //····················································································································
  //   Atomic property: mSchematicDate
  //····················································································································

  let mSchematicDate_property = EBStoredProperty_Date (defaultValue: Date ())

  //····················································································································

  var mSchematicDate : Date {
    get { return self.mSchematicDate_property.propval }
    set { self.mSchematicDate_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicDate_property_selection : EBSelection <Date> { return self.mSchematicDate_property.prop }

  //····················································································································
  //   Atomic property: mSchematicHorizontalFlip
  //····················································································································

  let mSchematicHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mSchematicHorizontalFlip : Bool {
    get { return self.mSchematicHorizontalFlip_property.propval }
    set { self.mSchematicHorizontalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicHorizontalFlip_property_selection : EBSelection <Bool> { return self.mSchematicHorizontalFlip_property.prop }

  //····················································································································
  //   Atomic property: mSchematicVerticalFlip
  //····················································································································

  let mSchematicVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mSchematicVerticalFlip : Bool {
    get { return self.mSchematicVerticalFlip_property.propval }
    set { self.mSchematicVerticalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicVerticalFlip_property_selection : EBSelection <Bool> { return self.mSchematicVerticalFlip_property.prop }

  //····················································································································
  //   Atomic property: mSchematicZoom
  //····················································································································

  let mSchematicZoom_property = EBStoredProperty_Int (defaultValue: 100)

  //····················································································································

  var mSchematicZoom : Int {
    get { return self.mSchematicZoom_property.propval }
    set { self.mSchematicZoom_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicZoom_property_selection : EBSelection <Int> { return self.mSchematicZoom_property.prop }

  //····················································································································
  //   Atomic property: mSchematicGridStyle
  //····················································································································

  let mSchematicGridStyle_property = EBStoredProperty_GridStyle (defaultValue: GridStyle.line)

  //····················································································································

  var mSchematicGridStyle : GridStyle {
    get { return self.mSchematicGridStyle_property.propval }
    set { self.mSchematicGridStyle_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicGridStyle_property_selection : EBSelection <GridStyle> { return self.mSchematicGridStyle_property.prop }

  //····················································································································
  //   Atomic property: mSchematicGridDisplayFactor
  //····················································································································

  let mSchematicGridDisplayFactor_property = EBStoredProperty_Int (defaultValue: 4)

  //····················································································································

  var mSchematicGridDisplayFactor : Int {
    get { return self.mSchematicGridDisplayFactor_property.propval }
    set { self.mSchematicGridDisplayFactor_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicGridDisplayFactor_property_selection : EBSelection <Int> { return self.mSchematicGridDisplayFactor_property.prop }

  //····················································································································
  //   To many property: mComponents
  //····················································································································

  let mComponents_property = StoredArrayOf_ComponentInProject ()

  //····················································································································

  var mComponents_property_selection : EBSelection < [ComponentInProject] > {
    return self.mComponents_property.prop
  }

  //····················································································································

  var mComponents : [ComponentInProject] {
    get { return self.mComponents_property.propval }
    set { self.mComponents_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mNetClasses
  //····················································································································

  let mNetClasses_property = StoredArrayOf_NetClassInProject ()

  //····················································································································

  var mNetClasses_property_selection : EBSelection < [NetClassInProject] > {
    return self.mNetClasses_property.prop
  }

  //····················································································································

  var mNetClasses : [NetClassInProject] {
    get { return self.mNetClasses_property.propval }
    set { self.mNetClasses_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mFonts
  //····················································································································

  let mFonts_property = StoredArrayOf_FontInProject ()

  //····················································································································

  var mFonts_property_selection : EBSelection < [FontInProject] > {
    return self.mFonts_property.prop
  }

  //····················································································································

  var mFonts : [FontInProject] {
    get { return self.mFonts_property.propval }
    set { self.mFonts_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mDevices
  //····················································································································

  let mDevices_property = StoredArrayOf_DeviceInProject ()

  //····················································································································

  var mDevices_property_selection : EBSelection < [DeviceInProject] > {
    return self.mDevices_property.prop
  }

  //····················································································································

  var mDevices : [DeviceInProject] {
    get { return self.mDevices_property.propval }
    set { self.mDevices_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mSchematicSheetOrientation
  //····················································································································

  let mSchematicSheetOrientation_property = EBStoredProperty_SchematicSheetOrientation (defaultValue: SchematicSheetOrientation.horizontal)

  //····················································································································

  var mSchematicSheetOrientation : SchematicSheetOrientation {
    get { return self.mSchematicSheetOrientation_property.propval }
    set { self.mSchematicSheetOrientation_property.setProp (newValue) }
  }

  //····················································································································

  var mSchematicSheetOrientation_property_selection : EBSelection <SchematicSheetOrientation> { return self.mSchematicSheetOrientation_property.prop }

  //····················································································································
  //   Atomic proxy property: selectedSheetTitle
  //····················································································································

  let selectedSheetTitle_property = EBPropertyProxy_String ()

  //····················································································································

  var selectedSheetTitle : String? {
    get {
      switch self.selectedSheetTitle_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.selectedSheetTitle_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var selectedSheetTitle_property_selection : EBSelection <String> { return self.selectedSheetTitle_property.prop }

  //····················································································································
  //   ToMany proxy: selectedSheetObjects
  //····················································································································

  var selectedSheetObjects_modelDidChangeController : EBSimpleController? = nil
  // var selectedSheetObjects_boundObjectDidChangeController : EBSimpleController? = nil
  let selectedSheetObjects_property = ProxyArrayOf_SchematicObject ()

  //····················································································································

  var selectedSheetObjects : [SchematicObject] {
    get {
      switch self.selectedSheetObjects_property.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }
    set {
      self.selectedSheetObjects_property.setProp (newValue)
    }
  }

  //····················································································································

  var selectedSheetObjects_property_selection : EBSelection <[SchematicObject]> {
    return self.selectedSheetObjects_property.prop
  }

  //····················································································································
  //   To one property: mSelectedSheet
  //····················································································································

   let mSelectedSheet_property = StoredObject_SheetInProject ()

  //····················································································································

  var mSelectedSheet_property_selection : EBSelection <SheetInProject?> {
    return .single (self.mSelectedSheet_property.propval)
  }

  //····················································································································

  var mSelectedSheet : SheetInProject? {
    get {
      return self.mSelectedSheet_property.propval
    }
    set {
      if self.mSelectedSheet_property.propval != nil {
        self.mSelectedSheet_property.setProp (nil)
      }
      if newValue != nil {
        self.mSelectedSheet_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mSelectedSheet_none : StoredObject_SheetInProject { return self.mSelectedSheet_property }

  //····················································································································

  var mSelectedSheet_none_selection : EBSelection <Bool> {
    return .single (self.mSelectedSheet_property.propval == nil)
  }

  //····················································································································
  //   Transient property: selectedSheetIssues
  //····················································································································

  let selectedSheetIssues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  var selectedSheetIssues_property_selection : EBSelection <CanariIssueArray> {
    return self.selectedSheetIssues_property.prop
  }

  //····················································································································

  var selectedSheetIssues : CanariIssueArray? {
    switch self.selectedSheetIssues_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: connectedPoints
  //····················································································································

  let connectedPoints_property = EBTransientProperty_EBShape ()

  //····················································································································

  var connectedPoints_property_selection : EBSelection <EBShape> {
    return self.connectedPoints_property.prop
  }

  //····················································································································

  var connectedPoints : EBShape? {
    switch self.connectedPoints_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: connexionWarningString
  //····················································································································

  let connexionWarningString_property = EBTransientProperty_String ()

  //····················································································································

  var connexionWarningString_property_selection : EBSelection <String> {
    return self.connexionWarningString_property.prop
  }

  //····················································································································

  var connexionWarningString : String? {
    switch self.connexionWarningString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: connexionErrorString
  //····················································································································

  let connexionErrorString_property = EBTransientProperty_String ()

  //····················································································································

  var connexionErrorString_property_selection : EBSelection <String> {
    return self.connexionErrorString_property.prop
  }

  //····················································································································

  var connexionErrorString : String? {
    switch self.connexionErrorString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unplacedSymbols
  //····················································································································

  let unplacedSymbols_property = EBTransientProperty_StringTagArray ()

  //····················································································································

  var unplacedSymbols_property_selection : EBSelection <StringTagArray> {
    return self.unplacedSymbols_property.prop
  }

  //····················································································································

  var unplacedSymbols : StringTagArray? {
    switch self.unplacedSymbols_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netsDescription
  //····················································································································

  let netsDescription_property = EBTransientProperty_NetInfoArray ()

  //····················································································································

  var netsDescription_property_selection : EBSelection <NetInfoArray> {
    return self.netsDescription_property.prop
  }

  //····················································································································

  var netsDescription : NetInfoArray? {
    switch self.netsDescription_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: deviceNames
  //····················································································································

  let deviceNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  var deviceNames_property_selection : EBSelection <StringArray> {
    return self.deviceNames_property.prop
  }

  //····················································································································

  var deviceNames : StringArray? {
    switch self.deviceNames_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: schematicBackgroundDisplay
  //····················································································································

  let schematicBackgroundDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  var schematicBackgroundDisplay_property_selection : EBSelection <EBShape> {
    return self.schematicBackgroundDisplay_property.prop
  }

  //····················································································································

  var schematicBackgroundDisplay : EBShape? {
    switch self.schematicBackgroundDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: schematicStatusMessage
  //····················································································································

  let schematicStatusMessage_property = EBTransientProperty_String ()

  //····················································································································

  var schematicStatusMessage_property_selection : EBSelection <String> {
    return self.schematicStatusMessage_property.prop
  }

  //····················································································································

  var schematicStatusMessage : String? {
    switch self.schematicStatusMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: schematicStatusImage
  //····················································································································

  let schematicStatusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  var schematicStatusImage_property_selection : EBSelection <NSImage> {
    return self.schematicStatusImage_property.prop
  }

  //····················································································································

  var schematicStatusImage : NSImage? {
    switch self.schematicStatusImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- To many property: mSheets (has opposite relationship)
    self.mSheets_property.ebUndoManager = self.ebUndoManager
    self.mSheets_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSelectedSchematicInspector
    self.mSelectedSchematicInspector_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicTitle
    self.mSchematicTitle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicVersion
    self.mSchematicVersion_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicDate
    self.mSchematicDate_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicHorizontalFlip
    self.mSchematicHorizontalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicVerticalFlip
    self.mSchematicVerticalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicZoom
    self.mSchematicZoom_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicGridStyle
    self.mSchematicGridStyle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicGridDisplayFactor
    self.mSchematicGridDisplayFactor_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mComponents (no option)
    self.mComponents_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mNetClasses (no option)
    self.mNetClasses_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mFonts (no option)
    self.mFonts_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mDevices (no option)
    self.mDevices_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSchematicSheetOrientation
    self.mSchematicSheetOrientation_property.ebUndoManager = self.ebUndoManager
  //--- Atomic proxy property: selectedSheetTitle
    self.selectedSheetTitle_property.mReadModelFunction = { [weak self] in
      if let object = self?.mSelectedSheet {
        return .single (object.mSheetTitle)
      }else{
        return .empty
      }
    }
    self.selectedSheetTitle_property.mWriteModelFunction = { [weak self] (_ inValue : String) in
      self?.mSelectedSheet?.mSheetTitle = inValue
    }
    self.selectedSheetTitle_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : String, _ inWindow : NSWindow?) -> Bool in
      return self?.mSelectedSheet?.mSheetTitle_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mSelectedSheet_property.addEBObserverOf_mSheetTitle (self.selectedSheetTitle_property)
  //--- ToMany proxy: selectedSheetObjects
    do{
      let controller = EBSimpleController (
        observedObjects: [self.mSelectedSheet_property],
        callBack: { [weak self] in
          if let me = self, let model = me.mSelectedSheet {
            me.selectedSheetObjects_property.setModel (model.mObjects_property)
          }
        }
      )
      self.mSelectedSheet_property.addEBObserverOf_mObjects (controller)
      self.selectedSheetObjects_modelDidChangeController = controller
    }
  //--- To one property: mSelectedSheet
    self.mSelectedSheet_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: selectedSheetIssues
    self.selectedSheetIssues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSelectedSheet_property.issues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSelectedSheet_property.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_selectedSheetIssues (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSelectedSheet_property.addEBObserverOf_issues (self.selectedSheetIssues_property)
  //--- Atomic property: connectedPoints
    self.connectedPoints_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mSelectedSheet_property.connectedPoints_property_selection.kind ()
        kind &= unwSelf.selectedSheetIssues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSelectedSheet_property.connectedPoints_property_selection, unwSelf.selectedSheetIssues_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ProjectRoot_connectedPoints (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSelectedSheet_property.addEBObserverOf_connectedPoints (self.connectedPoints_property)
    self.selectedSheetIssues_property.addEBObserver (self.connectedPoints_property)
  //--- Atomic property: connexionWarningString
    self.connexionWarningString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSheets_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSheets_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_connexionWarningString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSheets_property.addEBObserverOf_connexionWarnings (self.connexionWarningString_property)
  //--- Atomic property: connexionErrorString
    self.connexionErrorString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSheets_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSheets_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_connexionErrorString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSheets_property.addEBObserverOf_connexionErrors (self.connexionErrorString_property)
  //--- Atomic property: unplacedSymbols
    self.unplacedSymbols_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mComponents_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mComponents_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_unplacedSymbols (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mComponents_property.addEBObserverOf_unplacedSymbols (self.unplacedSymbols_property)
  //--- Atomic property: netsDescription
    self.netsDescription_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNetClasses_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNetClasses_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_netsDescription (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNetClasses_property.addEBObserverOf_netsDescription (self.netsDescription_property)
  //--- Atomic property: deviceNames
    self.deviceNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDevices_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mDevices_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ProjectRoot_deviceNames (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDevices_property.addEBObserverOf_mDeviceName (self.deviceNames_property)
  //--- Atomic property: schematicBackgroundDisplay
    self.schematicBackgroundDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mSchematicTitle_property_selection.kind ()
        kind &= unwSelf.mSchematicVersion_property_selection.kind ()
        kind &= unwSelf.mSchematicSheetOrientation_property_selection.kind ()
        kind &= unwSelf.mSelectedSheet_property.mSheetTitle_property_selection.kind ()
        kind &= unwSelf.mSheets_property_selection.kind ()
        kind &= unwSelf.mSelectedSheet_property_selection.kind ()
        kind &= unwSelf.mSchematicDate_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSchematicTitle_property_selection, unwSelf.mSchematicVersion_property_selection, unwSelf.mSchematicSheetOrientation_property_selection, unwSelf.mSelectedSheet_property.mSheetTitle_property_selection, unwSelf.mSheets_property_selection, unwSelf.mSelectedSheet_property_selection, unwSelf.mSchematicDate_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6)) :
            return .single (transient_ProjectRoot_schematicBackgroundDisplay (v0, v1, v2, v3, v4, v5, v6))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSchematicTitle_property.addEBObserver (self.schematicBackgroundDisplay_property)
    self.mSchematicVersion_property.addEBObserver (self.schematicBackgroundDisplay_property)
    self.mSchematicSheetOrientation_property.addEBObserver (self.schematicBackgroundDisplay_property)
    self.mSelectedSheet_property.addEBObserverOf_mSheetTitle (self.schematicBackgroundDisplay_property)
    self.mSheets_property.addEBObserver (self.schematicBackgroundDisplay_property)
    self.mSelectedSheet_property.addEBObserver (self.schematicBackgroundDisplay_property)
    self.mSchematicDate_property.addEBObserver (self.schematicBackgroundDisplay_property)
  //--- Atomic property: schematicStatusMessage
    self.schematicStatusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.unplacedSymbols_property_selection.kind ()
        kind &= unwSelf.mSheets_property_selection.kind ()
        kind &= unwSelf.mSheets_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.unplacedSymbols_property_selection, unwSelf.mSheets_property_selection, unwSelf.mSheets_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_ProjectRoot_schematicStatusMessage (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.unplacedSymbols_property.addEBObserver (self.schematicStatusMessage_property)
    self.mSheets_property.addEBObserverOf_connexionWarnings (self.schematicStatusMessage_property)
    self.mSheets_property.addEBObserverOf_connexionErrors (self.schematicStatusMessage_property)
  //--- Atomic property: schematicStatusImage
    self.schematicStatusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.unplacedSymbols_property_selection.kind ()
        kind &= unwSelf.mSheets_property_selection.kind ()
        kind &= unwSelf.mSheets_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.unplacedSymbols_property_selection, unwSelf.mSheets_property_selection, unwSelf.mSheets_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_ProjectRoot_schematicStatusImage (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.unplacedSymbols_property.addEBObserver (self.schematicStatusImage_property)
    self.mSheets_property.addEBObserverOf_connexionWarnings (self.schematicStatusImage_property)
    self.mSheets_property.addEBObserverOf_connexionErrors (self.schematicStatusImage_property)
  //--- Install undoers and opposite setter for relationships
    self.mSheets_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- Atomic proxy property: selectedSheetTitle
    self.selectedSheetTitle_property.mReadModelFunction = nil
    self.selectedSheetTitle_property.mWriteModelFunction = nil
    self.selectedSheetTitle_property.mValidateAndWriteModelFunction = nil
    self.mSelectedSheet_property.removeEBObserverOf_mSheetTitle (self.selectedSheetTitle_property)
  //--- ToMany proxy: selectedSheetObjects
    self.selectedSheetObjects_property.setModel (nil)
    self.selectedSheetObjects_modelDidChangeController?.unregister ()
    self.selectedSheetObjects_modelDidChangeController = nil
    self.mSelectedSheet_property.removeEBObserverOf_issues (self.selectedSheetIssues_property)
    self.mSelectedSheet_property.removeEBObserverOf_connectedPoints (self.connectedPoints_property)
    self.selectedSheetIssues_property.removeEBObserver (self.connectedPoints_property)
    self.mSheets_property.removeEBObserverOf_connexionWarnings (self.connexionWarningString_property)
    self.mSheets_property.removeEBObserverOf_connexionErrors (self.connexionErrorString_property)
    self.mComponents_property.removeEBObserverOf_unplacedSymbols (self.unplacedSymbols_property)
    self.mNetClasses_property.removeEBObserverOf_netsDescription (self.netsDescription_property)
    self.mDevices_property.removeEBObserverOf_mDeviceName (self.deviceNames_property)
    self.mSchematicTitle_property.removeEBObserver (self.schematicBackgroundDisplay_property)
    self.mSchematicVersion_property.removeEBObserver (self.schematicBackgroundDisplay_property)
    self.mSchematicSheetOrientation_property.removeEBObserver (self.schematicBackgroundDisplay_property)
    self.mSelectedSheet_property.removeEBObserverOf_mSheetTitle (self.schematicBackgroundDisplay_property)
    self.mSheets_property.removeEBObserver (self.schematicBackgroundDisplay_property)
    self.mSelectedSheet_property.removeEBObserver (self.schematicBackgroundDisplay_property)
    self.mSchematicDate_property.removeEBObserver (self.schematicBackgroundDisplay_property)
    self.unplacedSymbols_property.removeEBObserver (self.schematicStatusMessage_property)
    self.mSheets_property.removeEBObserverOf_connexionWarnings (self.schematicStatusMessage_property)
    self.mSheets_property.removeEBObserverOf_connexionErrors (self.schematicStatusMessage_property)
    self.unplacedSymbols_property.removeEBObserver (self.schematicStatusImage_property)
    self.mSheets_property.removeEBObserverOf_connexionWarnings (self.schematicStatusImage_property)
    self.mSheets_property.removeEBObserverOf_connexionErrors (self.schematicStatusImage_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mSelectedPageIndex",
      idx: self.mSelectedPageIndex_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSelectedPageIndex_property.mObserverExplorer,
      valueExplorer: &self.mSelectedPageIndex_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSelectedSchematicInspector",
      idx: self.mSelectedSchematicInspector_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSelectedSchematicInspector_property.mObserverExplorer,
      valueExplorer: &self.mSelectedSchematicInspector_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicTitle",
      idx: self.mSchematicTitle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicTitle_property.mObserverExplorer,
      valueExplorer: &self.mSchematicTitle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicVersion",
      idx: self.mSchematicVersion_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicVersion_property.mObserverExplorer,
      valueExplorer: &self.mSchematicVersion_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicDate",
      idx: self.mSchematicDate_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicDate_property.mObserverExplorer,
      valueExplorer: &self.mSchematicDate_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicHorizontalFlip",
      idx: self.mSchematicHorizontalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicHorizontalFlip_property.mObserverExplorer,
      valueExplorer: &self.mSchematicHorizontalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicVerticalFlip",
      idx: self.mSchematicVerticalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicVerticalFlip_property.mObserverExplorer,
      valueExplorer: &self.mSchematicVerticalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicZoom",
      idx: self.mSchematicZoom_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicZoom_property.mObserverExplorer,
      valueExplorer: &self.mSchematicZoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicGridStyle",
      idx: self.mSchematicGridStyle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicGridStyle_property.mObserverExplorer,
      valueExplorer: &self.mSchematicGridStyle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicGridDisplayFactor",
      idx: self.mSchematicGridDisplayFactor_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicGridDisplayFactor_property.mObserverExplorer,
      valueExplorer: &self.mSchematicGridDisplayFactor_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSchematicSheetOrientation",
      idx: self.mSchematicSheetOrientation_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSchematicSheetOrientation_property.mObserverExplorer,
      valueExplorer: &self.mSchematicSheetOrientation_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "selectedSheetIssues",
      idx: self.selectedSheetIssues_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectedSheetIssues_property.mObserverExplorer,
      valueExplorer: &self.selectedSheetIssues_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "connectedPoints",
      idx: self.connectedPoints_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.connectedPoints_property.mObserverExplorer,
      valueExplorer: &self.connectedPoints_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "connexionWarningString",
      idx: self.connexionWarningString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.connexionWarningString_property.mObserverExplorer,
      valueExplorer: &self.connexionWarningString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "connexionErrorString",
      idx: self.connexionErrorString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.connexionErrorString_property.mObserverExplorer,
      valueExplorer: &self.connexionErrorString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "unplacedSymbols",
      idx: self.unplacedSymbols_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.unplacedSymbols_property.mObserverExplorer,
      valueExplorer: &self.unplacedSymbols_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netsDescription",
      idx: self.netsDescription_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netsDescription_property.mObserverExplorer,
      valueExplorer: &self.netsDescription_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "deviceNames",
      idx: self.deviceNames_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.deviceNames_property.mObserverExplorer,
      valueExplorer: &self.deviceNames_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "schematicBackgroundDisplay",
      idx: self.schematicBackgroundDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.schematicBackgroundDisplay_property.mObserverExplorer,
      valueExplorer: &self.schematicBackgroundDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "schematicStatusMessage",
      idx: self.schematicStatusMessage_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.schematicStatusMessage_property.mObserverExplorer,
      valueExplorer: &self.schematicStatusMessage_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "schematicStatusImage",
      idx: self.schematicStatusImage_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.schematicStatusImage_property.mObserverExplorer,
      valueExplorer: &self.schematicStatusImage_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "mSheets",
      idx:mSheets_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mSheets_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mComponents",
      idx:mComponents_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mComponents_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mNetClasses",
      idx:mNetClasses_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mNetClasses_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mFonts",
      idx:mFonts_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mFonts_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mDevices",
      idx:mDevices_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mDevices_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "mSelectedSheet",
      idx:self.mSelectedSheet_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mSelectedSheet_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- To many property: mSheets
    self.mSheets_property.mValueExplorer = nil
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.mObserverExplorer = nil
    self.mSelectedPageIndex_property.mValueExplorer = nil
  //--- Atomic property: mSelectedSchematicInspector
    self.mSelectedSchematicInspector_property.mObserverExplorer = nil
    self.mSelectedSchematicInspector_property.mValueExplorer = nil
  //--- Atomic property: mSchematicTitle
    self.mSchematicTitle_property.mObserverExplorer = nil
    self.mSchematicTitle_property.mValueExplorer = nil
  //--- Atomic property: mSchematicVersion
    self.mSchematicVersion_property.mObserverExplorer = nil
    self.mSchematicVersion_property.mValueExplorer = nil
  //--- Atomic property: mSchematicDate
    self.mSchematicDate_property.mObserverExplorer = nil
    self.mSchematicDate_property.mValueExplorer = nil
  //--- Atomic property: mSchematicHorizontalFlip
    self.mSchematicHorizontalFlip_property.mObserverExplorer = nil
    self.mSchematicHorizontalFlip_property.mValueExplorer = nil
  //--- Atomic property: mSchematicVerticalFlip
    self.mSchematicVerticalFlip_property.mObserverExplorer = nil
    self.mSchematicVerticalFlip_property.mValueExplorer = nil
  //--- Atomic property: mSchematicZoom
    self.mSchematicZoom_property.mObserverExplorer = nil
    self.mSchematicZoom_property.mValueExplorer = nil
  //--- Atomic property: mSchematicGridStyle
    self.mSchematicGridStyle_property.mObserverExplorer = nil
    self.mSchematicGridStyle_property.mValueExplorer = nil
  //--- Atomic property: mSchematicGridDisplayFactor
    self.mSchematicGridDisplayFactor_property.mObserverExplorer = nil
    self.mSchematicGridDisplayFactor_property.mValueExplorer = nil
  //--- To many property: mComponents
    self.mComponents_property.mValueExplorer = nil
  //--- To many property: mNetClasses
    self.mNetClasses_property.mValueExplorer = nil
  //--- To many property: mFonts
    self.mFonts_property.mValueExplorer = nil
  //--- To many property: mDevices
    self.mDevices_property.mValueExplorer = nil
  //--- Atomic property: mSchematicSheetOrientation
    self.mSchematicSheetOrientation_property.mObserverExplorer = nil
    self.mSchematicSheetOrientation_property.mValueExplorer = nil
  //--- Atomic proxy property: selectedSheetTitle
    self.selectedSheetTitle_property.mObserverExplorer = nil
    self.selectedSheetTitle_property.mValueExplorer = nil
  //--- ToMany proxy: selectedSheetObjects
    self.selectedSheetObjects_property.mObserverExplorer = nil
  //--- To one property: mSelectedSheet
    self.mSelectedSheet_property.mObserverExplorer = nil
    self.mSelectedSheet_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mSheets = []
    self.mComponents = []
    self.mNetClasses = []
    self.mFonts = []
    self.mDevices = []
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mSelectedSheet = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- To many property: mSheets
    self.store (
      managedObjectArray: self.mSheets_property.propval,
      relationshipName: "mSheets",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.storeIn (dictionary: ioDictionary, forKey:"mSelectedPageIndex")
  //--- Atomic property: mSelectedSchematicInspector
    self.mSelectedSchematicInspector_property.storeIn (dictionary: ioDictionary, forKey:"mSelectedSchematicInspector")
  //--- Atomic property: mSchematicTitle
    self.mSchematicTitle_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicTitle")
  //--- Atomic property: mSchematicVersion
    self.mSchematicVersion_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicVersion")
  //--- Atomic property: mSchematicDate
    self.mSchematicDate_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicDate")
  //--- Atomic property: mSchematicHorizontalFlip
    self.mSchematicHorizontalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicHorizontalFlip")
  //--- Atomic property: mSchematicVerticalFlip
    self.mSchematicVerticalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicVerticalFlip")
  //--- Atomic property: mSchematicZoom
    self.mSchematicZoom_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicZoom")
  //--- Atomic property: mSchematicGridStyle
    self.mSchematicGridStyle_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicGridStyle")
  //--- Atomic property: mSchematicGridDisplayFactor
    self.mSchematicGridDisplayFactor_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicGridDisplayFactor")
  //--- To many property: mComponents
    self.store (
      managedObjectArray: self.mComponents_property.propval,
      relationshipName: "mComponents",
      intoDictionary: ioDictionary
    )
  //--- To many property: mNetClasses
    self.store (
      managedObjectArray: self.mNetClasses_property.propval,
      relationshipName: "mNetClasses",
      intoDictionary: ioDictionary
    )
  //--- To many property: mFonts
    self.store (
      managedObjectArray: self.mFonts_property.propval,
      relationshipName: "mFonts",
      intoDictionary: ioDictionary
    )
  //--- To many property: mDevices
    self.store (
      managedObjectArray: self.mDevices_property.propval,
      relationshipName: "mDevices",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: mSchematicSheetOrientation
    self.mSchematicSheetOrientation_property.storeIn (dictionary: ioDictionary, forKey:"mSchematicSheetOrientation")
  //--- To one property: mSelectedSheet
    self.store (managedObject:self.mSelectedSheet_property.propval,
      relationshipName: "mSelectedSheet",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mSheets
    self.mSheets_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mSheets",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SheetInProject])
  //--- To many property: mComponents
    self.mComponents_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mComponents",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [ComponentInProject])
  //--- To many property: mNetClasses
    self.mNetClasses_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mNetClasses",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [NetClassInProject])
  //--- To many property: mFonts
    self.mFonts_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mFonts",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [FontInProject])
  //--- To many property: mDevices
    self.mDevices_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mDevices",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [DeviceInProject])
  //--- To one property: mSelectedSheet
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mSelectedSheet",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? SheetInProject {
        self.mSelectedSheet_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.readFrom (dictionary: inDictionary, forKey:"mSelectedPageIndex")
  //--- Atomic property: mSelectedSchematicInspector
    self.mSelectedSchematicInspector_property.readFrom (dictionary: inDictionary, forKey:"mSelectedSchematicInspector")
  //--- Atomic property: mSchematicTitle
    self.mSchematicTitle_property.readFrom (dictionary: inDictionary, forKey:"mSchematicTitle")
  //--- Atomic property: mSchematicVersion
    self.mSchematicVersion_property.readFrom (dictionary: inDictionary, forKey:"mSchematicVersion")
  //--- Atomic property: mSchematicDate
    self.mSchematicDate_property.readFrom (dictionary: inDictionary, forKey:"mSchematicDate")
  //--- Atomic property: mSchematicHorizontalFlip
    self.mSchematicHorizontalFlip_property.readFrom (dictionary: inDictionary, forKey:"mSchematicHorizontalFlip")
  //--- Atomic property: mSchematicVerticalFlip
    self.mSchematicVerticalFlip_property.readFrom (dictionary: inDictionary, forKey:"mSchematicVerticalFlip")
  //--- Atomic property: mSchematicZoom
    self.mSchematicZoom_property.readFrom (dictionary: inDictionary, forKey:"mSchematicZoom")
  //--- Atomic property: mSchematicGridStyle
    self.mSchematicGridStyle_property.readFrom (dictionary: inDictionary, forKey:"mSchematicGridStyle")
  //--- Atomic property: mSchematicGridDisplayFactor
    self.mSchematicGridDisplayFactor_property.readFrom (dictionary: inDictionary, forKey:"mSchematicGridDisplayFactor")
  //--- Atomic property: mSchematicSheetOrientation
    self.mSchematicSheetOrientation_property.readFrom (dictionary: inDictionary, forKey:"mSchematicSheetOrientation")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mSheets
    for managedObject in self.mSheets {
      objects.append (managedObject)
    }
  //--- To many property: mComponents
    for managedObject in self.mComponents {
      objects.append (managedObject)
    }
  //--- To many property: mNetClasses
    for managedObject in self.mNetClasses {
      objects.append (managedObject)
    }
  //--- To many property: mFonts
    for managedObject in self.mFonts {
      objects.append (managedObject)
    }
  //--- To many property: mDevices
    for managedObject in self.mDevices {
      objects.append (managedObject)
    }
  //--- To one property: mSelectedSheet
    if let object = self.mSelectedSheet {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mSheets
    for managedObject in self.mSheets {
      objects.append (managedObject)
    }
  //--- To many property: mComponents
    for managedObject in self.mComponents {
      objects.append (managedObject)
    }
  //--- To many property: mNetClasses
    for managedObject in self.mNetClasses {
      objects.append (managedObject)
    }
  //--- To many property: mFonts
    for managedObject in self.mFonts {
      objects.append (managedObject)
    }
  //--- To many property: mDevices
    for managedObject in self.mDevices {
      objects.append (managedObject)
    }
  //--- To one property: mSelectedSheet
    if let object = self.mSelectedSheet {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

