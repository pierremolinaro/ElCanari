//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_BorderCurve 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_BorderCurve : ReadOnlyAbstractObjectProperty <BorderCurve> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : BorderCurve?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.mX_property.removeEBObserversFrom (&self.mObserversOf_mX) // Stored property
    inOldValue?.mY_property.removeEBObserversFrom (&self.mObserversOf_mY) // Stored property
    inOldValue?.mCPX1_property.removeEBObserversFrom (&self.mObserversOf_mCPX1) // Stored property
    inOldValue?.mCPY1_property.removeEBObserversFrom (&self.mObserversOf_mCPY1) // Stored property
    inOldValue?.mCPX2_property.removeEBObserversFrom (&self.mObserversOf_mCPX2) // Stored property
    inOldValue?.mCPY2_property.removeEBObserversFrom (&self.mObserversOf_mCPY2) // Stored property
    inOldValue?.mShape_property.removeEBObserversFrom (&self.mObserversOf_mShape) // Stored property
    inOldValue?.p2Xstring_property.removeEBObserversFrom (&self.mObserversOf_p2Xstring) // Transient property
    inOldValue?.p2Ystring_property.removeEBObserversFrom (&self.mObserversOf_p2Ystring) // Transient property
    inOldValue?.descriptor_property.removeEBObserversFrom (&self.mObserversOf_descriptor) // Transient property
    inOldValue?.objectDisplay_property.removeEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
    inOldValue?.isLine_property.removeEBObserversFrom (&self.mObserversOf_isLine) // Transient property
    inOldValue?.selectionDisplay_property.removeEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.mX_property.addEBObserversFrom (&self.mObserversOf_mX) // Stored property
    self.mInternalValue?.mY_property.addEBObserversFrom (&self.mObserversOf_mY) // Stored property
    self.mInternalValue?.mCPX1_property.addEBObserversFrom (&self.mObserversOf_mCPX1) // Stored property
    self.mInternalValue?.mCPY1_property.addEBObserversFrom (&self.mObserversOf_mCPY1) // Stored property
    self.mInternalValue?.mCPX2_property.addEBObserversFrom (&self.mObserversOf_mCPX2) // Stored property
    self.mInternalValue?.mCPY2_property.addEBObserversFrom (&self.mObserversOf_mCPY2) // Stored property
    self.mInternalValue?.mShape_property.addEBObserversFrom (&self.mObserversOf_mShape) // Stored property
    self.mInternalValue?.p2Xstring_property.addEBObserversFrom (&self.mObserversOf_p2Xstring) // Transient property
    self.mInternalValue?.p2Ystring_property.addEBObserversFrom (&self.mObserversOf_p2Ystring) // Transient property
    self.mInternalValue?.descriptor_property.addEBObserversFrom (&self.mObserversOf_descriptor) // Transient property
    self.mInternalValue?.objectDisplay_property.addEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
    self.mInternalValue?.isLine_property.addEBObserversFrom (&self.mObserversOf_isLine) // Transient property
    self.mInternalValue?.selectionDisplay_property.addEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  var mX_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mX_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mX.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mX_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mX.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mX_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mX_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_mX.apply { (_ observer : EBEvent) in
        managedObject.mX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    self.mObserversOf_mX.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private var mObserversOf_mY = EBWeakEventSet ()

  //····················································································································

  var mY_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mY_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mY.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mY_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mY.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mY_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mY_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_mY.apply { (_ observer : EBEvent) in
        managedObject.mY_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mY_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    self.mObserversOf_mY.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mCPX1' stored property
  //····················································································································

  private var mObserversOf_mCPX1 = EBWeakEventSet ()

  //····················································································································

  var mCPX1_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mCPX1_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mCPX1 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCPX1.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mCPX1_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCPX1 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCPX1.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mCPX1_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mCPX1_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_mCPX1.apply { (_ observer : EBEvent) in
        managedObject.mCPX1_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCPX1_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    self.mObserversOf_mCPX1.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mCPX1_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mCPY1' stored property
  //····················································································································

  private var mObserversOf_mCPY1 = EBWeakEventSet ()

  //····················································································································

  var mCPY1_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mCPY1_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mCPY1 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCPY1.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mCPY1_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCPY1 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCPY1.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mCPY1_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mCPY1_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_mCPY1.apply { (_ observer : EBEvent) in
        managedObject.mCPY1_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCPY1_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    self.mObserversOf_mCPY1.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mCPY1_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mCPX2' stored property
  //····················································································································

  private var mObserversOf_mCPX2 = EBWeakEventSet ()

  //····················································································································

  var mCPX2_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mCPX2_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mCPX2 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCPX2.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mCPX2_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCPX2 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCPX2.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mCPX2_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mCPX2_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_mCPX2.apply { (_ observer : EBEvent) in
        managedObject.mCPX2_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCPX2_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    self.mObserversOf_mCPX2.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mCPX2_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mCPY2' stored property
  //····················································································································

  private var mObserversOf_mCPY2 = EBWeakEventSet ()

  //····················································································································

  var mCPY2_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mCPY2_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mCPY2 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCPY2.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mCPY2_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCPY2 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCPY2.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mCPY2_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mCPY2_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_mCPY2.apply { (_ observer : EBEvent) in
        managedObject.mCPY2_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCPY2_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    self.mObserversOf_mCPY2.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mCPY2_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mShape' stored property
  //····················································································································

  private var mObserversOf_mShape = EBWeakEventSet ()

  //····················································································································

  var mShape_property_selection : EBSelection <BorderCurveShape?> {
    if let model = self.propval {
      switch (model.mShape_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mShape (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mShape.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mShape_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShape (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mShape.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mShape_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mShape_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_mShape.apply { (_ observer : EBEvent) in
        managedObject.mShape_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mShape_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    self.mObserversOf_mShape.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mShape_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'p2Xstring' transient property
  //····················································································································

  private var mObserversOf_p2Xstring = EBWeakEventSet ()

  //····················································································································

  var p2Xstring_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.p2Xstring_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_p2Xstring (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_p2Xstring.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.p2Xstring_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_p2Xstring (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_p2Xstring.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.p2Xstring_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_p2Xstring_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_p2Xstring.apply { (_ observer : EBEvent) in
        managedObject.p2Xstring_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_p2Xstring_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_p2Xstring.apply { (_ observer : EBEvent) in
        managedObject.p2Xstring_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'p2Ystring' transient property
  //····················································································································

  private var mObserversOf_p2Ystring = EBWeakEventSet ()

  //····················································································································

  var p2Ystring_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.p2Ystring_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_p2Ystring (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_p2Ystring.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.p2Ystring_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_p2Ystring (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_p2Ystring.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.p2Ystring_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_p2Ystring_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_p2Ystring.apply { (_ observer : EBEvent) in
        managedObject.p2Ystring_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_p2Ystring_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_p2Ystring.apply { (_ observer : EBEvent) in
        managedObject.p2Ystring_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'descriptor' transient property
  //····················································································································

  private var mObserversOf_descriptor = EBWeakEventSet ()

  //····················································································································

  var descriptor_property_selection : EBSelection <BorderCurveDescriptor?> {
    if let model = self.propval {
      switch (model.descriptor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_descriptor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_descriptor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.descriptor_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_descriptor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_descriptor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.descriptor_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_descriptor_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_descriptor.apply { (_ observer : EBEvent) in
        managedObject.descriptor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_descriptor_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_descriptor.apply { (_ observer : EBEvent) in
        managedObject.descriptor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  var objectDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.objectDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'isLine' transient property
  //····················································································································

  private var mObserversOf_isLine = EBWeakEventSet ()

  //····················································································································

  var isLine_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.isLine_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_isLine (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_isLine.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.isLine_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_isLine (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_isLine.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.isLine_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_isLine_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_isLine.apply { (_ observer : EBEvent) in
        managedObject.isLine_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_isLine_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_isLine.apply { (_ observer : EBEvent) in
        managedObject.isLine_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  var selectionDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.selectionDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<BorderCurve>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientObject BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientObject_BorderCurve : ReadOnlyObject_BorderCurve {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_BorderCurve? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_BorderCurve?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : BorderCurve? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < BorderCurve? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : BorderCurve? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_BorderCurve : ReadOnlyObject_BorderCurve {

  //····················································································································
 
  func setProp (_ inValue : BorderCurve?) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_BorderCurve
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_BorderCurve : ReadWriteObject_BorderCurve {

  //····················································································································

  private var mModel : ReadWriteObject_BorderCurve? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_BorderCurve?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : BorderCurve?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : BorderCurve?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < BorderCurve? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : BorderCurve? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_BorderCurve 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_BorderCurve : ReadWriteObject_BorderCurve, EBSignatureObserverProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : BorderCurve) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : BorderCurve) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BorderCurve) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : BorderCurve) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : BorderCurve?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : BorderCurve?) {
    self.mInternalValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < BorderCurve? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : BorderCurve?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : BorderCurve? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

