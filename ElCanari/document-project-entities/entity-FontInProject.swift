//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontInProject_mFontName : class {
  var mFontName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontInProject_mFontVersion : class {
  var mFontVersion : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontInProject_mDescriptiveString : class {
  var mDescriptiveString : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontInProject_versionString : class {
  var versionString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol FontInProject_sizeString : class {
  var sizeString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: FontInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class FontInProject : EBManagedObject,
         FontInProject_mFontName,
         FontInProject_mFontVersion,
         FontInProject_mDescriptiveString,
         FontInProject_versionString,
         FontInProject_sizeString {

  //····················································································································
  //   Atomic property: mFontName
  //····················································································································

  let mFontName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mFontName : String {
    get { return self.mFontName_property.propval }
    set { self.mFontName_property.setProp (newValue) }
  }

  //····················································································································

  var mFontName_property_selection : EBSelection <String> { return self.mFontName_property.prop }

  //····················································································································
  //   Atomic property: mFontVersion
  //····················································································································

  let mFontVersion_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mFontVersion : Int {
    get { return self.mFontVersion_property.propval }
    set { self.mFontVersion_property.setProp (newValue) }
  }

  //····················································································································

  var mFontVersion_property_selection : EBSelection <Int> { return self.mFontVersion_property.prop }

  //····················································································································
  //   Atomic property: mDescriptiveString
  //····················································································································

  let mDescriptiveString_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mDescriptiveString : String {
    get { return self.mDescriptiveString_property.propval }
    set { self.mDescriptiveString_property.setProp (newValue) }
  }

  //····················································································································

  var mDescriptiveString_property_selection : EBSelection <String> { return self.mDescriptiveString_property.prop }

  //····················································································································
  //   Transient property: versionString
  //····················································································································

  let versionString_property = EBTransientProperty_String ()

  //····················································································································

  var versionString_property_selection : EBSelection <String> {
    return self.versionString_property.prop
  }

  //····················································································································

  var versionString : String? {
    switch self.versionString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: sizeString
  //····················································································································

  let sizeString_property = EBTransientProperty_String ()

  //····················································································································

  var sizeString_property_selection : EBSelection <String> {
    return self.sizeString_property.prop
  }

  //····················································································································

  var sizeString : String? {
    switch self.sizeString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mFontName
    self.mFontName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mFontVersion
    self.mFontVersion_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mDescriptiveString
    self.mDescriptiveString_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: versionString
    self.versionString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mFontVersion_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mFontVersion_property_selection) {
          case (.single (let v0)) :
            return .single (transient_FontInProject_versionString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mFontVersion_property.addEBObserver (self.versionString_property)
  //--- Atomic property: sizeString
    self.sizeString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDescriptiveString_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mDescriptiveString_property_selection) {
          case (.single (let v0)) :
            return .single (transient_FontInProject_sizeString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDescriptiveString_property.addEBObserver (self.sizeString_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mFontVersion_property.removeEBObserver (self.versionString_property)
    self.mDescriptiveString_property.removeEBObserver (self.sizeString_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mFontName",
      idx: self.mFontName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mFontName_property.mObserverExplorer,
      valueExplorer: &self.mFontName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mFontVersion",
      idx: self.mFontVersion_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mFontVersion_property.mObserverExplorer,
      valueExplorer: &self.mFontVersion_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDescriptiveString",
      idx: self.mDescriptiveString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDescriptiveString_property.mObserverExplorer,
      valueExplorer: &self.mDescriptiveString_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "versionString",
      idx: self.versionString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.versionString_property.mObserverExplorer,
      valueExplorer: &self.versionString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "sizeString",
      idx: self.sizeString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.sizeString_property.mObserverExplorer,
      valueExplorer: &self.sizeString_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mFontName
    self.mFontName_property.mObserverExplorer = nil
    self.mFontName_property.mValueExplorer = nil
  //--- Atomic property: mFontVersion
    self.mFontVersion_property.mObserverExplorer = nil
    self.mFontVersion_property.mValueExplorer = nil
  //--- Atomic property: mDescriptiveString
    self.mDescriptiveString_property.mObserverExplorer = nil
    self.mDescriptiveString_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mFontName
    self.mFontName_property.storeIn (dictionary: ioDictionary, forKey:"mFontName")
  //--- Atomic property: mFontVersion
    self.mFontVersion_property.storeIn (dictionary: ioDictionary, forKey:"mFontVersion")
  //--- Atomic property: mDescriptiveString
    self.mDescriptiveString_property.storeIn (dictionary: ioDictionary, forKey:"mDescriptiveString")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mFontName
    self.mFontName_property.readFrom (dictionary: inDictionary, forKey:"mFontName")
  //--- Atomic property: mFontVersion
    self.mFontVersion_property.readFrom (dictionary: inDictionary, forKey:"mFontVersion")
  //--- Atomic property: mDescriptiveString
    self.mDescriptiveString_property.readFrom (dictionary: inDictionary, forKey:"mDescriptiveString")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

