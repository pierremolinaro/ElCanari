//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PointInSchematics_mSymbolPinName : class {
  var mSymbolPinName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PointInSchematics_mX : class {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PointInSchematics_mY : class {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PointInSchematics_location : class {
  var location : CanariPoint? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PointInSchematics_netName : class {
  var netName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PointInSchematics_canMove : class {
  var canMove : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PointInSchematics_wireColor : class {
  var wireColor : NSColor? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PointInSchematics_isConnected : class {
  var isConnected : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PointInSchematics_status : class {
  var status : SchematicPointStatus? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PointInSchematics_connectedPoints : class {
  var connectedPoints : CanariPointArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PointInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class PointInSchematics : EBManagedObject,
         PointInSchematics_mSymbolPinName,
         PointInSchematics_mX,
         PointInSchematics_mY,
         PointInSchematics_location,
         PointInSchematics_netName,
         PointInSchematics_canMove,
         PointInSchematics_wireColor,
         PointInSchematics_isConnected,
         PointInSchematics_status,
         PointInSchematics_connectedPoints {

  //····················································································································
  //   Atomic property: mSymbolPinName
  //····················································································································

  let mSymbolPinName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mSymbolPinName : String {
    get { return self.mSymbolPinName_property.propval }
    set { self.mSymbolPinName_property.setProp (newValue) }
  }

  //····················································································································

  var mSymbolPinName_property_selection : EBSelection <String> { return self.mSymbolPinName_property.prop }

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  let mX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································

  var mX_property_selection : EBSelection <Int> { return self.mX_property.prop }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  let mY_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································

  var mY_property_selection : EBSelection <Int> { return self.mY_property.prop }

  //····················································································································
  //   To many property: mWiresP2s
  //····················································································································

  let mWiresP2s_property = StoredArrayOf_WireInSchematics ()

  //····················································································································

  var mWiresP2s_property_selection : EBSelection < [WireInSchematics] > {
    return self.mWiresP2s_property.prop
  }

  //····················································································································

  var mWiresP2s : [WireInSchematics] {
    get { return self.mWiresP2s_property.propval }
    set { self.mWiresP2s_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mLabels
  //····················································································································

  let mLabels_property = StoredArrayOf_LabelInSchematics ()

  //····················································································································

  var mLabels_property_selection : EBSelection < [LabelInSchematics] > {
    return self.mLabels_property.prop
  }

  //····················································································································

  var mLabels : [LabelInSchematics] {
    get { return self.mLabels_property.propval }
    set { self.mLabels_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mWiresP1s
  //····················································································································

  let mWiresP1s_property = StoredArrayOf_WireInSchematics ()

  //····················································································································

  var mWiresP1s_property_selection : EBSelection < [WireInSchematics] > {
    return self.mWiresP1s_property.prop
  }

  //····················································································································

  var mWiresP1s : [WireInSchematics] {
    get { return self.mWiresP1s_property.propval }
    set { self.mWiresP1s_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: mSymbol
  //····················································································································

   let mSymbol_property = StoredObject_ComponentSymbolInProject ()

  //····················································································································

  var mSymbol_property_selection : EBSelection <ComponentSymbolInProject?> {
    return .single (self.mSymbol_property.propval)
  }

  //····················································································································

  var mSymbol : ComponentSymbolInProject? {
    get {
      return self.mSymbol_property.propval
    }
    set {
      if self.mSymbol_property.propval != nil {
        self.mSymbol_property.setProp (nil)
      }
      if newValue != nil {
        self.mSymbol_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mSymbol_none : StoredObject_ComponentSymbolInProject { return self.mSymbol_property }

  //····················································································································

  var mSymbol_none_selection : EBSelection <Bool> {
    return .single (self.mSymbol_property.propval == nil)
  }

  //····················································································································
  //   To one property: mNet
  //····················································································································

   let mNet_property = StoredObject_NetInProject ()

  //····················································································································

  var mNet_property_selection : EBSelection <NetInProject?> {
    return .single (self.mNet_property.propval)
  }

  //····················································································································

  var mNet : NetInProject? {
    get {
      return self.mNet_property.propval
    }
    set {
      if self.mNet_property.propval != nil {
        self.mNet_property.setProp (nil)
      }
      if newValue != nil {
        self.mNet_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mNet_none : StoredObject_NetInProject { return self.mNet_property }

  //····················································································································

  var mNet_none_selection : EBSelection <Bool> {
    return .single (self.mNet_property.propval == nil)
  }

  //····················································································································
  //   Transient property: location
  //····················································································································

  let location_property = EBTransientProperty_CanariPoint ()

  //····················································································································

  var location_property_selection : EBSelection <CanariPoint> {
    return self.location_property.prop
  }

  //····················································································································

  var location : CanariPoint? {
    switch self.location_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netName
  //····················································································································

  let netName_property = EBTransientProperty_String ()

  //····················································································································

  var netName_property_selection : EBSelection <String> {
    return self.netName_property.prop
  }

  //····················································································································

  var netName : String? {
    switch self.netName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canMove
  //····················································································································

  let canMove_property = EBTransientProperty_Bool ()

  //····················································································································

  var canMove_property_selection : EBSelection <Bool> {
    return self.canMove_property.prop
  }

  //····················································································································

  var canMove : Bool? {
    switch self.canMove_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: wireColor
  //····················································································································

  let wireColor_property = EBTransientProperty_NSColor ()

  //····················································································································

  var wireColor_property_selection : EBSelection <NSColor> {
    return self.wireColor_property.prop
  }

  //····················································································································

  var wireColor : NSColor? {
    switch self.wireColor_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   To one property: mNC
  //····················································································································

   let mNC_property = StoredObject_NCInSchematics ()

  //····················································································································

  var mNC_property_selection : EBSelection <NCInSchematics?> {
    return .single (self.mNC_property.propval)
  }

  //····················································································································

  var mNC : NCInSchematics? {
    get {
      return self.mNC_property.propval
    }
    set {
      if self.mNC_property.propval != nil {
        self.mNC_property.setProp (nil)
      }
      if newValue != nil {
        self.mNC_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mNC_none : StoredObject_NCInSchematics { return self.mNC_property }

  //····················································································································

  var mNC_none_selection : EBSelection <Bool> {
    return .single (self.mNC_property.propval == nil)
  }

  //····················································································································
  //   Transient property: isConnected
  //····················································································································

  let isConnected_property = EBTransientProperty_Bool ()

  //····················································································································

  var isConnected_property_selection : EBSelection <Bool> {
    return self.isConnected_property.prop
  }

  //····················································································································

  var isConnected : Bool? {
    switch self.isConnected_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: status
  //····················································································································

  let status_property = EBTransientProperty_SchematicPointStatus ()

  //····················································································································

  var status_property_selection : EBSelection <SchematicPointStatus> {
    return self.status_property.prop
  }

  //····················································································································

  var status : SchematicPointStatus? {
    switch self.status_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: connectedPoints
  //····················································································································

  let connectedPoints_property = EBTransientProperty_CanariPointArray ()

  //····················································································································

  var connectedPoints_property_selection : EBSelection <CanariPointArray> {
    return self.connectedPoints_property.prop
  }

  //····················································································································

  var connectedPoints : CanariPointArray? {
    switch self.connectedPoints_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mSymbolPinName
    self.mSymbolPinName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mX
    self.mX_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mY
    self.mY_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mWiresP2s (has opposite relationship)
    self.mWiresP2s_property.ebUndoManager = self.ebUndoManager
    self.mWiresP2s_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mP2_property.setProp (me) } },
      resetter: { inObject in inObject.mP2_property.setProp (nil) }
    )
  //--- To many property: mLabels (has opposite relationship)
    self.mLabels_property.ebUndoManager = self.ebUndoManager
    self.mLabels_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPoint_property.setProp (me) } },
      resetter: { inObject in inObject.mPoint_property.setProp (nil) }
    )
  //--- To many property: mWiresP1s (has opposite relationship)
    self.mWiresP1s_property.ebUndoManager = self.ebUndoManager
    self.mWiresP1s_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mP1_property.setProp (me) } },
      resetter: { inObject in inObject.mP1_property.setProp (nil) }
    )
  //--- To one property: mSymbol (has opposite to many relationship: mPoints) §
    self.mSymbol_property.ebUndoManager = self.ebUndoManager
    self.mSymbol_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPoints_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mPoints_property.remove (me) } }
    )
  //--- To one property: mNet (has opposite to many relationship: mPoints) §
    self.mNet_property.ebUndoManager = self.ebUndoManager
    self.mNet_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPoints_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mPoints_property.remove (me) } }
    )
  //--- Atomic property: location
    self.location_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        kind &= unwSelf.mSymbolPinName_property_selection.kind ()
        kind &= unwSelf.mSymbol_property.symbolInfo_property_selection.kind ()
        kind &= unwSelf.mSymbol_property.mSymbolInstanceName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mX_property_selection, unwSelf.mY_property_selection, unwSelf.mSymbolPinName_property_selection, unwSelf.mSymbol_property.symbolInfo_property_selection, unwSelf.mSymbol_property.mSymbolInstanceName_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_PointInSchematics_location (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.location_property)
    self.mY_property.addEBObserver (self.location_property)
    self.mSymbolPinName_property.addEBObserver (self.location_property)
    self.mSymbol_property.addEBObserverOf_symbolInfo (self.location_property)
    self.mSymbol_property.addEBObserverOf_mSymbolInstanceName (self.location_property)
  //--- Atomic property: netName
    self.netName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNet_property.mNetName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNet_property.mNetName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PointInSchematics_netName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.addEBObserverOf_mNetName (self.netName_property)
  //--- Atomic property: canMove
    self.canMove_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSymbol_none_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSymbol_none_selection) {
          case (.single (let v0)) :
            return .single (transient_PointInSchematics_canMove (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbol_property.addEBObserver (self.canMove_property)
  //--- Atomic property: wireColor
    self.wireColor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNet_property.wireColor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNet_property.wireColor_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PointInSchematics_wireColor (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.addEBObserverOf_wireColor (self.wireColor_property)
  //--- To one property: mNC (has opposite to one relationship: mPoint) §
    self.mNC_property.ebUndoManager = self.ebUndoManager
    self.mNC_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPoint_property.setProp (me) } },
      resetter: { inObject in inObject.mPoint_property.setProp (nil) }
    )
  //--- Atomic property: isConnected
    self.isConnected_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mNC_none_selection.kind ()
        kind &= unwSelf.mSymbol_none_selection.kind ()
        kind &= unwSelf.mWiresP1s_property.count_property_selection.kind ()
        kind &= unwSelf.mWiresP2s_property.count_property_selection.kind ()
        kind &= unwSelf.mLabels_property.count_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNC_none_selection, unwSelf.mSymbol_none_selection, unwSelf.mWiresP1s_property.count_property_selection, unwSelf.mWiresP2s_property.count_property_selection, unwSelf.mLabels_property.count_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_PointInSchematics_isConnected (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNC_property.addEBObserver (self.isConnected_property)
    self.mSymbol_property.addEBObserver (self.isConnected_property)
    self.mWiresP1s_property.addEBObserver (self.isConnected_property)
    self.mWiresP2s_property.addEBObserver (self.isConnected_property)
    self.mLabels_property.addEBObserver (self.isConnected_property)
  //--- Atomic property: status
    self.status_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.location_property_selection.kind ()
        kind &= unwSelf.isConnected_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.location_property_selection, unwSelf.isConnected_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_PointInSchematics_status (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.location_property.addEBObserver (self.status_property)
    self.isConnected_property.addEBObserver (self.status_property)
  //--- Atomic property: connectedPoints
    self.connectedPoints_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.location_property_selection.kind ()
        kind &= unwSelf.isConnected_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.location_property_selection, unwSelf.isConnected_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_PointInSchematics_connectedPoints (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.location_property.addEBObserver (self.connectedPoints_property)
    self.isConnected_property.addEBObserver (self.connectedPoints_property)
  //--- Install undoers and opposite setter for relationships
    self.mWiresP2s_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mP2_property.setProp (me) } },
      resetter: { inObject in inObject.mP2_property.setProp (nil) }
    )
    self.mLabels_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPoint_property.setProp (me) } },
      resetter: { inObject in inObject.mPoint_property.setProp (nil) }
    )
    self.mWiresP1s_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mP1_property.setProp (me) } },
      resetter: { inObject in inObject.mP1_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mX_property.removeEBObserver (self.location_property)
    self.mY_property.removeEBObserver (self.location_property)
    self.mSymbolPinName_property.removeEBObserver (self.location_property)
    self.mSymbol_property.removeEBObserverOf_symbolInfo (self.location_property)
    self.mSymbol_property.removeEBObserverOf_mSymbolInstanceName (self.location_property)
    self.mNet_property.removeEBObserverOf_mNetName (self.netName_property)
    self.mSymbol_property.removeEBObserver (self.canMove_property)
    self.mNet_property.removeEBObserverOf_wireColor (self.wireColor_property)
    self.mNC_property.removeEBObserver (self.isConnected_property)
    self.mSymbol_property.removeEBObserver (self.isConnected_property)
    self.mWiresP1s_property.removeEBObserver (self.isConnected_property)
    self.mWiresP2s_property.removeEBObserver (self.isConnected_property)
    self.mLabels_property.removeEBObserver (self.isConnected_property)
    self.location_property.removeEBObserver (self.status_property)
    self.isConnected_property.removeEBObserver (self.status_property)
    self.location_property.removeEBObserver (self.connectedPoints_property)
    self.isConnected_property.removeEBObserver (self.connectedPoints_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mSymbolPinName",
      idx: self.mSymbolPinName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSymbolPinName_property.mObserverExplorer,
      valueExplorer: &self.mSymbolPinName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mX",
      idx: self.mX_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mX_property.mObserverExplorer,
      valueExplorer: &self.mX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mY",
      idx: self.mY_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mY_property.mObserverExplorer,
      valueExplorer: &self.mY_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "location",
      idx:self.location_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.location_property.mObserverExplorer,
      valueExplorer:&self.location_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netName",
      idx:self.netName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.netName_property.mObserverExplorer,
      valueExplorer:&self.netName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "canMove",
      idx:self.canMove_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.canMove_property.mObserverExplorer,
      valueExplorer:&self.canMove_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "wireColor",
      idx:self.wireColor_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.wireColor_property.mObserverExplorer,
      valueExplorer:&self.wireColor_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "isConnected",
      idx:self.isConnected_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.isConnected_property.mObserverExplorer,
      valueExplorer:&self.isConnected_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "status",
      idx:self.status_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.status_property.mObserverExplorer,
      valueExplorer:&self.status_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "connectedPoints",
      idx:self.connectedPoints_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.connectedPoints_property.mObserverExplorer,
      valueExplorer:&self.connectedPoints_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "mWiresP2s",
      idx:mWiresP2s_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mWiresP2s_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mLabels",
      idx:mLabels_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mLabels_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mWiresP1s",
      idx:mWiresP1s_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mWiresP1s_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "mSymbol",
      idx:self.mSymbol_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mSymbol_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mNet",
      idx:self.mNet_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mNet_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mNC",
      idx:self.mNC_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mNC_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mSymbolPinName
    self.mSymbolPinName_property.mObserverExplorer = nil
    self.mSymbolPinName_property.mValueExplorer = nil
  //--- Atomic property: mX
    self.mX_property.mObserverExplorer = nil
    self.mX_property.mValueExplorer = nil
  //--- Atomic property: mY
    self.mY_property.mObserverExplorer = nil
    self.mY_property.mValueExplorer = nil
  //--- To many property: mWiresP2s
    self.mWiresP2s_property.mValueExplorer = nil
  //--- To many property: mLabels
    self.mLabels_property.mValueExplorer = nil
  //--- To many property: mWiresP1s
    self.mWiresP1s_property.mValueExplorer = nil
  //--- To one property: mSymbol
    self.mSymbol_property.mObserverExplorer = nil
    self.mSymbol_property.mValueExplorer = nil
  //--- To one property: mNet
    self.mNet_property.mObserverExplorer = nil
    self.mNet_property.mValueExplorer = nil
  //--- To one property: mNC
    self.mNC_property.mObserverExplorer = nil
    self.mNC_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mWiresP2s_property.setProp ([])
    self.mLabels_property.setProp ([])
    self.mWiresP1s_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mSymbol_property.setProp (nil)
    self.mNet_property.setProp (nil)
    self.mNC_property.setProp (nil)
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mSymbolPinName
    self.mSymbolPinName_property.storeIn (dictionary: ioDictionary, forKey:"mSymbolPinName")
  //--- Atomic property: mX
    self.mX_property.storeIn (dictionary: ioDictionary, forKey:"mX")
  //--- Atomic property: mY
    self.mY_property.storeIn (dictionary: ioDictionary, forKey:"mY")
  //--- To many property: mWiresP2s
    self.store (
      managedObjectArray: self.mWiresP2s_property.propval,
      relationshipName: "mWiresP2s",
      intoDictionary: ioDictionary
    )
  //--- To many property: mLabels
    self.store (
      managedObjectArray: self.mLabels_property.propval,
      relationshipName: "mLabels",
      intoDictionary: ioDictionary
    )
  //--- To many property: mWiresP1s
    self.store (
      managedObjectArray: self.mWiresP1s_property.propval,
      relationshipName: "mWiresP1s",
      intoDictionary: ioDictionary
    )
  //--- To one property: mNC // Opposite is toOne mPoint
    self.store (managedObject:self.mNC_property.propval,
      relationshipName: "mNC",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mWiresP2s
    self.mWiresP2s_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mWiresP2s",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [WireInSchematics])
  //--- To many property: mLabels
    self.mLabels_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mLabels",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [LabelInSchematics])
  //--- To many property: mWiresP1s
    self.mWiresP1s_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mWiresP1s",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [WireInSchematics])
  //--- To one property: mSymbol
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mSymbol",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? ComponentSymbolInProject {
        self.mSymbol_property.setProp (entity)
      }
    }
  //--- To one property: mNet
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mNet",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? NetInProject {
        self.mNet_property.setProp (entity)
      }
    }
  //--- To one property: mNC
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mNC",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? NCInSchematics {
        self.mNC_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mSymbolPinName
    self.mSymbolPinName_property.readFrom (dictionary: inDictionary, forKey:"mSymbolPinName")
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey:"mX")
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey:"mY")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mWiresP2s
    for managedObject in self.mWiresP2s_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mLabels
    for managedObject in self.mLabels_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mWiresP1s
    for managedObject in self.mWiresP1s_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mSymbol
    if let managedObject = self.mSymbol_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mNet
    if let managedObject = self.mNet_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mNC
    if let managedObject = self.mNC_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mWiresP2s
    for managedObject in self.mWiresP2s_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mLabels
    for managedObject in self.mLabels_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mWiresP1s
    for managedObject in self.mWiresP1s_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mSymbol
    if let managedObject = self.mSymbol_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mNet
    if let managedObject = self.mNet_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mNC
    if let managedObject = self.mNC_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PointInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PointInSchematics : ReadOnlyAbstractArrayProperty <PointInSchematics> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <PointInSchematics>, addedSet inAddedSet : Set <PointInSchematics>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_mSymbolPinName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mX_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mY_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_location_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_netName_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_canMove_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_wireColor_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_isConnected_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_status_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_connectedPoints_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_mSymbolPinName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mX_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mY_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_location_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_netName_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_canMove_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_wireColor_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_isConnected_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_status_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_connectedPoints_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'mSymbolPinName' stored property
  //····················································································································

  private var mObserversOf_mSymbolPinName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSymbolPinName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolPinName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolPinName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolPinName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolPinName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolPinName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolPinName_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_mSymbolPinName.apply { (_ observer : EBEvent) in
        managedObject.mSymbolPinName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolPinName_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    self.mObserversOf_mSymbolPinName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSymbolPinName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mX.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mX.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mX_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_mX.apply { (_ observer : EBEvent) in
        managedObject.mX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    self.mObserversOf_mX.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private var mObserversOf_mY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mY.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mY.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mY_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_mY.apply { (_ observer : EBEvent) in
        managedObject.mY_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mY_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    self.mObserversOf_mY.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'location' transient property
  //····················································································································

  private var mObserversOf_location = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_location (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_location.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.location_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_location (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_location.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.location_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_location_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_location.apply { (_ observer : EBEvent) in
        managedObject.location_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_location_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_location.apply { (_ observer : EBEvent) in
        managedObject.location_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netName' transient property
  //····················································································································

  private var mObserversOf_netName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netName_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_netName.apply { (_ observer : EBEvent) in
        managedObject.netName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netName_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_netName.apply { (_ observer : EBEvent) in
        managedObject.netName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'canMove' transient property
  //····················································································································

  private var mObserversOf_canMove = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_canMove (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_canMove.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canMove_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_canMove (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_canMove.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canMove_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_canMove_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_canMove.apply { (_ observer : EBEvent) in
        managedObject.canMove_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_canMove_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_canMove.apply { (_ observer : EBEvent) in
        managedObject.canMove_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'wireColor' transient property
  //····················································································································

  private var mObserversOf_wireColor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_wireColor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_wireColor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.wireColor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_wireColor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_wireColor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.wireColor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_wireColor_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_wireColor.apply { (_ observer : EBEvent) in
        managedObject.wireColor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_wireColor_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_wireColor.apply { (_ observer : EBEvent) in
        managedObject.wireColor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'isConnected' transient property
  //····················································································································

  private var mObserversOf_isConnected = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_isConnected (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_isConnected.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isConnected_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_isConnected (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_isConnected.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isConnected_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_isConnected_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_isConnected.apply { (_ observer : EBEvent) in
        managedObject.isConnected_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_isConnected_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_isConnected.apply { (_ observer : EBEvent) in
        managedObject.isConnected_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'status' transient property
  //····················································································································

  private var mObserversOf_status = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_status (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_status.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.status_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_status (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_status.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.status_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_status_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_status.apply { (_ observer : EBEvent) in
        managedObject.status_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_status_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_status.apply { (_ observer : EBEvent) in
        managedObject.status_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connectedPoints' transient property
  //····················································································································

  private var mObserversOf_connectedPoints = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connectedPoints.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connectedPoints_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connectedPoints.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.connectedPoints_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_connectedPoints_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_connectedPoints.apply { (_ observer : EBEvent) in
        managedObject.connectedPoints_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connectedPoints_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_connectedPoints.apply { (_ observer : EBEvent) in
        managedObject.connectedPoints_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf PointInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_PointInSchematics : ReadOnlyArrayOf_PointInSchematics {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_PointInSchematics? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_PointInSchematics?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newArray : [PointInSchematics] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newArray = v
        self.mTransientKind = .single
       case .multiple :
        newArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newArray = []
      self.mTransientKind = .empty
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [PointInSchematics] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [PointInSchematics] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf PointInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_PointInSchematics <SUPER : EBManagedObject> : ReadOnlyArrayOf_PointInSchematics {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    var newModelArray : [SUPER] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newModelArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newModelArray = v
        self.mTransientKind = .single
       case .multiple :
        newModelArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newModelArray = []
      self.mTransientKind = .empty
    }
    var newArray = [PointInSchematics] ()
    for superObject in newModelArray {
      if let object = superObject as? PointInSchematics {
        newArray.append (object)
      }
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [PointInSchematics] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [PointInSchematics] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PointInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PointInSchematics : ReadOnlyArrayOf_PointInSchematics {

  //····················································································································
 
  func setProp (_ value :  [PointInSchematics]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PointInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_PointInSchematics : ReadWriteArrayOf_PointInSchematics {

  //····················································································································

  private var mModel : ReadWriteArrayOf_PointInSchematics? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_PointInSchematics?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [PointInSchematics]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [PointInSchematics]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [PointInSchematics] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : [PointInSchematics] {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: PointInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_PointInSchematics : ReadWriteArrayOf_PointInSchematics, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PointInSchematics) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PointInSchematics) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PointInSchematics) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PointInSchematics) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  //  Init
  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [PointInSchematics] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "PointInSchematics") as? PointInSchematics {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [PointInSchematics]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [PointInSchematics]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //--- Write in preferences ?
    self.writeInPreferences ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <PointInSchematics>, addedSet inAddedSet : Set <PointInSchematics>) {
    for managedObject in inRemovedSet {
      managedObject.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (managedObject)
    }
  //---
    for managedObject in inAddedSet {
      managedObject.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }
 
  //····················································································································

  override var prop : EBSelection < [PointInSchematics] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [PointInSchematics]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [PointInSchematics] { return self.mInternalArrayValue }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mInternalArrayValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  func remove (_ object : PointInSchematics) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : PointInSchematics) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mInternalArrayValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_PointInSchematics 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_PointInSchematics : ReadOnlyAbstractObjectProperty <PointInSchematics> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : PointInSchematics?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.mSymbolPinName_property.removeEBObserversFrom (&self.mObserversOf_mSymbolPinName) // Stored property
    inOldValue?.mX_property.removeEBObserversFrom (&self.mObserversOf_mX) // Stored property
    inOldValue?.mY_property.removeEBObserversFrom (&self.mObserversOf_mY) // Stored property
    inOldValue?.location_property.removeEBObserversFrom (&self.mObserversOf_location) // Transient property
    inOldValue?.netName_property.removeEBObserversFrom (&self.mObserversOf_netName) // Transient property
    inOldValue?.canMove_property.removeEBObserversFrom (&self.mObserversOf_canMove) // Transient property
    inOldValue?.wireColor_property.removeEBObserversFrom (&self.mObserversOf_wireColor) // Transient property
    inOldValue?.isConnected_property.removeEBObserversFrom (&self.mObserversOf_isConnected) // Transient property
    inOldValue?.status_property.removeEBObserversFrom (&self.mObserversOf_status) // Transient property
    inOldValue?.connectedPoints_property.removeEBObserversFrom (&self.mObserversOf_connectedPoints) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.mSymbolPinName_property.addEBObserversFrom (&self.mObserversOf_mSymbolPinName) // Stored property
    self.mInternalValue?.mX_property.addEBObserversFrom (&self.mObserversOf_mX) // Stored property
    self.mInternalValue?.mY_property.addEBObserversFrom (&self.mObserversOf_mY) // Stored property
    self.mInternalValue?.location_property.addEBObserversFrom (&self.mObserversOf_location) // Transient property
    self.mInternalValue?.netName_property.addEBObserversFrom (&self.mObserversOf_netName) // Transient property
    self.mInternalValue?.canMove_property.addEBObserversFrom (&self.mObserversOf_canMove) // Transient property
    self.mInternalValue?.wireColor_property.addEBObserversFrom (&self.mObserversOf_wireColor) // Transient property
    self.mInternalValue?.isConnected_property.addEBObserversFrom (&self.mObserversOf_isConnected) // Transient property
    self.mInternalValue?.status_property.addEBObserversFrom (&self.mObserversOf_status) // Transient property
    self.mInternalValue?.connectedPoints_property.addEBObserversFrom (&self.mObserversOf_connectedPoints) // Transient property
  }

  //····················································································································
  //   Observers of 'mSymbolPinName' stored property
  //····················································································································

  private var mObserversOf_mSymbolPinName = EBWeakEventSet ()

  //····················································································································

  var mSymbolPinName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mSymbolPinName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolPinName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolPinName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSymbolPinName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolPinName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolPinName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSymbolPinName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolPinName_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_mSymbolPinName.apply { (_ observer : EBEvent) in
        managedObject.mSymbolPinName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolPinName_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    self.mObserversOf_mSymbolPinName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSymbolPinName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  var mX_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mX_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mX.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mX_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mX.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mX_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mX_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_mX.apply { (_ observer : EBEvent) in
        managedObject.mX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    self.mObserversOf_mX.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private var mObserversOf_mY = EBWeakEventSet ()

  //····················································································································

  var mY_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mY_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mY.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mY_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mY.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mY_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mY_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_mY.apply { (_ observer : EBEvent) in
        managedObject.mY_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mY_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    self.mObserversOf_mY.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'location' transient property
  //····················································································································

  private var mObserversOf_location = EBWeakEventSet ()

  //····················································································································

  var location_property_selection : EBSelection <CanariPoint?> {
    if let model = self.propval {
      switch (model.location_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_location (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_location.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.location_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_location (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_location.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.location_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_location_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_location.apply { (_ observer : EBEvent) in
        managedObject.location_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_location_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_location.apply { (_ observer : EBEvent) in
        managedObject.location_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netName' transient property
  //····················································································································

  private var mObserversOf_netName = EBWeakEventSet ()

  //····················································································································

  var netName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.netName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_netName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_netName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_netName_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_netName.apply { (_ observer : EBEvent) in
        managedObject.netName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netName_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_netName.apply { (_ observer : EBEvent) in
        managedObject.netName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'canMove' transient property
  //····················································································································

  private var mObserversOf_canMove = EBWeakEventSet ()

  //····················································································································

  var canMove_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.canMove_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_canMove (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_canMove.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.canMove_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_canMove (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_canMove.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.canMove_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_canMove_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_canMove.apply { (_ observer : EBEvent) in
        managedObject.canMove_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_canMove_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_canMove.apply { (_ observer : EBEvent) in
        managedObject.canMove_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'wireColor' transient property
  //····················································································································

  private var mObserversOf_wireColor = EBWeakEventSet ()

  //····················································································································

  var wireColor_property_selection : EBSelection <NSColor?> {
    if let model = self.propval {
      switch (model.wireColor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_wireColor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_wireColor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.wireColor_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_wireColor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_wireColor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.wireColor_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_wireColor_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_wireColor.apply { (_ observer : EBEvent) in
        managedObject.wireColor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_wireColor_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_wireColor.apply { (_ observer : EBEvent) in
        managedObject.wireColor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'isConnected' transient property
  //····················································································································

  private var mObserversOf_isConnected = EBWeakEventSet ()

  //····················································································································

  var isConnected_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.isConnected_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_isConnected (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_isConnected.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.isConnected_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_isConnected (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_isConnected.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.isConnected_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_isConnected_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_isConnected.apply { (_ observer : EBEvent) in
        managedObject.isConnected_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_isConnected_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_isConnected.apply { (_ observer : EBEvent) in
        managedObject.isConnected_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'status' transient property
  //····················································································································

  private var mObserversOf_status = EBWeakEventSet ()

  //····················································································································

  var status_property_selection : EBSelection <SchematicPointStatus?> {
    if let model = self.propval {
      switch (model.status_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_status (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_status.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.status_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_status (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_status.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.status_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_status_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_status.apply { (_ observer : EBEvent) in
        managedObject.status_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_status_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_status.apply { (_ observer : EBEvent) in
        managedObject.status_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connectedPoints' transient property
  //····················································································································

  private var mObserversOf_connectedPoints = EBWeakEventSet ()

  //····················································································································

  var connectedPoints_property_selection : EBSelection <CanariPointArray?> {
    if let model = self.propval {
      switch (model.connectedPoints_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connectedPoints.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connectedPoints_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connectedPoints.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connectedPoints_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_connectedPoints_toElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_connectedPoints.apply { (_ observer : EBEvent) in
        managedObject.connectedPoints_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connectedPoints_fromElementsOfSet (_ inSet : Set<PointInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_connectedPoints.apply { (_ observer : EBEvent) in
        managedObject.connectedPoints_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observable toMany property: mWiresP2s
  //····················································································································

  private var mObserversOf_mWiresP2s = EBWeakEventSet ()

  //····················································································································

  var mWiresP2s_property_selection : EBSelection <[WireInSchematics]> {
    if let model = self.propval {
      switch (model.mWiresP2s_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mWiresP2s (_ inObserver : EBEvent) {
    self.mObserversOf_mWiresP2s.insert (inObserver)
    if let object = self.propval {
      object.mWiresP2s_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mWiresP2s (_ inObserver : EBEvent) {
    self.mObserversOf_mWiresP2s.remove (inObserver)
    if let object = self.propval {
      object.mWiresP2s_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mLabels
  //····················································································································

  private var mObserversOf_mLabels = EBWeakEventSet ()

  //····················································································································

  var mLabels_property_selection : EBSelection <[LabelInSchematics]> {
    if let model = self.propval {
      switch (model.mLabels_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mLabels (_ inObserver : EBEvent) {
    self.mObserversOf_mLabels.insert (inObserver)
    if let object = self.propval {
      object.mLabels_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mLabels (_ inObserver : EBEvent) {
    self.mObserversOf_mLabels.remove (inObserver)
    if let object = self.propval {
      object.mLabels_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mWiresP1s
  //····················································································································

  private var mObserversOf_mWiresP1s = EBWeakEventSet ()

  //····················································································································

  var mWiresP1s_property_selection : EBSelection <[WireInSchematics]> {
    if let model = self.propval {
      switch (model.mWiresP1s_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mWiresP1s (_ inObserver : EBEvent) {
    self.mObserversOf_mWiresP1s.insert (inObserver)
    if let object = self.propval {
      object.mWiresP1s_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mWiresP1s (_ inObserver : EBEvent) {
    self.mObserversOf_mWiresP1s.remove (inObserver)
    if let object = self.propval {
      object.mWiresP1s_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientObject PointInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientObject_PointInSchematics : ReadOnlyObject_PointInSchematics {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_PointInSchematics? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_PointInSchematics?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : PointInSchematics? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < PointInSchematics? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : PointInSchematics? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_PointInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_PointInSchematics : ReadOnlyObject_PointInSchematics {

  //····················································································································
 
  func setProp (_ inValue : PointInSchematics?) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_PointInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_PointInSchematics : ReadWriteObject_PointInSchematics {

  //····················································································································

  private var mModel : ReadWriteObject_PointInSchematics? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_PointInSchematics?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : PointInSchematics?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : PointInSchematics?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < PointInSchematics? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : PointInSchematics? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_PointInSchematics 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_PointInSchematics : ReadWriteObject_PointInSchematics, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PointInSchematics) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PointInSchematics) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PointInSchematics) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PointInSchematics) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : PointInSchematics?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    if let object = inOldValue {
      object.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      object.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : PointInSchematics?) {
    self.mInternalValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < PointInSchematics? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : PointInSchematics?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : PointInSchematics? { return self.mInternalValue }

  //····················································································································

  func remove (_ object : PointInSchematics) {
    if object === self.mInternalValue {
      self.mInternalValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : PointInSchematics) {
    if object !== self.mInternalValue {
      self.mInternalValue = object
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    self.mInternalValue?.setSignatureObserver (observer: observer)
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

