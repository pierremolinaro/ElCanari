//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mCenterX : class {
  var mCenterX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mCenterY : class {
  var mCenterY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mRotation : class {
  var mRotation : QuadrantRotation { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mMirror : class {
  var mMirror : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mSymbolInstanceName : class {
  var mSymbolInstanceName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mSymbolTypeName : class {
  var mSymbolTypeName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mDisplayComponentNameOffsetX : class {
  var mDisplayComponentNameOffsetX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mDisplayComponentNameOffsetY : class {
  var mDisplayComponentNameOffsetY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mDisplayComponentValue : class {
  var mDisplayComponentValue : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mDisplayComponentValueOffsetX : class {
  var mDisplayComponentValueOffsetX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_mDisplayComponentValueOffsetY : class {
  var mDisplayComponentValueOffsetY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_componentValueProxy : class {
  var componentValueProxy : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_componentName : class {
  var componentName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_deviceName : class {
  var deviceName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_symbolInfo : class {
  var symbolInfo : ComponentSymbolInfo? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentSymbolInProject_symbolInSchematic : class {
  var symbolInSchematic : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ComponentSymbolInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ComponentSymbolInProject : SchematicObject,
         ComponentSymbolInProject_mCenterX,
         ComponentSymbolInProject_mCenterY,
         ComponentSymbolInProject_mRotation,
         ComponentSymbolInProject_mMirror,
         ComponentSymbolInProject_mSymbolInstanceName,
         ComponentSymbolInProject_mSymbolTypeName,
         ComponentSymbolInProject_mDisplayComponentNameOffsetX,
         ComponentSymbolInProject_mDisplayComponentNameOffsetY,
         ComponentSymbolInProject_mDisplayComponentValue,
         ComponentSymbolInProject_mDisplayComponentValueOffsetX,
         ComponentSymbolInProject_mDisplayComponentValueOffsetY,
         ComponentSymbolInProject_componentValueProxy,
         ComponentSymbolInProject_componentName,
         ComponentSymbolInProject_deviceName,
         ComponentSymbolInProject_symbolInfo,
         ComponentSymbolInProject_objectDisplay,
         ComponentSymbolInProject_selectionDisplay,
         ComponentSymbolInProject_symbolInSchematic {

  //····················································································································
  //   Atomic property: mCenterX
  //····················································································································

  let mCenterX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mCenterX : Int {
    get { return self.mCenterX_property.propval }
    set { self.mCenterX_property.setProp (newValue) }
  }

  //····················································································································

  var mCenterX_property_selection : EBSelection <Int> { return self.mCenterX_property.prop }

  //····················································································································
  //   Atomic property: mCenterY
  //····················································································································

  let mCenterY_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mCenterY : Int {
    get { return self.mCenterY_property.propval }
    set { self.mCenterY_property.setProp (newValue) }
  }

  //····················································································································

  var mCenterY_property_selection : EBSelection <Int> { return self.mCenterY_property.prop }

  //····················································································································
  //   Atomic property: mRotation
  //····················································································································

  let mRotation_property = EBStoredProperty_QuadrantRotation (defaultValue: QuadrantRotation.rotation0)

  //····················································································································

  var mRotation : QuadrantRotation {
    get { return self.mRotation_property.propval }
    set { self.mRotation_property.setProp (newValue) }
  }

  //····················································································································

  var mRotation_property_selection : EBSelection <QuadrantRotation> { return self.mRotation_property.prop }

  //····················································································································
  //   Atomic property: mMirror
  //····················································································································

  let mMirror_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mMirror : Bool {
    get { return self.mMirror_property.propval }
    set { self.mMirror_property.setProp (newValue) }
  }

  //····················································································································

  var mMirror_property_selection : EBSelection <Bool> { return self.mMirror_property.prop }

  //····················································································································
  //   Atomic property: mSymbolInstanceName
  //····················································································································

  let mSymbolInstanceName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mSymbolInstanceName : String {
    get { return self.mSymbolInstanceName_property.propval }
    set { self.mSymbolInstanceName_property.setProp (newValue) }
  }

  //····················································································································

  var mSymbolInstanceName_property_selection : EBSelection <String> { return self.mSymbolInstanceName_property.prop }

  //····················································································································
  //   Atomic property: mSymbolTypeName
  //····················································································································

  let mSymbolTypeName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mSymbolTypeName : String {
    get { return self.mSymbolTypeName_property.propval }
    set { self.mSymbolTypeName_property.setProp (newValue) }
  }

  //····················································································································

  var mSymbolTypeName_property_selection : EBSelection <String> { return self.mSymbolTypeName_property.prop }

  //····················································································································
  //   Atomic property: mDisplayComponentNameOffsetX
  //····················································································································

  let mDisplayComponentNameOffsetX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mDisplayComponentNameOffsetX : Int {
    get { return self.mDisplayComponentNameOffsetX_property.propval }
    set { self.mDisplayComponentNameOffsetX_property.setProp (newValue) }
  }

  //····················································································································

  var mDisplayComponentNameOffsetX_property_selection : EBSelection <Int> { return self.mDisplayComponentNameOffsetX_property.prop }

  //····················································································································
  //   Atomic property: mDisplayComponentNameOffsetY
  //····················································································································

  let mDisplayComponentNameOffsetY_property = EBStoredProperty_Int (defaultValue: 457200)

  //····················································································································

  var mDisplayComponentNameOffsetY : Int {
    get { return self.mDisplayComponentNameOffsetY_property.propval }
    set { self.mDisplayComponentNameOffsetY_property.setProp (newValue) }
  }

  //····················································································································

  var mDisplayComponentNameOffsetY_property_selection : EBSelection <Int> { return self.mDisplayComponentNameOffsetY_property.prop }

  //····················································································································
  //   Atomic property: mDisplayComponentValue
  //····················································································································

  let mDisplayComponentValue_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var mDisplayComponentValue : Bool {
    get { return self.mDisplayComponentValue_property.propval }
    set { self.mDisplayComponentValue_property.setProp (newValue) }
  }

  //····················································································································

  var mDisplayComponentValue_property_selection : EBSelection <Bool> { return self.mDisplayComponentValue_property.prop }

  //····················································································································
  //   Atomic property: mDisplayComponentValueOffsetX
  //····················································································································

  let mDisplayComponentValueOffsetX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mDisplayComponentValueOffsetX : Int {
    get { return self.mDisplayComponentValueOffsetX_property.propval }
    set { self.mDisplayComponentValueOffsetX_property.setProp (newValue) }
  }

  //····················································································································

  var mDisplayComponentValueOffsetX_property_selection : EBSelection <Int> { return self.mDisplayComponentValueOffsetX_property.prop }

  //····················································································································
  //   Atomic property: mDisplayComponentValueOffsetY
  //····················································································································

  let mDisplayComponentValueOffsetY_property = EBStoredProperty_Int (defaultValue: -457200)

  //····················································································································

  var mDisplayComponentValueOffsetY : Int {
    get { return self.mDisplayComponentValueOffsetY_property.propval }
    set { self.mDisplayComponentValueOffsetY_property.setProp (newValue) }
  }

  //····················································································································

  var mDisplayComponentValueOffsetY_property_selection : EBSelection <Int> { return self.mDisplayComponentValueOffsetY_property.prop }

  //····················································································································
  //   To many property: mPoints
  //····················································································································

  let mPoints_property = StoredArrayOf_PointInSchematic (usedForSignature: false)

  //····················································································································

  var mPoints_property_selection : EBSelection < [PointInSchematic] > {
    return self.mPoints_property.prop
  }

  //····················································································································

  var mPoints : [PointInSchematic] {
    get { return self.mPoints_property.propval }
    set { self.mPoints_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic proxy property: componentValueProxy
  //····················································································································

  let componentValueProxy_property = EBPropertyProxy_String ()

  //····················································································································

  var componentValueProxy : String? {
    get {
      switch self.componentValueProxy_property.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }
    set {
      if let unwrappedNewValue = newValue {
        self.componentValueProxy_property.setProp (unwrappedNewValue)
      }
    }
  }

  //····················································································································

  var componentValueProxy_property_selection : EBSelection <String> { return self.componentValueProxy_property.prop }

  //····················································································································
  //   To one property: mComponent
  //····················································································································

   let mComponent_property = StoredObject_ComponentInProject (usedForSignature: false)

  //····················································································································

  var mComponent_property_selection : EBSelection <ComponentInProject?> {
    return .single (self.mComponent_property.propval)
  }

  //····················································································································

  var mComponent : ComponentInProject? {
    get {
      return self.mComponent_property.propval
    }
    set {
      if self.mComponent_property.propval != nil {
        self.mComponent_property.setProp (nil)
      }
      if newValue != nil {
        self.mComponent_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mComponent_none : StoredObject_ComponentInProject { return self.mComponent_property }

  //····················································································································

  var mComponent_none_selection : EBSelection <Bool> {
    return .single (self.mComponent_property.propval == nil)
  }

  //····················································································································
  //   Transient property: componentName
  //····················································································································

  let componentName_property = EBTransientProperty_String ()

  //····················································································································

  var componentName_property_selection : EBSelection <String> {
    return self.componentName_property.prop
  }

  //····················································································································

  var componentName : String? {
    switch self.componentName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: deviceName
  //····················································································································

  let deviceName_property = EBTransientProperty_String ()

  //····················································································································

  var deviceName_property_selection : EBSelection <String> {
    return self.deviceName_property.prop
  }

  //····················································································································

  var deviceName : String? {
    switch self.deviceName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolInfo
  //····················································································································

  let symbolInfo_property = EBTransientProperty_ComponentSymbolInfo ()

  //····················································································································

  var symbolInfo_property_selection : EBSelection <ComponentSymbolInfo> {
    return self.symbolInfo_property.prop
  }

  //····················································································································

  var symbolInfo : ComponentSymbolInfo? {
    switch self.symbolInfo_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolInSchematic
  //····················································································································

  let symbolInSchematic_property = EBTransientProperty_Bool ()

  //····················································································································

  var symbolInSchematic_property_selection : EBSelection <Bool> {
    return self.symbolInSchematic_property.prop
  }

  //····················································································································

  var symbolInSchematic : Bool? {
    switch self.symbolInSchematic_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
    self.configureObject ()
  }
  
  //····················································································································

  private final func configureObject () {
  //--- Atomic property: mCenterX
    self.mCenterX_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mCenterY
    self.mCenterY_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mRotation
    self.mRotation_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mMirror
    self.mMirror_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSymbolInstanceName
    self.mSymbolInstanceName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSymbolTypeName
    self.mSymbolTypeName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mDisplayComponentNameOffsetX
    self.mDisplayComponentNameOffsetX_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mDisplayComponentNameOffsetY
    self.mDisplayComponentNameOffsetY_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mDisplayComponentValue
    self.mDisplayComponentValue_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mDisplayComponentValueOffsetX
    self.mDisplayComponentValueOffsetX_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mDisplayComponentValueOffsetY
    self.mDisplayComponentValueOffsetY_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mPoints (has opposite relationship)
    self.mPoints_property.ebUndoManager = self.ebUndoManager
    self.mPoints_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSymbol_property.setProp (me) } },
      resetter: { inObject in inObject.mSymbol_property.setProp (nil) }
    )
  //--- Atomic proxy property: componentValueProxy
    self.componentValueProxy_property.mReadModelFunction = { [weak self] in
      if let object = self?.mComponent {
        return .single (object.mComponentValue)
      }else{
        return .empty
      }
    }
    self.componentValueProxy_property.mWriteModelFunction = { [weak self] (_ inValue : String) in
      self?.mComponent?.mComponentValue = inValue
    }
    self.componentValueProxy_property.mValidateAndWriteModelFunction = { [weak self] (_ inValue : String, _ inWindow : NSWindow?) -> Bool in
      return self?.mComponent?.mComponentValue_property.validateAndSetProp (inValue, windowForSheet: inWindow) ?? false
    }
    self.mComponent_property.addEBObserverOf_mComponentValue (self.componentValueProxy_property)
  //--- To one property: mComponent (has opposite to many relationship: mSymbols)
    self.mComponent_property.ebUndoManager = self.ebUndoManager
    self.mComponent_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSymbols_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mSymbols_property.remove (me) } }
    )
  //--- Atomic property: componentName
    self.componentName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mComponent_property.componentName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mComponent_property.componentName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentSymbolInProject_componentName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mComponent_property.addEBObserverOf_componentName (self.componentName_property)
  //--- Atomic property: deviceName
    self.deviceName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mComponent_property.deviceName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mComponent_property.deviceName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentSymbolInProject_deviceName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mComponent_property.addEBObserverOf_deviceName (self.deviceName_property)
  //--- Atomic property: symbolInfo
    self.symbolInfo_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mRotation_property_selection.kind ()
        kind &= unwSelf.mMirror_property_selection.kind ()
        kind &= unwSelf.componentName_property_selection.kind ()
        kind &= unwSelf.mComponent_property.mComponentValue_property_selection.kind ()
        kind &= unwSelf.mComponent_property.deviceSymbolDictionary_property_selection.kind ()
        kind &= unwSelf.mSymbolInstanceName_property_selection.kind ()
        kind &= unwSelf.mSymbolTypeName_property_selection.kind ()
        kind &= unwSelf.mCenterX_property_selection.kind ()
        kind &= unwSelf.mCenterY_property_selection.kind ()
        kind &= g_Preferences!.pinNameFont_property_selection.kind ()
        kind &= unwSelf.mPoints_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mRotation_property_selection, unwSelf.mMirror_property_selection, unwSelf.componentName_property_selection, unwSelf.mComponent_property.mComponentValue_property_selection, unwSelf.mComponent_property.deviceSymbolDictionary_property_selection, unwSelf.mSymbolInstanceName_property_selection, unwSelf.mSymbolTypeName_property_selection, unwSelf.mCenterX_property_selection, unwSelf.mCenterY_property_selection, g_Preferences!.pinNameFont_property_selection, unwSelf.mPoints_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10)) :
            return .single (transient_ComponentSymbolInProject_symbolInfo (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mRotation_property.addEBObserver (self.symbolInfo_property)
    self.mMirror_property.addEBObserver (self.symbolInfo_property)
    self.componentName_property.addEBObserver (self.symbolInfo_property)
    self.mComponent_property.addEBObserverOf_mComponentValue (self.symbolInfo_property)
    self.mComponent_property.addEBObserverOf_deviceSymbolDictionary (self.symbolInfo_property)
    self.mSymbolInstanceName_property.addEBObserver (self.symbolInfo_property)
    self.mSymbolTypeName_property.addEBObserver (self.symbolInfo_property)
    self.mCenterX_property.addEBObserver (self.symbolInfo_property)
    self.mCenterY_property.addEBObserver (self.symbolInfo_property)
    g_Preferences?.pinNameFont_property.addEBObserver (self.symbolInfo_property)
    self.mPoints_property.addEBObserverOf_symbolNameNetName (self.symbolInfo_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.pinNameFont_property_selection.kind ()
        kind &= unwSelf.mDisplayComponentNameOffsetX_property_selection.kind ()
        kind &= unwSelf.mDisplayComponentNameOffsetY_property_selection.kind ()
        kind &= unwSelf.mDisplayComponentValue_property_selection.kind ()
        kind &= unwSelf.mDisplayComponentValueOffsetX_property_selection.kind ()
        kind &= unwSelf.mDisplayComponentValueOffsetY_property_selection.kind ()
        kind &= unwSelf.symbolInfo_property_selection.kind ()
        kind &= g_Preferences!.symbolColorForSchematic_property_selection.kind ()
        kind &= unwSelf.mSymbolInstanceName_property_selection.kind ()
        kind &= unwSelf.mSymbolTypeName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (g_Preferences!.pinNameFont_property_selection, unwSelf.mDisplayComponentNameOffsetX_property_selection, unwSelf.mDisplayComponentNameOffsetY_property_selection, unwSelf.mDisplayComponentValue_property_selection, unwSelf.mDisplayComponentValueOffsetX_property_selection, unwSelf.mDisplayComponentValueOffsetY_property_selection, unwSelf.symbolInfo_property_selection, g_Preferences!.symbolColorForSchematic_property_selection, unwSelf.mSymbolInstanceName_property_selection, unwSelf.mSymbolTypeName_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9)) :
            return .single (transient_ComponentSymbolInProject_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    g_Preferences?.pinNameFont_property.addEBObserver (self.objectDisplay_property)
    self.mDisplayComponentNameOffsetX_property.addEBObserver (self.objectDisplay_property)
    self.mDisplayComponentNameOffsetY_property.addEBObserver (self.objectDisplay_property)
    self.mDisplayComponentValue_property.addEBObserver (self.objectDisplay_property)
    self.mDisplayComponentValueOffsetX_property.addEBObserver (self.objectDisplay_property)
    self.mDisplayComponentValueOffsetY_property.addEBObserver (self.objectDisplay_property)
    self.symbolInfo_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.symbolColorForSchematic_property.addEBObserver (self.objectDisplay_property)
    self.mSymbolInstanceName_property.addEBObserver (self.objectDisplay_property)
    self.mSymbolTypeName_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.pinNameFont_property_selection.kind ()
        kind &= unwSelf.mDisplayComponentNameOffsetX_property_selection.kind ()
        kind &= unwSelf.mDisplayComponentNameOffsetY_property_selection.kind ()
        kind &= unwSelf.mDisplayComponentValue_property_selection.kind ()
        kind &= unwSelf.mDisplayComponentValueOffsetX_property_selection.kind ()
        kind &= unwSelf.mDisplayComponentValueOffsetY_property_selection.kind ()
        kind &= unwSelf.symbolInfo_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (g_Preferences!.pinNameFont_property_selection, unwSelf.mDisplayComponentNameOffsetX_property_selection, unwSelf.mDisplayComponentNameOffsetY_property_selection, unwSelf.mDisplayComponentValue_property_selection, unwSelf.mDisplayComponentValueOffsetX_property_selection, unwSelf.mDisplayComponentValueOffsetY_property_selection, unwSelf.symbolInfo_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6)) :
            return .single (transient_ComponentSymbolInProject_selectionDisplay (v0, v1, v2, v3, v4, v5, v6))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    g_Preferences?.pinNameFont_property.addEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentNameOffsetX_property.addEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentNameOffsetY_property.addEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentValue_property.addEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentValueOffsetX_property.addEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentValueOffsetY_property.addEBObserver (self.selectionDisplay_property)
    self.symbolInfo_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: symbolInSchematic
    self.symbolInSchematic_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.isPlacedInSchematic_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.isPlacedInSchematic_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentSymbolInProject_symbolInSchematic (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.isPlacedInSchematic_property.addEBObserver (self.symbolInSchematic_property)
  //--- Install undoers and opposite setter for relationships
    self.mPoints_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mSymbol_property.setProp (me) } },
      resetter: { inObject in inObject.mSymbol_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- Atomic proxy property: componentValueProxy
    self.componentValueProxy_property.mReadModelFunction = nil
    self.componentValueProxy_property.mWriteModelFunction = nil
    self.componentValueProxy_property.mValidateAndWriteModelFunction = nil
    self.mComponent_property.removeEBObserverOf_mComponentValue (self.componentValueProxy_property)
    self.mComponent_property.removeEBObserverOf_componentName (self.componentName_property)
    self.mComponent_property.removeEBObserverOf_deviceName (self.deviceName_property)
    self.mRotation_property.removeEBObserver (self.symbolInfo_property)
    self.mMirror_property.removeEBObserver (self.symbolInfo_property)
    self.componentName_property.removeEBObserver (self.symbolInfo_property)
    self.mComponent_property.removeEBObserverOf_mComponentValue (self.symbolInfo_property)
    self.mComponent_property.removeEBObserverOf_deviceSymbolDictionary (self.symbolInfo_property)
    self.mSymbolInstanceName_property.removeEBObserver (self.symbolInfo_property)
    self.mSymbolTypeName_property.removeEBObserver (self.symbolInfo_property)
    self.mCenterX_property.removeEBObserver (self.symbolInfo_property)
    self.mCenterY_property.removeEBObserver (self.symbolInfo_property)
    g_Preferences?.pinNameFont_property.removeEBObserver (self.symbolInfo_property)
    self.mPoints_property.removeEBObserverOf_symbolNameNetName (self.symbolInfo_property)
    g_Preferences?.pinNameFont_property.removeEBObserver (self.objectDisplay_property)
    self.mDisplayComponentNameOffsetX_property.removeEBObserver (self.objectDisplay_property)
    self.mDisplayComponentNameOffsetY_property.removeEBObserver (self.objectDisplay_property)
    self.mDisplayComponentValue_property.removeEBObserver (self.objectDisplay_property)
    self.mDisplayComponentValueOffsetX_property.removeEBObserver (self.objectDisplay_property)
    self.mDisplayComponentValueOffsetY_property.removeEBObserver (self.objectDisplay_property)
    self.symbolInfo_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.symbolColorForSchematic_property.removeEBObserver (self.objectDisplay_property)
    self.mSymbolInstanceName_property.removeEBObserver (self.objectDisplay_property)
    self.mSymbolTypeName_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.pinNameFont_property.removeEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentNameOffsetX_property.removeEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentNameOffsetY_property.removeEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentValue_property.removeEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentValueOffsetX_property.removeEBObserver (self.selectionDisplay_property)
    self.mDisplayComponentValueOffsetY_property.removeEBObserver (self.selectionDisplay_property)
    self.symbolInfo_property.removeEBObserver (self.selectionDisplay_property)
    self.isPlacedInSchematic_property.removeEBObserver (self.symbolInSchematic_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mCenterX",
      idx: self.mCenterX_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCenterX_property.mObserverExplorer,
      valueExplorer: &self.mCenterX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mCenterY",
      idx: self.mCenterY_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCenterY_property.mObserverExplorer,
      valueExplorer: &self.mCenterY_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mRotation",
      idx: self.mRotation_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mRotation_property.mObserverExplorer,
      valueExplorer: &self.mRotation_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mMirror",
      idx: self.mMirror_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mMirror_property.mObserverExplorer,
      valueExplorer: &self.mMirror_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSymbolInstanceName",
      idx: self.mSymbolInstanceName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSymbolInstanceName_property.mObserverExplorer,
      valueExplorer: &self.mSymbolInstanceName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSymbolTypeName",
      idx: self.mSymbolTypeName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSymbolTypeName_property.mObserverExplorer,
      valueExplorer: &self.mSymbolTypeName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDisplayComponentNameOffsetX",
      idx: self.mDisplayComponentNameOffsetX_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDisplayComponentNameOffsetX_property.mObserverExplorer,
      valueExplorer: &self.mDisplayComponentNameOffsetX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDisplayComponentNameOffsetY",
      idx: self.mDisplayComponentNameOffsetY_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDisplayComponentNameOffsetY_property.mObserverExplorer,
      valueExplorer: &self.mDisplayComponentNameOffsetY_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDisplayComponentValue",
      idx: self.mDisplayComponentValue_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDisplayComponentValue_property.mObserverExplorer,
      valueExplorer: &self.mDisplayComponentValue_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDisplayComponentValueOffsetX",
      idx: self.mDisplayComponentValueOffsetX_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDisplayComponentValueOffsetX_property.mObserverExplorer,
      valueExplorer: &self.mDisplayComponentValueOffsetX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDisplayComponentValueOffsetY",
      idx: self.mDisplayComponentValueOffsetY_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDisplayComponentValueOffsetY_property.mObserverExplorer,
      valueExplorer: &self.mDisplayComponentValueOffsetY_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "componentName",
      idx: self.componentName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.componentName_property.mObserverExplorer,
      valueExplorer: &self.componentName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "deviceName",
      idx: self.deviceName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.deviceName_property.mObserverExplorer,
      valueExplorer: &self.deviceName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "symbolInfo",
      idx: self.symbolInfo_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.symbolInfo_property.mObserverExplorer,
      valueExplorer: &self.symbolInfo_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx: self.objectDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.objectDisplay_property.mObserverExplorer,
      valueExplorer: &self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx: self.selectionDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
      valueExplorer: &self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "symbolInSchematic",
      idx: self.symbolInSchematic_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.symbolInSchematic_property.mObserverExplorer,
      valueExplorer: &self.symbolInSchematic_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "mPoints",
      idx:mPoints_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mPoints_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "mComponent",
      idx:self.mComponent_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mComponent_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mCenterX
    self.mCenterX_property.mObserverExplorer = nil
    self.mCenterX_property.mValueExplorer = nil
  //--- Atomic property: mCenterY
    self.mCenterY_property.mObserverExplorer = nil
    self.mCenterY_property.mValueExplorer = nil
  //--- Atomic property: mRotation
    self.mRotation_property.mObserverExplorer = nil
    self.mRotation_property.mValueExplorer = nil
  //--- Atomic property: mMirror
    self.mMirror_property.mObserverExplorer = nil
    self.mMirror_property.mValueExplorer = nil
  //--- Atomic property: mSymbolInstanceName
    self.mSymbolInstanceName_property.mObserverExplorer = nil
    self.mSymbolInstanceName_property.mValueExplorer = nil
  //--- Atomic property: mSymbolTypeName
    self.mSymbolTypeName_property.mObserverExplorer = nil
    self.mSymbolTypeName_property.mValueExplorer = nil
  //--- Atomic property: mDisplayComponentNameOffsetX
    self.mDisplayComponentNameOffsetX_property.mObserverExplorer = nil
    self.mDisplayComponentNameOffsetX_property.mValueExplorer = nil
  //--- Atomic property: mDisplayComponentNameOffsetY
    self.mDisplayComponentNameOffsetY_property.mObserverExplorer = nil
    self.mDisplayComponentNameOffsetY_property.mValueExplorer = nil
  //--- Atomic property: mDisplayComponentValue
    self.mDisplayComponentValue_property.mObserverExplorer = nil
    self.mDisplayComponentValue_property.mValueExplorer = nil
  //--- Atomic property: mDisplayComponentValueOffsetX
    self.mDisplayComponentValueOffsetX_property.mObserverExplorer = nil
    self.mDisplayComponentValueOffsetX_property.mValueExplorer = nil
  //--- Atomic property: mDisplayComponentValueOffsetY
    self.mDisplayComponentValueOffsetY_property.mObserverExplorer = nil
    self.mDisplayComponentValueOffsetY_property.mValueExplorer = nil
  //--- To many property: mPoints
    self.mPoints_property.mValueExplorer = nil
  //--- Atomic proxy property: componentValueProxy
    self.componentValueProxy_property.mObserverExplorer = nil
    self.componentValueProxy_property.mValueExplorer = nil
  //--- To one property: mComponent
    self.mComponent_property.mObserverExplorer = nil
    self.mComponent_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mPoints = []
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mComponent = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mCenterX
    self.mCenterX_property.storeIn (dictionary: ioDictionary, forKey:"mCenterX")
  //--- Atomic property: mCenterY
    self.mCenterY_property.storeIn (dictionary: ioDictionary, forKey:"mCenterY")
  //--- Atomic property: mRotation
    self.mRotation_property.storeIn (dictionary: ioDictionary, forKey:"mRotation")
  //--- Atomic property: mMirror
    self.mMirror_property.storeIn (dictionary: ioDictionary, forKey:"mMirror")
  //--- Atomic property: mSymbolInstanceName
    self.mSymbolInstanceName_property.storeIn (dictionary: ioDictionary, forKey:"mSymbolInstanceName")
  //--- Atomic property: mSymbolTypeName
    self.mSymbolTypeName_property.storeIn (dictionary: ioDictionary, forKey:"mSymbolTypeName")
  //--- Atomic property: mDisplayComponentNameOffsetX
    self.mDisplayComponentNameOffsetX_property.storeIn (dictionary: ioDictionary, forKey:"mDisplayComponentNameOffsetX")
  //--- Atomic property: mDisplayComponentNameOffsetY
    self.mDisplayComponentNameOffsetY_property.storeIn (dictionary: ioDictionary, forKey:"mDisplayComponentNameOffsetY")
  //--- Atomic property: mDisplayComponentValue
    self.mDisplayComponentValue_property.storeIn (dictionary: ioDictionary, forKey:"mDisplayComponentValue")
  //--- Atomic property: mDisplayComponentValueOffsetX
    self.mDisplayComponentValueOffsetX_property.storeIn (dictionary: ioDictionary, forKey:"mDisplayComponentValueOffsetX")
  //--- Atomic property: mDisplayComponentValueOffsetY
    self.mDisplayComponentValueOffsetY_property.storeIn (dictionary: ioDictionary, forKey:"mDisplayComponentValueOffsetY")
  //--- To many property: mPoints
    self.store (
      managedObjectArray: self.mPoints_property.propval,
      relationshipName: "mPoints",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mPoints
    self.mPoints_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mPoints",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [PointInSchematic])
  //--- To one property: mComponent
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mComponent",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? ComponentInProject {
        self.mComponent_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mCenterX
    self.mCenterX_property.readFrom (dictionary: inDictionary, forKey:"mCenterX")
  //--- Atomic property: mCenterY
    self.mCenterY_property.readFrom (dictionary: inDictionary, forKey:"mCenterY")
  //--- Atomic property: mRotation
    self.mRotation_property.readFrom (dictionary: inDictionary, forKey:"mRotation")
  //--- Atomic property: mMirror
    self.mMirror_property.readFrom (dictionary: inDictionary, forKey:"mMirror")
  //--- Atomic property: mSymbolInstanceName
    self.mSymbolInstanceName_property.readFrom (dictionary: inDictionary, forKey:"mSymbolInstanceName")
  //--- Atomic property: mSymbolTypeName
    self.mSymbolTypeName_property.readFrom (dictionary: inDictionary, forKey:"mSymbolTypeName")
  //--- Atomic property: mDisplayComponentNameOffsetX
    self.mDisplayComponentNameOffsetX_property.readFrom (dictionary: inDictionary, forKey:"mDisplayComponentNameOffsetX")
  //--- Atomic property: mDisplayComponentNameOffsetY
    self.mDisplayComponentNameOffsetY_property.readFrom (dictionary: inDictionary, forKey:"mDisplayComponentNameOffsetY")
  //--- Atomic property: mDisplayComponentValue
    self.mDisplayComponentValue_property.readFrom (dictionary: inDictionary, forKey:"mDisplayComponentValue")
  //--- Atomic property: mDisplayComponentValueOffsetX
    self.mDisplayComponentValueOffsetX_property.readFrom (dictionary: inDictionary, forKey:"mDisplayComponentValueOffsetX")
  //--- Atomic property: mDisplayComponentValueOffsetY
    self.mDisplayComponentValueOffsetY_property.readFrom (dictionary: inDictionary, forKey:"mDisplayComponentValueOffsetY")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mPoints
    for managedObject in self.mPoints {
      objects.append (managedObject)
    }
  //--- To one property: mComponent
    if let object = self.mComponent {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mPoints
    for managedObject in self.mPoints {
      objects.append (managedObject)
    }
  //--- To one property: mComponent
    if let object = self.mComponent {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

