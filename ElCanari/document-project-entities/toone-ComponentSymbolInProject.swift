//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_ComponentSymbolInProject 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_ComponentSymbolInProject : ReadOnlyAbstractObjectProperty <ComponentSymbolInProject> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : ComponentSymbolInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mCenterX_property.removeEBObserversFrom (&self.mObserversOf_mCenterX) // Stored property
      oldValue.mCenterY_property.removeEBObserversFrom (&self.mObserversOf_mCenterY) // Stored property
      oldValue.mRotation_property.removeEBObserversFrom (&self.mObserversOf_mRotation) // Stored property
      oldValue.mMirror_property.removeEBObserversFrom (&self.mObserversOf_mMirror) // Stored property
      oldValue.mSymbolInstanceName_property.removeEBObserversFrom (&self.mObserversOf_mSymbolInstanceName) // Stored property
      oldValue.mSymbolTypeName_property.removeEBObserversFrom (&self.mObserversOf_mSymbolTypeName) // Stored property
      oldValue.mDisplayComponentNameOffsetX_property.removeEBObserversFrom (&self.mObserversOf_mDisplayComponentNameOffsetX) // Stored property
      oldValue.mDisplayComponentNameOffsetY_property.removeEBObserversFrom (&self.mObserversOf_mDisplayComponentNameOffsetY) // Stored property
      oldValue.mDisplayComponentValue_property.removeEBObserversFrom (&self.mObserversOf_mDisplayComponentValue) // Stored property
      oldValue.mDisplayComponentValueOffsetX_property.removeEBObserversFrom (&self.mObserversOf_mDisplayComponentValueOffsetX) // Stored property
      oldValue.mDisplayComponentValueOffsetY_property.removeEBObserversFrom (&self.mObserversOf_mDisplayComponentValueOffsetY) // Stored property
      oldValue.componentName_property.removeEBObserversFrom (&self.mObserversOf_componentName) // Transient property
      oldValue.deviceName_property.removeEBObserversFrom (&self.mObserversOf_deviceName) // Transient property
      oldValue.symbolInfo_property.removeEBObserversFrom (&self.mObserversOf_symbolInfo) // Transient property
      oldValue.pinPadAssignments_property.removeEBObserversFrom (&self.mObserversOf_pinPadAssignments) // Transient property
      oldValue.objectDisplay_property.removeEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
      oldValue.selectionDisplay_property.removeEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
      oldValue.symbolInSchematic_property.removeEBObserversFrom (&self.mObserversOf_symbolInSchematic) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
      newValue.mCenterX_property.addEBObserversFrom (&self.mObserversOf_mCenterX) // Stored property
      newValue.mCenterY_property.addEBObserversFrom (&self.mObserversOf_mCenterY) // Stored property
      newValue.mRotation_property.addEBObserversFrom (&self.mObserversOf_mRotation) // Stored property
      newValue.mMirror_property.addEBObserversFrom (&self.mObserversOf_mMirror) // Stored property
      newValue.mSymbolInstanceName_property.addEBObserversFrom (&self.mObserversOf_mSymbolInstanceName) // Stored property
      newValue.mSymbolTypeName_property.addEBObserversFrom (&self.mObserversOf_mSymbolTypeName) // Stored property
      newValue.mDisplayComponentNameOffsetX_property.addEBObserversFrom (&self.mObserversOf_mDisplayComponentNameOffsetX) // Stored property
      newValue.mDisplayComponentNameOffsetY_property.addEBObserversFrom (&self.mObserversOf_mDisplayComponentNameOffsetY) // Stored property
      newValue.mDisplayComponentValue_property.addEBObserversFrom (&self.mObserversOf_mDisplayComponentValue) // Stored property
      newValue.mDisplayComponentValueOffsetX_property.addEBObserversFrom (&self.mObserversOf_mDisplayComponentValueOffsetX) // Stored property
      newValue.mDisplayComponentValueOffsetY_property.addEBObserversFrom (&self.mObserversOf_mDisplayComponentValueOffsetY) // Stored property
      newValue.componentName_property.addEBObserversFrom (&self.mObserversOf_componentName) // Transient property
      newValue.deviceName_property.addEBObserversFrom (&self.mObserversOf_deviceName) // Transient property
      newValue.symbolInfo_property.addEBObserversFrom (&self.mObserversOf_symbolInfo) // Transient property
      newValue.pinPadAssignments_property.addEBObserversFrom (&self.mObserversOf_pinPadAssignments) // Transient property
      newValue.objectDisplay_property.addEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
      newValue.selectionDisplay_property.addEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
      newValue.symbolInSchematic_property.addEBObserversFrom (&self.mObserversOf_symbolInSchematic) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mCenterX' stored property
  //····················································································································

//  private final var mCenterX_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_mCenterX = EBWeakEventSet ()

  //····················································································································

  final var mCenterX_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mCenterX_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mCenterX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCenterX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mCenterX_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCenterX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCenterX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mCenterX_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'mCenterY' stored property
  //····················································································································

//  private final var mCenterY_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_mCenterY = EBWeakEventSet ()

  //····················································································································

  final var mCenterY_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mCenterY_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mCenterY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCenterY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mCenterY_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCenterY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCenterY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mCenterY_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'mRotation' stored property
  //····················································································································

//  private final var mRotation_property = EBGenericPropertyProxy <QuadrantRotation?> ()
  private final var mObserversOf_mRotation = EBWeakEventSet ()

  //····················································································································

  final var mRotation_property_selection : EBSelection <QuadrantRotation?> {
    if let model = self.propval {
      switch (model.mRotation_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mRotation (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mRotation.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mRotation_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mRotation (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mRotation.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mRotation_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'mMirror' stored property
  //····················································································································

//  private final var mMirror_property = EBGenericPropertyProxy <Bool?> ()
  private final var mObserversOf_mMirror = EBWeakEventSet ()

  //····················································································································

  final var mMirror_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mMirror_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mMirror (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mMirror.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mMirror_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mMirror (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mMirror.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mMirror_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'mSymbolInstanceName' stored property
  //····················································································································

//  private final var mSymbolInstanceName_property = EBGenericPropertyProxy <String?> ()
  private final var mObserversOf_mSymbolInstanceName = EBWeakEventSet ()

  //····················································································································

  final var mSymbolInstanceName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mSymbolInstanceName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolInstanceName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolInstanceName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSymbolInstanceName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolInstanceName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolInstanceName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSymbolInstanceName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'mSymbolTypeName' stored property
  //····················································································································

//  private final var mSymbolTypeName_property = EBGenericPropertyProxy <String?> ()
  private final var mObserversOf_mSymbolTypeName = EBWeakEventSet ()

  //····················································································································

  final var mSymbolTypeName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mSymbolTypeName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolTypeName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolTypeName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSymbolTypeName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolTypeName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolTypeName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSymbolTypeName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'mDisplayComponentNameOffsetX' stored property
  //····················································································································

//  private final var mDisplayComponentNameOffsetX_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_mDisplayComponentNameOffsetX = EBWeakEventSet ()

  //····················································································································

  final var mDisplayComponentNameOffsetX_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mDisplayComponentNameOffsetX_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mDisplayComponentNameOffsetX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDisplayComponentNameOffsetX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mDisplayComponentNameOffsetX_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayComponentNameOffsetX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDisplayComponentNameOffsetX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mDisplayComponentNameOffsetX_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'mDisplayComponentNameOffsetY' stored property
  //····················································································································

//  private final var mDisplayComponentNameOffsetY_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_mDisplayComponentNameOffsetY = EBWeakEventSet ()

  //····················································································································

  final var mDisplayComponentNameOffsetY_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mDisplayComponentNameOffsetY_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mDisplayComponentNameOffsetY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDisplayComponentNameOffsetY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mDisplayComponentNameOffsetY_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayComponentNameOffsetY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDisplayComponentNameOffsetY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mDisplayComponentNameOffsetY_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'mDisplayComponentValue' stored property
  //····················································································································

//  private final var mDisplayComponentValue_property = EBGenericPropertyProxy <Bool?> ()
  private final var mObserversOf_mDisplayComponentValue = EBWeakEventSet ()

  //····················································································································

  final var mDisplayComponentValue_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mDisplayComponentValue_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mDisplayComponentValue (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDisplayComponentValue.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mDisplayComponentValue_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayComponentValue (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDisplayComponentValue.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mDisplayComponentValue_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'mDisplayComponentValueOffsetX' stored property
  //····················································································································

//  private final var mDisplayComponentValueOffsetX_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_mDisplayComponentValueOffsetX = EBWeakEventSet ()

  //····················································································································

  final var mDisplayComponentValueOffsetX_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mDisplayComponentValueOffsetX_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mDisplayComponentValueOffsetX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDisplayComponentValueOffsetX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mDisplayComponentValueOffsetX_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayComponentValueOffsetX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDisplayComponentValueOffsetX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mDisplayComponentValueOffsetX_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'mDisplayComponentValueOffsetY' stored property
  //····················································································································

//  private final var mDisplayComponentValueOffsetY_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_mDisplayComponentValueOffsetY = EBWeakEventSet ()

  //····················································································································

  final var mDisplayComponentValueOffsetY_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mDisplayComponentValueOffsetY_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mDisplayComponentValueOffsetY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDisplayComponentValueOffsetY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mDisplayComponentValueOffsetY_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayComponentValueOffsetY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDisplayComponentValueOffsetY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mDisplayComponentValueOffsetY_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'componentName' transient property
  //····················································································································

  private final var mObserversOf_componentName = EBWeakEventSet ()

  //····················································································································

  final var componentName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.componentName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_componentName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_componentName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.componentName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_componentName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_componentName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.componentName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'deviceName' transient property
  //····················································································································

  private final var mObserversOf_deviceName = EBWeakEventSet ()

  //····················································································································

  final var deviceName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.deviceName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_deviceName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_deviceName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.deviceName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_deviceName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.deviceName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'symbolInfo' transient property
  //····················································································································

  private final var mObserversOf_symbolInfo = EBWeakEventSet ()

  //····················································································································

  final var symbolInfo_property_selection : EBSelection <ComponentSymbolInfo?> {
    if let model = self.propval {
      switch (model.symbolInfo_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_symbolInfo (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolInfo.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.symbolInfo_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolInfo (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolInfo.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.symbolInfo_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'pinPadAssignments' transient property
  //····················································································································

  private final var mObserversOf_pinPadAssignments = EBWeakEventSet ()

  //····················································································································

  final var pinPadAssignments_property_selection : EBSelection <ThreeStringArray?> {
    if let model = self.propval {
      switch (model.pinPadAssignments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_pinPadAssignments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_pinPadAssignments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.pinPadAssignments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_pinPadAssignments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_pinPadAssignments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.pinPadAssignments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final var objectDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.objectDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final var selectionDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.selectionDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'symbolInSchematic' transient property
  //····················································································································

  private final var mObserversOf_symbolInSchematic = EBWeakEventSet ()

  //····················································································································

  final var symbolInSchematic_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.symbolInSchematic_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_symbolInSchematic (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolInSchematic.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.symbolInSchematic_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolInSchematic (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolInSchematic.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.symbolInSchematic_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mPoints
  //····················································································································

  private final var mObserversOf_mPoints = EBWeakEventSet ()

  //····················································································································

  final var mPoints_property_selection : EBSelection <[PointInSchematic]> {
    if let model = self.propval {
      switch (model.mPoints_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mPoints (_ inObserver : EBEvent) {
    self.mObserversOf_mPoints.insert (inObserver)
    if let object = self.propval {
      object.mPoints_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPoints (_ inObserver : EBEvent) {
    self.mObserversOf_mPoints.remove (inObserver)
    if let object = self.propval {
      object.mPoints_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT 
  //····················································································································

 // override init () {
//    super.init ()
  //--- Configure mCenterX simple stored property
 /*   self.mCenterX_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mCenterX_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mCenterX_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mCenterX_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mCenterX_property) */
  //--- Configure mCenterY simple stored property
 /*   self.mCenterY_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mCenterY_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mCenterY_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mCenterY_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mCenterY_property) */
  //--- Configure mRotation simple stored property
 /*   self.mRotation_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mRotation_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mRotation_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mRotation_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mRotation_property) */
  //--- Configure mMirror simple stored property
 /*   self.mMirror_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mMirror_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mMirror_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mMirror_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mMirror_property) */
  //--- Configure mSymbolInstanceName simple stored property
 /*   self.mSymbolInstanceName_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mSymbolInstanceName_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mSymbolInstanceName_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mSymbolInstanceName_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mSymbolInstanceName_property) */
  //--- Configure mSymbolTypeName simple stored property
 /*   self.mSymbolTypeName_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mSymbolTypeName_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mSymbolTypeName_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mSymbolTypeName_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mSymbolTypeName_property) */
  //--- Configure mDisplayComponentNameOffsetX simple stored property
 /*   self.mDisplayComponentNameOffsetX_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mDisplayComponentNameOffsetX_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mDisplayComponentNameOffsetX_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mDisplayComponentNameOffsetX_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mDisplayComponentNameOffsetX_property) */
  //--- Configure mDisplayComponentNameOffsetY simple stored property
 /*   self.mDisplayComponentNameOffsetY_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mDisplayComponentNameOffsetY_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mDisplayComponentNameOffsetY_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mDisplayComponentNameOffsetY_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mDisplayComponentNameOffsetY_property) */
  //--- Configure mDisplayComponentValue simple stored property
 /*   self.mDisplayComponentValue_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mDisplayComponentValue_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mDisplayComponentValue_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mDisplayComponentValue_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mDisplayComponentValue_property) */
  //--- Configure mDisplayComponentValueOffsetX simple stored property
 /*   self.mDisplayComponentValueOffsetX_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mDisplayComponentValueOffsetX_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mDisplayComponentValueOffsetX_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mDisplayComponentValueOffsetX_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mDisplayComponentValueOffsetX_property) */
  //--- Configure mDisplayComponentValueOffsetY simple stored property
 /*   self.mDisplayComponentValueOffsetY_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mDisplayComponentValueOffsetY_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mDisplayComponentValueOffsetY_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mDisplayComponentValueOffsetY_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mDisplayComponentValueOffsetY_property) */
 // }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject ComponentSymbolInProject
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_ComponentSymbolInProject : ReadOnlyObject_ComponentSymbolInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_ComponentSymbolInProject? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_ComponentSymbolInProject?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : ComponentSymbolInProject? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < ComponentSymbolInProject? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : ComponentSymbolInProject? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_ComponentSymbolInProject
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_ComponentSymbolInProject : ReadOnlyObject_ComponentSymbolInProject {

  //····················································································································
 
  func setProp (_ inValue : ComponentSymbolInProject?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_ComponentSymbolInProject
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_ComponentSymbolInProject : ReadWriteObject_ComponentSymbolInProject {

  //····················································································································

  private var mModel : ReadWriteObject_ComponentSymbolInProject? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_ComponentSymbolInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : ComponentSymbolInProject?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : ComponentSymbolInProject?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < ComponentSymbolInProject? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : ComponentSymbolInProject? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_ComponentSymbolInProject 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_ComponentSymbolInProject : ReadWriteObject_ComponentSymbolInProject, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ComponentSymbolInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ComponentSymbolInProject) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ComponentSymbolInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ComponentSymbolInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : ComponentSymbolInProject?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < ComponentSymbolInProject? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : ComponentSymbolInProject?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : ComponentSymbolInProject? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

