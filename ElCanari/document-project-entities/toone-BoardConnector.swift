//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_BoardConnector 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_BoardConnector : ReadOnlyAbstractObjectProperty <BoardConnector> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : BoardConnector?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.mComponentPadName_property.removeEBObserversFrom (&self.mObserversOf_mComponentPadName) // Stored property
    inOldValue?.mPadIndex_property.removeEBObserversFrom (&self.mObserversOf_mPadIndex) // Stored property
    inOldValue?.mX_property.removeEBObserversFrom (&self.mObserversOf_mX) // Stored property
    inOldValue?.mY_property.removeEBObserversFrom (&self.mObserversOf_mY) // Stored property
    inOldValue?.mDefaultHoleDiameterUnit_property.removeEBObserversFrom (&self.mObserversOf_mDefaultHoleDiameterUnit) // Stored property
    inOldValue?.mCustomHoleDiameter_property.removeEBObserversFrom (&self.mObserversOf_mCustomHoleDiameter) // Stored property
    inOldValue?.mCustomHoleDiameterUnit_property.removeEBObserversFrom (&self.mObserversOf_mCustomHoleDiameterUnit) // Stored property
    inOldValue?.mUsesCustomHoleDiameter_property.removeEBObserversFrom (&self.mObserversOf_mUsesCustomHoleDiameter) // Stored property
    inOldValue?.mDefaultPadDiameterUnit_property.removeEBObserversFrom (&self.mObserversOf_mDefaultPadDiameterUnit) // Stored property
    inOldValue?.mCustomPadDiameter_property.removeEBObserversFrom (&self.mObserversOf_mCustomPadDiameter) // Stored property
    inOldValue?.mCustomPadDiameterUnit_property.removeEBObserversFrom (&self.mObserversOf_mCustomPadDiameterUnit) // Stored property
    inOldValue?.mUsesCustomPadDiameter_property.removeEBObserversFrom (&self.mObserversOf_mUsesCustomPadDiameter) // Stored property
    inOldValue?.location_property.removeEBObserversFrom (&self.mObserversOf_location) // Transient property
    inOldValue?.netNameFromComponentPad_property.removeEBObserversFrom (&self.mObserversOf_netNameFromComponentPad) // Transient property
    inOldValue?.netNameAndPadLocation_property.removeEBObserversFrom (&self.mObserversOf_netNameAndPadLocation) // Transient property
    inOldValue?.side_property.removeEBObserversFrom (&self.mObserversOf_side) // Transient property
    inOldValue?.isVia_property.removeEBObserversFrom (&self.mObserversOf_isVia) // Transient property
    inOldValue?.issues_property.removeEBObserversFrom (&self.mObserversOf_issues) // Transient property
    inOldValue?.viaDefaultHoleDiameter_property.removeEBObserversFrom (&self.mObserversOf_viaDefaultHoleDiameter) // Transient property
    inOldValue?.viaDefaultPadDiameter_property.removeEBObserversFrom (&self.mObserversOf_viaDefaultPadDiameter) // Transient property
    inOldValue?.netNameFromTracks_property.removeEBObserversFrom (&self.mObserversOf_netNameFromTracks) // Transient property
    inOldValue?.netClassName_property.removeEBObserversFrom (&self.mObserversOf_netClassName) // Transient property
    inOldValue?.connectedToComponent_property.removeEBObserversFrom (&self.mObserversOf_connectedToComponent) // Transient property
    inOldValue?.actualHoleDiameter_property.removeEBObserversFrom (&self.mObserversOf_actualHoleDiameter) // Transient property
    inOldValue?.actualPadDiameter_property.removeEBObserversFrom (&self.mObserversOf_actualPadDiameter) // Transient property
    inOldValue?.objectDisplay_property.removeEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
    inOldValue?.selectionDisplay_property.removeEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
    inOldValue?.signatureForERCChecking_property.removeEBObserversFrom (&self.mObserversOf_signatureForERCChecking) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.mComponentPadName_property.addEBObserversFrom (&self.mObserversOf_mComponentPadName) // Stored property
    self.mInternalValue?.mPadIndex_property.addEBObserversFrom (&self.mObserversOf_mPadIndex) // Stored property
    self.mInternalValue?.mX_property.addEBObserversFrom (&self.mObserversOf_mX) // Stored property
    self.mInternalValue?.mY_property.addEBObserversFrom (&self.mObserversOf_mY) // Stored property
    self.mInternalValue?.mDefaultHoleDiameterUnit_property.addEBObserversFrom (&self.mObserversOf_mDefaultHoleDiameterUnit) // Stored property
    self.mInternalValue?.mCustomHoleDiameter_property.addEBObserversFrom (&self.mObserversOf_mCustomHoleDiameter) // Stored property
    self.mInternalValue?.mCustomHoleDiameterUnit_property.addEBObserversFrom (&self.mObserversOf_mCustomHoleDiameterUnit) // Stored property
    self.mInternalValue?.mUsesCustomHoleDiameter_property.addEBObserversFrom (&self.mObserversOf_mUsesCustomHoleDiameter) // Stored property
    self.mInternalValue?.mDefaultPadDiameterUnit_property.addEBObserversFrom (&self.mObserversOf_mDefaultPadDiameterUnit) // Stored property
    self.mInternalValue?.mCustomPadDiameter_property.addEBObserversFrom (&self.mObserversOf_mCustomPadDiameter) // Stored property
    self.mInternalValue?.mCustomPadDiameterUnit_property.addEBObserversFrom (&self.mObserversOf_mCustomPadDiameterUnit) // Stored property
    self.mInternalValue?.mUsesCustomPadDiameter_property.addEBObserversFrom (&self.mObserversOf_mUsesCustomPadDiameter) // Stored property
    self.mInternalValue?.location_property.addEBObserversFrom (&self.mObserversOf_location) // Transient property
    self.mInternalValue?.netNameFromComponentPad_property.addEBObserversFrom (&self.mObserversOf_netNameFromComponentPad) // Transient property
    self.mInternalValue?.netNameAndPadLocation_property.addEBObserversFrom (&self.mObserversOf_netNameAndPadLocation) // Transient property
    self.mInternalValue?.side_property.addEBObserversFrom (&self.mObserversOf_side) // Transient property
    self.mInternalValue?.isVia_property.addEBObserversFrom (&self.mObserversOf_isVia) // Transient property
    self.mInternalValue?.issues_property.addEBObserversFrom (&self.mObserversOf_issues) // Transient property
    self.mInternalValue?.viaDefaultHoleDiameter_property.addEBObserversFrom (&self.mObserversOf_viaDefaultHoleDiameter) // Transient property
    self.mInternalValue?.viaDefaultPadDiameter_property.addEBObserversFrom (&self.mObserversOf_viaDefaultPadDiameter) // Transient property
    self.mInternalValue?.netNameFromTracks_property.addEBObserversFrom (&self.mObserversOf_netNameFromTracks) // Transient property
    self.mInternalValue?.netClassName_property.addEBObserversFrom (&self.mObserversOf_netClassName) // Transient property
    self.mInternalValue?.connectedToComponent_property.addEBObserversFrom (&self.mObserversOf_connectedToComponent) // Transient property
    self.mInternalValue?.actualHoleDiameter_property.addEBObserversFrom (&self.mObserversOf_actualHoleDiameter) // Transient property
    self.mInternalValue?.actualPadDiameter_property.addEBObserversFrom (&self.mObserversOf_actualPadDiameter) // Transient property
    self.mInternalValue?.objectDisplay_property.addEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
    self.mInternalValue?.selectionDisplay_property.addEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
    self.mInternalValue?.signatureForERCChecking_property.addEBObserversFrom (&self.mObserversOf_signatureForERCChecking) // Transient property
  }

  //····················································································································
  //   Observers of 'mComponentPadName' stored property
  //····················································································································

  private var mObserversOf_mComponentPadName = EBWeakEventSet ()

  //····················································································································

  var mComponentPadName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mComponentPadName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mComponentPadName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mComponentPadName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mComponentPadName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComponentPadName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mComponentPadName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mComponentPadName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mComponentPadName_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_mComponentPadName.apply { (_ observer : EBEvent) in
        managedObject.mComponentPadName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mComponentPadName_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    self.mObserversOf_mComponentPadName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mComponentPadName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPadIndex' stored property
  //····················································································································

  private var mObserversOf_mPadIndex = EBWeakEventSet ()

  //····················································································································

  var mPadIndex_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mPadIndex_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPadIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPadIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mPadIndex_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPadIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPadIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mPadIndex_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mPadIndex_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_mPadIndex.apply { (_ observer : EBEvent) in
        managedObject.mPadIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPadIndex_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    self.mObserversOf_mPadIndex.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPadIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  var mX_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mX_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mX.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mX_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mX.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mX_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mX_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_mX.apply { (_ observer : EBEvent) in
        managedObject.mX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    self.mObserversOf_mX.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private var mObserversOf_mY = EBWeakEventSet ()

  //····················································································································

  var mY_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mY_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mY.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mY_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mY.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mY_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mY_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_mY.apply { (_ observer : EBEvent) in
        managedObject.mY_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mY_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    self.mObserversOf_mY.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDefaultHoleDiameterUnit' stored property
  //····················································································································

  private var mObserversOf_mDefaultHoleDiameterUnit = EBWeakEventSet ()

  //····················································································································

  var mDefaultHoleDiameterUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mDefaultHoleDiameterUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mDefaultHoleDiameterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDefaultHoleDiameterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mDefaultHoleDiameterUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDefaultHoleDiameterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDefaultHoleDiameterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mDefaultHoleDiameterUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mDefaultHoleDiameterUnit_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_mDefaultHoleDiameterUnit.apply { (_ observer : EBEvent) in
        managedObject.mDefaultHoleDiameterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDefaultHoleDiameterUnit_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    self.mObserversOf_mDefaultHoleDiameterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDefaultHoleDiameterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mCustomHoleDiameter' stored property
  //····················································································································

  private var mObserversOf_mCustomHoleDiameter = EBWeakEventSet ()

  //····················································································································

  var mCustomHoleDiameter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mCustomHoleDiameter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mCustomHoleDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCustomHoleDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mCustomHoleDiameter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCustomHoleDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCustomHoleDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mCustomHoleDiameter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mCustomHoleDiameter_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_mCustomHoleDiameter.apply { (_ observer : EBEvent) in
        managedObject.mCustomHoleDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCustomHoleDiameter_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    self.mObserversOf_mCustomHoleDiameter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mCustomHoleDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mCustomHoleDiameterUnit' stored property
  //····················································································································

  private var mObserversOf_mCustomHoleDiameterUnit = EBWeakEventSet ()

  //····················································································································

  var mCustomHoleDiameterUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mCustomHoleDiameterUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mCustomHoleDiameterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCustomHoleDiameterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mCustomHoleDiameterUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCustomHoleDiameterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCustomHoleDiameterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mCustomHoleDiameterUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mCustomHoleDiameterUnit_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_mCustomHoleDiameterUnit.apply { (_ observer : EBEvent) in
        managedObject.mCustomHoleDiameterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCustomHoleDiameterUnit_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    self.mObserversOf_mCustomHoleDiameterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mCustomHoleDiameterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mUsesCustomHoleDiameter' stored property
  //····················································································································

  private var mObserversOf_mUsesCustomHoleDiameter = EBWeakEventSet ()

  //····················································································································

  var mUsesCustomHoleDiameter_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mUsesCustomHoleDiameter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mUsesCustomHoleDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mUsesCustomHoleDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mUsesCustomHoleDiameter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mUsesCustomHoleDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mUsesCustomHoleDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mUsesCustomHoleDiameter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mUsesCustomHoleDiameter_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_mUsesCustomHoleDiameter.apply { (_ observer : EBEvent) in
        managedObject.mUsesCustomHoleDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mUsesCustomHoleDiameter_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    self.mObserversOf_mUsesCustomHoleDiameter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mUsesCustomHoleDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDefaultPadDiameterUnit' stored property
  //····················································································································

  private var mObserversOf_mDefaultPadDiameterUnit = EBWeakEventSet ()

  //····················································································································

  var mDefaultPadDiameterUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mDefaultPadDiameterUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mDefaultPadDiameterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDefaultPadDiameterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mDefaultPadDiameterUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDefaultPadDiameterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDefaultPadDiameterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mDefaultPadDiameterUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mDefaultPadDiameterUnit_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_mDefaultPadDiameterUnit.apply { (_ observer : EBEvent) in
        managedObject.mDefaultPadDiameterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDefaultPadDiameterUnit_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    self.mObserversOf_mDefaultPadDiameterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDefaultPadDiameterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mCustomPadDiameter' stored property
  //····················································································································

  private var mObserversOf_mCustomPadDiameter = EBWeakEventSet ()

  //····················································································································

  var mCustomPadDiameter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mCustomPadDiameter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mCustomPadDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCustomPadDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mCustomPadDiameter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCustomPadDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCustomPadDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mCustomPadDiameter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mCustomPadDiameter_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_mCustomPadDiameter.apply { (_ observer : EBEvent) in
        managedObject.mCustomPadDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCustomPadDiameter_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    self.mObserversOf_mCustomPadDiameter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mCustomPadDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mCustomPadDiameterUnit' stored property
  //····················································································································

  private var mObserversOf_mCustomPadDiameterUnit = EBWeakEventSet ()

  //····················································································································

  var mCustomPadDiameterUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mCustomPadDiameterUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mCustomPadDiameterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCustomPadDiameterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mCustomPadDiameterUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCustomPadDiameterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCustomPadDiameterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mCustomPadDiameterUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mCustomPadDiameterUnit_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_mCustomPadDiameterUnit.apply { (_ observer : EBEvent) in
        managedObject.mCustomPadDiameterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCustomPadDiameterUnit_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    self.mObserversOf_mCustomPadDiameterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mCustomPadDiameterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mUsesCustomPadDiameter' stored property
  //····················································································································

  private var mObserversOf_mUsesCustomPadDiameter = EBWeakEventSet ()

  //····················································································································

  var mUsesCustomPadDiameter_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mUsesCustomPadDiameter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mUsesCustomPadDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mUsesCustomPadDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mUsesCustomPadDiameter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mUsesCustomPadDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mUsesCustomPadDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mUsesCustomPadDiameter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mUsesCustomPadDiameter_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_mUsesCustomPadDiameter.apply { (_ observer : EBEvent) in
        managedObject.mUsesCustomPadDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mUsesCustomPadDiameter_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    self.mObserversOf_mUsesCustomPadDiameter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mUsesCustomPadDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'location' transient property
  //····················································································································

  private var mObserversOf_location = EBWeakEventSet ()

  //····················································································································

  var location_property_selection : EBSelection <CanariPoint?> {
    if let model = self.propval {
      switch (model.location_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_location (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_location.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.location_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_location (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_location.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.location_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_location_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_location.apply { (_ observer : EBEvent) in
        managedObject.location_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_location_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_location.apply { (_ observer : EBEvent) in
        managedObject.location_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netNameFromComponentPad' transient property
  //····················································································································

  private var mObserversOf_netNameFromComponentPad = EBWeakEventSet ()

  //····················································································································

  var netNameFromComponentPad_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.netNameFromComponentPad_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_netNameFromComponentPad (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netNameFromComponentPad.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netNameFromComponentPad_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_netNameFromComponentPad (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netNameFromComponentPad.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netNameFromComponentPad_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_netNameFromComponentPad_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_netNameFromComponentPad.apply { (_ observer : EBEvent) in
        managedObject.netNameFromComponentPad_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netNameFromComponentPad_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_netNameFromComponentPad.apply { (_ observer : EBEvent) in
        managedObject.netNameFromComponentPad_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netNameAndPadLocation' transient property
  //····················································································································

  private var mObserversOf_netNameAndPadLocation = EBWeakEventSet ()

  //····················································································································

  var netNameAndPadLocation_property_selection : EBSelection <RastnetInfoArray?> {
    if let model = self.propval {
      switch (model.netNameAndPadLocation_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_netNameAndPadLocation (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netNameAndPadLocation.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netNameAndPadLocation_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_netNameAndPadLocation (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netNameAndPadLocation.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netNameAndPadLocation_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_netNameAndPadLocation_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_netNameAndPadLocation.apply { (_ observer : EBEvent) in
        managedObject.netNameAndPadLocation_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netNameAndPadLocation_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_netNameAndPadLocation.apply { (_ observer : EBEvent) in
        managedObject.netNameAndPadLocation_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'side' transient property
  //····················································································································

  private var mObserversOf_side = EBWeakEventSet ()

  //····················································································································

  var side_property_selection : EBSelection <ConnectorSide?> {
    if let model = self.propval {
      switch (model.side_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_side (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_side.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.side_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_side (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_side.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.side_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_side_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_side.apply { (_ observer : EBEvent) in
        managedObject.side_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_side_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_side.apply { (_ observer : EBEvent) in
        managedObject.side_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'isVia' transient property
  //····················································································································

  private var mObserversOf_isVia = EBWeakEventSet ()

  //····················································································································

  var isVia_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.isVia_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_isVia (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_isVia.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.isVia_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_isVia (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_isVia.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.isVia_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_isVia_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_isVia.apply { (_ observer : EBEvent) in
        managedObject.isVia_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_isVia_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_isVia.apply { (_ observer : EBEvent) in
        managedObject.isVia_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.issues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaDefaultHoleDiameter' transient property
  //····················································································································

  private var mObserversOf_viaDefaultHoleDiameter = EBWeakEventSet ()

  //····················································································································

  var viaDefaultHoleDiameter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.viaDefaultHoleDiameter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_viaDefaultHoleDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_viaDefaultHoleDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.viaDefaultHoleDiameter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaDefaultHoleDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_viaDefaultHoleDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.viaDefaultHoleDiameter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_viaDefaultHoleDiameter_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_viaDefaultHoleDiameter.apply { (_ observer : EBEvent) in
        managedObject.viaDefaultHoleDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaDefaultHoleDiameter_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_viaDefaultHoleDiameter.apply { (_ observer : EBEvent) in
        managedObject.viaDefaultHoleDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaDefaultPadDiameter' transient property
  //····················································································································

  private var mObserversOf_viaDefaultPadDiameter = EBWeakEventSet ()

  //····················································································································

  var viaDefaultPadDiameter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.viaDefaultPadDiameter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_viaDefaultPadDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_viaDefaultPadDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.viaDefaultPadDiameter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaDefaultPadDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_viaDefaultPadDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.viaDefaultPadDiameter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_viaDefaultPadDiameter_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_viaDefaultPadDiameter.apply { (_ observer : EBEvent) in
        managedObject.viaDefaultPadDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaDefaultPadDiameter_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_viaDefaultPadDiameter.apply { (_ observer : EBEvent) in
        managedObject.viaDefaultPadDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netNameFromTracks' transient property
  //····················································································································

  private var mObserversOf_netNameFromTracks = EBWeakEventSet ()

  //····················································································································

  var netNameFromTracks_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.netNameFromTracks_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_netNameFromTracks (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netNameFromTracks.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netNameFromTracks_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_netNameFromTracks (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netNameFromTracks.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netNameFromTracks_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_netNameFromTracks_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_netNameFromTracks.apply { (_ observer : EBEvent) in
        managedObject.netNameFromTracks_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netNameFromTracks_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_netNameFromTracks.apply { (_ observer : EBEvent) in
        managedObject.netNameFromTracks_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netClassName' transient property
  //····················································································································

  private var mObserversOf_netClassName = EBWeakEventSet ()

  //····················································································································

  var netClassName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.netClassName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_netClassName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netClassName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netClassName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_netClassName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netClassName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netClassName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_netClassName_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_netClassName.apply { (_ observer : EBEvent) in
        managedObject.netClassName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netClassName_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_netClassName.apply { (_ observer : EBEvent) in
        managedObject.netClassName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connectedToComponent' transient property
  //····················································································································

  private var mObserversOf_connectedToComponent = EBWeakEventSet ()

  //····················································································································

  var connectedToComponent_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.connectedToComponent_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_connectedToComponent (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connectedToComponent.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connectedToComponent_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_connectedToComponent (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connectedToComponent.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connectedToComponent_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_connectedToComponent_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_connectedToComponent.apply { (_ observer : EBEvent) in
        managedObject.connectedToComponent_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connectedToComponent_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_connectedToComponent.apply { (_ observer : EBEvent) in
        managedObject.connectedToComponent_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'actualHoleDiameter' transient property
  //····················································································································

  private var mObserversOf_actualHoleDiameter = EBWeakEventSet ()

  //····················································································································

  var actualHoleDiameter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.actualHoleDiameter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_actualHoleDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_actualHoleDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.actualHoleDiameter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_actualHoleDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_actualHoleDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.actualHoleDiameter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_actualHoleDiameter_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_actualHoleDiameter.apply { (_ observer : EBEvent) in
        managedObject.actualHoleDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_actualHoleDiameter_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_actualHoleDiameter.apply { (_ observer : EBEvent) in
        managedObject.actualHoleDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'actualPadDiameter' transient property
  //····················································································································

  private var mObserversOf_actualPadDiameter = EBWeakEventSet ()

  //····················································································································

  var actualPadDiameter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.actualPadDiameter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_actualPadDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_actualPadDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.actualPadDiameter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_actualPadDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_actualPadDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.actualPadDiameter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_actualPadDiameter_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_actualPadDiameter.apply { (_ observer : EBEvent) in
        managedObject.actualPadDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_actualPadDiameter_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_actualPadDiameter.apply { (_ observer : EBEvent) in
        managedObject.actualPadDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  var objectDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.objectDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  var selectionDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.selectionDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  private var mObserversOf_signatureForERCChecking = EBWeakEventSet ()

  //····················································································································

  var signatureForERCChecking_property_selection : EBSelection <UInt32?> {
    if let model = self.propval {
      switch (model.signatureForERCChecking_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_signatureForERCChecking (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_signatureForERCChecking.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.signatureForERCChecking_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_signatureForERCChecking (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_signatureForERCChecking.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.signatureForERCChecking_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_signatureForERCChecking_toElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_signatureForERCChecking.apply { (_ observer : EBEvent) in
        managedObject.signatureForERCChecking_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_signatureForERCChecking_fromElementsOfSet (_ inSet : Set<BoardConnector>) {
    for managedObject in inSet {
      self.mObserversOf_signatureForERCChecking.apply { (_ observer : EBEvent) in
        managedObject.signatureForERCChecking_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observable toMany property: mTracksP2
  //····················································································································

  private var mObserversOf_mTracksP2 = EBWeakEventSet ()

  //····················································································································

  var mTracksP2_property_selection : EBSelection <[BoardTrack]> {
    if let model = self.propval {
      switch (model.mTracksP2_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mTracksP2 (_ inObserver : EBEvent) {
    self.mObserversOf_mTracksP2.insert (inObserver)
    if let object = self.propval {
      object.mTracksP2_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mTracksP2 (_ inObserver : EBEvent) {
    self.mObserversOf_mTracksP2.remove (inObserver)
    if let object = self.propval {
      object.mTracksP2_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mTracksP1
  //····················································································································

  private var mObserversOf_mTracksP1 = EBWeakEventSet ()

  //····················································································································

  var mTracksP1_property_selection : EBSelection <[BoardTrack]> {
    if let model = self.propval {
      switch (model.mTracksP1_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mTracksP1 (_ inObserver : EBEvent) {
    self.mObserversOf_mTracksP1.insert (inObserver)
    if let object = self.propval {
      object.mTracksP1_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mTracksP1 (_ inObserver : EBEvent) {
    self.mObserversOf_mTracksP1.remove (inObserver)
    if let object = self.propval {
      object.mTracksP1_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientObject BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientObject_BoardConnector : ReadOnlyObject_BoardConnector {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_BoardConnector? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_BoardConnector?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : BoardConnector? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < BoardConnector? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : BoardConnector? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_BoardConnector : ReadOnlyObject_BoardConnector {

  //····················································································································
 
  func setProp (_ inValue : BoardConnector?) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_BoardConnector : ReadWriteObject_BoardConnector {

  //····················································································································

  private var mModel : ReadWriteObject_BoardConnector? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_BoardConnector?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : BoardConnector?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : BoardConnector?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < BoardConnector? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : BoardConnector? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_BoardConnector 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_BoardConnector : ReadWriteObject_BoardConnector, EBSignatureObserverProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : BoardConnector) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : BoardConnector) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BoardConnector) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : BoardConnector) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : BoardConnector?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : BoardConnector?) {
    self.mInternalValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < BoardConnector? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : BoardConnector?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : BoardConnector? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

