//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_BoardConnector 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_BoardConnector : ReadOnlyAbstractObjectProperty <BoardConnector> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : BoardConnector?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.mComponentPadName_property.removeEBObserver (self.mComponentPadName_property) // Stored property
    inOldValue?.mPadIndex_property.removeEBObserver (self.mPadIndex_property) // Stored property
    inOldValue?.mX_property.removeEBObserver (self.mX_property) // Stored property
    inOldValue?.mY_property.removeEBObserver (self.mY_property) // Stored property
    inOldValue?.mDefaultHoleDiameterUnit_property.removeEBObserver (self.mDefaultHoleDiameterUnit_property) // Stored property
    inOldValue?.mCustomHoleDiameter_property.removeEBObserver (self.mCustomHoleDiameter_property) // Stored property
    inOldValue?.mCustomHoleDiameterUnit_property.removeEBObserver (self.mCustomHoleDiameterUnit_property) // Stored property
    inOldValue?.mUsesCustomHoleDiameter_property.removeEBObserver (self.mUsesCustomHoleDiameter_property) // Stored property
    inOldValue?.mDefaultPadDiameterUnit_property.removeEBObserver (self.mDefaultPadDiameterUnit_property) // Stored property
    inOldValue?.mCustomPadDiameter_property.removeEBObserver (self.mCustomPadDiameter_property) // Stored property
    inOldValue?.mCustomPadDiameterUnit_property.removeEBObserver (self.mCustomPadDiameterUnit_property) // Stored property
    inOldValue?.mUsesCustomPadDiameter_property.removeEBObserver (self.mUsesCustomPadDiameter_property) // Stored property
    inOldValue?.location_property.removeEBObserver (self.location_property) // Transient property
    inOldValue?.netNameFromComponentPad_property.removeEBObserver (self.netNameFromComponentPad_property) // Transient property
    inOldValue?.netNameAndPadLocation_property.removeEBObserver (self.netNameAndPadLocation_property) // Transient property
    inOldValue?.side_property.removeEBObserver (self.side_property) // Transient property
    inOldValue?.isVia_property.removeEBObserver (self.isVia_property) // Transient property
    inOldValue?.issues_property.removeEBObserver (self.issues_property) // Transient property
    inOldValue?.viaDefaultHoleDiameter_property.removeEBObserver (self.viaDefaultHoleDiameter_property) // Transient property
    inOldValue?.viaDefaultPadDiameter_property.removeEBObserver (self.viaDefaultPadDiameter_property) // Transient property
    inOldValue?.netNameFromTracks_property.removeEBObserver (self.netNameFromTracks_property) // Transient property
    inOldValue?.netClassName_property.removeEBObserver (self.netClassName_property) // Transient property
    inOldValue?.connectedToComponent_property.removeEBObserver (self.connectedToComponent_property) // Transient property
    inOldValue?.actualHoleDiameter_property.removeEBObserver (self.actualHoleDiameter_property) // Transient property
    inOldValue?.actualPadDiameter_property.removeEBObserver (self.actualPadDiameter_property) // Transient property
    inOldValue?.objectDisplay_property.removeEBObserver (self.objectDisplay_property) // Transient property
    inOldValue?.selectionDisplay_property.removeEBObserver (self.selectionDisplay_property) // Transient property
    inOldValue?.signatureForERCChecking_property.removeEBObserver (self.signatureForERCChecking_property) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.mComponentPadName_property.addEBObserver (self.mComponentPadName_property) // Stored property
    self.mInternalValue?.mPadIndex_property.addEBObserver (self.mPadIndex_property) // Stored property
    self.mInternalValue?.mX_property.addEBObserver (self.mX_property) // Stored property
    self.mInternalValue?.mY_property.addEBObserver (self.mY_property) // Stored property
    self.mInternalValue?.mDefaultHoleDiameterUnit_property.addEBObserver (self.mDefaultHoleDiameterUnit_property) // Stored property
    self.mInternalValue?.mCustomHoleDiameter_property.addEBObserver (self.mCustomHoleDiameter_property) // Stored property
    self.mInternalValue?.mCustomHoleDiameterUnit_property.addEBObserver (self.mCustomHoleDiameterUnit_property) // Stored property
    self.mInternalValue?.mUsesCustomHoleDiameter_property.addEBObserver (self.mUsesCustomHoleDiameter_property) // Stored property
    self.mInternalValue?.mDefaultPadDiameterUnit_property.addEBObserver (self.mDefaultPadDiameterUnit_property) // Stored property
    self.mInternalValue?.mCustomPadDiameter_property.addEBObserver (self.mCustomPadDiameter_property) // Stored property
    self.mInternalValue?.mCustomPadDiameterUnit_property.addEBObserver (self.mCustomPadDiameterUnit_property) // Stored property
    self.mInternalValue?.mUsesCustomPadDiameter_property.addEBObserver (self.mUsesCustomPadDiameter_property) // Stored property
    self.mInternalValue?.location_property.addEBObserver (self.location_property) // Transient property
    self.mInternalValue?.netNameFromComponentPad_property.addEBObserver (self.netNameFromComponentPad_property) // Transient property
    self.mInternalValue?.netNameAndPadLocation_property.addEBObserver (self.netNameAndPadLocation_property) // Transient property
    self.mInternalValue?.side_property.addEBObserver (self.side_property) // Transient property
    self.mInternalValue?.isVia_property.addEBObserver (self.isVia_property) // Transient property
    self.mInternalValue?.issues_property.addEBObserver (self.issues_property) // Transient property
    self.mInternalValue?.viaDefaultHoleDiameter_property.addEBObserver (self.viaDefaultHoleDiameter_property) // Transient property
    self.mInternalValue?.viaDefaultPadDiameter_property.addEBObserver (self.viaDefaultPadDiameter_property) // Transient property
    self.mInternalValue?.netNameFromTracks_property.addEBObserver (self.netNameFromTracks_property) // Transient property
    self.mInternalValue?.netClassName_property.addEBObserver (self.netClassName_property) // Transient property
    self.mInternalValue?.connectedToComponent_property.addEBObserver (self.connectedToComponent_property) // Transient property
    self.mInternalValue?.actualHoleDiameter_property.addEBObserver (self.actualHoleDiameter_property) // Transient property
    self.mInternalValue?.actualPadDiameter_property.addEBObserver (self.actualPadDiameter_property) // Transient property
    self.mInternalValue?.objectDisplay_property.addEBObserver (self.objectDisplay_property) // Transient property
    self.mInternalValue?.selectionDisplay_property.addEBObserver (self.selectionDisplay_property) // Transient property
    self.mInternalValue?.signatureForERCChecking_property.addEBObserver (self.signatureForERCChecking_property) // Transient property
  }

  //····················································································································
  //   init
  //····················································································································

  override init () {
    super.init ()
    self.mComponentPadName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mComponentPadName_property.prop ?? .empty }
    self.mComponentPadName_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.mComponentPadName_property.setProp (inValue) }
    self.mPadIndex_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mPadIndex_property.prop ?? .empty }
    self.mPadIndex_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mPadIndex_property.setProp (inValue) }
    self.mX_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mX_property.prop ?? .empty }
    self.mX_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mX_property.setProp (inValue) }
    self.mY_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mY_property.prop ?? .empty }
    self.mY_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mY_property.setProp (inValue) }
    self.mDefaultHoleDiameterUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mDefaultHoleDiameterUnit_property.prop ?? .empty }
    self.mDefaultHoleDiameterUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mDefaultHoleDiameterUnit_property.setProp (inValue) }
    self.mCustomHoleDiameter_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mCustomHoleDiameter_property.prop ?? .empty }
    self.mCustomHoleDiameter_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mCustomHoleDiameter_property.setProp (inValue) }
    self.mCustomHoleDiameterUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mCustomHoleDiameterUnit_property.prop ?? .empty }
    self.mCustomHoleDiameterUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mCustomHoleDiameterUnit_property.setProp (inValue) }
    self.mUsesCustomHoleDiameter_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mUsesCustomHoleDiameter_property.prop ?? .empty }
    self.mUsesCustomHoleDiameter_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mUsesCustomHoleDiameter_property.setProp (inValue) }
    self.mDefaultPadDiameterUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mDefaultPadDiameterUnit_property.prop ?? .empty }
    self.mDefaultPadDiameterUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mDefaultPadDiameterUnit_property.setProp (inValue) }
    self.mCustomPadDiameter_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mCustomPadDiameter_property.prop ?? .empty }
    self.mCustomPadDiameter_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mCustomPadDiameter_property.setProp (inValue) }
    self.mCustomPadDiameterUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mCustomPadDiameterUnit_property.prop ?? .empty }
    self.mCustomPadDiameterUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mCustomPadDiameterUnit_property.setProp (inValue) }
    self.mUsesCustomPadDiameter_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mUsesCustomPadDiameter_property.prop ?? .empty }
    self.mUsesCustomPadDiameter_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mUsesCustomPadDiameter_property.setProp (inValue) }
    self.location_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.location_property.prop ?? .empty }
    self.netNameFromComponentPad_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.netNameFromComponentPad_property.prop ?? .empty }
    self.netNameAndPadLocation_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.netNameAndPadLocation_property.prop ?? .empty }
    self.side_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.side_property.prop ?? .empty }
    self.isVia_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.isVia_property.prop ?? .empty }
    self.issues_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.issues_property.prop ?? .empty }
    self.viaDefaultHoleDiameter_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.viaDefaultHoleDiameter_property.prop ?? .empty }
    self.viaDefaultPadDiameter_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.viaDefaultPadDiameter_property.prop ?? .empty }
    self.netNameFromTracks_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.netNameFromTracks_property.prop ?? .empty }
    self.netClassName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.netClassName_property.prop ?? .empty }
    self.connectedToComponent_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.connectedToComponent_property.prop ?? .empty }
    self.actualHoleDiameter_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.actualHoleDiameter_property.prop ?? .empty }
    self.actualPadDiameter_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.actualPadDiameter_property.prop ?? .empty }
    self.objectDisplay_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.objectDisplay_property.prop ?? .empty }
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.selectionDisplay_property.prop ?? .empty }
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.signatureForERCChecking_property.prop ?? .empty }
  }

  //····················································································································
  //   Proxy of 'mComponentPadName' stored property
  //····················································································································

  let mComponentPadName_property = EBPropertyProxy_String ()

  var mComponentPadName_property_selection : EBSelection <String> {
    switch (self.mComponentPadName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mPadIndex' stored property
  //····················································································································

  let mPadIndex_property = EBPropertyProxy_Int ()

  var mPadIndex_property_selection : EBSelection <Int> {
    switch (self.mPadIndex_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mX' stored property
  //····················································································································

  let mX_property = EBPropertyProxy_Int ()

  var mX_property_selection : EBSelection <Int> {
    switch (self.mX_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mY' stored property
  //····················································································································

  let mY_property = EBPropertyProxy_Int ()

  var mY_property_selection : EBSelection <Int> {
    switch (self.mY_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mDefaultHoleDiameterUnit' stored property
  //····················································································································

  let mDefaultHoleDiameterUnit_property = EBPropertyProxy_Int ()

  var mDefaultHoleDiameterUnit_property_selection : EBSelection <Int> {
    switch (self.mDefaultHoleDiameterUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mCustomHoleDiameter' stored property
  //····················································································································

  let mCustomHoleDiameter_property = EBPropertyProxy_Int ()

  var mCustomHoleDiameter_property_selection : EBSelection <Int> {
    switch (self.mCustomHoleDiameter_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mCustomHoleDiameterUnit' stored property
  //····················································································································

  let mCustomHoleDiameterUnit_property = EBPropertyProxy_Int ()

  var mCustomHoleDiameterUnit_property_selection : EBSelection <Int> {
    switch (self.mCustomHoleDiameterUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mUsesCustomHoleDiameter' stored property
  //····················································································································

  let mUsesCustomHoleDiameter_property = EBPropertyProxy_Bool ()

  var mUsesCustomHoleDiameter_property_selection : EBSelection <Bool> {
    switch (self.mUsesCustomHoleDiameter_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mDefaultPadDiameterUnit' stored property
  //····················································································································

  let mDefaultPadDiameterUnit_property = EBPropertyProxy_Int ()

  var mDefaultPadDiameterUnit_property_selection : EBSelection <Int> {
    switch (self.mDefaultPadDiameterUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mCustomPadDiameter' stored property
  //····················································································································

  let mCustomPadDiameter_property = EBPropertyProxy_Int ()

  var mCustomPadDiameter_property_selection : EBSelection <Int> {
    switch (self.mCustomPadDiameter_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mCustomPadDiameterUnit' stored property
  //····················································································································

  let mCustomPadDiameterUnit_property = EBPropertyProxy_Int ()

  var mCustomPadDiameterUnit_property_selection : EBSelection <Int> {
    switch (self.mCustomPadDiameterUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mUsesCustomPadDiameter' stored property
  //····················································································································

  let mUsesCustomPadDiameter_property = EBPropertyProxy_Bool ()

  var mUsesCustomPadDiameter_property_selection : EBSelection <Bool> {
    switch (self.mUsesCustomPadDiameter_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'location' transient property
  //····················································································································

  let location_property = EBTransientProperty_CanariPoint ()

  var location_property_selection : EBSelection <CanariPoint> {
    switch (self.location_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'netNameFromComponentPad' transient property
  //····················································································································

  let netNameFromComponentPad_property = EBTransientProperty_String ()

  var netNameFromComponentPad_property_selection : EBSelection <String> {
    switch (self.netNameFromComponentPad_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'netNameAndPadLocation' transient property
  //····················································································································

  let netNameAndPadLocation_property = EBTransientProperty_RastnetInfoArray ()

  var netNameAndPadLocation_property_selection : EBSelection <RastnetInfoArray> {
    switch (self.netNameAndPadLocation_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'side' transient property
  //····················································································································

  let side_property = EBTransientProperty_ConnectorSide ()

  var side_property_selection : EBSelection <ConnectorSide> {
    switch (self.side_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'isVia' transient property
  //····················································································································

  let isVia_property = EBTransientProperty_Bool ()

  var isVia_property_selection : EBSelection <Bool> {
    switch (self.isVia_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'issues' transient property
  //····················································································································

  let issues_property = EBTransientProperty_CanariIssueArray ()

  var issues_property_selection : EBSelection <CanariIssueArray> {
    switch (self.issues_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'viaDefaultHoleDiameter' transient property
  //····················································································································

  let viaDefaultHoleDiameter_property = EBTransientProperty_Int ()

  var viaDefaultHoleDiameter_property_selection : EBSelection <Int> {
    switch (self.viaDefaultHoleDiameter_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'viaDefaultPadDiameter' transient property
  //····················································································································

  let viaDefaultPadDiameter_property = EBTransientProperty_Int ()

  var viaDefaultPadDiameter_property_selection : EBSelection <Int> {
    switch (self.viaDefaultPadDiameter_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'netNameFromTracks' transient property
  //····················································································································

  let netNameFromTracks_property = EBTransientProperty_String ()

  var netNameFromTracks_property_selection : EBSelection <String> {
    switch (self.netNameFromTracks_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'netClassName' transient property
  //····················································································································

  let netClassName_property = EBTransientProperty_String ()

  var netClassName_property_selection : EBSelection <String> {
    switch (self.netClassName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'connectedToComponent' transient property
  //····················································································································

  let connectedToComponent_property = EBTransientProperty_Bool ()

  var connectedToComponent_property_selection : EBSelection <Bool> {
    switch (self.connectedToComponent_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'actualHoleDiameter' transient property
  //····················································································································

  let actualHoleDiameter_property = EBTransientProperty_Int ()

  var actualHoleDiameter_property_selection : EBSelection <Int> {
    switch (self.actualHoleDiameter_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'actualPadDiameter' transient property
  //····················································································································

  let actualPadDiameter_property = EBTransientProperty_Int ()

  var actualPadDiameter_property_selection : EBSelection <Int> {
    switch (self.actualPadDiameter_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'objectDisplay' transient property
  //····················································································································

  let objectDisplay_property = EBTransientProperty_EBShape ()

  var objectDisplay_property_selection : EBSelection <EBShape> {
    switch (self.objectDisplay_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'selectionDisplay' transient property
  //····················································································································

  let selectionDisplay_property = EBTransientProperty_EBShape ()

  var selectionDisplay_property_selection : EBSelection <EBShape> {
    switch (self.selectionDisplay_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'signatureForERCChecking' transient property
  //····················································································································

  let signatureForERCChecking_property = EBTransientProperty_UInt32 ()

  var signatureForERCChecking_property_selection : EBSelection <UInt32> {
    switch (self.signatureForERCChecking_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observable toMany property: mTracksP2
  //····················································································································

  private var mObserversOf_mTracksP2 = EBWeakEventSet ()

  //····················································································································

  var mTracksP2_property_selection : EBSelection <[BoardTrack]> {
    if let model = self.propval {
      switch (model.mTracksP2_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mTracksP2 (_ inObserver : EBEvent) {
    self.mObserversOf_mTracksP2.insert (inObserver)
    if let object = self.propval {
      object.mTracksP2_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mTracksP2 (_ inObserver : EBEvent) {
    self.mObserversOf_mTracksP2.remove (inObserver)
    if let object = self.propval {
      object.mTracksP2_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mTracksP1
  //····················································································································

  private var mObserversOf_mTracksP1 = EBWeakEventSet ()

  //····················································································································

  var mTracksP1_property_selection : EBSelection <[BoardTrack]> {
    if let model = self.propval {
      switch (model.mTracksP1_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mTracksP1 (_ inObserver : EBEvent) {
    self.mObserversOf_mTracksP1.insert (inObserver)
    if let object = self.propval {
      object.mTracksP1_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mTracksP1 (_ inObserver : EBEvent) {
    self.mObserversOf_mTracksP1.remove (inObserver)
    if let object = self.propval {
      object.mTracksP1_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    TransientObject BoardConnector
//----------------------------------------------------------------------------------------------------------------------

class TransientObject_BoardConnector : ReadOnlyObject_BoardConnector {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_BoardConnector? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_BoardConnector?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : BoardConnector? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < BoardConnector? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : BoardConnector? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_BoardConnector
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_BoardConnector : ReadOnlyObject_BoardConnector {

  //····················································································································
 
  func setProp (_ inValue : BoardConnector?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_BoardConnector
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_BoardConnector : ReadWriteObject_BoardConnector {

  //····················································································································

  private var mModel : ReadWriteObject_BoardConnector? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_BoardConnector?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : BoardConnector?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : BoardConnector?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < BoardConnector? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : BoardConnector? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_BoardConnector 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_BoardConnector : ReadWriteObject_BoardConnector, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : BoardConnector) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : BoardConnector) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BoardConnector) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : BoardConnector) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : BoardConnector?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < BoardConnector? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : BoardConnector?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : BoardConnector? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

