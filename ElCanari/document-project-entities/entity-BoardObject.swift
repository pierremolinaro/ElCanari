//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardObject_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardObject_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardObject_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardObject_isPlacedInBoard : class {
  var isPlacedInBoard : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardObject_displayFrontPads : class {
  var displayFrontPads : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardObject_displayBackPads : class {
  var displayBackPads : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardObject_displayPadNumbers : class {
  var displayPadNumbers : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardObject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class BoardObject : EBGraphicManagedObject,
         BoardObject_issues,
         BoardObject_selectionDisplay,
         BoardObject_objectDisplay,
         BoardObject_isPlacedInBoard,
         BoardObject_displayFrontPads,
         BoardObject_displayBackPads,
         BoardObject_displayPadNumbers {

  //····················································································································
  //   Transient property: issues
  //····················································································································

  let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray> {
    return self.issues_property.prop
  }

  //····················································································································

  var issues : CanariIssueArray? {
    switch self.issues_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   To one property: mRoot
  //····················································································································

   let mRoot_property = StoredObject_ProjectRoot ()

  //····················································································································

  var mRoot_property_selection : EBSelection <ProjectRoot?> {
    return .single (self.mRoot_property.propval)
  }

  //····················································································································

  var mRoot : ProjectRoot? {
    get {
      return self.mRoot_property.propval
    }
    set {
      if self.mRoot_property.propval != nil {
        self.mRoot_property.setProp (nil)
      }
      if newValue != nil {
        self.mRoot_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mRoot_none : StoredObject_ProjectRoot { return self.mRoot_property }

  //····················································································································

  var mRoot_none_selection : EBSelection <Bool> {
    return .single (self.mRoot_property.propval == nil)
  }

  //····················································································································
  //   Transient property: isPlacedInBoard
  //····················································································································

  let isPlacedInBoard_property = EBTransientProperty_Bool ()

  //····················································································································

  var isPlacedInBoard_property_selection : EBSelection <Bool> {
    return self.isPlacedInBoard_property.prop
  }

  //····················································································································

  var isPlacedInBoard : Bool? {
    switch self.isPlacedInBoard_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: displayFrontPads
  //····················································································································

  let displayFrontPads_property = EBTransientProperty_Bool ()

  //····················································································································

  var displayFrontPads_property_selection : EBSelection <Bool> {
    return self.displayFrontPads_property.prop
  }

  //····················································································································

  var displayFrontPads : Bool? {
    switch self.displayFrontPads_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: displayBackPads
  //····················································································································

  let displayBackPads_property = EBTransientProperty_Bool ()

  //····················································································································

  var displayBackPads_property_selection : EBSelection <Bool> {
    return self.displayBackPads_property.prop
  }

  //····················································································································

  var displayBackPads : Bool? {
    switch self.displayBackPads_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: displayPadNumbers
  //····················································································································

  let displayPadNumbers_property = EBTransientProperty_Bool ()

  //····················································································································

  var displayPadNumbers_property_selection : EBSelection <Bool> {
    return self.displayPadNumbers_property.prop
  }

  //····················································································································

  var displayPadNumbers : Bool? {
    switch self.displayPadNumbers_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- To one property: mRoot (has opposite to many relationship: mBoardObjects)
    self.mRoot_property.ebUndoManager = self.ebUndoManager
    self.mRoot_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mBoardObjects_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mBoardObjects_property.remove (me) } }
    )
  //--- Atomic property: isPlacedInBoard
    self.isPlacedInBoard_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mRoot_none_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mRoot_none_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardObject_isPlacedInBoard (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.addEBObserver (self.isPlacedInBoard_property)
  //--- Atomic property: displayFrontPads
    self.displayFrontPads_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mRoot_property.mDisplayFrontPads_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mRoot_property.mDisplayFrontPads_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardObject_displayFrontPads (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.addEBObserverOf_mDisplayFrontPads (self.displayFrontPads_property)
  //--- Atomic property: displayBackPads
    self.displayBackPads_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mRoot_property.mDisplayBackPads_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mRoot_property.mDisplayBackPads_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardObject_displayBackPads (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.addEBObserverOf_mDisplayBackPads (self.displayBackPads_property)
  //--- Atomic property: displayPadNumbers
    self.displayPadNumbers_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mRoot_property.mDisplayPadNumbers_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mRoot_property.mDisplayPadNumbers_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardObject_displayPadNumbers (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mRoot_property.addEBObserverOf_mDisplayPadNumbers (self.displayPadNumbers_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mRoot_property.removeEBObserver (self.isPlacedInBoard_property)
    self.mRoot_property.removeEBObserverOf_mDisplayFrontPads (self.displayFrontPads_property)
    self.mRoot_property.removeEBObserverOf_mDisplayBackPads (self.displayBackPads_property)
    self.mRoot_property.removeEBObserverOf_mDisplayPadNumbers (self.displayPadNumbers_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "issues",
      idx: self.issues_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.issues_property.mObserverExplorer,
      valueExplorer: &self.issues_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx: self.selectionDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
      valueExplorer: &self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx: self.objectDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.objectDisplay_property.mObserverExplorer,
      valueExplorer: &self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "isPlacedInBoard",
      idx: self.isPlacedInBoard_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.isPlacedInBoard_property.mObserverExplorer,
      valueExplorer: &self.isPlacedInBoard_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayFrontPads",
      idx: self.displayFrontPads_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.displayFrontPads_property.mObserverExplorer,
      valueExplorer: &self.displayFrontPads_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayBackPads",
      idx: self.displayBackPads_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.displayBackPads_property.mObserverExplorer,
      valueExplorer: &self.displayBackPads_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "displayPadNumbers",
      idx: self.displayPadNumbers_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.displayPadNumbers_property.mObserverExplorer,
      valueExplorer: &self.displayPadNumbers_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "mRoot",
      idx:self.mRoot_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mRoot_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- To one property: mRoot
    self.mRoot_property.mObserverExplorer = nil
    self.mRoot_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mRoot = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To one property: mRoot
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mRoot",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? ProjectRoot {
        self.mRoot_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To one property: mRoot
    if let object = self.mRoot {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To one property: mRoot
    if let object = self.mRoot {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

