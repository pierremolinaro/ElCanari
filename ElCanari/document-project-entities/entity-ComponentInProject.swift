//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mNamePrefix : class {
  var mNamePrefix : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mNameIndex : class {
  var mNameIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mX : class {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mXUnit : class {
  var mXUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mY : class {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mYUnit : class {
  var mYUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mRotation : class {
  var mRotation : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mSide : class {
  var mSide : ComponentSide { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mNameFontSize : class {
  var mNameFontSize : Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mXName : class {
  var mXName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mYName : class {
  var mYName : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mNameIsVisibleInBoard : class {
  var mNameIsVisibleInBoard : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mNameRotation : class {
  var mNameRotation : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mComponentValue : class {
  var mComponentValue : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mValueFontSize : class {
  var mValueFontSize : Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mXValue : class {
  var mXValue : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mYValue : class {
  var mYValue : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mValueIsVisibleInBoard : class {
  var mValueIsVisibleInBoard : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mValueRotation : class {
  var mValueRotation : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_componentNameFontName : class {
  var componentNameFontName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_componentValueFontName : class {
  var componentValueFontName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_componentName : class {
  var componentName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_packagePadDictionary : class {
  var packagePadDictionary : PackageMasterPadDictionary? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_deviceName : class {
  var deviceName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_selectedPackageName : class {
  var selectedPackageName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_availablePackages : class {
  var availablePackages : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_unplacedSymbols : class {
  var unplacedSymbols : StringTagArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_componentIsPlacedInBoard : class {
  var componentIsPlacedInBoard : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_componentIsPlacedInBoardString : class {
  var componentIsPlacedInBoardString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_deviceSymbolDictionary : class {
  var deviceSymbolDictionary : DeviceSymbolDictionary? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_placementInSchematic : class {
  var placementInSchematic : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_strokeBezierPath : class {
  var strokeBezierPath : NSBezierPath? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_componentPadDictionary : class {
  var componentPadDictionary : ComponentPadDescriptorDictionary? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ComponentInProject : BoardObject,
         ComponentInProject_mNamePrefix,
         ComponentInProject_mNameIndex,
         ComponentInProject_mX,
         ComponentInProject_mXUnit,
         ComponentInProject_mY,
         ComponentInProject_mYUnit,
         ComponentInProject_mRotation,
         ComponentInProject_mSide,
         ComponentInProject_mNameFontSize,
         ComponentInProject_mXName,
         ComponentInProject_mYName,
         ComponentInProject_mNameIsVisibleInBoard,
         ComponentInProject_mNameRotation,
         ComponentInProject_mComponentValue,
         ComponentInProject_mValueFontSize,
         ComponentInProject_mXValue,
         ComponentInProject_mYValue,
         ComponentInProject_mValueIsVisibleInBoard,
         ComponentInProject_mValueRotation,
         ComponentInProject_componentNameFontName,
         ComponentInProject_componentValueFontName,
         ComponentInProject_componentName,
         ComponentInProject_packagePadDictionary,
         ComponentInProject_deviceName,
         ComponentInProject_selectedPackageName,
         ComponentInProject_availablePackages,
         ComponentInProject_unplacedSymbols,
         ComponentInProject_componentIsPlacedInBoard,
         ComponentInProject_componentIsPlacedInBoardString,
         ComponentInProject_deviceSymbolDictionary,
         ComponentInProject_placementInSchematic,
         ComponentInProject_strokeBezierPath,
         ComponentInProject_objectDisplay,
         ComponentInProject_selectionDisplay,
         ComponentInProject_componentPadDictionary {

  //····················································································································
  //   Atomic property: mNamePrefix
  //····················································································································

  let mNamePrefix_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mNamePrefix : String {
    get { return self.mNamePrefix_property.propval }
    set { self.mNamePrefix_property.setProp (newValue) }
  }

  //····················································································································

  var mNamePrefix_property_selection : EBSelection <String> { return self.mNamePrefix_property.prop }

  //····················································································································
  //   Atomic property: mNameIndex
  //····················································································································

  let mNameIndex_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mNameIndex : Int {
    get { return self.mNameIndex_property.propval }
    set { self.mNameIndex_property.setProp (newValue) }
  }

  //····················································································································

  var mNameIndex_property_selection : EBSelection <Int> { return self.mNameIndex_property.prop }

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  let mX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································

  var mX_property_selection : EBSelection <Int> { return self.mX_property.prop }

  //····················································································································
  //   Atomic property: mXUnit
  //····················································································································

  let mXUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var mXUnit : Int {
    get { return self.mXUnit_property.propval }
    set { self.mXUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mXUnit_property_selection : EBSelection <Int> { return self.mXUnit_property.prop }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  let mY_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································

  var mY_property_selection : EBSelection <Int> { return self.mY_property.prop }

  //····················································································································
  //   Atomic property: mYUnit
  //····················································································································

  let mYUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var mYUnit : Int {
    get { return self.mYUnit_property.propval }
    set { self.mYUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mYUnit_property_selection : EBSelection <Int> { return self.mYUnit_property.prop }

  //····················································································································
  //   Atomic property: mRotation
  //····················································································································

  let mRotation_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mRotation : Int {
    get { return self.mRotation_property.propval }
    set { self.mRotation_property.setProp (newValue) }
  }

  //····················································································································

  var mRotation_property_selection : EBSelection <Int> { return self.mRotation_property.prop }

  //····················································································································
  //   Atomic property: mSide
  //····················································································································

  let mSide_property = EBStoredProperty_ComponentSide (defaultValue: ComponentSide.front)

  //····················································································································

  var mSide : ComponentSide {
    get { return self.mSide_property.propval }
    set { self.mSide_property.setProp (newValue) }
  }

  //····················································································································

  var mSide_property_selection : EBSelection <ComponentSide> { return self.mSide_property.prop }

  //····················································································································
  //   Atomic property: mNameFontSize
  //····················································································································

  let mNameFontSize_property = EBStoredProperty_Double (defaultValue: 4)

  //····················································································································

  var mNameFontSize : Double {
    get { return self.mNameFontSize_property.propval }
    set { self.mNameFontSize_property.setProp (newValue) }
  }

  //····················································································································

  var mNameFontSize_property_selection : EBSelection <Double> { return self.mNameFontSize_property.prop }

  //····················································································································
  //   Atomic property: mXName
  //····················································································································

  let mXName_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mXName : Int {
    get { return self.mXName_property.propval }
    set { self.mXName_property.setProp (newValue) }
  }

  //····················································································································

  var mXName_property_selection : EBSelection <Int> { return self.mXName_property.prop }

  //····················································································································
  //   Atomic property: mYName
  //····················································································································

  let mYName_property = EBStoredProperty_Int (defaultValue: 685800)

  //····················································································································

  var mYName : Int {
    get { return self.mYName_property.propval }
    set { self.mYName_property.setProp (newValue) }
  }

  //····················································································································

  var mYName_property_selection : EBSelection <Int> { return self.mYName_property.prop }

  //····················································································································
  //   Atomic property: mNameIsVisibleInBoard
  //····················································································································

  let mNameIsVisibleInBoard_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var mNameIsVisibleInBoard : Bool {
    get { return self.mNameIsVisibleInBoard_property.propval }
    set { self.mNameIsVisibleInBoard_property.setProp (newValue) }
  }

  //····················································································································

  var mNameIsVisibleInBoard_property_selection : EBSelection <Bool> { return self.mNameIsVisibleInBoard_property.prop }

  //····················································································································
  //   Atomic property: mNameRotation
  //····················································································································

  let mNameRotation_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mNameRotation : Int {
    get { return self.mNameRotation_property.propval }
    set { self.mNameRotation_property.setProp (newValue) }
  }

  //····················································································································

  var mNameRotation_property_selection : EBSelection <Int> { return self.mNameRotation_property.prop }

  //····················································································································
  //   Atomic property: mComponentValue
  //····················································································································

  let mComponentValue_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mComponentValue : String {
    get { return self.mComponentValue_property.propval }
    set { self.mComponentValue_property.setProp (newValue) }
  }

  //····················································································································

  var mComponentValue_property_selection : EBSelection <String> { return self.mComponentValue_property.prop }

  //····················································································································
  //   Atomic property: mValueFontSize
  //····················································································································

  let mValueFontSize_property = EBStoredProperty_Double (defaultValue: 4)

  //····················································································································

  var mValueFontSize : Double {
    get { return self.mValueFontSize_property.propval }
    set { self.mValueFontSize_property.setProp (newValue) }
  }

  //····················································································································

  var mValueFontSize_property_selection : EBSelection <Double> { return self.mValueFontSize_property.prop }

  //····················································································································
  //   Atomic property: mXValue
  //····················································································································

  let mXValue_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mXValue : Int {
    get { return self.mXValue_property.propval }
    set { self.mXValue_property.setProp (newValue) }
  }

  //····················································································································

  var mXValue_property_selection : EBSelection <Int> { return self.mXValue_property.prop }

  //····················································································································
  //   Atomic property: mYValue
  //····················································································································

  let mYValue_property = EBStoredProperty_Int (defaultValue: -685800)

  //····················································································································

  var mYValue : Int {
    get { return self.mYValue_property.propval }
    set { self.mYValue_property.setProp (newValue) }
  }

  //····················································································································

  var mYValue_property_selection : EBSelection <Int> { return self.mYValue_property.prop }

  //····················································································································
  //   Atomic property: mValueIsVisibleInBoard
  //····················································································································

  let mValueIsVisibleInBoard_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var mValueIsVisibleInBoard : Bool {
    get { return self.mValueIsVisibleInBoard_property.propval }
    set { self.mValueIsVisibleInBoard_property.setProp (newValue) }
  }

  //····················································································································

  var mValueIsVisibleInBoard_property_selection : EBSelection <Bool> { return self.mValueIsVisibleInBoard_property.prop }

  //····················································································································
  //   Atomic property: mValueRotation
  //····················································································································

  let mValueRotation_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mValueRotation : Int {
    get { return self.mValueRotation_property.propval }
    set { self.mValueRotation_property.setProp (newValue) }
  }

  //····················································································································

  var mValueRotation_property_selection : EBSelection <Int> { return self.mValueRotation_property.prop }

  //····················································································································
  //   Array controller: componentAvailablePackagesController
  //····················································································································

  var componentAvailablePackagesController = Controller_ComponentInProject_componentAvailablePackagesController ()

  //····················································································································
  //   To many property: mSymbols
  //····················································································································

  let mSymbols_property = StoredArrayOf_ComponentSymbolInProject ()

  //····················································································································

  var mSymbols_property_selection : EBSelection < [ComponentSymbolInProject] > {
    return self.mSymbols_property.prop
  }

  //····················································································································

  var mSymbols : [ComponentSymbolInProject] {
    get { return self.mSymbols_property.propval }
    set { self.mSymbols_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mConnectors
  //····················································································································

  let mConnectors_property = StoredArrayOf_ConnectorInBoard ()

  //····················································································································

  var mConnectors_property_selection : EBSelection < [ConnectorInBoard] > {
    return self.mConnectors_property.prop
  }

  //····················································································································

  var mConnectors : [ConnectorInBoard] {
    get { return self.mConnectors_property.propval }
    set { self.mConnectors_property.setProp (newValue) }
  }

  //····················································································································
  //   ToMany proxy: mPackages
  //····················································································································

  var mPackages_modelDidChangeController : EBSimpleController? = nil
  // var mPackages_boundObjectDidChangeController : EBSimpleController? = nil
  let mPackages_property = ProxyArrayOf_DevicePackageInProject ()

  //····················································································································

  var mPackages : [DevicePackageInProject] {
    get {
      switch self.mPackages_property.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }
    set {
      self.mPackages_property.setProp (newValue)
    }
  }

  //····················································································································

  var mPackages_property_selection : EBSelection <[DevicePackageInProject]> {
    return self.mPackages_property.prop
  }

  //····················································································································
  //   To one property: mNameFont
  //····················································································································

   let mNameFont_property = StoredObject_FontInProject ()

  //····················································································································

  var mNameFont_property_selection : EBSelection <FontInProject?> {
    return .single (self.mNameFont_property.propval)
  }

  //····················································································································

  var mNameFont : FontInProject? {
    get {
      return self.mNameFont_property.propval
    }
    set {
      if self.mNameFont_property.propval != nil {
        self.mNameFont_property.setProp (nil)
      }
      if newValue != nil {
        self.mNameFont_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mNameFont_none : StoredObject_FontInProject { return self.mNameFont_property }

  //····················································································································

  var mNameFont_none_selection : EBSelection <Bool> {
    return .single (self.mNameFont_property.propval == nil)
  }

  //····················································································································
  //   Transient property: componentNameFontName
  //····················································································································

  let componentNameFontName_property = EBTransientProperty_String ()

  //····················································································································

  var componentNameFontName_property_selection : EBSelection <String> {
    return self.componentNameFontName_property.prop
  }

  //····················································································································

  var componentNameFontName : String? {
    switch self.componentNameFontName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   To one property: mValueFont
  //····················································································································

   let mValueFont_property = StoredObject_FontInProject ()

  //····················································································································

  var mValueFont_property_selection : EBSelection <FontInProject?> {
    return .single (self.mValueFont_property.propval)
  }

  //····················································································································

  var mValueFont : FontInProject? {
    get {
      return self.mValueFont_property.propval
    }
    set {
      if self.mValueFont_property.propval != nil {
        self.mValueFont_property.setProp (nil)
      }
      if newValue != nil {
        self.mValueFont_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mValueFont_none : StoredObject_FontInProject { return self.mValueFont_property }

  //····················································································································

  var mValueFont_none_selection : EBSelection <Bool> {
    return .single (self.mValueFont_property.propval == nil)
  }

  //····················································································································
  //   Transient property: componentValueFontName
  //····················································································································

  let componentValueFontName_property = EBTransientProperty_String ()

  //····················································································································

  var componentValueFontName_property_selection : EBSelection <String> {
    return self.componentValueFontName_property.prop
  }

  //····················································································································

  var componentValueFontName : String? {
    switch self.componentValueFontName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentName
  //····················································································································

  let componentName_property = EBTransientProperty_String ()

  //····················································································································

  var componentName_property_selection : EBSelection <String> {
    return self.componentName_property.prop
  }

  //····················································································································

  var componentName : String? {
    switch self.componentName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   To one property: mDevice
  //····················································································································

   let mDevice_property = StoredObject_DeviceInProject ()

  //····················································································································

  var mDevice_property_selection : EBSelection <DeviceInProject?> {
    return .single (self.mDevice_property.propval)
  }

  //····················································································································

  var mDevice : DeviceInProject? {
    get {
      return self.mDevice_property.propval
    }
    set {
      if self.mDevice_property.propval != nil {
        self.mDevice_property.setProp (nil)
      }
      if newValue != nil {
        self.mDevice_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mDevice_none : StoredObject_DeviceInProject { return self.mDevice_property }

  //····················································································································

  var mDevice_none_selection : EBSelection <Bool> {
    return .single (self.mDevice_property.propval == nil)
  }

  //····················································································································
  //   To one property: mSelectedPackage
  //····················································································································

   let mSelectedPackage_property = StoredObject_DevicePackageInProject ()

  //····················································································································

  var mSelectedPackage_property_selection : EBSelection <DevicePackageInProject?> {
    return .single (self.mSelectedPackage_property.propval)
  }

  //····················································································································

  var mSelectedPackage : DevicePackageInProject? {
    get {
      return self.mSelectedPackage_property.propval
    }
    set {
      if self.mSelectedPackage_property.propval != nil {
        self.mSelectedPackage_property.setProp (nil)
      }
      if newValue != nil {
        self.mSelectedPackage_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mSelectedPackage_none : StoredObject_DevicePackageInProject { return self.mSelectedPackage_property }

  //····················································································································

  var mSelectedPackage_none_selection : EBSelection <Bool> {
    return .single (self.mSelectedPackage_property.propval == nil)
  }

  //····················································································································
  //   Transient property: packagePadDictionary
  //····················································································································

  let packagePadDictionary_property = EBTransientProperty_PackageMasterPadDictionary ()

  //····················································································································

  var packagePadDictionary_property_selection : EBSelection <PackageMasterPadDictionary> {
    return self.packagePadDictionary_property.prop
  }

  //····················································································································

  var packagePadDictionary : PackageMasterPadDictionary? {
    switch self.packagePadDictionary_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: deviceName
  //····················································································································

  let deviceName_property = EBTransientProperty_String ()

  //····················································································································

  var deviceName_property_selection : EBSelection <String> {
    return self.deviceName_property.prop
  }

  //····················································································································

  var deviceName : String? {
    switch self.deviceName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: selectedPackageName
  //····················································································································

  let selectedPackageName_property = EBTransientProperty_String ()

  //····················································································································

  var selectedPackageName_property_selection : EBSelection <String> {
    return self.selectedPackageName_property.prop
  }

  //····················································································································

  var selectedPackageName : String? {
    switch self.selectedPackageName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: availablePackages
  //····················································································································

  let availablePackages_property = EBTransientProperty_StringArray ()

  //····················································································································

  var availablePackages_property_selection : EBSelection <StringArray> {
    return self.availablePackages_property.prop
  }

  //····················································································································

  var availablePackages : StringArray? {
    switch self.availablePackages_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unplacedSymbols
  //····················································································································

  let unplacedSymbols_property = EBTransientProperty_StringTagArray ()

  //····················································································································

  var unplacedSymbols_property_selection : EBSelection <StringTagArray> {
    return self.unplacedSymbols_property.prop
  }

  //····················································································································

  var unplacedSymbols : StringTagArray? {
    switch self.unplacedSymbols_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentIsPlacedInBoard
  //····················································································································

  let componentIsPlacedInBoard_property = EBTransientProperty_Bool ()

  //····················································································································

  var componentIsPlacedInBoard_property_selection : EBSelection <Bool> {
    return self.componentIsPlacedInBoard_property.prop
  }

  //····················································································································

  var componentIsPlacedInBoard : Bool? {
    switch self.componentIsPlacedInBoard_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentIsPlacedInBoardString
  //····················································································································

  let componentIsPlacedInBoardString_property = EBTransientProperty_String ()

  //····················································································································

  var componentIsPlacedInBoardString_property_selection : EBSelection <String> {
    return self.componentIsPlacedInBoardString_property.prop
  }

  //····················································································································

  var componentIsPlacedInBoardString : String? {
    switch self.componentIsPlacedInBoardString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: deviceSymbolDictionary
  //····················································································································

  let deviceSymbolDictionary_property = EBTransientProperty_DeviceSymbolDictionary ()

  //····················································································································

  var deviceSymbolDictionary_property_selection : EBSelection <DeviceSymbolDictionary> {
    return self.deviceSymbolDictionary_property.prop
  }

  //····················································································································

  var deviceSymbolDictionary : DeviceSymbolDictionary? {
    switch self.deviceSymbolDictionary_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: placementInSchematic
  //····················································································································

  let placementInSchematic_property = EBTransientProperty_String ()

  //····················································································································

  var placementInSchematic_property_selection : EBSelection <String> {
    return self.placementInSchematic_property.prop
  }

  //····················································································································

  var placementInSchematic : String? {
    switch self.placementInSchematic_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: strokeBezierPath
  //····················································································································

  let strokeBezierPath_property = EBTransientProperty_NSBezierPath ()

  //····················································································································

  var strokeBezierPath_property_selection : EBSelection <NSBezierPath> {
    return self.strokeBezierPath_property.prop
  }

  //····················································································································

  var strokeBezierPath : NSBezierPath? {
    switch self.strokeBezierPath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentPadDictionary
  //····················································································································

  let componentPadDictionary_property = EBTransientProperty_ComponentPadDescriptorDictionary ()

  //····················································································································

  var componentPadDictionary_property_selection : EBSelection <ComponentPadDescriptorDictionary> {
    return self.componentPadDictionary_property.prop
  }

  //····················································································································

  var componentPadDictionary : ComponentPadDescriptorDictionary? {
    switch self.componentPadDictionary_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mNamePrefix
    self.mNamePrefix_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mNameIndex
    self.mNameIndex_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mX
    self.mX_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mXUnit
    self.mXUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mY
    self.mY_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mYUnit
    self.mYUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mRotation
    self.mRotation_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSide
    self.mSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mNameFontSize
    self.mNameFontSize_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mXName
    self.mXName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mYName
    self.mYName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mNameIsVisibleInBoard
    self.mNameIsVisibleInBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mNameRotation
    self.mNameRotation_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mComponentValue
    self.mComponentValue_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mValueFontSize
    self.mValueFontSize_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mXValue
    self.mXValue_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mYValue
    self.mYValue_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mValueIsVisibleInBoard
    self.mValueIsVisibleInBoard_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mValueRotation
    self.mValueRotation_property.ebUndoManager = self.ebUndoManager
  //--- Array controller property: componentAvailablePackagesController
    self.componentAvailablePackagesController.bind_model (self.mPackages_property, self.ebUndoManager)
  //--- To many property: mSymbols (has opposite relationship)
    self.mSymbols_property.ebUndoManager = self.ebUndoManager
    self.mSymbols_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponent_property.setProp (me) } },
      resetter: { inObject in inObject.mComponent_property.setProp (nil) }
    )
  //--- To many property: mConnectors (has opposite relationship)
    self.mConnectors_property.ebUndoManager = self.ebUndoManager
    self.mConnectors_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponent_property.setProp (me) } },
      resetter: { inObject in inObject.mComponent_property.setProp (nil) }
    )
  //--- ToMany proxy: mPackages
    do{
      let controller = EBSimpleController (
        observedObjects: [self.mDevice_property],
        callBack: { [weak self] in
          if let me = self, let model = me.mDevice {
            me.mPackages_property.setModel (model.mPackages_property)
          }
        }
      )
      self.mDevice_property.addEBObserverOf_mPackages (controller)
      self.mPackages_modelDidChangeController = controller
    }
  //--- To one property: mNameFont (has opposite to many relationship: mComponentNames)
    self.mNameFont_property.ebUndoManager = self.ebUndoManager
    self.mNameFont_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponentNames_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mComponentNames_property.remove (me) } }
    )
  //--- Atomic property: componentNameFontName
    self.componentNameFontName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNameFont_property.mFontName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNameFont_property.mFontName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_componentNameFontName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNameFont_property.addEBObserverOf_mFontName (self.componentNameFontName_property)
  //--- To one property: mValueFont (has opposite to many relationship: mComponentValues)
    self.mValueFont_property.ebUndoManager = self.ebUndoManager
    self.mValueFont_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponentValues_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mComponentValues_property.remove (me) } }
    )
  //--- Atomic property: componentValueFontName
    self.componentValueFontName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mValueFont_property.mFontName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mValueFont_property.mFontName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_componentValueFontName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mValueFont_property.addEBObserverOf_mFontName (self.componentValueFontName_property)
  //--- Atomic property: componentName
    self.componentName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mNamePrefix_property_selection.kind ()
        kind &= unwSelf.mNameIndex_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNamePrefix_property_selection, unwSelf.mNameIndex_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ComponentInProject_componentName (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNamePrefix_property.addEBObserver (self.componentName_property)
    self.mNameIndex_property.addEBObserver (self.componentName_property)
  //--- To one property: mDevice (has opposite to many relationship: mComponents)
    self.mDevice_property.ebUndoManager = self.ebUndoManager
    self.mDevice_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponents_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mComponents_property.remove (me) } }
    )
  //--- To one property: mSelectedPackage
    self.mSelectedPackage_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: packagePadDictionary
    self.packagePadDictionary_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSelectedPackage_property.packagePadDictionary_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSelectedPackage_property.packagePadDictionary_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_packagePadDictionary (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSelectedPackage_property.addEBObserverOf_packagePadDictionary (self.packagePadDictionary_property)
  //--- Atomic property: deviceName
    self.deviceName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDevice_property.mDeviceName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mDevice_property.mDeviceName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_deviceName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDevice_property.addEBObserverOf_mDeviceName (self.deviceName_property)
  //--- Atomic property: selectedPackageName
    self.selectedPackageName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSelectedPackage_property.mPackageName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSelectedPackage_property.mPackageName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_selectedPackageName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSelectedPackage_property.addEBObserverOf_mPackageName (self.selectedPackageName_property)
  //--- Atomic property: availablePackages
    self.availablePackages_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDevice_property.packageNames_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mDevice_property.packageNames_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_availablePackages (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDevice_property.addEBObserverOf_packageNames (self.availablePackages_property)
  //--- Atomic property: unplacedSymbols
    self.unplacedSymbols_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.componentName_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.componentName_property_selection, unwSelf.mSymbols_property_selection, unwSelf.mSymbols_property_selection, unwSelf.mSymbols_property_selection, unwSelf.mSymbols_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_ComponentInProject_unplacedSymbols (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.componentName_property.addEBObserver (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserver (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserverOf_symbolInSchematic (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserverOf_mSymbolInstanceName (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserverOf_mSymbolTypeName (self.unplacedSymbols_property)
  //--- Atomic property: componentIsPlacedInBoard
    self.componentIsPlacedInBoard_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.isPlacedInBoard_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.isPlacedInBoard_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_componentIsPlacedInBoard (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.isPlacedInBoard_property.addEBObserver (self.componentIsPlacedInBoard_property)
  //--- Atomic property: componentIsPlacedInBoardString
    self.componentIsPlacedInBoardString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.componentIsPlacedInBoard_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.componentIsPlacedInBoard_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_componentIsPlacedInBoardString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.componentIsPlacedInBoard_property.addEBObserver (self.componentIsPlacedInBoardString_property)
  //--- Atomic property: deviceSymbolDictionary
    self.deviceSymbolDictionary_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDevice_property.deviceSymbolDictionary_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mDevice_property.deviceSymbolDictionary_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_deviceSymbolDictionary (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDevice_property.addEBObserverOf_deviceSymbolDictionary (self.deviceSymbolDictionary_property)
  //--- Atomic property: placementInSchematic
    self.placementInSchematic_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSymbols_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSymbols_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_placementInSchematic (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbols_property.addEBObserverOf_symbolInSchematic (self.placementInSchematic_property)
  //--- Atomic property: strokeBezierPath
    self.strokeBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSelectedPackage_property.mStrokeBezierPath_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSelectedPackage_property.mStrokeBezierPath_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_strokeBezierPath (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSelectedPackage_property.addEBObserverOf_mStrokeBezierPath (self.strokeBezierPath_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        kind &= unwSelf.mRotation_property_selection.kind ()
        kind &= unwSelf.mSide_property_selection.kind ()
        kind &= unwSelf.packagePadDictionary_property_selection.kind ()
        kind &= unwSelf.strokeBezierPath_property_selection.kind ()
        kind &= g_Preferences!.frontSideLegendColorForBoard_property_selection.kind ()
        kind &= g_Preferences!.backSideLegendColorForBoard_property_selection.kind ()
        kind &= g_Preferences!.packageDrawingWidthMultpliedByTenForBoard_property_selection.kind ()
        kind &= g_Preferences!.frontSidePadColorForBoard_property_selection.kind ()
        kind &= unwSelf.displayFrontPads_property_selection.kind ()
        kind &= g_Preferences!.backSidePadColorForBoard_property_selection.kind ()
        kind &= unwSelf.displayBackPads_property_selection.kind ()
        kind &= g_Preferences!.padNumberFontForBoard_property_selection.kind ()
        kind &= g_Preferences!.padNumberColorForBoard_property_selection.kind ()
        kind &= unwSelf.displayPadNumbers_property_selection.kind ()
        kind &= unwSelf.mNameIsVisibleInBoard_property_selection.kind ()
        kind &= unwSelf.mXName_property_selection.kind ()
        kind &= unwSelf.mYName_property_selection.kind ()
        kind &= unwSelf.mNameFont_property.descriptor_property_selection.kind ()
        kind &= unwSelf.mNameFontSize_property_selection.kind ()
        kind &= unwSelf.mNameRotation_property_selection.kind ()
        kind &= unwSelf.componentName_property_selection.kind ()
        kind &= unwSelf.mValueIsVisibleInBoard_property_selection.kind ()
        kind &= unwSelf.mXValue_property_selection.kind ()
        kind &= unwSelf.mYValue_property_selection.kind ()
        kind &= unwSelf.mValueFont_property.descriptor_property_selection.kind ()
        kind &= unwSelf.mValueFontSize_property_selection.kind ()
        kind &= unwSelf.mValueRotation_property_selection.kind ()
        kind &= unwSelf.mComponentValue_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mX_property_selection, unwSelf.mY_property_selection, unwSelf.mRotation_property_selection, unwSelf.mSide_property_selection, unwSelf.packagePadDictionary_property_selection, unwSelf.strokeBezierPath_property_selection, g_Preferences!.frontSideLegendColorForBoard_property_selection, g_Preferences!.backSideLegendColorForBoard_property_selection, g_Preferences!.packageDrawingWidthMultpliedByTenForBoard_property_selection, g_Preferences!.frontSidePadColorForBoard_property_selection, unwSelf.displayFrontPads_property_selection, g_Preferences!.backSidePadColorForBoard_property_selection, unwSelf.displayBackPads_property_selection, g_Preferences!.padNumberFontForBoard_property_selection, g_Preferences!.padNumberColorForBoard_property_selection, unwSelf.displayPadNumbers_property_selection, unwSelf.mNameIsVisibleInBoard_property_selection, unwSelf.mXName_property_selection, unwSelf.mYName_property_selection, unwSelf.mNameFont_property.descriptor_property_selection, unwSelf.mNameFontSize_property_selection, unwSelf.mNameRotation_property_selection, unwSelf.componentName_property_selection, unwSelf.mValueIsVisibleInBoard_property_selection, unwSelf.mXValue_property_selection, unwSelf.mYValue_property_selection, unwSelf.mValueFont_property.descriptor_property_selection, unwSelf.mValueFontSize_property_selection, unwSelf.mValueRotation_property_selection, unwSelf.mComponentValue_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11), .single (let v12), .single (let v13), .single (let v14), .single (let v15), .single (let v16), .single (let v17), .single (let v18), .single (let v19), .single (let v20), .single (let v21), .single (let v22), .single (let v23), .single (let v24), .single (let v25), .single (let v26), .single (let v27), .single (let v28), .single (let v29)) :
            return .single (transient_ComponentInProject_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.objectDisplay_property)
    self.mY_property.addEBObserver (self.objectDisplay_property)
    self.mRotation_property.addEBObserver (self.objectDisplay_property)
    self.mSide_property.addEBObserver (self.objectDisplay_property)
    self.packagePadDictionary_property.addEBObserver (self.objectDisplay_property)
    self.strokeBezierPath_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSideLegendColorForBoard_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.backSideLegendColorForBoard_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDrawingWidthMultpliedByTenForBoard_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSidePadColorForBoard_property.addEBObserver (self.objectDisplay_property)
    self.displayFrontPads_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.backSidePadColorForBoard_property.addEBObserver (self.objectDisplay_property)
    self.displayBackPads_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.padNumberFontForBoard_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.padNumberColorForBoard_property.addEBObserver (self.objectDisplay_property)
    self.displayPadNumbers_property.addEBObserver (self.objectDisplay_property)
    self.mNameIsVisibleInBoard_property.addEBObserver (self.objectDisplay_property)
    self.mXName_property.addEBObserver (self.objectDisplay_property)
    self.mYName_property.addEBObserver (self.objectDisplay_property)
    self.mNameFont_property.addEBObserverOf_descriptor (self.objectDisplay_property)
    self.mNameFontSize_property.addEBObserver (self.objectDisplay_property)
    self.mNameRotation_property.addEBObserver (self.objectDisplay_property)
    self.componentName_property.addEBObserver (self.objectDisplay_property)
    self.mValueIsVisibleInBoard_property.addEBObserver (self.objectDisplay_property)
    self.mXValue_property.addEBObserver (self.objectDisplay_property)
    self.mYValue_property.addEBObserver (self.objectDisplay_property)
    self.mValueFont_property.addEBObserverOf_descriptor (self.objectDisplay_property)
    self.mValueFontSize_property.addEBObserver (self.objectDisplay_property)
    self.mValueRotation_property.addEBObserver (self.objectDisplay_property)
    self.mComponentValue_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        kind &= unwSelf.mRotation_property_selection.kind ()
        kind &= unwSelf.mSide_property_selection.kind ()
        kind &= unwSelf.strokeBezierPath_property_selection.kind ()
        kind &= unwSelf.mNameIsVisibleInBoard_property_selection.kind ()
        kind &= unwSelf.mXName_property_selection.kind ()
        kind &= unwSelf.mYName_property_selection.kind ()
        kind &= unwSelf.mNameFont_property.descriptor_property_selection.kind ()
        kind &= unwSelf.mNameFontSize_property_selection.kind ()
        kind &= unwSelf.mNameRotation_property_selection.kind ()
        kind &= unwSelf.componentName_property_selection.kind ()
        kind &= unwSelf.packagePadDictionary_property_selection.kind ()
        kind &= unwSelf.mValueIsVisibleInBoard_property_selection.kind ()
        kind &= unwSelf.mXValue_property_selection.kind ()
        kind &= unwSelf.mYValue_property_selection.kind ()
        kind &= unwSelf.mValueFont_property.descriptor_property_selection.kind ()
        kind &= unwSelf.mValueFontSize_property_selection.kind ()
        kind &= unwSelf.mValueRotation_property_selection.kind ()
        kind &= unwSelf.mComponentValue_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mX_property_selection, unwSelf.mY_property_selection, unwSelf.mRotation_property_selection, unwSelf.mSide_property_selection, unwSelf.strokeBezierPath_property_selection, unwSelf.mNameIsVisibleInBoard_property_selection, unwSelf.mXName_property_selection, unwSelf.mYName_property_selection, unwSelf.mNameFont_property.descriptor_property_selection, unwSelf.mNameFontSize_property_selection, unwSelf.mNameRotation_property_selection, unwSelf.componentName_property_selection, unwSelf.packagePadDictionary_property_selection, unwSelf.mValueIsVisibleInBoard_property_selection, unwSelf.mXValue_property_selection, unwSelf.mYValue_property_selection, unwSelf.mValueFont_property.descriptor_property_selection, unwSelf.mValueFontSize_property_selection, unwSelf.mValueRotation_property_selection, unwSelf.mComponentValue_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11), .single (let v12), .single (let v13), .single (let v14), .single (let v15), .single (let v16), .single (let v17), .single (let v18), .single (let v19)) :
            return .single (transient_ComponentInProject_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.selectionDisplay_property)
    self.mY_property.addEBObserver (self.selectionDisplay_property)
    self.mRotation_property.addEBObserver (self.selectionDisplay_property)
    self.mSide_property.addEBObserver (self.selectionDisplay_property)
    self.strokeBezierPath_property.addEBObserver (self.selectionDisplay_property)
    self.mNameIsVisibleInBoard_property.addEBObserver (self.selectionDisplay_property)
    self.mXName_property.addEBObserver (self.selectionDisplay_property)
    self.mYName_property.addEBObserver (self.selectionDisplay_property)
    self.mNameFont_property.addEBObserverOf_descriptor (self.selectionDisplay_property)
    self.mNameFontSize_property.addEBObserver (self.selectionDisplay_property)
    self.mNameRotation_property.addEBObserver (self.selectionDisplay_property)
    self.componentName_property.addEBObserver (self.selectionDisplay_property)
    self.packagePadDictionary_property.addEBObserver (self.selectionDisplay_property)
    self.mValueIsVisibleInBoard_property.addEBObserver (self.selectionDisplay_property)
    self.mXValue_property.addEBObserver (self.selectionDisplay_property)
    self.mYValue_property.addEBObserver (self.selectionDisplay_property)
    self.mValueFont_property.addEBObserverOf_descriptor (self.selectionDisplay_property)
    self.mValueFontSize_property.addEBObserver (self.selectionDisplay_property)
    self.mValueRotation_property.addEBObserver (self.selectionDisplay_property)
    self.mComponentValue_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: componentPadDictionary
    self.componentPadDictionary_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        kind &= unwSelf.mRotation_property_selection.kind ()
        kind &= unwSelf.mSide_property_selection.kind ()
        kind &= unwSelf.packagePadDictionary_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mX_property_selection, unwSelf.mY_property_selection, unwSelf.mRotation_property_selection, unwSelf.mSide_property_selection, unwSelf.packagePadDictionary_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_ComponentInProject_componentPadDictionary (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.componentPadDictionary_property)
    self.mY_property.addEBObserver (self.componentPadDictionary_property)
    self.mRotation_property.addEBObserver (self.componentPadDictionary_property)
    self.mSide_property.addEBObserver (self.componentPadDictionary_property)
    self.packagePadDictionary_property.addEBObserver (self.componentPadDictionary_property)
  //--- Install undoers and opposite setter for relationships
    self.mSymbols_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponent_property.setProp (me) } },
      resetter: { inObject in inObject.mComponent_property.setProp (nil) }
    )
    self.mConnectors_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponent_property.setProp (me) } },
      resetter: { inObject in inObject.mComponent_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- Array controller property: componentAvailablePackagesController
    self.componentAvailablePackagesController.unbind_model ()
  //--- ToMany proxy: mPackages
    self.mPackages_property.setModel (nil)
    self.mPackages_modelDidChangeController?.unregister ()
    self.mPackages_modelDidChangeController = nil
    self.mNameFont_property.removeEBObserverOf_mFontName (self.componentNameFontName_property)
    self.mValueFont_property.removeEBObserverOf_mFontName (self.componentValueFontName_property)
    self.mNamePrefix_property.removeEBObserver (self.componentName_property)
    self.mNameIndex_property.removeEBObserver (self.componentName_property)
    self.mSelectedPackage_property.removeEBObserverOf_packagePadDictionary (self.packagePadDictionary_property)
    self.mDevice_property.removeEBObserverOf_mDeviceName (self.deviceName_property)
    self.mSelectedPackage_property.removeEBObserverOf_mPackageName (self.selectedPackageName_property)
    self.mDevice_property.removeEBObserverOf_packageNames (self.availablePackages_property)
    self.componentName_property.removeEBObserver (self.unplacedSymbols_property)
    self.mSymbols_property.removeEBObserver (self.unplacedSymbols_property)
    self.mSymbols_property.removeEBObserverOf_symbolInSchematic (self.unplacedSymbols_property)
    self.mSymbols_property.removeEBObserverOf_mSymbolInstanceName (self.unplacedSymbols_property)
    self.mSymbols_property.removeEBObserverOf_mSymbolTypeName (self.unplacedSymbols_property)
    self.isPlacedInBoard_property.removeEBObserver (self.componentIsPlacedInBoard_property)
    self.componentIsPlacedInBoard_property.removeEBObserver (self.componentIsPlacedInBoardString_property)
    self.mDevice_property.removeEBObserverOf_deviceSymbolDictionary (self.deviceSymbolDictionary_property)
    self.mSymbols_property.removeEBObserverOf_symbolInSchematic (self.placementInSchematic_property)
    self.mSelectedPackage_property.removeEBObserverOf_mStrokeBezierPath (self.strokeBezierPath_property)
    self.mX_property.removeEBObserver (self.objectDisplay_property)
    self.mY_property.removeEBObserver (self.objectDisplay_property)
    self.mRotation_property.removeEBObserver (self.objectDisplay_property)
    self.mSide_property.removeEBObserver (self.objectDisplay_property)
    self.packagePadDictionary_property.removeEBObserver (self.objectDisplay_property)
    self.strokeBezierPath_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSideLegendColorForBoard_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.backSideLegendColorForBoard_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDrawingWidthMultpliedByTenForBoard_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSidePadColorForBoard_property.removeEBObserver (self.objectDisplay_property)
    self.displayFrontPads_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.backSidePadColorForBoard_property.removeEBObserver (self.objectDisplay_property)
    self.displayBackPads_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.padNumberFontForBoard_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.padNumberColorForBoard_property.removeEBObserver (self.objectDisplay_property)
    self.displayPadNumbers_property.removeEBObserver (self.objectDisplay_property)
    self.mNameIsVisibleInBoard_property.removeEBObserver (self.objectDisplay_property)
    self.mXName_property.removeEBObserver (self.objectDisplay_property)
    self.mYName_property.removeEBObserver (self.objectDisplay_property)
    self.mNameFont_property.removeEBObserverOf_descriptor (self.objectDisplay_property)
    self.mNameFontSize_property.removeEBObserver (self.objectDisplay_property)
    self.mNameRotation_property.removeEBObserver (self.objectDisplay_property)
    self.componentName_property.removeEBObserver (self.objectDisplay_property)
    self.mValueIsVisibleInBoard_property.removeEBObserver (self.objectDisplay_property)
    self.mXValue_property.removeEBObserver (self.objectDisplay_property)
    self.mYValue_property.removeEBObserver (self.objectDisplay_property)
    self.mValueFont_property.removeEBObserverOf_descriptor (self.objectDisplay_property)
    self.mValueFontSize_property.removeEBObserver (self.objectDisplay_property)
    self.mValueRotation_property.removeEBObserver (self.objectDisplay_property)
    self.mComponentValue_property.removeEBObserver (self.objectDisplay_property)
    self.mX_property.removeEBObserver (self.selectionDisplay_property)
    self.mY_property.removeEBObserver (self.selectionDisplay_property)
    self.mRotation_property.removeEBObserver (self.selectionDisplay_property)
    self.mSide_property.removeEBObserver (self.selectionDisplay_property)
    self.strokeBezierPath_property.removeEBObserver (self.selectionDisplay_property)
    self.mNameIsVisibleInBoard_property.removeEBObserver (self.selectionDisplay_property)
    self.mXName_property.removeEBObserver (self.selectionDisplay_property)
    self.mYName_property.removeEBObserver (self.selectionDisplay_property)
    self.mNameFont_property.removeEBObserverOf_descriptor (self.selectionDisplay_property)
    self.mNameFontSize_property.removeEBObserver (self.selectionDisplay_property)
    self.mNameRotation_property.removeEBObserver (self.selectionDisplay_property)
    self.componentName_property.removeEBObserver (self.selectionDisplay_property)
    self.packagePadDictionary_property.removeEBObserver (self.selectionDisplay_property)
    self.mValueIsVisibleInBoard_property.removeEBObserver (self.selectionDisplay_property)
    self.mXValue_property.removeEBObserver (self.selectionDisplay_property)
    self.mYValue_property.removeEBObserver (self.selectionDisplay_property)
    self.mValueFont_property.removeEBObserverOf_descriptor (self.selectionDisplay_property)
    self.mValueFontSize_property.removeEBObserver (self.selectionDisplay_property)
    self.mValueRotation_property.removeEBObserver (self.selectionDisplay_property)
    self.mComponentValue_property.removeEBObserver (self.selectionDisplay_property)
    self.mX_property.removeEBObserver (self.componentPadDictionary_property)
    self.mY_property.removeEBObserver (self.componentPadDictionary_property)
    self.mRotation_property.removeEBObserver (self.componentPadDictionary_property)
    self.mSide_property.removeEBObserver (self.componentPadDictionary_property)
    self.packagePadDictionary_property.removeEBObserver (self.componentPadDictionary_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mNamePrefix",
      idx: self.mNamePrefix_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mNamePrefix_property.mObserverExplorer,
      valueExplorer: &self.mNamePrefix_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNameIndex",
      idx: self.mNameIndex_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mNameIndex_property.mObserverExplorer,
      valueExplorer: &self.mNameIndex_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mX",
      idx: self.mX_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mX_property.mObserverExplorer,
      valueExplorer: &self.mX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mXUnit",
      idx: self.mXUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mXUnit_property.mObserverExplorer,
      valueExplorer: &self.mXUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mY",
      idx: self.mY_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mY_property.mObserverExplorer,
      valueExplorer: &self.mY_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mYUnit",
      idx: self.mYUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mYUnit_property.mObserverExplorer,
      valueExplorer: &self.mYUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mRotation",
      idx: self.mRotation_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mRotation_property.mObserverExplorer,
      valueExplorer: &self.mRotation_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSide",
      idx: self.mSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSide_property.mObserverExplorer,
      valueExplorer: &self.mSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNameFontSize",
      idx: self.mNameFontSize_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mNameFontSize_property.mObserverExplorer,
      valueExplorer: &self.mNameFontSize_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mXName",
      idx: self.mXName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mXName_property.mObserverExplorer,
      valueExplorer: &self.mXName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mYName",
      idx: self.mYName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mYName_property.mObserverExplorer,
      valueExplorer: &self.mYName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNameIsVisibleInBoard",
      idx: self.mNameIsVisibleInBoard_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mNameIsVisibleInBoard_property.mObserverExplorer,
      valueExplorer: &self.mNameIsVisibleInBoard_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNameRotation",
      idx: self.mNameRotation_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mNameRotation_property.mObserverExplorer,
      valueExplorer: &self.mNameRotation_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mComponentValue",
      idx: self.mComponentValue_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mComponentValue_property.mObserverExplorer,
      valueExplorer: &self.mComponentValue_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mValueFontSize",
      idx: self.mValueFontSize_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mValueFontSize_property.mObserverExplorer,
      valueExplorer: &self.mValueFontSize_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mXValue",
      idx: self.mXValue_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mXValue_property.mObserverExplorer,
      valueExplorer: &self.mXValue_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mYValue",
      idx: self.mYValue_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mYValue_property.mObserverExplorer,
      valueExplorer: &self.mYValue_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mValueIsVisibleInBoard",
      idx: self.mValueIsVisibleInBoard_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mValueIsVisibleInBoard_property.mObserverExplorer,
      valueExplorer: &self.mValueIsVisibleInBoard_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mValueRotation",
      idx: self.mValueRotation_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mValueRotation_property.mObserverExplorer,
      valueExplorer: &self.mValueRotation_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "componentNameFontName",
      idx: self.componentNameFontName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.componentNameFontName_property.mObserverExplorer,
      valueExplorer: &self.componentNameFontName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "componentValueFontName",
      idx: self.componentValueFontName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.componentValueFontName_property.mObserverExplorer,
      valueExplorer: &self.componentValueFontName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "componentName",
      idx: self.componentName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.componentName_property.mObserverExplorer,
      valueExplorer: &self.componentName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "packagePadDictionary",
      idx: self.packagePadDictionary_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.packagePadDictionary_property.mObserverExplorer,
      valueExplorer: &self.packagePadDictionary_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "deviceName",
      idx: self.deviceName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.deviceName_property.mObserverExplorer,
      valueExplorer: &self.deviceName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedPackageName",
      idx: self.selectedPackageName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectedPackageName_property.mObserverExplorer,
      valueExplorer: &self.selectedPackageName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "availablePackages",
      idx: self.availablePackages_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.availablePackages_property.mObserverExplorer,
      valueExplorer: &self.availablePackages_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "unplacedSymbols",
      idx: self.unplacedSymbols_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.unplacedSymbols_property.mObserverExplorer,
      valueExplorer: &self.unplacedSymbols_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "componentIsPlacedInBoard",
      idx: self.componentIsPlacedInBoard_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.componentIsPlacedInBoard_property.mObserverExplorer,
      valueExplorer: &self.componentIsPlacedInBoard_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "componentIsPlacedInBoardString",
      idx: self.componentIsPlacedInBoardString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.componentIsPlacedInBoardString_property.mObserverExplorer,
      valueExplorer: &self.componentIsPlacedInBoardString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "deviceSymbolDictionary",
      idx: self.deviceSymbolDictionary_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.deviceSymbolDictionary_property.mObserverExplorer,
      valueExplorer: &self.deviceSymbolDictionary_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "placementInSchematic",
      idx: self.placementInSchematic_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.placementInSchematic_property.mObserverExplorer,
      valueExplorer: &self.placementInSchematic_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "strokeBezierPath",
      idx: self.strokeBezierPath_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.strokeBezierPath_property.mObserverExplorer,
      valueExplorer: &self.strokeBezierPath_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx: self.objectDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.objectDisplay_property.mObserverExplorer,
      valueExplorer: &self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx: self.selectionDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
      valueExplorer: &self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "componentPadDictionary",
      idx: self.componentPadDictionary_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.componentPadDictionary_property.mObserverExplorer,
      valueExplorer: &self.componentPadDictionary_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "mSymbols",
      idx:mSymbols_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mSymbols_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mConnectors",
      idx:mConnectors_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mConnectors_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "mNameFont",
      idx:self.mNameFont_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mNameFont_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mValueFont",
      idx:self.mValueFont_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mValueFont_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mDevice",
      idx:self.mDevice_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mDevice_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mSelectedPackage",
      idx:self.mSelectedPackage_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mSelectedPackage_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mNamePrefix
    self.mNamePrefix_property.mObserverExplorer = nil
    self.mNamePrefix_property.mValueExplorer = nil
  //--- Atomic property: mNameIndex
    self.mNameIndex_property.mObserverExplorer = nil
    self.mNameIndex_property.mValueExplorer = nil
  //--- Atomic property: mX
    self.mX_property.mObserverExplorer = nil
    self.mX_property.mValueExplorer = nil
  //--- Atomic property: mXUnit
    self.mXUnit_property.mObserverExplorer = nil
    self.mXUnit_property.mValueExplorer = nil
  //--- Atomic property: mY
    self.mY_property.mObserverExplorer = nil
    self.mY_property.mValueExplorer = nil
  //--- Atomic property: mYUnit
    self.mYUnit_property.mObserverExplorer = nil
    self.mYUnit_property.mValueExplorer = nil
  //--- Atomic property: mRotation
    self.mRotation_property.mObserverExplorer = nil
    self.mRotation_property.mValueExplorer = nil
  //--- Atomic property: mSide
    self.mSide_property.mObserverExplorer = nil
    self.mSide_property.mValueExplorer = nil
  //--- Atomic property: mNameFontSize
    self.mNameFontSize_property.mObserverExplorer = nil
    self.mNameFontSize_property.mValueExplorer = nil
  //--- Atomic property: mXName
    self.mXName_property.mObserverExplorer = nil
    self.mXName_property.mValueExplorer = nil
  //--- Atomic property: mYName
    self.mYName_property.mObserverExplorer = nil
    self.mYName_property.mValueExplorer = nil
  //--- Atomic property: mNameIsVisibleInBoard
    self.mNameIsVisibleInBoard_property.mObserverExplorer = nil
    self.mNameIsVisibleInBoard_property.mValueExplorer = nil
  //--- Atomic property: mNameRotation
    self.mNameRotation_property.mObserverExplorer = nil
    self.mNameRotation_property.mValueExplorer = nil
  //--- Atomic property: mComponentValue
    self.mComponentValue_property.mObserverExplorer = nil
    self.mComponentValue_property.mValueExplorer = nil
  //--- Atomic property: mValueFontSize
    self.mValueFontSize_property.mObserverExplorer = nil
    self.mValueFontSize_property.mValueExplorer = nil
  //--- Atomic property: mXValue
    self.mXValue_property.mObserverExplorer = nil
    self.mXValue_property.mValueExplorer = nil
  //--- Atomic property: mYValue
    self.mYValue_property.mObserverExplorer = nil
    self.mYValue_property.mValueExplorer = nil
  //--- Atomic property: mValueIsVisibleInBoard
    self.mValueIsVisibleInBoard_property.mObserverExplorer = nil
    self.mValueIsVisibleInBoard_property.mValueExplorer = nil
  //--- Atomic property: mValueRotation
    self.mValueRotation_property.mObserverExplorer = nil
    self.mValueRotation_property.mValueExplorer = nil
  //--- To many property: mSymbols
    self.mSymbols_property.mValueExplorer = nil
  //--- To many property: mConnectors
    self.mConnectors_property.mValueExplorer = nil
  //--- ToMany proxy: mPackages
    self.mPackages_property.mObserverExplorer = nil
  //--- To one property: mNameFont
    self.mNameFont_property.mObserverExplorer = nil
    self.mNameFont_property.mValueExplorer = nil
  //--- To one property: mValueFont
    self.mValueFont_property.mObserverExplorer = nil
    self.mValueFont_property.mValueExplorer = nil
  //--- To one property: mDevice
    self.mDevice_property.mObserverExplorer = nil
    self.mDevice_property.mValueExplorer = nil
  //--- To one property: mSelectedPackage
    self.mSelectedPackage_property.mObserverExplorer = nil
    self.mSelectedPackage_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mSymbols = []
    self.mConnectors = []
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mNameFont = nil
    self.mValueFont = nil
    self.mDevice = nil
    self.mSelectedPackage = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mNamePrefix
    self.mNamePrefix_property.storeIn (dictionary: ioDictionary, forKey:"mNamePrefix")
  //--- Atomic property: mNameIndex
    self.mNameIndex_property.storeIn (dictionary: ioDictionary, forKey:"mNameIndex")
  //--- Atomic property: mX
    self.mX_property.storeIn (dictionary: ioDictionary, forKey:"mX")
  //--- Atomic property: mXUnit
    self.mXUnit_property.storeIn (dictionary: ioDictionary, forKey:"mXUnit")
  //--- Atomic property: mY
    self.mY_property.storeIn (dictionary: ioDictionary, forKey:"mY")
  //--- Atomic property: mYUnit
    self.mYUnit_property.storeIn (dictionary: ioDictionary, forKey:"mYUnit")
  //--- Atomic property: mRotation
    self.mRotation_property.storeIn (dictionary: ioDictionary, forKey:"mRotation")
  //--- Atomic property: mSide
    self.mSide_property.storeIn (dictionary: ioDictionary, forKey:"mSide")
  //--- Atomic property: mNameFontSize
    self.mNameFontSize_property.storeIn (dictionary: ioDictionary, forKey:"mNameFontSize")
  //--- Atomic property: mXName
    self.mXName_property.storeIn (dictionary: ioDictionary, forKey:"mXName")
  //--- Atomic property: mYName
    self.mYName_property.storeIn (dictionary: ioDictionary, forKey:"mYName")
  //--- Atomic property: mNameIsVisibleInBoard
    self.mNameIsVisibleInBoard_property.storeIn (dictionary: ioDictionary, forKey:"mNameIsVisibleInBoard")
  //--- Atomic property: mNameRotation
    self.mNameRotation_property.storeIn (dictionary: ioDictionary, forKey:"mNameRotation")
  //--- Atomic property: mComponentValue
    self.mComponentValue_property.storeIn (dictionary: ioDictionary, forKey:"mComponentValue")
  //--- Atomic property: mValueFontSize
    self.mValueFontSize_property.storeIn (dictionary: ioDictionary, forKey:"mValueFontSize")
  //--- Atomic property: mXValue
    self.mXValue_property.storeIn (dictionary: ioDictionary, forKey:"mXValue")
  //--- Atomic property: mYValue
    self.mYValue_property.storeIn (dictionary: ioDictionary, forKey:"mYValue")
  //--- Atomic property: mValueIsVisibleInBoard
    self.mValueIsVisibleInBoard_property.storeIn (dictionary: ioDictionary, forKey:"mValueIsVisibleInBoard")
  //--- Atomic property: mValueRotation
    self.mValueRotation_property.storeIn (dictionary: ioDictionary, forKey:"mValueRotation")
  //--- To many property: mSymbols
    self.store (
      managedObjectArray: self.mSymbols_property.propval,
      relationshipName: "mSymbols",
      intoDictionary: ioDictionary
    )
  //--- To many property: mConnectors
    self.store (
      managedObjectArray: self.mConnectors_property.propval,
      relationshipName: "mConnectors",
      intoDictionary: ioDictionary
    )
  //--- To one property: mSelectedPackage
    self.store (managedObject:self.mSelectedPackage_property.propval,
      relationshipName: "mSelectedPackage",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mSymbols
    self.mSymbols_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mSymbols",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [ComponentSymbolInProject])
  //--- To many property: mConnectors
    self.mConnectors_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mConnectors",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [ConnectorInBoard])
  //--- To one property: mNameFont
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mNameFont",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? FontInProject {
        self.mNameFont_property.setProp (entity)
      }
    }
  //--- To one property: mValueFont
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mValueFont",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? FontInProject {
        self.mValueFont_property.setProp (entity)
      }
    }
  //--- To one property: mDevice
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mDevice",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? DeviceInProject {
        self.mDevice_property.setProp (entity)
      }
    }
  //--- To one property: mSelectedPackage
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mSelectedPackage",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? DevicePackageInProject {
        self.mSelectedPackage_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mNamePrefix
    self.mNamePrefix_property.readFrom (dictionary: inDictionary, forKey:"mNamePrefix")
  //--- Atomic property: mNameIndex
    self.mNameIndex_property.readFrom (dictionary: inDictionary, forKey:"mNameIndex")
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey:"mX")
  //--- Atomic property: mXUnit
    self.mXUnit_property.readFrom (dictionary: inDictionary, forKey:"mXUnit")
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey:"mY")
  //--- Atomic property: mYUnit
    self.mYUnit_property.readFrom (dictionary: inDictionary, forKey:"mYUnit")
  //--- Atomic property: mRotation
    self.mRotation_property.readFrom (dictionary: inDictionary, forKey:"mRotation")
  //--- Atomic property: mSide
    self.mSide_property.readFrom (dictionary: inDictionary, forKey:"mSide")
  //--- Atomic property: mNameFontSize
    self.mNameFontSize_property.readFrom (dictionary: inDictionary, forKey:"mNameFontSize")
  //--- Atomic property: mXName
    self.mXName_property.readFrom (dictionary: inDictionary, forKey:"mXName")
  //--- Atomic property: mYName
    self.mYName_property.readFrom (dictionary: inDictionary, forKey:"mYName")
  //--- Atomic property: mNameIsVisibleInBoard
    self.mNameIsVisibleInBoard_property.readFrom (dictionary: inDictionary, forKey:"mNameIsVisibleInBoard")
  //--- Atomic property: mNameRotation
    self.mNameRotation_property.readFrom (dictionary: inDictionary, forKey:"mNameRotation")
  //--- Atomic property: mComponentValue
    self.mComponentValue_property.readFrom (dictionary: inDictionary, forKey:"mComponentValue")
  //--- Atomic property: mValueFontSize
    self.mValueFontSize_property.readFrom (dictionary: inDictionary, forKey:"mValueFontSize")
  //--- Atomic property: mXValue
    self.mXValue_property.readFrom (dictionary: inDictionary, forKey:"mXValue")
  //--- Atomic property: mYValue
    self.mYValue_property.readFrom (dictionary: inDictionary, forKey:"mYValue")
  //--- Atomic property: mValueIsVisibleInBoard
    self.mValueIsVisibleInBoard_property.readFrom (dictionary: inDictionary, forKey:"mValueIsVisibleInBoard")
  //--- Atomic property: mValueRotation
    self.mValueRotation_property.readFrom (dictionary: inDictionary, forKey:"mValueRotation")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mSymbols
    for managedObject in self.mSymbols {
      objects.append (managedObject)
    }
  //--- To many property: mConnectors
    for managedObject in self.mConnectors {
      objects.append (managedObject)
    }
  //--- To one property: mNameFont
    if let object = self.mNameFont {
      objects.append (object)
    }
  //--- To one property: mValueFont
    if let object = self.mValueFont {
      objects.append (object)
    }
  //--- To one property: mDevice
    if let object = self.mDevice {
      objects.append (object)
    }
  //--- To one property: mSelectedPackage
    if let object = self.mSelectedPackage {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mSymbols
    for managedObject in self.mSymbols {
      objects.append (managedObject)
    }
  //--- To many property: mConnectors
    for managedObject in self.mConnectors {
      objects.append (managedObject)
    }
  //--- To one property: mNameFont
    if let object = self.mNameFont {
      objects.append (object)
    }
  //--- To one property: mValueFont
    if let object = self.mValueFont {
      objects.append (object)
    }
  //--- To one property: mDevice
    if let object = self.mDevice {
      objects.append (object)
    }
  //--- To one property: mSelectedPackage
    if let object = self.mSelectedPackage {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

