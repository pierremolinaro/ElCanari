//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mNamePrefix : class {
  var mNamePrefix : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mNameIndex : class {
  var mNameIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mComponentValue : class {
  var mComponentValue : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_componentName : class {
  var componentName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_deviceName : class {
  var deviceName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_selectedPackageName : class {
  var selectedPackageName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_availablePackages : class {
  var availablePackages : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_deviceSymbolDictionary : class {
  var deviceSymbolDictionary : DeviceSymbolDictionary? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_unplacedSymbols : class {
  var unplacedSymbols : StringTagArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_placementInSchematic : class {
  var placementInSchematic : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ComponentInProject : EBManagedObject,
         ComponentInProject_mNamePrefix,
         ComponentInProject_mNameIndex,
         ComponentInProject_mComponentValue,
         ComponentInProject_componentName,
         ComponentInProject_deviceName,
         ComponentInProject_selectedPackageName,
         ComponentInProject_availablePackages,
         ComponentInProject_deviceSymbolDictionary,
         ComponentInProject_unplacedSymbols,
         ComponentInProject_placementInSchematic {

  //····················································································································
  //   Atomic property: mNamePrefix
  //····················································································································

  let mNamePrefix_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mNamePrefix : String {
    get { return self.mNamePrefix_property.propval }
    set { self.mNamePrefix_property.setProp (newValue) }
  }

  //····················································································································

  var mNamePrefix_property_selection : EBSelection <String> { return self.mNamePrefix_property.prop }

  //····················································································································
  //   Atomic property: mNameIndex
  //····················································································································

  let mNameIndex_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mNameIndex : Int {
    get { return self.mNameIndex_property.propval }
    set { self.mNameIndex_property.setProp (newValue) }
  }

  //····················································································································

  var mNameIndex_property_selection : EBSelection <Int> { return self.mNameIndex_property.prop }

  //····················································································································
  //   Atomic property: mComponentValue
  //····················································································································

  let mComponentValue_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mComponentValue : String {
    get { return self.mComponentValue_property.propval }
    set { self.mComponentValue_property.setProp (newValue) }
  }

  //····················································································································

  var mComponentValue_property_selection : EBSelection <String> { return self.mComponentValue_property.prop }

  //····················································································································
  //   To many property: mSymbols
  //····················································································································

  let mSymbols_property = StoredArrayOf_ComponentSymbolInProject ()

  //····················································································································

  var mSymbols_property_selection : EBSelection < [ComponentSymbolInProject] > {
    return self.mSymbols_property.prop
  }

  //····················································································································

  var mSymbols : [ComponentSymbolInProject] {
    get { return self.mSymbols_property.propval }
    set { self.mSymbols_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: mDevice
  //····················································································································

   let mDevice_property = StoredObject_DeviceInProject ()

  //····················································································································

  var mDevice_property_selection : EBSelection <DeviceInProject?> {
    return .single (self.mDevice_property.propval)
  }

  //····················································································································

  var mDevice : DeviceInProject? {
    get {
      return self.mDevice_property.propval
    }
    set {
      if self.mDevice_property.propval != nil {
        self.mDevice_property.setProp (nil)
      }
      if newValue != nil {
        self.mDevice_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mDevice_none : StoredObject_DeviceInProject { return self.mDevice_property }

  //····················································································································

  var mDevice_none_selection : EBSelection <Bool> {
    return .single (self.mDevice_property.propval == nil)
  }

  //····················································································································
  //   To one property: mSelectedPackage
  //····················································································································

   let mSelectedPackage_property = StoredObject_DevicePackageInProject ()

  //····················································································································

  var mSelectedPackage_property_selection : EBSelection <DevicePackageInProject?> {
    return .single (self.mSelectedPackage_property.propval)
  }

  //····················································································································

  var mSelectedPackage : DevicePackageInProject? {
    get {
      return self.mSelectedPackage_property.propval
    }
    set {
      if self.mSelectedPackage_property.propval != nil {
        self.mSelectedPackage_property.setProp (nil)
      }
      if newValue != nil {
        self.mSelectedPackage_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mSelectedPackage_none : StoredObject_DevicePackageInProject { return self.mSelectedPackage_property }

  //····················································································································

  var mSelectedPackage_none_selection : EBSelection <Bool> {
    return .single (self.mSelectedPackage_property.propval == nil)
  }

  //····················································································································
  //   Transient property: componentName
  //····················································································································

  let componentName_property = EBTransientProperty_String ()

  //····················································································································

  var componentName_property_selection : EBSelection <String> {
    return self.componentName_property.prop
  }

  //····················································································································

  var componentName : String? {
    switch self.componentName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: deviceName
  //····················································································································

  let deviceName_property = EBTransientProperty_String ()

  //····················································································································

  var deviceName_property_selection : EBSelection <String> {
    return self.deviceName_property.prop
  }

  //····················································································································

  var deviceName : String? {
    switch self.deviceName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: selectedPackageName
  //····················································································································

  let selectedPackageName_property = EBTransientProperty_String ()

  //····················································································································

  var selectedPackageName_property_selection : EBSelection <String> {
    return self.selectedPackageName_property.prop
  }

  //····················································································································

  var selectedPackageName : String? {
    switch self.selectedPackageName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: availablePackages
  //····················································································································

  let availablePackages_property = EBTransientProperty_StringArray ()

  //····················································································································

  var availablePackages_property_selection : EBSelection <StringArray> {
    return self.availablePackages_property.prop
  }

  //····················································································································

  var availablePackages : StringArray? {
    switch self.availablePackages_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: deviceSymbolDictionary
  //····················································································································

  let deviceSymbolDictionary_property = EBTransientProperty_DeviceSymbolDictionary ()

  //····················································································································

  var deviceSymbolDictionary_property_selection : EBSelection <DeviceSymbolDictionary> {
    return self.deviceSymbolDictionary_property.prop
  }

  //····················································································································

  var deviceSymbolDictionary : DeviceSymbolDictionary? {
    switch self.deviceSymbolDictionary_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unplacedSymbols
  //····················································································································

  let unplacedSymbols_property = EBTransientProperty_StringTagArray ()

  //····················································································································

  var unplacedSymbols_property_selection : EBSelection <StringTagArray> {
    return self.unplacedSymbols_property.prop
  }

  //····················································································································

  var unplacedSymbols : StringTagArray? {
    switch self.unplacedSymbols_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: placementInSchematic
  //····················································································································

  let placementInSchematic_property = EBTransientProperty_String ()

  //····················································································································

  var placementInSchematic_property_selection : EBSelection <String> {
    return self.placementInSchematic_property.prop
  }

  //····················································································································

  var placementInSchematic : String? {
    switch self.placementInSchematic_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mNamePrefix
    self.mNamePrefix_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mNameIndex
    self.mNameIndex_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mComponentValue
    self.mComponentValue_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mSymbols (has opposite relationship)
    self.mSymbols_property.ebUndoManager = self.ebUndoManager
    self.mSymbols_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponent_property.setProp (me) } },
      resetter: { inObject in inObject.mComponent_property.setProp (nil) }
    )
  //--- To one property: mDevice (has opposite to many relationship: mComponents) §
    self.mDevice_property.ebUndoManager = self.ebUndoManager
    self.mDevice_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponents_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mComponents_property.remove (me) } }
    )
  //--- To one property: mSelectedPackage
    self.mSelectedPackage_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: componentName
    self.componentName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mNamePrefix_property_selection.kind ()
        kind &= unwSelf.mNameIndex_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNamePrefix_property_selection, unwSelf.mNameIndex_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ComponentInProject_componentName (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNamePrefix_property.addEBObserver (self.componentName_property)
    self.mNameIndex_property.addEBObserver (self.componentName_property)
  //--- Atomic property: deviceName
    self.deviceName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDevice_property.mDeviceName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mDevice_property.mDeviceName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_deviceName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDevice_property.addEBObserverOf_mDeviceName (self.deviceName_property)
  //--- Atomic property: selectedPackageName
    self.selectedPackageName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSelectedPackage_property.mPackageName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSelectedPackage_property.mPackageName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_selectedPackageName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSelectedPackage_property.addEBObserverOf_mPackageName (self.selectedPackageName_property)
  //--- Atomic property: availablePackages
    self.availablePackages_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDevice_property.packageNames_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mDevice_property.packageNames_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_availablePackages (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDevice_property.addEBObserverOf_packageNames (self.availablePackages_property)
  //--- Atomic property: deviceSymbolDictionary
    self.deviceSymbolDictionary_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDevice_property.deviceSymbolDictionary_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mDevice_property.deviceSymbolDictionary_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_deviceSymbolDictionary (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDevice_property.addEBObserverOf_deviceSymbolDictionary (self.deviceSymbolDictionary_property)
  //--- Atomic property: unplacedSymbols
    self.unplacedSymbols_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.componentName_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.componentName_property_selection, unwSelf.mSymbols_property_selection, unwSelf.mSymbols_property_selection, unwSelf.mSymbols_property_selection, unwSelf.mSymbols_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_ComponentInProject_unplacedSymbols (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.componentName_property.addEBObserver (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserver (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserverOf_symbolInSchematic (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserverOf_mSymbolInstanceName (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserverOf_mSymbolTypeName (self.unplacedSymbols_property)
  //--- Atomic property: placementInSchematic
    self.placementInSchematic_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSymbols_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSymbols_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_placementInSchematic (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbols_property.addEBObserverOf_symbolInSchematic (self.placementInSchematic_property)
  //--- Install undoers and opposite setter for relationships
    self.mSymbols_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponent_property.setProp (me) } },
      resetter: { inObject in inObject.mComponent_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mNamePrefix_property.removeEBObserver (self.componentName_property)
    self.mNameIndex_property.removeEBObserver (self.componentName_property)
    self.mDevice_property.removeEBObserverOf_mDeviceName (self.deviceName_property)
    self.mSelectedPackage_property.removeEBObserverOf_mPackageName (self.selectedPackageName_property)
    self.mDevice_property.removeEBObserverOf_packageNames (self.availablePackages_property)
    self.mDevice_property.removeEBObserverOf_deviceSymbolDictionary (self.deviceSymbolDictionary_property)
    self.componentName_property.removeEBObserver (self.unplacedSymbols_property)
    self.mSymbols_property.removeEBObserver (self.unplacedSymbols_property)
    self.mSymbols_property.removeEBObserverOf_symbolInSchematic (self.unplacedSymbols_property)
    self.mSymbols_property.removeEBObserverOf_mSymbolInstanceName (self.unplacedSymbols_property)
    self.mSymbols_property.removeEBObserverOf_mSymbolTypeName (self.unplacedSymbols_property)
    self.mSymbols_property.removeEBObserverOf_symbolInSchematic (self.placementInSchematic_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mNamePrefix",
      idx: self.mNamePrefix_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mNamePrefix_property.mObserverExplorer,
      valueExplorer: &self.mNamePrefix_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNameIndex",
      idx: self.mNameIndex_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mNameIndex_property.mObserverExplorer,
      valueExplorer: &self.mNameIndex_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mComponentValue",
      idx: self.mComponentValue_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mComponentValue_property.mObserverExplorer,
      valueExplorer: &self.mComponentValue_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "componentName",
      idx: self.componentName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.componentName_property.mObserverExplorer,
      valueExplorer: &self.componentName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "deviceName",
      idx: self.deviceName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.deviceName_property.mObserverExplorer,
      valueExplorer: &self.deviceName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedPackageName",
      idx: self.selectedPackageName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectedPackageName_property.mObserverExplorer,
      valueExplorer: &self.selectedPackageName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "availablePackages",
      idx: self.availablePackages_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.availablePackages_property.mObserverExplorer,
      valueExplorer: &self.availablePackages_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "deviceSymbolDictionary",
      idx: self.deviceSymbolDictionary_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.deviceSymbolDictionary_property.mObserverExplorer,
      valueExplorer: &self.deviceSymbolDictionary_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "unplacedSymbols",
      idx: self.unplacedSymbols_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.unplacedSymbols_property.mObserverExplorer,
      valueExplorer: &self.unplacedSymbols_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "placementInSchematic",
      idx: self.placementInSchematic_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.placementInSchematic_property.mObserverExplorer,
      valueExplorer: &self.placementInSchematic_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "mSymbols",
      idx:mSymbols_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mSymbols_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "mDevice",
      idx:self.mDevice_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mDevice_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mSelectedPackage",
      idx:self.mSelectedPackage_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mSelectedPackage_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mNamePrefix
    self.mNamePrefix_property.mObserverExplorer = nil
    self.mNamePrefix_property.mValueExplorer = nil
  //--- Atomic property: mNameIndex
    self.mNameIndex_property.mObserverExplorer = nil
    self.mNameIndex_property.mValueExplorer = nil
  //--- Atomic property: mComponentValue
    self.mComponentValue_property.mObserverExplorer = nil
    self.mComponentValue_property.mValueExplorer = nil
  //--- To many property: mSymbols
    self.mSymbols_property.mValueExplorer = nil
  //--- To one property: mDevice
    self.mDevice_property.mObserverExplorer = nil
    self.mDevice_property.mValueExplorer = nil
  //--- To one property: mSelectedPackage
    self.mSelectedPackage_property.mObserverExplorer = nil
    self.mSelectedPackage_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mSymbols = []
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mDevice = nil
    self.mSelectedPackage = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mNamePrefix
    self.mNamePrefix_property.storeIn (dictionary: ioDictionary, forKey:"mNamePrefix")
  //--- Atomic property: mNameIndex
    self.mNameIndex_property.storeIn (dictionary: ioDictionary, forKey:"mNameIndex")
  //--- Atomic property: mComponentValue
    self.mComponentValue_property.storeIn (dictionary: ioDictionary, forKey:"mComponentValue")
  //--- To many property: mSymbols
    self.store (
      managedObjectArray: self.mSymbols_property.propval,
      relationshipName: "mSymbols",
      intoDictionary: ioDictionary
    )
  //--- To one property: mSelectedPackage
    self.store (managedObject:self.mSelectedPackage_property.propval,
      relationshipName: "mSelectedPackage",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mSymbols
    self.mSymbols_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mSymbols",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [ComponentSymbolInProject])
  //--- To one property: mDevice
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mDevice",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? DeviceInProject {
        self.mDevice_property.setProp (entity)
      }
    }
  //--- To one property: mSelectedPackage
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mSelectedPackage",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? DevicePackageInProject {
        self.mSelectedPackage_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mNamePrefix
    self.mNamePrefix_property.readFrom (dictionary: inDictionary, forKey:"mNamePrefix")
  //--- Atomic property: mNameIndex
    self.mNameIndex_property.readFrom (dictionary: inDictionary, forKey:"mNameIndex")
  //--- Atomic property: mComponentValue
    self.mComponentValue_property.readFrom (dictionary: inDictionary, forKey:"mComponentValue")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mSymbols
    for managedObject in self.mSymbols {
      objects.append (managedObject)
    }
  //--- To one property: mDevice
    if let object = self.mDevice {
      objects.append (object)
    }
  //--- To one property: mSelectedPackage
    if let object = self.mSelectedPackage {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mSymbols
    for managedObject in self.mSymbols {
      objects.append (managedObject)
    }
  //--- To one property: mDevice
    if let object = self.mDevice {
      objects.append (object)
    }
  //--- To one property: mSelectedPackage
    if let object = self.mSelectedPackage {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

