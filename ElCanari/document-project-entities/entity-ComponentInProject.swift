//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

//--- START OF USER ZONE 1

let COMPONENT_PACKAGE_CENTER_KNOB  = 0
let COMPONENT_PACKAGE_ROTATION_KNOB  = 1
let COMPONENT_PACKAGE_NAME_KNOB  = 2
let COMPONENT_PACKAGE_VALUE_KNOB = 3

//----------------------------------------------------------------------------------------------------------------------

let COMPONENT_PACKAGE_ROTATION_KNOB_DISTANCE : CGFloat = 10.0

//--- END OF USER ZONE 1
//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_mSlavePadsShouldBeRouted : AnyObject {
  var mSlavePadsShouldBeRouted : Bool { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_mX : AnyObject {
  var mX : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_mY : AnyObject {
  var mY : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_mRotation : AnyObject {
  var mRotation : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_mSide : AnyObject {
  var mSide : ComponentSide { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_mDisplayLegend : AnyObject {
  var mDisplayLegend : Bool { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_mNameIsVisibleInBoard : AnyObject {
  var mNameIsVisibleInBoard : Bool { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_mXName : AnyObject {
  var mXName : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_mYName : AnyObject {
  var mYName : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_mNameFontSize : AnyObject {
  var mNameFontSize : Double { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_mNameRotation : AnyObject {
  var mNameRotation : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_mValueIsVisibleInBoard : AnyObject {
  var mValueIsVisibleInBoard : Bool { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_mXValue : AnyObject {
  var mXValue : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_mYValue : AnyObject {
  var mYValue : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_mValueFontSize : AnyObject {
  var mValueFontSize : Double { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_mValueRotation : AnyObject {
  var mValueRotation : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_mComponentValue : AnyObject {
  var mComponentValue : String { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_mNamePrefix : AnyObject {
  var mNamePrefix : String { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_mNameIndex : AnyObject {
  var mNameIndex : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_mXUnit : AnyObject {
  var mXUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_mYUnit : AnyObject {
  var mYUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_deviceName : AnyObject {
  var deviceName : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_signatureForERCChecking : AnyObject {
  var signatureForERCChecking : UInt32? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_packagePadDictionary : AnyObject {
  var packagePadDictionary : PackageMasterPadDictionary? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_selectedPackageName : AnyObject {
  var selectedPackageName : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_availablePackages : AnyObject {
  var availablePackages : StringArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_issues : AnyObject {
  var issues : CanariIssueArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_componentIsPlacedInBoard : AnyObject {
  var componentIsPlacedInBoard : Bool? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_componentIsPlacedInBoardString : AnyObject {
  var componentIsPlacedInBoardString : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_strokeBezierPath : AnyObject {
  var strokeBezierPath : EBBezierPath? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_pinPadAssignments : AnyObject {
  var pinPadAssignments : ThreeStringArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_hasSlavePads : AnyObject {
  var hasSlavePads : Bool? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_placementInSchematic : AnyObject {
  var placementInSchematic : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_deviceSymbolDictionary : AnyObject {
  var deviceSymbolDictionary : DeviceSymbolDictionary? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_componentNameFontName : AnyObject {
  var componentNameFontName : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_componentValueFontName : AnyObject {
  var componentValueFontName : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_componentPadDictionary : AnyObject {
  var componentPadDictionary : ComponentPadDescriptorDictionary? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_padNetDictionary : AnyObject {
  var padNetDictionary : PadNetDictionary? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_componentName : AnyObject {
  var componentName : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_unplacedSymbols : AnyObject {
  var unplacedSymbols : StringTagArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol ComponentInProject_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//----------------------------------------------------------------------------------------------------------------------
//    Entity: ComponentInProject
//----------------------------------------------------------------------------------------------------------------------

final class ComponentInProject : BoardObject,
         ComponentInProject_mSlavePadsShouldBeRouted,
         ComponentInProject_mX,
         ComponentInProject_mY,
         ComponentInProject_mRotation,
         ComponentInProject_mSide,
         ComponentInProject_mDisplayLegend,
         ComponentInProject_mNameIsVisibleInBoard,
         ComponentInProject_mXName,
         ComponentInProject_mYName,
         ComponentInProject_mNameFontSize,
         ComponentInProject_mNameRotation,
         ComponentInProject_mValueIsVisibleInBoard,
         ComponentInProject_mXValue,
         ComponentInProject_mYValue,
         ComponentInProject_mValueFontSize,
         ComponentInProject_mValueRotation,
         ComponentInProject_mComponentValue,
         ComponentInProject_mNamePrefix,
         ComponentInProject_mNameIndex,
         ComponentInProject_mXUnit,
         ComponentInProject_mYUnit,
         ComponentInProject_deviceName,
         ComponentInProject_signatureForERCChecking,
         ComponentInProject_packagePadDictionary,
         ComponentInProject_selectedPackageName,
         ComponentInProject_availablePackages,
         ComponentInProject_issues,
         ComponentInProject_componentIsPlacedInBoard,
         ComponentInProject_componentIsPlacedInBoardString,
         ComponentInProject_strokeBezierPath,
         ComponentInProject_pinPadAssignments,
         ComponentInProject_hasSlavePads,
         ComponentInProject_placementInSchematic,
         ComponentInProject_deviceSymbolDictionary,
         ComponentInProject_componentNameFontName,
         ComponentInProject_componentValueFontName,
         ComponentInProject_componentPadDictionary,
         ComponentInProject_padNetDictionary,
         ComponentInProject_componentName,
         ComponentInProject_selectionDisplay,
         ComponentInProject_unplacedSymbols,
         ComponentInProject_objectDisplay {

  //····················································································································
  //   Atomic property: mSlavePadsShouldBeRouted
  //····················································································································

  final let mSlavePadsShouldBeRouted_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mSlavePadsShouldBeRouted_toDefaultValue () {
    self.mSlavePadsShouldBeRouted = true
  }

  //····················································································································

  final var mSlavePadsShouldBeRouted : Bool {
    get { return self.mSlavePadsShouldBeRouted_property.propval }
    set { self.mSlavePadsShouldBeRouted_property.setProp (newValue) }
  }

  //····················································································································

  final var mSlavePadsShouldBeRouted_property_selection : EBSelection <Bool> { return self.mSlavePadsShouldBeRouted_property.selection }

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  final let mX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mX_toDefaultValue () {
    self.mX = 0
  }

  //····················································································································

  final var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································

  final var mX_property_selection : EBSelection <Int> { return self.mX_property.selection }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  final let mY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mY_toDefaultValue () {
    self.mY = 0
  }

  //····················································································································

  final var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································

  final var mY_property_selection : EBSelection <Int> { return self.mY_property.selection }

  //····················································································································
  //   Atomic property: mRotation
  //····················································································································

  final let mRotation_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mRotation_toDefaultValue () {
    self.mRotation = 0
  }

  //····················································································································

  final var mRotation : Int {
    get { return self.mRotation_property.propval }
    set { self.mRotation_property.setProp (newValue) }
  }

  //····················································································································

  final var mRotation_property_selection : EBSelection <Int> { return self.mRotation_property.selection }

  //····················································································································
  //   Atomic property: mSide
  //····················································································································

  final let mSide_property : EBStoredProperty_ComponentSide

  //····················································································································

  final func reset_mSide_toDefaultValue () {
    self.mSide = ComponentSide.front
  }

  //····················································································································

  final var mSide : ComponentSide {
    get { return self.mSide_property.propval }
    set { self.mSide_property.setProp (newValue) }
  }

  //····················································································································

  final var mSide_property_selection : EBSelection <ComponentSide> { return self.mSide_property.selection }

  //····················································································································
  //   Atomic property: mDisplayLegend
  //····················································································································

  final let mDisplayLegend_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mDisplayLegend_toDefaultValue () {
    self.mDisplayLegend = true
  }

  //····················································································································

  final var mDisplayLegend : Bool {
    get { return self.mDisplayLegend_property.propval }
    set { self.mDisplayLegend_property.setProp (newValue) }
  }

  //····················································································································

  final var mDisplayLegend_property_selection : EBSelection <Bool> { return self.mDisplayLegend_property.selection }

  //····················································································································
  //   To many property: mConnectors
  //····················································································································

  final let mConnectors_property = StoredArrayOf_BoardConnector (usedForSignature: false)

  //····················································································································

  final var mConnectors_property_selection : EBSelection < [BoardConnector] > {
    return self.mConnectors_property.selection
  }

  //····················································································································

  final var mConnectors : [BoardConnector] {
    get { return self.mConnectors_property.propval }
    set { self.mConnectors_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mSymbols
  //····················································································································

  final let mSymbols_property = StoredArrayOf_ComponentSymbolInProject (usedForSignature: false)

  //····················································································································

  final var mSymbols_property_selection : EBSelection < [ComponentSymbolInProject] > {
    return self.mSymbols_property.selection
  }

  //····················································································································

  final var mSymbols : [ComponentSymbolInProject] {
    get { return self.mSymbols_property.propval }
    set { self.mSymbols_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mNameIsVisibleInBoard
  //····················································································································

  final let mNameIsVisibleInBoard_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mNameIsVisibleInBoard_toDefaultValue () {
    self.mNameIsVisibleInBoard = true
  }

  //····················································································································

  final var mNameIsVisibleInBoard : Bool {
    get { return self.mNameIsVisibleInBoard_property.propval }
    set { self.mNameIsVisibleInBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var mNameIsVisibleInBoard_property_selection : EBSelection <Bool> { return self.mNameIsVisibleInBoard_property.selection }

  //····················································································································
  //   Atomic property: mXName
  //····················································································································

  final let mXName_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mXName_toDefaultValue () {
    self.mXName = 0
  }

  //····················································································································

  final var mXName : Int {
    get { return self.mXName_property.propval }
    set { self.mXName_property.setProp (newValue) }
  }

  //····················································································································

  final var mXName_property_selection : EBSelection <Int> { return self.mXName_property.selection }

  //····················································································································
  //   Atomic property: mYName
  //····················································································································

  final let mYName_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mYName_toDefaultValue () {
    self.mYName = 685800
  }

  //····················································································································

  final var mYName : Int {
    get { return self.mYName_property.propval }
    set { self.mYName_property.setProp (newValue) }
  }

  //····················································································································

  final var mYName_property_selection : EBSelection <Int> { return self.mYName_property.selection }

  //····················································································································
  //   Atomic property: mNameFontSize
  //····················································································································

  final let mNameFontSize_property : EBStoredProperty_Double

  //····················································································································

  final func reset_mNameFontSize_toDefaultValue () {
    self.mNameFontSize = 4
  }

  //····················································································································

  final var mNameFontSize : Double {
    get { return self.mNameFontSize_property.propval }
    set { self.mNameFontSize_property.setProp (newValue) }
  }

  //····················································································································

  final var mNameFontSize_property_selection : EBSelection <Double> { return self.mNameFontSize_property.selection }

  //····················································································································
  //   Atomic property: mNameRotation
  //····················································································································

  final let mNameRotation_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mNameRotation_toDefaultValue () {
    self.mNameRotation = 0
  }

  //····················································································································

  final var mNameRotation : Int {
    get { return self.mNameRotation_property.propval }
    set { self.mNameRotation_property.setProp (newValue) }
  }

  //····················································································································

  final var mNameRotation_property_selection : EBSelection <Int> { return self.mNameRotation_property.selection }

  //····················································································································
  //   Atomic property: mValueIsVisibleInBoard
  //····················································································································

  final let mValueIsVisibleInBoard_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mValueIsVisibleInBoard_toDefaultValue () {
    self.mValueIsVisibleInBoard = true
  }

  //····················································································································

  final var mValueIsVisibleInBoard : Bool {
    get { return self.mValueIsVisibleInBoard_property.propval }
    set { self.mValueIsVisibleInBoard_property.setProp (newValue) }
  }

  //····················································································································

  final var mValueIsVisibleInBoard_property_selection : EBSelection <Bool> { return self.mValueIsVisibleInBoard_property.selection }

  //····················································································································
  //   Atomic property: mXValue
  //····················································································································

  final let mXValue_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mXValue_toDefaultValue () {
    self.mXValue = 0
  }

  //····················································································································

  final var mXValue : Int {
    get { return self.mXValue_property.propval }
    set { self.mXValue_property.setProp (newValue) }
  }

  //····················································································································

  final var mXValue_property_selection : EBSelection <Int> { return self.mXValue_property.selection }

  //····················································································································
  //   Atomic property: mYValue
  //····················································································································

  final let mYValue_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mYValue_toDefaultValue () {
    self.mYValue = -685800
  }

  //····················································································································

  final var mYValue : Int {
    get { return self.mYValue_property.propval }
    set { self.mYValue_property.setProp (newValue) }
  }

  //····················································································································

  final var mYValue_property_selection : EBSelection <Int> { return self.mYValue_property.selection }

  //····················································································································
  //   Atomic property: mValueFontSize
  //····················································································································

  final let mValueFontSize_property : EBStoredProperty_Double

  //····················································································································

  final func reset_mValueFontSize_toDefaultValue () {
    self.mValueFontSize = 4
  }

  //····················································································································

  final var mValueFontSize : Double {
    get { return self.mValueFontSize_property.propval }
    set { self.mValueFontSize_property.setProp (newValue) }
  }

  //····················································································································

  final var mValueFontSize_property_selection : EBSelection <Double> { return self.mValueFontSize_property.selection }

  //····················································································································
  //   Atomic property: mValueRotation
  //····················································································································

  final let mValueRotation_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mValueRotation_toDefaultValue () {
    self.mValueRotation = 0
  }

  //····················································································································

  final var mValueRotation : Int {
    get { return self.mValueRotation_property.propval }
    set { self.mValueRotation_property.setProp (newValue) }
  }

  //····················································································································

  final var mValueRotation_property_selection : EBSelection <Int> { return self.mValueRotation_property.selection }

  //····················································································································
  //   Atomic property: mComponentValue
  //····················································································································

  final let mComponentValue_property : EBStoredProperty_String

  //····················································································································

  final func reset_mComponentValue_toDefaultValue () {
    self.mComponentValue = ""
  }

  //····················································································································

  final var mComponentValue : String {
    get { return self.mComponentValue_property.propval }
    set { self.mComponentValue_property.setProp (newValue) }
  }

  //····················································································································

  final var mComponentValue_property_selection : EBSelection <String> { return self.mComponentValue_property.selection }

  //····················································································································
  //   Atomic property: mNamePrefix
  //····················································································································

  final let mNamePrefix_property : EBStoredProperty_String

  //····················································································································

  final func reset_mNamePrefix_toDefaultValue () {
    self.mNamePrefix = ""
  }

  //····················································································································

  final var mNamePrefix : String {
    get { return self.mNamePrefix_property.propval }
    set { self.mNamePrefix_property.setProp (newValue) }
  }

  //····················································································································

  final var mNamePrefix_property_selection : EBSelection <String> { return self.mNamePrefix_property.selection }

  //····················································································································
  //   Atomic property: mNameIndex
  //····················································································································

  final let mNameIndex_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mNameIndex_toDefaultValue () {
    self.mNameIndex = 0
  }

  //····················································································································

  final var mNameIndex : Int {
    get { return self.mNameIndex_property.propval }
    set { self.mNameIndex_property.setProp (newValue) }
  }

  //····················································································································

  final var mNameIndex_property_selection : EBSelection <Int> { return self.mNameIndex_property.selection }

  //····················································································································
  //   Atomic property: mXUnit
  //····················································································································

  final let mXUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mXUnit_toDefaultValue () {
    self.mXUnit = 2286
  }

  //····················································································································

  final var mXUnit : Int {
    get { return self.mXUnit_property.propval }
    set { self.mXUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var mXUnit_property_selection : EBSelection <Int> { return self.mXUnit_property.selection }

  //····················································································································
  //   Atomic property: mYUnit
  //····················································································································

  final let mYUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mYUnit_toDefaultValue () {
    self.mYUnit = 2286
  }

  //····················································································································

  final var mYUnit : Int {
    get { return self.mYUnit_property.propval }
    set { self.mYUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var mYUnit_property_selection : EBSelection <Int> { return self.mYUnit_property.selection }

  //····················································································································
  //   Array controller: componentAvailablePackagesController
  //····················································································································

  var componentAvailablePackagesController = Controller_ComponentInProject_componentAvailablePackagesController ()

  //····················································································································
  //   ToMany proxy: mPackages
  //····················································································································

  var mPackages_modelDidChangeController : EBReadOnlyPropertyController? = nil
  // var mPackages_boundObjectDidChangeController : EBReadOnlyPropertyController? = nil
  let mPackages_property = ProxyArrayOf_DevicePackageInProject ()

  //····················································································································

  var mPackages : [DevicePackageInProject] {
    get {
      switch self.mPackages_property.selection {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }
    set {
      self.mPackages_property.setProp (newValue)
    }
  }

  //····················································································································

  var mPackages_property_selection : EBSelection <[DevicePackageInProject]> {
    return self.mPackages_property.selection
  }

  //····················································································································
  //   To one property: mDevice
  //····················································································································

  final let mDevice_property = StoredObject_DeviceInProject (usedForSignature: false)

  //····················································································································

  final var mDevice_property_selection : EBSelection <DeviceInProject?> {
    return .single (self.mDevice_property.propval)
  }

  //····················································································································

  final var mDevice : DeviceInProject? {
    get {
      return self.mDevice_property.propval
    }
    set {
      if self.mDevice_property.propval != nil {
        self.mDevice_property.setProp (nil)
      }
      if newValue != nil {
        self.mDevice_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  final var mDevice_none : StoredObject_DeviceInProject { return self.mDevice_property }

  //····················································································································

  final var mDevice_none_selection : EBSelection <Bool> {
    return .single (self.mDevice_property.propval == nil)
  }

  //····················································································································
  //   Transient property: deviceName
  //····················································································································

  final let deviceName_property = EBTransientProperty_String ()

  //····················································································································

  final var deviceName_property_selection : EBSelection <String> {
    return self.deviceName_property.selection
  }

  //····················································································································

  final var deviceName : String? {
    switch self.deviceName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   To one property: mSelectedPackage
  //····················································································································

  final let mSelectedPackage_property = StoredObject_DevicePackageInProject (usedForSignature: false)

  //····················································································································

  final var mSelectedPackage_property_selection : EBSelection <DevicePackageInProject?> {
    return .single (self.mSelectedPackage_property.propval)
  }

  //····················································································································

  final var mSelectedPackage : DevicePackageInProject? {
    get {
      return self.mSelectedPackage_property.propval
    }
    set {
      if self.mSelectedPackage_property.propval != nil {
        self.mSelectedPackage_property.setProp (nil)
      }
      if newValue != nil {
        self.mSelectedPackage_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  final var mSelectedPackage_none : StoredObject_DevicePackageInProject { return self.mSelectedPackage_property }

  //····················································································································

  final var mSelectedPackage_none_selection : EBSelection <Bool> {
    return .single (self.mSelectedPackage_property.propval == nil)
  }

  //····················································································································
  //   Transient property: packagePadDictionary
  //····················································································································

  final let packagePadDictionary_property = EBTransientProperty_PackageMasterPadDictionary ()

  //····················································································································

  final var packagePadDictionary_property_selection : EBSelection <PackageMasterPadDictionary> {
    return self.packagePadDictionary_property.selection
  }

  //····················································································································

  final var packagePadDictionary : PackageMasterPadDictionary? {
    switch self.packagePadDictionary_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: selectedPackageName
  //····················································································································

  final let selectedPackageName_property = EBTransientProperty_String ()

  //····················································································································

  final var selectedPackageName_property_selection : EBSelection <String> {
    return self.selectedPackageName_property.selection
  }

  //····················································································································

  final var selectedPackageName : String? {
    switch self.selectedPackageName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: availablePackages
  //····················································································································

  final let availablePackages_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var availablePackages_property_selection : EBSelection <StringArray> {
    return self.availablePackages_property.selection
  }

  //····················································································································

  final var availablePackages : StringArray? {
    switch self.availablePackages_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentIsPlacedInBoard
  //····················································································································

  final let componentIsPlacedInBoard_property = EBTransientProperty_Bool ()

  //····················································································································

  final var componentIsPlacedInBoard_property_selection : EBSelection <Bool> {
    return self.componentIsPlacedInBoard_property.selection
  }

  //····················································································································

  final var componentIsPlacedInBoard : Bool? {
    switch self.componentIsPlacedInBoard_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentIsPlacedInBoardString
  //····················································································································

  final let componentIsPlacedInBoardString_property = EBTransientProperty_String ()

  //····················································································································

  final var componentIsPlacedInBoardString_property_selection : EBSelection <String> {
    return self.componentIsPlacedInBoardString_property.selection
  }

  //····················································································································

  final var componentIsPlacedInBoardString : String? {
    switch self.componentIsPlacedInBoardString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: strokeBezierPath
  //····················································································································

  final let strokeBezierPath_property = EBTransientProperty_EBBezierPath ()

  //····················································································································

  final var strokeBezierPath_property_selection : EBSelection <EBBezierPath> {
    return self.strokeBezierPath_property.selection
  }

  //····················································································································

  final var strokeBezierPath : EBBezierPath? {
    switch self.strokeBezierPath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   To one property: mNameFont
  //····················································································································

  final let mNameFont_property = StoredObject_FontInProject (usedForSignature: false)

  //····················································································································

  final var mNameFont_property_selection : EBSelection <FontInProject?> {
    return .single (self.mNameFont_property.propval)
  }

  //····················································································································

  final var mNameFont : FontInProject? {
    get {
      return self.mNameFont_property.propval
    }
    set {
      if self.mNameFont_property.propval != nil {
        self.mNameFont_property.setProp (nil)
      }
      if newValue != nil {
        self.mNameFont_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  final var mNameFont_none : StoredObject_FontInProject { return self.mNameFont_property }

  //····················································································································

  final var mNameFont_none_selection : EBSelection <Bool> {
    return .single (self.mNameFont_property.propval == nil)
  }

  //····················································································································
  //   To one property: mValueFont
  //····················································································································

  final let mValueFont_property = StoredObject_FontInProject (usedForSignature: false)

  //····················································································································

  final var mValueFont_property_selection : EBSelection <FontInProject?> {
    return .single (self.mValueFont_property.propval)
  }

  //····················································································································

  final var mValueFont : FontInProject? {
    get {
      return self.mValueFont_property.propval
    }
    set {
      if self.mValueFont_property.propval != nil {
        self.mValueFont_property.setProp (nil)
      }
      if newValue != nil {
        self.mValueFont_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  final var mValueFont_none : StoredObject_FontInProject { return self.mValueFont_property }

  //····················································································································

  final var mValueFont_none_selection : EBSelection <Bool> {
    return .single (self.mValueFont_property.propval == nil)
  }

  //····················································································································
  //   Transient property: pinPadAssignments
  //····················································································································

  final let pinPadAssignments_property = EBTransientProperty_ThreeStringArray ()

  //····················································································································

  final var pinPadAssignments_property_selection : EBSelection <ThreeStringArray> {
    return self.pinPadAssignments_property.selection
  }

  //····················································································································

  final var pinPadAssignments : ThreeStringArray? {
    switch self.pinPadAssignments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: hasSlavePads
  //····················································································································

  final let hasSlavePads_property = EBTransientProperty_Bool ()

  //····················································································································

  final var hasSlavePads_property_selection : EBSelection <Bool> {
    return self.hasSlavePads_property.selection
  }

  //····················································································································

  final var hasSlavePads : Bool? {
    switch self.hasSlavePads_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: placementInSchematic
  //····················································································································

  final let placementInSchematic_property = EBTransientProperty_String ()

  //····················································································································

  final var placementInSchematic_property_selection : EBSelection <String> {
    return self.placementInSchematic_property.selection
  }

  //····················································································································

  final var placementInSchematic : String? {
    switch self.placementInSchematic_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: deviceSymbolDictionary
  //····················································································································

  final let deviceSymbolDictionary_property = EBTransientProperty_DeviceSymbolDictionary ()

  //····················································································································

  final var deviceSymbolDictionary_property_selection : EBSelection <DeviceSymbolDictionary> {
    return self.deviceSymbolDictionary_property.selection
  }

  //····················································································································

  final var deviceSymbolDictionary : DeviceSymbolDictionary? {
    switch self.deviceSymbolDictionary_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentNameFontName
  //····················································································································

  final let componentNameFontName_property = EBTransientProperty_String ()

  //····················································································································

  final var componentNameFontName_property_selection : EBSelection <String> {
    return self.componentNameFontName_property.selection
  }

  //····················································································································

  final var componentNameFontName : String? {
    switch self.componentNameFontName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentValueFontName
  //····················································································································

  final let componentValueFontName_property = EBTransientProperty_String ()

  //····················································································································

  final var componentValueFontName_property_selection : EBSelection <String> {
    return self.componentValueFontName_property.selection
  }

  //····················································································································

  final var componentValueFontName : String? {
    switch self.componentValueFontName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: componentPadDictionary
  //····················································································································

  final let componentPadDictionary_property = EBTransientProperty_ComponentPadDescriptorDictionary ()

  //····················································································································

  final var componentPadDictionary_property_selection : EBSelection <ComponentPadDescriptorDictionary> {
    return self.componentPadDictionary_property.selection
  }

  //····················································································································

  final var componentPadDictionary : ComponentPadDescriptorDictionary? {
    switch self.componentPadDictionary_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padNetDictionary
  //····················································································································

  final let padNetDictionary_property = EBTransientProperty_PadNetDictionary ()

  //····················································································································

  final var padNetDictionary_property_selection : EBSelection <PadNetDictionary> {
    return self.padNetDictionary_property.selection
  }

  //····················································································································

  final var padNetDictionary : PadNetDictionary? {
    switch self.padNetDictionary_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unplacedSymbols
  //····················································································································

  final let unplacedSymbols_property = EBTransientProperty_StringTagArray ()

  //····················································································································

  final var unplacedSymbols_property_selection : EBSelection <StringTagArray> {
    return self.unplacedSymbols_property.selection
  }

  //····················································································································

  final var unplacedSymbols : StringTagArray? {
    switch self.unplacedSymbols_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.mSlavePadsShouldBeRouted_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    self.mX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mRotation_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mSide_property = EBStoredProperty_ComponentSide (defaultValue: ComponentSide.front, undoManager: ebUndoManager)
    self.mDisplayLegend_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    self.mNameIsVisibleInBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    self.mXName_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mYName_property = EBStoredProperty_Int (defaultValue: 685800, undoManager: ebUndoManager)
    self.mNameFontSize_property = EBStoredProperty_Double (defaultValue: 4, undoManager: ebUndoManager)
    self.mNameRotation_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mValueIsVisibleInBoard_property = EBStoredProperty_Bool (defaultValue: true, undoManager: ebUndoManager)
    self.mXValue_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mYValue_property = EBStoredProperty_Int (defaultValue: -685800, undoManager: ebUndoManager)
    self.mValueFontSize_property = EBStoredProperty_Double (defaultValue: 4, undoManager: ebUndoManager)
    self.mValueRotation_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mComponentValue_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.mNamePrefix_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.mNameIndex_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mXUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mYUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    super.init (ebUndoManager)
  //--- To many property: mConnectors (has opposite relationship)
    self.mConnectors_property.ebUndoManager = self.ebUndoManager
    self.mConnectors_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponent_property.setProp (me) } },
      resetter: { inObject in inObject.mComponent_property.setProp (nil) }
    )
  //--- To many property: mSymbols (has opposite relationship)
    self.mSymbols_property.ebUndoManager = self.ebUndoManager
    self.mSymbols_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponent_property.setProp (me) } },
      resetter: { inObject in inObject.mComponent_property.setProp (nil) }
    )
  //--- Array controller property: componentAvailablePackagesController
    self.componentAvailablePackagesController.bind_model (self.mPackages_property, self.ebUndoManager)
  //--- ToMany proxy: mPackages
    do{
      let controller = EBReadOnlyPropertyController (
        observedObjects: [self.mDevice_property],
        callBack: { [weak self] in
          if let me = self, let model = me.mDevice {
            me.mPackages_property.setModel (model.mPackages_property)
          }
        }
      )
      self.mDevice_property.addEBObserverOf_mPackages (controller)
      self.mPackages_modelDidChangeController = controller
    }
  //--- To one property: mDevice (has opposite to many relationship: mComponents)
    self.mDevice_property.ebUndoManager = self.ebUndoManager
    self.mDevice_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponents_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mComponents_property.remove (me) } }
    )
  //--- Atomic property: deviceName
    self.deviceName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDevice_property.mDeviceName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mDevice_property.mDeviceName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_deviceName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDevice_property.addEBObserverOf_mDeviceName (self.deviceName_property)
  //--- Atomic property: signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSlavePadsShouldBeRouted_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSlavePadsShouldBeRouted_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_signatureForERCChecking (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSlavePadsShouldBeRouted_property.addEBObserver (self.signatureForERCChecking_property)
  //--- To one property: mSelectedPackage
    self.mSelectedPackage_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: packagePadDictionary
    self.packagePadDictionary_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSelectedPackage_property.packagePadDictionary_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSelectedPackage_property.packagePadDictionary_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_packagePadDictionary (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSelectedPackage_property.addEBObserverOf_packagePadDictionary (self.packagePadDictionary_property)
  //--- Atomic property: selectedPackageName
    self.selectedPackageName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSelectedPackage_property.mPackageName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSelectedPackage_property.mPackageName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_selectedPackageName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSelectedPackage_property.addEBObserverOf_mPackageName (self.selectedPackageName_property)
  //--- Atomic property: availablePackages
    self.availablePackages_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDevice_property.packageNames_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mDevice_property.packageNames_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_availablePackages (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDevice_property.addEBObserverOf_packageNames (self.availablePackages_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mConnectors_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mConnectors_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_issues (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mConnectors_property.addEBObserverOf_issues (self.issues_property)
  //--- Atomic property: componentIsPlacedInBoard
    self.componentIsPlacedInBoard_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.isPlacedInBoard_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.isPlacedInBoard_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_componentIsPlacedInBoard (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.isPlacedInBoard_property.addEBObserver (self.componentIsPlacedInBoard_property)
  //--- Atomic property: componentIsPlacedInBoardString
    self.componentIsPlacedInBoardString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.componentIsPlacedInBoard_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.componentIsPlacedInBoard_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_componentIsPlacedInBoardString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.componentIsPlacedInBoard_property.addEBObserver (self.componentIsPlacedInBoardString_property)
  //--- Atomic property: strokeBezierPath
    self.strokeBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSelectedPackage_property.mStrokeBezierPath_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSelectedPackage_property.mStrokeBezierPath_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_strokeBezierPath (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSelectedPackage_property.addEBObserverOf_mStrokeBezierPath (self.strokeBezierPath_property)
  //--- To one property: mNameFont (has opposite to many relationship: mComponentNames)
    self.mNameFont_property.ebUndoManager = self.ebUndoManager
    self.mNameFont_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponentNames_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mComponentNames_property.remove (me) } }
    )
  //--- To one property: mValueFont (has opposite to many relationship: mComponentValues)
    self.mValueFont_property.ebUndoManager = self.ebUndoManager
    self.mValueFont_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponentValues_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mComponentValues_property.remove (me) } }
    )
  //--- Atomic property: pinPadAssignments
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDevice_property.pinPadAssignments_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mDevice_property.pinPadAssignments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_pinPadAssignments (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDevice_property.addEBObserverOf_pinPadAssignments (self.pinPadAssignments_property)
  //--- Atomic property: hasSlavePads
    self.hasSlavePads_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.packagePadDictionary_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.packagePadDictionary_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_hasSlavePads (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.packagePadDictionary_property.addEBObserver (self.hasSlavePads_property)
  //--- Atomic property: placementInSchematic
    self.placementInSchematic_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSymbols_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSymbols_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_placementInSchematic (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbols_property.addEBObserverOf_symbolInSchematic (self.placementInSchematic_property)
  //--- Atomic property: deviceSymbolDictionary
    self.deviceSymbolDictionary_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDevice_property.deviceSymbolDictionary_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mDevice_property.deviceSymbolDictionary_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_deviceSymbolDictionary (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDevice_property.addEBObserverOf_deviceSymbolDictionary (self.deviceSymbolDictionary_property)
  //--- Atomic property: componentNameFontName
    self.componentNameFontName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNameFont_property.mFontName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNameFont_property.mFontName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_componentNameFontName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNameFont_property.addEBObserverOf_mFontName (self.componentNameFontName_property)
  //--- Atomic property: componentValueFontName
    self.componentValueFontName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mValueFont_property.mFontName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mValueFont_property.mFontName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_componentValueFontName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mValueFont_property.addEBObserverOf_mFontName (self.componentValueFontName_property)
  //--- Atomic property: componentPadDictionary
    self.componentPadDictionary_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        kind &= unwSelf.mRotation_property_selection.kind ()
        kind &= unwSelf.mSide_property_selection.kind ()
        kind &= unwSelf.packagePadDictionary_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mX_property_selection, unwSelf.mY_property_selection, unwSelf.mRotation_property_selection, unwSelf.mSide_property_selection, unwSelf.packagePadDictionary_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_ComponentInProject_componentPadDictionary (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.componentPadDictionary_property)
    self.mY_property.addEBObserver (self.componentPadDictionary_property)
    self.mRotation_property.addEBObserver (self.componentPadDictionary_property)
    self.mSide_property.addEBObserver (self.componentPadDictionary_property)
    self.packagePadDictionary_property.addEBObserver (self.componentPadDictionary_property)
  //--- Atomic property: padNetDictionary
    self.padNetDictionary_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSymbols_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSymbols_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_padNetDictionary (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbols_property.addEBObserverOf_symbolInfo (self.padNetDictionary_property)
  //--- Atomic property: componentName
    self.componentName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mNamePrefix_property_selection.kind ()
        kind &= unwSelf.mNameIndex_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNamePrefix_property_selection, unwSelf.mNameIndex_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ComponentInProject_componentName (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNamePrefix_property.addEBObserver (self.componentName_property)
    self.mNameIndex_property.addEBObserver (self.componentName_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        kind &= unwSelf.mRotation_property_selection.kind ()
        kind &= unwSelf.mSide_property_selection.kind ()
        kind &= unwSelf.strokeBezierPath_property_selection.kind ()
        kind &= unwSelf.mDisplayLegend_property_selection.kind ()
        kind &= unwSelf.mNameIsVisibleInBoard_property_selection.kind ()
        kind &= unwSelf.mXName_property_selection.kind ()
        kind &= unwSelf.mYName_property_selection.kind ()
        kind &= unwSelf.mNameFont_property.descriptor_property_selection.kind ()
        kind &= unwSelf.mNameFontSize_property_selection.kind ()
        kind &= unwSelf.mNameRotation_property_selection.kind ()
        kind &= unwSelf.componentName_property_selection.kind ()
        kind &= unwSelf.packagePadDictionary_property_selection.kind ()
        kind &= unwSelf.padNetDictionary_property_selection.kind ()
        kind &= unwSelf.mValueIsVisibleInBoard_property_selection.kind ()
        kind &= unwSelf.mXValue_property_selection.kind ()
        kind &= unwSelf.mYValue_property_selection.kind ()
        kind &= unwSelf.mValueFont_property.descriptor_property_selection.kind ()
        kind &= unwSelf.mValueFontSize_property_selection.kind ()
        kind &= unwSelf.mValueRotation_property_selection.kind ()
        kind &= unwSelf.mComponentValue_property_selection.kind ()
        kind &= preferences_hiliteWidthMultipliedByTen_property_selection.kind ()
        kind &= preferences_mShowRotationKnobInBoard_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mX_property_selection, unwSelf.mY_property_selection, unwSelf.mRotation_property_selection, unwSelf.mSide_property_selection, unwSelf.strokeBezierPath_property_selection, unwSelf.mDisplayLegend_property_selection, unwSelf.mNameIsVisibleInBoard_property_selection, unwSelf.mXName_property_selection, unwSelf.mYName_property_selection, unwSelf.mNameFont_property.descriptor_property_selection, unwSelf.mNameFontSize_property_selection, unwSelf.mNameRotation_property_selection, unwSelf.componentName_property_selection, unwSelf.packagePadDictionary_property_selection, unwSelf.padNetDictionary_property_selection, unwSelf.mValueIsVisibleInBoard_property_selection, unwSelf.mXValue_property_selection, unwSelf.mYValue_property_selection, unwSelf.mValueFont_property.descriptor_property_selection, unwSelf.mValueFontSize_property_selection, unwSelf.mValueRotation_property_selection, unwSelf.mComponentValue_property_selection, preferences_hiliteWidthMultipliedByTen_property_selection, preferences_mShowRotationKnobInBoard_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11), .single (let v12), .single (let v13), .single (let v14), .single (let v15), .single (let v16), .single (let v17), .single (let v18), .single (let v19), .single (let v20), .single (let v21), .single (let v22), .single (let v23)) :
            return .single (transient_ComponentInProject_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.selectionDisplay_property)
    self.mY_property.addEBObserver (self.selectionDisplay_property)
    self.mRotation_property.addEBObserver (self.selectionDisplay_property)
    self.mSide_property.addEBObserver (self.selectionDisplay_property)
    self.strokeBezierPath_property.addEBObserver (self.selectionDisplay_property)
    self.mDisplayLegend_property.addEBObserver (self.selectionDisplay_property)
    self.mNameIsVisibleInBoard_property.addEBObserver (self.selectionDisplay_property)
    self.mXName_property.addEBObserver (self.selectionDisplay_property)
    self.mYName_property.addEBObserver (self.selectionDisplay_property)
    self.mNameFont_property.addEBObserverOf_descriptor (self.selectionDisplay_property)
    self.mNameFontSize_property.addEBObserver (self.selectionDisplay_property)
    self.mNameRotation_property.addEBObserver (self.selectionDisplay_property)
    self.componentName_property.addEBObserver (self.selectionDisplay_property)
    self.packagePadDictionary_property.addEBObserver (self.selectionDisplay_property)
    self.padNetDictionary_property.addEBObserver (self.selectionDisplay_property)
    self.mValueIsVisibleInBoard_property.addEBObserver (self.selectionDisplay_property)
    self.mXValue_property.addEBObserver (self.selectionDisplay_property)
    self.mYValue_property.addEBObserver (self.selectionDisplay_property)
    self.mValueFont_property.addEBObserverOf_descriptor (self.selectionDisplay_property)
    self.mValueFontSize_property.addEBObserver (self.selectionDisplay_property)
    self.mValueRotation_property.addEBObserver (self.selectionDisplay_property)
    self.mComponentValue_property.addEBObserver (self.selectionDisplay_property)
    preferences_hiliteWidthMultipliedByTen_property.addEBObserver (self.selectionDisplay_property)
    preferences_mShowRotationKnobInBoard_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: unplacedSymbols
    self.unplacedSymbols_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.componentName_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        kind &= unwSelf.mComponentValue_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.componentName_property_selection, unwSelf.mSymbols_property_selection, unwSelf.mSymbols_property_selection, unwSelf.mSymbols_property_selection, unwSelf.mSymbols_property_selection, unwSelf.mComponentValue_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5)) :
            return .single (transient_ComponentInProject_unplacedSymbols (v0, v1, v2, v3, v4, v5))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.componentName_property.addEBObserver (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserver (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserverOf_symbolInSchematic (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserverOf_mSymbolInstanceName (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserverOf_mSymbolTypeName (self.unplacedSymbols_property)
    self.mComponentValue_property.addEBObserver (self.unplacedSymbols_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        kind &= unwSelf.mRotation_property_selection.kind ()
        kind &= unwSelf.mSide_property_selection.kind ()
        kind &= unwSelf.packagePadDictionary_property_selection.kind ()
        kind &= unwSelf.padNetDictionary_property_selection.kind ()
        kind &= unwSelf.strokeBezierPath_property_selection.kind ()
        kind &= unwSelf.mDisplayLegend_property_selection.kind ()
        kind &= preferences_frontSideLegendColorForBoard_property_selection.kind ()
        kind &= preferences_backSideLegendColorForBoard_property_selection.kind ()
        kind &= preferences_packageDrawingWidthMultpliedByTenForBoard_property_selection.kind ()
        kind &= preferences_frontSidePadColorForBoard_property_selection.kind ()
        kind &= preferences_displayFrontPadsForBoard_property_selection.kind ()
        kind &= preferences_backSidePadColorForBoard_property_selection.kind ()
        kind &= preferences_displayBackPadsForBoard_property_selection.kind ()
        kind &= preferences_displayFrontLegendForBoard_property_selection.kind ()
        kind &= preferences_displayBackLegendForBoard_property_selection.kind ()
        kind &= preferences_padNumberFontForBoard_property_selection.kind ()
        kind &= preferences_padNumberColorForBoard_property_selection.kind ()
        kind &= preferences_displayPadNumbersForBoard_property_selection.kind ()
        kind &= unwSelf.mNameIsVisibleInBoard_property_selection.kind ()
        kind &= unwSelf.mXName_property_selection.kind ()
        kind &= unwSelf.mYName_property_selection.kind ()
        kind &= unwSelf.mNameFont_property.descriptor_property_selection.kind ()
        kind &= unwSelf.mNameFontSize_property_selection.kind ()
        kind &= unwSelf.mNameRotation_property_selection.kind ()
        kind &= unwSelf.componentName_property_selection.kind ()
        kind &= unwSelf.mValueIsVisibleInBoard_property_selection.kind ()
        kind &= unwSelf.mXValue_property_selection.kind ()
        kind &= unwSelf.mYValue_property_selection.kind ()
        kind &= unwSelf.mValueFont_property.descriptor_property_selection.kind ()
        kind &= unwSelf.mValueFontSize_property_selection.kind ()
        kind &= unwSelf.mValueRotation_property_selection.kind ()
        kind &= unwSelf.mComponentValue_property_selection.kind ()
        kind &= unwSelf.mDevice_property.pinPadAssignments_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mX_property_selection, unwSelf.mY_property_selection, unwSelf.mRotation_property_selection, unwSelf.mSide_property_selection, unwSelf.packagePadDictionary_property_selection, unwSelf.padNetDictionary_property_selection, unwSelf.strokeBezierPath_property_selection, unwSelf.mDisplayLegend_property_selection, preferences_frontSideLegendColorForBoard_property_selection, preferences_backSideLegendColorForBoard_property_selection, preferences_packageDrawingWidthMultpliedByTenForBoard_property_selection, preferences_frontSidePadColorForBoard_property_selection, preferences_displayFrontPadsForBoard_property_selection, preferences_backSidePadColorForBoard_property_selection, preferences_displayBackPadsForBoard_property_selection, preferences_displayFrontLegendForBoard_property_selection, preferences_displayBackLegendForBoard_property_selection, preferences_padNumberFontForBoard_property_selection, preferences_padNumberColorForBoard_property_selection, preferences_displayPadNumbersForBoard_property_selection, unwSelf.mNameIsVisibleInBoard_property_selection, unwSelf.mXName_property_selection, unwSelf.mYName_property_selection, unwSelf.mNameFont_property.descriptor_property_selection, unwSelf.mNameFontSize_property_selection, unwSelf.mNameRotation_property_selection, unwSelf.componentName_property_selection, unwSelf.mValueIsVisibleInBoard_property_selection, unwSelf.mXValue_property_selection, unwSelf.mYValue_property_selection, unwSelf.mValueFont_property.descriptor_property_selection, unwSelf.mValueFontSize_property_selection, unwSelf.mValueRotation_property_selection, unwSelf.mComponentValue_property_selection, unwSelf.mDevice_property.pinPadAssignments_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11), .single (let v12), .single (let v13), .single (let v14), .single (let v15), .single (let v16), .single (let v17), .single (let v18), .single (let v19), .single (let v20), .single (let v21), .single (let v22), .single (let v23), .single (let v24), .single (let v25), .single (let v26), .single (let v27), .single (let v28), .single (let v29), .single (let v30), .single (let v31), .single (let v32), .single (let v33), .single (let v34)) :
            return .single (transient_ComponentInProject_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.objectDisplay_property)
    self.mY_property.addEBObserver (self.objectDisplay_property)
    self.mRotation_property.addEBObserver (self.objectDisplay_property)
    self.mSide_property.addEBObserver (self.objectDisplay_property)
    self.packagePadDictionary_property.addEBObserver (self.objectDisplay_property)
    self.padNetDictionary_property.addEBObserver (self.objectDisplay_property)
    self.strokeBezierPath_property.addEBObserver (self.objectDisplay_property)
    self.mDisplayLegend_property.addEBObserver (self.objectDisplay_property)
    preferences_frontSideLegendColorForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_backSideLegendColorForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_packageDrawingWidthMultpliedByTenForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_frontSidePadColorForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_displayFrontPadsForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_backSidePadColorForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_displayBackPadsForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_displayFrontLegendForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_displayBackLegendForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_padNumberFontForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_padNumberColorForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_displayPadNumbersForBoard_property.addEBObserver (self.objectDisplay_property)
    self.mNameIsVisibleInBoard_property.addEBObserver (self.objectDisplay_property)
    self.mXName_property.addEBObserver (self.objectDisplay_property)
    self.mYName_property.addEBObserver (self.objectDisplay_property)
    self.mNameFont_property.addEBObserverOf_descriptor (self.objectDisplay_property)
    self.mNameFontSize_property.addEBObserver (self.objectDisplay_property)
    self.mNameRotation_property.addEBObserver (self.objectDisplay_property)
    self.componentName_property.addEBObserver (self.objectDisplay_property)
    self.mValueIsVisibleInBoard_property.addEBObserver (self.objectDisplay_property)
    self.mXValue_property.addEBObserver (self.objectDisplay_property)
    self.mYValue_property.addEBObserver (self.objectDisplay_property)
    self.mValueFont_property.addEBObserverOf_descriptor (self.objectDisplay_property)
    self.mValueFontSize_property.addEBObserver (self.objectDisplay_property)
    self.mValueRotation_property.addEBObserver (self.objectDisplay_property)
    self.mComponentValue_property.addEBObserver (self.objectDisplay_property)
    self.mDevice_property.addEBObserverOf_pinPadAssignments (self.objectDisplay_property)
  //--- Install undoers and opposite setter for relationships
    self.mConnectors_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponent_property.setProp (me) } },
      resetter: { inObject in inObject.mComponent_property.setProp (nil) }
    )
    self.mSymbols_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponent_property.setProp (me) } },
      resetter: { inObject in inObject.mComponent_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- Array controller property: componentAvailablePackagesController
    self.componentAvailablePackagesController.unbind_model ()
  //--- ToMany proxy: mPackages
    self.mPackages_property.setModel (nil)
    self.mPackages_modelDidChangeController?.unregister ()
    self.mPackages_modelDidChangeController = nil
    // self.mDevice_property.mDeviceName_property.removeEBObserver (self.deviceName_property)
    // self.mSlavePadsShouldBeRouted_property.removeEBObserver (self.signatureForERCChecking_property)
    // self.mSelectedPackage_property.packagePadDictionary_property.removeEBObserver (self.packagePadDictionary_property)
    // self.mSelectedPackage_property.mPackageName_property.removeEBObserver (self.selectedPackageName_property)
    // self.mDevice_property.packageNames_property.removeEBObserver (self.availablePackages_property)
    // self.mConnectors_property.removeEBObserverOf_issues (self.issues_property)
    // self.isPlacedInBoard_property.removeEBObserver (self.componentIsPlacedInBoard_property)
    // self.componentIsPlacedInBoard_property.removeEBObserver (self.componentIsPlacedInBoardString_property)
    // self.mSelectedPackage_property.mStrokeBezierPath_property.removeEBObserver (self.strokeBezierPath_property)
    // self.mDevice_property.pinPadAssignments_property.removeEBObserver (self.pinPadAssignments_property)
    // self.packagePadDictionary_property.removeEBObserver (self.hasSlavePads_property)
    // self.mSymbols_property.removeEBObserverOf_symbolInSchematic (self.placementInSchematic_property)
    // self.mDevice_property.deviceSymbolDictionary_property.removeEBObserver (self.deviceSymbolDictionary_property)
    // self.mNameFont_property.mFontName_property.removeEBObserver (self.componentNameFontName_property)
    // self.mValueFont_property.mFontName_property.removeEBObserver (self.componentValueFontName_property)
    // self.mX_property.removeEBObserver (self.componentPadDictionary_property)
    // self.mY_property.removeEBObserver (self.componentPadDictionary_property)
    // self.mRotation_property.removeEBObserver (self.componentPadDictionary_property)
    // self.mSide_property.removeEBObserver (self.componentPadDictionary_property)
    // self.packagePadDictionary_property.removeEBObserver (self.componentPadDictionary_property)
    // self.mSymbols_property.removeEBObserverOf_symbolInfo (self.padNetDictionary_property)
    // self.mNamePrefix_property.removeEBObserver (self.componentName_property)
    // self.mNameIndex_property.removeEBObserver (self.componentName_property)
    // self.mX_property.removeEBObserver (self.selectionDisplay_property)
    // self.mY_property.removeEBObserver (self.selectionDisplay_property)
    // self.mRotation_property.removeEBObserver (self.selectionDisplay_property)
    // self.mSide_property.removeEBObserver (self.selectionDisplay_property)
    // self.strokeBezierPath_property.removeEBObserver (self.selectionDisplay_property)
    // self.mDisplayLegend_property.removeEBObserver (self.selectionDisplay_property)
    // self.mNameIsVisibleInBoard_property.removeEBObserver (self.selectionDisplay_property)
    // self.mXName_property.removeEBObserver (self.selectionDisplay_property)
    // self.mYName_property.removeEBObserver (self.selectionDisplay_property)
    // self.mNameFont_property.descriptor_property.removeEBObserver (self.selectionDisplay_property)
    // self.mNameFontSize_property.removeEBObserver (self.selectionDisplay_property)
    // self.mNameRotation_property.removeEBObserver (self.selectionDisplay_property)
    // self.componentName_property.removeEBObserver (self.selectionDisplay_property)
    // self.packagePadDictionary_property.removeEBObserver (self.selectionDisplay_property)
    // self.padNetDictionary_property.removeEBObserver (self.selectionDisplay_property)
    // self.mValueIsVisibleInBoard_property.removeEBObserver (self.selectionDisplay_property)
    // self.mXValue_property.removeEBObserver (self.selectionDisplay_property)
    // self.mYValue_property.removeEBObserver (self.selectionDisplay_property)
    // self.mValueFont_property.descriptor_property.removeEBObserver (self.selectionDisplay_property)
    // self.mValueFontSize_property.removeEBObserver (self.selectionDisplay_property)
    // self.mValueRotation_property.removeEBObserver (self.selectionDisplay_property)
    // self.mComponentValue_property.removeEBObserver (self.selectionDisplay_property)
    // preferences_hiliteWidthMultipliedByTen_property.removeEBObserver (self.selectionDisplay_property)
    // preferences_mShowRotationKnobInBoard_property.removeEBObserver (self.selectionDisplay_property)
    // self.componentName_property.removeEBObserver (self.unplacedSymbols_property)
    // self.mSymbols_property.removeEBObserver (self.unplacedSymbols_property)
    // self.mSymbols_property.removeEBObserverOf_symbolInSchematic (self.unplacedSymbols_property)
    // self.mSymbols_property.removeEBObserverOf_mSymbolInstanceName (self.unplacedSymbols_property)
    // self.mSymbols_property.removeEBObserverOf_mSymbolTypeName (self.unplacedSymbols_property)
    // self.mComponentValue_property.removeEBObserver (self.unplacedSymbols_property)
    // self.mX_property.removeEBObserver (self.objectDisplay_property)
    // self.mY_property.removeEBObserver (self.objectDisplay_property)
    // self.mRotation_property.removeEBObserver (self.objectDisplay_property)
    // self.mSide_property.removeEBObserver (self.objectDisplay_property)
    // self.packagePadDictionary_property.removeEBObserver (self.objectDisplay_property)
    // self.padNetDictionary_property.removeEBObserver (self.objectDisplay_property)
    // self.strokeBezierPath_property.removeEBObserver (self.objectDisplay_property)
    // self.mDisplayLegend_property.removeEBObserver (self.objectDisplay_property)
    // preferences_frontSideLegendColorForBoard_property.removeEBObserver (self.objectDisplay_property)
    // preferences_backSideLegendColorForBoard_property.removeEBObserver (self.objectDisplay_property)
    // preferences_packageDrawingWidthMultpliedByTenForBoard_property.removeEBObserver (self.objectDisplay_property)
    // preferences_frontSidePadColorForBoard_property.removeEBObserver (self.objectDisplay_property)
    // preferences_displayFrontPadsForBoard_property.removeEBObserver (self.objectDisplay_property)
    // preferences_backSidePadColorForBoard_property.removeEBObserver (self.objectDisplay_property)
    // preferences_displayBackPadsForBoard_property.removeEBObserver (self.objectDisplay_property)
    // preferences_displayFrontLegendForBoard_property.removeEBObserver (self.objectDisplay_property)
    // preferences_displayBackLegendForBoard_property.removeEBObserver (self.objectDisplay_property)
    // preferences_padNumberFontForBoard_property.removeEBObserver (self.objectDisplay_property)
    // preferences_padNumberColorForBoard_property.removeEBObserver (self.objectDisplay_property)
    // preferences_displayPadNumbersForBoard_property.removeEBObserver (self.objectDisplay_property)
    // self.mNameIsVisibleInBoard_property.removeEBObserver (self.objectDisplay_property)
    // self.mXName_property.removeEBObserver (self.objectDisplay_property)
    // self.mYName_property.removeEBObserver (self.objectDisplay_property)
    // self.mNameFont_property.descriptor_property.removeEBObserver (self.objectDisplay_property)
    // self.mNameFontSize_property.removeEBObserver (self.objectDisplay_property)
    // self.mNameRotation_property.removeEBObserver (self.objectDisplay_property)
    // self.componentName_property.removeEBObserver (self.objectDisplay_property)
    // self.mValueIsVisibleInBoard_property.removeEBObserver (self.objectDisplay_property)
    // self.mXValue_property.removeEBObserver (self.objectDisplay_property)
    // self.mYValue_property.removeEBObserver (self.objectDisplay_property)
    // self.mValueFont_property.descriptor_property.removeEBObserver (self.objectDisplay_property)
    // self.mValueFontSize_property.removeEBObserver (self.objectDisplay_property)
    // self.mValueRotation_property.removeEBObserver (self.objectDisplay_property)
    // self.mComponentValue_property.removeEBObserver (self.objectDisplay_property)
    // self.mDevice_property.pinPadAssignments_property.removeEBObserver (self.objectDisplay_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mSlavePadsShouldBeRouted",
      idx: self.mSlavePadsShouldBeRouted_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSlavePadsShouldBeRouted_property.mObserverExplorer,
      valueExplorer: &self.mSlavePadsShouldBeRouted_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mX",
      idx: self.mX_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mX_property.mObserverExplorer,
      valueExplorer: &self.mX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mY",
      idx: self.mY_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mY_property.mObserverExplorer,
      valueExplorer: &self.mY_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mRotation",
      idx: self.mRotation_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mRotation_property.mObserverExplorer,
      valueExplorer: &self.mRotation_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSide",
      idx: self.mSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSide_property.mObserverExplorer,
      valueExplorer: &self.mSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDisplayLegend",
      idx: self.mDisplayLegend_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDisplayLegend_property.mObserverExplorer,
      valueExplorer: &self.mDisplayLegend_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNameIsVisibleInBoard",
      idx: self.mNameIsVisibleInBoard_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mNameIsVisibleInBoard_property.mObserverExplorer,
      valueExplorer: &self.mNameIsVisibleInBoard_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mXName",
      idx: self.mXName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mXName_property.mObserverExplorer,
      valueExplorer: &self.mXName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mYName",
      idx: self.mYName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mYName_property.mObserverExplorer,
      valueExplorer: &self.mYName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNameFontSize",
      idx: self.mNameFontSize_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mNameFontSize_property.mObserverExplorer,
      valueExplorer: &self.mNameFontSize_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNameRotation",
      idx: self.mNameRotation_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mNameRotation_property.mObserverExplorer,
      valueExplorer: &self.mNameRotation_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mValueIsVisibleInBoard",
      idx: self.mValueIsVisibleInBoard_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mValueIsVisibleInBoard_property.mObserverExplorer,
      valueExplorer: &self.mValueIsVisibleInBoard_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mXValue",
      idx: self.mXValue_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mXValue_property.mObserverExplorer,
      valueExplorer: &self.mXValue_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mYValue",
      idx: self.mYValue_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mYValue_property.mObserverExplorer,
      valueExplorer: &self.mYValue_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mValueFontSize",
      idx: self.mValueFontSize_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mValueFontSize_property.mObserverExplorer,
      valueExplorer: &self.mValueFontSize_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mValueRotation",
      idx: self.mValueRotation_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mValueRotation_property.mObserverExplorer,
      valueExplorer: &self.mValueRotation_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mComponentValue",
      idx: self.mComponentValue_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mComponentValue_property.mObserverExplorer,
      valueExplorer: &self.mComponentValue_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNamePrefix",
      idx: self.mNamePrefix_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mNamePrefix_property.mObserverExplorer,
      valueExplorer: &self.mNamePrefix_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNameIndex",
      idx: self.mNameIndex_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mNameIndex_property.mObserverExplorer,
      valueExplorer: &self.mNameIndex_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mXUnit",
      idx: self.mXUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mXUnit_property.mObserverExplorer,
      valueExplorer: &self.mXUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mYUnit",
      idx: self.mYUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mYUnit_property.mObserverExplorer,
      valueExplorer: &self.mYUnit_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "deviceName",
      idx: self.deviceName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.deviceName_property.mObserverExplorer,
      valueExplorer: &self.deviceName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "signatureForERCChecking",
      idx: self.signatureForERCChecking_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.signatureForERCChecking_property.mObserverExplorer,
      valueExplorer: &self.signatureForERCChecking_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "packagePadDictionary",
      idx: self.packagePadDictionary_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.packagePadDictionary_property.mObserverExplorer,
      valueExplorer: &self.packagePadDictionary_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedPackageName",
      idx: self.selectedPackageName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectedPackageName_property.mObserverExplorer,
      valueExplorer: &self.selectedPackageName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "availablePackages",
      idx: self.availablePackages_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.availablePackages_property.mObserverExplorer,
      valueExplorer: &self.availablePackages_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx: self.issues_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.issues_property.mObserverExplorer,
      valueExplorer: &self.issues_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "componentIsPlacedInBoard",
      idx: self.componentIsPlacedInBoard_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.componentIsPlacedInBoard_property.mObserverExplorer,
      valueExplorer: &self.componentIsPlacedInBoard_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "componentIsPlacedInBoardString",
      idx: self.componentIsPlacedInBoardString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.componentIsPlacedInBoardString_property.mObserverExplorer,
      valueExplorer: &self.componentIsPlacedInBoardString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "strokeBezierPath",
      idx: self.strokeBezierPath_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.strokeBezierPath_property.mObserverExplorer,
      valueExplorer: &self.strokeBezierPath_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "pinPadAssignments",
      idx: self.pinPadAssignments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.pinPadAssignments_property.mObserverExplorer,
      valueExplorer: &self.pinPadAssignments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "hasSlavePads",
      idx: self.hasSlavePads_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.hasSlavePads_property.mObserverExplorer,
      valueExplorer: &self.hasSlavePads_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "placementInSchematic",
      idx: self.placementInSchematic_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.placementInSchematic_property.mObserverExplorer,
      valueExplorer: &self.placementInSchematic_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "deviceSymbolDictionary",
      idx: self.deviceSymbolDictionary_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.deviceSymbolDictionary_property.mObserverExplorer,
      valueExplorer: &self.deviceSymbolDictionary_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "componentNameFontName",
      idx: self.componentNameFontName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.componentNameFontName_property.mObserverExplorer,
      valueExplorer: &self.componentNameFontName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "componentValueFontName",
      idx: self.componentValueFontName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.componentValueFontName_property.mObserverExplorer,
      valueExplorer: &self.componentValueFontName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "componentPadDictionary",
      idx: self.componentPadDictionary_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.componentPadDictionary_property.mObserverExplorer,
      valueExplorer: &self.componentPadDictionary_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padNetDictionary",
      idx: self.padNetDictionary_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.padNetDictionary_property.mObserverExplorer,
      valueExplorer: &self.padNetDictionary_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "componentName",
      idx: self.componentName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.componentName_property.mObserverExplorer,
      valueExplorer: &self.componentName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx: self.selectionDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
      valueExplorer: &self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "unplacedSymbols",
      idx: self.unplacedSymbols_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.unplacedSymbols_property.mObserverExplorer,
      valueExplorer: &self.unplacedSymbols_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx: self.objectDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.objectDisplay_property.mObserverExplorer,
      valueExplorer: &self.objectDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "mConnectors",
      idx:mConnectors_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mConnectors_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mSymbols",
      idx:mSymbols_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mSymbols_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "mDevice",
      idx:self.mDevice_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mDevice_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mSelectedPackage",
      idx:self.mSelectedPackage_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mSelectedPackage_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mNameFont",
      idx:self.mNameFont_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mNameFont_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mValueFont",
      idx:self.mValueFont_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mValueFont_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mSlavePadsShouldBeRouted
    self.mSlavePadsShouldBeRouted_property.mObserverExplorer = nil
    self.mSlavePadsShouldBeRouted_property.mValueExplorer = nil
  //--- Atomic property: mX
    self.mX_property.mObserverExplorer = nil
    self.mX_property.mValueExplorer = nil
  //--- Atomic property: mY
    self.mY_property.mObserverExplorer = nil
    self.mY_property.mValueExplorer = nil
  //--- Atomic property: mRotation
    self.mRotation_property.mObserverExplorer = nil
    self.mRotation_property.mValueExplorer = nil
  //--- Atomic property: mSide
    self.mSide_property.mObserverExplorer = nil
    self.mSide_property.mValueExplorer = nil
  //--- Atomic property: mDisplayLegend
    self.mDisplayLegend_property.mObserverExplorer = nil
    self.mDisplayLegend_property.mValueExplorer = nil
  //--- To many property: mConnectors
    self.mConnectors_property.mValueExplorer = nil
  //--- To many property: mSymbols
    self.mSymbols_property.mValueExplorer = nil
  //--- Atomic property: mNameIsVisibleInBoard
    self.mNameIsVisibleInBoard_property.mObserverExplorer = nil
    self.mNameIsVisibleInBoard_property.mValueExplorer = nil
  //--- Atomic property: mXName
    self.mXName_property.mObserverExplorer = nil
    self.mXName_property.mValueExplorer = nil
  //--- Atomic property: mYName
    self.mYName_property.mObserverExplorer = nil
    self.mYName_property.mValueExplorer = nil
  //--- Atomic property: mNameFontSize
    self.mNameFontSize_property.mObserverExplorer = nil
    self.mNameFontSize_property.mValueExplorer = nil
  //--- Atomic property: mNameRotation
    self.mNameRotation_property.mObserverExplorer = nil
    self.mNameRotation_property.mValueExplorer = nil
  //--- Atomic property: mValueIsVisibleInBoard
    self.mValueIsVisibleInBoard_property.mObserverExplorer = nil
    self.mValueIsVisibleInBoard_property.mValueExplorer = nil
  //--- Atomic property: mXValue
    self.mXValue_property.mObserverExplorer = nil
    self.mXValue_property.mValueExplorer = nil
  //--- Atomic property: mYValue
    self.mYValue_property.mObserverExplorer = nil
    self.mYValue_property.mValueExplorer = nil
  //--- Atomic property: mValueFontSize
    self.mValueFontSize_property.mObserverExplorer = nil
    self.mValueFontSize_property.mValueExplorer = nil
  //--- Atomic property: mValueRotation
    self.mValueRotation_property.mObserverExplorer = nil
    self.mValueRotation_property.mValueExplorer = nil
  //--- Atomic property: mComponentValue
    self.mComponentValue_property.mObserverExplorer = nil
    self.mComponentValue_property.mValueExplorer = nil
  //--- Atomic property: mNamePrefix
    self.mNamePrefix_property.mObserverExplorer = nil
    self.mNamePrefix_property.mValueExplorer = nil
  //--- Atomic property: mNameIndex
    self.mNameIndex_property.mObserverExplorer = nil
    self.mNameIndex_property.mValueExplorer = nil
  //--- Atomic property: mXUnit
    self.mXUnit_property.mObserverExplorer = nil
    self.mXUnit_property.mValueExplorer = nil
  //--- Atomic property: mYUnit
    self.mYUnit_property.mObserverExplorer = nil
    self.mYUnit_property.mValueExplorer = nil
  //--- ToMany proxy: mPackages
    self.mPackages_property.mObserverExplorer = nil
  //--- To one property: mDevice
    self.mDevice_property.mObserverExplorer = nil
    self.mDevice_property.mValueExplorer = nil
  //--- To one property: mSelectedPackage
    self.mSelectedPackage_property.mObserverExplorer = nil
    self.mSelectedPackage_property.mValueExplorer = nil
  //--- To one property: mNameFont
    self.mNameFont_property.mObserverExplorer = nil
    self.mNameFont_property.mValueExplorer = nil
  //--- To one property: mValueFont
    self.mValueFont_property.mObserverExplorer = nil
    self.mValueFont_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mConnectors = []
    self.mSymbols = []
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mDevice = nil
    self.mSelectedPackage = nil
    self.mNameFont = nil
    self.mValueFont = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mSlavePadsShouldBeRouted
    self.mSlavePadsShouldBeRouted_property.storeIn (dictionary: ioDictionary, forKey: "mSlavePadsShouldBeRouted")
  //--- Atomic property: mX
    self.mX_property.storeIn (dictionary: ioDictionary, forKey: "mX")
  //--- Atomic property: mY
    self.mY_property.storeIn (dictionary: ioDictionary, forKey: "mY")
  //--- Atomic property: mRotation
    self.mRotation_property.storeIn (dictionary: ioDictionary, forKey: "mRotation")
  //--- Atomic property: mSide
    self.mSide_property.storeIn (dictionary: ioDictionary, forKey: "mSide")
  //--- Atomic property: mDisplayLegend
    self.mDisplayLegend_property.storeIn (dictionary: ioDictionary, forKey: "mDisplayLegend")
  //--- To many property: mConnectors
    self.store (
      managedObjectArray: self.mConnectors_property.propval,
      relationshipName: "mConnectors",
      intoDictionary: ioDictionary
    )
  //--- To many property: mSymbols
    self.store (
      managedObjectArray: self.mSymbols_property.propval,
      relationshipName: "mSymbols",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: mNameIsVisibleInBoard
    self.mNameIsVisibleInBoard_property.storeIn (dictionary: ioDictionary, forKey: "mNameIsVisibleInBoard")
  //--- Atomic property: mXName
    self.mXName_property.storeIn (dictionary: ioDictionary, forKey: "mXName")
  //--- Atomic property: mYName
    self.mYName_property.storeIn (dictionary: ioDictionary, forKey: "mYName")
  //--- Atomic property: mNameFontSize
    self.mNameFontSize_property.storeIn (dictionary: ioDictionary, forKey: "mNameFontSize")
  //--- Atomic property: mNameRotation
    self.mNameRotation_property.storeIn (dictionary: ioDictionary, forKey: "mNameRotation")
  //--- Atomic property: mValueIsVisibleInBoard
    self.mValueIsVisibleInBoard_property.storeIn (dictionary: ioDictionary, forKey: "mValueIsVisibleInBoard")
  //--- Atomic property: mXValue
    self.mXValue_property.storeIn (dictionary: ioDictionary, forKey: "mXValue")
  //--- Atomic property: mYValue
    self.mYValue_property.storeIn (dictionary: ioDictionary, forKey: "mYValue")
  //--- Atomic property: mValueFontSize
    self.mValueFontSize_property.storeIn (dictionary: ioDictionary, forKey: "mValueFontSize")
  //--- Atomic property: mValueRotation
    self.mValueRotation_property.storeIn (dictionary: ioDictionary, forKey: "mValueRotation")
  //--- Atomic property: mComponentValue
    self.mComponentValue_property.storeIn (dictionary: ioDictionary, forKey: "mComponentValue")
  //--- Atomic property: mNamePrefix
    self.mNamePrefix_property.storeIn (dictionary: ioDictionary, forKey: "mNamePrefix")
  //--- Atomic property: mNameIndex
    self.mNameIndex_property.storeIn (dictionary: ioDictionary, forKey: "mNameIndex")
  //--- Atomic property: mXUnit
    self.mXUnit_property.storeIn (dictionary: ioDictionary, forKey: "mXUnit")
  //--- Atomic property: mYUnit
    self.mYUnit_property.storeIn (dictionary: ioDictionary, forKey: "mYUnit")
  //--- To one property: mSelectedPackage
    self.store (managedObject:self.mSelectedPackage_property.propval,
      relationshipName: "mSelectedPackage",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  //--- To many property: mConnectors
    self.mConnectors_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mConnectors",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardConnector])
  //--- To many property: mSymbols
    self.mSymbols_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mSymbols",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [ComponentSymbolInProject])
  //--- To one property: mDevice
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mDevice",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? DeviceInProject {
        self.mDevice_property.setProp (entity)
      }
    }
  //--- To one property: mSelectedPackage
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mSelectedPackage",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? DevicePackageInProject {
        self.mSelectedPackage_property.setProp (entity)
      }
    }
  //--- To one property: mNameFont
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mNameFont",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? FontInProject {
        self.mNameFont_property.setProp (entity)
      }
    }
  //--- To one property: mValueFont
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mValueFont",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? FontInProject {
        self.mValueFont_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mSlavePadsShouldBeRouted
    self.mSlavePadsShouldBeRouted_property.readFrom (dictionary: inDictionary, forKey: "mSlavePadsShouldBeRouted")
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey: "mX")
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey: "mY")
  //--- Atomic property: mRotation
    self.mRotation_property.readFrom (dictionary: inDictionary, forKey: "mRotation")
  //--- Atomic property: mSide
    self.mSide_property.readFrom (dictionary: inDictionary, forKey: "mSide")
  //--- Atomic property: mDisplayLegend
    self.mDisplayLegend_property.readFrom (dictionary: inDictionary, forKey: "mDisplayLegend")
  //--- Atomic property: mNameIsVisibleInBoard
    self.mNameIsVisibleInBoard_property.readFrom (dictionary: inDictionary, forKey: "mNameIsVisibleInBoard")
  //--- Atomic property: mXName
    self.mXName_property.readFrom (dictionary: inDictionary, forKey: "mXName")
  //--- Atomic property: mYName
    self.mYName_property.readFrom (dictionary: inDictionary, forKey: "mYName")
  //--- Atomic property: mNameFontSize
    self.mNameFontSize_property.readFrom (dictionary: inDictionary, forKey: "mNameFontSize")
  //--- Atomic property: mNameRotation
    self.mNameRotation_property.readFrom (dictionary: inDictionary, forKey: "mNameRotation")
  //--- Atomic property: mValueIsVisibleInBoard
    self.mValueIsVisibleInBoard_property.readFrom (dictionary: inDictionary, forKey: "mValueIsVisibleInBoard")
  //--- Atomic property: mXValue
    self.mXValue_property.readFrom (dictionary: inDictionary, forKey: "mXValue")
  //--- Atomic property: mYValue
    self.mYValue_property.readFrom (dictionary: inDictionary, forKey: "mYValue")
  //--- Atomic property: mValueFontSize
    self.mValueFontSize_property.readFrom (dictionary: inDictionary, forKey: "mValueFontSize")
  //--- Atomic property: mValueRotation
    self.mValueRotation_property.readFrom (dictionary: inDictionary, forKey: "mValueRotation")
  //--- Atomic property: mComponentValue
    self.mComponentValue_property.readFrom (dictionary: inDictionary, forKey: "mComponentValue")
  //--- Atomic property: mNamePrefix
    self.mNamePrefix_property.readFrom (dictionary: inDictionary, forKey: "mNamePrefix")
  //--- Atomic property: mNameIndex
    self.mNameIndex_property.readFrom (dictionary: inDictionary, forKey: "mNameIndex")
  //--- Atomic property: mXUnit
    self.mXUnit_property.readFrom (dictionary: inDictionary, forKey: "mXUnit")
  //--- Atomic property: mYUnit
    self.mYUnit_property.readFrom (dictionary: inDictionary, forKey: "mYUnit")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mSlavePadsShouldBeRouted\n"
    ioString += "mX\n"
    ioString += "mY\n"
    ioString += "mRotation\n"
    ioString += "mSide\n"
    ioString += "mDisplayLegend\n"
    ioString += "mNameIsVisibleInBoard\n"
    ioString += "mXName\n"
    ioString += "mYName\n"
    ioString += "mNameFontSize\n"
    ioString += "mNameRotation\n"
    ioString += "mValueIsVisibleInBoard\n"
    ioString += "mXValue\n"
    ioString += "mYValue\n"
    ioString += "mValueFontSize\n"
    ioString += "mValueRotation\n"
    ioString += "mComponentValue\n"
    ioString += "mNamePrefix\n"
    ioString += "mNameIndex\n"
    ioString += "mXUnit\n"
    ioString += "mYUnit\n"
  //--- To one relationships
    ioString += "mDevice\n"
    ioString += "mSelectedPackage\n"
    ioString += "mNameFont\n"
    ioString += "mValueFont\n"
  //--- To many relationships
    ioString += "mConnectors\n"
    ioString += "mSymbols\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mSlavePadsShouldBeRouted.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mRotation.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mSide.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDisplayLegend.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mNameIsVisibleInBoard.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mXName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mYName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mNameFontSize.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mNameRotation.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mValueIsVisibleInBoard.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mXValue.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mYValue.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mValueFontSize.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mValueRotation.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mComponentValue.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mNamePrefix.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mNameIndex.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mXUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mYUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.mDevice {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mSelectedPackage {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mNameFont {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mValueFont {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mConnectors {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mSymbols {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.addOperation {
    //--- Atomic properties
      if let range = inDictionary ["mSlavePadsShouldBeRouted"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mSlavePadsShouldBeRouted = value
      }
      if let range = inDictionary ["mX"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mX = value
      }
      if let range = inDictionary ["mY"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mY = value
      }
      if let range = inDictionary ["mRotation"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mRotation = value
      }
      if let range = inDictionary ["mSide"], let value = ComponentSide.unarchiveFromDataRange (inData, range) {
        self.mSide = value
      }
      if let range = inDictionary ["mDisplayLegend"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mDisplayLegend = value
      }
      if let range = inDictionary ["mNameIsVisibleInBoard"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mNameIsVisibleInBoard = value
      }
      if let range = inDictionary ["mXName"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mXName = value
      }
      if let range = inDictionary ["mYName"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mYName = value
      }
      if let range = inDictionary ["mNameFontSize"], let value = Double.unarchiveFromDataRange (inData, range) {
        self.mNameFontSize = value
      }
      if let range = inDictionary ["mNameRotation"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mNameRotation = value
      }
      if let range = inDictionary ["mValueIsVisibleInBoard"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mValueIsVisibleInBoard = value
      }
      if let range = inDictionary ["mXValue"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mXValue = value
      }
      if let range = inDictionary ["mYValue"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mYValue = value
      }
      if let range = inDictionary ["mValueFontSize"], let value = Double.unarchiveFromDataRange (inData, range) {
        self.mValueFontSize = value
      }
      if let range = inDictionary ["mValueRotation"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mValueRotation = value
      }
      if let range = inDictionary ["mComponentValue"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mComponentValue = value
      }
      if let range = inDictionary ["mNamePrefix"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mNamePrefix = value
      }
      if let range = inDictionary ["mNameIndex"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mNameIndex = value
      }
      if let range = inDictionary ["mXUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mXUnit = value
      }
      if let range = inDictionary ["mYUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mYUnit = value
      }
    //--- To one relationships
      if let range = inDictionary ["mDevice"], let objectIndex = inData.base62EncodedInt (range: range) {
        inParallelObjectSetupContext.addToOneSetupDeferredOperation ({ self.mDevice = inObjectArray [objectIndex] as? DeviceInProject })
      }
      if let range = inDictionary ["mSelectedPackage"], let objectIndex = inData.base62EncodedInt (range: range) {
        inParallelObjectSetupContext.addToOneSetupDeferredOperation ({ self.mSelectedPackage = inObjectArray [objectIndex] as? DevicePackageInProject })
      }
      if let range = inDictionary ["mNameFont"], let objectIndex = inData.base62EncodedInt (range: range) {
        inParallelObjectSetupContext.addToOneSetupDeferredOperation ({ self.mNameFont = inObjectArray [objectIndex] as? FontInProject })
      }
      if let range = inDictionary ["mValueFont"], let objectIndex = inData.base62EncodedInt (range: range) {
        inParallelObjectSetupContext.addToOneSetupDeferredOperation ({ self.mValueFont = inObjectArray [objectIndex] as? FontInProject })
      }
    //--- To many relationships
      if let range = inDictionary ["mConnectors"], range.length > 0 {
        var relationshipArray = [BoardConnector] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! BoardConnector)
        }
        inParallelObjectSetupContext.addToManySetupDeferredOperation ({ self.mConnectors = relationshipArray })
      }
      if let range = inDictionary ["mSymbols"], range.length > 0 {
        var relationshipArray = [ComponentSymbolInProject] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! ComponentSymbolInProject)
        }
        inParallelObjectSetupContext.addToManySetupDeferredOperation ({ self.mSymbols = relationshipArray })
      }
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mConnectors
    for managedObject in self.mConnectors {
      objects.append (managedObject)
    }
  //--- To many property: mSymbols
    for managedObject in self.mSymbols {
      objects.append (managedObject)
    }
  //--- To one property: mDevice
    if let object = self.mDevice {
      objects.append (object)
    }
  //--- To one property: mSelectedPackage
    if let object = self.mSelectedPackage {
      objects.append (object)
    }
  //--- To one property: mNameFont
    if let object = self.mNameFont {
      objects.append (object)
    }
  //--- To one property: mValueFont
    if let object = self.mValueFont {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mConnectors
    for managedObject in self.mConnectors {
      objects.append (managedObject)
    }
  //--- To many property: mSymbols
    for managedObject in self.mSymbols {
      objects.append (managedObject)
    }
  //--- To one property: mDevice
    if let object = self.mDevice {
      objects.append (object)
    }
  //--- To one property: mSelectedPackage
    if let object = self.mSelectedPackage {
      objects.append (object)
    }
  //--- To one property: mNameFont
    if let object = self.mNameFont {
      objects.append (object)
    }
  //--- To one property: mValueFont
    if let object = self.mValueFont {
      objects.append (object)
    }
  }

  //····················································································································
  //  USER ZONE 2
  //····················································································································
//--- START OF USER ZONE 2

  //····················································································································

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    if inKnobIndex == COMPONENT_PACKAGE_CENTER_KNOB {
      return NSCursor.upDownRightLeftCursor
    }else if inKnobIndex == COMPONENT_PACKAGE_ROTATION_KNOB {
      return NSCursor.rotationCursor
    }else if inKnobIndex == COMPONENT_PACKAGE_NAME_KNOB {
      return NSCursor.upDownRightLeftCursor
    }else if inKnobIndex == COMPONENT_PACKAGE_VALUE_KNOB {
      return NSCursor.upDownRightLeftCursor
    }else{
      return nil
    }
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return true
  }

  //····················································································································

  override func translate (xBy inDx : Int, yBy inDy : Int, userSet ioSet : ObjcObjectSet) {
    self.mX += inDx
    self.mY += inDy
  }

  //····················································································································
  //  Knob
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    if inKnobIndex == COMPONENT_PACKAGE_CENTER_KNOB {
      return inProposedAlignedTranslation
    }else if inKnobIndex == COMPONENT_PACKAGE_ROTATION_KNOB {
      return inProposedAlignedTranslation
    }else if inKnobIndex == COMPONENT_PACKAGE_NAME_KNOB {
      return inProposedAlignedTranslation
    }else if inKnobIndex == COMPONENT_PACKAGE_VALUE_KNOB {
      return inProposedAlignedTranslation
    }else{
      return CanariPoint (x: 0, y: 0)
    }
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnlignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnlignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    if inKnobIndex == COMPONENT_PACKAGE_CENTER_KNOB {
      self.mX += inDx
      self.mY += inDy
    }else if inKnobIndex == COMPONENT_PACKAGE_ROTATION_KNOB {
      let absoluteCenter = CanariPoint (x: self.mX, y: self.mY).cocoaPoint
      let newRotationKnobLocation = CanariPoint (x: inAlignedMouseLocationX, y: inAlignedMouseLocationY).cocoaPoint
      let newAngleInDegrees = angleInDegreesBetweenNSPoints (absoluteCenter, newRotationKnobLocation)
      self.mRotation = degreesToCanariRotation (newAngleInDegrees)
    }else if inKnobIndex == COMPONENT_PACKAGE_NAME_KNOB {
      self.mXName += inDx
      self.mYName += inDy
    }else if inKnobIndex == COMPONENT_PACKAGE_VALUE_KNOB {
      self.mXValue += inDx
      self.mYValue += inDy
    }
  }

  //····················································································································
  //   SNAP TO GRID
  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    var isAligned = self.mX.isAlignedOnGrid (inGrid)
    if isAligned {
      isAligned = self.mY.isAlignedOnGrid (inGrid)
    }
    return !isAligned
  }

  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    self.mX.align (onGrid: inGrid)
    self.mY.align (onGrid: inGrid)
  }

  //····················································································································
  //  Rotate 90°
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    if let padRect = self.selectedPackagePadsRect () {
      accumulatedPoints.insert (padRect.center.canariPoint)
      return true
    }else{
      return false
    }
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint, userSet ioSet : ObjcObjectSet) {
    let p = inRotationCenter.rotated90Clockwise (x: self.mX, y: self.mY)
    self.mX = p.x
    self.mY = p.y
    self.mRotation = (self.mRotation + 270_000) % 360_000
    ioSet.insert (self)
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint, userSet ioSet : ObjcObjectSet) {
    let p = inRotationCenter.rotated90CounterClockwise (x: self.mX, y: self.mY)
    self.mX = p.x
    self.mY = p.y
    self.mRotation = (self.mRotation + 90_000) % 360_000
    ioSet.insert (self)
  }

  //····················································································································
  //  REMOVING
  //····················································································································

  override func operationBeforeRemoving () {
    for connector in self.mConnectors {
    //--- Assign pad location to connector
      let descriptor : ComponentPadDescriptor = self.componentPadDictionary! [connector.mComponentPadName]!
      let pad = descriptor.pads [connector.mPadIndex]
      connector.mX = cocoaToCanariUnit (pad.location.x)
      connector.mY = cocoaToCanariUnit (pad.location.y)
    //--- Detach from component
      connector.mComponent = nil
      connector.mComponentPadName = ""
    //--- Delete connector ?
      if (connector.mComponent == nil) && (connector.mTracksP1.count == 0) && (connector.mTracksP2.count == 0) {
        connector.mRoot = nil // Remove from board objects
      }
    }
  }

  //····················································································································

  func affineTransformFromPackage () -> AffineTransform {
    let packagePadDictionary : PackageMasterPadDictionary = self.packagePadDictionary!
    let padRect = packagePadDictionary.padsRect
    let center = padRect.center.cocoaPoint
    var af = AffineTransform ()
    af.translate (x: canariUnitToCocoa (self.mX), y: canariUnitToCocoa (self.mY))
    af.rotate (byDegrees: CGFloat (self.mRotation) / 1000.0)
    if self.mSide == .back {
      af.scale (x: -1.0, y: 1.0)
    }
    af.translate (x: -center.x, y: -center.y)
    return af
  }

  //····················································································································

  func packageToComponentAffineTransform () -> AffineTransform {
    let packagePadDictionary : PackageMasterPadDictionary = self.packagePadDictionary!
    let center = packagePadDictionary.padsRect.center.cocoaPoint
    var af = AffineTransform ()
    af.translate (x: canariUnitToCocoa (self.mX), y: canariUnitToCocoa (self.mY))
    af.rotate (byDegrees: CGFloat (self.mRotation) / 1000.0)
    if self.mSide == .back {
      af.scale (x: -1.0, y: 1.0)
    }
    af.translate (x: -center.x, y: -center.y)
    return af
  }

  //····················································································································

  func selectedPackagePadsRect () -> NSRect? {
    if let inBoard = self.isPlacedInBoard, inBoard, let padDictionary = self.packagePadDictionary {
      let af = self.packageToComponentAffineTransform ()
      var padCenters = [NSPoint] ()
      for (_, masterPad) in padDictionary {
        padCenters.append (af.transform (masterPad.center.cocoaPoint))
        for slavePad in masterPad.slavePads {
          padCenters.append (af.transform (slavePad.center.cocoaPoint))
        }
      }
      return NSRect (points: padCenters)
    }else{
      return nil
    }
  }

  //····················································································································

//--- END OF USER ZONE 2
}

//----------------------------------------------------------------------------------------------------------------------
