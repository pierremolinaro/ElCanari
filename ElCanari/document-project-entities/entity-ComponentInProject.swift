//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mNamePrefix : class {
  var mNamePrefix : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mNameIndex : class {
  var mNameIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_mComponentValue : class {
  var mComponentValue : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_componentName : class {
  var componentName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_deviceName : class {
  var deviceName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_selectedPackageName : class {
  var selectedPackageName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_availablePackages : class {
  var availablePackages : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_deviceSymbolDictionary : class {
  var deviceSymbolDictionary : DeviceSymbolDictionary? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_unplacedSymbols : class {
  var unplacedSymbols : StringTagArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ComponentInProject_placementInSchematics : class {
  var placementInSchematics : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ComponentInProject : EBManagedObject,
         ComponentInProject_mNamePrefix,
         ComponentInProject_mNameIndex,
         ComponentInProject_mComponentValue,
         ComponentInProject_componentName,
         ComponentInProject_deviceName,
         ComponentInProject_selectedPackageName,
         ComponentInProject_availablePackages,
         ComponentInProject_deviceSymbolDictionary,
         ComponentInProject_unplacedSymbols,
         ComponentInProject_placementInSchematics {

  //····················································································································
  //   Atomic property: mNamePrefix
  //····················································································································

  let mNamePrefix_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mNamePrefix : String {
    get { return self.mNamePrefix_property.propval }
    set { self.mNamePrefix_property.setProp (newValue) }
  }

  //····················································································································

  var mNamePrefix_property_selection : EBSelection <String> { return self.mNamePrefix_property.prop }

  //····················································································································
  //   Atomic property: mNameIndex
  //····················································································································

  let mNameIndex_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mNameIndex : Int {
    get { return self.mNameIndex_property.propval }
    set { self.mNameIndex_property.setProp (newValue) }
  }

  //····················································································································

  var mNameIndex_property_selection : EBSelection <Int> { return self.mNameIndex_property.prop }

  //····················································································································
  //   Atomic property: mComponentValue
  //····················································································································

  let mComponentValue_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mComponentValue : String {
    get { return self.mComponentValue_property.propval }
    set { self.mComponentValue_property.setProp (newValue) }
  }

  //····················································································································

  var mComponentValue_property_selection : EBSelection <String> { return self.mComponentValue_property.prop }

  //····················································································································
  //   To many property: mSymbols
  //····················································································································

  let mSymbols_property = StoredArrayOf_ComponentSymbolInProject ()

  //····················································································································

  var mSymbols_property_selection : EBSelection < [ComponentSymbolInProject] > {
    return self.mSymbols_property.prop
  }

  //····················································································································

  var mSymbols : [ComponentSymbolInProject] {
    get { return self.mSymbols_property.propval }
    set { self.mSymbols_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: mDevice
  //····················································································································

   let mDevice_property = StoredObject_DeviceInProject ()

  //····················································································································

  var mDevice_property_selection : EBSelection <DeviceInProject?> {
    return .single (self.mDevice_property.propval)
  }

  //····················································································································

  var mDevice : DeviceInProject? {
    get {
      return self.mDevice_property.propval
    }
    set {
      if self.mDevice_property.propval != nil {
        self.mDevice_property.setProp (nil)
      }
      if newValue != nil {
        self.mDevice_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mDevice_none : StoredObject_DeviceInProject { return self.mDevice_property }

  //····················································································································

  var mDevice_none_selection : EBSelection <Bool> {
    return .single (self.mDevice_property.propval == nil)
  }

  //····················································································································
  //   To one property: mSelectedPackage
  //····················································································································

   let mSelectedPackage_property = StoredObject_DevicePackageInProject ()

  //····················································································································

  var mSelectedPackage_property_selection : EBSelection <DevicePackageInProject?> {
    return .single (self.mSelectedPackage_property.propval)
  }

  //····················································································································

  var mSelectedPackage : DevicePackageInProject? {
    get {
      return self.mSelectedPackage_property.propval
    }
    set {
      if self.mSelectedPackage_property.propval != nil {
        self.mSelectedPackage_property.setProp (nil)
      }
      if newValue != nil {
        self.mSelectedPackage_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mSelectedPackage_none : StoredObject_DevicePackageInProject { return self.mSelectedPackage_property }

  //····················································································································

  var mSelectedPackage_none_selection : EBSelection <Bool> {
    return .single (self.mSelectedPackage_property.propval == nil)
  }

  //····················································································································
  //   Transient property: componentName
  //····················································································································

  let componentName_property = EBTransientProperty_String ()

  //····················································································································

  var componentName_property_selection : EBSelection <String> {
    return self.componentName_property.prop
  }

  //····················································································································

  var componentName : String? {
    switch self.componentName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: deviceName
  //····················································································································

  let deviceName_property = EBTransientProperty_String ()

  //····················································································································

  var deviceName_property_selection : EBSelection <String> {
    return self.deviceName_property.prop
  }

  //····················································································································

  var deviceName : String? {
    switch self.deviceName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: selectedPackageName
  //····················································································································

  let selectedPackageName_property = EBTransientProperty_String ()

  //····················································································································

  var selectedPackageName_property_selection : EBSelection <String> {
    return self.selectedPackageName_property.prop
  }

  //····················································································································

  var selectedPackageName : String? {
    switch self.selectedPackageName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: availablePackages
  //····················································································································

  let availablePackages_property = EBTransientProperty_StringArray ()

  //····················································································································

  var availablePackages_property_selection : EBSelection <StringArray> {
    return self.availablePackages_property.prop
  }

  //····················································································································

  var availablePackages : StringArray? {
    switch self.availablePackages_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: deviceSymbolDictionary
  //····················································································································

  let deviceSymbolDictionary_property = EBTransientProperty_DeviceSymbolDictionary ()

  //····················································································································

  var deviceSymbolDictionary_property_selection : EBSelection <DeviceSymbolDictionary> {
    return self.deviceSymbolDictionary_property.prop
  }

  //····················································································································

  var deviceSymbolDictionary : DeviceSymbolDictionary? {
    switch self.deviceSymbolDictionary_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unplacedSymbols
  //····················································································································

  let unplacedSymbols_property = EBTransientProperty_StringTagArray ()

  //····················································································································

  var unplacedSymbols_property_selection : EBSelection <StringTagArray> {
    return self.unplacedSymbols_property.prop
  }

  //····················································································································

  var unplacedSymbols : StringTagArray? {
    switch self.unplacedSymbols_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: placementInSchematics
  //····················································································································

  let placementInSchematics_property = EBTransientProperty_String ()

  //····················································································································

  var placementInSchematics_property_selection : EBSelection <String> {
    return self.placementInSchematics_property.prop
  }

  //····················································································································

  var placementInSchematics : String? {
    switch self.placementInSchematics_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mNamePrefix
    self.mNamePrefix_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mNameIndex
    self.mNameIndex_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mComponentValue
    self.mComponentValue_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mSymbols (has opposite relationship)
    self.mSymbols_property.ebUndoManager = self.ebUndoManager
    self.mSymbols_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponent_property.setProp (me) } },
      resetter: { inObject in inObject.mComponent_property.setProp (nil) }
    )
  //--- To one property: mDevice (has opposite to many relationship: mComponents) §
    self.mDevice_property.ebUndoManager = self.ebUndoManager
    self.mDevice_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponents_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mComponents_property.remove (me) } }
    )
  //--- To one property: mSelectedPackage
    self.mSelectedPackage_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: componentName
    self.componentName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mNamePrefix_property_selection.kind ()
        kind &= unwSelf.mNameIndex_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNamePrefix_property_selection, unwSelf.mNameIndex_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_ComponentInProject_componentName (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNamePrefix_property.addEBObserver (self.componentName_property)
    self.mNameIndex_property.addEBObserver (self.componentName_property)
  //--- Atomic property: deviceName
    self.deviceName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDevice_property.mDeviceName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mDevice_property.mDeviceName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_deviceName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDevice_property.addEBObserverOf_mDeviceName (self.deviceName_property)
  //--- Atomic property: selectedPackageName
    self.selectedPackageName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSelectedPackage_property.mPackageName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSelectedPackage_property.mPackageName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_selectedPackageName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSelectedPackage_property.addEBObserverOf_mPackageName (self.selectedPackageName_property)
  //--- Atomic property: availablePackages
    self.availablePackages_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDevice_property.packageNames_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mDevice_property.packageNames_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_availablePackages (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDevice_property.addEBObserverOf_packageNames (self.availablePackages_property)
  //--- Atomic property: deviceSymbolDictionary
    self.deviceSymbolDictionary_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDevice_property.deviceSymbolDictionary_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mDevice_property.deviceSymbolDictionary_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_deviceSymbolDictionary (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDevice_property.addEBObserverOf_deviceSymbolDictionary (self.deviceSymbolDictionary_property)
  //--- Atomic property: unplacedSymbols
    self.unplacedSymbols_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.componentName_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.componentName_property_selection, unwSelf.mSymbols_property_selection, unwSelf.mSymbols_property_selection, unwSelf.mSymbols_property_selection, unwSelf.mSymbols_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_ComponentInProject_unplacedSymbols (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.componentName_property.addEBObserver (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserver (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserverOf_symbolInSchematics (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserverOf_mSymbolInstanceName (self.unplacedSymbols_property)
    self.mSymbols_property.addEBObserverOf_mSymbolTypeName (self.unplacedSymbols_property)
  //--- Atomic property: placementInSchematics
    self.placementInSchematics_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSymbols_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSymbols_property_selection) {
          case (.single (let v0)) :
            return .single (transient_ComponentInProject_placementInSchematics (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbols_property.addEBObserverOf_symbolInSchematics (self.placementInSchematics_property)
  //--- Install undoers and opposite setter for relationships
    self.mSymbols_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mComponent_property.setProp (me) } },
      resetter: { inObject in inObject.mComponent_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mNamePrefix_property.removeEBObserver (self.componentName_property)
    self.mNameIndex_property.removeEBObserver (self.componentName_property)
    self.mDevice_property.removeEBObserverOf_mDeviceName (self.deviceName_property)
    self.mSelectedPackage_property.removeEBObserverOf_mPackageName (self.selectedPackageName_property)
    self.mDevice_property.removeEBObserverOf_packageNames (self.availablePackages_property)
    self.mDevice_property.removeEBObserverOf_deviceSymbolDictionary (self.deviceSymbolDictionary_property)
    self.componentName_property.removeEBObserver (self.unplacedSymbols_property)
    self.mSymbols_property.removeEBObserver (self.unplacedSymbols_property)
    self.mSymbols_property.removeEBObserverOf_symbolInSchematics (self.unplacedSymbols_property)
    self.mSymbols_property.removeEBObserverOf_mSymbolInstanceName (self.unplacedSymbols_property)
    self.mSymbols_property.removeEBObserverOf_mSymbolTypeName (self.unplacedSymbols_property)
    self.mSymbols_property.removeEBObserverOf_symbolInSchematics (self.placementInSchematics_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mNamePrefix",
      idx: self.mNamePrefix_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mNamePrefix_property.mObserverExplorer,
      valueExplorer: &self.mNamePrefix_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNameIndex",
      idx: self.mNameIndex_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mNameIndex_property.mObserverExplorer,
      valueExplorer: &self.mNameIndex_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mComponentValue",
      idx: self.mComponentValue_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mComponentValue_property.mObserverExplorer,
      valueExplorer: &self.mComponentValue_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "componentName",
      idx: self.componentName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.componentName_property.mObserverExplorer,
      valueExplorer: &self.componentName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "deviceName",
      idx: self.deviceName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.deviceName_property.mObserverExplorer,
      valueExplorer: &self.deviceName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectedPackageName",
      idx: self.selectedPackageName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectedPackageName_property.mObserverExplorer,
      valueExplorer: &self.selectedPackageName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "availablePackages",
      idx: self.availablePackages_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.availablePackages_property.mObserverExplorer,
      valueExplorer: &self.availablePackages_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "deviceSymbolDictionary",
      idx: self.deviceSymbolDictionary_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.deviceSymbolDictionary_property.mObserverExplorer,
      valueExplorer: &self.deviceSymbolDictionary_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "unplacedSymbols",
      idx: self.unplacedSymbols_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.unplacedSymbols_property.mObserverExplorer,
      valueExplorer: &self.unplacedSymbols_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "placementInSchematics",
      idx: self.placementInSchematics_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.placementInSchematics_property.mObserverExplorer,
      valueExplorer: &self.placementInSchematics_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "mSymbols",
      idx:mSymbols_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mSymbols_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "mDevice",
      idx:self.mDevice_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mDevice_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mSelectedPackage",
      idx:self.mSelectedPackage_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mSelectedPackage_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mNamePrefix
    self.mNamePrefix_property.mObserverExplorer = nil
    self.mNamePrefix_property.mValueExplorer = nil
  //--- Atomic property: mNameIndex
    self.mNameIndex_property.mObserverExplorer = nil
    self.mNameIndex_property.mValueExplorer = nil
  //--- Atomic property: mComponentValue
    self.mComponentValue_property.mObserverExplorer = nil
    self.mComponentValue_property.mValueExplorer = nil
  //--- To many property: mSymbols
    self.mSymbols_property.mValueExplorer = nil
  //--- To one property: mDevice
    self.mDevice_property.mObserverExplorer = nil
    self.mDevice_property.mValueExplorer = nil
  //--- To one property: mSelectedPackage
    self.mSelectedPackage_property.mObserverExplorer = nil
    self.mSelectedPackage_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mSymbols = []
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mDevice = nil
    self.mSelectedPackage = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mNamePrefix
    self.mNamePrefix_property.storeIn (dictionary: ioDictionary, forKey:"mNamePrefix")
  //--- Atomic property: mNameIndex
    self.mNameIndex_property.storeIn (dictionary: ioDictionary, forKey:"mNameIndex")
  //--- Atomic property: mComponentValue
    self.mComponentValue_property.storeIn (dictionary: ioDictionary, forKey:"mComponentValue")
  //--- To many property: mSymbols
    self.store (
      managedObjectArray: self.mSymbols_property.propval,
      relationshipName: "mSymbols",
      intoDictionary: ioDictionary
    )
  //--- To one property: mSelectedPackage
    self.store (managedObject:self.mSelectedPackage_property.propval,
      relationshipName: "mSelectedPackage",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mSymbols
    self.mSymbols_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mSymbols",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [ComponentSymbolInProject])
  //--- To one property: mDevice
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mDevice",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? DeviceInProject {
        self.mDevice_property.setProp (entity)
      }
    }
  //--- To one property: mSelectedPackage
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mSelectedPackage",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? DevicePackageInProject {
        self.mSelectedPackage_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mNamePrefix
    self.mNamePrefix_property.readFrom (dictionary: inDictionary, forKey:"mNamePrefix")
  //--- Atomic property: mNameIndex
    self.mNameIndex_property.readFrom (dictionary: inDictionary, forKey:"mNameIndex")
  //--- Atomic property: mComponentValue
    self.mComponentValue_property.readFrom (dictionary: inDictionary, forKey:"mComponentValue")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mSymbols
    for managedObject in self.mSymbols {
      objects.append (managedObject)
    }
  //--- To one property: mDevice
    if let object = self.mDevice {
      objects.append (object)
    }
  //--- To one property: mSelectedPackage
    if let object = self.mSelectedPackage {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mSymbols
    for managedObject in self.mSymbols {
      objects.append (managedObject)
    }
  //--- To one property: mDevice
    if let object = self.mDevice {
      objects.append (object)
    }
  //--- To one property: mSelectedPackage
    if let object = self.mSelectedPackage {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ComponentInProject : ReadOnlyAbstractArrayProperty <ComponentInProject> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <ComponentInProject>, addedSet inAddedSet : Set <ComponentInProject>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_mNamePrefix_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mNameIndex_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mComponentValue_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_componentName_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_deviceName_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_selectedPackageName_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_availablePackages_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_deviceSymbolDictionary_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_unplacedSymbols_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_placementInSchematics_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_mNamePrefix_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mNameIndex_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mComponentValue_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_componentName_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_deviceName_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_selectedPackageName_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_availablePackages_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_deviceSymbolDictionary_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_unplacedSymbols_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_placementInSchematics_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'mNamePrefix' stored property
  //····················································································································

  private var mObserversOf_mNamePrefix = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNamePrefix (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNamePrefix.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNamePrefix_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNamePrefix (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNamePrefix.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNamePrefix_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNamePrefix_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNamePrefix.apply { (_ observer : EBEvent) in
        managedObject.mNamePrefix_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNamePrefix_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mNamePrefix.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNamePrefix_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNameIndex' stored property
  //····················································································································

  private var mObserversOf_mNameIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNameIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNameIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNameIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNameIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNameIndex_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNameIndex.apply { (_ observer : EBEvent) in
        managedObject.mNameIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNameIndex_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mNameIndex.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNameIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mComponentValue' stored property
  //····················································································································

  private var mObserversOf_mComponentValue = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mComponentValue (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mComponentValue.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mComponentValue_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComponentValue (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mComponentValue.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mComponentValue_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mComponentValue_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mComponentValue.apply { (_ observer : EBEvent) in
        managedObject.mComponentValue_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mComponentValue_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mComponentValue.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mComponentValue_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'componentName' transient property
  //····················································································································

  private var mObserversOf_componentName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_componentName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_componentName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_componentName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_componentName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_componentName_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_componentName.apply { (_ observer : EBEvent) in
        managedObject.componentName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentName_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_componentName.apply { (_ observer : EBEvent) in
        managedObject.componentName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'deviceName' transient property
  //····················································································································

  private var mObserversOf_deviceName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_deviceName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_deviceName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_deviceName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_deviceName_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_deviceName.apply { (_ observer : EBEvent) in
        managedObject.deviceName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_deviceName_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_deviceName.apply { (_ observer : EBEvent) in
        managedObject.deviceName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedPackageName' transient property
  //····················································································································

  private var mObserversOf_selectedPackageName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedPackageName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedPackageName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPackageName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPackageName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedPackageName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPackageName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedPackageName_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_selectedPackageName.apply { (_ observer : EBEvent) in
        managedObject.selectedPackageName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedPackageName_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_selectedPackageName.apply { (_ observer : EBEvent) in
        managedObject.selectedPackageName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'availablePackages' transient property
  //····················································································································

  private var mObserversOf_availablePackages = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_availablePackages (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_availablePackages.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.availablePackages_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_availablePackages (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_availablePackages.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.availablePackages_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_availablePackages_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_availablePackages.apply { (_ observer : EBEvent) in
        managedObject.availablePackages_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_availablePackages_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_availablePackages.apply { (_ observer : EBEvent) in
        managedObject.availablePackages_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'deviceSymbolDictionary' transient property
  //····················································································································

  private var mObserversOf_deviceSymbolDictionary = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_deviceSymbolDictionary (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_deviceSymbolDictionary.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceSymbolDictionary_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceSymbolDictionary (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_deviceSymbolDictionary.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceSymbolDictionary_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_deviceSymbolDictionary_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_deviceSymbolDictionary.apply { (_ observer : EBEvent) in
        managedObject.deviceSymbolDictionary_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_deviceSymbolDictionary_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_deviceSymbolDictionary.apply { (_ observer : EBEvent) in
        managedObject.deviceSymbolDictionary_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'unplacedSymbols' transient property
  //····················································································································

  private var mObserversOf_unplacedSymbols = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unplacedSymbols_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unplacedSymbols_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_unplacedSymbols_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_unplacedSymbols.apply { (_ observer : EBEvent) in
        managedObject.unplacedSymbols_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_unplacedSymbols_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_unplacedSymbols.apply { (_ observer : EBEvent) in
        managedObject.unplacedSymbols_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'placementInSchematics' transient property
  //····················································································································

  private var mObserversOf_placementInSchematics = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_placementInSchematics (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_placementInSchematics.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.placementInSchematics_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_placementInSchematics (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_placementInSchematics.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.placementInSchematics_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_placementInSchematics_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_placementInSchematics.apply { (_ observer : EBEvent) in
        managedObject.placementInSchematics_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_placementInSchematics_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_placementInSchematics.apply { (_ observer : EBEvent) in
        managedObject.placementInSchematics_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_ComponentInProject : ReadOnlyArrayOf_ComponentInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_ComponentInProject? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_ComponentInProject?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newArray : [ComponentInProject] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newArray = v
        self.mTransientKind = .single
       case .multiple :
        newArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newArray = []
      self.mTransientKind = .empty
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [ComponentInProject] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [ComponentInProject] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_ComponentInProject <SUPER : EBManagedObject> : ReadOnlyArrayOf_ComponentInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    var newModelArray : [SUPER] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newModelArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newModelArray = v
        self.mTransientKind = .single
       case .multiple :
        newModelArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newModelArray = []
      self.mTransientKind = .empty
    }
    var newArray = [ComponentInProject] ()
    for superObject in newModelArray {
      if let object = superObject as? ComponentInProject {
        newArray.append (object)
      }
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [ComponentInProject] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [ComponentInProject] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_ComponentInProject : ReadOnlyArrayOf_ComponentInProject {

  //····················································································································
 
  func setProp (_ value :  [ComponentInProject]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_ComponentInProject : ReadWriteArrayOf_ComponentInProject {

  //····················································································································

  private var mModel : ReadWriteArrayOf_ComponentInProject? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_ComponentInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [ComponentInProject]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [ComponentInProject]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [ComponentInProject] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : [ComponentInProject] {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_ComponentInProject : ReadWriteArrayOf_ComponentInProject, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ComponentInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ComponentInProject) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ComponentInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ComponentInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  //  Init
  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [ComponentInProject] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "ComponentInProject") as? ComponentInProject {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [ComponentInProject]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [ComponentInProject]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //--- Write in preferences ?
    self.writeInPreferences ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <ComponentInProject>, addedSet inAddedSet : Set <ComponentInProject>) {
    for managedObject in inRemovedSet {
      managedObject.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (managedObject)
    }
  //---
    for managedObject in inAddedSet {
      managedObject.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }
 
  //····················································································································

  override var prop : EBSelection < [ComponentInProject] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [ComponentInProject]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [ComponentInProject] { return self.mInternalArrayValue }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mInternalArrayValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  func remove (_ object : ComponentInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : ComponentInProject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mInternalArrayValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_ComponentInProject 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_ComponentInProject : ReadOnlyAbstractObjectProperty <ComponentInProject> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : ComponentInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.mNamePrefix_property.removeEBObserversFrom (&self.mObserversOf_mNamePrefix) // Stored property
    inOldValue?.mNameIndex_property.removeEBObserversFrom (&self.mObserversOf_mNameIndex) // Stored property
    inOldValue?.mComponentValue_property.removeEBObserversFrom (&self.mObserversOf_mComponentValue) // Stored property
    inOldValue?.componentName_property.removeEBObserversFrom (&self.mObserversOf_componentName) // Transient property
    inOldValue?.deviceName_property.removeEBObserversFrom (&self.mObserversOf_deviceName) // Transient property
    inOldValue?.selectedPackageName_property.removeEBObserversFrom (&self.mObserversOf_selectedPackageName) // Transient property
    inOldValue?.availablePackages_property.removeEBObserversFrom (&self.mObserversOf_availablePackages) // Transient property
    inOldValue?.deviceSymbolDictionary_property.removeEBObserversFrom (&self.mObserversOf_deviceSymbolDictionary) // Transient property
    inOldValue?.unplacedSymbols_property.removeEBObserversFrom (&self.mObserversOf_unplacedSymbols) // Transient property
    inOldValue?.placementInSchematics_property.removeEBObserversFrom (&self.mObserversOf_placementInSchematics) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.mNamePrefix_property.addEBObserversFrom (&self.mObserversOf_mNamePrefix) // Stored property
    self.mInternalValue?.mNameIndex_property.addEBObserversFrom (&self.mObserversOf_mNameIndex) // Stored property
    self.mInternalValue?.mComponentValue_property.addEBObserversFrom (&self.mObserversOf_mComponentValue) // Stored property
    self.mInternalValue?.componentName_property.addEBObserversFrom (&self.mObserversOf_componentName) // Transient property
    self.mInternalValue?.deviceName_property.addEBObserversFrom (&self.mObserversOf_deviceName) // Transient property
    self.mInternalValue?.selectedPackageName_property.addEBObserversFrom (&self.mObserversOf_selectedPackageName) // Transient property
    self.mInternalValue?.availablePackages_property.addEBObserversFrom (&self.mObserversOf_availablePackages) // Transient property
    self.mInternalValue?.deviceSymbolDictionary_property.addEBObserversFrom (&self.mObserversOf_deviceSymbolDictionary) // Transient property
    self.mInternalValue?.unplacedSymbols_property.addEBObserversFrom (&self.mObserversOf_unplacedSymbols) // Transient property
    self.mInternalValue?.placementInSchematics_property.addEBObserversFrom (&self.mObserversOf_placementInSchematics) // Transient property
  }

  //····················································································································
  //   Observers of 'mNamePrefix' stored property
  //····················································································································

  private var mObserversOf_mNamePrefix = EBWeakEventSet ()

  //····················································································································

  var mNamePrefix_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mNamePrefix_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mNamePrefix (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNamePrefix.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mNamePrefix_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNamePrefix (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNamePrefix.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mNamePrefix_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mNamePrefix_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNamePrefix.apply { (_ observer : EBEvent) in
        managedObject.mNamePrefix_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNamePrefix_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mNamePrefix.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNamePrefix_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNameIndex' stored property
  //····················································································································

  private var mObserversOf_mNameIndex = EBWeakEventSet ()

  //····················································································································

  var mNameIndex_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mNameIndex_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mNameIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNameIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mNameIndex_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNameIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNameIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mNameIndex_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mNameIndex_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNameIndex.apply { (_ observer : EBEvent) in
        managedObject.mNameIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNameIndex_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mNameIndex.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNameIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mComponentValue' stored property
  //····················································································································

  private var mObserversOf_mComponentValue = EBWeakEventSet ()

  //····················································································································

  var mComponentValue_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mComponentValue_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mComponentValue (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mComponentValue.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mComponentValue_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComponentValue (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mComponentValue.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mComponentValue_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mComponentValue_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mComponentValue.apply { (_ observer : EBEvent) in
        managedObject.mComponentValue_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mComponentValue_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mComponentValue.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mComponentValue_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'componentName' transient property
  //····················································································································

  private var mObserversOf_componentName = EBWeakEventSet ()

  //····················································································································

  var componentName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.componentName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_componentName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_componentName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.componentName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_componentName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_componentName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.componentName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_componentName_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_componentName.apply { (_ observer : EBEvent) in
        managedObject.componentName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentName_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_componentName.apply { (_ observer : EBEvent) in
        managedObject.componentName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'deviceName' transient property
  //····················································································································

  private var mObserversOf_deviceName = EBWeakEventSet ()

  //····················································································································

  var deviceName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.deviceName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_deviceName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_deviceName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.deviceName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_deviceName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.deviceName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_deviceName_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_deviceName.apply { (_ observer : EBEvent) in
        managedObject.deviceName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_deviceName_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_deviceName.apply { (_ observer : EBEvent) in
        managedObject.deviceName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedPackageName' transient property
  //····················································································································

  private var mObserversOf_selectedPackageName = EBWeakEventSet ()

  //····················································································································

  var selectedPackageName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.selectedPackageName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedPackageName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedPackageName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedPackageName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPackageName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedPackageName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedPackageName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedPackageName_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_selectedPackageName.apply { (_ observer : EBEvent) in
        managedObject.selectedPackageName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedPackageName_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_selectedPackageName.apply { (_ observer : EBEvent) in
        managedObject.selectedPackageName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'availablePackages' transient property
  //····················································································································

  private var mObserversOf_availablePackages = EBWeakEventSet ()

  //····················································································································

  var availablePackages_property_selection : EBSelection <StringArray?> {
    if let model = self.propval {
      switch (model.availablePackages_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_availablePackages (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_availablePackages.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.availablePackages_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_availablePackages (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_availablePackages.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.availablePackages_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_availablePackages_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_availablePackages.apply { (_ observer : EBEvent) in
        managedObject.availablePackages_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_availablePackages_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_availablePackages.apply { (_ observer : EBEvent) in
        managedObject.availablePackages_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'deviceSymbolDictionary' transient property
  //····················································································································

  private var mObserversOf_deviceSymbolDictionary = EBWeakEventSet ()

  //····················································································································

  var deviceSymbolDictionary_property_selection : EBSelection <DeviceSymbolDictionary?> {
    if let model = self.propval {
      switch (model.deviceSymbolDictionary_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_deviceSymbolDictionary (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_deviceSymbolDictionary.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.deviceSymbolDictionary_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceSymbolDictionary (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_deviceSymbolDictionary.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.deviceSymbolDictionary_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_deviceSymbolDictionary_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_deviceSymbolDictionary.apply { (_ observer : EBEvent) in
        managedObject.deviceSymbolDictionary_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_deviceSymbolDictionary_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_deviceSymbolDictionary.apply { (_ observer : EBEvent) in
        managedObject.deviceSymbolDictionary_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'unplacedSymbols' transient property
  //····················································································································

  private var mObserversOf_unplacedSymbols = EBWeakEventSet ()

  //····················································································································

  var unplacedSymbols_property_selection : EBSelection <StringTagArray?> {
    if let model = self.propval {
      switch (model.unplacedSymbols_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.unplacedSymbols_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.unplacedSymbols_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_unplacedSymbols_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_unplacedSymbols.apply { (_ observer : EBEvent) in
        managedObject.unplacedSymbols_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_unplacedSymbols_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_unplacedSymbols.apply { (_ observer : EBEvent) in
        managedObject.unplacedSymbols_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'placementInSchematics' transient property
  //····················································································································

  private var mObserversOf_placementInSchematics = EBWeakEventSet ()

  //····················································································································

  var placementInSchematics_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.placementInSchematics_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_placementInSchematics (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_placementInSchematics.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.placementInSchematics_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_placementInSchematics (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_placementInSchematics.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.placementInSchematics_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_placementInSchematics_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_placementInSchematics.apply { (_ observer : EBEvent) in
        managedObject.placementInSchematics_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_placementInSchematics_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_placementInSchematics.apply { (_ observer : EBEvent) in
        managedObject.placementInSchematics_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observable toMany property: mSymbols
  //····················································································································

  private var mObserversOf_mSymbols = EBWeakEventSet ()

  //····················································································································

  var mSymbols_property_selection : EBSelection <[ComponentSymbolInProject]> {
    if let model = self.propval {
      switch (model.mSymbols_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbols (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbols.insert (inObserver)
    if let object = self.propval {
      object.mSymbols_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbols (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbols.remove (inObserver)
    if let object = self.propval {
      object.mSymbols_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientObject ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientObject_ComponentInProject : ReadOnlyObject_ComponentInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_ComponentInProject? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_ComponentInProject?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : ComponentInProject? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < ComponentInProject? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : ComponentInProject? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_ComponentInProject : ReadOnlyObject_ComponentInProject {

  //····················································································································
 
  func setProp (_ inValue : ComponentInProject?) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_ComponentInProject : ReadWriteObject_ComponentInProject {

  //····················································································································

  private var mModel : ReadWriteObject_ComponentInProject? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_ComponentInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : ComponentInProject?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : ComponentInProject?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < ComponentInProject? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : ComponentInProject? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_ComponentInProject 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_ComponentInProject : ReadWriteObject_ComponentInProject, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ComponentInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ComponentInProject) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ComponentInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ComponentInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : ComponentInProject?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    if let object = inOldValue {
      object.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      object.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : ComponentInProject?) {
    self.mInternalValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < ComponentInProject? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : ComponentInProject?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : ComponentInProject? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    self.mInternalValue?.setSignatureObserver (observer: observer)
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

