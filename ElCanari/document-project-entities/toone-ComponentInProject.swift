//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_ComponentInProject 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_ComponentInProject : ReadOnlyAbstractObjectProperty <ComponentInProject> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : ComponentInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.mX_property.removeEBObserver (self.mX_property) // Stored property
    inOldValue?.mY_property.removeEBObserver (self.mY_property) // Stored property
    inOldValue?.mRotation_property.removeEBObserver (self.mRotation_property) // Stored property
    inOldValue?.mSide_property.removeEBObserver (self.mSide_property) // Stored property
    inOldValue?.mDisplayLegend_property.removeEBObserver (self.mDisplayLegend_property) // Stored property
    inOldValue?.mNameIsVisibleInBoard_property.removeEBObserver (self.mNameIsVisibleInBoard_property) // Stored property
    inOldValue?.mXName_property.removeEBObserver (self.mXName_property) // Stored property
    inOldValue?.mYName_property.removeEBObserver (self.mYName_property) // Stored property
    inOldValue?.mNameFontSize_property.removeEBObserver (self.mNameFontSize_property) // Stored property
    inOldValue?.mNameRotation_property.removeEBObserver (self.mNameRotation_property) // Stored property
    inOldValue?.mValueIsVisibleInBoard_property.removeEBObserver (self.mValueIsVisibleInBoard_property) // Stored property
    inOldValue?.mXValue_property.removeEBObserver (self.mXValue_property) // Stored property
    inOldValue?.mYValue_property.removeEBObserver (self.mYValue_property) // Stored property
    inOldValue?.mValueFontSize_property.removeEBObserver (self.mValueFontSize_property) // Stored property
    inOldValue?.mValueRotation_property.removeEBObserver (self.mValueRotation_property) // Stored property
    inOldValue?.mComponentValue_property.removeEBObserver (self.mComponentValue_property) // Stored property
    inOldValue?.mNamePrefix_property.removeEBObserver (self.mNamePrefix_property) // Stored property
    inOldValue?.mNameIndex_property.removeEBObserver (self.mNameIndex_property) // Stored property
    inOldValue?.mXUnit_property.removeEBObserver (self.mXUnit_property) // Stored property
    inOldValue?.mYUnit_property.removeEBObserver (self.mYUnit_property) // Stored property
    inOldValue?.deviceName_property.removeEBObserver (self.deviceName_property) // Transient property
    inOldValue?.packagePadDictionary_property.removeEBObserver (self.packagePadDictionary_property) // Transient property
    inOldValue?.selectedPackageName_property.removeEBObserver (self.selectedPackageName_property) // Transient property
    inOldValue?.availablePackages_property.removeEBObserver (self.availablePackages_property) // Transient property
    inOldValue?.issues_property.removeEBObserver (self.issues_property) // Transient property
    inOldValue?.componentIsPlacedInBoard_property.removeEBObserver (self.componentIsPlacedInBoard_property) // Transient property
    inOldValue?.componentIsPlacedInBoardString_property.removeEBObserver (self.componentIsPlacedInBoardString_property) // Transient property
    inOldValue?.strokeBezierPath_property.removeEBObserver (self.strokeBezierPath_property) // Transient property
    inOldValue?.pinPadAssignments_property.removeEBObserver (self.pinPadAssignments_property) // Transient property
    inOldValue?.placementInSchematic_property.removeEBObserver (self.placementInSchematic_property) // Transient property
    inOldValue?.deviceSymbolDictionary_property.removeEBObserver (self.deviceSymbolDictionary_property) // Transient property
    inOldValue?.componentNameFontName_property.removeEBObserver (self.componentNameFontName_property) // Transient property
    inOldValue?.componentValueFontName_property.removeEBObserver (self.componentValueFontName_property) // Transient property
    inOldValue?.componentPadDictionary_property.removeEBObserver (self.componentPadDictionary_property) // Transient property
    inOldValue?.padNetDictionary_property.removeEBObserver (self.padNetDictionary_property) // Transient property
    inOldValue?.componentName_property.removeEBObserver (self.componentName_property) // Transient property
    inOldValue?.selectionDisplay_property.removeEBObserver (self.selectionDisplay_property) // Transient property
    inOldValue?.unplacedSymbols_property.removeEBObserver (self.unplacedSymbols_property) // Transient property
    inOldValue?.objectDisplay_property.removeEBObserver (self.objectDisplay_property) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.mX_property.addEBObserver (self.mX_property) // Stored property
    self.mInternalValue?.mY_property.addEBObserver (self.mY_property) // Stored property
    self.mInternalValue?.mRotation_property.addEBObserver (self.mRotation_property) // Stored property
    self.mInternalValue?.mSide_property.addEBObserver (self.mSide_property) // Stored property
    self.mInternalValue?.mDisplayLegend_property.addEBObserver (self.mDisplayLegend_property) // Stored property
    self.mInternalValue?.mNameIsVisibleInBoard_property.addEBObserver (self.mNameIsVisibleInBoard_property) // Stored property
    self.mInternalValue?.mXName_property.addEBObserver (self.mXName_property) // Stored property
    self.mInternalValue?.mYName_property.addEBObserver (self.mYName_property) // Stored property
    self.mInternalValue?.mNameFontSize_property.addEBObserver (self.mNameFontSize_property) // Stored property
    self.mInternalValue?.mNameRotation_property.addEBObserver (self.mNameRotation_property) // Stored property
    self.mInternalValue?.mValueIsVisibleInBoard_property.addEBObserver (self.mValueIsVisibleInBoard_property) // Stored property
    self.mInternalValue?.mXValue_property.addEBObserver (self.mXValue_property) // Stored property
    self.mInternalValue?.mYValue_property.addEBObserver (self.mYValue_property) // Stored property
    self.mInternalValue?.mValueFontSize_property.addEBObserver (self.mValueFontSize_property) // Stored property
    self.mInternalValue?.mValueRotation_property.addEBObserver (self.mValueRotation_property) // Stored property
    self.mInternalValue?.mComponentValue_property.addEBObserver (self.mComponentValue_property) // Stored property
    self.mInternalValue?.mNamePrefix_property.addEBObserver (self.mNamePrefix_property) // Stored property
    self.mInternalValue?.mNameIndex_property.addEBObserver (self.mNameIndex_property) // Stored property
    self.mInternalValue?.mXUnit_property.addEBObserver (self.mXUnit_property) // Stored property
    self.mInternalValue?.mYUnit_property.addEBObserver (self.mYUnit_property) // Stored property
    self.mInternalValue?.deviceName_property.addEBObserver (self.deviceName_property) // Transient property
    self.mInternalValue?.packagePadDictionary_property.addEBObserver (self.packagePadDictionary_property) // Transient property
    self.mInternalValue?.selectedPackageName_property.addEBObserver (self.selectedPackageName_property) // Transient property
    self.mInternalValue?.availablePackages_property.addEBObserver (self.availablePackages_property) // Transient property
    self.mInternalValue?.issues_property.addEBObserver (self.issues_property) // Transient property
    self.mInternalValue?.componentIsPlacedInBoard_property.addEBObserver (self.componentIsPlacedInBoard_property) // Transient property
    self.mInternalValue?.componentIsPlacedInBoardString_property.addEBObserver (self.componentIsPlacedInBoardString_property) // Transient property
    self.mInternalValue?.strokeBezierPath_property.addEBObserver (self.strokeBezierPath_property) // Transient property
    self.mInternalValue?.pinPadAssignments_property.addEBObserver (self.pinPadAssignments_property) // Transient property
    self.mInternalValue?.placementInSchematic_property.addEBObserver (self.placementInSchematic_property) // Transient property
    self.mInternalValue?.deviceSymbolDictionary_property.addEBObserver (self.deviceSymbolDictionary_property) // Transient property
    self.mInternalValue?.componentNameFontName_property.addEBObserver (self.componentNameFontName_property) // Transient property
    self.mInternalValue?.componentValueFontName_property.addEBObserver (self.componentValueFontName_property) // Transient property
    self.mInternalValue?.componentPadDictionary_property.addEBObserver (self.componentPadDictionary_property) // Transient property
    self.mInternalValue?.padNetDictionary_property.addEBObserver (self.padNetDictionary_property) // Transient property
    self.mInternalValue?.componentName_property.addEBObserver (self.componentName_property) // Transient property
    self.mInternalValue?.selectionDisplay_property.addEBObserver (self.selectionDisplay_property) // Transient property
    self.mInternalValue?.unplacedSymbols_property.addEBObserver (self.unplacedSymbols_property) // Transient property
    self.mInternalValue?.objectDisplay_property.addEBObserver (self.objectDisplay_property) // Transient property
  }

  //····················································································································
  //   init
  //····················································································································

  override init () {
    super.init ()
    self.mX_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mX_property.prop ?? .empty }
    self.mX_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mX_property.setProp (inValue) }
    self.mY_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mY_property.prop ?? .empty }
    self.mY_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mY_property.setProp (inValue) }
    self.mRotation_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mRotation_property.prop ?? .empty }
    self.mRotation_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mRotation_property.setProp (inValue) }
    self.mSide_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mSide_property.prop ?? .empty }
    self.mSide_property.mWriteModelFunction = { [weak self] (inValue : ComponentSide) in self?.mInternalValue?.mSide_property.setProp (inValue) }
    self.mDisplayLegend_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mDisplayLegend_property.prop ?? .empty }
    self.mDisplayLegend_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mDisplayLegend_property.setProp (inValue) }
    self.mNameIsVisibleInBoard_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mNameIsVisibleInBoard_property.prop ?? .empty }
    self.mNameIsVisibleInBoard_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mNameIsVisibleInBoard_property.setProp (inValue) }
    self.mXName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mXName_property.prop ?? .empty }
    self.mXName_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mXName_property.setProp (inValue) }
    self.mYName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mYName_property.prop ?? .empty }
    self.mYName_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mYName_property.setProp (inValue) }
    self.mNameFontSize_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mNameFontSize_property.prop ?? .empty }
    self.mNameFontSize_property.mWriteModelFunction = { [weak self] (inValue : Double) in self?.mInternalValue?.mNameFontSize_property.setProp (inValue) }
    self.mNameRotation_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mNameRotation_property.prop ?? .empty }
    self.mNameRotation_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mNameRotation_property.setProp (inValue) }
    self.mValueIsVisibleInBoard_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mValueIsVisibleInBoard_property.prop ?? .empty }
    self.mValueIsVisibleInBoard_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mValueIsVisibleInBoard_property.setProp (inValue) }
    self.mXValue_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mXValue_property.prop ?? .empty }
    self.mXValue_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mXValue_property.setProp (inValue) }
    self.mYValue_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mYValue_property.prop ?? .empty }
    self.mYValue_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mYValue_property.setProp (inValue) }
    self.mValueFontSize_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mValueFontSize_property.prop ?? .empty }
    self.mValueFontSize_property.mWriteModelFunction = { [weak self] (inValue : Double) in self?.mInternalValue?.mValueFontSize_property.setProp (inValue) }
    self.mValueRotation_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mValueRotation_property.prop ?? .empty }
    self.mValueRotation_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mValueRotation_property.setProp (inValue) }
    self.mComponentValue_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mComponentValue_property.prop ?? .empty }
    self.mComponentValue_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.mComponentValue_property.setProp (inValue) }
    self.mNamePrefix_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mNamePrefix_property.prop ?? .empty }
    self.mNamePrefix_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.mNamePrefix_property.setProp (inValue) }
    self.mNameIndex_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mNameIndex_property.prop ?? .empty }
    self.mNameIndex_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mNameIndex_property.setProp (inValue) }
    self.mXUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mXUnit_property.prop ?? .empty }
    self.mXUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mXUnit_property.setProp (inValue) }
    self.mYUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mYUnit_property.prop ?? .empty }
    self.mYUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mYUnit_property.setProp (inValue) }
    self.deviceName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.deviceName_property.prop ?? .empty }
    self.packagePadDictionary_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.packagePadDictionary_property.prop ?? .empty }
    self.selectedPackageName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.selectedPackageName_property.prop ?? .empty }
    self.availablePackages_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.availablePackages_property.prop ?? .empty }
    self.issues_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.issues_property.prop ?? .empty }
    self.componentIsPlacedInBoard_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.componentIsPlacedInBoard_property.prop ?? .empty }
    self.componentIsPlacedInBoardString_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.componentIsPlacedInBoardString_property.prop ?? .empty }
    self.strokeBezierPath_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.strokeBezierPath_property.prop ?? .empty }
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.pinPadAssignments_property.prop ?? .empty }
    self.placementInSchematic_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.placementInSchematic_property.prop ?? .empty }
    self.deviceSymbolDictionary_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.deviceSymbolDictionary_property.prop ?? .empty }
    self.componentNameFontName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.componentNameFontName_property.prop ?? .empty }
    self.componentValueFontName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.componentValueFontName_property.prop ?? .empty }
    self.componentPadDictionary_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.componentPadDictionary_property.prop ?? .empty }
    self.padNetDictionary_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.padNetDictionary_property.prop ?? .empty }
    self.componentName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.componentName_property.prop ?? .empty }
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.selectionDisplay_property.prop ?? .empty }
    self.unplacedSymbols_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.unplacedSymbols_property.prop ?? .empty }
    self.objectDisplay_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.objectDisplay_property.prop ?? .empty }
  }

  //····················································································································
  //   Proxy of 'mX' stored property
  //····················································································································

  let mX_property = EBPropertyProxy_Int ()

  var mX_property_selection : EBSelection <Int> {
    switch (self.mX_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mY' stored property
  //····················································································································

  let mY_property = EBPropertyProxy_Int ()

  var mY_property_selection : EBSelection <Int> {
    switch (self.mY_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mRotation' stored property
  //····················································································································

  let mRotation_property = EBPropertyProxy_Int ()

  var mRotation_property_selection : EBSelection <Int> {
    switch (self.mRotation_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mSide' stored property
  //····················································································································

  let mSide_property = EBPropertyProxy_ComponentSide ()

  var mSide_property_selection : EBSelection <ComponentSide> {
    switch (self.mSide_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mDisplayLegend' stored property
  //····················································································································

  let mDisplayLegend_property = EBPropertyProxy_Bool ()

  var mDisplayLegend_property_selection : EBSelection <Bool> {
    switch (self.mDisplayLegend_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mNameIsVisibleInBoard' stored property
  //····················································································································

  let mNameIsVisibleInBoard_property = EBPropertyProxy_Bool ()

  var mNameIsVisibleInBoard_property_selection : EBSelection <Bool> {
    switch (self.mNameIsVisibleInBoard_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mXName' stored property
  //····················································································································

  let mXName_property = EBPropertyProxy_Int ()

  var mXName_property_selection : EBSelection <Int> {
    switch (self.mXName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mYName' stored property
  //····················································································································

  let mYName_property = EBPropertyProxy_Int ()

  var mYName_property_selection : EBSelection <Int> {
    switch (self.mYName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mNameFontSize' stored property
  //····················································································································

  let mNameFontSize_property = EBPropertyProxy_Double ()

  var mNameFontSize_property_selection : EBSelection <Double> {
    switch (self.mNameFontSize_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mNameRotation' stored property
  //····················································································································

  let mNameRotation_property = EBPropertyProxy_Int ()

  var mNameRotation_property_selection : EBSelection <Int> {
    switch (self.mNameRotation_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mValueIsVisibleInBoard' stored property
  //····················································································································

  let mValueIsVisibleInBoard_property = EBPropertyProxy_Bool ()

  var mValueIsVisibleInBoard_property_selection : EBSelection <Bool> {
    switch (self.mValueIsVisibleInBoard_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mXValue' stored property
  //····················································································································

  let mXValue_property = EBPropertyProxy_Int ()

  var mXValue_property_selection : EBSelection <Int> {
    switch (self.mXValue_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mYValue' stored property
  //····················································································································

  let mYValue_property = EBPropertyProxy_Int ()

  var mYValue_property_selection : EBSelection <Int> {
    switch (self.mYValue_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mValueFontSize' stored property
  //····················································································································

  let mValueFontSize_property = EBPropertyProxy_Double ()

  var mValueFontSize_property_selection : EBSelection <Double> {
    switch (self.mValueFontSize_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mValueRotation' stored property
  //····················································································································

  let mValueRotation_property = EBPropertyProxy_Int ()

  var mValueRotation_property_selection : EBSelection <Int> {
    switch (self.mValueRotation_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mComponentValue' stored property
  //····················································································································

  let mComponentValue_property = EBPropertyProxy_String ()

  var mComponentValue_property_selection : EBSelection <String> {
    switch (self.mComponentValue_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mNamePrefix' stored property
  //····················································································································

  let mNamePrefix_property = EBPropertyProxy_String ()

  var mNamePrefix_property_selection : EBSelection <String> {
    switch (self.mNamePrefix_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mNameIndex' stored property
  //····················································································································

  let mNameIndex_property = EBPropertyProxy_Int ()

  var mNameIndex_property_selection : EBSelection <Int> {
    switch (self.mNameIndex_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mXUnit' stored property
  //····················································································································

  let mXUnit_property = EBPropertyProxy_Int ()

  var mXUnit_property_selection : EBSelection <Int> {
    switch (self.mXUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mYUnit' stored property
  //····················································································································

  let mYUnit_property = EBPropertyProxy_Int ()

  var mYUnit_property_selection : EBSelection <Int> {
    switch (self.mYUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'deviceName' transient property
  //····················································································································

  let deviceName_property = EBTransientProperty_String ()

  var deviceName_property_selection : EBSelection <String> {
    switch (self.deviceName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'packagePadDictionary' transient property
  //····················································································································

  let packagePadDictionary_property = EBTransientProperty_PackageMasterPadDictionary ()

  var packagePadDictionary_property_selection : EBSelection <PackageMasterPadDictionary> {
    switch (self.packagePadDictionary_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'selectedPackageName' transient property
  //····················································································································

  let selectedPackageName_property = EBTransientProperty_String ()

  var selectedPackageName_property_selection : EBSelection <String> {
    switch (self.selectedPackageName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'availablePackages' transient property
  //····················································································································

  let availablePackages_property = EBTransientProperty_StringArray ()

  var availablePackages_property_selection : EBSelection <StringArray> {
    switch (self.availablePackages_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'issues' transient property
  //····················································································································

  let issues_property = EBTransientProperty_CanariIssueArray ()

  var issues_property_selection : EBSelection <CanariIssueArray> {
    switch (self.issues_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'componentIsPlacedInBoard' transient property
  //····················································································································

  let componentIsPlacedInBoard_property = EBTransientProperty_Bool ()

  var componentIsPlacedInBoard_property_selection : EBSelection <Bool> {
    switch (self.componentIsPlacedInBoard_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'componentIsPlacedInBoardString' transient property
  //····················································································································

  let componentIsPlacedInBoardString_property = EBTransientProperty_String ()

  var componentIsPlacedInBoardString_property_selection : EBSelection <String> {
    switch (self.componentIsPlacedInBoardString_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'strokeBezierPath' transient property
  //····················································································································

  let strokeBezierPath_property = EBTransientProperty_EBBezierPath ()

  var strokeBezierPath_property_selection : EBSelection <EBBezierPath> {
    switch (self.strokeBezierPath_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'pinPadAssignments' transient property
  //····················································································································

  let pinPadAssignments_property = EBTransientProperty_ThreeStringArray ()

  var pinPadAssignments_property_selection : EBSelection <ThreeStringArray> {
    switch (self.pinPadAssignments_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'placementInSchematic' transient property
  //····················································································································

  let placementInSchematic_property = EBTransientProperty_String ()

  var placementInSchematic_property_selection : EBSelection <String> {
    switch (self.placementInSchematic_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'deviceSymbolDictionary' transient property
  //····················································································································

  let deviceSymbolDictionary_property = EBTransientProperty_DeviceSymbolDictionary ()

  var deviceSymbolDictionary_property_selection : EBSelection <DeviceSymbolDictionary> {
    switch (self.deviceSymbolDictionary_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'componentNameFontName' transient property
  //····················································································································

  let componentNameFontName_property = EBTransientProperty_String ()

  var componentNameFontName_property_selection : EBSelection <String> {
    switch (self.componentNameFontName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'componentValueFontName' transient property
  //····················································································································

  let componentValueFontName_property = EBTransientProperty_String ()

  var componentValueFontName_property_selection : EBSelection <String> {
    switch (self.componentValueFontName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'componentPadDictionary' transient property
  //····················································································································

  let componentPadDictionary_property = EBTransientProperty_ComponentPadDescriptorDictionary ()

  var componentPadDictionary_property_selection : EBSelection <ComponentPadDescriptorDictionary> {
    switch (self.componentPadDictionary_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'padNetDictionary' transient property
  //····················································································································

  let padNetDictionary_property = EBTransientProperty_PadNetDictionary ()

  var padNetDictionary_property_selection : EBSelection <PadNetDictionary> {
    switch (self.padNetDictionary_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'componentName' transient property
  //····················································································································

  let componentName_property = EBTransientProperty_String ()

  var componentName_property_selection : EBSelection <String> {
    switch (self.componentName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'selectionDisplay' transient property
  //····················································································································

  let selectionDisplay_property = EBTransientProperty_EBShape ()

  var selectionDisplay_property_selection : EBSelection <EBShape> {
    switch (self.selectionDisplay_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'unplacedSymbols' transient property
  //····················································································································

  let unplacedSymbols_property = EBTransientProperty_StringTagArray ()

  var unplacedSymbols_property_selection : EBSelection <StringTagArray> {
    switch (self.unplacedSymbols_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'objectDisplay' transient property
  //····················································································································

  let objectDisplay_property = EBTransientProperty_EBShape ()

  var objectDisplay_property_selection : EBSelection <EBShape> {
    switch (self.objectDisplay_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observable toMany property: mConnectors
  //····················································································································

  private var mObserversOf_mConnectors = EBWeakEventSet ()

  //····················································································································

  var mConnectors_property_selection : EBSelection <[BoardConnector]> {
    if let model = self.propval {
      switch (model.mConnectors_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mConnectors (_ inObserver : EBEvent) {
    self.mObserversOf_mConnectors.insert (inObserver)
    if let object = self.propval {
      object.mConnectors_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mConnectors (_ inObserver : EBEvent) {
    self.mObserversOf_mConnectors.remove (inObserver)
    if let object = self.propval {
      object.mConnectors_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mSymbols
  //····················································································································

  private var mObserversOf_mSymbols = EBWeakEventSet ()

  //····················································································································

  var mSymbols_property_selection : EBSelection <[ComponentSymbolInProject]> {
    if let model = self.propval {
      switch (model.mSymbols_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbols (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbols.insert (inObserver)
    if let object = self.propval {
      object.mSymbols_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbols (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbols.remove (inObserver)
    if let object = self.propval {
      object.mSymbols_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    TransientObject ComponentInProject
//----------------------------------------------------------------------------------------------------------------------

class TransientObject_ComponentInProject : ReadOnlyObject_ComponentInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_ComponentInProject? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_ComponentInProject?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : ComponentInProject? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < ComponentInProject? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : ComponentInProject? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_ComponentInProject
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_ComponentInProject : ReadOnlyObject_ComponentInProject {

  //····················································································································
 
  func setProp (_ inValue : ComponentInProject?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_ComponentInProject
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_ComponentInProject : ReadWriteObject_ComponentInProject {

  //····················································································································

  private var mModel : ReadWriteObject_ComponentInProject? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_ComponentInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : ComponentInProject?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : ComponentInProject?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < ComponentInProject? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : ComponentInProject? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_ComponentInProject 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_ComponentInProject : ReadWriteObject_ComponentInProject, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ComponentInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ComponentInProject) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ComponentInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ComponentInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : ComponentInProject?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < ComponentInProject? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : ComponentInProject?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : ComponentInProject? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

