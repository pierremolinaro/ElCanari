//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_ComponentInProject 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_ComponentInProject : ReadOnlyAbstractObjectProperty <ComponentInProject> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : ComponentInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
  //--- Add observers to added objects
  }

  //····················································································································
  //   Observers of 'mSlavePadsShouldBeRouted' stored property
  //····················································································································

  private final var mSlavePadsShouldBeRouted_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mSlavePadsShouldBeRouted = EBWeakEventSet ()

  //····················································································································

  final var mSlavePadsShouldBeRouted_property_selection : EBSelection <Bool?> { // §
    return self.mSlavePadsShouldBeRouted_property.selection
/*    if let model = self.propval {
      switch (model.mSlavePadsShouldBeRouted_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mSlavePadsShouldBeRouted (_ inObserver : EBEvent) {
    self.mSlavePadsShouldBeRouted_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSlavePadsShouldBeRouted.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSlavePadsShouldBeRouted_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSlavePadsShouldBeRouted (_ inObserver : EBEvent) {
    self.mSlavePadsShouldBeRouted_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSlavePadsShouldBeRouted.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSlavePadsShouldBeRouted_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private final var mX_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  final var mX_property_selection : EBSelection <Int?> { // §
    return self.mX_property.selection
/*    if let model = self.propval {
      switch (model.mX_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mX (_ inObserver : EBEvent) {
    self.mX_property.addEBObserver (inObserver)
/*    self.mObserversOf_mX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mX_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mX (_ inObserver : EBEvent) {
    self.mX_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mX_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private final var mY_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mY = EBWeakEventSet ()

  //····················································································································

  final var mY_property_selection : EBSelection <Int?> { // §
    return self.mY_property.selection
/*    if let model = self.propval {
      switch (model.mY_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mY (_ inObserver : EBEvent) {
    self.mY_property.addEBObserver (inObserver)
/*    self.mObserversOf_mY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mY_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mY (_ inObserver : EBEvent) {
    self.mY_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mY_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mRotation' stored property
  //····················································································································

  private final var mRotation_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mRotation = EBWeakEventSet ()

  //····················································································································

  final var mRotation_property_selection : EBSelection <Int?> { // §
    return self.mRotation_property.selection
/*    if let model = self.propval {
      switch (model.mRotation_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mRotation (_ inObserver : EBEvent) {
    self.mRotation_property.addEBObserver (inObserver)
/*    self.mObserversOf_mRotation.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mRotation_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mRotation (_ inObserver : EBEvent) {
    self.mRotation_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mRotation.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mRotation_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mSide' stored property
  //····················································································································

  private final var mSide_property = EBGenericTransientProperty <ComponentSide?> ()
//  private final var mObserversOf_mSide = EBWeakEventSet ()

  //····················································································································

  final var mSide_property_selection : EBSelection <ComponentSide?> { // §
    return self.mSide_property.selection
/*    if let model = self.propval {
      switch (model.mSide_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mSide (_ inObserver : EBEvent) {
    self.mSide_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSide.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSide_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSide (_ inObserver : EBEvent) {
    self.mSide_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSide.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSide_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mDisplayLegend' stored property
  //····················································································································

  private final var mDisplayLegend_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mDisplayLegend = EBWeakEventSet ()

  //····················································································································

  final var mDisplayLegend_property_selection : EBSelection <Bool?> { // §
    return self.mDisplayLegend_property.selection
/*    if let model = self.propval {
      switch (model.mDisplayLegend_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mDisplayLegend (_ inObserver : EBEvent) {
    self.mDisplayLegend_property.addEBObserver (inObserver)
/*    self.mObserversOf_mDisplayLegend.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mDisplayLegend_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mDisplayLegend (_ inObserver : EBEvent) {
    self.mDisplayLegend_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mDisplayLegend.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mDisplayLegend_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mNameIsVisibleInBoard' stored property
  //····················································································································

  private final var mNameIsVisibleInBoard_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mNameIsVisibleInBoard = EBWeakEventSet ()

  //····················································································································

  final var mNameIsVisibleInBoard_property_selection : EBSelection <Bool?> { // §
    return self.mNameIsVisibleInBoard_property.selection
/*    if let model = self.propval {
      switch (model.mNameIsVisibleInBoard_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mNameIsVisibleInBoard (_ inObserver : EBEvent) {
    self.mNameIsVisibleInBoard_property.addEBObserver (inObserver)
/*    self.mObserversOf_mNameIsVisibleInBoard.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mNameIsVisibleInBoard_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mNameIsVisibleInBoard (_ inObserver : EBEvent) {
    self.mNameIsVisibleInBoard_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mNameIsVisibleInBoard.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mNameIsVisibleInBoard_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mXName' stored property
  //····················································································································

  private final var mXName_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mXName = EBWeakEventSet ()

  //····················································································································

  final var mXName_property_selection : EBSelection <Int?> { // §
    return self.mXName_property.selection
/*    if let model = self.propval {
      switch (model.mXName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mXName (_ inObserver : EBEvent) {
    self.mXName_property.addEBObserver (inObserver)
/*    self.mObserversOf_mXName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mXName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mXName (_ inObserver : EBEvent) {
    self.mXName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mXName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mXName_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mYName' stored property
  //····················································································································

  private final var mYName_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mYName = EBWeakEventSet ()

  //····················································································································

  final var mYName_property_selection : EBSelection <Int?> { // §
    return self.mYName_property.selection
/*    if let model = self.propval {
      switch (model.mYName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mYName (_ inObserver : EBEvent) {
    self.mYName_property.addEBObserver (inObserver)
/*    self.mObserversOf_mYName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mYName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mYName (_ inObserver : EBEvent) {
    self.mYName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mYName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mYName_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mNameFontSize' stored property
  //····················································································································

  private final var mNameFontSize_property = EBGenericTransientProperty <Double?> ()
//  private final var mObserversOf_mNameFontSize = EBWeakEventSet ()

  //····················································································································

  final var mNameFontSize_property_selection : EBSelection <Double?> { // §
    return self.mNameFontSize_property.selection
/*    if let model = self.propval {
      switch (model.mNameFontSize_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mNameFontSize (_ inObserver : EBEvent) {
    self.mNameFontSize_property.addEBObserver (inObserver)
/*    self.mObserversOf_mNameFontSize.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mNameFontSize_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mNameFontSize (_ inObserver : EBEvent) {
    self.mNameFontSize_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mNameFontSize.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mNameFontSize_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mNameRotation' stored property
  //····················································································································

  private final var mNameRotation_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mNameRotation = EBWeakEventSet ()

  //····················································································································

  final var mNameRotation_property_selection : EBSelection <Int?> { // §
    return self.mNameRotation_property.selection
/*    if let model = self.propval {
      switch (model.mNameRotation_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mNameRotation (_ inObserver : EBEvent) {
    self.mNameRotation_property.addEBObserver (inObserver)
/*    self.mObserversOf_mNameRotation.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mNameRotation_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mNameRotation (_ inObserver : EBEvent) {
    self.mNameRotation_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mNameRotation.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mNameRotation_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mValueIsVisibleInBoard' stored property
  //····················································································································

  private final var mValueIsVisibleInBoard_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mValueIsVisibleInBoard = EBWeakEventSet ()

  //····················································································································

  final var mValueIsVisibleInBoard_property_selection : EBSelection <Bool?> { // §
    return self.mValueIsVisibleInBoard_property.selection
/*    if let model = self.propval {
      switch (model.mValueIsVisibleInBoard_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mValueIsVisibleInBoard (_ inObserver : EBEvent) {
    self.mValueIsVisibleInBoard_property.addEBObserver (inObserver)
/*    self.mObserversOf_mValueIsVisibleInBoard.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mValueIsVisibleInBoard_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mValueIsVisibleInBoard (_ inObserver : EBEvent) {
    self.mValueIsVisibleInBoard_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mValueIsVisibleInBoard.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mValueIsVisibleInBoard_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mXValue' stored property
  //····················································································································

  private final var mXValue_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mXValue = EBWeakEventSet ()

  //····················································································································

  final var mXValue_property_selection : EBSelection <Int?> { // §
    return self.mXValue_property.selection
/*    if let model = self.propval {
      switch (model.mXValue_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mXValue (_ inObserver : EBEvent) {
    self.mXValue_property.addEBObserver (inObserver)
/*    self.mObserversOf_mXValue.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mXValue_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mXValue (_ inObserver : EBEvent) {
    self.mXValue_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mXValue.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mXValue_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mYValue' stored property
  //····················································································································

  private final var mYValue_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mYValue = EBWeakEventSet ()

  //····················································································································

  final var mYValue_property_selection : EBSelection <Int?> { // §
    return self.mYValue_property.selection
/*    if let model = self.propval {
      switch (model.mYValue_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mYValue (_ inObserver : EBEvent) {
    self.mYValue_property.addEBObserver (inObserver)
/*    self.mObserversOf_mYValue.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mYValue_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mYValue (_ inObserver : EBEvent) {
    self.mYValue_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mYValue.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mYValue_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mValueFontSize' stored property
  //····················································································································

  private final var mValueFontSize_property = EBGenericTransientProperty <Double?> ()
//  private final var mObserversOf_mValueFontSize = EBWeakEventSet ()

  //····················································································································

  final var mValueFontSize_property_selection : EBSelection <Double?> { // §
    return self.mValueFontSize_property.selection
/*    if let model = self.propval {
      switch (model.mValueFontSize_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mValueFontSize (_ inObserver : EBEvent) {
    self.mValueFontSize_property.addEBObserver (inObserver)
/*    self.mObserversOf_mValueFontSize.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mValueFontSize_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mValueFontSize (_ inObserver : EBEvent) {
    self.mValueFontSize_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mValueFontSize.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mValueFontSize_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mValueRotation' stored property
  //····················································································································

  private final var mValueRotation_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mValueRotation = EBWeakEventSet ()

  //····················································································································

  final var mValueRotation_property_selection : EBSelection <Int?> { // §
    return self.mValueRotation_property.selection
/*    if let model = self.propval {
      switch (model.mValueRotation_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mValueRotation (_ inObserver : EBEvent) {
    self.mValueRotation_property.addEBObserver (inObserver)
/*    self.mObserversOf_mValueRotation.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mValueRotation_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mValueRotation (_ inObserver : EBEvent) {
    self.mValueRotation_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mValueRotation.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mValueRotation_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mComponentValue' stored property
  //····················································································································

  private final var mComponentValue_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_mComponentValue = EBWeakEventSet ()

  //····················································································································

  final var mComponentValue_property_selection : EBSelection <String?> { // §
    return self.mComponentValue_property.selection
/*    if let model = self.propval {
      switch (model.mComponentValue_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mComponentValue (_ inObserver : EBEvent) {
    self.mComponentValue_property.addEBObserver (inObserver)
/*    self.mObserversOf_mComponentValue.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mComponentValue_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mComponentValue (_ inObserver : EBEvent) {
    self.mComponentValue_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mComponentValue.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mComponentValue_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mNamePrefix' stored property
  //····················································································································

  private final var mNamePrefix_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_mNamePrefix = EBWeakEventSet ()

  //····················································································································

  final var mNamePrefix_property_selection : EBSelection <String?> { // §
    return self.mNamePrefix_property.selection
/*    if let model = self.propval {
      switch (model.mNamePrefix_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mNamePrefix (_ inObserver : EBEvent) {
    self.mNamePrefix_property.addEBObserver (inObserver)
/*    self.mObserversOf_mNamePrefix.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mNamePrefix_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mNamePrefix (_ inObserver : EBEvent) {
    self.mNamePrefix_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mNamePrefix.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mNamePrefix_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mNameIndex' stored property
  //····················································································································

  private final var mNameIndex_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mNameIndex = EBWeakEventSet ()

  //····················································································································

  final var mNameIndex_property_selection : EBSelection <Int?> { // §
    return self.mNameIndex_property.selection
/*    if let model = self.propval {
      switch (model.mNameIndex_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mNameIndex (_ inObserver : EBEvent) {
    self.mNameIndex_property.addEBObserver (inObserver)
/*    self.mObserversOf_mNameIndex.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mNameIndex_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mNameIndex (_ inObserver : EBEvent) {
    self.mNameIndex_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mNameIndex.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mNameIndex_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mXUnit' stored property
  //····················································································································

  private final var mXUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mXUnit = EBWeakEventSet ()

  //····················································································································

  final var mXUnit_property_selection : EBSelection <Int?> { // §
    return self.mXUnit_property.selection
/*    if let model = self.propval {
      switch (model.mXUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mXUnit (_ inObserver : EBEvent) {
    self.mXUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mXUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mXUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mXUnit (_ inObserver : EBEvent) {
    self.mXUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mXUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mXUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mYUnit' stored property
  //····················································································································

  private final var mYUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mYUnit = EBWeakEventSet ()

  //····················································································································

  final var mYUnit_property_selection : EBSelection <Int?> { // §
    return self.mYUnit_property.selection
/*    if let model = self.propval {
      switch (model.mYUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mYUnit (_ inObserver : EBEvent) {
    self.mYUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mYUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mYUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mYUnit (_ inObserver : EBEvent) {
    self.mYUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mYUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mYUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'deviceName' transient property
  //····················································································································

  private final var deviceName_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_deviceName = EBWeakEventSet ()

  //····················································································································

  final var deviceName_property_selection : EBSelection <String?> {
    return self.deviceName_property.selection
/*    if let model = self.propval {
      switch (model.deviceName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_deviceName (_ inObserver : EBEvent) {
    self.deviceName_property.addEBObserver (inObserver)
/*    self.mObserversOf_deviceName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.deviceName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_deviceName (_ inObserver : EBEvent) {
    self.deviceName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_deviceName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.deviceName_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  private final var signatureForERCChecking_property = EBGenericTransientProperty <UInt32?> ()
//  private final var mObserversOf_signatureForERCChecking = EBWeakEventSet ()

  //····················································································································

  final var signatureForERCChecking_property_selection : EBSelection <UInt32?> {
    return self.signatureForERCChecking_property.selection
/*    if let model = self.propval {
      switch (model.signatureForERCChecking_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_signatureForERCChecking (_ inObserver : EBEvent) {
    self.signatureForERCChecking_property.addEBObserver (inObserver)
/*    self.mObserversOf_signatureForERCChecking.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.signatureForERCChecking_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_signatureForERCChecking (_ inObserver : EBEvent) {
    self.signatureForERCChecking_property.removeEBObserver (inObserver)
/*    self.mObserversOf_signatureForERCChecking.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.signatureForERCChecking_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'packagePadDictionary' transient property
  //····················································································································

  private final var packagePadDictionary_property = EBGenericTransientProperty <PackageMasterPadDictionary?> ()
//  private final var mObserversOf_packagePadDictionary = EBWeakEventSet ()

  //····················································································································

  final var packagePadDictionary_property_selection : EBSelection <PackageMasterPadDictionary?> {
    return self.packagePadDictionary_property.selection
/*    if let model = self.propval {
      switch (model.packagePadDictionary_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_packagePadDictionary (_ inObserver : EBEvent) {
    self.packagePadDictionary_property.addEBObserver (inObserver)
/*    self.mObserversOf_packagePadDictionary.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.packagePadDictionary_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_packagePadDictionary (_ inObserver : EBEvent) {
    self.packagePadDictionary_property.removeEBObserver (inObserver)
/*    self.mObserversOf_packagePadDictionary.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.packagePadDictionary_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'selectedPackageName' transient property
  //····················································································································

  private final var selectedPackageName_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_selectedPackageName = EBWeakEventSet ()

  //····················································································································

  final var selectedPackageName_property_selection : EBSelection <String?> {
    return self.selectedPackageName_property.selection
/*    if let model = self.propval {
      switch (model.selectedPackageName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_selectedPackageName (_ inObserver : EBEvent) {
    self.selectedPackageName_property.addEBObserver (inObserver)
/*    self.mObserversOf_selectedPackageName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedPackageName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_selectedPackageName (_ inObserver : EBEvent) {
    self.selectedPackageName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_selectedPackageName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedPackageName_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'availablePackages' transient property
  //····················································································································

  private final var availablePackages_property = EBGenericTransientProperty <StringArray?> ()
//  private final var mObserversOf_availablePackages = EBWeakEventSet ()

  //····················································································································

  final var availablePackages_property_selection : EBSelection <StringArray?> {
    return self.availablePackages_property.selection
/*    if let model = self.propval {
      switch (model.availablePackages_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_availablePackages (_ inObserver : EBEvent) {
    self.availablePackages_property.addEBObserver (inObserver)
/*    self.mObserversOf_availablePackages.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.availablePackages_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_availablePackages (_ inObserver : EBEvent) {
    self.availablePackages_property.removeEBObserver (inObserver)
/*    self.mObserversOf_availablePackages.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.availablePackages_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var issues_property = EBGenericTransientProperty <CanariIssueArray?> ()
//  private final var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final var issues_property_selection : EBSelection <CanariIssueArray?> {
    return self.issues_property.selection
/*    if let model = self.propval {
      switch (model.issues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.issues_property.addEBObserver (inObserver)
/*    self.mObserversOf_issues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.issues_property.removeEBObserver (inObserver)
/*    self.mObserversOf_issues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'componentIsPlacedInBoard' transient property
  //····················································································································

  private final var componentIsPlacedInBoard_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_componentIsPlacedInBoard = EBWeakEventSet ()

  //····················································································································

  final var componentIsPlacedInBoard_property_selection : EBSelection <Bool?> {
    return self.componentIsPlacedInBoard_property.selection
/*    if let model = self.propval {
      switch (model.componentIsPlacedInBoard_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_componentIsPlacedInBoard (_ inObserver : EBEvent) {
    self.componentIsPlacedInBoard_property.addEBObserver (inObserver)
/*    self.mObserversOf_componentIsPlacedInBoard.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.componentIsPlacedInBoard_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_componentIsPlacedInBoard (_ inObserver : EBEvent) {
    self.componentIsPlacedInBoard_property.removeEBObserver (inObserver)
/*    self.mObserversOf_componentIsPlacedInBoard.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.componentIsPlacedInBoard_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'componentIsPlacedInBoardString' transient property
  //····················································································································

  private final var componentIsPlacedInBoardString_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_componentIsPlacedInBoardString = EBWeakEventSet ()

  //····················································································································

  final var componentIsPlacedInBoardString_property_selection : EBSelection <String?> {
    return self.componentIsPlacedInBoardString_property.selection
/*    if let model = self.propval {
      switch (model.componentIsPlacedInBoardString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_componentIsPlacedInBoardString (_ inObserver : EBEvent) {
    self.componentIsPlacedInBoardString_property.addEBObserver (inObserver)
/*    self.mObserversOf_componentIsPlacedInBoardString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.componentIsPlacedInBoardString_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_componentIsPlacedInBoardString (_ inObserver : EBEvent) {
    self.componentIsPlacedInBoardString_property.removeEBObserver (inObserver)
/*    self.mObserversOf_componentIsPlacedInBoardString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.componentIsPlacedInBoardString_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'strokeBezierPath' transient property
  //····················································································································

  private final var strokeBezierPath_property = EBGenericTransientProperty <EBBezierPath?> ()
//  private final var mObserversOf_strokeBezierPath = EBWeakEventSet ()

  //····················································································································

  final var strokeBezierPath_property_selection : EBSelection <EBBezierPath?> {
    return self.strokeBezierPath_property.selection
/*    if let model = self.propval {
      switch (model.strokeBezierPath_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_strokeBezierPath (_ inObserver : EBEvent) {
    self.strokeBezierPath_property.addEBObserver (inObserver)
/*    self.mObserversOf_strokeBezierPath.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.strokeBezierPath_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_strokeBezierPath (_ inObserver : EBEvent) {
    self.strokeBezierPath_property.removeEBObserver (inObserver)
/*    self.mObserversOf_strokeBezierPath.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.strokeBezierPath_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'pinPadAssignments' transient property
  //····················································································································

  private final var pinPadAssignments_property = EBGenericTransientProperty <ThreeStringArray?> ()
//  private final var mObserversOf_pinPadAssignments = EBWeakEventSet ()

  //····················································································································

  final var pinPadAssignments_property_selection : EBSelection <ThreeStringArray?> {
    return self.pinPadAssignments_property.selection
/*    if let model = self.propval {
      switch (model.pinPadAssignments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_pinPadAssignments (_ inObserver : EBEvent) {
    self.pinPadAssignments_property.addEBObserver (inObserver)
/*    self.mObserversOf_pinPadAssignments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.pinPadAssignments_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_pinPadAssignments (_ inObserver : EBEvent) {
    self.pinPadAssignments_property.removeEBObserver (inObserver)
/*    self.mObserversOf_pinPadAssignments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.pinPadAssignments_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'hasSlavePads' transient property
  //····················································································································

  private final var hasSlavePads_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_hasSlavePads = EBWeakEventSet ()

  //····················································································································

  final var hasSlavePads_property_selection : EBSelection <Bool?> {
    return self.hasSlavePads_property.selection
/*    if let model = self.propval {
      switch (model.hasSlavePads_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_hasSlavePads (_ inObserver : EBEvent) {
    self.hasSlavePads_property.addEBObserver (inObserver)
/*    self.mObserversOf_hasSlavePads.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.hasSlavePads_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_hasSlavePads (_ inObserver : EBEvent) {
    self.hasSlavePads_property.removeEBObserver (inObserver)
/*    self.mObserversOf_hasSlavePads.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.hasSlavePads_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'placementInSchematic' transient property
  //····················································································································

  private final var placementInSchematic_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_placementInSchematic = EBWeakEventSet ()

  //····················································································································

  final var placementInSchematic_property_selection : EBSelection <String?> {
    return self.placementInSchematic_property.selection
/*    if let model = self.propval {
      switch (model.placementInSchematic_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_placementInSchematic (_ inObserver : EBEvent) {
    self.placementInSchematic_property.addEBObserver (inObserver)
/*    self.mObserversOf_placementInSchematic.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.placementInSchematic_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_placementInSchematic (_ inObserver : EBEvent) {
    self.placementInSchematic_property.removeEBObserver (inObserver)
/*    self.mObserversOf_placementInSchematic.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.placementInSchematic_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'deviceSymbolDictionary' transient property
  //····················································································································

  private final var deviceSymbolDictionary_property = EBGenericTransientProperty <DeviceSymbolDictionary?> ()
//  private final var mObserversOf_deviceSymbolDictionary = EBWeakEventSet ()

  //····················································································································

  final var deviceSymbolDictionary_property_selection : EBSelection <DeviceSymbolDictionary?> {
    return self.deviceSymbolDictionary_property.selection
/*    if let model = self.propval {
      switch (model.deviceSymbolDictionary_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_deviceSymbolDictionary (_ inObserver : EBEvent) {
    self.deviceSymbolDictionary_property.addEBObserver (inObserver)
/*    self.mObserversOf_deviceSymbolDictionary.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.deviceSymbolDictionary_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_deviceSymbolDictionary (_ inObserver : EBEvent) {
    self.deviceSymbolDictionary_property.removeEBObserver (inObserver)
/*    self.mObserversOf_deviceSymbolDictionary.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.deviceSymbolDictionary_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'componentNameFontName' transient property
  //····················································································································

  private final var componentNameFontName_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_componentNameFontName = EBWeakEventSet ()

  //····················································································································

  final var componentNameFontName_property_selection : EBSelection <String?> {
    return self.componentNameFontName_property.selection
/*    if let model = self.propval {
      switch (model.componentNameFontName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_componentNameFontName (_ inObserver : EBEvent) {
    self.componentNameFontName_property.addEBObserver (inObserver)
/*    self.mObserversOf_componentNameFontName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.componentNameFontName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_componentNameFontName (_ inObserver : EBEvent) {
    self.componentNameFontName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_componentNameFontName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.componentNameFontName_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'componentValueFontName' transient property
  //····················································································································

  private final var componentValueFontName_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_componentValueFontName = EBWeakEventSet ()

  //····················································································································

  final var componentValueFontName_property_selection : EBSelection <String?> {
    return self.componentValueFontName_property.selection
/*    if let model = self.propval {
      switch (model.componentValueFontName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_componentValueFontName (_ inObserver : EBEvent) {
    self.componentValueFontName_property.addEBObserver (inObserver)
/*    self.mObserversOf_componentValueFontName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.componentValueFontName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_componentValueFontName (_ inObserver : EBEvent) {
    self.componentValueFontName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_componentValueFontName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.componentValueFontName_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'componentPadDictionary' transient property
  //····················································································································

  private final var componentPadDictionary_property = EBGenericTransientProperty <ComponentPadDescriptorDictionary?> ()
//  private final var mObserversOf_componentPadDictionary = EBWeakEventSet ()

  //····················································································································

  final var componentPadDictionary_property_selection : EBSelection <ComponentPadDescriptorDictionary?> {
    return self.componentPadDictionary_property.selection
/*    if let model = self.propval {
      switch (model.componentPadDictionary_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_componentPadDictionary (_ inObserver : EBEvent) {
    self.componentPadDictionary_property.addEBObserver (inObserver)
/*    self.mObserversOf_componentPadDictionary.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.componentPadDictionary_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_componentPadDictionary (_ inObserver : EBEvent) {
    self.componentPadDictionary_property.removeEBObserver (inObserver)
/*    self.mObserversOf_componentPadDictionary.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.componentPadDictionary_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'padNetDictionary' transient property
  //····················································································································

  private final var padNetDictionary_property = EBGenericTransientProperty <PadNetDictionary?> ()
//  private final var mObserversOf_padNetDictionary = EBWeakEventSet ()

  //····················································································································

  final var padNetDictionary_property_selection : EBSelection <PadNetDictionary?> {
    return self.padNetDictionary_property.selection
/*    if let model = self.propval {
      switch (model.padNetDictionary_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_padNetDictionary (_ inObserver : EBEvent) {
    self.padNetDictionary_property.addEBObserver (inObserver)
/*    self.mObserversOf_padNetDictionary.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padNetDictionary_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_padNetDictionary (_ inObserver : EBEvent) {
    self.padNetDictionary_property.removeEBObserver (inObserver)
/*    self.mObserversOf_padNetDictionary.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padNetDictionary_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'componentName' transient property
  //····················································································································

  private final var componentName_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_componentName = EBWeakEventSet ()

  //····················································································································

  final var componentName_property_selection : EBSelection <String?> {
    return self.componentName_property.selection
/*    if let model = self.propval {
      switch (model.componentName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_componentName (_ inObserver : EBEvent) {
    self.componentName_property.addEBObserver (inObserver)
/*    self.mObserversOf_componentName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.componentName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_componentName (_ inObserver : EBEvent) {
    self.componentName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_componentName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.componentName_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var selectionDisplay_property = EBGenericTransientProperty <EBShape?> ()
//  private final var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final var selectionDisplay_property_selection : EBSelection <EBShape?> {
    return self.selectionDisplay_property.selection
/*    if let model = self.propval {
      switch (model.selectionDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.selectionDisplay_property.addEBObserver (inObserver)
/*    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.selectionDisplay_property.removeEBObserver (inObserver)
/*    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'unplacedSymbols' transient property
  //····················································································································

  private final var unplacedSymbols_property = EBGenericTransientProperty <StringTagArray?> ()
//  private final var mObserversOf_unplacedSymbols = EBWeakEventSet ()

  //····················································································································

  final var unplacedSymbols_property_selection : EBSelection <StringTagArray?> {
    return self.unplacedSymbols_property.selection
/*    if let model = self.propval {
      switch (model.unplacedSymbols_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.unplacedSymbols_property.addEBObserver (inObserver)
/*    self.mObserversOf_unplacedSymbols.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.unplacedSymbols_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.unplacedSymbols_property.removeEBObserver (inObserver)
/*    self.mObserversOf_unplacedSymbols.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.unplacedSymbols_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var objectDisplay_property = EBGenericTransientProperty <EBShape?> ()
//  private final var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final var objectDisplay_property_selection : EBSelection <EBShape?> {
    return self.objectDisplay_property.selection
/*    if let model = self.propval {
      switch (model.objectDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.objectDisplay_property.addEBObserver (inObserver)
/*    self.mObserversOf_objectDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.objectDisplay_property.removeEBObserver (inObserver)
/*    self.mObserversOf_objectDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observable toMany property: mConnectors
  //····················································································································

  private final var mObserversOf_mConnectors = EBWeakEventSet ()

  //····················································································································

  final var mConnectors_property_selection : EBSelection <[BoardConnector]> {
    if let model = self.propval {
      switch (model.mConnectors_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mConnectors (_ inObserver : EBEvent) {
    self.mObserversOf_mConnectors.insert (inObserver)
    if let object = self.propval {
      object.mConnectors_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mConnectors (_ inObserver : EBEvent) {
    self.mObserversOf_mConnectors.remove (inObserver)
    if let object = self.propval {
      object.mConnectors_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mSymbols
  //····················································································································

  private final var mObserversOf_mSymbols = EBWeakEventSet ()

  //····················································································································

  final var mSymbols_property_selection : EBSelection <[ComponentSymbolInProject]> {
    if let model = self.propval {
      switch (model.mSymbols_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbols (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbols.insert (inObserver)
    if let object = self.propval {
      object.mSymbols_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbols (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbols.remove (inObserver)
    if let object = self.propval {
      object.mSymbols_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT 
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mSlavePadsShouldBeRouted simple stored property
    self.mSlavePadsShouldBeRouted_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSlavePadsShouldBeRouted_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mSlavePadsShouldBeRouted_property)
  //--- Configure mX simple stored property
    self.mX_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mX_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mX_property)
  //--- Configure mY simple stored property
    self.mY_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mY_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mY_property)
  //--- Configure mRotation simple stored property
    self.mRotation_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mRotation_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mRotation_property)
  //--- Configure mSide simple stored property
    self.mSide_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSide_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mSide_property)
  //--- Configure mDisplayLegend simple stored property
    self.mDisplayLegend_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mDisplayLegend_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mDisplayLegend_property)
  //--- Configure mNameIsVisibleInBoard simple stored property
    self.mNameIsVisibleInBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mNameIsVisibleInBoard_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mNameIsVisibleInBoard_property)
  //--- Configure mXName simple stored property
    self.mXName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mXName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mXName_property)
  //--- Configure mYName simple stored property
    self.mYName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mYName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mYName_property)
  //--- Configure mNameFontSize simple stored property
    self.mNameFontSize_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mNameFontSize_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mNameFontSize_property)
  //--- Configure mNameRotation simple stored property
    self.mNameRotation_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mNameRotation_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mNameRotation_property)
  //--- Configure mValueIsVisibleInBoard simple stored property
    self.mValueIsVisibleInBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mValueIsVisibleInBoard_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mValueIsVisibleInBoard_property)
  //--- Configure mXValue simple stored property
    self.mXValue_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mXValue_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mXValue_property)
  //--- Configure mYValue simple stored property
    self.mYValue_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mYValue_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mYValue_property)
  //--- Configure mValueFontSize simple stored property
    self.mValueFontSize_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mValueFontSize_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mValueFontSize_property)
  //--- Configure mValueRotation simple stored property
    self.mValueRotation_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mValueRotation_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mValueRotation_property)
  //--- Configure mComponentValue simple stored property
    self.mComponentValue_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mComponentValue_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mComponentValue_property)
  //--- Configure mNamePrefix simple stored property
    self.mNamePrefix_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mNamePrefix_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mNamePrefix_property)
  //--- Configure mNameIndex simple stored property
    self.mNameIndex_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mNameIndex_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mNameIndex_property)
  //--- Configure mXUnit simple stored property
    self.mXUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mXUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mXUnit_property)
  //--- Configure mYUnit simple stored property
    self.mYUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mYUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mYUnit_property)
  //--- Configure deviceName transient property
    self.deviceName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.deviceName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.deviceName_property)
  //--- Configure signatureForERCChecking transient property
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.signatureForERCChecking_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.signatureForERCChecking_property)
  //--- Configure packagePadDictionary transient property
    self.packagePadDictionary_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.packagePadDictionary_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.packagePadDictionary_property)
  //--- Configure selectedPackageName transient property
    self.selectedPackageName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.selectedPackageName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.selectedPackageName_property)
  //--- Configure availablePackages transient property
    self.availablePackages_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.availablePackages_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.availablePackages_property)
  //--- Configure issues transient property
    self.issues_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.issues_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.issues_property)
  //--- Configure componentIsPlacedInBoard transient property
    self.componentIsPlacedInBoard_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.componentIsPlacedInBoard_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.componentIsPlacedInBoard_property)
  //--- Configure componentIsPlacedInBoardString transient property
    self.componentIsPlacedInBoardString_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.componentIsPlacedInBoardString_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.componentIsPlacedInBoardString_property)
  //--- Configure strokeBezierPath transient property
    self.strokeBezierPath_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.strokeBezierPath_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.strokeBezierPath_property)
  //--- Configure pinPadAssignments transient property
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.pinPadAssignments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.pinPadAssignments_property)
  //--- Configure hasSlavePads transient property
    self.hasSlavePads_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.hasSlavePads_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.hasSlavePads_property)
  //--- Configure placementInSchematic transient property
    self.placementInSchematic_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.placementInSchematic_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.placementInSchematic_property)
  //--- Configure deviceSymbolDictionary transient property
    self.deviceSymbolDictionary_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.deviceSymbolDictionary_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.deviceSymbolDictionary_property)
  //--- Configure componentNameFontName transient property
    self.componentNameFontName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.componentNameFontName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.componentNameFontName_property)
  //--- Configure componentValueFontName transient property
    self.componentValueFontName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.componentValueFontName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.componentValueFontName_property)
  //--- Configure componentPadDictionary transient property
    self.componentPadDictionary_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.componentPadDictionary_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.componentPadDictionary_property)
  //--- Configure padNetDictionary transient property
    self.padNetDictionary_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.padNetDictionary_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.padNetDictionary_property)
  //--- Configure componentName transient property
    self.componentName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.componentName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.componentName_property)
  //--- Configure selectionDisplay transient property
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.selectionDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.selectionDisplay_property)
  //--- Configure unplacedSymbols transient property
    self.unplacedSymbols_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.unplacedSymbols_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.unplacedSymbols_property)
  //--- Configure objectDisplay transient property
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.objectDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.objectDisplay_property)
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject ComponentInProject
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_ComponentInProject : ReadOnlyObject_ComponentInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_ComponentInProject? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_ComponentInProject?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : ComponentInProject? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < ComponentInProject? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : ComponentInProject? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_ComponentInProject
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_ComponentInProject : ReadOnlyObject_ComponentInProject {

  //····················································································································
 
  func setProp (_ inValue : ComponentInProject?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_ComponentInProject
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_ComponentInProject : ReadWriteObject_ComponentInProject {

  //····················································································································

  private var mModel : ReadWriteObject_ComponentInProject? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_ComponentInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : ComponentInProject?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : ComponentInProject?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < ComponentInProject? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : ComponentInProject? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_ComponentInProject 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_ComponentInProject : ReadWriteObject_ComponentInProject, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ComponentInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ComponentInProject) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ComponentInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ComponentInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : ComponentInProject?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < ComponentInProject? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : ComponentInProject?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : ComponentInProject? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

