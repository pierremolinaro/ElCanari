//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol LabelInSchematics_mOrientation : class {
  var mOrientation : QuadrantRotation { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol LabelInSchematics_location : class {
  var location : CanariPoint? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol LabelInSchematics_netName : class {
  var netName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol LabelInSchematics_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol LabelInSchematics_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: LabelInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class LabelInSchematics : SchematicsObject,
         LabelInSchematics_mOrientation,
         LabelInSchematics_location,
         LabelInSchematics_netName,
         LabelInSchematics_objectDisplay,
         LabelInSchematics_selectionDisplay {

  //····················································································································
  //   Atomic property: mOrientation
  //····················································································································

  let mOrientation_property = EBStoredProperty_QuadrantRotation (defaultValue: QuadrantRotation.rotation0)

  //····················································································································

  var mOrientation : QuadrantRotation {
    get { return self.mOrientation_property.propval }
    set { self.mOrientation_property.setProp (newValue) }
  }

  //····················································································································

  var mOrientation_property_selection : EBSelection <QuadrantRotation> { return self.mOrientation_property.prop }

  //····················································································································
  //   To one property: mPoint
  //····················································································································

  //  #if NEWTOONE
     let mPoint_property = StoredObject_PointInSchematics ()
  //  #else
  //    let mPoint_property = ToOneRelationship_LabelInSchematics_mPoint ()
  //  #endif

  //····················································································································

  var mPoint_property_selection : EBSelection <PointInSchematics?> {
    return .single (self.mPoint_property.propval)
  }

  //····················································································································

  var mPoint : PointInSchematics? {
    get { return self.mPoint_property.propval }
    set { self.mPoint_property.setProp (newValue) }
  }

  //····················································································································

  //  #if NEWTOONE
      var mPoint_none : StoredObject_PointInSchematics { return self.mPoint_property }
  //  #else
  //    var mPoint_none : ToOneRelationship_LabelInSchematics_mPoint { return self.mPoint_property }
  //  #endif

  //····················································································································

  var mPoint_none_selection : EBSelection <Bool> {
    return .single (self.mPoint_property.propval == nil)
  }

  //····················································································································
  //   Transient property: location
  //····················································································································

  let location_property = EBTransientProperty_CanariPoint ()

  //····················································································································

  var location_property_selection : EBSelection <CanariPoint> {
    return self.location_property.prop
  }

  //····················································································································

  var location : CanariPoint? {
    switch self.location_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netName
  //····················································································································

  let netName_property = EBTransientProperty_String ()

  //····················································································································

  var netName_property_selection : EBSelection <String> {
    return self.netName_property.prop
  }

  //····················································································································

  var netName : String? {
    switch self.netName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mOrientation
    self.mOrientation_property.ebUndoManager = self.ebUndoManager
  //--- To one property: mPoint (has opposite to many relationship: mLabels) §
  //  #if !NEWTOONE
  //    self.mPoint_property.owner = self
  //  #else
      self.mPoint_property.ebUndoManager = self.ebUndoManager
  //  #endif
  //--- Atomic property: location
    self.location_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mPoint_property.location_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mPoint_property.location_property_selection) {
          case (.single (let v0)) :
            return .single (transient_LabelInSchematics_location (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPoint_property.addEBObserverOf_location (self.location_property)
  //--- Atomic property: netName
    self.netName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mPoint_property.netName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mPoint_property.netName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_LabelInSchematics_netName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPoint_property.addEBObserverOf_netName (self.netName_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = g_Preferences!.symbolColorForSchematic_property_selection.kind ()
        kind &= g_Preferences!.symbolDrawingWidthMultipliedByTen_property_selection.kind ()
        kind &= unwSelf.mPoint_property.location_property_selection.kind ()
        kind &= unwSelf.netName_property_selection.kind ()
        kind &= g_Preferences!.pinNameFont_property_selection.kind ()
        kind &= unwSelf.mOrientation_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (g_Preferences!.symbolColorForSchematic_property_selection, g_Preferences!.symbolDrawingWidthMultipliedByTen_property_selection, unwSelf.mPoint_property.location_property_selection, unwSelf.netName_property_selection, g_Preferences!.pinNameFont_property_selection, unwSelf.mOrientation_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5)) :
            return .single (transient_LabelInSchematics_objectDisplay (v0, v1, v2, v3, v4, v5))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    g_Preferences?.symbolColorForSchematic_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.symbolDrawingWidthMultipliedByTen_property.addEBObserver (self.objectDisplay_property)
    self.mPoint_property.addEBObserverOf_location (self.objectDisplay_property)
    self.netName_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.pinNameFont_property.addEBObserver (self.objectDisplay_property)
    self.mOrientation_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mPoint_property.location_property_selection.kind ()
        kind &= unwSelf.netName_property_selection.kind ()
        kind &= g_Preferences!.pinNameFont_property_selection.kind ()
        kind &= unwSelf.mOrientation_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mPoint_property.location_property_selection, unwSelf.netName_property_selection, g_Preferences!.pinNameFont_property_selection, unwSelf.mOrientation_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_LabelInSchematics_selectionDisplay (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPoint_property.addEBObserverOf_location (self.selectionDisplay_property)
    self.netName_property.addEBObserver (self.selectionDisplay_property)
    g_Preferences?.pinNameFont_property.addEBObserver (self.selectionDisplay_property)
    self.mOrientation_property.addEBObserver (self.selectionDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mPoint_property.removeEBObserverOf_location (self.location_property)
    self.mPoint_property.removeEBObserverOf_netName (self.netName_property)
    g_Preferences?.symbolColorForSchematic_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.symbolDrawingWidthMultipliedByTen_property.removeEBObserver (self.objectDisplay_property)
    self.mPoint_property.removeEBObserverOf_location (self.objectDisplay_property)
    self.netName_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.pinNameFont_property.removeEBObserver (self.objectDisplay_property)
    self.mOrientation_property.removeEBObserver (self.objectDisplay_property)
    self.mPoint_property.removeEBObserverOf_location (self.selectionDisplay_property)
    self.netName_property.removeEBObserver (self.selectionDisplay_property)
    g_Preferences?.pinNameFont_property.removeEBObserver (self.selectionDisplay_property)
    self.mOrientation_property.removeEBObserver (self.selectionDisplay_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mOrientation",
      idx:self.mOrientation_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mOrientation_property.mObserverExplorer,
      valueExplorer:&self.mOrientation_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "location",
      idx:self.location_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.location_property.mObserverExplorer,
      valueExplorer:&self.location_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netName",
      idx:self.netName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.netName_property.mObserverExplorer,
      valueExplorer:&self.netName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx:self.objectDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.objectDisplay_property.mObserverExplorer,
      valueExplorer:&self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx:self.selectionDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectionDisplay_property.mObserverExplorer,
      valueExplorer:&self.selectionDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "mPoint",
      idx:self.mPoint_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mPoint_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mOrientation
    self.mOrientation_property.mObserverExplorer = nil
    self.mOrientation_property.mValueExplorer = nil
  //--- To one property: mPoint
    self.mPoint_property.mObserverExplorer = nil
    self.mPoint_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mPoint_property.setProp (nil)
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mOrientation
    self.mOrientation_property.storeIn (dictionary: ioDictionary, forKey:"mOrientation")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To one property: mPoint
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mPoint",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? PointInSchematics {
        self.mPoint_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mOrientation
    self.mOrientation_property.readFrom (dictionary: inDictionary, forKey:"mOrientation")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To one property: mPoint
    if let managedObject = self.mPoint_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To one property: mPoint
    if let managedObject = self.mPoint_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_LabelInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_LabelInSchematics : ReadOnlyAbstractArrayProperty <LabelInSchematics> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <LabelInSchematics>, addedSet inAddedSet : Set <LabelInSchematics>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_mOrientation_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_location_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_netName_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_objectDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_mOrientation_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_location_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_netName_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_objectDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_selectionDisplay_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'mOrientation' stored property
  //····················································································································

  private var mObserversOf_mOrientation = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mOrientation (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mOrientation.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mOrientation_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mOrientation (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mOrientation.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mOrientation_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mOrientation_toElementsOfSet (_ inSet : Set<LabelInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_mOrientation.apply { (_ observer : EBEvent) in
        managedObject.mOrientation_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mOrientation_fromElementsOfSet (_ inSet : Set<LabelInSchematics>) {
    self.mObserversOf_mOrientation.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mOrientation_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'location' transient property
  //····················································································································

  private var mObserversOf_location = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_location (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_location.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.location_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_location (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_location.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.location_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_location_toElementsOfSet (_ inSet : Set<LabelInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_location.apply { (_ observer : EBEvent) in
        managedObject.location_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_location_fromElementsOfSet (_ inSet : Set<LabelInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_location.apply { (_ observer : EBEvent) in
        managedObject.location_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netName' transient property
  //····················································································································

  private var mObserversOf_netName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netName_toElementsOfSet (_ inSet : Set<LabelInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_netName.apply { (_ observer : EBEvent) in
        managedObject.netName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netName_fromElementsOfSet (_ inSet : Set<LabelInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_netName.apply { (_ observer : EBEvent) in
        managedObject.netName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<LabelInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<LabelInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<LabelInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<LabelInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf LabelInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_LabelInSchematics : ReadOnlyArrayOf_LabelInSchematics {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_LabelInSchematics? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_LabelInSchematics?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newArray : [LabelInSchematics] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newArray = v
        self.mTransientKind = .single
       case .multiple :
        newArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newArray = []
      self.mTransientKind = .empty
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [LabelInSchematics] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [LabelInSchematics] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf LabelInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_LabelInSchematics <SUPER : EBManagedObject> : ReadOnlyArrayOf_LabelInSchematics {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    var newModelArray : [SUPER] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newModelArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newModelArray = v
        self.mTransientKind = .single
       case .multiple :
        newModelArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newModelArray = []
      self.mTransientKind = .empty
    }
    var newArray = [LabelInSchematics] ()
    for superObject in newModelArray {
      if let object = superObject as? LabelInSchematics {
        newArray.append (object)
      }
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [LabelInSchematics] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [LabelInSchematics] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: LabelInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_LabelInSchematics : ReadOnlyArrayOf_LabelInSchematics {

  //····················································································································
 
  func setProp (_ value :  [LabelInSchematics]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_LabelInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_LabelInSchematics : ReadWriteArrayOf_LabelInSchematics {

  //····················································································································

  private var mModel : ReadWriteArrayOf_LabelInSchematics? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_LabelInSchematics?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [LabelInSchematics]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [LabelInSchematics]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [LabelInSchematics] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : [LabelInSchematics] {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: LabelInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_LabelInSchematics : ReadWriteArrayOf_LabelInSchematics, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : LabelInSchematics) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : LabelInSchematics) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : LabelInSchematics) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : LabelInSchematics) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  //  Init
  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [LabelInSchematics] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "LabelInSchematics") as? LabelInSchematics {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [LabelInSchematics]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [LabelInSchematics]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //--- Write in preferences ?
    self.writeInPreferences ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <LabelInSchematics>, addedSet inAddedSet : Set <LabelInSchematics>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //---
    for managedObject in inRemovedSet {
      managedObject.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (managedObject)
    }
  //---
    for managedObject in inAddedSet {
      managedObject.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (managedObject)
    }
  }
 
  //····················································································································

  override var prop : EBSelection < [LabelInSchematics] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [LabelInSchematics]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [LabelInSchematics] { return self.mInternalArrayValue }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mInternalArrayValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  func remove (_ object : LabelInSchematics) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : LabelInSchematics) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mInternalArrayValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_LabelInSchematics 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_LabelInSchematics : ReadOnlyAbstractObjectProperty <LabelInSchematics> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : LabelInSchematics?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.mOrientation_property.removeEBObserversFrom (&self.mObserversOf_mOrientation) // Stored property
    inOldValue?.location_property.removeEBObserversFrom (&self.mObserversOf_location) // Transient property
    inOldValue?.netName_property.removeEBObserversFrom (&self.mObserversOf_netName) // Transient property
    inOldValue?.objectDisplay_property.removeEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
    inOldValue?.selectionDisplay_property.removeEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.mOrientation_property.addEBObserversFrom (&self.mObserversOf_mOrientation) // Stored property
    self.mInternalValue?.location_property.addEBObserversFrom (&self.mObserversOf_location) // Transient property
    self.mInternalValue?.netName_property.addEBObserversFrom (&self.mObserversOf_netName) // Transient property
    self.mInternalValue?.objectDisplay_property.addEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
    self.mInternalValue?.selectionDisplay_property.addEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
  }

  //····················································································································
  //   Observers of 'mOrientation' stored property
  //····················································································································

  private var mObserversOf_mOrientation = EBWeakEventSet ()

  //····················································································································

  var mOrientation_property_selection : EBSelection <QuadrantRotation?> {
    if let model = self.propval {
      switch (model.mOrientation_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mOrientation (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mOrientation.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mOrientation_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mOrientation (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mOrientation.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mOrientation_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mOrientation_toElementsOfSet (_ inSet : Set<LabelInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_mOrientation.apply { (_ observer : EBEvent) in
        managedObject.mOrientation_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mOrientation_fromElementsOfSet (_ inSet : Set<LabelInSchematics>) {
    self.mObserversOf_mOrientation.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mOrientation_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'location' transient property
  //····················································································································

  private var mObserversOf_location = EBWeakEventSet ()

  //····················································································································

  var location_property_selection : EBSelection <CanariPoint?> {
    if let model = self.propval {
      switch (model.location_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_location (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_location.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.location_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_location (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_location.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.location_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_location_toElementsOfSet (_ inSet : Set<LabelInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_location.apply { (_ observer : EBEvent) in
        managedObject.location_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_location_fromElementsOfSet (_ inSet : Set<LabelInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_location.apply { (_ observer : EBEvent) in
        managedObject.location_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netName' transient property
  //····················································································································

  private var mObserversOf_netName = EBWeakEventSet ()

  //····················································································································

  var netName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.netName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_netName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_netName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_netName_toElementsOfSet (_ inSet : Set<LabelInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_netName.apply { (_ observer : EBEvent) in
        managedObject.netName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netName_fromElementsOfSet (_ inSet : Set<LabelInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_netName.apply { (_ observer : EBEvent) in
        managedObject.netName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  var objectDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.objectDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<LabelInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<LabelInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  var selectionDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.selectionDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<LabelInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<LabelInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientObject LabelInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientObject_LabelInSchematics : ReadOnlyObject_LabelInSchematics {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_LabelInSchematics? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_LabelInSchematics?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : LabelInSchematics? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < LabelInSchematics? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : LabelInSchematics? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_LabelInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_LabelInSchematics : ReadOnlyObject_LabelInSchematics {

  //····················································································································
 
  func setProp (_ inValue : LabelInSchematics?) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_LabelInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_LabelInSchematics : ReadWriteObject_LabelInSchematics {

  //····················································································································

  private var mModel : ReadWriteObject_LabelInSchematics? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_LabelInSchematics?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : LabelInSchematics?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : LabelInSchematics?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < LabelInSchematics? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : LabelInSchematics? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_LabelInSchematics 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_LabelInSchematics : ReadWriteObject_LabelInSchematics, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : LabelInSchematics) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : LabelInSchematics) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : LabelInSchematics) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : LabelInSchematics) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : LabelInSchematics?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    if let object = inOldValue {
      object.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      object.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : LabelInSchematics?) {
    self.mInternalValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < LabelInSchematics? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : LabelInSchematics?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : LabelInSchematics? { return self.mInternalValue }

  //····················································································································

  func remove (_ object : LabelInSchematics) {
    if object === self.mInternalValue {
      self.mInternalValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : LabelInSchematics) {
    if object !== self.mInternalValue {
      self.mInternalValue = object
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    self.mInternalValue?.setSignatureObserver (observer: observer)
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
