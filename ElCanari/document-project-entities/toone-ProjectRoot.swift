//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_ProjectRoot 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_ProjectRoot : ReadOnlyAbstractObjectProperty <ProjectRoot> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : ProjectRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.mBoardLimitsWidth_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitsWidth) // Stored property
    inOldValue?.mBoardLimitsWidthUnit_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitsWidthUnit) // Stored property
    inOldValue?.mBoardLimitsSelectedInspector_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitsSelectedInspector) // Stored property
    inOldValue?.mBoardLimitsHorizontalFlip_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitsHorizontalFlip) // Stored property
    inOldValue?.mBoardLimitsVerticalFlip_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitsVerticalFlip) // Stored property
    inOldValue?.mBoardLimitsGridStyle_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitsGridStyle) // Stored property
    inOldValue?.mBoardLimitsGridDisplayFactor_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitsGridDisplayFactor) // Stored property
    inOldValue?.mBoardLimitsZoom_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitsZoom) // Stored property
    inOldValue?.mBoardLimitsGridStep_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitsGridStep) // Stored property
    inOldValue?.mBoardLimitsGridStepUnit_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitsGridStepUnit) // Stored property
    inOldValue?.mBoardLimitsBoundingBoxUnit_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitsBoundingBoxUnit) // Stored property
    inOldValue?.mBoardPointsBoundingBoxUnit_property.removeEBObserversFrom (&self.mObserversOf_mBoardPointsBoundingBoxUnit) // Stored property
    inOldValue?.mBoardSelectedCurveDisplayUnit_property.removeEBObserversFrom (&self.mObserversOf_mBoardSelectedCurveDisplayUnit) // Stored property
    inOldValue?.mSelectedPageIndex_property.removeEBObserversFrom (&self.mObserversOf_mSelectedPageIndex) // Stored property
    inOldValue?.mSelectedSchematicInspector_property.removeEBObserversFrom (&self.mObserversOf_mSelectedSchematicInspector) // Stored property
    inOldValue?.mSchematicTitle_property.removeEBObserversFrom (&self.mObserversOf_mSchematicTitle) // Stored property
    inOldValue?.mSchematicVersion_property.removeEBObserversFrom (&self.mObserversOf_mSchematicVersion) // Stored property
    inOldValue?.mSchematicDate_property.removeEBObserversFrom (&self.mObserversOf_mSchematicDate) // Stored property
    inOldValue?.mSchematicHorizontalFlip_property.removeEBObserversFrom (&self.mObserversOf_mSchematicHorizontalFlip) // Stored property
    inOldValue?.mSchematicVerticalFlip_property.removeEBObserversFrom (&self.mObserversOf_mSchematicVerticalFlip) // Stored property
    inOldValue?.mSchematicZoom_property.removeEBObserversFrom (&self.mObserversOf_mSchematicZoom) // Stored property
    inOldValue?.mSchematicGridStyle_property.removeEBObserversFrom (&self.mObserversOf_mSchematicGridStyle) // Stored property
    inOldValue?.mSchematicGridDisplayFactor_property.removeEBObserversFrom (&self.mObserversOf_mSchematicGridDisplayFactor) // Stored property
    inOldValue?.mSchematicSheetOrientation_property.removeEBObserversFrom (&self.mObserversOf_mSchematicSheetOrientation) // Stored property
    inOldValue?.boardLimitsGridStepMultipliedByDisplayFactor_property.removeEBObserversFrom (&self.mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor) // Transient property
    inOldValue?.boardLimitPointsTop_property.removeEBObserversFrom (&self.mObserversOf_boardLimitPointsTop) // Transient property
    inOldValue?.boardLimitPointsBottom_property.removeEBObserversFrom (&self.mObserversOf_boardLimitPointsBottom) // Transient property
    inOldValue?.boardLimitPointsLeft_property.removeEBObserversFrom (&self.mObserversOf_boardLimitPointsLeft) // Transient property
    inOldValue?.boardLimitPointsRight_property.removeEBObserversFrom (&self.mObserversOf_boardLimitPointsRight) // Transient property
    inOldValue?.boardLimitBorderTop_property.removeEBObserversFrom (&self.mObserversOf_boardLimitBorderTop) // Transient property
    inOldValue?.boardLimitBorderBottom_property.removeEBObserversFrom (&self.mObserversOf_boardLimitBorderBottom) // Transient property
    inOldValue?.boardLimitBorderLeft_property.removeEBObserversFrom (&self.mObserversOf_boardLimitBorderLeft) // Transient property
    inOldValue?.boardLimitBorderRight_property.removeEBObserversFrom (&self.mObserversOf_boardLimitBorderRight) // Transient property
    inOldValue?.borderElementCountString_property.removeEBObserversFrom (&self.mObserversOf_borderElementCountString) // Transient property
    inOldValue?.selectedSheetIssues_property.removeEBObserversFrom (&self.mObserversOf_selectedSheetIssues) // Transient property
    inOldValue?.connectedPoints_property.removeEBObserversFrom (&self.mObserversOf_connectedPoints) // Transient property
    inOldValue?.connexionWarningString_property.removeEBObserversFrom (&self.mObserversOf_connexionWarningString) // Transient property
    inOldValue?.connexionErrorString_property.removeEBObserversFrom (&self.mObserversOf_connexionErrorString) // Transient property
    inOldValue?.sheetIndexes_property.removeEBObserversFrom (&self.mObserversOf_sheetIndexes) // Transient property
    inOldValue?.unplacedSymbols_property.removeEBObserversFrom (&self.mObserversOf_unplacedSymbols) // Transient property
    inOldValue?.netsDescription_property.removeEBObserversFrom (&self.mObserversOf_netsDescription) // Transient property
    inOldValue?.deviceNames_property.removeEBObserversFrom (&self.mObserversOf_deviceNames) // Transient property
    inOldValue?.schematicBackgroundDisplay_property.removeEBObserversFrom (&self.mObserversOf_schematicBackgroundDisplay) // Transient property
    inOldValue?.netWarningCount_property.removeEBObserversFrom (&self.mObserversOf_netWarningCount) // Transient property
    inOldValue?.schematicStatusImage_property.removeEBObserversFrom (&self.mObserversOf_schematicStatusImage) // Transient property
    inOldValue?.schematicStatusMessage_property.removeEBObserversFrom (&self.mObserversOf_schematicStatusMessage) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.mBoardLimitsWidth_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitsWidth) // Stored property
    self.mInternalValue?.mBoardLimitsWidthUnit_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitsWidthUnit) // Stored property
    self.mInternalValue?.mBoardLimitsSelectedInspector_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitsSelectedInspector) // Stored property
    self.mInternalValue?.mBoardLimitsHorizontalFlip_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitsHorizontalFlip) // Stored property
    self.mInternalValue?.mBoardLimitsVerticalFlip_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitsVerticalFlip) // Stored property
    self.mInternalValue?.mBoardLimitsGridStyle_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitsGridStyle) // Stored property
    self.mInternalValue?.mBoardLimitsGridDisplayFactor_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitsGridDisplayFactor) // Stored property
    self.mInternalValue?.mBoardLimitsZoom_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitsZoom) // Stored property
    self.mInternalValue?.mBoardLimitsGridStep_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitsGridStep) // Stored property
    self.mInternalValue?.mBoardLimitsGridStepUnit_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitsGridStepUnit) // Stored property
    self.mInternalValue?.mBoardLimitsBoundingBoxUnit_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitsBoundingBoxUnit) // Stored property
    self.mInternalValue?.mBoardPointsBoundingBoxUnit_property.addEBObserversFrom (&self.mObserversOf_mBoardPointsBoundingBoxUnit) // Stored property
    self.mInternalValue?.mBoardSelectedCurveDisplayUnit_property.addEBObserversFrom (&self.mObserversOf_mBoardSelectedCurveDisplayUnit) // Stored property
    self.mInternalValue?.mSelectedPageIndex_property.addEBObserversFrom (&self.mObserversOf_mSelectedPageIndex) // Stored property
    self.mInternalValue?.mSelectedSchematicInspector_property.addEBObserversFrom (&self.mObserversOf_mSelectedSchematicInspector) // Stored property
    self.mInternalValue?.mSchematicTitle_property.addEBObserversFrom (&self.mObserversOf_mSchematicTitle) // Stored property
    self.mInternalValue?.mSchematicVersion_property.addEBObserversFrom (&self.mObserversOf_mSchematicVersion) // Stored property
    self.mInternalValue?.mSchematicDate_property.addEBObserversFrom (&self.mObserversOf_mSchematicDate) // Stored property
    self.mInternalValue?.mSchematicHorizontalFlip_property.addEBObserversFrom (&self.mObserversOf_mSchematicHorizontalFlip) // Stored property
    self.mInternalValue?.mSchematicVerticalFlip_property.addEBObserversFrom (&self.mObserversOf_mSchematicVerticalFlip) // Stored property
    self.mInternalValue?.mSchematicZoom_property.addEBObserversFrom (&self.mObserversOf_mSchematicZoom) // Stored property
    self.mInternalValue?.mSchematicGridStyle_property.addEBObserversFrom (&self.mObserversOf_mSchematicGridStyle) // Stored property
    self.mInternalValue?.mSchematicGridDisplayFactor_property.addEBObserversFrom (&self.mObserversOf_mSchematicGridDisplayFactor) // Stored property
    self.mInternalValue?.mSchematicSheetOrientation_property.addEBObserversFrom (&self.mObserversOf_mSchematicSheetOrientation) // Stored property
    self.mInternalValue?.boardLimitsGridStepMultipliedByDisplayFactor_property.addEBObserversFrom (&self.mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor) // Transient property
    self.mInternalValue?.boardLimitPointsTop_property.addEBObserversFrom (&self.mObserversOf_boardLimitPointsTop) // Transient property
    self.mInternalValue?.boardLimitPointsBottom_property.addEBObserversFrom (&self.mObserversOf_boardLimitPointsBottom) // Transient property
    self.mInternalValue?.boardLimitPointsLeft_property.addEBObserversFrom (&self.mObserversOf_boardLimitPointsLeft) // Transient property
    self.mInternalValue?.boardLimitPointsRight_property.addEBObserversFrom (&self.mObserversOf_boardLimitPointsRight) // Transient property
    self.mInternalValue?.boardLimitBorderTop_property.addEBObserversFrom (&self.mObserversOf_boardLimitBorderTop) // Transient property
    self.mInternalValue?.boardLimitBorderBottom_property.addEBObserversFrom (&self.mObserversOf_boardLimitBorderBottom) // Transient property
    self.mInternalValue?.boardLimitBorderLeft_property.addEBObserversFrom (&self.mObserversOf_boardLimitBorderLeft) // Transient property
    self.mInternalValue?.boardLimitBorderRight_property.addEBObserversFrom (&self.mObserversOf_boardLimitBorderRight) // Transient property
    self.mInternalValue?.borderElementCountString_property.addEBObserversFrom (&self.mObserversOf_borderElementCountString) // Transient property
    self.mInternalValue?.selectedSheetIssues_property.addEBObserversFrom (&self.mObserversOf_selectedSheetIssues) // Transient property
    self.mInternalValue?.connectedPoints_property.addEBObserversFrom (&self.mObserversOf_connectedPoints) // Transient property
    self.mInternalValue?.connexionWarningString_property.addEBObserversFrom (&self.mObserversOf_connexionWarningString) // Transient property
    self.mInternalValue?.connexionErrorString_property.addEBObserversFrom (&self.mObserversOf_connexionErrorString) // Transient property
    self.mInternalValue?.sheetIndexes_property.addEBObserversFrom (&self.mObserversOf_sheetIndexes) // Transient property
    self.mInternalValue?.unplacedSymbols_property.addEBObserversFrom (&self.mObserversOf_unplacedSymbols) // Transient property
    self.mInternalValue?.netsDescription_property.addEBObserversFrom (&self.mObserversOf_netsDescription) // Transient property
    self.mInternalValue?.deviceNames_property.addEBObserversFrom (&self.mObserversOf_deviceNames) // Transient property
    self.mInternalValue?.schematicBackgroundDisplay_property.addEBObserversFrom (&self.mObserversOf_schematicBackgroundDisplay) // Transient property
    self.mInternalValue?.netWarningCount_property.addEBObserversFrom (&self.mObserversOf_netWarningCount) // Transient property
    self.mInternalValue?.schematicStatusImage_property.addEBObserversFrom (&self.mObserversOf_schematicStatusImage) // Transient property
    self.mInternalValue?.schematicStatusMessage_property.addEBObserversFrom (&self.mObserversOf_schematicStatusMessage) // Transient property
  }

  //····················································································································
  //   Observers of 'mBoardLimitsWidth' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsWidth = EBWeakEventSet ()

  //····················································································································

  var mBoardLimitsWidth_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mBoardLimitsWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitsWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitsWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitsWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsWidth_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsWidth.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsWidth_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsWidthUnit' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsWidthUnit = EBWeakEventSet ()

  //····················································································································

  var mBoardLimitsWidthUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mBoardLimitsWidthUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitsWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitsWidthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitsWidthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsWidthUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsWidthUnit.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsWidthUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsWidthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsSelectedInspector' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsSelectedInspector = EBWeakEventSet ()

  //····················································································································

  var mBoardLimitsSelectedInspector_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mBoardLimitsSelectedInspector_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitsSelectedInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsSelectedInspector.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitsSelectedInspector_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsSelectedInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsSelectedInspector.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitsSelectedInspector_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsSelectedInspector_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsSelectedInspector.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsSelectedInspector_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsSelectedInspector_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsSelectedInspector.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsSelectedInspector_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsHorizontalFlip' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  var mBoardLimitsHorizontalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mBoardLimitsHorizontalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitsHorizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsHorizontalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitsHorizontalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsHorizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsHorizontalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitsHorizontalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsHorizontalFlip_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsHorizontalFlip.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsHorizontalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsHorizontalFlip_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsHorizontalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsHorizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsVerticalFlip' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsVerticalFlip = EBWeakEventSet ()

  //····················································································································

  var mBoardLimitsVerticalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mBoardLimitsVerticalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitsVerticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsVerticalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitsVerticalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsVerticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsVerticalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitsVerticalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsVerticalFlip_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsVerticalFlip.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsVerticalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsVerticalFlip_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsVerticalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsVerticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsGridStyle' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsGridStyle = EBWeakEventSet ()

  //····················································································································

  var mBoardLimitsGridStyle_property_selection : EBSelection <GridStyle?> {
    if let model = self.propval {
      switch (model.mBoardLimitsGridStyle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitsGridStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStyle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitsGridStyle_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsGridStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStyle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitsGridStyle_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsGridStyle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsGridStyle.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsGridStyle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsGridStyle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsGridStyle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsGridStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsGridDisplayFactor' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsGridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  var mBoardLimitsGridDisplayFactor_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mBoardLimitsGridDisplayFactor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitsGridDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridDisplayFactor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitsGridDisplayFactor_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsGridDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridDisplayFactor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitsGridDisplayFactor_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsGridDisplayFactor_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsGridDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsGridDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsGridDisplayFactor_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsGridDisplayFactor.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsGridDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsZoom' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsZoom = EBWeakEventSet ()

  //····················································································································

  var mBoardLimitsZoom_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mBoardLimitsZoom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitsZoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsZoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitsZoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsZoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsZoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitsZoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsZoom_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsZoom.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsZoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsZoom_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsZoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsZoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsGridStep' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsGridStep = EBWeakEventSet ()

  //····················································································································

  var mBoardLimitsGridStep_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mBoardLimitsGridStep_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitsGridStep (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStep.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitsGridStep_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsGridStep (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStep.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitsGridStep_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsGridStep_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsGridStep.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsGridStep_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsGridStep_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsGridStep.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsGridStep_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsGridStepUnit' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsGridStepUnit = EBWeakEventSet ()

  //····················································································································

  var mBoardLimitsGridStepUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mBoardLimitsGridStepUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitsGridStepUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStepUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitsGridStepUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsGridStepUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsGridStepUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitsGridStepUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsGridStepUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsGridStepUnit.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsGridStepUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsGridStepUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsGridStepUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsGridStepUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardLimitsBoundingBoxUnit' stored property
  //····················································································································

  private var mObserversOf_mBoardLimitsBoundingBoxUnit = EBWeakEventSet ()

  //····················································································································

  var mBoardLimitsBoundingBoxUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mBoardLimitsBoundingBoxUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitsBoundingBoxUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsBoundingBoxUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitsBoundingBoxUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsBoundingBoxUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardLimitsBoundingBoxUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitsBoundingBoxUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardLimitsBoundingBoxUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardLimitsBoundingBoxUnit.apply { (_ observer : EBEvent) in
        managedObject.mBoardLimitsBoundingBoxUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardLimitsBoundingBoxUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardLimitsBoundingBoxUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardLimitsBoundingBoxUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardPointsBoundingBoxUnit' stored property
  //····················································································································

  private var mObserversOf_mBoardPointsBoundingBoxUnit = EBWeakEventSet ()

  //····················································································································

  var mBoardPointsBoundingBoxUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mBoardPointsBoundingBoxUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mBoardPointsBoundingBoxUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardPointsBoundingBoxUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardPointsBoundingBoxUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardPointsBoundingBoxUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardPointsBoundingBoxUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardPointsBoundingBoxUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardPointsBoundingBoxUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardPointsBoundingBoxUnit.apply { (_ observer : EBEvent) in
        managedObject.mBoardPointsBoundingBoxUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardPointsBoundingBoxUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardPointsBoundingBoxUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardPointsBoundingBoxUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mBoardSelectedCurveDisplayUnit' stored property
  //····················································································································

  private var mObserversOf_mBoardSelectedCurveDisplayUnit = EBWeakEventSet ()

  //····················································································································

  var mBoardSelectedCurveDisplayUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mBoardSelectedCurveDisplayUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mBoardSelectedCurveDisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mBoardSelectedCurveDisplayUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardSelectedCurveDisplayUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardSelectedCurveDisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mBoardSelectedCurveDisplayUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardSelectedCurveDisplayUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mBoardSelectedCurveDisplayUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mBoardSelectedCurveDisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.mBoardSelectedCurveDisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mBoardSelectedCurveDisplayUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mBoardSelectedCurveDisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mBoardSelectedCurveDisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSelectedPageIndex' stored property
  //····················································································································

  private var mObserversOf_mSelectedPageIndex = EBWeakEventSet ()

  //····················································································································

  var mSelectedPageIndex_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mSelectedPageIndex_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSelectedPageIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSelectedPageIndex_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSelectedPageIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSelectedPageIndex_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSelectedPageIndex_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSelectedPageIndex.apply { (_ observer : EBEvent) in
        managedObject.mSelectedPageIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSelectedPageIndex_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSelectedPageIndex.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSelectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSelectedSchematicInspector' stored property
  //····················································································································

  private var mObserversOf_mSelectedSchematicInspector = EBWeakEventSet ()

  //····················································································································

  var mSelectedSchematicInspector_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mSelectedSchematicInspector_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSelectedSchematicInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSelectedSchematicInspector.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSelectedSchematicInspector_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSelectedSchematicInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSelectedSchematicInspector.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSelectedSchematicInspector_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSelectedSchematicInspector_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSelectedSchematicInspector.apply { (_ observer : EBEvent) in
        managedObject.mSelectedSchematicInspector_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSelectedSchematicInspector_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSelectedSchematicInspector.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSelectedSchematicInspector_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicTitle' stored property
  //····················································································································

  private var mObserversOf_mSchematicTitle = EBWeakEventSet ()

  //····················································································································

  var mSchematicTitle_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mSchematicTitle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSchematicTitle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicTitle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicTitle_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicTitle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicTitle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicTitle_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicTitle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicTitle.apply { (_ observer : EBEvent) in
        managedObject.mSchematicTitle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicTitle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicTitle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicTitle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicVersion' stored property
  //····················································································································

  private var mObserversOf_mSchematicVersion = EBWeakEventSet ()

  //····················································································································

  var mSchematicVersion_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mSchematicVersion_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSchematicVersion (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicVersion.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicVersion_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicVersion (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicVersion.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicVersion_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicVersion_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicVersion.apply { (_ observer : EBEvent) in
        managedObject.mSchematicVersion_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicVersion_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicVersion.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicVersion_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicDate' stored property
  //····················································································································

  private var mObserversOf_mSchematicDate = EBWeakEventSet ()

  //····················································································································

  var mSchematicDate_property_selection : EBSelection <Date?> {
    if let model = self.propval {
      switch (model.mSchematicDate_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSchematicDate (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicDate.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicDate_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicDate (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicDate.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicDate_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicDate_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicDate.apply { (_ observer : EBEvent) in
        managedObject.mSchematicDate_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicDate_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicDate.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicDate_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicHorizontalFlip' stored property
  //····················································································································

  private var mObserversOf_mSchematicHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  var mSchematicHorizontalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mSchematicHorizontalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSchematicHorizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicHorizontalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicHorizontalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicHorizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicHorizontalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicHorizontalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicHorizontalFlip_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicHorizontalFlip.apply { (_ observer : EBEvent) in
        managedObject.mSchematicHorizontalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicHorizontalFlip_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicHorizontalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicHorizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicVerticalFlip' stored property
  //····················································································································

  private var mObserversOf_mSchematicVerticalFlip = EBWeakEventSet ()

  //····················································································································

  var mSchematicVerticalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mSchematicVerticalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSchematicVerticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicVerticalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicVerticalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicVerticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicVerticalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicVerticalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicVerticalFlip_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicVerticalFlip.apply { (_ observer : EBEvent) in
        managedObject.mSchematicVerticalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicVerticalFlip_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicVerticalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicVerticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicZoom' stored property
  //····················································································································

  private var mObserversOf_mSchematicZoom = EBWeakEventSet ()

  //····················································································································

  var mSchematicZoom_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mSchematicZoom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSchematicZoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicZoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicZoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicZoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicZoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicZoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicZoom_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicZoom.apply { (_ observer : EBEvent) in
        managedObject.mSchematicZoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicZoom_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicZoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicZoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicGridStyle' stored property
  //····················································································································

  private var mObserversOf_mSchematicGridStyle = EBWeakEventSet ()

  //····················································································································

  var mSchematicGridStyle_property_selection : EBSelection <GridStyle?> {
    if let model = self.propval {
      switch (model.mSchematicGridStyle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSchematicGridStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicGridStyle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicGridStyle_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicGridStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicGridStyle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicGridStyle_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicGridStyle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicGridStyle.apply { (_ observer : EBEvent) in
        managedObject.mSchematicGridStyle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicGridStyle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicGridStyle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicGridStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicGridDisplayFactor' stored property
  //····················································································································

  private var mObserversOf_mSchematicGridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  var mSchematicGridDisplayFactor_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mSchematicGridDisplayFactor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSchematicGridDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicGridDisplayFactor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicGridDisplayFactor_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicGridDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicGridDisplayFactor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicGridDisplayFactor_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicGridDisplayFactor_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicGridDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.mSchematicGridDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicGridDisplayFactor_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicGridDisplayFactor.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicGridDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSchematicSheetOrientation' stored property
  //····················································································································

  private var mObserversOf_mSchematicSheetOrientation = EBWeakEventSet ()

  //····················································································································

  var mSchematicSheetOrientation_property_selection : EBSelection <SchematicSheetOrientation?> {
    if let model = self.propval {
      switch (model.mSchematicSheetOrientation_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSchematicSheetOrientation (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSchematicSheetOrientation.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicSheetOrientation_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicSheetOrientation (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSchematicSheetOrientation.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicSheetOrientation_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSchematicSheetOrientation_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSchematicSheetOrientation.apply { (_ observer : EBEvent) in
        managedObject.mSchematicSheetOrientation_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSchematicSheetOrientation_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_mSchematicSheetOrientation.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSchematicSheetOrientation_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedSheetTitle' proxy property
  //····················································································································

  private var mObserversOf_selectedSheetTitle = EBWeakEventSet ()

  //····················································································································

  var selectedSheetTitle_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.selectedSheetTitle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedSheetTitle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedSheetTitle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedSheetTitle_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedSheetTitle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedSheetTitle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedSheetTitle_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedSheetTitle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedSheetTitle.apply { (_ observer : EBEvent) in
        managedObject.selectedSheetTitle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedSheetTitle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_selectedSheetTitle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedSheetTitle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitsGridStepMultipliedByDisplayFactor' transient property
  //····················································································································

  private var mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor = EBWeakEventSet ()

  //····················································································································

  var boardLimitsGridStepMultipliedByDisplayFactor_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardLimitsGridStepMultipliedByDisplayFactor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitsGridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitsGridStepMultipliedByDisplayFactor_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitsGridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitsGridStepMultipliedByDisplayFactor_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitsGridStepMultipliedByDisplayFactor_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.boardLimitsGridStepMultipliedByDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitsGridStepMultipliedByDisplayFactor_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.boardLimitsGridStepMultipliedByDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitPointsTop' transient property
  //····················································································································

  private var mObserversOf_boardLimitPointsTop = EBWeakEventSet ()

  //····················································································································

  var boardLimitPointsTop_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.boardLimitPointsTop_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitPointsTop (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitPointsTop.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitPointsTop_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitPointsTop (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitPointsTop.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitPointsTop_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitPointsTop_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitPointsTop.apply { (_ observer : EBEvent) in
        managedObject.boardLimitPointsTop_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitPointsTop_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitPointsTop.apply { (_ observer : EBEvent) in
        managedObject.boardLimitPointsTop_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitPointsBottom' transient property
  //····················································································································

  private var mObserversOf_boardLimitPointsBottom = EBWeakEventSet ()

  //····················································································································

  var boardLimitPointsBottom_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.boardLimitPointsBottom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitPointsBottom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitPointsBottom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitPointsBottom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitPointsBottom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitPointsBottom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitPointsBottom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitPointsBottom_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitPointsBottom.apply { (_ observer : EBEvent) in
        managedObject.boardLimitPointsBottom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitPointsBottom_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitPointsBottom.apply { (_ observer : EBEvent) in
        managedObject.boardLimitPointsBottom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitPointsLeft' transient property
  //····················································································································

  private var mObserversOf_boardLimitPointsLeft = EBWeakEventSet ()

  //····················································································································

  var boardLimitPointsLeft_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.boardLimitPointsLeft_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitPointsLeft (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitPointsLeft.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitPointsLeft_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitPointsLeft (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitPointsLeft.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitPointsLeft_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitPointsLeft_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitPointsLeft.apply { (_ observer : EBEvent) in
        managedObject.boardLimitPointsLeft_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitPointsLeft_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitPointsLeft.apply { (_ observer : EBEvent) in
        managedObject.boardLimitPointsLeft_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitPointsRight' transient property
  //····················································································································

  private var mObserversOf_boardLimitPointsRight = EBWeakEventSet ()

  //····················································································································

  var boardLimitPointsRight_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.boardLimitPointsRight_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitPointsRight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitPointsRight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitPointsRight_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitPointsRight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitPointsRight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitPointsRight_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitPointsRight_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitPointsRight.apply { (_ observer : EBEvent) in
        managedObject.boardLimitPointsRight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitPointsRight_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitPointsRight.apply { (_ observer : EBEvent) in
        managedObject.boardLimitPointsRight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitBorderTop' transient property
  //····················································································································

  private var mObserversOf_boardLimitBorderTop = EBWeakEventSet ()

  //····················································································································

  var boardLimitBorderTop_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.boardLimitBorderTop_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitBorderTop (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderTop.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitBorderTop_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitBorderTop (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderTop.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitBorderTop_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitBorderTop_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderTop.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderTop_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitBorderTop_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderTop.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderTop_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitBorderBottom' transient property
  //····················································································································

  private var mObserversOf_boardLimitBorderBottom = EBWeakEventSet ()

  //····················································································································

  var boardLimitBorderBottom_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.boardLimitBorderBottom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitBorderBottom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderBottom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitBorderBottom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitBorderBottom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderBottom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitBorderBottom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitBorderBottom_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderBottom.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderBottom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitBorderBottom_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderBottom.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderBottom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitBorderLeft' transient property
  //····················································································································

  private var mObserversOf_boardLimitBorderLeft = EBWeakEventSet ()

  //····················································································································

  var boardLimitBorderLeft_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.boardLimitBorderLeft_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitBorderLeft (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderLeft.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitBorderLeft_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitBorderLeft (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderLeft.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitBorderLeft_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitBorderLeft_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderLeft.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderLeft_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitBorderLeft_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderLeft.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderLeft_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'boardLimitBorderRight' transient property
  //····················································································································

  private var mObserversOf_boardLimitBorderRight = EBWeakEventSet ()

  //····················································································································

  var boardLimitBorderRight_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.boardLimitBorderRight_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitBorderRight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderRight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitBorderRight_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitBorderRight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderRight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitBorderRight_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_boardLimitBorderRight_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderRight.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderRight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_boardLimitBorderRight_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_boardLimitBorderRight.apply { (_ observer : EBEvent) in
        managedObject.boardLimitBorderRight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'borderElementCountString' transient property
  //····················································································································

  private var mObserversOf_borderElementCountString = EBWeakEventSet ()

  //····················································································································

  var borderElementCountString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.borderElementCountString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_borderElementCountString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_borderElementCountString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.borderElementCountString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_borderElementCountString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_borderElementCountString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.borderElementCountString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_borderElementCountString_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_borderElementCountString.apply { (_ observer : EBEvent) in
        managedObject.borderElementCountString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_borderElementCountString_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_borderElementCountString.apply { (_ observer : EBEvent) in
        managedObject.borderElementCountString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedSheetIssues' transient property
  //····················································································································

  private var mObserversOf_selectedSheetIssues = EBWeakEventSet ()

  //····················································································································

  var selectedSheetIssues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.selectedSheetIssues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedSheetIssues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedSheetIssues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedSheetIssues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedSheetIssues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedSheetIssues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedSheetIssues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedSheetIssues_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedSheetIssues.apply { (_ observer : EBEvent) in
        managedObject.selectedSheetIssues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedSheetIssues_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedSheetIssues.apply { (_ observer : EBEvent) in
        managedObject.selectedSheetIssues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connectedPoints' transient property
  //····················································································································

  private var mObserversOf_connectedPoints = EBWeakEventSet ()

  //····················································································································

  var connectedPoints_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.connectedPoints_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connectedPoints.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connectedPoints_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connectedPoints.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connectedPoints_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_connectedPoints_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connectedPoints.apply { (_ observer : EBEvent) in
        managedObject.connectedPoints_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connectedPoints_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connectedPoints.apply { (_ observer : EBEvent) in
        managedObject.connectedPoints_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connexionWarningString' transient property
  //····················································································································

  private var mObserversOf_connexionWarningString = EBWeakEventSet ()

  //····················································································································

  var connexionWarningString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.connexionWarningString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_connexionWarningString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connexionWarningString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connexionWarningString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_connexionWarningString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connexionWarningString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connexionWarningString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_connexionWarningString_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connexionWarningString.apply { (_ observer : EBEvent) in
        managedObject.connexionWarningString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connexionWarningString_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connexionWarningString.apply { (_ observer : EBEvent) in
        managedObject.connexionWarningString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connexionErrorString' transient property
  //····················································································································

  private var mObserversOf_connexionErrorString = EBWeakEventSet ()

  //····················································································································

  var connexionErrorString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.connexionErrorString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_connexionErrorString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connexionErrorString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connexionErrorString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_connexionErrorString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connexionErrorString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connexionErrorString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_connexionErrorString_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connexionErrorString.apply { (_ observer : EBEvent) in
        managedObject.connexionErrorString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connexionErrorString_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_connexionErrorString.apply { (_ observer : EBEvent) in
        managedObject.connexionErrorString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sheetIndexes' transient property
  //····················································································································

  private var mObserversOf_sheetIndexes = EBWeakEventSet ()

  //····················································································································

  var sheetIndexes_property_selection : EBSelection <IntArray?> {
    if let model = self.propval {
      switch (model.sheetIndexes_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_sheetIndexes (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_sheetIndexes.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.sheetIndexes_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_sheetIndexes (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_sheetIndexes.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.sheetIndexes_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_sheetIndexes_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_sheetIndexes.apply { (_ observer : EBEvent) in
        managedObject.sheetIndexes_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sheetIndexes_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_sheetIndexes.apply { (_ observer : EBEvent) in
        managedObject.sheetIndexes_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'unplacedSymbols' transient property
  //····················································································································

  private var mObserversOf_unplacedSymbols = EBWeakEventSet ()

  //····················································································································

  var unplacedSymbols_property_selection : EBSelection <StringTagArray?> {
    if let model = self.propval {
      switch (model.unplacedSymbols_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.unplacedSymbols_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.unplacedSymbols_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_unplacedSymbols_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_unplacedSymbols.apply { (_ observer : EBEvent) in
        managedObject.unplacedSymbols_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_unplacedSymbols_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_unplacedSymbols.apply { (_ observer : EBEvent) in
        managedObject.unplacedSymbols_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netsDescription' transient property
  //····················································································································

  private var mObserversOf_netsDescription = EBWeakEventSet ()

  //····················································································································

  var netsDescription_property_selection : EBSelection <NetInfoArray?> {
    if let model = self.propval {
      switch (model.netsDescription_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_netsDescription (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netsDescription.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netsDescription_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_netsDescription (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netsDescription.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netsDescription_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_netsDescription_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_netsDescription.apply { (_ observer : EBEvent) in
        managedObject.netsDescription_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netsDescription_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_netsDescription.apply { (_ observer : EBEvent) in
        managedObject.netsDescription_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'deviceNames' transient property
  //····················································································································

  private var mObserversOf_deviceNames = EBWeakEventSet ()

  //····················································································································

  var deviceNames_property_selection : EBSelection <StringArray?> {
    if let model = self.propval {
      switch (model.deviceNames_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_deviceNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_deviceNames.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.deviceNames_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_deviceNames.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.deviceNames_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_deviceNames_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_deviceNames.apply { (_ observer : EBEvent) in
        managedObject.deviceNames_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_deviceNames_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_deviceNames.apply { (_ observer : EBEvent) in
        managedObject.deviceNames_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'schematicBackgroundDisplay' transient property
  //····················································································································

  private var mObserversOf_schematicBackgroundDisplay = EBWeakEventSet ()

  //····················································································································

  var schematicBackgroundDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.schematicBackgroundDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_schematicBackgroundDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_schematicBackgroundDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.schematicBackgroundDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_schematicBackgroundDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_schematicBackgroundDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.schematicBackgroundDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_schematicBackgroundDisplay_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicBackgroundDisplay.apply { (_ observer : EBEvent) in
        managedObject.schematicBackgroundDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_schematicBackgroundDisplay_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicBackgroundDisplay.apply { (_ observer : EBEvent) in
        managedObject.schematicBackgroundDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netWarningCount' transient property
  //····················································································································

  private var mObserversOf_netWarningCount = EBWeakEventSet ()

  //····················································································································

  var netWarningCount_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.netWarningCount_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_netWarningCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netWarningCount.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netWarningCount_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_netWarningCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netWarningCount.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netWarningCount_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_netWarningCount_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_netWarningCount.apply { (_ observer : EBEvent) in
        managedObject.netWarningCount_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netWarningCount_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_netWarningCount.apply { (_ observer : EBEvent) in
        managedObject.netWarningCount_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'schematicStatusImage' transient property
  //····················································································································

  private var mObserversOf_schematicStatusImage = EBWeakEventSet ()

  //····················································································································

  var schematicStatusImage_property_selection : EBSelection <NSImage?> {
    if let model = self.propval {
      switch (model.schematicStatusImage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_schematicStatusImage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_schematicStatusImage.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.schematicStatusImage_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_schematicStatusImage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_schematicStatusImage.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.schematicStatusImage_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_schematicStatusImage_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicStatusImage.apply { (_ observer : EBEvent) in
        managedObject.schematicStatusImage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_schematicStatusImage_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicStatusImage.apply { (_ observer : EBEvent) in
        managedObject.schematicStatusImage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'schematicStatusMessage' transient property
  //····················································································································

  private var mObserversOf_schematicStatusMessage = EBWeakEventSet ()

  //····················································································································

  var schematicStatusMessage_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.schematicStatusMessage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_schematicStatusMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_schematicStatusMessage.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.schematicStatusMessage_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_schematicStatusMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_schematicStatusMessage.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.schematicStatusMessage_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_schematicStatusMessage_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicStatusMessage.apply { (_ observer : EBEvent) in
        managedObject.schematicStatusMessage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_schematicStatusMessage_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_schematicStatusMessage.apply { (_ observer : EBEvent) in
        managedObject.schematicStatusMessage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observable toMany property: mBorderPoints
  //····················································································································

  private var mObserversOf_mBorderPoints = EBWeakEventSet ()

  //····················································································································

  var mBorderPoints_property_selection : EBSelection <[BorderPoint]> {
    if let model = self.propval {
      switch (model.mBorderPoints_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mBorderPoints (_ inObserver : EBEvent) {
    self.mObserversOf_mBorderPoints.insert (inObserver)
    if let object = self.propval {
      object.mBorderPoints_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBorderPoints (_ inObserver : EBEvent) {
    self.mObserversOf_mBorderPoints.remove (inObserver)
    if let object = self.propval {
      object.mBorderPoints_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mSheets
  //····················································································································

  private var mObserversOf_mSheets = EBWeakEventSet ()

  //····················································································································

  var mSheets_property_selection : EBSelection <[SheetInProject]> {
    if let model = self.propval {
      switch (model.mSheets_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mSheets (_ inObserver : EBEvent) {
    self.mObserversOf_mSheets.insert (inObserver)
    if let object = self.propval {
      object.mSheets_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSheets (_ inObserver : EBEvent) {
    self.mObserversOf_mSheets.remove (inObserver)
    if let object = self.propval {
      object.mSheets_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mComponents
  //····················································································································

  private var mObserversOf_mComponents = EBWeakEventSet ()

  //····················································································································

  var mComponents_property_selection : EBSelection <[ComponentInProject]> {
    if let model = self.propval {
      switch (model.mComponents_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mComponents (_ inObserver : EBEvent) {
    self.mObserversOf_mComponents.insert (inObserver)
    if let object = self.propval {
      object.mComponents_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComponents (_ inObserver : EBEvent) {
    self.mObserversOf_mComponents.remove (inObserver)
    if let object = self.propval {
      object.mComponents_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mNetClasses
  //····················································································································

  private var mObserversOf_mNetClasses = EBWeakEventSet ()

  //····················································································································

  var mNetClasses_property_selection : EBSelection <[NetClassInProject]> {
    if let model = self.propval {
      switch (model.mNetClasses_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mNetClasses (_ inObserver : EBEvent) {
    self.mObserversOf_mNetClasses.insert (inObserver)
    if let object = self.propval {
      object.mNetClasses_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetClasses (_ inObserver : EBEvent) {
    self.mObserversOf_mNetClasses.remove (inObserver)
    if let object = self.propval {
      object.mNetClasses_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mFonts
  //····················································································································

  private var mObserversOf_mFonts = EBWeakEventSet ()

  //····················································································································

  var mFonts_property_selection : EBSelection <[FontInProject]> {
    if let model = self.propval {
      switch (model.mFonts_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mFonts (_ inObserver : EBEvent) {
    self.mObserversOf_mFonts.insert (inObserver)
    if let object = self.propval {
      object.mFonts_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mFonts (_ inObserver : EBEvent) {
    self.mObserversOf_mFonts.remove (inObserver)
    if let object = self.propval {
      object.mFonts_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mDevices
  //····················································································································

  private var mObserversOf_mDevices = EBWeakEventSet ()

  //····················································································································

  var mDevices_property_selection : EBSelection <[DeviceInProject]> {
    if let model = self.propval {
      switch (model.mDevices_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mDevices (_ inObserver : EBEvent) {
    self.mObserversOf_mDevices.insert (inObserver)
    if let object = self.propval {
      object.mDevices_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDevices (_ inObserver : EBEvent) {
    self.mObserversOf_mDevices.remove (inObserver)
    if let object = self.propval {
      object.mDevices_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mBoardLimits
  //····················································································································

  private var mObserversOf_mBoardLimits = EBWeakEventSet ()

  //····················································································································

  var mBoardLimits_property_selection : EBSelection <[BoardLimit]> {
    if let model = self.propval {
      switch (model.mBoardLimits_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimits (_ inObserver : EBEvent) {
    self.mObserversOf_mBoardLimits.insert (inObserver)
    if let object = self.propval {
      object.mBoardLimits_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimits (_ inObserver : EBEvent) {
    self.mObserversOf_mBoardLimits.remove (inObserver)
    if let object = self.propval {
      object.mBoardLimits_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientObject ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientObject_ProjectRoot : ReadOnlyObject_ProjectRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_ProjectRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_ProjectRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : ProjectRoot? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < ProjectRoot? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : ProjectRoot? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_ProjectRoot : ReadOnlyObject_ProjectRoot {

  //····················································································································
 
  func setProp (_ inValue : ProjectRoot?) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_ProjectRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_ProjectRoot : ReadWriteObject_ProjectRoot {

  //····················································································································

  private var mModel : ReadWriteObject_ProjectRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_ProjectRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : ProjectRoot?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : ProjectRoot?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < ProjectRoot? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : ProjectRoot? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_ProjectRoot 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_ProjectRoot : ReadWriteObject_ProjectRoot, EBSignatureObserverProtocol {

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ProjectRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ProjectRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ProjectRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ProjectRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : ProjectRoot?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    if let object = inOldValue {
      object.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      object.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : ProjectRoot?) {
    self.mInternalValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < ProjectRoot? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : ProjectRoot?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : ProjectRoot? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    self.mInternalValue?.setSignatureObserver (observer: observer)
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

