//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_ProjectRoot 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_ProjectRoot : ReadOnlyAbstractObjectProperty <ProjectRoot> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : ProjectRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
 //     oldValue.mArtworkName_property.removeEBObserversFrom (&self.mObserversOf_mArtworkName) // Stored property
 //     oldValue.mArtworkVersion_property.removeEBObserversFrom (&self.mObserversOf_mArtworkVersion) // Stored property
 //     oldValue.mPDFBoardBackgroundColor_property.removeEBObserversFrom (&self.mObserversOf_mPDFBoardBackgroundColor) // Stored property
 //     oldValue.mCheckClearanceBetweenPadsOfSameNet_property.removeEBObserversFrom (&self.mObserversOf_mCheckClearanceBetweenPadsOfSameNet) // Stored property
 //     oldValue.mLastERCCheckingIsSuccess_property.removeEBObserversFrom (&self.mObserversOf_mLastERCCheckingIsSuccess) // Stored property
 //     oldValue.mLastERCCheckingSignature_property.removeEBObserversFrom (&self.mObserversOf_mLastERCCheckingSignature) // Stored property
 //     oldValue.mBoardSideForNewTrack_property.removeEBObserversFrom (&self.mObserversOf_mBoardSideForNewTrack) // Stored property
 //     oldValue.mDirectionForNewTrack_property.removeEBObserversFrom (&self.mObserversOf_mDirectionForNewTrack) // Stored property
 //     oldValue.mBoardLayerForNewText_property.removeEBObserversFrom (&self.mObserversOf_mBoardLayerForNewText) // Stored property
 //     oldValue.mBoardLayerForNewLine_property.removeEBObserversFrom (&self.mObserversOf_mBoardLayerForNewLine) // Stored property
 //     oldValue.mBoardSideForNewRestrictRectangle_property.removeEBObserversFrom (&self.mObserversOf_mBoardSideForNewRestrictRectangle) // Stored property
 //     oldValue.mAutoRouterPreferredDirections_property.removeEBObserversFrom (&self.mObserversOf_mAutoRouterPreferredDirections) // Stored property
 //     oldValue.mAutorouterSnapAngle_property.removeEBObserversFrom (&self.mObserversOf_mAutorouterSnapAngle) // Stored property
 //     oldValue.mRouteDirection_property.removeEBObserversFrom (&self.mObserversOf_mRouteDirection) // Stored property
 //     oldValue.mRouteOrigin_property.removeEBObserversFrom (&self.mObserversOf_mRouteOrigin) // Stored property
 //     oldValue.mAutorouterInterfaceMode_property.removeEBObserversFrom (&self.mObserversOf_mAutorouterInterfaceMode) // Stored property
 //     oldValue.mExportExistingTracksAndVias_property.removeEBObserversFrom (&self.mObserversOf_mExportExistingTracksAndVias) // Stored property
 //     oldValue.mTrackLengthUnit_property.removeEBObserversFrom (&self.mObserversOf_mTrackLengthUnit) // Stored property
 //     oldValue.mLayoutClearance_property.removeEBObserversFrom (&self.mObserversOf_mLayoutClearance) // Stored property
 //     oldValue.mLayoutClearanceUnit_property.removeEBObserversFrom (&self.mObserversOf_mLayoutClearanceUnit) // Stored property
 //     oldValue.mBoardSelectedInspector_property.removeEBObserversFrom (&self.mObserversOf_mBoardSelectedInspector) // Stored property
 //     oldValue.mBoardHorizontalFlip_property.removeEBObserversFrom (&self.mObserversOf_mBoardHorizontalFlip) // Stored property
 //     oldValue.mBoardVerticalFlip_property.removeEBObserversFrom (&self.mObserversOf_mBoardVerticalFlip) // Stored property
 //     oldValue.mBoardGridStyle_property.removeEBObserversFrom (&self.mObserversOf_mBoardGridStyle) // Stored property
 //     oldValue.mBoardGridDisplayFactor_property.removeEBObserversFrom (&self.mObserversOf_mBoardGridDisplayFactor) // Stored property
 //     oldValue.mBoardZoom_property.removeEBObserversFrom (&self.mObserversOf_mBoardZoom) // Stored property
 //     oldValue.mBoardGridStep_property.removeEBObserversFrom (&self.mObserversOf_mBoardGridStep) // Stored property
 //     oldValue.mBoardGridStepUnit_property.removeEBObserversFrom (&self.mObserversOf_mBoardGridStepUnit) // Stored property
 //     oldValue.mErrorOrWarningIssueSize_property.removeEBObserversFrom (&self.mObserversOf_mErrorOrWarningIssueSize) // Stored property
 //     oldValue.mControlKeyHiliteDiameter_property.removeEBObserversFrom (&self.mObserversOf_mControlKeyHiliteDiameter) // Stored property
 //     oldValue.mDSNFileProposedName_property.removeEBObserversFrom (&self.mObserversOf_mDSNFileProposedName) // Stored property
 //     oldValue.mBoardLimitsWidth_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitsWidth) // Stored property
 //     oldValue.mBoardLimitsWidthUnit_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitsWidthUnit) // Stored property
 //     oldValue.mBoardClearance_property.removeEBObserversFrom (&self.mObserversOf_mBoardClearance) // Stored property
 //     oldValue.mBoardClearanceUnit_property.removeEBObserversFrom (&self.mObserversOf_mBoardClearanceUnit) // Stored property
 //     oldValue.mBoardLimitsSelectedInspector_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitsSelectedInspector) // Stored property
 //     oldValue.mBoardLimitsHorizontalFlip_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitsHorizontalFlip) // Stored property
 //     oldValue.mBoardLimitsVerticalFlip_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitsVerticalFlip) // Stored property
 //     oldValue.mBoardLimitsGridStyle_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitsGridStyle) // Stored property
 //     oldValue.mBoardLimitsGridDisplayFactor_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitsGridDisplayFactor) // Stored property
 //     oldValue.mBoardLimitsZoom_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitsZoom) // Stored property
 //     oldValue.mBoardLimitsGridStep_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitsGridStep) // Stored property
 //     oldValue.mBoardLimitsGridStepUnit_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitsGridStepUnit) // Stored property
 //     oldValue.mBoardLimitsBoundingBoxUnit_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitsBoundingBoxUnit) // Stored property
 //     oldValue.mBoardPointsBoundingBoxUnit_property.removeEBObserversFrom (&self.mObserversOf_mBoardPointsBoundingBoxUnit) // Stored property
 //     oldValue.mBoardSelectedCurveDisplayUnit_property.removeEBObserversFrom (&self.mObserversOf_mBoardSelectedCurveDisplayUnit) // Stored property
 //     oldValue.mBoardLimitControlPointsDisplayUnit_property.removeEBObserversFrom (&self.mObserversOf_mBoardLimitControlPointsDisplayUnit) // Stored property
 //     oldValue.mBoardShape_property.removeEBObserversFrom (&self.mObserversOf_mBoardShape) // Stored property
 //     oldValue.mRectangularBoardWidth_property.removeEBObserversFrom (&self.mObserversOf_mRectangularBoardWidth) // Stored property
 //     oldValue.mRectangularBoardWidthUnit_property.removeEBObserversFrom (&self.mObserversOf_mRectangularBoardWidthUnit) // Stored property
 //     oldValue.mRectangularBoardHeight_property.removeEBObserversFrom (&self.mObserversOf_mRectangularBoardHeight) // Stored property
 //     oldValue.mRectangularBoardHeightUnit_property.removeEBObserversFrom (&self.mObserversOf_mRectangularBoardHeightUnit) // Stored property
 //     oldValue.mDefaultNetClassName_property.removeEBObserversFrom (&self.mObserversOf_mDefaultNetClassName) // Stored property
 //     oldValue.mSelectedPageIndex_property.removeEBObserversFrom (&self.mObserversOf_mSelectedPageIndex) // Stored property
 //     oldValue.mSelectedSchematicInspector_property.removeEBObserversFrom (&self.mObserversOf_mSelectedSchematicInspector) // Stored property
 //     oldValue.mSchematicTitle_property.removeEBObserversFrom (&self.mObserversOf_mSchematicTitle) // Stored property
 //     oldValue.mSchematicVersion_property.removeEBObserversFrom (&self.mObserversOf_mSchematicVersion) // Stored property
 //     oldValue.mSchematicDate_property.removeEBObserversFrom (&self.mObserversOf_mSchematicDate) // Stored property
 //     oldValue.mSchematicHorizontalFlip_property.removeEBObserversFrom (&self.mObserversOf_mSchematicHorizontalFlip) // Stored property
 //     oldValue.mSchematicVerticalFlip_property.removeEBObserversFrom (&self.mObserversOf_mSchematicVerticalFlip) // Stored property
 //     oldValue.mSchematicZoom_property.removeEBObserversFrom (&self.mObserversOf_mSchematicZoom) // Stored property
 //     oldValue.mSchematicGridStyle_property.removeEBObserversFrom (&self.mObserversOf_mSchematicGridStyle) // Stored property
 //     oldValue.mSchematicGridDisplayFactor_property.removeEBObserversFrom (&self.mObserversOf_mSchematicGridDisplayFactor) // Stored property
 //     oldValue.mSchematicCustomWidth_property.removeEBObserversFrom (&self.mObserversOf_mSchematicCustomWidth) // Stored property
 //     oldValue.mSchematicCustomWidthUnit_property.removeEBObserversFrom (&self.mObserversOf_mSchematicCustomWidthUnit) // Stored property
 //     oldValue.mSchematicCustomHeight_property.removeEBObserversFrom (&self.mObserversOf_mSchematicCustomHeight) // Stored property
 //     oldValue.mSchematicCustomHeightUnit_property.removeEBObserversFrom (&self.mObserversOf_mSchematicCustomHeightUnit) // Stored property
 //     oldValue.mSchematicSheetOrientation_property.removeEBObserversFrom (&self.mObserversOf_mSchematicSheetOrientation) // Stored property
 //     oldValue.mRastnetDisplay_property.removeEBObserversFrom (&self.mObserversOf_mRastnetDisplay) // Stored property
 //     oldValue.mRastnetDisplayedNetName_property.removeEBObserversFrom (&self.mObserversOf_mRastnetDisplayedNetName) // Stored property
 //     oldValue.mRastnetDisplayedComponentName_property.removeEBObserversFrom (&self.mObserversOf_mRastnetDisplayedComponentName) // Stored property
      oldValue.boardGridStepMultipliedByDisplayFactor_property.removeEBObserversFrom (&self.mObserversOf_boardGridStepMultipliedByDisplayFactor) // Transient property
      oldValue.boardLimitsGridStepMultipliedByDisplayFactor_property.removeEBObserversFrom (&self.mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor) // Transient property
      oldValue.boardShapeIsRectangular_property.removeEBObserversFrom (&self.mObserversOf_boardShapeIsRectangular) // Transient property
      oldValue.selectedSheetIssues_property.removeEBObserversFrom (&self.mObserversOf_selectedSheetIssues) // Transient property
      oldValue.connectedPoints_property.removeEBObserversFrom (&self.mObserversOf_connectedPoints) // Transient property
      oldValue.connexionWarningString_property.removeEBObserversFrom (&self.mObserversOf_connexionWarningString) // Transient property
      oldValue.connexionErrorString_property.removeEBObserversFrom (&self.mObserversOf_connexionErrorString) // Transient property
      oldValue.sheetIndexes_property.removeEBObserversFrom (&self.mObserversOf_sheetIndexes) // Transient property
      oldValue.netsDescription_property.removeEBObserversFrom (&self.mObserversOf_netsDescription) // Transient property
      oldValue.boardIssues_property.removeEBObserversFrom (&self.mObserversOf_boardIssues) // Transient property
      oldValue.signatureForERCChecking_property.removeEBObserversFrom (&self.mObserversOf_signatureForERCChecking) // Transient property
      oldValue.ercStatusImage_property.removeEBObserversFrom (&self.mObserversOf_ercStatusImage) // Transient property
      oldValue.ercStatusMessage_property.removeEBObserversFrom (&self.mObserversOf_ercStatusMessage) // Transient property
      oldValue.viaCountString_property.removeEBObserversFrom (&self.mObserversOf_viaCountString) // Transient property
      oldValue.trackCountString_property.removeEBObserversFrom (&self.mObserversOf_trackCountString) // Transient property
      oldValue.trackLengthString_property.removeEBObserversFrom (&self.mObserversOf_trackLengthString) // Transient property
      oldValue.boardStatusImage_property.removeEBObserversFrom (&self.mObserversOf_boardStatusImage) // Transient property
      oldValue.boardStatusMessage_property.removeEBObserversFrom (&self.mObserversOf_boardStatusMessage) // Transient property
      oldValue.interiorBoundBox_property.removeEBObserversFrom (&self.mObserversOf_interiorBoundBox) // Transient property
      oldValue.boardBoundBox_property.removeEBObserversFrom (&self.mObserversOf_boardBoundBox) // Transient property
      oldValue.boardInteriorTop_property.removeEBObserversFrom (&self.mObserversOf_boardInteriorTop) // Transient property
      oldValue.boardInteriorBottom_property.removeEBObserversFrom (&self.mObserversOf_boardInteriorBottom) // Transient property
      oldValue.boardInteriorLeft_property.removeEBObserversFrom (&self.mObserversOf_boardInteriorLeft) // Transient property
      oldValue.boardInteriorRight_property.removeEBObserversFrom (&self.mObserversOf_boardInteriorRight) // Transient property
      oldValue.boardLimitBorderTop_property.removeEBObserversFrom (&self.mObserversOf_boardLimitBorderTop) // Transient property
      oldValue.boardLimitBorderBottom_property.removeEBObserversFrom (&self.mObserversOf_boardLimitBorderBottom) // Transient property
      oldValue.boardLimitBorderLeft_property.removeEBObserversFrom (&self.mObserversOf_boardLimitBorderLeft) // Transient property
      oldValue.boardLimitBorderRight_property.removeEBObserversFrom (&self.mObserversOf_boardLimitBorderRight) // Transient property
      oldValue.borderElementCountString_property.removeEBObserversFrom (&self.mObserversOf_borderElementCountString) // Transient property
      oldValue.borderOutlineBackground_property.removeEBObserversFrom (&self.mObserversOf_borderOutlineBackground) // Transient property
      oldValue.borderViewBackground_property.removeEBObserversFrom (&self.mObserversOf_borderViewBackground) // Transient property
      oldValue.deviceNames_property.removeEBObserversFrom (&self.mObserversOf_deviceNames) // Transient property
      oldValue.allClassNames_property.removeEBObserversFrom (&self.mObserversOf_allClassNames) // Transient property
      oldValue.sheetGeometry_property.removeEBObserversFrom (&self.mObserversOf_sheetGeometry) // Transient property
      oldValue.schematicBackgroundDisplay_property.removeEBObserversFrom (&self.mObserversOf_schematicBackgroundDisplay) // Transient property
      oldValue.netWarningCount_property.removeEBObserversFrom (&self.mObserversOf_netWarningCount) // Transient property
      oldValue.netNamesArray_property.removeEBObserversFrom (&self.mObserversOf_netNamesArray) // Transient property
      oldValue.unplacedSymbols_property.removeEBObserversFrom (&self.mObserversOf_unplacedSymbols) // Transient property
      oldValue.unplacedPackages_property.removeEBObserversFrom (&self.mObserversOf_unplacedPackages) // Transient property
      oldValue.componentsPlacedInBoard_property.removeEBObserversFrom (&self.mObserversOf_componentsPlacedInBoard) // Transient property
      oldValue.placedComponentNameArray_property.removeEBObserversFrom (&self.mObserversOf_placedComponentNameArray) // Transient property
      oldValue.schematicHasErrorOrWarning_property.removeEBObserversFrom (&self.mObserversOf_schematicHasErrorOrWarning) // Transient property
      oldValue.schematicStatusMessage_property.removeEBObserversFrom (&self.mObserversOf_schematicStatusMessage) // Transient property
      oldValue.schematicStatusImage_property.removeEBObserversFrom (&self.mObserversOf_schematicStatusImage) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
 //     newValue.mArtworkName_property.addEBObserversFrom (&self.mObserversOf_mArtworkName) // Stored property
 //     newValue.mArtworkVersion_property.addEBObserversFrom (&self.mObserversOf_mArtworkVersion) // Stored property
 //     newValue.mPDFBoardBackgroundColor_property.addEBObserversFrom (&self.mObserversOf_mPDFBoardBackgroundColor) // Stored property
 //     newValue.mCheckClearanceBetweenPadsOfSameNet_property.addEBObserversFrom (&self.mObserversOf_mCheckClearanceBetweenPadsOfSameNet) // Stored property
 //     newValue.mLastERCCheckingIsSuccess_property.addEBObserversFrom (&self.mObserversOf_mLastERCCheckingIsSuccess) // Stored property
 //     newValue.mLastERCCheckingSignature_property.addEBObserversFrom (&self.mObserversOf_mLastERCCheckingSignature) // Stored property
 //     newValue.mBoardSideForNewTrack_property.addEBObserversFrom (&self.mObserversOf_mBoardSideForNewTrack) // Stored property
 //     newValue.mDirectionForNewTrack_property.addEBObserversFrom (&self.mObserversOf_mDirectionForNewTrack) // Stored property
 //     newValue.mBoardLayerForNewText_property.addEBObserversFrom (&self.mObserversOf_mBoardLayerForNewText) // Stored property
 //     newValue.mBoardLayerForNewLine_property.addEBObserversFrom (&self.mObserversOf_mBoardLayerForNewLine) // Stored property
 //     newValue.mBoardSideForNewRestrictRectangle_property.addEBObserversFrom (&self.mObserversOf_mBoardSideForNewRestrictRectangle) // Stored property
 //     newValue.mAutoRouterPreferredDirections_property.addEBObserversFrom (&self.mObserversOf_mAutoRouterPreferredDirections) // Stored property
 //     newValue.mAutorouterSnapAngle_property.addEBObserversFrom (&self.mObserversOf_mAutorouterSnapAngle) // Stored property
 //     newValue.mRouteDirection_property.addEBObserversFrom (&self.mObserversOf_mRouteDirection) // Stored property
 //     newValue.mRouteOrigin_property.addEBObserversFrom (&self.mObserversOf_mRouteOrigin) // Stored property
 //     newValue.mAutorouterInterfaceMode_property.addEBObserversFrom (&self.mObserversOf_mAutorouterInterfaceMode) // Stored property
 //     newValue.mExportExistingTracksAndVias_property.addEBObserversFrom (&self.mObserversOf_mExportExistingTracksAndVias) // Stored property
 //     newValue.mTrackLengthUnit_property.addEBObserversFrom (&self.mObserversOf_mTrackLengthUnit) // Stored property
 //     newValue.mLayoutClearance_property.addEBObserversFrom (&self.mObserversOf_mLayoutClearance) // Stored property
 //     newValue.mLayoutClearanceUnit_property.addEBObserversFrom (&self.mObserversOf_mLayoutClearanceUnit) // Stored property
 //     newValue.mBoardSelectedInspector_property.addEBObserversFrom (&self.mObserversOf_mBoardSelectedInspector) // Stored property
 //     newValue.mBoardHorizontalFlip_property.addEBObserversFrom (&self.mObserversOf_mBoardHorizontalFlip) // Stored property
 //     newValue.mBoardVerticalFlip_property.addEBObserversFrom (&self.mObserversOf_mBoardVerticalFlip) // Stored property
 //     newValue.mBoardGridStyle_property.addEBObserversFrom (&self.mObserversOf_mBoardGridStyle) // Stored property
 //     newValue.mBoardGridDisplayFactor_property.addEBObserversFrom (&self.mObserversOf_mBoardGridDisplayFactor) // Stored property
 //     newValue.mBoardZoom_property.addEBObserversFrom (&self.mObserversOf_mBoardZoom) // Stored property
 //     newValue.mBoardGridStep_property.addEBObserversFrom (&self.mObserversOf_mBoardGridStep) // Stored property
 //     newValue.mBoardGridStepUnit_property.addEBObserversFrom (&self.mObserversOf_mBoardGridStepUnit) // Stored property
 //     newValue.mErrorOrWarningIssueSize_property.addEBObserversFrom (&self.mObserversOf_mErrorOrWarningIssueSize) // Stored property
 //     newValue.mControlKeyHiliteDiameter_property.addEBObserversFrom (&self.mObserversOf_mControlKeyHiliteDiameter) // Stored property
 //     newValue.mDSNFileProposedName_property.addEBObserversFrom (&self.mObserversOf_mDSNFileProposedName) // Stored property
 //     newValue.mBoardLimitsWidth_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitsWidth) // Stored property
 //     newValue.mBoardLimitsWidthUnit_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitsWidthUnit) // Stored property
 //     newValue.mBoardClearance_property.addEBObserversFrom (&self.mObserversOf_mBoardClearance) // Stored property
 //     newValue.mBoardClearanceUnit_property.addEBObserversFrom (&self.mObserversOf_mBoardClearanceUnit) // Stored property
 //     newValue.mBoardLimitsSelectedInspector_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitsSelectedInspector) // Stored property
 //     newValue.mBoardLimitsHorizontalFlip_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitsHorizontalFlip) // Stored property
 //     newValue.mBoardLimitsVerticalFlip_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitsVerticalFlip) // Stored property
 //     newValue.mBoardLimitsGridStyle_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitsGridStyle) // Stored property
 //     newValue.mBoardLimitsGridDisplayFactor_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitsGridDisplayFactor) // Stored property
 //     newValue.mBoardLimitsZoom_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitsZoom) // Stored property
 //     newValue.mBoardLimitsGridStep_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitsGridStep) // Stored property
 //     newValue.mBoardLimitsGridStepUnit_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitsGridStepUnit) // Stored property
 //     newValue.mBoardLimitsBoundingBoxUnit_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitsBoundingBoxUnit) // Stored property
 //     newValue.mBoardPointsBoundingBoxUnit_property.addEBObserversFrom (&self.mObserversOf_mBoardPointsBoundingBoxUnit) // Stored property
 //     newValue.mBoardSelectedCurveDisplayUnit_property.addEBObserversFrom (&self.mObserversOf_mBoardSelectedCurveDisplayUnit) // Stored property
 //     newValue.mBoardLimitControlPointsDisplayUnit_property.addEBObserversFrom (&self.mObserversOf_mBoardLimitControlPointsDisplayUnit) // Stored property
 //     newValue.mBoardShape_property.addEBObserversFrom (&self.mObserversOf_mBoardShape) // Stored property
 //     newValue.mRectangularBoardWidth_property.addEBObserversFrom (&self.mObserversOf_mRectangularBoardWidth) // Stored property
 //     newValue.mRectangularBoardWidthUnit_property.addEBObserversFrom (&self.mObserversOf_mRectangularBoardWidthUnit) // Stored property
 //     newValue.mRectangularBoardHeight_property.addEBObserversFrom (&self.mObserversOf_mRectangularBoardHeight) // Stored property
 //     newValue.mRectangularBoardHeightUnit_property.addEBObserversFrom (&self.mObserversOf_mRectangularBoardHeightUnit) // Stored property
 //     newValue.mDefaultNetClassName_property.addEBObserversFrom (&self.mObserversOf_mDefaultNetClassName) // Stored property
 //     newValue.mSelectedPageIndex_property.addEBObserversFrom (&self.mObserversOf_mSelectedPageIndex) // Stored property
 //     newValue.mSelectedSchematicInspector_property.addEBObserversFrom (&self.mObserversOf_mSelectedSchematicInspector) // Stored property
 //     newValue.mSchematicTitle_property.addEBObserversFrom (&self.mObserversOf_mSchematicTitle) // Stored property
 //     newValue.mSchematicVersion_property.addEBObserversFrom (&self.mObserversOf_mSchematicVersion) // Stored property
 //     newValue.mSchematicDate_property.addEBObserversFrom (&self.mObserversOf_mSchematicDate) // Stored property
 //     newValue.mSchematicHorizontalFlip_property.addEBObserversFrom (&self.mObserversOf_mSchematicHorizontalFlip) // Stored property
 //     newValue.mSchematicVerticalFlip_property.addEBObserversFrom (&self.mObserversOf_mSchematicVerticalFlip) // Stored property
 //     newValue.mSchematicZoom_property.addEBObserversFrom (&self.mObserversOf_mSchematicZoom) // Stored property
 //     newValue.mSchematicGridStyle_property.addEBObserversFrom (&self.mObserversOf_mSchematicGridStyle) // Stored property
 //     newValue.mSchematicGridDisplayFactor_property.addEBObserversFrom (&self.mObserversOf_mSchematicGridDisplayFactor) // Stored property
 //     newValue.mSchematicCustomWidth_property.addEBObserversFrom (&self.mObserversOf_mSchematicCustomWidth) // Stored property
 //     newValue.mSchematicCustomWidthUnit_property.addEBObserversFrom (&self.mObserversOf_mSchematicCustomWidthUnit) // Stored property
 //     newValue.mSchematicCustomHeight_property.addEBObserversFrom (&self.mObserversOf_mSchematicCustomHeight) // Stored property
 //     newValue.mSchematicCustomHeightUnit_property.addEBObserversFrom (&self.mObserversOf_mSchematicCustomHeightUnit) // Stored property
 //     newValue.mSchematicSheetOrientation_property.addEBObserversFrom (&self.mObserversOf_mSchematicSheetOrientation) // Stored property
 //     newValue.mRastnetDisplay_property.addEBObserversFrom (&self.mObserversOf_mRastnetDisplay) // Stored property
 //     newValue.mRastnetDisplayedNetName_property.addEBObserversFrom (&self.mObserversOf_mRastnetDisplayedNetName) // Stored property
 //     newValue.mRastnetDisplayedComponentName_property.addEBObserversFrom (&self.mObserversOf_mRastnetDisplayedComponentName) // Stored property
      newValue.boardGridStepMultipliedByDisplayFactor_property.addEBObserversFrom (&self.mObserversOf_boardGridStepMultipliedByDisplayFactor) // Transient property
      newValue.boardLimitsGridStepMultipliedByDisplayFactor_property.addEBObserversFrom (&self.mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor) // Transient property
      newValue.boardShapeIsRectangular_property.addEBObserversFrom (&self.mObserversOf_boardShapeIsRectangular) // Transient property
      newValue.selectedSheetIssues_property.addEBObserversFrom (&self.mObserversOf_selectedSheetIssues) // Transient property
      newValue.connectedPoints_property.addEBObserversFrom (&self.mObserversOf_connectedPoints) // Transient property
      newValue.connexionWarningString_property.addEBObserversFrom (&self.mObserversOf_connexionWarningString) // Transient property
      newValue.connexionErrorString_property.addEBObserversFrom (&self.mObserversOf_connexionErrorString) // Transient property
      newValue.sheetIndexes_property.addEBObserversFrom (&self.mObserversOf_sheetIndexes) // Transient property
      newValue.netsDescription_property.addEBObserversFrom (&self.mObserversOf_netsDescription) // Transient property
      newValue.boardIssues_property.addEBObserversFrom (&self.mObserversOf_boardIssues) // Transient property
      newValue.signatureForERCChecking_property.addEBObserversFrom (&self.mObserversOf_signatureForERCChecking) // Transient property
      newValue.ercStatusImage_property.addEBObserversFrom (&self.mObserversOf_ercStatusImage) // Transient property
      newValue.ercStatusMessage_property.addEBObserversFrom (&self.mObserversOf_ercStatusMessage) // Transient property
      newValue.viaCountString_property.addEBObserversFrom (&self.mObserversOf_viaCountString) // Transient property
      newValue.trackCountString_property.addEBObserversFrom (&self.mObserversOf_trackCountString) // Transient property
      newValue.trackLengthString_property.addEBObserversFrom (&self.mObserversOf_trackLengthString) // Transient property
      newValue.boardStatusImage_property.addEBObserversFrom (&self.mObserversOf_boardStatusImage) // Transient property
      newValue.boardStatusMessage_property.addEBObserversFrom (&self.mObserversOf_boardStatusMessage) // Transient property
      newValue.interiorBoundBox_property.addEBObserversFrom (&self.mObserversOf_interiorBoundBox) // Transient property
      newValue.boardBoundBox_property.addEBObserversFrom (&self.mObserversOf_boardBoundBox) // Transient property
      newValue.boardInteriorTop_property.addEBObserversFrom (&self.mObserversOf_boardInteriorTop) // Transient property
      newValue.boardInteriorBottom_property.addEBObserversFrom (&self.mObserversOf_boardInteriorBottom) // Transient property
      newValue.boardInteriorLeft_property.addEBObserversFrom (&self.mObserversOf_boardInteriorLeft) // Transient property
      newValue.boardInteriorRight_property.addEBObserversFrom (&self.mObserversOf_boardInteriorRight) // Transient property
      newValue.boardLimitBorderTop_property.addEBObserversFrom (&self.mObserversOf_boardLimitBorderTop) // Transient property
      newValue.boardLimitBorderBottom_property.addEBObserversFrom (&self.mObserversOf_boardLimitBorderBottom) // Transient property
      newValue.boardLimitBorderLeft_property.addEBObserversFrom (&self.mObserversOf_boardLimitBorderLeft) // Transient property
      newValue.boardLimitBorderRight_property.addEBObserversFrom (&self.mObserversOf_boardLimitBorderRight) // Transient property
      newValue.borderElementCountString_property.addEBObserversFrom (&self.mObserversOf_borderElementCountString) // Transient property
      newValue.borderOutlineBackground_property.addEBObserversFrom (&self.mObserversOf_borderOutlineBackground) // Transient property
      newValue.borderViewBackground_property.addEBObserversFrom (&self.mObserversOf_borderViewBackground) // Transient property
      newValue.deviceNames_property.addEBObserversFrom (&self.mObserversOf_deviceNames) // Transient property
      newValue.allClassNames_property.addEBObserversFrom (&self.mObserversOf_allClassNames) // Transient property
      newValue.sheetGeometry_property.addEBObserversFrom (&self.mObserversOf_sheetGeometry) // Transient property
      newValue.schematicBackgroundDisplay_property.addEBObserversFrom (&self.mObserversOf_schematicBackgroundDisplay) // Transient property
      newValue.netWarningCount_property.addEBObserversFrom (&self.mObserversOf_netWarningCount) // Transient property
      newValue.netNamesArray_property.addEBObserversFrom (&self.mObserversOf_netNamesArray) // Transient property
      newValue.unplacedSymbols_property.addEBObserversFrom (&self.mObserversOf_unplacedSymbols) // Transient property
      newValue.unplacedPackages_property.addEBObserversFrom (&self.mObserversOf_unplacedPackages) // Transient property
      newValue.componentsPlacedInBoard_property.addEBObserversFrom (&self.mObserversOf_componentsPlacedInBoard) // Transient property
      newValue.placedComponentNameArray_property.addEBObserversFrom (&self.mObserversOf_placedComponentNameArray) // Transient property
      newValue.schematicHasErrorOrWarning_property.addEBObserversFrom (&self.mObserversOf_schematicHasErrorOrWarning) // Transient property
      newValue.schematicStatusMessage_property.addEBObserversFrom (&self.mObserversOf_schematicStatusMessage) // Transient property
      newValue.schematicStatusImage_property.addEBObserversFrom (&self.mObserversOf_schematicStatusImage) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mArtworkName' stored property
  //····················································································································

  private final var mArtworkName_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_mArtworkName = EBWeakEventSet ()

  //····················································································································

  final var mArtworkName_property_selection : EBSelection <String?> { // §
    return self.mArtworkName_property.selection
/*    if let model = self.propval {
      switch (model.mArtworkName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mArtworkName (_ inObserver : EBEvent) {
    self.mArtworkName_property.addEBObserver (inObserver)
/*    self.mObserversOf_mArtworkName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mArtworkName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mArtworkName (_ inObserver : EBEvent) {
    self.mArtworkName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mArtworkName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mArtworkName_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mArtworkVersion' stored property
  //····················································································································

  private final var mArtworkVersion_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mArtworkVersion = EBWeakEventSet ()

  //····················································································································

  final var mArtworkVersion_property_selection : EBSelection <Int?> { // §
    return self.mArtworkVersion_property.selection
/*    if let model = self.propval {
      switch (model.mArtworkVersion_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mArtworkVersion (_ inObserver : EBEvent) {
    self.mArtworkVersion_property.addEBObserver (inObserver)
/*    self.mObserversOf_mArtworkVersion.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mArtworkVersion_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mArtworkVersion (_ inObserver : EBEvent) {
    self.mArtworkVersion_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mArtworkVersion.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mArtworkVersion_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mPDFBoardBackgroundColor' stored property
  //····················································································································

  private final var mPDFBoardBackgroundColor_property = EBGenericTransientProperty <NSColor?> ()
//  private final var mObserversOf_mPDFBoardBackgroundColor = EBWeakEventSet ()

  //····················································································································

  final var mPDFBoardBackgroundColor_property_selection : EBSelection <NSColor?> { // §
    return self.mPDFBoardBackgroundColor_property.selection
/*    if let model = self.propval {
      switch (model.mPDFBoardBackgroundColor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mPDFBoardBackgroundColor (_ inObserver : EBEvent) {
    self.mPDFBoardBackgroundColor_property.addEBObserver (inObserver)
/*    self.mObserversOf_mPDFBoardBackgroundColor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mPDFBoardBackgroundColor_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mPDFBoardBackgroundColor (_ inObserver : EBEvent) {
    self.mPDFBoardBackgroundColor_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mPDFBoardBackgroundColor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mPDFBoardBackgroundColor_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mCheckClearanceBetweenPadsOfSameNet' stored property
  //····················································································································

  private final var mCheckClearanceBetweenPadsOfSameNet_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mCheckClearanceBetweenPadsOfSameNet = EBWeakEventSet ()

  //····················································································································

  final var mCheckClearanceBetweenPadsOfSameNet_property_selection : EBSelection <Bool?> { // §
    return self.mCheckClearanceBetweenPadsOfSameNet_property.selection
/*    if let model = self.propval {
      switch (model.mCheckClearanceBetweenPadsOfSameNet_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mCheckClearanceBetweenPadsOfSameNet (_ inObserver : EBEvent) {
    self.mCheckClearanceBetweenPadsOfSameNet_property.addEBObserver (inObserver)
/*    self.mObserversOf_mCheckClearanceBetweenPadsOfSameNet.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mCheckClearanceBetweenPadsOfSameNet_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mCheckClearanceBetweenPadsOfSameNet (_ inObserver : EBEvent) {
    self.mCheckClearanceBetweenPadsOfSameNet_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mCheckClearanceBetweenPadsOfSameNet.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mCheckClearanceBetweenPadsOfSameNet_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mLastERCCheckingIsSuccess' stored property
  //····················································································································

  private final var mLastERCCheckingIsSuccess_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mLastERCCheckingIsSuccess = EBWeakEventSet ()

  //····················································································································

  final var mLastERCCheckingIsSuccess_property_selection : EBSelection <Bool?> { // §
    return self.mLastERCCheckingIsSuccess_property.selection
/*    if let model = self.propval {
      switch (model.mLastERCCheckingIsSuccess_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mLastERCCheckingIsSuccess (_ inObserver : EBEvent) {
    self.mLastERCCheckingIsSuccess_property.addEBObserver (inObserver)
/*    self.mObserversOf_mLastERCCheckingIsSuccess.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mLastERCCheckingIsSuccess_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mLastERCCheckingIsSuccess (_ inObserver : EBEvent) {
    self.mLastERCCheckingIsSuccess_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mLastERCCheckingIsSuccess.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mLastERCCheckingIsSuccess_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mLastERCCheckingSignature' stored property
  //····················································································································

  private final var mLastERCCheckingSignature_property = EBGenericTransientProperty <UInt32?> ()
//  private final var mObserversOf_mLastERCCheckingSignature = EBWeakEventSet ()

  //····················································································································

  final var mLastERCCheckingSignature_property_selection : EBSelection <UInt32?> { // §
    return self.mLastERCCheckingSignature_property.selection
/*    if let model = self.propval {
      switch (model.mLastERCCheckingSignature_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mLastERCCheckingSignature (_ inObserver : EBEvent) {
    self.mLastERCCheckingSignature_property.addEBObserver (inObserver)
/*    self.mObserversOf_mLastERCCheckingSignature.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mLastERCCheckingSignature_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mLastERCCheckingSignature (_ inObserver : EBEvent) {
    self.mLastERCCheckingSignature_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mLastERCCheckingSignature.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mLastERCCheckingSignature_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardSideForNewTrack' stored property
  //····················································································································

  private final var mBoardSideForNewTrack_property = EBGenericTransientProperty <TrackSide?> ()
//  private final var mObserversOf_mBoardSideForNewTrack = EBWeakEventSet ()

  //····················································································································

  final var mBoardSideForNewTrack_property_selection : EBSelection <TrackSide?> { // §
    return self.mBoardSideForNewTrack_property.selection
/*    if let model = self.propval {
      switch (model.mBoardSideForNewTrack_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardSideForNewTrack (_ inObserver : EBEvent) {
    self.mBoardSideForNewTrack_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardSideForNewTrack.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardSideForNewTrack_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardSideForNewTrack (_ inObserver : EBEvent) {
    self.mBoardSideForNewTrack_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardSideForNewTrack.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardSideForNewTrack_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mDirectionForNewTrack' stored property
  //····················································································································

  private final var mDirectionForNewTrack_property = EBGenericTransientProperty <TrackCreationDirection?> ()
//  private final var mObserversOf_mDirectionForNewTrack = EBWeakEventSet ()

  //····················································································································

  final var mDirectionForNewTrack_property_selection : EBSelection <TrackCreationDirection?> { // §
    return self.mDirectionForNewTrack_property.selection
/*    if let model = self.propval {
      switch (model.mDirectionForNewTrack_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mDirectionForNewTrack (_ inObserver : EBEvent) {
    self.mDirectionForNewTrack_property.addEBObserver (inObserver)
/*    self.mObserversOf_mDirectionForNewTrack.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mDirectionForNewTrack_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mDirectionForNewTrack (_ inObserver : EBEvent) {
    self.mDirectionForNewTrack_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mDirectionForNewTrack.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mDirectionForNewTrack_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardLayerForNewText' stored property
  //····················································································································

  private final var mBoardLayerForNewText_property = EBGenericTransientProperty <BoardTextLayer?> ()
//  private final var mObserversOf_mBoardLayerForNewText = EBWeakEventSet ()

  //····················································································································

  final var mBoardLayerForNewText_property_selection : EBSelection <BoardTextLayer?> { // §
    return self.mBoardLayerForNewText_property.selection
/*    if let model = self.propval {
      switch (model.mBoardLayerForNewText_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardLayerForNewText (_ inObserver : EBEvent) {
    self.mBoardLayerForNewText_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardLayerForNewText.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLayerForNewText_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLayerForNewText (_ inObserver : EBEvent) {
    self.mBoardLayerForNewText_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardLayerForNewText.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLayerForNewText_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardLayerForNewLine' stored property
  //····················································································································

  private final var mBoardLayerForNewLine_property = EBGenericTransientProperty <BoardLineLayer?> ()
//  private final var mObserversOf_mBoardLayerForNewLine = EBWeakEventSet ()

  //····················································································································

  final var mBoardLayerForNewLine_property_selection : EBSelection <BoardLineLayer?> { // §
    return self.mBoardLayerForNewLine_property.selection
/*    if let model = self.propval {
      switch (model.mBoardLayerForNewLine_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardLayerForNewLine (_ inObserver : EBEvent) {
    self.mBoardLayerForNewLine_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardLayerForNewLine.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLayerForNewLine_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLayerForNewLine (_ inObserver : EBEvent) {
    self.mBoardLayerForNewLine_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardLayerForNewLine.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLayerForNewLine_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardSideForNewRestrictRectangle' stored property
  //····················································································································

  private final var mBoardSideForNewRestrictRectangle_property = EBGenericTransientProperty <RestrictRectangleLayer?> ()
//  private final var mObserversOf_mBoardSideForNewRestrictRectangle = EBWeakEventSet ()

  //····················································································································

  final var mBoardSideForNewRestrictRectangle_property_selection : EBSelection <RestrictRectangleLayer?> { // §
    return self.mBoardSideForNewRestrictRectangle_property.selection
/*    if let model = self.propval {
      switch (model.mBoardSideForNewRestrictRectangle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardSideForNewRestrictRectangle (_ inObserver : EBEvent) {
    self.mBoardSideForNewRestrictRectangle_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardSideForNewRestrictRectangle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardSideForNewRestrictRectangle_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardSideForNewRestrictRectangle (_ inObserver : EBEvent) {
    self.mBoardSideForNewRestrictRectangle_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardSideForNewRestrictRectangle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardSideForNewRestrictRectangle_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mAutoRouterPreferredDirections' stored property
  //····················································································································

  private final var mAutoRouterPreferredDirections_property = EBGenericTransientProperty <AutorouterPreferredDirections?> ()
//  private final var mObserversOf_mAutoRouterPreferredDirections = EBWeakEventSet ()

  //····················································································································

  final var mAutoRouterPreferredDirections_property_selection : EBSelection <AutorouterPreferredDirections?> { // §
    return self.mAutoRouterPreferredDirections_property.selection
/*    if let model = self.propval {
      switch (model.mAutoRouterPreferredDirections_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mAutoRouterPreferredDirections (_ inObserver : EBEvent) {
    self.mAutoRouterPreferredDirections_property.addEBObserver (inObserver)
/*    self.mObserversOf_mAutoRouterPreferredDirections.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mAutoRouterPreferredDirections_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mAutoRouterPreferredDirections (_ inObserver : EBEvent) {
    self.mAutoRouterPreferredDirections_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mAutoRouterPreferredDirections.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mAutoRouterPreferredDirections_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mAutorouterSnapAngle' stored property
  //····················································································································

  private final var mAutorouterSnapAngle_property = EBGenericTransientProperty <AutorouterSnapAngle?> ()
//  private final var mObserversOf_mAutorouterSnapAngle = EBWeakEventSet ()

  //····················································································································

  final var mAutorouterSnapAngle_property_selection : EBSelection <AutorouterSnapAngle?> { // §
    return self.mAutorouterSnapAngle_property.selection
/*    if let model = self.propval {
      switch (model.mAutorouterSnapAngle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mAutorouterSnapAngle (_ inObserver : EBEvent) {
    self.mAutorouterSnapAngle_property.addEBObserver (inObserver)
/*    self.mObserversOf_mAutorouterSnapAngle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mAutorouterSnapAngle_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mAutorouterSnapAngle (_ inObserver : EBEvent) {
    self.mAutorouterSnapAngle_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mAutorouterSnapAngle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mAutorouterSnapAngle_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mRouteDirection' stored property
  //····················································································································

  private final var mRouteDirection_property = EBGenericTransientProperty <RouteDirection?> ()
//  private final var mObserversOf_mRouteDirection = EBWeakEventSet ()

  //····················································································································

  final var mRouteDirection_property_selection : EBSelection <RouteDirection?> { // §
    return self.mRouteDirection_property.selection
/*    if let model = self.propval {
      switch (model.mRouteDirection_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mRouteDirection (_ inObserver : EBEvent) {
    self.mRouteDirection_property.addEBObserver (inObserver)
/*    self.mObserversOf_mRouteDirection.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mRouteDirection_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mRouteDirection (_ inObserver : EBEvent) {
    self.mRouteDirection_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mRouteDirection.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mRouteDirection_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mRouteOrigin' stored property
  //····················································································································

  private final var mRouteOrigin_property = EBGenericTransientProperty <RouteOrigin?> ()
//  private final var mObserversOf_mRouteOrigin = EBWeakEventSet ()

  //····················································································································

  final var mRouteOrigin_property_selection : EBSelection <RouteOrigin?> { // §
    return self.mRouteOrigin_property.selection
/*    if let model = self.propval {
      switch (model.mRouteOrigin_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mRouteOrigin (_ inObserver : EBEvent) {
    self.mRouteOrigin_property.addEBObserver (inObserver)
/*    self.mObserversOf_mRouteOrigin.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mRouteOrigin_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mRouteOrigin (_ inObserver : EBEvent) {
    self.mRouteOrigin_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mRouteOrigin.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mRouteOrigin_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mAutorouterInterfaceMode' stored property
  //····················································································································

  private final var mAutorouterInterfaceMode_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mAutorouterInterfaceMode = EBWeakEventSet ()

  //····················································································································

  final var mAutorouterInterfaceMode_property_selection : EBSelection <Int?> { // §
    return self.mAutorouterInterfaceMode_property.selection
/*    if let model = self.propval {
      switch (model.mAutorouterInterfaceMode_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mAutorouterInterfaceMode (_ inObserver : EBEvent) {
    self.mAutorouterInterfaceMode_property.addEBObserver (inObserver)
/*    self.mObserversOf_mAutorouterInterfaceMode.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mAutorouterInterfaceMode_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mAutorouterInterfaceMode (_ inObserver : EBEvent) {
    self.mAutorouterInterfaceMode_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mAutorouterInterfaceMode.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mAutorouterInterfaceMode_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mExportExistingTracksAndVias' stored property
  //····················································································································

  private final var mExportExistingTracksAndVias_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mExportExistingTracksAndVias = EBWeakEventSet ()

  //····················································································································

  final var mExportExistingTracksAndVias_property_selection : EBSelection <Bool?> { // §
    return self.mExportExistingTracksAndVias_property.selection
/*    if let model = self.propval {
      switch (model.mExportExistingTracksAndVias_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mExportExistingTracksAndVias (_ inObserver : EBEvent) {
    self.mExportExistingTracksAndVias_property.addEBObserver (inObserver)
/*    self.mObserversOf_mExportExistingTracksAndVias.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mExportExistingTracksAndVias_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mExportExistingTracksAndVias (_ inObserver : EBEvent) {
    self.mExportExistingTracksAndVias_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mExportExistingTracksAndVias.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mExportExistingTracksAndVias_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mTrackLengthUnit' stored property
  //····················································································································

  private final var mTrackLengthUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mTrackLengthUnit = EBWeakEventSet ()

  //····················································································································

  final var mTrackLengthUnit_property_selection : EBSelection <Int?> { // §
    return self.mTrackLengthUnit_property.selection
/*    if let model = self.propval {
      switch (model.mTrackLengthUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mTrackLengthUnit (_ inObserver : EBEvent) {
    self.mTrackLengthUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mTrackLengthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mTrackLengthUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mTrackLengthUnit (_ inObserver : EBEvent) {
    self.mTrackLengthUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mTrackLengthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mTrackLengthUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mLayoutClearance' stored property
  //····················································································································

  private final var mLayoutClearance_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mLayoutClearance = EBWeakEventSet ()

  //····················································································································

  final var mLayoutClearance_property_selection : EBSelection <Int?> { // §
    return self.mLayoutClearance_property.selection
/*    if let model = self.propval {
      switch (model.mLayoutClearance_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mLayoutClearance (_ inObserver : EBEvent) {
    self.mLayoutClearance_property.addEBObserver (inObserver)
/*    self.mObserversOf_mLayoutClearance.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mLayoutClearance_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mLayoutClearance (_ inObserver : EBEvent) {
    self.mLayoutClearance_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mLayoutClearance.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mLayoutClearance_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mLayoutClearanceUnit' stored property
  //····················································································································

  private final var mLayoutClearanceUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mLayoutClearanceUnit = EBWeakEventSet ()

  //····················································································································

  final var mLayoutClearanceUnit_property_selection : EBSelection <Int?> { // §
    return self.mLayoutClearanceUnit_property.selection
/*    if let model = self.propval {
      switch (model.mLayoutClearanceUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mLayoutClearanceUnit (_ inObserver : EBEvent) {
    self.mLayoutClearanceUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mLayoutClearanceUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mLayoutClearanceUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mLayoutClearanceUnit (_ inObserver : EBEvent) {
    self.mLayoutClearanceUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mLayoutClearanceUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mLayoutClearanceUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardSelectedInspector' stored property
  //····················································································································

  private final var mBoardSelectedInspector_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mBoardSelectedInspector = EBWeakEventSet ()

  //····················································································································

  final var mBoardSelectedInspector_property_selection : EBSelection <Int?> { // §
    return self.mBoardSelectedInspector_property.selection
/*    if let model = self.propval {
      switch (model.mBoardSelectedInspector_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardSelectedInspector (_ inObserver : EBEvent) {
    self.mBoardSelectedInspector_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardSelectedInspector.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardSelectedInspector_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardSelectedInspector (_ inObserver : EBEvent) {
    self.mBoardSelectedInspector_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardSelectedInspector.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardSelectedInspector_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardHorizontalFlip' stored property
  //····················································································································

  private final var mBoardHorizontalFlip_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mBoardHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  final var mBoardHorizontalFlip_property_selection : EBSelection <Bool?> { // §
    return self.mBoardHorizontalFlip_property.selection
/*    if let model = self.propval {
      switch (model.mBoardHorizontalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardHorizontalFlip (_ inObserver : EBEvent) {
    self.mBoardHorizontalFlip_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardHorizontalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardHorizontalFlip_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardHorizontalFlip (_ inObserver : EBEvent) {
    self.mBoardHorizontalFlip_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardHorizontalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardHorizontalFlip_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardVerticalFlip' stored property
  //····················································································································

  private final var mBoardVerticalFlip_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mBoardVerticalFlip = EBWeakEventSet ()

  //····················································································································

  final var mBoardVerticalFlip_property_selection : EBSelection <Bool?> { // §
    return self.mBoardVerticalFlip_property.selection
/*    if let model = self.propval {
      switch (model.mBoardVerticalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardVerticalFlip (_ inObserver : EBEvent) {
    self.mBoardVerticalFlip_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardVerticalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardVerticalFlip_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardVerticalFlip (_ inObserver : EBEvent) {
    self.mBoardVerticalFlip_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardVerticalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardVerticalFlip_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardGridStyle' stored property
  //····················································································································

  private final var mBoardGridStyle_property = EBGenericTransientProperty <GridStyle?> ()
//  private final var mObserversOf_mBoardGridStyle = EBWeakEventSet ()

  //····················································································································

  final var mBoardGridStyle_property_selection : EBSelection <GridStyle?> { // §
    return self.mBoardGridStyle_property.selection
/*    if let model = self.propval {
      switch (model.mBoardGridStyle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardGridStyle (_ inObserver : EBEvent) {
    self.mBoardGridStyle_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardGridStyle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardGridStyle_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardGridStyle (_ inObserver : EBEvent) {
    self.mBoardGridStyle_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardGridStyle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardGridStyle_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardGridDisplayFactor' stored property
  //····················································································································

  private final var mBoardGridDisplayFactor_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mBoardGridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final var mBoardGridDisplayFactor_property_selection : EBSelection <Int?> { // §
    return self.mBoardGridDisplayFactor_property.selection
/*    if let model = self.propval {
      switch (model.mBoardGridDisplayFactor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardGridDisplayFactor (_ inObserver : EBEvent) {
    self.mBoardGridDisplayFactor_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardGridDisplayFactor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardGridDisplayFactor_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardGridDisplayFactor (_ inObserver : EBEvent) {
    self.mBoardGridDisplayFactor_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardGridDisplayFactor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardGridDisplayFactor_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardZoom' stored property
  //····················································································································

  private final var mBoardZoom_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mBoardZoom = EBWeakEventSet ()

  //····················································································································

  final var mBoardZoom_property_selection : EBSelection <Int?> { // §
    return self.mBoardZoom_property.selection
/*    if let model = self.propval {
      switch (model.mBoardZoom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardZoom (_ inObserver : EBEvent) {
    self.mBoardZoom_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardZoom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardZoom_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardZoom (_ inObserver : EBEvent) {
    self.mBoardZoom_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardZoom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardZoom_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardGridStep' stored property
  //····················································································································

  private final var mBoardGridStep_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mBoardGridStep = EBWeakEventSet ()

  //····················································································································

  final var mBoardGridStep_property_selection : EBSelection <Int?> { // §
    return self.mBoardGridStep_property.selection
/*    if let model = self.propval {
      switch (model.mBoardGridStep_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardGridStep (_ inObserver : EBEvent) {
    self.mBoardGridStep_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardGridStep.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardGridStep_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardGridStep (_ inObserver : EBEvent) {
    self.mBoardGridStep_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardGridStep.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardGridStep_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardGridStepUnit' stored property
  //····················································································································

  private final var mBoardGridStepUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mBoardGridStepUnit = EBWeakEventSet ()

  //····················································································································

  final var mBoardGridStepUnit_property_selection : EBSelection <Int?> { // §
    return self.mBoardGridStepUnit_property.selection
/*    if let model = self.propval {
      switch (model.mBoardGridStepUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardGridStepUnit (_ inObserver : EBEvent) {
    self.mBoardGridStepUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardGridStepUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardGridStepUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardGridStepUnit (_ inObserver : EBEvent) {
    self.mBoardGridStepUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardGridStepUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardGridStepUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mErrorOrWarningIssueSize' stored property
  //····················································································································

  private final var mErrorOrWarningIssueSize_property = EBGenericTransientProperty <Double?> ()
//  private final var mObserversOf_mErrorOrWarningIssueSize = EBWeakEventSet ()

  //····················································································································

  final var mErrorOrWarningIssueSize_property_selection : EBSelection <Double?> { // §
    return self.mErrorOrWarningIssueSize_property.selection
/*    if let model = self.propval {
      switch (model.mErrorOrWarningIssueSize_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mErrorOrWarningIssueSize (_ inObserver : EBEvent) {
    self.mErrorOrWarningIssueSize_property.addEBObserver (inObserver)
/*    self.mObserversOf_mErrorOrWarningIssueSize.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mErrorOrWarningIssueSize_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mErrorOrWarningIssueSize (_ inObserver : EBEvent) {
    self.mErrorOrWarningIssueSize_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mErrorOrWarningIssueSize.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mErrorOrWarningIssueSize_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mControlKeyHiliteDiameter' stored property
  //····················································································································

  private final var mControlKeyHiliteDiameter_property = EBGenericTransientProperty <Double?> ()
//  private final var mObserversOf_mControlKeyHiliteDiameter = EBWeakEventSet ()

  //····················································································································

  final var mControlKeyHiliteDiameter_property_selection : EBSelection <Double?> { // §
    return self.mControlKeyHiliteDiameter_property.selection
/*    if let model = self.propval {
      switch (model.mControlKeyHiliteDiameter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mControlKeyHiliteDiameter (_ inObserver : EBEvent) {
    self.mControlKeyHiliteDiameter_property.addEBObserver (inObserver)
/*    self.mObserversOf_mControlKeyHiliteDiameter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mControlKeyHiliteDiameter_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mControlKeyHiliteDiameter (_ inObserver : EBEvent) {
    self.mControlKeyHiliteDiameter_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mControlKeyHiliteDiameter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mControlKeyHiliteDiameter_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mDSNFileProposedName' stored property
  //····················································································································

  private final var mDSNFileProposedName_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_mDSNFileProposedName = EBWeakEventSet ()

  //····················································································································

  final var mDSNFileProposedName_property_selection : EBSelection <String?> { // §
    return self.mDSNFileProposedName_property.selection
/*    if let model = self.propval {
      switch (model.mDSNFileProposedName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mDSNFileProposedName (_ inObserver : EBEvent) {
    self.mDSNFileProposedName_property.addEBObserver (inObserver)
/*    self.mObserversOf_mDSNFileProposedName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mDSNFileProposedName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mDSNFileProposedName (_ inObserver : EBEvent) {
    self.mDSNFileProposedName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mDSNFileProposedName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mDSNFileProposedName_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardLimitsWidth' stored property
  //····················································································································

  private final var mBoardLimitsWidth_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mBoardLimitsWidth = EBWeakEventSet ()

  //····················································································································

  final var mBoardLimitsWidth_property_selection : EBSelection <Int?> { // §
    return self.mBoardLimitsWidth_property.selection
/*    if let model = self.propval {
      switch (model.mBoardLimitsWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitsWidth (_ inObserver : EBEvent) {
    self.mBoardLimitsWidth_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitsWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitsWidth_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsWidth (_ inObserver : EBEvent) {
    self.mBoardLimitsWidth_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitsWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitsWidth_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardLimitsWidthUnit' stored property
  //····················································································································

  private final var mBoardLimitsWidthUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mBoardLimitsWidthUnit = EBWeakEventSet ()

  //····················································································································

  final var mBoardLimitsWidthUnit_property_selection : EBSelection <Int?> { // §
    return self.mBoardLimitsWidthUnit_property.selection
/*    if let model = self.propval {
      switch (model.mBoardLimitsWidthUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitsWidthUnit (_ inObserver : EBEvent) {
    self.mBoardLimitsWidthUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitsWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitsWidthUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsWidthUnit (_ inObserver : EBEvent) {
    self.mBoardLimitsWidthUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitsWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitsWidthUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardClearance' stored property
  //····················································································································

  private final var mBoardClearance_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mBoardClearance = EBWeakEventSet ()

  //····················································································································

  final var mBoardClearance_property_selection : EBSelection <Int?> { // §
    return self.mBoardClearance_property.selection
/*    if let model = self.propval {
      switch (model.mBoardClearance_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardClearance (_ inObserver : EBEvent) {
    self.mBoardClearance_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardClearance.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardClearance_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardClearance (_ inObserver : EBEvent) {
    self.mBoardClearance_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardClearance.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardClearance_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardClearanceUnit' stored property
  //····················································································································

  private final var mBoardClearanceUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mBoardClearanceUnit = EBWeakEventSet ()

  //····················································································································

  final var mBoardClearanceUnit_property_selection : EBSelection <Int?> { // §
    return self.mBoardClearanceUnit_property.selection
/*    if let model = self.propval {
      switch (model.mBoardClearanceUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardClearanceUnit (_ inObserver : EBEvent) {
    self.mBoardClearanceUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardClearanceUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardClearanceUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardClearanceUnit (_ inObserver : EBEvent) {
    self.mBoardClearanceUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardClearanceUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardClearanceUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardLimitsSelectedInspector' stored property
  //····················································································································

  private final var mBoardLimitsSelectedInspector_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mBoardLimitsSelectedInspector = EBWeakEventSet ()

  //····················································································································

  final var mBoardLimitsSelectedInspector_property_selection : EBSelection <Int?> { // §
    return self.mBoardLimitsSelectedInspector_property.selection
/*    if let model = self.propval {
      switch (model.mBoardLimitsSelectedInspector_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitsSelectedInspector (_ inObserver : EBEvent) {
    self.mBoardLimitsSelectedInspector_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitsSelectedInspector.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitsSelectedInspector_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsSelectedInspector (_ inObserver : EBEvent) {
    self.mBoardLimitsSelectedInspector_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitsSelectedInspector.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitsSelectedInspector_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardLimitsHorizontalFlip' stored property
  //····················································································································

  private final var mBoardLimitsHorizontalFlip_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mBoardLimitsHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  final var mBoardLimitsHorizontalFlip_property_selection : EBSelection <Bool?> { // §
    return self.mBoardLimitsHorizontalFlip_property.selection
/*    if let model = self.propval {
      switch (model.mBoardLimitsHorizontalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitsHorizontalFlip (_ inObserver : EBEvent) {
    self.mBoardLimitsHorizontalFlip_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitsHorizontalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitsHorizontalFlip_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsHorizontalFlip (_ inObserver : EBEvent) {
    self.mBoardLimitsHorizontalFlip_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitsHorizontalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitsHorizontalFlip_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardLimitsVerticalFlip' stored property
  //····················································································································

  private final var mBoardLimitsVerticalFlip_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mBoardLimitsVerticalFlip = EBWeakEventSet ()

  //····················································································································

  final var mBoardLimitsVerticalFlip_property_selection : EBSelection <Bool?> { // §
    return self.mBoardLimitsVerticalFlip_property.selection
/*    if let model = self.propval {
      switch (model.mBoardLimitsVerticalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitsVerticalFlip (_ inObserver : EBEvent) {
    self.mBoardLimitsVerticalFlip_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitsVerticalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitsVerticalFlip_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsVerticalFlip (_ inObserver : EBEvent) {
    self.mBoardLimitsVerticalFlip_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitsVerticalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitsVerticalFlip_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardLimitsGridStyle' stored property
  //····················································································································

  private final var mBoardLimitsGridStyle_property = EBGenericTransientProperty <GridStyle?> ()
//  private final var mObserversOf_mBoardLimitsGridStyle = EBWeakEventSet ()

  //····················································································································

  final var mBoardLimitsGridStyle_property_selection : EBSelection <GridStyle?> { // §
    return self.mBoardLimitsGridStyle_property.selection
/*    if let model = self.propval {
      switch (model.mBoardLimitsGridStyle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitsGridStyle (_ inObserver : EBEvent) {
    self.mBoardLimitsGridStyle_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitsGridStyle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitsGridStyle_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsGridStyle (_ inObserver : EBEvent) {
    self.mBoardLimitsGridStyle_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitsGridStyle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitsGridStyle_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardLimitsGridDisplayFactor' stored property
  //····················································································································

  private final var mBoardLimitsGridDisplayFactor_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mBoardLimitsGridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final var mBoardLimitsGridDisplayFactor_property_selection : EBSelection <Int?> { // §
    return self.mBoardLimitsGridDisplayFactor_property.selection
/*    if let model = self.propval {
      switch (model.mBoardLimitsGridDisplayFactor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitsGridDisplayFactor (_ inObserver : EBEvent) {
    self.mBoardLimitsGridDisplayFactor_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitsGridDisplayFactor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitsGridDisplayFactor_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsGridDisplayFactor (_ inObserver : EBEvent) {
    self.mBoardLimitsGridDisplayFactor_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitsGridDisplayFactor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitsGridDisplayFactor_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardLimitsZoom' stored property
  //····················································································································

  private final var mBoardLimitsZoom_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mBoardLimitsZoom = EBWeakEventSet ()

  //····················································································································

  final var mBoardLimitsZoom_property_selection : EBSelection <Int?> { // §
    return self.mBoardLimitsZoom_property.selection
/*    if let model = self.propval {
      switch (model.mBoardLimitsZoom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitsZoom (_ inObserver : EBEvent) {
    self.mBoardLimitsZoom_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitsZoom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitsZoom_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsZoom (_ inObserver : EBEvent) {
    self.mBoardLimitsZoom_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitsZoom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitsZoom_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardLimitsGridStep' stored property
  //····················································································································

  private final var mBoardLimitsGridStep_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mBoardLimitsGridStep = EBWeakEventSet ()

  //····················································································································

  final var mBoardLimitsGridStep_property_selection : EBSelection <Int?> { // §
    return self.mBoardLimitsGridStep_property.selection
/*    if let model = self.propval {
      switch (model.mBoardLimitsGridStep_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitsGridStep (_ inObserver : EBEvent) {
    self.mBoardLimitsGridStep_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitsGridStep.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitsGridStep_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsGridStep (_ inObserver : EBEvent) {
    self.mBoardLimitsGridStep_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitsGridStep.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitsGridStep_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardLimitsGridStepUnit' stored property
  //····················································································································

  private final var mBoardLimitsGridStepUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mBoardLimitsGridStepUnit = EBWeakEventSet ()

  //····················································································································

  final var mBoardLimitsGridStepUnit_property_selection : EBSelection <Int?> { // §
    return self.mBoardLimitsGridStepUnit_property.selection
/*    if let model = self.propval {
      switch (model.mBoardLimitsGridStepUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitsGridStepUnit (_ inObserver : EBEvent) {
    self.mBoardLimitsGridStepUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitsGridStepUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitsGridStepUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsGridStepUnit (_ inObserver : EBEvent) {
    self.mBoardLimitsGridStepUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitsGridStepUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitsGridStepUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardLimitsBoundingBoxUnit' stored property
  //····················································································································

  private final var mBoardLimitsBoundingBoxUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mBoardLimitsBoundingBoxUnit = EBWeakEventSet ()

  //····················································································································

  final var mBoardLimitsBoundingBoxUnit_property_selection : EBSelection <Int?> { // §
    return self.mBoardLimitsBoundingBoxUnit_property.selection
/*    if let model = self.propval {
      switch (model.mBoardLimitsBoundingBoxUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitsBoundingBoxUnit (_ inObserver : EBEvent) {
    self.mBoardLimitsBoundingBoxUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitsBoundingBoxUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitsBoundingBoxUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitsBoundingBoxUnit (_ inObserver : EBEvent) {
    self.mBoardLimitsBoundingBoxUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitsBoundingBoxUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitsBoundingBoxUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardPointsBoundingBoxUnit' stored property
  //····················································································································

  private final var mBoardPointsBoundingBoxUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mBoardPointsBoundingBoxUnit = EBWeakEventSet ()

  //····················································································································

  final var mBoardPointsBoundingBoxUnit_property_selection : EBSelection <Int?> { // §
    return self.mBoardPointsBoundingBoxUnit_property.selection
/*    if let model = self.propval {
      switch (model.mBoardPointsBoundingBoxUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardPointsBoundingBoxUnit (_ inObserver : EBEvent) {
    self.mBoardPointsBoundingBoxUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardPointsBoundingBoxUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardPointsBoundingBoxUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardPointsBoundingBoxUnit (_ inObserver : EBEvent) {
    self.mBoardPointsBoundingBoxUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardPointsBoundingBoxUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardPointsBoundingBoxUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardSelectedCurveDisplayUnit' stored property
  //····················································································································

  private final var mBoardSelectedCurveDisplayUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mBoardSelectedCurveDisplayUnit = EBWeakEventSet ()

  //····················································································································

  final var mBoardSelectedCurveDisplayUnit_property_selection : EBSelection <Int?> { // §
    return self.mBoardSelectedCurveDisplayUnit_property.selection
/*    if let model = self.propval {
      switch (model.mBoardSelectedCurveDisplayUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardSelectedCurveDisplayUnit (_ inObserver : EBEvent) {
    self.mBoardSelectedCurveDisplayUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardSelectedCurveDisplayUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardSelectedCurveDisplayUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardSelectedCurveDisplayUnit (_ inObserver : EBEvent) {
    self.mBoardSelectedCurveDisplayUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardSelectedCurveDisplayUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardSelectedCurveDisplayUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardLimitControlPointsDisplayUnit' stored property
  //····················································································································

  private final var mBoardLimitControlPointsDisplayUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mBoardLimitControlPointsDisplayUnit = EBWeakEventSet ()

  //····················································································································

  final var mBoardLimitControlPointsDisplayUnit_property_selection : EBSelection <Int?> { // §
    return self.mBoardLimitControlPointsDisplayUnit_property.selection
/*    if let model = self.propval {
      switch (model.mBoardLimitControlPointsDisplayUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardLimitControlPointsDisplayUnit (_ inObserver : EBEvent) {
    self.mBoardLimitControlPointsDisplayUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitControlPointsDisplayUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardLimitControlPointsDisplayUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardLimitControlPointsDisplayUnit (_ inObserver : EBEvent) {
    self.mBoardLimitControlPointsDisplayUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardLimitControlPointsDisplayUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardLimitControlPointsDisplayUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mBoardShape' stored property
  //····················································································································

  private final var mBoardShape_property = EBGenericTransientProperty <BoardShape?> ()
//  private final var mObserversOf_mBoardShape = EBWeakEventSet ()

  //····················································································································

  final var mBoardShape_property_selection : EBSelection <BoardShape?> { // §
    return self.mBoardShape_property.selection
/*    if let model = self.propval {
      switch (model.mBoardShape_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mBoardShape (_ inObserver : EBEvent) {
    self.mBoardShape_property.addEBObserver (inObserver)
/*    self.mObserversOf_mBoardShape.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mBoardShape_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mBoardShape (_ inObserver : EBEvent) {
    self.mBoardShape_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mBoardShape.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mBoardShape_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mRectangularBoardWidth' stored property
  //····················································································································

  private final var mRectangularBoardWidth_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mRectangularBoardWidth = EBWeakEventSet ()

  //····················································································································

  final var mRectangularBoardWidth_property_selection : EBSelection <Int?> { // §
    return self.mRectangularBoardWidth_property.selection
/*    if let model = self.propval {
      switch (model.mRectangularBoardWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mRectangularBoardWidth (_ inObserver : EBEvent) {
    self.mRectangularBoardWidth_property.addEBObserver (inObserver)
/*    self.mObserversOf_mRectangularBoardWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mRectangularBoardWidth_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mRectangularBoardWidth (_ inObserver : EBEvent) {
    self.mRectangularBoardWidth_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mRectangularBoardWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mRectangularBoardWidth_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mRectangularBoardWidthUnit' stored property
  //····················································································································

  private final var mRectangularBoardWidthUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mRectangularBoardWidthUnit = EBWeakEventSet ()

  //····················································································································

  final var mRectangularBoardWidthUnit_property_selection : EBSelection <Int?> { // §
    return self.mRectangularBoardWidthUnit_property.selection
/*    if let model = self.propval {
      switch (model.mRectangularBoardWidthUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mRectangularBoardWidthUnit (_ inObserver : EBEvent) {
    self.mRectangularBoardWidthUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mRectangularBoardWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mRectangularBoardWidthUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mRectangularBoardWidthUnit (_ inObserver : EBEvent) {
    self.mRectangularBoardWidthUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mRectangularBoardWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mRectangularBoardWidthUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mRectangularBoardHeight' stored property
  //····················································································································

  private final var mRectangularBoardHeight_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mRectangularBoardHeight = EBWeakEventSet ()

  //····················································································································

  final var mRectangularBoardHeight_property_selection : EBSelection <Int?> { // §
    return self.mRectangularBoardHeight_property.selection
/*    if let model = self.propval {
      switch (model.mRectangularBoardHeight_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mRectangularBoardHeight (_ inObserver : EBEvent) {
    self.mRectangularBoardHeight_property.addEBObserver (inObserver)
/*    self.mObserversOf_mRectangularBoardHeight.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mRectangularBoardHeight_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mRectangularBoardHeight (_ inObserver : EBEvent) {
    self.mRectangularBoardHeight_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mRectangularBoardHeight.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mRectangularBoardHeight_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mRectangularBoardHeightUnit' stored property
  //····················································································································

  private final var mRectangularBoardHeightUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mRectangularBoardHeightUnit = EBWeakEventSet ()

  //····················································································································

  final var mRectangularBoardHeightUnit_property_selection : EBSelection <Int?> { // §
    return self.mRectangularBoardHeightUnit_property.selection
/*    if let model = self.propval {
      switch (model.mRectangularBoardHeightUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mRectangularBoardHeightUnit (_ inObserver : EBEvent) {
    self.mRectangularBoardHeightUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mRectangularBoardHeightUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mRectangularBoardHeightUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mRectangularBoardHeightUnit (_ inObserver : EBEvent) {
    self.mRectangularBoardHeightUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mRectangularBoardHeightUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mRectangularBoardHeightUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mDefaultNetClassName' stored property
  //····················································································································

  private final var mDefaultNetClassName_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_mDefaultNetClassName = EBWeakEventSet ()

  //····················································································································

  final var mDefaultNetClassName_property_selection : EBSelection <String?> { // §
    return self.mDefaultNetClassName_property.selection
/*    if let model = self.propval {
      switch (model.mDefaultNetClassName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mDefaultNetClassName (_ inObserver : EBEvent) {
    self.mDefaultNetClassName_property.addEBObserver (inObserver)
/*    self.mObserversOf_mDefaultNetClassName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mDefaultNetClassName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mDefaultNetClassName (_ inObserver : EBEvent) {
    self.mDefaultNetClassName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mDefaultNetClassName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mDefaultNetClassName_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mSelectedPageIndex' stored property
  //····················································································································

  private final var mSelectedPageIndex_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mSelectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final var mSelectedPageIndex_property_selection : EBSelection <Int?> { // §
    return self.mSelectedPageIndex_property.selection
/*    if let model = self.propval {
      switch (model.mSelectedPageIndex_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.mSelectedPageIndex_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSelectedPageIndex.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSelectedPageIndex_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.mSelectedPageIndex_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSelectedPageIndex.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSelectedPageIndex_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mSelectedSchematicInspector' stored property
  //····················································································································

  private final var mSelectedSchematicInspector_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mSelectedSchematicInspector = EBWeakEventSet ()

  //····················································································································

  final var mSelectedSchematicInspector_property_selection : EBSelection <Int?> { // §
    return self.mSelectedSchematicInspector_property.selection
/*    if let model = self.propval {
      switch (model.mSelectedSchematicInspector_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mSelectedSchematicInspector (_ inObserver : EBEvent) {
    self.mSelectedSchematicInspector_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSelectedSchematicInspector.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSelectedSchematicInspector_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSelectedSchematicInspector (_ inObserver : EBEvent) {
    self.mSelectedSchematicInspector_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSelectedSchematicInspector.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSelectedSchematicInspector_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mSchematicTitle' stored property
  //····················································································································

  private final var mSchematicTitle_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_mSchematicTitle = EBWeakEventSet ()

  //····················································································································

  final var mSchematicTitle_property_selection : EBSelection <String?> { // §
    return self.mSchematicTitle_property.selection
/*    if let model = self.propval {
      switch (model.mSchematicTitle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mSchematicTitle (_ inObserver : EBEvent) {
    self.mSchematicTitle_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSchematicTitle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicTitle_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicTitle (_ inObserver : EBEvent) {
    self.mSchematicTitle_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSchematicTitle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicTitle_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mSchematicVersion' stored property
  //····················································································································

  private final var mSchematicVersion_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_mSchematicVersion = EBWeakEventSet ()

  //····················································································································

  final var mSchematicVersion_property_selection : EBSelection <String?> { // §
    return self.mSchematicVersion_property.selection
/*    if let model = self.propval {
      switch (model.mSchematicVersion_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mSchematicVersion (_ inObserver : EBEvent) {
    self.mSchematicVersion_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSchematicVersion.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicVersion_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicVersion (_ inObserver : EBEvent) {
    self.mSchematicVersion_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSchematicVersion.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicVersion_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mSchematicDate' stored property
  //····················································································································

  private final var mSchematicDate_property = EBGenericTransientProperty <Date?> ()
//  private final var mObserversOf_mSchematicDate = EBWeakEventSet ()

  //····················································································································

  final var mSchematicDate_property_selection : EBSelection <Date?> { // §
    return self.mSchematicDate_property.selection
/*    if let model = self.propval {
      switch (model.mSchematicDate_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mSchematicDate (_ inObserver : EBEvent) {
    self.mSchematicDate_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSchematicDate.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicDate_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicDate (_ inObserver : EBEvent) {
    self.mSchematicDate_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSchematicDate.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicDate_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mSchematicHorizontalFlip' stored property
  //····················································································································

  private final var mSchematicHorizontalFlip_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mSchematicHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  final var mSchematicHorizontalFlip_property_selection : EBSelection <Bool?> { // §
    return self.mSchematicHorizontalFlip_property.selection
/*    if let model = self.propval {
      switch (model.mSchematicHorizontalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mSchematicHorizontalFlip (_ inObserver : EBEvent) {
    self.mSchematicHorizontalFlip_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSchematicHorizontalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicHorizontalFlip_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicHorizontalFlip (_ inObserver : EBEvent) {
    self.mSchematicHorizontalFlip_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSchematicHorizontalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicHorizontalFlip_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mSchematicVerticalFlip' stored property
  //····················································································································

  private final var mSchematicVerticalFlip_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mSchematicVerticalFlip = EBWeakEventSet ()

  //····················································································································

  final var mSchematicVerticalFlip_property_selection : EBSelection <Bool?> { // §
    return self.mSchematicVerticalFlip_property.selection
/*    if let model = self.propval {
      switch (model.mSchematicVerticalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mSchematicVerticalFlip (_ inObserver : EBEvent) {
    self.mSchematicVerticalFlip_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSchematicVerticalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicVerticalFlip_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicVerticalFlip (_ inObserver : EBEvent) {
    self.mSchematicVerticalFlip_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSchematicVerticalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicVerticalFlip_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mSchematicZoom' stored property
  //····················································································································

  private final var mSchematicZoom_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mSchematicZoom = EBWeakEventSet ()

  //····················································································································

  final var mSchematicZoom_property_selection : EBSelection <Int?> { // §
    return self.mSchematicZoom_property.selection
/*    if let model = self.propval {
      switch (model.mSchematicZoom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mSchematicZoom (_ inObserver : EBEvent) {
    self.mSchematicZoom_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSchematicZoom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicZoom_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicZoom (_ inObserver : EBEvent) {
    self.mSchematicZoom_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSchematicZoom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicZoom_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mSchematicGridStyle' stored property
  //····················································································································

  private final var mSchematicGridStyle_property = EBGenericTransientProperty <GridStyle?> ()
//  private final var mObserversOf_mSchematicGridStyle = EBWeakEventSet ()

  //····················································································································

  final var mSchematicGridStyle_property_selection : EBSelection <GridStyle?> { // §
    return self.mSchematicGridStyle_property.selection
/*    if let model = self.propval {
      switch (model.mSchematicGridStyle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mSchematicGridStyle (_ inObserver : EBEvent) {
    self.mSchematicGridStyle_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSchematicGridStyle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicGridStyle_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicGridStyle (_ inObserver : EBEvent) {
    self.mSchematicGridStyle_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSchematicGridStyle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicGridStyle_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mSchematicGridDisplayFactor' stored property
  //····················································································································

  private final var mSchematicGridDisplayFactor_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mSchematicGridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final var mSchematicGridDisplayFactor_property_selection : EBSelection <Int?> { // §
    return self.mSchematicGridDisplayFactor_property.selection
/*    if let model = self.propval {
      switch (model.mSchematicGridDisplayFactor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mSchematicGridDisplayFactor (_ inObserver : EBEvent) {
    self.mSchematicGridDisplayFactor_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSchematicGridDisplayFactor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicGridDisplayFactor_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicGridDisplayFactor (_ inObserver : EBEvent) {
    self.mSchematicGridDisplayFactor_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSchematicGridDisplayFactor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicGridDisplayFactor_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mSchematicCustomWidth' stored property
  //····················································································································

  private final var mSchematicCustomWidth_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mSchematicCustomWidth = EBWeakEventSet ()

  //····················································································································

  final var mSchematicCustomWidth_property_selection : EBSelection <Int?> { // §
    return self.mSchematicCustomWidth_property.selection
/*    if let model = self.propval {
      switch (model.mSchematicCustomWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mSchematicCustomWidth (_ inObserver : EBEvent) {
    self.mSchematicCustomWidth_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSchematicCustomWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicCustomWidth_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicCustomWidth (_ inObserver : EBEvent) {
    self.mSchematicCustomWidth_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSchematicCustomWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicCustomWidth_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mSchematicCustomWidthUnit' stored property
  //····················································································································

  private final var mSchematicCustomWidthUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mSchematicCustomWidthUnit = EBWeakEventSet ()

  //····················································································································

  final var mSchematicCustomWidthUnit_property_selection : EBSelection <Int?> { // §
    return self.mSchematicCustomWidthUnit_property.selection
/*    if let model = self.propval {
      switch (model.mSchematicCustomWidthUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mSchematicCustomWidthUnit (_ inObserver : EBEvent) {
    self.mSchematicCustomWidthUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSchematicCustomWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicCustomWidthUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicCustomWidthUnit (_ inObserver : EBEvent) {
    self.mSchematicCustomWidthUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSchematicCustomWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicCustomWidthUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mSchematicCustomHeight' stored property
  //····················································································································

  private final var mSchematicCustomHeight_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mSchematicCustomHeight = EBWeakEventSet ()

  //····················································································································

  final var mSchematicCustomHeight_property_selection : EBSelection <Int?> { // §
    return self.mSchematicCustomHeight_property.selection
/*    if let model = self.propval {
      switch (model.mSchematicCustomHeight_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mSchematicCustomHeight (_ inObserver : EBEvent) {
    self.mSchematicCustomHeight_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSchematicCustomHeight.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicCustomHeight_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicCustomHeight (_ inObserver : EBEvent) {
    self.mSchematicCustomHeight_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSchematicCustomHeight.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicCustomHeight_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mSchematicCustomHeightUnit' stored property
  //····················································································································

  private final var mSchematicCustomHeightUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mSchematicCustomHeightUnit = EBWeakEventSet ()

  //····················································································································

  final var mSchematicCustomHeightUnit_property_selection : EBSelection <Int?> { // §
    return self.mSchematicCustomHeightUnit_property.selection
/*    if let model = self.propval {
      switch (model.mSchematicCustomHeightUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mSchematicCustomHeightUnit (_ inObserver : EBEvent) {
    self.mSchematicCustomHeightUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSchematicCustomHeightUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicCustomHeightUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicCustomHeightUnit (_ inObserver : EBEvent) {
    self.mSchematicCustomHeightUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSchematicCustomHeightUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicCustomHeightUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mSchematicSheetOrientation' stored property
  //····················································································································

  private final var mSchematicSheetOrientation_property = EBGenericTransientProperty <SchematicSheetOrientation?> ()
//  private final var mObserversOf_mSchematicSheetOrientation = EBWeakEventSet ()

  //····················································································································

  final var mSchematicSheetOrientation_property_selection : EBSelection <SchematicSheetOrientation?> { // §
    return self.mSchematicSheetOrientation_property.selection
/*    if let model = self.propval {
      switch (model.mSchematicSheetOrientation_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mSchematicSheetOrientation (_ inObserver : EBEvent) {
    self.mSchematicSheetOrientation_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSchematicSheetOrientation.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSchematicSheetOrientation_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSchematicSheetOrientation (_ inObserver : EBEvent) {
    self.mSchematicSheetOrientation_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSchematicSheetOrientation.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSchematicSheetOrientation_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mRastnetDisplay' stored property
  //····················································································································

  private final var mRastnetDisplay_property = EBGenericTransientProperty <RastnetDisplay?> ()
//  private final var mObserversOf_mRastnetDisplay = EBWeakEventSet ()

  //····················································································································

  final var mRastnetDisplay_property_selection : EBSelection <RastnetDisplay?> { // §
    return self.mRastnetDisplay_property.selection
/*    if let model = self.propval {
      switch (model.mRastnetDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mRastnetDisplay (_ inObserver : EBEvent) {
    self.mRastnetDisplay_property.addEBObserver (inObserver)
/*    self.mObserversOf_mRastnetDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mRastnetDisplay_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mRastnetDisplay (_ inObserver : EBEvent) {
    self.mRastnetDisplay_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mRastnetDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mRastnetDisplay_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mRastnetDisplayedNetName' stored property
  //····················································································································

  private final var mRastnetDisplayedNetName_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_mRastnetDisplayedNetName = EBWeakEventSet ()

  //····················································································································

  final var mRastnetDisplayedNetName_property_selection : EBSelection <String?> { // §
    return self.mRastnetDisplayedNetName_property.selection
/*    if let model = self.propval {
      switch (model.mRastnetDisplayedNetName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mRastnetDisplayedNetName (_ inObserver : EBEvent) {
    self.mRastnetDisplayedNetName_property.addEBObserver (inObserver)
/*    self.mObserversOf_mRastnetDisplayedNetName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mRastnetDisplayedNetName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mRastnetDisplayedNetName (_ inObserver : EBEvent) {
    self.mRastnetDisplayedNetName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mRastnetDisplayedNetName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mRastnetDisplayedNetName_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mRastnetDisplayedComponentName' stored property
  //····················································································································

  private final var mRastnetDisplayedComponentName_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_mRastnetDisplayedComponentName = EBWeakEventSet ()

  //····················································································································

  final var mRastnetDisplayedComponentName_property_selection : EBSelection <String?> { // §
    return self.mRastnetDisplayedComponentName_property.selection
/*    if let model = self.propval {
      switch (model.mRastnetDisplayedComponentName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mRastnetDisplayedComponentName (_ inObserver : EBEvent) {
    self.mRastnetDisplayedComponentName_property.addEBObserver (inObserver)
/*    self.mObserversOf_mRastnetDisplayedComponentName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mRastnetDisplayedComponentName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mRastnetDisplayedComponentName (_ inObserver : EBEvent) {
    self.mRastnetDisplayedComponentName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mRastnetDisplayedComponentName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mRastnetDisplayedComponentName_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'boardGridStepMultipliedByDisplayFactor' transient property
  //····················································································································

  private final var mObserversOf_boardGridStepMultipliedByDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final var boardGridStepMultipliedByDisplayFactor_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardGridStepMultipliedByDisplayFactor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardGridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardGridStepMultipliedByDisplayFactor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardGridStepMultipliedByDisplayFactor_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardGridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardGridStepMultipliedByDisplayFactor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardGridStepMultipliedByDisplayFactor_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardLimitsGridStepMultipliedByDisplayFactor' transient property
  //····················································································································

  private final var mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final var boardLimitsGridStepMultipliedByDisplayFactor_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.boardLimitsGridStepMultipliedByDisplayFactor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitsGridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitsGridStepMultipliedByDisplayFactor_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitsGridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitsGridStepMultipliedByDisplayFactor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitsGridStepMultipliedByDisplayFactor_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardShapeIsRectangular' transient property
  //····················································································································

  private final var mObserversOf_boardShapeIsRectangular = EBWeakEventSet ()

  //····················································································································

  final var boardShapeIsRectangular_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.boardShapeIsRectangular_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardShapeIsRectangular (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardShapeIsRectangular.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardShapeIsRectangular_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardShapeIsRectangular (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardShapeIsRectangular.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardShapeIsRectangular_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'selectedSheetIssues' transient property
  //····················································································································

  private final var mObserversOf_selectedSheetIssues = EBWeakEventSet ()

  //····················································································································

  final var selectedSheetIssues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.selectedSheetIssues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedSheetIssues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedSheetIssues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedSheetIssues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedSheetIssues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedSheetIssues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedSheetIssues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'connectedPoints' transient property
  //····················································································································

  private final var mObserversOf_connectedPoints = EBWeakEventSet ()

  //····················································································································

  final var connectedPoints_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.connectedPoints_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connectedPoints.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connectedPoints_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connectedPoints.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connectedPoints_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'connexionWarningString' transient property
  //····················································································································

  private final var mObserversOf_connexionWarningString = EBWeakEventSet ()

  //····················································································································

  final var connexionWarningString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.connexionWarningString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_connexionWarningString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connexionWarningString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connexionWarningString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_connexionWarningString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connexionWarningString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connexionWarningString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'connexionErrorString' transient property
  //····················································································································

  private final var mObserversOf_connexionErrorString = EBWeakEventSet ()

  //····················································································································

  final var connexionErrorString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.connexionErrorString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_connexionErrorString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connexionErrorString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connexionErrorString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_connexionErrorString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connexionErrorString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connexionErrorString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'sheetIndexes' transient property
  //····················································································································

  private final var mObserversOf_sheetIndexes = EBWeakEventSet ()

  //····················································································································

  final var sheetIndexes_property_selection : EBSelection <IntArray?> {
    if let model = self.propval {
      switch (model.sheetIndexes_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_sheetIndexes (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_sheetIndexes.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.sheetIndexes_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_sheetIndexes (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_sheetIndexes.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.sheetIndexes_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'netsDescription' transient property
  //····················································································································

  private final var mObserversOf_netsDescription = EBWeakEventSet ()

  //····················································································································

  final var netsDescription_property_selection : EBSelection <NetInfoArray?> {
    if let model = self.propval {
      switch (model.netsDescription_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_netsDescription (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netsDescription.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netsDescription_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_netsDescription (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netsDescription.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netsDescription_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardIssues' transient property
  //····················································································································

  private final var mObserversOf_boardIssues = EBWeakEventSet ()

  //····················································································································

  final var boardIssues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.boardIssues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardIssues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardIssues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardIssues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardIssues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardIssues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardIssues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  private final var mObserversOf_signatureForERCChecking = EBWeakEventSet ()

  //····················································································································

  final var signatureForERCChecking_property_selection : EBSelection <UInt32?> {
    if let model = self.propval {
      switch (model.signatureForERCChecking_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_signatureForERCChecking (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_signatureForERCChecking.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.signatureForERCChecking_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_signatureForERCChecking (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_signatureForERCChecking.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.signatureForERCChecking_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'ercStatusImage' transient property
  //····················································································································

  private final var mObserversOf_ercStatusImage = EBWeakEventSet ()

  //····················································································································

  final var ercStatusImage_property_selection : EBSelection <NSImage?> {
    if let model = self.propval {
      switch (model.ercStatusImage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_ercStatusImage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_ercStatusImage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.ercStatusImage_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_ercStatusImage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_ercStatusImage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.ercStatusImage_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'ercStatusMessage' transient property
  //····················································································································

  private final var mObserversOf_ercStatusMessage = EBWeakEventSet ()

  //····················································································································

  final var ercStatusMessage_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.ercStatusMessage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_ercStatusMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_ercStatusMessage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.ercStatusMessage_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_ercStatusMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_ercStatusMessage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.ercStatusMessage_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'viaCountString' transient property
  //····················································································································

  private final var mObserversOf_viaCountString = EBWeakEventSet ()

  //····················································································································

  final var viaCountString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.viaCountString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_viaCountString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_viaCountString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.viaCountString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaCountString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_viaCountString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.viaCountString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'trackCountString' transient property
  //····················································································································

  private final var mObserversOf_trackCountString = EBWeakEventSet ()

  //····················································································································

  final var trackCountString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.trackCountString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_trackCountString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_trackCountString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.trackCountString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_trackCountString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_trackCountString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.trackCountString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'trackLengthString' transient property
  //····················································································································

  private final var mObserversOf_trackLengthString = EBWeakEventSet ()

  //····················································································································

  final var trackLengthString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.trackLengthString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_trackLengthString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_trackLengthString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.trackLengthString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_trackLengthString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_trackLengthString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.trackLengthString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardStatusImage' transient property
  //····················································································································

  private final var mObserversOf_boardStatusImage = EBWeakEventSet ()

  //····················································································································

  final var boardStatusImage_property_selection : EBSelection <NSImage?> {
    if let model = self.propval {
      switch (model.boardStatusImage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardStatusImage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardStatusImage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardStatusImage_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardStatusImage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardStatusImage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardStatusImage_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardStatusMessage' transient property
  //····················································································································

  private final var mObserversOf_boardStatusMessage = EBWeakEventSet ()

  //····················································································································

  final var boardStatusMessage_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.boardStatusMessage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardStatusMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardStatusMessage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardStatusMessage_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardStatusMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardStatusMessage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardStatusMessage_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'interiorBoundBox' transient property
  //····················································································································

  private final var mObserversOf_interiorBoundBox = EBWeakEventSet ()

  //····················································································································

  final var interiorBoundBox_property_selection : EBSelection <CanariRect?> {
    if let model = self.propval {
      switch (model.interiorBoundBox_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_interiorBoundBox (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_interiorBoundBox.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.interiorBoundBox_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_interiorBoundBox (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_interiorBoundBox.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.interiorBoundBox_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardBoundBox' transient property
  //····················································································································

  private final var mObserversOf_boardBoundBox = EBWeakEventSet ()

  //····················································································································

  final var boardBoundBox_property_selection : EBSelection <CanariRect?> {
    if let model = self.propval {
      switch (model.boardBoundBox_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardBoundBox (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardBoundBox.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardBoundBox_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardBoundBox (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardBoundBox.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardBoundBox_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardInteriorTop' transient property
  //····················································································································

  private final var mObserversOf_boardInteriorTop = EBWeakEventSet ()

  //····················································································································

  final var boardInteriorTop_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.boardInteriorTop_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardInteriorTop (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardInteriorTop.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardInteriorTop_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardInteriorTop (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardInteriorTop.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardInteriorTop_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardInteriorBottom' transient property
  //····················································································································

  private final var mObserversOf_boardInteriorBottom = EBWeakEventSet ()

  //····················································································································

  final var boardInteriorBottom_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.boardInteriorBottom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardInteriorBottom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardInteriorBottom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardInteriorBottom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardInteriorBottom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardInteriorBottom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardInteriorBottom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardInteriorLeft' transient property
  //····················································································································

  private final var mObserversOf_boardInteriorLeft = EBWeakEventSet ()

  //····················································································································

  final var boardInteriorLeft_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.boardInteriorLeft_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardInteriorLeft (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardInteriorLeft.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardInteriorLeft_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardInteriorLeft (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardInteriorLeft.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardInteriorLeft_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardInteriorRight' transient property
  //····················································································································

  private final var mObserversOf_boardInteriorRight = EBWeakEventSet ()

  //····················································································································

  final var boardInteriorRight_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.boardInteriorRight_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardInteriorRight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardInteriorRight.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardInteriorRight_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardInteriorRight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardInteriorRight.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardInteriorRight_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardLimitBorderTop' transient property
  //····················································································································

  private final var mObserversOf_boardLimitBorderTop = EBWeakEventSet ()

  //····················································································································

  final var boardLimitBorderTop_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.boardLimitBorderTop_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitBorderTop (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderTop.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitBorderTop_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitBorderTop (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderTop.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitBorderTop_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardLimitBorderBottom' transient property
  //····················································································································

  private final var mObserversOf_boardLimitBorderBottom = EBWeakEventSet ()

  //····················································································································

  final var boardLimitBorderBottom_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.boardLimitBorderBottom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitBorderBottom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderBottom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitBorderBottom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitBorderBottom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderBottom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitBorderBottom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardLimitBorderLeft' transient property
  //····················································································································

  private final var mObserversOf_boardLimitBorderLeft = EBWeakEventSet ()

  //····················································································································

  final var boardLimitBorderLeft_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.boardLimitBorderLeft_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitBorderLeft (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderLeft.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitBorderLeft_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitBorderLeft (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderLeft.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitBorderLeft_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'boardLimitBorderRight' transient property
  //····················································································································

  private final var mObserversOf_boardLimitBorderRight = EBWeakEventSet ()

  //····················································································································

  final var boardLimitBorderRight_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.boardLimitBorderRight_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_boardLimitBorderRight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderRight.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitBorderRight_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_boardLimitBorderRight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_boardLimitBorderRight.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.boardLimitBorderRight_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'borderElementCountString' transient property
  //····················································································································

  private final var mObserversOf_borderElementCountString = EBWeakEventSet ()

  //····················································································································

  final var borderElementCountString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.borderElementCountString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_borderElementCountString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_borderElementCountString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.borderElementCountString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_borderElementCountString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_borderElementCountString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.borderElementCountString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'borderOutlineBackground' transient property
  //····················································································································

  private final var mObserversOf_borderOutlineBackground = EBWeakEventSet ()

  //····················································································································

  final var borderOutlineBackground_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.borderOutlineBackground_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_borderOutlineBackground (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_borderOutlineBackground.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.borderOutlineBackground_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_borderOutlineBackground (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_borderOutlineBackground.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.borderOutlineBackground_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'borderViewBackground' transient property
  //····················································································································

  private final var mObserversOf_borderViewBackground = EBWeakEventSet ()

  //····················································································································

  final var borderViewBackground_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.borderViewBackground_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_borderViewBackground (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_borderViewBackground.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.borderViewBackground_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_borderViewBackground (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_borderViewBackground.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.borderViewBackground_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'deviceNames' transient property
  //····················································································································

  private final var mObserversOf_deviceNames = EBWeakEventSet ()

  //····················································································································

  final var deviceNames_property_selection : EBSelection <StringArray?> {
    if let model = self.propval {
      switch (model.deviceNames_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_deviceNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_deviceNames.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.deviceNames_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_deviceNames.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.deviceNames_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'allClassNames' transient property
  //····················································································································

  private final var mObserversOf_allClassNames = EBWeakEventSet ()

  //····················································································································

  final var allClassNames_property_selection : EBSelection <StringArray?> {
    if let model = self.propval {
      switch (model.allClassNames_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_allClassNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_allClassNames.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.allClassNames_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_allClassNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_allClassNames.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.allClassNames_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'sheetGeometry' transient property
  //····················································································································

  private final var mObserversOf_sheetGeometry = EBWeakEventSet ()

  //····················································································································

  final var sheetGeometry_property_selection : EBSelection <SchematicSheetGeometry?> {
    if let model = self.propval {
      switch (model.sheetGeometry_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_sheetGeometry (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_sheetGeometry.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.sheetGeometry_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_sheetGeometry (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_sheetGeometry.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.sheetGeometry_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'schematicBackgroundDisplay' transient property
  //····················································································································

  private final var mObserversOf_schematicBackgroundDisplay = EBWeakEventSet ()

  //····················································································································

  final var schematicBackgroundDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.schematicBackgroundDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_schematicBackgroundDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_schematicBackgroundDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.schematicBackgroundDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_schematicBackgroundDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_schematicBackgroundDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.schematicBackgroundDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'netWarningCount' transient property
  //····················································································································

  private final var mObserversOf_netWarningCount = EBWeakEventSet ()

  //····················································································································

  final var netWarningCount_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.netWarningCount_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_netWarningCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netWarningCount.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netWarningCount_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_netWarningCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netWarningCount.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netWarningCount_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'netNamesArray' transient property
  //····················································································································

  private final var mObserversOf_netNamesArray = EBWeakEventSet ()

  //····················································································································

  final var netNamesArray_property_selection : EBSelection <StringArray?> {
    if let model = self.propval {
      switch (model.netNamesArray_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_netNamesArray (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netNamesArray.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netNamesArray_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_netNamesArray (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netNamesArray.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netNamesArray_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'unplacedSymbols' transient property
  //····················································································································

  private final var mObserversOf_unplacedSymbols = EBWeakEventSet ()

  //····················································································································

  final var unplacedSymbols_property_selection : EBSelection <StringTagArray?> {
    if let model = self.propval {
      switch (model.unplacedSymbols_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.unplacedSymbols_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.unplacedSymbols_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'unplacedPackages' transient property
  //····················································································································

  private final var mObserversOf_unplacedPackages = EBWeakEventSet ()

  //····················································································································

  final var unplacedPackages_property_selection : EBSelection <StringTagArray?> {
    if let model = self.propval {
      switch (model.unplacedPackages_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_unplacedPackages (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unplacedPackages.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.unplacedPackages_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_unplacedPackages (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unplacedPackages.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.unplacedPackages_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'componentsPlacedInBoard' transient property
  //····················································································································

  private final var mObserversOf_componentsPlacedInBoard = EBWeakEventSet ()

  //····················································································································

  final var componentsPlacedInBoard_property_selection : EBSelection <StringTagArray?> {
    if let model = self.propval {
      switch (model.componentsPlacedInBoard_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_componentsPlacedInBoard (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_componentsPlacedInBoard.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.componentsPlacedInBoard_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_componentsPlacedInBoard (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_componentsPlacedInBoard.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.componentsPlacedInBoard_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'placedComponentNameArray' transient property
  //····················································································································

  private final var mObserversOf_placedComponentNameArray = EBWeakEventSet ()

  //····················································································································

  final var placedComponentNameArray_property_selection : EBSelection <StringArray?> {
    if let model = self.propval {
      switch (model.placedComponentNameArray_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_placedComponentNameArray (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_placedComponentNameArray.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.placedComponentNameArray_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_placedComponentNameArray (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_placedComponentNameArray.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.placedComponentNameArray_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'schematicHasErrorOrWarning' transient property
  //····················································································································

  private final var mObserversOf_schematicHasErrorOrWarning = EBWeakEventSet ()

  //····················································································································

  final var schematicHasErrorOrWarning_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.schematicHasErrorOrWarning_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_schematicHasErrorOrWarning (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_schematicHasErrorOrWarning.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.schematicHasErrorOrWarning_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_schematicHasErrorOrWarning (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_schematicHasErrorOrWarning.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.schematicHasErrorOrWarning_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'schematicStatusMessage' transient property
  //····················································································································

  private final var mObserversOf_schematicStatusMessage = EBWeakEventSet ()

  //····················································································································

  final var schematicStatusMessage_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.schematicStatusMessage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_schematicStatusMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_schematicStatusMessage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.schematicStatusMessage_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_schematicStatusMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_schematicStatusMessage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.schematicStatusMessage_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'schematicStatusImage' transient property
  //····················································································································

  private final var mObserversOf_schematicStatusImage = EBWeakEventSet ()

  //····················································································································

  final var schematicStatusImage_property_selection : EBSelection <NSImage?> {
    if let model = self.propval {
      switch (model.schematicStatusImage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_schematicStatusImage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_schematicStatusImage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.schematicStatusImage_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_schematicStatusImage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_schematicStatusImage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.schematicStatusImage_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mSheets
  //····················································································································

  private final var mObserversOf_mSheets = EBWeakEventSet ()

  //····················································································································

  final var mSheets_property_selection : EBSelection <[SheetInProject]> {
    if let model = self.propval {
      switch (model.mSheets_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mSheets (_ inObserver : EBEvent) {
    self.mObserversOf_mSheets.insert (inObserver)
    if let object = self.propval {
      object.mSheets_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSheets (_ inObserver : EBEvent) {
    self.mObserversOf_mSheets.remove (inObserver)
    if let object = self.propval {
      object.mSheets_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mNetClasses
  //····················································································································

  private final var mObserversOf_mNetClasses = EBWeakEventSet ()

  //····················································································································

  final var mNetClasses_property_selection : EBSelection <[NetClassInProject]> {
    if let model = self.propval {
      switch (model.mNetClasses_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mNetClasses (_ inObserver : EBEvent) {
    self.mObserversOf_mNetClasses.insert (inObserver)
    if let object = self.propval {
      object.mNetClasses_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetClasses (_ inObserver : EBEvent) {
    self.mObserversOf_mNetClasses.remove (inObserver)
    if let object = self.propval {
      object.mNetClasses_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mFonts
  //····················································································································

  private final var mObserversOf_mFonts = EBWeakEventSet ()

  //····················································································································

  final var mFonts_property_selection : EBSelection <[FontInProject]> {
    if let model = self.propval {
      switch (model.mFonts_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mFonts (_ inObserver : EBEvent) {
    self.mObserversOf_mFonts.insert (inObserver)
    if let object = self.propval {
      object.mFonts_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mFonts (_ inObserver : EBEvent) {
    self.mObserversOf_mFonts.remove (inObserver)
    if let object = self.propval {
      object.mFonts_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mDevices
  //····················································································································

  private final var mObserversOf_mDevices = EBWeakEventSet ()

  //····················································································································

  final var mDevices_property_selection : EBSelection <[DeviceInProject]> {
    if let model = self.propval {
      switch (model.mDevices_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mDevices (_ inObserver : EBEvent) {
    self.mObserversOf_mDevices.insert (inObserver)
    if let object = self.propval {
      object.mDevices_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDevices (_ inObserver : EBEvent) {
    self.mObserversOf_mDevices.remove (inObserver)
    if let object = self.propval {
      object.mDevices_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mBorderCurves
  //····················································································································

  private final var mObserversOf_mBorderCurves = EBWeakEventSet ()

  //····················································································································

  final var mBorderCurves_property_selection : EBSelection <[BorderCurve]> {
    if let model = self.propval {
      switch (model.mBorderCurves_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mBorderCurves (_ inObserver : EBEvent) {
    self.mObserversOf_mBorderCurves.insert (inObserver)
    if let object = self.propval {
      object.mBorderCurves_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBorderCurves (_ inObserver : EBEvent) {
    self.mObserversOf_mBorderCurves.remove (inObserver)
    if let object = self.propval {
      object.mBorderCurves_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mBoardObjects
  //····················································································································

  private final var mObserversOf_mBoardObjects = EBWeakEventSet ()

  //····················································································································

  final var mBoardObjects_property_selection : EBSelection <[BoardObject]> {
    if let model = self.propval {
      switch (model.mBoardObjects_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mBoardObjects (_ inObserver : EBEvent) {
    self.mObserversOf_mBoardObjects.insert (inObserver)
    if let object = self.propval {
      object.mBoardObjects_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardObjects (_ inObserver : EBEvent) {
    self.mObserversOf_mBoardObjects.remove (inObserver)
    if let object = self.propval {
      object.mBoardObjects_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mComponents
  //····················································································································

  private final var mObserversOf_mComponents = EBWeakEventSet ()

  //····················································································································

  final var mComponents_property_selection : EBSelection <[ComponentInProject]> {
    if let model = self.propval {
      switch (model.mComponents_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mComponents (_ inObserver : EBEvent) {
    self.mObserversOf_mComponents.insert (inObserver)
    if let object = self.propval {
      object.mComponents_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComponents (_ inObserver : EBEvent) {
    self.mObserversOf_mComponents.remove (inObserver)
    if let object = self.propval {
      object.mComponents_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT 
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mArtworkName simple stored property
    self.mArtworkName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mArtworkName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mArtworkName_property)
  //--- Configure mArtworkVersion simple stored property
    self.mArtworkVersion_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mArtworkVersion_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mArtworkVersion_property)
  //--- Configure mPDFBoardBackgroundColor simple stored property
    self.mPDFBoardBackgroundColor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mPDFBoardBackgroundColor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mPDFBoardBackgroundColor_property)
  //--- Configure mCheckClearanceBetweenPadsOfSameNet simple stored property
    self.mCheckClearanceBetweenPadsOfSameNet_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mCheckClearanceBetweenPadsOfSameNet_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mCheckClearanceBetweenPadsOfSameNet_property)
  //--- Configure mLastERCCheckingIsSuccess simple stored property
    self.mLastERCCheckingIsSuccess_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mLastERCCheckingIsSuccess_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mLastERCCheckingIsSuccess_property)
  //--- Configure mLastERCCheckingSignature simple stored property
    self.mLastERCCheckingSignature_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mLastERCCheckingSignature_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mLastERCCheckingSignature_property)
  //--- Configure mBoardSideForNewTrack simple stored property
    self.mBoardSideForNewTrack_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardSideForNewTrack_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardSideForNewTrack_property)
  //--- Configure mDirectionForNewTrack simple stored property
    self.mDirectionForNewTrack_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mDirectionForNewTrack_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mDirectionForNewTrack_property)
  //--- Configure mBoardLayerForNewText simple stored property
    self.mBoardLayerForNewText_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLayerForNewText_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardLayerForNewText_property)
  //--- Configure mBoardLayerForNewLine simple stored property
    self.mBoardLayerForNewLine_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLayerForNewLine_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardLayerForNewLine_property)
  //--- Configure mBoardSideForNewRestrictRectangle simple stored property
    self.mBoardSideForNewRestrictRectangle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardSideForNewRestrictRectangle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardSideForNewRestrictRectangle_property)
  //--- Configure mAutoRouterPreferredDirections simple stored property
    self.mAutoRouterPreferredDirections_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mAutoRouterPreferredDirections_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mAutoRouterPreferredDirections_property)
  //--- Configure mAutorouterSnapAngle simple stored property
    self.mAutorouterSnapAngle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mAutorouterSnapAngle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mAutorouterSnapAngle_property)
  //--- Configure mRouteDirection simple stored property
    self.mRouteDirection_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mRouteDirection_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mRouteDirection_property)
  //--- Configure mRouteOrigin simple stored property
    self.mRouteOrigin_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mRouteOrigin_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mRouteOrigin_property)
  //--- Configure mAutorouterInterfaceMode simple stored property
    self.mAutorouterInterfaceMode_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mAutorouterInterfaceMode_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mAutorouterInterfaceMode_property)
  //--- Configure mExportExistingTracksAndVias simple stored property
    self.mExportExistingTracksAndVias_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mExportExistingTracksAndVias_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mExportExistingTracksAndVias_property)
  //--- Configure mTrackLengthUnit simple stored property
    self.mTrackLengthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mTrackLengthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mTrackLengthUnit_property)
  //--- Configure mLayoutClearance simple stored property
    self.mLayoutClearance_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mLayoutClearance_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mLayoutClearance_property)
  //--- Configure mLayoutClearanceUnit simple stored property
    self.mLayoutClearanceUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mLayoutClearanceUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mLayoutClearanceUnit_property)
  //--- Configure mBoardSelectedInspector simple stored property
    self.mBoardSelectedInspector_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardSelectedInspector_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardSelectedInspector_property)
  //--- Configure mBoardHorizontalFlip simple stored property
    self.mBoardHorizontalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardHorizontalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardHorizontalFlip_property)
  //--- Configure mBoardVerticalFlip simple stored property
    self.mBoardVerticalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardVerticalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardVerticalFlip_property)
  //--- Configure mBoardGridStyle simple stored property
    self.mBoardGridStyle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardGridStyle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardGridStyle_property)
  //--- Configure mBoardGridDisplayFactor simple stored property
    self.mBoardGridDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardGridDisplayFactor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardGridDisplayFactor_property)
  //--- Configure mBoardZoom simple stored property
    self.mBoardZoom_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardZoom_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardZoom_property)
  //--- Configure mBoardGridStep simple stored property
    self.mBoardGridStep_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardGridStep_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardGridStep_property)
  //--- Configure mBoardGridStepUnit simple stored property
    self.mBoardGridStepUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardGridStepUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardGridStepUnit_property)
  //--- Configure mErrorOrWarningIssueSize simple stored property
    self.mErrorOrWarningIssueSize_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mErrorOrWarningIssueSize_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mErrorOrWarningIssueSize_property)
  //--- Configure mControlKeyHiliteDiameter simple stored property
    self.mControlKeyHiliteDiameter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mControlKeyHiliteDiameter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mControlKeyHiliteDiameter_property)
  //--- Configure mDSNFileProposedName simple stored property
    self.mDSNFileProposedName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mDSNFileProposedName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mDSNFileProposedName_property)
  //--- Configure mBoardLimitsWidth simple stored property
    self.mBoardLimitsWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitsWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardLimitsWidth_property)
  //--- Configure mBoardLimitsWidthUnit simple stored property
    self.mBoardLimitsWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitsWidthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardLimitsWidthUnit_property)
  //--- Configure mBoardClearance simple stored property
    self.mBoardClearance_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardClearance_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardClearance_property)
  //--- Configure mBoardClearanceUnit simple stored property
    self.mBoardClearanceUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardClearanceUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardClearanceUnit_property)
  //--- Configure mBoardLimitsSelectedInspector simple stored property
    self.mBoardLimitsSelectedInspector_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitsSelectedInspector_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardLimitsSelectedInspector_property)
  //--- Configure mBoardLimitsHorizontalFlip simple stored property
    self.mBoardLimitsHorizontalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitsHorizontalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardLimitsHorizontalFlip_property)
  //--- Configure mBoardLimitsVerticalFlip simple stored property
    self.mBoardLimitsVerticalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitsVerticalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardLimitsVerticalFlip_property)
  //--- Configure mBoardLimitsGridStyle simple stored property
    self.mBoardLimitsGridStyle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitsGridStyle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardLimitsGridStyle_property)
  //--- Configure mBoardLimitsGridDisplayFactor simple stored property
    self.mBoardLimitsGridDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitsGridDisplayFactor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardLimitsGridDisplayFactor_property)
  //--- Configure mBoardLimitsZoom simple stored property
    self.mBoardLimitsZoom_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitsZoom_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardLimitsZoom_property)
  //--- Configure mBoardLimitsGridStep simple stored property
    self.mBoardLimitsGridStep_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitsGridStep_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardLimitsGridStep_property)
  //--- Configure mBoardLimitsGridStepUnit simple stored property
    self.mBoardLimitsGridStepUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitsGridStepUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardLimitsGridStepUnit_property)
  //--- Configure mBoardLimitsBoundingBoxUnit simple stored property
    self.mBoardLimitsBoundingBoxUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitsBoundingBoxUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardLimitsBoundingBoxUnit_property)
  //--- Configure mBoardPointsBoundingBoxUnit simple stored property
    self.mBoardPointsBoundingBoxUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardPointsBoundingBoxUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardPointsBoundingBoxUnit_property)
  //--- Configure mBoardSelectedCurveDisplayUnit simple stored property
    self.mBoardSelectedCurveDisplayUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardSelectedCurveDisplayUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardSelectedCurveDisplayUnit_property)
  //--- Configure mBoardLimitControlPointsDisplayUnit simple stored property
    self.mBoardLimitControlPointsDisplayUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardLimitControlPointsDisplayUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardLimitControlPointsDisplayUnit_property)
  //--- Configure mBoardShape simple stored property
    self.mBoardShape_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mBoardShape_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mBoardShape_property)
  //--- Configure mRectangularBoardWidth simple stored property
    self.mRectangularBoardWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mRectangularBoardWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mRectangularBoardWidth_property)
  //--- Configure mRectangularBoardWidthUnit simple stored property
    self.mRectangularBoardWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mRectangularBoardWidthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mRectangularBoardWidthUnit_property)
  //--- Configure mRectangularBoardHeight simple stored property
    self.mRectangularBoardHeight_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mRectangularBoardHeight_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mRectangularBoardHeight_property)
  //--- Configure mRectangularBoardHeightUnit simple stored property
    self.mRectangularBoardHeightUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mRectangularBoardHeightUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mRectangularBoardHeightUnit_property)
  //--- Configure mDefaultNetClassName simple stored property
    self.mDefaultNetClassName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mDefaultNetClassName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mDefaultNetClassName_property)
  //--- Configure mSelectedPageIndex simple stored property
    self.mSelectedPageIndex_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSelectedPageIndex_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mSelectedPageIndex_property)
  //--- Configure mSelectedSchematicInspector simple stored property
    self.mSelectedSchematicInspector_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSelectedSchematicInspector_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mSelectedSchematicInspector_property)
  //--- Configure mSchematicTitle simple stored property
    self.mSchematicTitle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicTitle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mSchematicTitle_property)
  //--- Configure mSchematicVersion simple stored property
    self.mSchematicVersion_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicVersion_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mSchematicVersion_property)
  //--- Configure mSchematicDate simple stored property
    self.mSchematicDate_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicDate_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mSchematicDate_property)
  //--- Configure mSchematicHorizontalFlip simple stored property
    self.mSchematicHorizontalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicHorizontalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mSchematicHorizontalFlip_property)
  //--- Configure mSchematicVerticalFlip simple stored property
    self.mSchematicVerticalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicVerticalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mSchematicVerticalFlip_property)
  //--- Configure mSchematicZoom simple stored property
    self.mSchematicZoom_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicZoom_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mSchematicZoom_property)
  //--- Configure mSchematicGridStyle simple stored property
    self.mSchematicGridStyle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicGridStyle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mSchematicGridStyle_property)
  //--- Configure mSchematicGridDisplayFactor simple stored property
    self.mSchematicGridDisplayFactor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicGridDisplayFactor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mSchematicGridDisplayFactor_property)
  //--- Configure mSchematicCustomWidth simple stored property
    self.mSchematicCustomWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicCustomWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mSchematicCustomWidth_property)
  //--- Configure mSchematicCustomWidthUnit simple stored property
    self.mSchematicCustomWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicCustomWidthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mSchematicCustomWidthUnit_property)
  //--- Configure mSchematicCustomHeight simple stored property
    self.mSchematicCustomHeight_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicCustomHeight_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mSchematicCustomHeight_property)
  //--- Configure mSchematicCustomHeightUnit simple stored property
    self.mSchematicCustomHeightUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicCustomHeightUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mSchematicCustomHeightUnit_property)
  //--- Configure mSchematicSheetOrientation simple stored property
    self.mSchematicSheetOrientation_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSchematicSheetOrientation_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mSchematicSheetOrientation_property)
  //--- Configure mRastnetDisplay simple stored property
    self.mRastnetDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mRastnetDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mRastnetDisplay_property)
  //--- Configure mRastnetDisplayedNetName simple stored property
    self.mRastnetDisplayedNetName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mRastnetDisplayedNetName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mRastnetDisplayedNetName_property)
  //--- Configure mRastnetDisplayedComponentName simple stored property
    self.mRastnetDisplayedComponentName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mRastnetDisplayedComponentName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mRastnetDisplayedComponentName_property)
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject ProjectRoot
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_ProjectRoot : ReadOnlyObject_ProjectRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_ProjectRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_ProjectRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : ProjectRoot? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < ProjectRoot? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : ProjectRoot? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_ProjectRoot
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_ProjectRoot : ReadOnlyObject_ProjectRoot {

  //····················································································································
 
  func setProp (_ inValue : ProjectRoot?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_ProjectRoot
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_ProjectRoot : ReadWriteObject_ProjectRoot {

  //····················································································································

  private var mModel : ReadWriteObject_ProjectRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_ProjectRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : ProjectRoot?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : ProjectRoot?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < ProjectRoot? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : ProjectRoot? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_ProjectRoot 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_ProjectRoot : ReadWriteObject_ProjectRoot, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ProjectRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ProjectRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ProjectRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ProjectRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : ProjectRoot?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < ProjectRoot? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : ProjectRoot?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : ProjectRoot? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

