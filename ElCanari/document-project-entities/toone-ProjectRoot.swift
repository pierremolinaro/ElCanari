//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_ProjectRoot 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_ProjectRoot : ReadOnlyAbstractObjectProperty <ProjectRoot> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : ProjectRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.mArtworkName_property.removeEBObserver (self.mArtworkName_property) // Stored property
    inOldValue?.mArtworkVersion_property.removeEBObserver (self.mArtworkVersion_property) // Stored property
    inOldValue?.mPDFBoardBackgroundColor_property.removeEBObserver (self.mPDFBoardBackgroundColor_property) // Stored property
    inOldValue?.mCheckClearanceBetweenPadsOfSameNet_property.removeEBObserver (self.mCheckClearanceBetweenPadsOfSameNet_property) // Stored property
    inOldValue?.mLastERCCheckingIsSuccess_property.removeEBObserver (self.mLastERCCheckingIsSuccess_property) // Stored property
    inOldValue?.mLastERCCheckingSignature_property.removeEBObserver (self.mLastERCCheckingSignature_property) // Stored property
    inOldValue?.mBoardSideForNewTrack_property.removeEBObserver (self.mBoardSideForNewTrack_property) // Stored property
    inOldValue?.mAutoRouterPreferredDirections_property.removeEBObserver (self.mAutoRouterPreferredDirections_property) // Stored property
    inOldValue?.mAutorouterSnapAngle_property.removeEBObserver (self.mAutorouterSnapAngle_property) // Stored property
    inOldValue?.mRouteDirection_property.removeEBObserver (self.mRouteDirection_property) // Stored property
    inOldValue?.mRouteOrigin_property.removeEBObserver (self.mRouteOrigin_property) // Stored property
    inOldValue?.mTrackLengthUnit_property.removeEBObserver (self.mTrackLengthUnit_property) // Stored property
    inOldValue?.mLayoutClearance_property.removeEBObserver (self.mLayoutClearance_property) // Stored property
    inOldValue?.mLayoutClearanceUnit_property.removeEBObserver (self.mLayoutClearanceUnit_property) // Stored property
    inOldValue?.mBoardSelectedInspector_property.removeEBObserver (self.mBoardSelectedInspector_property) // Stored property
    inOldValue?.mBoardHorizontalFlip_property.removeEBObserver (self.mBoardHorizontalFlip_property) // Stored property
    inOldValue?.mBoardVerticalFlip_property.removeEBObserver (self.mBoardVerticalFlip_property) // Stored property
    inOldValue?.mBoardGridStyle_property.removeEBObserver (self.mBoardGridStyle_property) // Stored property
    inOldValue?.mBoardGridDisplayFactor_property.removeEBObserver (self.mBoardGridDisplayFactor_property) // Stored property
    inOldValue?.mBoardZoom_property.removeEBObserver (self.mBoardZoom_property) // Stored property
    inOldValue?.mBoardGridStep_property.removeEBObserver (self.mBoardGridStep_property) // Stored property
    inOldValue?.mBoardGridStepUnit_property.removeEBObserver (self.mBoardGridStepUnit_property) // Stored property
    inOldValue?.mErrorOrWarningIssueSize_property.removeEBObserver (self.mErrorOrWarningIssueSize_property) // Stored property
    inOldValue?.mControlKeyHiliteDiameter_property.removeEBObserver (self.mControlKeyHiliteDiameter_property) // Stored property
    inOldValue?.mDSNFileProposedName_property.removeEBObserver (self.mDSNFileProposedName_property) // Stored property
    inOldValue?.mBoardLimitsWidth_property.removeEBObserver (self.mBoardLimitsWidth_property) // Stored property
    inOldValue?.mBoardLimitsWidthUnit_property.removeEBObserver (self.mBoardLimitsWidthUnit_property) // Stored property
    inOldValue?.mBoardClearance_property.removeEBObserver (self.mBoardClearance_property) // Stored property
    inOldValue?.mBoardClearanceUnit_property.removeEBObserver (self.mBoardClearanceUnit_property) // Stored property
    inOldValue?.mBoardLimitsSelectedInspector_property.removeEBObserver (self.mBoardLimitsSelectedInspector_property) // Stored property
    inOldValue?.mBoardLimitsHorizontalFlip_property.removeEBObserver (self.mBoardLimitsHorizontalFlip_property) // Stored property
    inOldValue?.mBoardLimitsVerticalFlip_property.removeEBObserver (self.mBoardLimitsVerticalFlip_property) // Stored property
    inOldValue?.mBoardLimitsGridStyle_property.removeEBObserver (self.mBoardLimitsGridStyle_property) // Stored property
    inOldValue?.mBoardLimitsGridDisplayFactor_property.removeEBObserver (self.mBoardLimitsGridDisplayFactor_property) // Stored property
    inOldValue?.mBoardLimitsZoom_property.removeEBObserver (self.mBoardLimitsZoom_property) // Stored property
    inOldValue?.mBoardLimitsGridStep_property.removeEBObserver (self.mBoardLimitsGridStep_property) // Stored property
    inOldValue?.mBoardLimitsGridStepUnit_property.removeEBObserver (self.mBoardLimitsGridStepUnit_property) // Stored property
    inOldValue?.mBoardLimitsBoundingBoxUnit_property.removeEBObserver (self.mBoardLimitsBoundingBoxUnit_property) // Stored property
    inOldValue?.mBoardPointsBoundingBoxUnit_property.removeEBObserver (self.mBoardPointsBoundingBoxUnit_property) // Stored property
    inOldValue?.mBoardSelectedCurveDisplayUnit_property.removeEBObserver (self.mBoardSelectedCurveDisplayUnit_property) // Stored property
    inOldValue?.mBoardLimitControlPointsDisplayUnit_property.removeEBObserver (self.mBoardLimitControlPointsDisplayUnit_property) // Stored property
    inOldValue?.mBoardShape_property.removeEBObserver (self.mBoardShape_property) // Stored property
    inOldValue?.mRectangularBoardWidth_property.removeEBObserver (self.mRectangularBoardWidth_property) // Stored property
    inOldValue?.mRectangularBoardWidthUnit_property.removeEBObserver (self.mRectangularBoardWidthUnit_property) // Stored property
    inOldValue?.mRectangularBoardHeight_property.removeEBObserver (self.mRectangularBoardHeight_property) // Stored property
    inOldValue?.mRectangularBoardHeightUnit_property.removeEBObserver (self.mRectangularBoardHeightUnit_property) // Stored property
    inOldValue?.mDefaultNetClassName_property.removeEBObserver (self.mDefaultNetClassName_property) // Stored property
    inOldValue?.mSelectedPageIndex_property.removeEBObserver (self.mSelectedPageIndex_property) // Stored property
    inOldValue?.mSelectedSchematicInspector_property.removeEBObserver (self.mSelectedSchematicInspector_property) // Stored property
    inOldValue?.mSchematicTitle_property.removeEBObserver (self.mSchematicTitle_property) // Stored property
    inOldValue?.mSchematicVersion_property.removeEBObserver (self.mSchematicVersion_property) // Stored property
    inOldValue?.mSchematicDate_property.removeEBObserver (self.mSchematicDate_property) // Stored property
    inOldValue?.mSchematicHorizontalFlip_property.removeEBObserver (self.mSchematicHorizontalFlip_property) // Stored property
    inOldValue?.mSchematicVerticalFlip_property.removeEBObserver (self.mSchematicVerticalFlip_property) // Stored property
    inOldValue?.mSchematicZoom_property.removeEBObserver (self.mSchematicZoom_property) // Stored property
    inOldValue?.mSchematicGridStyle_property.removeEBObserver (self.mSchematicGridStyle_property) // Stored property
    inOldValue?.mSchematicGridDisplayFactor_property.removeEBObserver (self.mSchematicGridDisplayFactor_property) // Stored property
    inOldValue?.mSchematicCustomWidth_property.removeEBObserver (self.mSchematicCustomWidth_property) // Stored property
    inOldValue?.mSchematicCustomWidthUnit_property.removeEBObserver (self.mSchematicCustomWidthUnit_property) // Stored property
    inOldValue?.mSchematicCustomHeight_property.removeEBObserver (self.mSchematicCustomHeight_property) // Stored property
    inOldValue?.mSchematicCustomHeightUnit_property.removeEBObserver (self.mSchematicCustomHeightUnit_property) // Stored property
    inOldValue?.mSchematicSheetOrientation_property.removeEBObserver (self.mSchematicSheetOrientation_property) // Stored property
    inOldValue?.mRastnetDisplay_property.removeEBObserver (self.mRastnetDisplay_property) // Stored property
    inOldValue?.mRastnetDisplayedNetName_property.removeEBObserver (self.mRastnetDisplayedNetName_property) // Stored property
    inOldValue?.mRastnetDisplayedComponentName_property.removeEBObserver (self.mRastnetDisplayedComponentName_property) // Stored property
    inOldValue?.boardGridStepMultipliedByDisplayFactor_property.removeEBObserver (self.boardGridStepMultipliedByDisplayFactor_property) // Transient property
    inOldValue?.boardLimitsGridStepMultipliedByDisplayFactor_property.removeEBObserver (self.boardLimitsGridStepMultipliedByDisplayFactor_property) // Transient property
    inOldValue?.boardShapeIsRectangular_property.removeEBObserver (self.boardShapeIsRectangular_property) // Transient property
    inOldValue?.selectedSheetIssues_property.removeEBObserver (self.selectedSheetIssues_property) // Transient property
    inOldValue?.connectedPoints_property.removeEBObserver (self.connectedPoints_property) // Transient property
    inOldValue?.connexionWarningString_property.removeEBObserver (self.connexionWarningString_property) // Transient property
    inOldValue?.connexionErrorString_property.removeEBObserver (self.connexionErrorString_property) // Transient property
    inOldValue?.sheetIndexes_property.removeEBObserver (self.sheetIndexes_property) // Transient property
    inOldValue?.netsDescription_property.removeEBObserver (self.netsDescription_property) // Transient property
    inOldValue?.boardIssues_property.removeEBObserver (self.boardIssues_property) // Transient property
    inOldValue?.signatureForERCChecking_property.removeEBObserver (self.signatureForERCChecking_property) // Transient property
    inOldValue?.ercStatusImage_property.removeEBObserver (self.ercStatusImage_property) // Transient property
    inOldValue?.ercStatusMessage_property.removeEBObserver (self.ercStatusMessage_property) // Transient property
    inOldValue?.viaCountString_property.removeEBObserver (self.viaCountString_property) // Transient property
    inOldValue?.trackCountString_property.removeEBObserver (self.trackCountString_property) // Transient property
    inOldValue?.trackLengthString_property.removeEBObserver (self.trackLengthString_property) // Transient property
    inOldValue?.boardStatusImage_property.removeEBObserver (self.boardStatusImage_property) // Transient property
    inOldValue?.boardStatusMessage_property.removeEBObserver (self.boardStatusMessage_property) // Transient property
    inOldValue?.interiorBoundBox_property.removeEBObserver (self.interiorBoundBox_property) // Transient property
    inOldValue?.boardBoundBox_property.removeEBObserver (self.boardBoundBox_property) // Transient property
    inOldValue?.boardInteriorTop_property.removeEBObserver (self.boardInteriorTop_property) // Transient property
    inOldValue?.boardInteriorBottom_property.removeEBObserver (self.boardInteriorBottom_property) // Transient property
    inOldValue?.boardInteriorLeft_property.removeEBObserver (self.boardInteriorLeft_property) // Transient property
    inOldValue?.boardInteriorRight_property.removeEBObserver (self.boardInteriorRight_property) // Transient property
    inOldValue?.boardLimitBorderTop_property.removeEBObserver (self.boardLimitBorderTop_property) // Transient property
    inOldValue?.boardLimitBorderBottom_property.removeEBObserver (self.boardLimitBorderBottom_property) // Transient property
    inOldValue?.boardLimitBorderLeft_property.removeEBObserver (self.boardLimitBorderLeft_property) // Transient property
    inOldValue?.boardLimitBorderRight_property.removeEBObserver (self.boardLimitBorderRight_property) // Transient property
    inOldValue?.borderElementCountString_property.removeEBObserver (self.borderElementCountString_property) // Transient property
    inOldValue?.borderOutlineBackground_property.removeEBObserver (self.borderOutlineBackground_property) // Transient property
    inOldValue?.borderViewBackground_property.removeEBObserver (self.borderViewBackground_property) // Transient property
    inOldValue?.deviceNames_property.removeEBObserver (self.deviceNames_property) // Transient property
    inOldValue?.allClassNames_property.removeEBObserver (self.allClassNames_property) // Transient property
    inOldValue?.sheetGeometry_property.removeEBObserver (self.sheetGeometry_property) // Transient property
    inOldValue?.schematicBackgroundDisplay_property.removeEBObserver (self.schematicBackgroundDisplay_property) // Transient property
    inOldValue?.netWarningCount_property.removeEBObserver (self.netWarningCount_property) // Transient property
    inOldValue?.netNamesArray_property.removeEBObserver (self.netNamesArray_property) // Transient property
    inOldValue?.unplacedSymbols_property.removeEBObserver (self.unplacedSymbols_property) // Transient property
    inOldValue?.unplacedPackages_property.removeEBObserver (self.unplacedPackages_property) // Transient property
    inOldValue?.componentsPlacedInBoard_property.removeEBObserver (self.componentsPlacedInBoard_property) // Transient property
    inOldValue?.placedComponentNameArray_property.removeEBObserver (self.placedComponentNameArray_property) // Transient property
    inOldValue?.schematicHasErrorOrWarning_property.removeEBObserver (self.schematicHasErrorOrWarning_property) // Transient property
    inOldValue?.schematicStatusMessage_property.removeEBObserver (self.schematicStatusMessage_property) // Transient property
    inOldValue?.schematicStatusImage_property.removeEBObserver (self.schematicStatusImage_property) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.mArtworkName_property.addEBObserver (self.mArtworkName_property) // Stored property
    self.mInternalValue?.mArtworkVersion_property.addEBObserver (self.mArtworkVersion_property) // Stored property
    self.mInternalValue?.mPDFBoardBackgroundColor_property.addEBObserver (self.mPDFBoardBackgroundColor_property) // Stored property
    self.mInternalValue?.mCheckClearanceBetweenPadsOfSameNet_property.addEBObserver (self.mCheckClearanceBetweenPadsOfSameNet_property) // Stored property
    self.mInternalValue?.mLastERCCheckingIsSuccess_property.addEBObserver (self.mLastERCCheckingIsSuccess_property) // Stored property
    self.mInternalValue?.mLastERCCheckingSignature_property.addEBObserver (self.mLastERCCheckingSignature_property) // Stored property
    self.mInternalValue?.mBoardSideForNewTrack_property.addEBObserver (self.mBoardSideForNewTrack_property) // Stored property
    self.mInternalValue?.mAutoRouterPreferredDirections_property.addEBObserver (self.mAutoRouterPreferredDirections_property) // Stored property
    self.mInternalValue?.mAutorouterSnapAngle_property.addEBObserver (self.mAutorouterSnapAngle_property) // Stored property
    self.mInternalValue?.mRouteDirection_property.addEBObserver (self.mRouteDirection_property) // Stored property
    self.mInternalValue?.mRouteOrigin_property.addEBObserver (self.mRouteOrigin_property) // Stored property
    self.mInternalValue?.mTrackLengthUnit_property.addEBObserver (self.mTrackLengthUnit_property) // Stored property
    self.mInternalValue?.mLayoutClearance_property.addEBObserver (self.mLayoutClearance_property) // Stored property
    self.mInternalValue?.mLayoutClearanceUnit_property.addEBObserver (self.mLayoutClearanceUnit_property) // Stored property
    self.mInternalValue?.mBoardSelectedInspector_property.addEBObserver (self.mBoardSelectedInspector_property) // Stored property
    self.mInternalValue?.mBoardHorizontalFlip_property.addEBObserver (self.mBoardHorizontalFlip_property) // Stored property
    self.mInternalValue?.mBoardVerticalFlip_property.addEBObserver (self.mBoardVerticalFlip_property) // Stored property
    self.mInternalValue?.mBoardGridStyle_property.addEBObserver (self.mBoardGridStyle_property) // Stored property
    self.mInternalValue?.mBoardGridDisplayFactor_property.addEBObserver (self.mBoardGridDisplayFactor_property) // Stored property
    self.mInternalValue?.mBoardZoom_property.addEBObserver (self.mBoardZoom_property) // Stored property
    self.mInternalValue?.mBoardGridStep_property.addEBObserver (self.mBoardGridStep_property) // Stored property
    self.mInternalValue?.mBoardGridStepUnit_property.addEBObserver (self.mBoardGridStepUnit_property) // Stored property
    self.mInternalValue?.mErrorOrWarningIssueSize_property.addEBObserver (self.mErrorOrWarningIssueSize_property) // Stored property
    self.mInternalValue?.mControlKeyHiliteDiameter_property.addEBObserver (self.mControlKeyHiliteDiameter_property) // Stored property
    self.mInternalValue?.mDSNFileProposedName_property.addEBObserver (self.mDSNFileProposedName_property) // Stored property
    self.mInternalValue?.mBoardLimitsWidth_property.addEBObserver (self.mBoardLimitsWidth_property) // Stored property
    self.mInternalValue?.mBoardLimitsWidthUnit_property.addEBObserver (self.mBoardLimitsWidthUnit_property) // Stored property
    self.mInternalValue?.mBoardClearance_property.addEBObserver (self.mBoardClearance_property) // Stored property
    self.mInternalValue?.mBoardClearanceUnit_property.addEBObserver (self.mBoardClearanceUnit_property) // Stored property
    self.mInternalValue?.mBoardLimitsSelectedInspector_property.addEBObserver (self.mBoardLimitsSelectedInspector_property) // Stored property
    self.mInternalValue?.mBoardLimitsHorizontalFlip_property.addEBObserver (self.mBoardLimitsHorizontalFlip_property) // Stored property
    self.mInternalValue?.mBoardLimitsVerticalFlip_property.addEBObserver (self.mBoardLimitsVerticalFlip_property) // Stored property
    self.mInternalValue?.mBoardLimitsGridStyle_property.addEBObserver (self.mBoardLimitsGridStyle_property) // Stored property
    self.mInternalValue?.mBoardLimitsGridDisplayFactor_property.addEBObserver (self.mBoardLimitsGridDisplayFactor_property) // Stored property
    self.mInternalValue?.mBoardLimitsZoom_property.addEBObserver (self.mBoardLimitsZoom_property) // Stored property
    self.mInternalValue?.mBoardLimitsGridStep_property.addEBObserver (self.mBoardLimitsGridStep_property) // Stored property
    self.mInternalValue?.mBoardLimitsGridStepUnit_property.addEBObserver (self.mBoardLimitsGridStepUnit_property) // Stored property
    self.mInternalValue?.mBoardLimitsBoundingBoxUnit_property.addEBObserver (self.mBoardLimitsBoundingBoxUnit_property) // Stored property
    self.mInternalValue?.mBoardPointsBoundingBoxUnit_property.addEBObserver (self.mBoardPointsBoundingBoxUnit_property) // Stored property
    self.mInternalValue?.mBoardSelectedCurveDisplayUnit_property.addEBObserver (self.mBoardSelectedCurveDisplayUnit_property) // Stored property
    self.mInternalValue?.mBoardLimitControlPointsDisplayUnit_property.addEBObserver (self.mBoardLimitControlPointsDisplayUnit_property) // Stored property
    self.mInternalValue?.mBoardShape_property.addEBObserver (self.mBoardShape_property) // Stored property
    self.mInternalValue?.mRectangularBoardWidth_property.addEBObserver (self.mRectangularBoardWidth_property) // Stored property
    self.mInternalValue?.mRectangularBoardWidthUnit_property.addEBObserver (self.mRectangularBoardWidthUnit_property) // Stored property
    self.mInternalValue?.mRectangularBoardHeight_property.addEBObserver (self.mRectangularBoardHeight_property) // Stored property
    self.mInternalValue?.mRectangularBoardHeightUnit_property.addEBObserver (self.mRectangularBoardHeightUnit_property) // Stored property
    self.mInternalValue?.mDefaultNetClassName_property.addEBObserver (self.mDefaultNetClassName_property) // Stored property
    self.mInternalValue?.mSelectedPageIndex_property.addEBObserver (self.mSelectedPageIndex_property) // Stored property
    self.mInternalValue?.mSelectedSchematicInspector_property.addEBObserver (self.mSelectedSchematicInspector_property) // Stored property
    self.mInternalValue?.mSchematicTitle_property.addEBObserver (self.mSchematicTitle_property) // Stored property
    self.mInternalValue?.mSchematicVersion_property.addEBObserver (self.mSchematicVersion_property) // Stored property
    self.mInternalValue?.mSchematicDate_property.addEBObserver (self.mSchematicDate_property) // Stored property
    self.mInternalValue?.mSchematicHorizontalFlip_property.addEBObserver (self.mSchematicHorizontalFlip_property) // Stored property
    self.mInternalValue?.mSchematicVerticalFlip_property.addEBObserver (self.mSchematicVerticalFlip_property) // Stored property
    self.mInternalValue?.mSchematicZoom_property.addEBObserver (self.mSchematicZoom_property) // Stored property
    self.mInternalValue?.mSchematicGridStyle_property.addEBObserver (self.mSchematicGridStyle_property) // Stored property
    self.mInternalValue?.mSchematicGridDisplayFactor_property.addEBObserver (self.mSchematicGridDisplayFactor_property) // Stored property
    self.mInternalValue?.mSchematicCustomWidth_property.addEBObserver (self.mSchematicCustomWidth_property) // Stored property
    self.mInternalValue?.mSchematicCustomWidthUnit_property.addEBObserver (self.mSchematicCustomWidthUnit_property) // Stored property
    self.mInternalValue?.mSchematicCustomHeight_property.addEBObserver (self.mSchematicCustomHeight_property) // Stored property
    self.mInternalValue?.mSchematicCustomHeightUnit_property.addEBObserver (self.mSchematicCustomHeightUnit_property) // Stored property
    self.mInternalValue?.mSchematicSheetOrientation_property.addEBObserver (self.mSchematicSheetOrientation_property) // Stored property
    self.mInternalValue?.mRastnetDisplay_property.addEBObserver (self.mRastnetDisplay_property) // Stored property
    self.mInternalValue?.mRastnetDisplayedNetName_property.addEBObserver (self.mRastnetDisplayedNetName_property) // Stored property
    self.mInternalValue?.mRastnetDisplayedComponentName_property.addEBObserver (self.mRastnetDisplayedComponentName_property) // Stored property
    self.mInternalValue?.boardGridStepMultipliedByDisplayFactor_property.addEBObserver (self.boardGridStepMultipliedByDisplayFactor_property) // Transient property
    self.mInternalValue?.boardLimitsGridStepMultipliedByDisplayFactor_property.addEBObserver (self.boardLimitsGridStepMultipliedByDisplayFactor_property) // Transient property
    self.mInternalValue?.boardShapeIsRectangular_property.addEBObserver (self.boardShapeIsRectangular_property) // Transient property
    self.mInternalValue?.selectedSheetIssues_property.addEBObserver (self.selectedSheetIssues_property) // Transient property
    self.mInternalValue?.connectedPoints_property.addEBObserver (self.connectedPoints_property) // Transient property
    self.mInternalValue?.connexionWarningString_property.addEBObserver (self.connexionWarningString_property) // Transient property
    self.mInternalValue?.connexionErrorString_property.addEBObserver (self.connexionErrorString_property) // Transient property
    self.mInternalValue?.sheetIndexes_property.addEBObserver (self.sheetIndexes_property) // Transient property
    self.mInternalValue?.netsDescription_property.addEBObserver (self.netsDescription_property) // Transient property
    self.mInternalValue?.boardIssues_property.addEBObserver (self.boardIssues_property) // Transient property
    self.mInternalValue?.signatureForERCChecking_property.addEBObserver (self.signatureForERCChecking_property) // Transient property
    self.mInternalValue?.ercStatusImage_property.addEBObserver (self.ercStatusImage_property) // Transient property
    self.mInternalValue?.ercStatusMessage_property.addEBObserver (self.ercStatusMessage_property) // Transient property
    self.mInternalValue?.viaCountString_property.addEBObserver (self.viaCountString_property) // Transient property
    self.mInternalValue?.trackCountString_property.addEBObserver (self.trackCountString_property) // Transient property
    self.mInternalValue?.trackLengthString_property.addEBObserver (self.trackLengthString_property) // Transient property
    self.mInternalValue?.boardStatusImage_property.addEBObserver (self.boardStatusImage_property) // Transient property
    self.mInternalValue?.boardStatusMessage_property.addEBObserver (self.boardStatusMessage_property) // Transient property
    self.mInternalValue?.interiorBoundBox_property.addEBObserver (self.interiorBoundBox_property) // Transient property
    self.mInternalValue?.boardBoundBox_property.addEBObserver (self.boardBoundBox_property) // Transient property
    self.mInternalValue?.boardInteriorTop_property.addEBObserver (self.boardInteriorTop_property) // Transient property
    self.mInternalValue?.boardInteriorBottom_property.addEBObserver (self.boardInteriorBottom_property) // Transient property
    self.mInternalValue?.boardInteriorLeft_property.addEBObserver (self.boardInteriorLeft_property) // Transient property
    self.mInternalValue?.boardInteriorRight_property.addEBObserver (self.boardInteriorRight_property) // Transient property
    self.mInternalValue?.boardLimitBorderTop_property.addEBObserver (self.boardLimitBorderTop_property) // Transient property
    self.mInternalValue?.boardLimitBorderBottom_property.addEBObserver (self.boardLimitBorderBottom_property) // Transient property
    self.mInternalValue?.boardLimitBorderLeft_property.addEBObserver (self.boardLimitBorderLeft_property) // Transient property
    self.mInternalValue?.boardLimitBorderRight_property.addEBObserver (self.boardLimitBorderRight_property) // Transient property
    self.mInternalValue?.borderElementCountString_property.addEBObserver (self.borderElementCountString_property) // Transient property
    self.mInternalValue?.borderOutlineBackground_property.addEBObserver (self.borderOutlineBackground_property) // Transient property
    self.mInternalValue?.borderViewBackground_property.addEBObserver (self.borderViewBackground_property) // Transient property
    self.mInternalValue?.deviceNames_property.addEBObserver (self.deviceNames_property) // Transient property
    self.mInternalValue?.allClassNames_property.addEBObserver (self.allClassNames_property) // Transient property
    self.mInternalValue?.sheetGeometry_property.addEBObserver (self.sheetGeometry_property) // Transient property
    self.mInternalValue?.schematicBackgroundDisplay_property.addEBObserver (self.schematicBackgroundDisplay_property) // Transient property
    self.mInternalValue?.netWarningCount_property.addEBObserver (self.netWarningCount_property) // Transient property
    self.mInternalValue?.netNamesArray_property.addEBObserver (self.netNamesArray_property) // Transient property
    self.mInternalValue?.unplacedSymbols_property.addEBObserver (self.unplacedSymbols_property) // Transient property
    self.mInternalValue?.unplacedPackages_property.addEBObserver (self.unplacedPackages_property) // Transient property
    self.mInternalValue?.componentsPlacedInBoard_property.addEBObserver (self.componentsPlacedInBoard_property) // Transient property
    self.mInternalValue?.placedComponentNameArray_property.addEBObserver (self.placedComponentNameArray_property) // Transient property
    self.mInternalValue?.schematicHasErrorOrWarning_property.addEBObserver (self.schematicHasErrorOrWarning_property) // Transient property
    self.mInternalValue?.schematicStatusMessage_property.addEBObserver (self.schematicStatusMessage_property) // Transient property
    self.mInternalValue?.schematicStatusImage_property.addEBObserver (self.schematicStatusImage_property) // Transient property
  }

  //····················································································································
  //   init
  //····················································································································

  override init () {
    super.init ()
    self.mArtworkName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mArtworkName_property.prop ?? .empty }
    self.mArtworkName_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.mArtworkName_property.setProp (inValue) }
    self.mArtworkVersion_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mArtworkVersion_property.prop ?? .empty }
    self.mArtworkVersion_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mArtworkVersion_property.setProp (inValue) }
    self.mPDFBoardBackgroundColor_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mPDFBoardBackgroundColor_property.prop ?? .empty }
    self.mPDFBoardBackgroundColor_property.mWriteModelFunction = { [weak self] (inValue : NSColor) in self?.mInternalValue?.mPDFBoardBackgroundColor_property.setProp (inValue) }
    self.mCheckClearanceBetweenPadsOfSameNet_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mCheckClearanceBetweenPadsOfSameNet_property.prop ?? .empty }
    self.mCheckClearanceBetweenPadsOfSameNet_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mCheckClearanceBetweenPadsOfSameNet_property.setProp (inValue) }
    self.mLastERCCheckingIsSuccess_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mLastERCCheckingIsSuccess_property.prop ?? .empty }
    self.mLastERCCheckingIsSuccess_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mLastERCCheckingIsSuccess_property.setProp (inValue) }
    self.mLastERCCheckingSignature_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mLastERCCheckingSignature_property.prop ?? .empty }
    self.mLastERCCheckingSignature_property.mWriteModelFunction = { [weak self] (inValue : UInt32) in self?.mInternalValue?.mLastERCCheckingSignature_property.setProp (inValue) }
    self.mBoardSideForNewTrack_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardSideForNewTrack_property.prop ?? .empty }
    self.mBoardSideForNewTrack_property.mWriteModelFunction = { [weak self] (inValue : TrackSide) in self?.mInternalValue?.mBoardSideForNewTrack_property.setProp (inValue) }
    self.mAutoRouterPreferredDirections_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mAutoRouterPreferredDirections_property.prop ?? .empty }
    self.mAutoRouterPreferredDirections_property.mWriteModelFunction = { [weak self] (inValue : AutorouterPreferredDirections) in self?.mInternalValue?.mAutoRouterPreferredDirections_property.setProp (inValue) }
    self.mAutorouterSnapAngle_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mAutorouterSnapAngle_property.prop ?? .empty }
    self.mAutorouterSnapAngle_property.mWriteModelFunction = { [weak self] (inValue : AutorouterSnapAngle) in self?.mInternalValue?.mAutorouterSnapAngle_property.setProp (inValue) }
    self.mRouteDirection_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mRouteDirection_property.prop ?? .empty }
    self.mRouteDirection_property.mWriteModelFunction = { [weak self] (inValue : RouteDirection) in self?.mInternalValue?.mRouteDirection_property.setProp (inValue) }
    self.mRouteOrigin_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mRouteOrigin_property.prop ?? .empty }
    self.mRouteOrigin_property.mWriteModelFunction = { [weak self] (inValue : RouteOrigin) in self?.mInternalValue?.mRouteOrigin_property.setProp (inValue) }
    self.mTrackLengthUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mTrackLengthUnit_property.prop ?? .empty }
    self.mTrackLengthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mTrackLengthUnit_property.setProp (inValue) }
    self.mLayoutClearance_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mLayoutClearance_property.prop ?? .empty }
    self.mLayoutClearance_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mLayoutClearance_property.setProp (inValue) }
    self.mLayoutClearanceUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mLayoutClearanceUnit_property.prop ?? .empty }
    self.mLayoutClearanceUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mLayoutClearanceUnit_property.setProp (inValue) }
    self.mBoardSelectedInspector_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardSelectedInspector_property.prop ?? .empty }
    self.mBoardSelectedInspector_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mBoardSelectedInspector_property.setProp (inValue) }
    self.mBoardHorizontalFlip_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardHorizontalFlip_property.prop ?? .empty }
    self.mBoardHorizontalFlip_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mBoardHorizontalFlip_property.setProp (inValue) }
    self.mBoardVerticalFlip_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardVerticalFlip_property.prop ?? .empty }
    self.mBoardVerticalFlip_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mBoardVerticalFlip_property.setProp (inValue) }
    self.mBoardGridStyle_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardGridStyle_property.prop ?? .empty }
    self.mBoardGridStyle_property.mWriteModelFunction = { [weak self] (inValue : GridStyle) in self?.mInternalValue?.mBoardGridStyle_property.setProp (inValue) }
    self.mBoardGridDisplayFactor_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardGridDisplayFactor_property.prop ?? .empty }
    self.mBoardGridDisplayFactor_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mBoardGridDisplayFactor_property.setProp (inValue) }
    self.mBoardZoom_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardZoom_property.prop ?? .empty }
    self.mBoardZoom_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mBoardZoom_property.setProp (inValue) }
    self.mBoardGridStep_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardGridStep_property.prop ?? .empty }
    self.mBoardGridStep_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mBoardGridStep_property.setProp (inValue) }
    self.mBoardGridStepUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardGridStepUnit_property.prop ?? .empty }
    self.mBoardGridStepUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mBoardGridStepUnit_property.setProp (inValue) }
    self.mErrorOrWarningIssueSize_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mErrorOrWarningIssueSize_property.prop ?? .empty }
    self.mErrorOrWarningIssueSize_property.mWriteModelFunction = { [weak self] (inValue : Double) in self?.mInternalValue?.mErrorOrWarningIssueSize_property.setProp (inValue) }
    self.mControlKeyHiliteDiameter_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mControlKeyHiliteDiameter_property.prop ?? .empty }
    self.mControlKeyHiliteDiameter_property.mWriteModelFunction = { [weak self] (inValue : Double) in self?.mInternalValue?.mControlKeyHiliteDiameter_property.setProp (inValue) }
    self.mDSNFileProposedName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mDSNFileProposedName_property.prop ?? .empty }
    self.mDSNFileProposedName_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.mDSNFileProposedName_property.setProp (inValue) }
    self.mBoardLimitsWidth_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardLimitsWidth_property.prop ?? .empty }
    self.mBoardLimitsWidth_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mBoardLimitsWidth_property.setProp (inValue) }
    self.mBoardLimitsWidthUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardLimitsWidthUnit_property.prop ?? .empty }
    self.mBoardLimitsWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mBoardLimitsWidthUnit_property.setProp (inValue) }
    self.mBoardClearance_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardClearance_property.prop ?? .empty }
    self.mBoardClearance_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mBoardClearance_property.setProp (inValue) }
    self.mBoardClearanceUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardClearanceUnit_property.prop ?? .empty }
    self.mBoardClearanceUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mBoardClearanceUnit_property.setProp (inValue) }
    self.mBoardLimitsSelectedInspector_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardLimitsSelectedInspector_property.prop ?? .empty }
    self.mBoardLimitsSelectedInspector_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mBoardLimitsSelectedInspector_property.setProp (inValue) }
    self.mBoardLimitsHorizontalFlip_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardLimitsHorizontalFlip_property.prop ?? .empty }
    self.mBoardLimitsHorizontalFlip_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mBoardLimitsHorizontalFlip_property.setProp (inValue) }
    self.mBoardLimitsVerticalFlip_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardLimitsVerticalFlip_property.prop ?? .empty }
    self.mBoardLimitsVerticalFlip_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mBoardLimitsVerticalFlip_property.setProp (inValue) }
    self.mBoardLimitsGridStyle_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardLimitsGridStyle_property.prop ?? .empty }
    self.mBoardLimitsGridStyle_property.mWriteModelFunction = { [weak self] (inValue : GridStyle) in self?.mInternalValue?.mBoardLimitsGridStyle_property.setProp (inValue) }
    self.mBoardLimitsGridDisplayFactor_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardLimitsGridDisplayFactor_property.prop ?? .empty }
    self.mBoardLimitsGridDisplayFactor_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mBoardLimitsGridDisplayFactor_property.setProp (inValue) }
    self.mBoardLimitsZoom_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardLimitsZoom_property.prop ?? .empty }
    self.mBoardLimitsZoom_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mBoardLimitsZoom_property.setProp (inValue) }
    self.mBoardLimitsGridStep_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardLimitsGridStep_property.prop ?? .empty }
    self.mBoardLimitsGridStep_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mBoardLimitsGridStep_property.setProp (inValue) }
    self.mBoardLimitsGridStepUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardLimitsGridStepUnit_property.prop ?? .empty }
    self.mBoardLimitsGridStepUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mBoardLimitsGridStepUnit_property.setProp (inValue) }
    self.mBoardLimitsBoundingBoxUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardLimitsBoundingBoxUnit_property.prop ?? .empty }
    self.mBoardLimitsBoundingBoxUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mBoardLimitsBoundingBoxUnit_property.setProp (inValue) }
    self.mBoardPointsBoundingBoxUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardPointsBoundingBoxUnit_property.prop ?? .empty }
    self.mBoardPointsBoundingBoxUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mBoardPointsBoundingBoxUnit_property.setProp (inValue) }
    self.mBoardSelectedCurveDisplayUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardSelectedCurveDisplayUnit_property.prop ?? .empty }
    self.mBoardSelectedCurveDisplayUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mBoardSelectedCurveDisplayUnit_property.setProp (inValue) }
    self.mBoardLimitControlPointsDisplayUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardLimitControlPointsDisplayUnit_property.prop ?? .empty }
    self.mBoardLimitControlPointsDisplayUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mBoardLimitControlPointsDisplayUnit_property.setProp (inValue) }
    self.mBoardShape_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mBoardShape_property.prop ?? .empty }
    self.mBoardShape_property.mWriteModelFunction = { [weak self] (inValue : BoardShape) in self?.mInternalValue?.mBoardShape_property.setProp (inValue) }
    self.mRectangularBoardWidth_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mRectangularBoardWidth_property.prop ?? .empty }
    self.mRectangularBoardWidth_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mRectangularBoardWidth_property.setProp (inValue) }
    self.mRectangularBoardWidthUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mRectangularBoardWidthUnit_property.prop ?? .empty }
    self.mRectangularBoardWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mRectangularBoardWidthUnit_property.setProp (inValue) }
    self.mRectangularBoardHeight_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mRectangularBoardHeight_property.prop ?? .empty }
    self.mRectangularBoardHeight_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mRectangularBoardHeight_property.setProp (inValue) }
    self.mRectangularBoardHeightUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mRectangularBoardHeightUnit_property.prop ?? .empty }
    self.mRectangularBoardHeightUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mRectangularBoardHeightUnit_property.setProp (inValue) }
    self.mDefaultNetClassName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mDefaultNetClassName_property.prop ?? .empty }
    self.mDefaultNetClassName_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.mDefaultNetClassName_property.setProp (inValue) }
    self.mSelectedPageIndex_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mSelectedPageIndex_property.prop ?? .empty }
    self.mSelectedPageIndex_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mSelectedPageIndex_property.setProp (inValue) }
    self.mSelectedSchematicInspector_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mSelectedSchematicInspector_property.prop ?? .empty }
    self.mSelectedSchematicInspector_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mSelectedSchematicInspector_property.setProp (inValue) }
    self.mSchematicTitle_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mSchematicTitle_property.prop ?? .empty }
    self.mSchematicTitle_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.mSchematicTitle_property.setProp (inValue) }
    self.mSchematicVersion_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mSchematicVersion_property.prop ?? .empty }
    self.mSchematicVersion_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.mSchematicVersion_property.setProp (inValue) }
    self.mSchematicDate_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mSchematicDate_property.prop ?? .empty }
    self.mSchematicDate_property.mWriteModelFunction = { [weak self] (inValue : Date) in self?.mInternalValue?.mSchematicDate_property.setProp (inValue) }
    self.mSchematicHorizontalFlip_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mSchematicHorizontalFlip_property.prop ?? .empty }
    self.mSchematicHorizontalFlip_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mSchematicHorizontalFlip_property.setProp (inValue) }
    self.mSchematicVerticalFlip_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mSchematicVerticalFlip_property.prop ?? .empty }
    self.mSchematicVerticalFlip_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mSchematicVerticalFlip_property.setProp (inValue) }
    self.mSchematicZoom_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mSchematicZoom_property.prop ?? .empty }
    self.mSchematicZoom_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mSchematicZoom_property.setProp (inValue) }
    self.mSchematicGridStyle_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mSchematicGridStyle_property.prop ?? .empty }
    self.mSchematicGridStyle_property.mWriteModelFunction = { [weak self] (inValue : GridStyle) in self?.mInternalValue?.mSchematicGridStyle_property.setProp (inValue) }
    self.mSchematicGridDisplayFactor_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mSchematicGridDisplayFactor_property.prop ?? .empty }
    self.mSchematicGridDisplayFactor_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mSchematicGridDisplayFactor_property.setProp (inValue) }
    self.mSchematicCustomWidth_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mSchematicCustomWidth_property.prop ?? .empty }
    self.mSchematicCustomWidth_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mSchematicCustomWidth_property.setProp (inValue) }
    self.mSchematicCustomWidthUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mSchematicCustomWidthUnit_property.prop ?? .empty }
    self.mSchematicCustomWidthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mSchematicCustomWidthUnit_property.setProp (inValue) }
    self.mSchematicCustomHeight_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mSchematicCustomHeight_property.prop ?? .empty }
    self.mSchematicCustomHeight_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mSchematicCustomHeight_property.setProp (inValue) }
    self.mSchematicCustomHeightUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mSchematicCustomHeightUnit_property.prop ?? .empty }
    self.mSchematicCustomHeightUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mSchematicCustomHeightUnit_property.setProp (inValue) }
    self.mSchematicSheetOrientation_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mSchematicSheetOrientation_property.prop ?? .empty }
    self.mSchematicSheetOrientation_property.mWriteModelFunction = { [weak self] (inValue : SchematicSheetOrientation) in self?.mInternalValue?.mSchematicSheetOrientation_property.setProp (inValue) }
    self.mRastnetDisplay_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mRastnetDisplay_property.prop ?? .empty }
    self.mRastnetDisplay_property.mWriteModelFunction = { [weak self] (inValue : RastnetDisplay) in self?.mInternalValue?.mRastnetDisplay_property.setProp (inValue) }
    self.mRastnetDisplayedNetName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mRastnetDisplayedNetName_property.prop ?? .empty }
    self.mRastnetDisplayedNetName_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.mRastnetDisplayedNetName_property.setProp (inValue) }
    self.mRastnetDisplayedComponentName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mRastnetDisplayedComponentName_property.prop ?? .empty }
    self.mRastnetDisplayedComponentName_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.mRastnetDisplayedComponentName_property.setProp (inValue) }
    self.boardGridStepMultipliedByDisplayFactor_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardGridStepMultipliedByDisplayFactor_property.prop ?? .empty }
    self.boardLimitsGridStepMultipliedByDisplayFactor_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardLimitsGridStepMultipliedByDisplayFactor_property.prop ?? .empty }
    self.boardShapeIsRectangular_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardShapeIsRectangular_property.prop ?? .empty }
    self.selectedSheetIssues_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.selectedSheetIssues_property.prop ?? .empty }
    self.connectedPoints_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.connectedPoints_property.prop ?? .empty }
    self.connexionWarningString_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.connexionWarningString_property.prop ?? .empty }
    self.connexionErrorString_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.connexionErrorString_property.prop ?? .empty }
    self.sheetIndexes_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.sheetIndexes_property.prop ?? .empty }
    self.netsDescription_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.netsDescription_property.prop ?? .empty }
    self.boardIssues_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardIssues_property.prop ?? .empty }
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.signatureForERCChecking_property.prop ?? .empty }
    self.ercStatusImage_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.ercStatusImage_property.prop ?? .empty }
    self.ercStatusMessage_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.ercStatusMessage_property.prop ?? .empty }
    self.viaCountString_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.viaCountString_property.prop ?? .empty }
    self.trackCountString_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.trackCountString_property.prop ?? .empty }
    self.trackLengthString_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.trackLengthString_property.prop ?? .empty }
    self.boardStatusImage_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardStatusImage_property.prop ?? .empty }
    self.boardStatusMessage_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardStatusMessage_property.prop ?? .empty }
    self.interiorBoundBox_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.interiorBoundBox_property.prop ?? .empty }
    self.boardBoundBox_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardBoundBox_property.prop ?? .empty }
    self.boardInteriorTop_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardInteriorTop_property.prop ?? .empty }
    self.boardInteriorBottom_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardInteriorBottom_property.prop ?? .empty }
    self.boardInteriorLeft_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardInteriorLeft_property.prop ?? .empty }
    self.boardInteriorRight_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardInteriorRight_property.prop ?? .empty }
    self.boardLimitBorderTop_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardLimitBorderTop_property.prop ?? .empty }
    self.boardLimitBorderBottom_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardLimitBorderBottom_property.prop ?? .empty }
    self.boardLimitBorderLeft_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardLimitBorderLeft_property.prop ?? .empty }
    self.boardLimitBorderRight_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.boardLimitBorderRight_property.prop ?? .empty }
    self.borderElementCountString_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.borderElementCountString_property.prop ?? .empty }
    self.borderOutlineBackground_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.borderOutlineBackground_property.prop ?? .empty }
    self.borderViewBackground_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.borderViewBackground_property.prop ?? .empty }
    self.deviceNames_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.deviceNames_property.prop ?? .empty }
    self.allClassNames_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.allClassNames_property.prop ?? .empty }
    self.sheetGeometry_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.sheetGeometry_property.prop ?? .empty }
    self.schematicBackgroundDisplay_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.schematicBackgroundDisplay_property.prop ?? .empty }
    self.netWarningCount_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.netWarningCount_property.prop ?? .empty }
    self.netNamesArray_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.netNamesArray_property.prop ?? .empty }
    self.unplacedSymbols_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.unplacedSymbols_property.prop ?? .empty }
    self.unplacedPackages_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.unplacedPackages_property.prop ?? .empty }
    self.componentsPlacedInBoard_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.componentsPlacedInBoard_property.prop ?? .empty }
    self.placedComponentNameArray_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.placedComponentNameArray_property.prop ?? .empty }
    self.schematicHasErrorOrWarning_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.schematicHasErrorOrWarning_property.prop ?? .empty }
    self.schematicStatusMessage_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.schematicStatusMessage_property.prop ?? .empty }
    self.schematicStatusImage_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.schematicStatusImage_property.prop ?? .empty }
  }

  //····················································································································
  //   Proxy of 'mArtworkName' stored property
  //····················································································································

  let mArtworkName_property = EBPropertyProxy_String ()

  var mArtworkName_property_selection : EBSelection <String> {
    switch (self.mArtworkName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mArtworkVersion' stored property
  //····················································································································

  let mArtworkVersion_property = EBPropertyProxy_Int ()

  var mArtworkVersion_property_selection : EBSelection <Int> {
    switch (self.mArtworkVersion_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mPDFBoardBackgroundColor' stored property
  //····················································································································

  let mPDFBoardBackgroundColor_property = EBPropertyProxy_NSColor ()

  var mPDFBoardBackgroundColor_property_selection : EBSelection <NSColor> {
    switch (self.mPDFBoardBackgroundColor_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mCheckClearanceBetweenPadsOfSameNet' stored property
  //····················································································································

  let mCheckClearanceBetweenPadsOfSameNet_property = EBPropertyProxy_Bool ()

  var mCheckClearanceBetweenPadsOfSameNet_property_selection : EBSelection <Bool> {
    switch (self.mCheckClearanceBetweenPadsOfSameNet_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mLastERCCheckingIsSuccess' stored property
  //····················································································································

  let mLastERCCheckingIsSuccess_property = EBPropertyProxy_Bool ()

  var mLastERCCheckingIsSuccess_property_selection : EBSelection <Bool> {
    switch (self.mLastERCCheckingIsSuccess_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mLastERCCheckingSignature' stored property
  //····················································································································

  let mLastERCCheckingSignature_property = EBPropertyProxy_UInt32 ()

  var mLastERCCheckingSignature_property_selection : EBSelection <UInt32> {
    switch (self.mLastERCCheckingSignature_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardSideForNewTrack' stored property
  //····················································································································

  let mBoardSideForNewTrack_property = EBPropertyProxy_TrackSide ()

  var mBoardSideForNewTrack_property_selection : EBSelection <TrackSide> {
    switch (self.mBoardSideForNewTrack_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mAutoRouterPreferredDirections' stored property
  //····················································································································

  let mAutoRouterPreferredDirections_property = EBPropertyProxy_AutorouterPreferredDirections ()

  var mAutoRouterPreferredDirections_property_selection : EBSelection <AutorouterPreferredDirections> {
    switch (self.mAutoRouterPreferredDirections_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mAutorouterSnapAngle' stored property
  //····················································································································

  let mAutorouterSnapAngle_property = EBPropertyProxy_AutorouterSnapAngle ()

  var mAutorouterSnapAngle_property_selection : EBSelection <AutorouterSnapAngle> {
    switch (self.mAutorouterSnapAngle_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mRouteDirection' stored property
  //····················································································································

  let mRouteDirection_property = EBPropertyProxy_RouteDirection ()

  var mRouteDirection_property_selection : EBSelection <RouteDirection> {
    switch (self.mRouteDirection_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mRouteOrigin' stored property
  //····················································································································

  let mRouteOrigin_property = EBPropertyProxy_RouteOrigin ()

  var mRouteOrigin_property_selection : EBSelection <RouteOrigin> {
    switch (self.mRouteOrigin_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mTrackLengthUnit' stored property
  //····················································································································

  let mTrackLengthUnit_property = EBPropertyProxy_Int ()

  var mTrackLengthUnit_property_selection : EBSelection <Int> {
    switch (self.mTrackLengthUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mLayoutClearance' stored property
  //····················································································································

  let mLayoutClearance_property = EBPropertyProxy_Int ()

  var mLayoutClearance_property_selection : EBSelection <Int> {
    switch (self.mLayoutClearance_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mLayoutClearanceUnit' stored property
  //····················································································································

  let mLayoutClearanceUnit_property = EBPropertyProxy_Int ()

  var mLayoutClearanceUnit_property_selection : EBSelection <Int> {
    switch (self.mLayoutClearanceUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardSelectedInspector' stored property
  //····················································································································

  let mBoardSelectedInspector_property = EBPropertyProxy_Int ()

  var mBoardSelectedInspector_property_selection : EBSelection <Int> {
    switch (self.mBoardSelectedInspector_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardHorizontalFlip' stored property
  //····················································································································

  let mBoardHorizontalFlip_property = EBPropertyProxy_Bool ()

  var mBoardHorizontalFlip_property_selection : EBSelection <Bool> {
    switch (self.mBoardHorizontalFlip_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardVerticalFlip' stored property
  //····················································································································

  let mBoardVerticalFlip_property = EBPropertyProxy_Bool ()

  var mBoardVerticalFlip_property_selection : EBSelection <Bool> {
    switch (self.mBoardVerticalFlip_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardGridStyle' stored property
  //····················································································································

  let mBoardGridStyle_property = EBPropertyProxy_GridStyle ()

  var mBoardGridStyle_property_selection : EBSelection <GridStyle> {
    switch (self.mBoardGridStyle_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardGridDisplayFactor' stored property
  //····················································································································

  let mBoardGridDisplayFactor_property = EBPropertyProxy_Int ()

  var mBoardGridDisplayFactor_property_selection : EBSelection <Int> {
    switch (self.mBoardGridDisplayFactor_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardZoom' stored property
  //····················································································································

  let mBoardZoom_property = EBPropertyProxy_Int ()

  var mBoardZoom_property_selection : EBSelection <Int> {
    switch (self.mBoardZoom_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardGridStep' stored property
  //····················································································································

  let mBoardGridStep_property = EBPropertyProxy_Int ()

  var mBoardGridStep_property_selection : EBSelection <Int> {
    switch (self.mBoardGridStep_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardGridStepUnit' stored property
  //····················································································································

  let mBoardGridStepUnit_property = EBPropertyProxy_Int ()

  var mBoardGridStepUnit_property_selection : EBSelection <Int> {
    switch (self.mBoardGridStepUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mErrorOrWarningIssueSize' stored property
  //····················································································································

  let mErrorOrWarningIssueSize_property = EBPropertyProxy_Double ()

  var mErrorOrWarningIssueSize_property_selection : EBSelection <Double> {
    switch (self.mErrorOrWarningIssueSize_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mControlKeyHiliteDiameter' stored property
  //····················································································································

  let mControlKeyHiliteDiameter_property = EBPropertyProxy_Double ()

  var mControlKeyHiliteDiameter_property_selection : EBSelection <Double> {
    switch (self.mControlKeyHiliteDiameter_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mDSNFileProposedName' stored property
  //····················································································································

  let mDSNFileProposedName_property = EBPropertyProxy_String ()

  var mDSNFileProposedName_property_selection : EBSelection <String> {
    switch (self.mDSNFileProposedName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardLimitsWidth' stored property
  //····················································································································

  let mBoardLimitsWidth_property = EBPropertyProxy_Int ()

  var mBoardLimitsWidth_property_selection : EBSelection <Int> {
    switch (self.mBoardLimitsWidth_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardLimitsWidthUnit' stored property
  //····················································································································

  let mBoardLimitsWidthUnit_property = EBPropertyProxy_Int ()

  var mBoardLimitsWidthUnit_property_selection : EBSelection <Int> {
    switch (self.mBoardLimitsWidthUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardClearance' stored property
  //····················································································································

  let mBoardClearance_property = EBPropertyProxy_Int ()

  var mBoardClearance_property_selection : EBSelection <Int> {
    switch (self.mBoardClearance_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardClearanceUnit' stored property
  //····················································································································

  let mBoardClearanceUnit_property = EBPropertyProxy_Int ()

  var mBoardClearanceUnit_property_selection : EBSelection <Int> {
    switch (self.mBoardClearanceUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardLimitsSelectedInspector' stored property
  //····················································································································

  let mBoardLimitsSelectedInspector_property = EBPropertyProxy_Int ()

  var mBoardLimitsSelectedInspector_property_selection : EBSelection <Int> {
    switch (self.mBoardLimitsSelectedInspector_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardLimitsHorizontalFlip' stored property
  //····················································································································

  let mBoardLimitsHorizontalFlip_property = EBPropertyProxy_Bool ()

  var mBoardLimitsHorizontalFlip_property_selection : EBSelection <Bool> {
    switch (self.mBoardLimitsHorizontalFlip_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardLimitsVerticalFlip' stored property
  //····················································································································

  let mBoardLimitsVerticalFlip_property = EBPropertyProxy_Bool ()

  var mBoardLimitsVerticalFlip_property_selection : EBSelection <Bool> {
    switch (self.mBoardLimitsVerticalFlip_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardLimitsGridStyle' stored property
  //····················································································································

  let mBoardLimitsGridStyle_property = EBPropertyProxy_GridStyle ()

  var mBoardLimitsGridStyle_property_selection : EBSelection <GridStyle> {
    switch (self.mBoardLimitsGridStyle_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardLimitsGridDisplayFactor' stored property
  //····················································································································

  let mBoardLimitsGridDisplayFactor_property = EBPropertyProxy_Int ()

  var mBoardLimitsGridDisplayFactor_property_selection : EBSelection <Int> {
    switch (self.mBoardLimitsGridDisplayFactor_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardLimitsZoom' stored property
  //····················································································································

  let mBoardLimitsZoom_property = EBPropertyProxy_Int ()

  var mBoardLimitsZoom_property_selection : EBSelection <Int> {
    switch (self.mBoardLimitsZoom_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardLimitsGridStep' stored property
  //····················································································································

  let mBoardLimitsGridStep_property = EBPropertyProxy_Int ()

  var mBoardLimitsGridStep_property_selection : EBSelection <Int> {
    switch (self.mBoardLimitsGridStep_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardLimitsGridStepUnit' stored property
  //····················································································································

  let mBoardLimitsGridStepUnit_property = EBPropertyProxy_Int ()

  var mBoardLimitsGridStepUnit_property_selection : EBSelection <Int> {
    switch (self.mBoardLimitsGridStepUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardLimitsBoundingBoxUnit' stored property
  //····················································································································

  let mBoardLimitsBoundingBoxUnit_property = EBPropertyProxy_Int ()

  var mBoardLimitsBoundingBoxUnit_property_selection : EBSelection <Int> {
    switch (self.mBoardLimitsBoundingBoxUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardPointsBoundingBoxUnit' stored property
  //····················································································································

  let mBoardPointsBoundingBoxUnit_property = EBPropertyProxy_Int ()

  var mBoardPointsBoundingBoxUnit_property_selection : EBSelection <Int> {
    switch (self.mBoardPointsBoundingBoxUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardSelectedCurveDisplayUnit' stored property
  //····················································································································

  let mBoardSelectedCurveDisplayUnit_property = EBPropertyProxy_Int ()

  var mBoardSelectedCurveDisplayUnit_property_selection : EBSelection <Int> {
    switch (self.mBoardSelectedCurveDisplayUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardLimitControlPointsDisplayUnit' stored property
  //····················································································································

  let mBoardLimitControlPointsDisplayUnit_property = EBPropertyProxy_Int ()

  var mBoardLimitControlPointsDisplayUnit_property_selection : EBSelection <Int> {
    switch (self.mBoardLimitControlPointsDisplayUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mBoardShape' stored property
  //····················································································································

  let mBoardShape_property = EBPropertyProxy_BoardShape ()

  var mBoardShape_property_selection : EBSelection <BoardShape> {
    switch (self.mBoardShape_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mRectangularBoardWidth' stored property
  //····················································································································

  let mRectangularBoardWidth_property = EBPropertyProxy_Int ()

  var mRectangularBoardWidth_property_selection : EBSelection <Int> {
    switch (self.mRectangularBoardWidth_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mRectangularBoardWidthUnit' stored property
  //····················································································································

  let mRectangularBoardWidthUnit_property = EBPropertyProxy_Int ()

  var mRectangularBoardWidthUnit_property_selection : EBSelection <Int> {
    switch (self.mRectangularBoardWidthUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mRectangularBoardHeight' stored property
  //····················································································································

  let mRectangularBoardHeight_property = EBPropertyProxy_Int ()

  var mRectangularBoardHeight_property_selection : EBSelection <Int> {
    switch (self.mRectangularBoardHeight_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mRectangularBoardHeightUnit' stored property
  //····················································································································

  let mRectangularBoardHeightUnit_property = EBPropertyProxy_Int ()

  var mRectangularBoardHeightUnit_property_selection : EBSelection <Int> {
    switch (self.mRectangularBoardHeightUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mDefaultNetClassName' stored property
  //····················································································································

  let mDefaultNetClassName_property = EBPropertyProxy_String ()

  var mDefaultNetClassName_property_selection : EBSelection <String> {
    switch (self.mDefaultNetClassName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mSelectedPageIndex' stored property
  //····················································································································

  let mSelectedPageIndex_property = EBPropertyProxy_Int ()

  var mSelectedPageIndex_property_selection : EBSelection <Int> {
    switch (self.mSelectedPageIndex_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mSelectedSchematicInspector' stored property
  //····················································································································

  let mSelectedSchematicInspector_property = EBPropertyProxy_Int ()

  var mSelectedSchematicInspector_property_selection : EBSelection <Int> {
    switch (self.mSelectedSchematicInspector_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mSchematicTitle' stored property
  //····················································································································

  let mSchematicTitle_property = EBPropertyProxy_String ()

  var mSchematicTitle_property_selection : EBSelection <String> {
    switch (self.mSchematicTitle_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mSchematicVersion' stored property
  //····················································································································

  let mSchematicVersion_property = EBPropertyProxy_String ()

  var mSchematicVersion_property_selection : EBSelection <String> {
    switch (self.mSchematicVersion_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mSchematicDate' stored property
  //····················································································································

  let mSchematicDate_property = EBPropertyProxy_Date ()

  var mSchematicDate_property_selection : EBSelection <Date> {
    switch (self.mSchematicDate_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mSchematicHorizontalFlip' stored property
  //····················································································································

  let mSchematicHorizontalFlip_property = EBPropertyProxy_Bool ()

  var mSchematicHorizontalFlip_property_selection : EBSelection <Bool> {
    switch (self.mSchematicHorizontalFlip_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mSchematicVerticalFlip' stored property
  //····················································································································

  let mSchematicVerticalFlip_property = EBPropertyProxy_Bool ()

  var mSchematicVerticalFlip_property_selection : EBSelection <Bool> {
    switch (self.mSchematicVerticalFlip_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mSchematicZoom' stored property
  //····················································································································

  let mSchematicZoom_property = EBPropertyProxy_Int ()

  var mSchematicZoom_property_selection : EBSelection <Int> {
    switch (self.mSchematicZoom_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mSchematicGridStyle' stored property
  //····················································································································

  let mSchematicGridStyle_property = EBPropertyProxy_GridStyle ()

  var mSchematicGridStyle_property_selection : EBSelection <GridStyle> {
    switch (self.mSchematicGridStyle_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mSchematicGridDisplayFactor' stored property
  //····················································································································

  let mSchematicGridDisplayFactor_property = EBPropertyProxy_Int ()

  var mSchematicGridDisplayFactor_property_selection : EBSelection <Int> {
    switch (self.mSchematicGridDisplayFactor_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mSchematicCustomWidth' stored property
  //····················································································································

  let mSchematicCustomWidth_property = EBPropertyProxy_Int ()

  var mSchematicCustomWidth_property_selection : EBSelection <Int> {
    switch (self.mSchematicCustomWidth_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mSchematicCustomWidthUnit' stored property
  //····················································································································

  let mSchematicCustomWidthUnit_property = EBPropertyProxy_Int ()

  var mSchematicCustomWidthUnit_property_selection : EBSelection <Int> {
    switch (self.mSchematicCustomWidthUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mSchematicCustomHeight' stored property
  //····················································································································

  let mSchematicCustomHeight_property = EBPropertyProxy_Int ()

  var mSchematicCustomHeight_property_selection : EBSelection <Int> {
    switch (self.mSchematicCustomHeight_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mSchematicCustomHeightUnit' stored property
  //····················································································································

  let mSchematicCustomHeightUnit_property = EBPropertyProxy_Int ()

  var mSchematicCustomHeightUnit_property_selection : EBSelection <Int> {
    switch (self.mSchematicCustomHeightUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mSchematicSheetOrientation' stored property
  //····················································································································

  let mSchematicSheetOrientation_property = EBPropertyProxy_SchematicSheetOrientation ()

  var mSchematicSheetOrientation_property_selection : EBSelection <SchematicSheetOrientation> {
    switch (self.mSchematicSheetOrientation_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mRastnetDisplay' stored property
  //····················································································································

  let mRastnetDisplay_property = EBPropertyProxy_RastnetDisplay ()

  var mRastnetDisplay_property_selection : EBSelection <RastnetDisplay> {
    switch (self.mRastnetDisplay_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mRastnetDisplayedNetName' stored property
  //····················································································································

  let mRastnetDisplayedNetName_property = EBPropertyProxy_String ()

  var mRastnetDisplayedNetName_property_selection : EBSelection <String> {
    switch (self.mRastnetDisplayedNetName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mRastnetDisplayedComponentName' stored property
  //····················································································································

  let mRastnetDisplayedComponentName_property = EBPropertyProxy_String ()

  var mRastnetDisplayedComponentName_property_selection : EBSelection <String> {
    switch (self.mRastnetDisplayedComponentName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observers of 'minPPTPTTTWdisplayUnit' proxy property
  //····················································································································

  private var mObserversOf_minPPTPTTTWdisplayUnit = EBWeakEventSet ()

  //····················································································································

  var minPPTPTTTWdisplayUnit_property_selection : EBSelection <Int> {
    if let model = self.propval {
      switch (model.minPPTPTTTWdisplayUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_minPPTPTTTWdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTWdisplayUnit.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minPPTPTTTWdisplayUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minPPTPTTTWdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTWdisplayUnit.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minPPTPTTTWdisplayUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_minPPTPTTTWdisplayUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minPPTPTTTWdisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.minPPTPTTTWdisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minPPTPTTTWdisplayUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_minPPTPTTTWdisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minPPTPTTTWdisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minPPTPTTTW' proxy property
  //····················································································································

  private var mObserversOf_minPPTPTTTW = EBWeakEventSet ()

  //····················································································································

  var minPPTPTTTW_property_selection : EBSelection <Int> {
    if let model = self.propval {
      switch (model.minPPTPTTTW_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_minPPTPTTTW (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTW.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minPPTPTTTW_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minPPTPTTTW (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minPPTPTTTW.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minPPTPTTTW_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_minPPTPTTTW_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minPPTPTTTW.apply { (_ observer : EBEvent) in
        managedObject.minPPTPTTTW_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minPPTPTTTW_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_minPPTPTTTW.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minPPTPTTTW_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForOARdisplayUnit' proxy property
  //····················································································································

  private var mObserversOf_minValueForOARdisplayUnit = EBWeakEventSet ()

  //····················································································································

  var minValueForOARdisplayUnit_property_selection : EBSelection <Int> {
    if let model = self.propval {
      switch (model.minValueForOARdisplayUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForOARdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForOARdisplayUnit.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForOARdisplayUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForOARdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForOARdisplayUnit.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForOARdisplayUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForOARdisplayUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minValueForOARdisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForOARdisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForOARdisplayUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_minValueForOARdisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForOARdisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForOARinEBUnit' proxy property
  //····················································································································

  private var mObserversOf_minValueForOARinEBUnit = EBWeakEventSet ()

  //····················································································································

  var minValueForOARinEBUnit_property_selection : EBSelection <Int> {
    if let model = self.propval {
      switch (model.minValueForOARinEBUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForOARinEBUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForOARinEBUnit.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForOARinEBUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForOARinEBUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForOARinEBUnit.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForOARinEBUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForOARinEBUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minValueForOARinEBUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForOARinEBUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForOARinEBUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_minValueForOARinEBUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForOARinEBUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForPHDdisplayUnit' proxy property
  //····················································································································

  private var mObserversOf_minValueForPHDdisplayUnit = EBWeakEventSet ()

  //····················································································································

  var minValueForPHDdisplayUnit_property_selection : EBSelection <Int> {
    if let model = self.propval {
      switch (model.minValueForPHDdisplayUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForPHDdisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForPHDdisplayUnit.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForPHDdisplayUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForPHDdisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForPHDdisplayUnit.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForPHDdisplayUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForPHDdisplayUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minValueForPHDdisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForPHDdisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForPHDdisplayUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_minValueForPHDdisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForPHDdisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForPHDinEBUnit' proxy property
  //····················································································································

  private var mObserversOf_minValueForPHDinEBUnit = EBWeakEventSet ()

  //····················································································································

  var minValueForPHDinEBUnit_property_selection : EBSelection <Int> {
    if let model = self.propval {
      switch (model.minValueForPHDinEBUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForPHDinEBUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForPHDinEBUnit.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForPHDinEBUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForPHDinEBUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForPHDinEBUnit.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForPHDinEBUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForPHDinEBUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minValueForPHDinEBUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForPHDinEBUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForPHDinEBUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_minValueForPHDinEBUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForPHDinEBUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForBoardLimitWidth' proxy property
  //····················································································································

  private var mObserversOf_minValueForBoardLimitWidth = EBWeakEventSet ()

  //····················································································································

  var minValueForBoardLimitWidth_property_selection : EBSelection <Int> {
    if let model = self.propval {
      switch (model.minValueForBoardLimitWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForBoardLimitWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidth.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForBoardLimitWidth_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForBoardLimitWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidth.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForBoardLimitWidth_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForBoardLimitWidth_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minValueForBoardLimitWidth.apply { (_ observer : EBEvent) in
        managedObject.minValueForBoardLimitWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForBoardLimitWidth_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_minValueForBoardLimitWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForBoardLimitWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'minValueForBoardLimitWidthDisplayUnit' proxy property
  //····················································································································

  private var mObserversOf_minValueForBoardLimitWidthDisplayUnit = EBWeakEventSet ()

  //····················································································································

  var minValueForBoardLimitWidthDisplayUnit_property_selection : EBSelection <Int> {
    if let model = self.propval {
      switch (model.minValueForBoardLimitWidthDisplayUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_minValueForBoardLimitWidthDisplayUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForBoardLimitWidthDisplayUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_minValueForBoardLimitWidthDisplayUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.minValueForBoardLimitWidthDisplayUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_minValueForBoardLimitWidthDisplayUnit_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.apply { (_ observer : EBEvent) in
        managedObject.minValueForBoardLimitWidthDisplayUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_minValueForBoardLimitWidthDisplayUnit_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_minValueForBoardLimitWidthDisplayUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.minValueForBoardLimitWidthDisplayUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'drillDataFileExtension' proxy property
  //····················································································································

  private var mObserversOf_drillDataFileExtension = EBWeakEventSet ()

  //····················································································································

  var drillDataFileExtension_property_selection : EBSelection <String> {
    if let model = self.propval {
      switch (model.drillDataFileExtension_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_drillDataFileExtension (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_drillDataFileExtension.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drillDataFileExtension_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_drillDataFileExtension (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_drillDataFileExtension.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.drillDataFileExtension_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_drillDataFileExtension_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_drillDataFileExtension.apply { (_ observer : EBEvent) in
        managedObject.drillDataFileExtension_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_drillDataFileExtension_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_drillDataFileExtension.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.drillDataFileExtension_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'comments' proxy property
  //····················································································································

  private var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  var comments_property_selection : EBSelection <String> {
    if let model = self.propval {
      switch (model.comments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_comments.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.comments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_comments.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.comments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_comments_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_comments.apply { (_ observer : EBEvent) in
        managedObject.comments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_comments_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_comments.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.comments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedSheetTitle' proxy property
  //····················································································································

  private var mObserversOf_selectedSheetTitle = EBWeakEventSet ()

  //····················································································································

  var selectedSheetTitle_property_selection : EBSelection <String> {
    if let model = self.propval {
      switch (model.selectedSheetTitle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedSheetTitle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedSheetTitle.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedSheetTitle_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedSheetTitle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedSheetTitle.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectedSheetTitle_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedSheetTitle_toElementsOfSet (_ inSet : Set<ProjectRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedSheetTitle.apply { (_ observer : EBEvent) in
        managedObject.selectedSheetTitle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedSheetTitle_fromElementsOfSet (_ inSet : Set<ProjectRoot>) {
    self.mObserversOf_selectedSheetTitle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedSheetTitle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observer of 'boardGridStepMultipliedByDisplayFactor' transient property
  //····················································································································

  let boardGridStepMultipliedByDisplayFactor_property = EBTransientProperty_Int ()

  var boardGridStepMultipliedByDisplayFactor_property_selection : EBSelection <Int> {
    switch (self.boardGridStepMultipliedByDisplayFactor_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'boardLimitsGridStepMultipliedByDisplayFactor' transient property
  //····················································································································

  let boardLimitsGridStepMultipliedByDisplayFactor_property = EBTransientProperty_Int ()

  var boardLimitsGridStepMultipliedByDisplayFactor_property_selection : EBSelection <Int> {
    switch (self.boardLimitsGridStepMultipliedByDisplayFactor_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'boardShapeIsRectangular' transient property
  //····················································································································

  let boardShapeIsRectangular_property = EBTransientProperty_Bool ()

  var boardShapeIsRectangular_property_selection : EBSelection <Bool> {
    switch (self.boardShapeIsRectangular_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'selectedSheetIssues' transient property
  //····················································································································

  let selectedSheetIssues_property = EBTransientProperty_CanariIssueArray ()

  var selectedSheetIssues_property_selection : EBSelection <CanariIssueArray> {
    switch (self.selectedSheetIssues_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'connectedPoints' transient property
  //····················································································································

  let connectedPoints_property = EBTransientProperty_EBShape ()

  var connectedPoints_property_selection : EBSelection <EBShape> {
    switch (self.connectedPoints_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'connexionWarningString' transient property
  //····················································································································

  let connexionWarningString_property = EBTransientProperty_String ()

  var connexionWarningString_property_selection : EBSelection <String> {
    switch (self.connexionWarningString_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'connexionErrorString' transient property
  //····················································································································

  let connexionErrorString_property = EBTransientProperty_String ()

  var connexionErrorString_property_selection : EBSelection <String> {
    switch (self.connexionErrorString_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'sheetIndexes' transient property
  //····················································································································

  let sheetIndexes_property = EBTransientProperty_IntArray ()

  var sheetIndexes_property_selection : EBSelection <IntArray> {
    switch (self.sheetIndexes_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'netsDescription' transient property
  //····················································································································

  let netsDescription_property = EBTransientProperty_NetInfoArray ()

  var netsDescription_property_selection : EBSelection <NetInfoArray> {
    switch (self.netsDescription_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'boardIssues' transient property
  //····················································································································

  let boardIssues_property = EBTransientProperty_CanariIssueArray ()

  var boardIssues_property_selection : EBSelection <CanariIssueArray> {
    switch (self.boardIssues_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'signatureForERCChecking' transient property
  //····················································································································

  let signatureForERCChecking_property = EBTransientProperty_UInt32 ()

  var signatureForERCChecking_property_selection : EBSelection <UInt32> {
    switch (self.signatureForERCChecking_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'ercStatusImage' transient property
  //····················································································································

  let ercStatusImage_property = EBTransientProperty_NSImage ()

  var ercStatusImage_property_selection : EBSelection <NSImage> {
    switch (self.ercStatusImage_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'ercStatusMessage' transient property
  //····················································································································

  let ercStatusMessage_property = EBTransientProperty_String ()

  var ercStatusMessage_property_selection : EBSelection <String> {
    switch (self.ercStatusMessage_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'viaCountString' transient property
  //····················································································································

  let viaCountString_property = EBTransientProperty_String ()

  var viaCountString_property_selection : EBSelection <String> {
    switch (self.viaCountString_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'trackCountString' transient property
  //····················································································································

  let trackCountString_property = EBTransientProperty_String ()

  var trackCountString_property_selection : EBSelection <String> {
    switch (self.trackCountString_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'trackLengthString' transient property
  //····················································································································

  let trackLengthString_property = EBTransientProperty_String ()

  var trackLengthString_property_selection : EBSelection <String> {
    switch (self.trackLengthString_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'boardStatusImage' transient property
  //····················································································································

  let boardStatusImage_property = EBTransientProperty_NSImage ()

  var boardStatusImage_property_selection : EBSelection <NSImage> {
    switch (self.boardStatusImage_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'boardStatusMessage' transient property
  //····················································································································

  let boardStatusMessage_property = EBTransientProperty_String ()

  var boardStatusMessage_property_selection : EBSelection <String> {
    switch (self.boardStatusMessage_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'interiorBoundBox' transient property
  //····················································································································

  let interiorBoundBox_property = EBTransientProperty_CanariRect ()

  var interiorBoundBox_property_selection : EBSelection <CanariRect> {
    switch (self.interiorBoundBox_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'boardBoundBox' transient property
  //····················································································································

  let boardBoundBox_property = EBTransientProperty_CanariRect ()

  var boardBoundBox_property_selection : EBSelection <CanariRect> {
    switch (self.boardBoundBox_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'boardInteriorTop' transient property
  //····················································································································

  let boardInteriorTop_property = EBTransientProperty_String ()

  var boardInteriorTop_property_selection : EBSelection <String> {
    switch (self.boardInteriorTop_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'boardInteriorBottom' transient property
  //····················································································································

  let boardInteriorBottom_property = EBTransientProperty_String ()

  var boardInteriorBottom_property_selection : EBSelection <String> {
    switch (self.boardInteriorBottom_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'boardInteriorLeft' transient property
  //····················································································································

  let boardInteriorLeft_property = EBTransientProperty_String ()

  var boardInteriorLeft_property_selection : EBSelection <String> {
    switch (self.boardInteriorLeft_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'boardInteriorRight' transient property
  //····················································································································

  let boardInteriorRight_property = EBTransientProperty_String ()

  var boardInteriorRight_property_selection : EBSelection <String> {
    switch (self.boardInteriorRight_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'boardLimitBorderTop' transient property
  //····················································································································

  let boardLimitBorderTop_property = EBTransientProperty_String ()

  var boardLimitBorderTop_property_selection : EBSelection <String> {
    switch (self.boardLimitBorderTop_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'boardLimitBorderBottom' transient property
  //····················································································································

  let boardLimitBorderBottom_property = EBTransientProperty_String ()

  var boardLimitBorderBottom_property_selection : EBSelection <String> {
    switch (self.boardLimitBorderBottom_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'boardLimitBorderLeft' transient property
  //····················································································································

  let boardLimitBorderLeft_property = EBTransientProperty_String ()

  var boardLimitBorderLeft_property_selection : EBSelection <String> {
    switch (self.boardLimitBorderLeft_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'boardLimitBorderRight' transient property
  //····················································································································

  let boardLimitBorderRight_property = EBTransientProperty_String ()

  var boardLimitBorderRight_property_selection : EBSelection <String> {
    switch (self.boardLimitBorderRight_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'borderElementCountString' transient property
  //····················································································································

  let borderElementCountString_property = EBTransientProperty_String ()

  var borderElementCountString_property_selection : EBSelection <String> {
    switch (self.borderElementCountString_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'borderOutlineBackground' transient property
  //····················································································································

  let borderOutlineBackground_property = EBTransientProperty_EBShape ()

  var borderOutlineBackground_property_selection : EBSelection <EBShape> {
    switch (self.borderOutlineBackground_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'borderViewBackground' transient property
  //····················································································································

  let borderViewBackground_property = EBTransientProperty_EBShape ()

  var borderViewBackground_property_selection : EBSelection <EBShape> {
    switch (self.borderViewBackground_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'deviceNames' transient property
  //····················································································································

  let deviceNames_property = EBTransientProperty_StringArray ()

  var deviceNames_property_selection : EBSelection <StringArray> {
    switch (self.deviceNames_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'allClassNames' transient property
  //····················································································································

  let allClassNames_property = EBTransientProperty_StringArray ()

  var allClassNames_property_selection : EBSelection <StringArray> {
    switch (self.allClassNames_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'sheetGeometry' transient property
  //····················································································································

  let sheetGeometry_property = EBTransientProperty_SchematicSheetGeometry ()

  var sheetGeometry_property_selection : EBSelection <SchematicSheetGeometry> {
    switch (self.sheetGeometry_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'schematicBackgroundDisplay' transient property
  //····················································································································

  let schematicBackgroundDisplay_property = EBTransientProperty_EBShape ()

  var schematicBackgroundDisplay_property_selection : EBSelection <EBShape> {
    switch (self.schematicBackgroundDisplay_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'netWarningCount' transient property
  //····················································································································

  let netWarningCount_property = EBTransientProperty_Int ()

  var netWarningCount_property_selection : EBSelection <Int> {
    switch (self.netWarningCount_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'netNamesArray' transient property
  //····················································································································

  let netNamesArray_property = EBTransientProperty_StringArray ()

  var netNamesArray_property_selection : EBSelection <StringArray> {
    switch (self.netNamesArray_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'unplacedSymbols' transient property
  //····················································································································

  let unplacedSymbols_property = EBTransientProperty_StringTagArray ()

  var unplacedSymbols_property_selection : EBSelection <StringTagArray> {
    switch (self.unplacedSymbols_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'unplacedPackages' transient property
  //····················································································································

  let unplacedPackages_property = EBTransientProperty_StringTagArray ()

  var unplacedPackages_property_selection : EBSelection <StringTagArray> {
    switch (self.unplacedPackages_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'componentsPlacedInBoard' transient property
  //····················································································································

  let componentsPlacedInBoard_property = EBTransientProperty_StringTagArray ()

  var componentsPlacedInBoard_property_selection : EBSelection <StringTagArray> {
    switch (self.componentsPlacedInBoard_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'placedComponentNameArray' transient property
  //····················································································································

  let placedComponentNameArray_property = EBTransientProperty_StringArray ()

  var placedComponentNameArray_property_selection : EBSelection <StringArray> {
    switch (self.placedComponentNameArray_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'schematicHasErrorOrWarning' transient property
  //····················································································································

  let schematicHasErrorOrWarning_property = EBTransientProperty_Bool ()

  var schematicHasErrorOrWarning_property_selection : EBSelection <Bool> {
    switch (self.schematicHasErrorOrWarning_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'schematicStatusMessage' transient property
  //····················································································································

  let schematicStatusMessage_property = EBTransientProperty_String ()

  var schematicStatusMessage_property_selection : EBSelection <String> {
    switch (self.schematicStatusMessage_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'schematicStatusImage' transient property
  //····················································································································

  let schematicStatusImage_property = EBTransientProperty_NSImage ()

  var schematicStatusImage_property_selection : EBSelection <NSImage> {
    switch (self.schematicStatusImage_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observable toMany property: mSheets
  //····················································································································

  private var mObserversOf_mSheets = EBWeakEventSet ()

  //····················································································································

  var mSheets_property_selection : EBSelection <[SheetInProject]> {
    if let model = self.propval {
      switch (model.mSheets_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mSheets (_ inObserver : EBEvent) {
    self.mObserversOf_mSheets.insert (inObserver)
    if let object = self.propval {
      object.mSheets_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSheets (_ inObserver : EBEvent) {
    self.mObserversOf_mSheets.remove (inObserver)
    if let object = self.propval {
      object.mSheets_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mNetClasses
  //····················································································································

  private var mObserversOf_mNetClasses = EBWeakEventSet ()

  //····················································································································

  var mNetClasses_property_selection : EBSelection <[NetClassInProject]> {
    if let model = self.propval {
      switch (model.mNetClasses_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mNetClasses (_ inObserver : EBEvent) {
    self.mObserversOf_mNetClasses.insert (inObserver)
    if let object = self.propval {
      object.mNetClasses_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetClasses (_ inObserver : EBEvent) {
    self.mObserversOf_mNetClasses.remove (inObserver)
    if let object = self.propval {
      object.mNetClasses_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mFonts
  //····················································································································

  private var mObserversOf_mFonts = EBWeakEventSet ()

  //····················································································································

  var mFonts_property_selection : EBSelection <[FontInProject]> {
    if let model = self.propval {
      switch (model.mFonts_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mFonts (_ inObserver : EBEvent) {
    self.mObserversOf_mFonts.insert (inObserver)
    if let object = self.propval {
      object.mFonts_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mFonts (_ inObserver : EBEvent) {
    self.mObserversOf_mFonts.remove (inObserver)
    if let object = self.propval {
      object.mFonts_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mDevices
  //····················································································································

  private var mObserversOf_mDevices = EBWeakEventSet ()

  //····················································································································

  var mDevices_property_selection : EBSelection <[DeviceInProject]> {
    if let model = self.propval {
      switch (model.mDevices_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mDevices (_ inObserver : EBEvent) {
    self.mObserversOf_mDevices.insert (inObserver)
    if let object = self.propval {
      object.mDevices_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDevices (_ inObserver : EBEvent) {
    self.mObserversOf_mDevices.remove (inObserver)
    if let object = self.propval {
      object.mDevices_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mBorderCurves
  //····················································································································

  private var mObserversOf_mBorderCurves = EBWeakEventSet ()

  //····················································································································

  var mBorderCurves_property_selection : EBSelection <[BorderCurve]> {
    if let model = self.propval {
      switch (model.mBorderCurves_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mBorderCurves (_ inObserver : EBEvent) {
    self.mObserversOf_mBorderCurves.insert (inObserver)
    if let object = self.propval {
      object.mBorderCurves_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBorderCurves (_ inObserver : EBEvent) {
    self.mObserversOf_mBorderCurves.remove (inObserver)
    if let object = self.propval {
      object.mBorderCurves_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mBoardObjects
  //····················································································································

  private var mObserversOf_mBoardObjects = EBWeakEventSet ()

  //····················································································································

  var mBoardObjects_property_selection : EBSelection <[BoardObject]> {
    if let model = self.propval {
      switch (model.mBoardObjects_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mBoardObjects (_ inObserver : EBEvent) {
    self.mObserversOf_mBoardObjects.insert (inObserver)
    if let object = self.propval {
      object.mBoardObjects_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mBoardObjects (_ inObserver : EBEvent) {
    self.mObserversOf_mBoardObjects.remove (inObserver)
    if let object = self.propval {
      object.mBoardObjects_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mComponents
  //····················································································································

  private var mObserversOf_mComponents = EBWeakEventSet ()

  //····················································································································

  var mComponents_property_selection : EBSelection <[ComponentInProject]> {
    if let model = self.propval {
      switch (model.mComponents_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mComponents (_ inObserver : EBEvent) {
    self.mObserversOf_mComponents.insert (inObserver)
    if let object = self.propval {
      object.mComponents_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComponents (_ inObserver : EBEvent) {
    self.mObserversOf_mComponents.remove (inObserver)
    if let object = self.propval {
      object.mComponents_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    TransientObject ProjectRoot
//----------------------------------------------------------------------------------------------------------------------

class TransientObject_ProjectRoot : ReadOnlyObject_ProjectRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_ProjectRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_ProjectRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : ProjectRoot? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < ProjectRoot? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : ProjectRoot? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_ProjectRoot
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_ProjectRoot : ReadOnlyObject_ProjectRoot {

  //····················································································································
 
  func setProp (_ inValue : ProjectRoot?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_ProjectRoot
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_ProjectRoot : ReadWriteObject_ProjectRoot {

  //····················································································································

  private var mModel : ReadWriteObject_ProjectRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_ProjectRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : ProjectRoot?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : ProjectRoot?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < ProjectRoot? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : ProjectRoot? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_ProjectRoot 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_ProjectRoot : ReadWriteObject_ProjectRoot, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ProjectRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ProjectRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ProjectRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ProjectRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : ProjectRoot?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < ProjectRoot? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : ProjectRoot?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : ProjectRoot? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

