//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

protocol PointInSchematic_mSymbolPinName : class {
  var mSymbolPinName : String { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PointInSchematic_mX : class {
  var mX : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PointInSchematic_mY : class {
  var mY : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PointInSchematic_location : class {
  var location : CanariPoint? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PointInSchematic_netName : class {
  var netName : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PointInSchematic_netClassName : class {
  var netClassName : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PointInSchematic_hasNet : class {
  var hasNet : Bool? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PointInSchematic_canMove : class {
  var canMove : Bool? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PointInSchematic_wireColor : class {
  var wireColor : NSColor? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PointInSchematic_symbolRotation : class {
  var symbolRotation : QuadrantRotation? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PointInSchematic_symbolNameNetName : class {
  var symbolNameNetName : TwoStrings? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PointInSchematic_isConnected : class {
  var isConnected : Bool? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PointInSchematic_status : class {
  var status : SchematicPointStatus? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PointInSchematic_connectedPoints : class {
  var connectedPoints : CanariPointArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PointInSchematic_netInfoForPoint : class {
  var netInfoForPoint : NetInfoPoint? { get }
}

//----------------------------------------------------------------------------------------------------------------------
//    Entity: PointInSchematic
//----------------------------------------------------------------------------------------------------------------------

class PointInSchematic : EBManagedObject,
         PointInSchematic_mSymbolPinName,
         PointInSchematic_mX,
         PointInSchematic_mY,
         PointInSchematic_location,
         PointInSchematic_netName,
         PointInSchematic_netClassName,
         PointInSchematic_hasNet,
         PointInSchematic_canMove,
         PointInSchematic_wireColor,
         PointInSchematic_symbolRotation,
         PointInSchematic_symbolNameNetName,
         PointInSchematic_isConnected,
         PointInSchematic_status,
         PointInSchematic_connectedPoints,
         PointInSchematic_netInfoForPoint {

  //····················································································································
  //   Atomic property: mSymbolPinName
  //····················································································································

  // final let mSymbolPinName_property = EBStoredProperty_String (defaultValue: "")

  final let mSymbolPinName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mSymbolPinName_toDefaultValue () {
    self.mSymbolPinName = ""
  }

  //····················································································································

  final var mSymbolPinName : String {
    get { return self.mSymbolPinName_property.propval }
    set { self.mSymbolPinName_property.setProp (newValue) }
  }

  //····················································································································

  final var mSymbolPinName_property_selection : EBSelection <String> { return self.mSymbolPinName_property.prop }

  //····················································································································
  //   To many property: mLabels
  //····················································································································

  final let mLabels_property = StoredArrayOf_LabelInSchematic (usedForSignature: false)

  //····················································································································

  final var mLabels_property_selection : EBSelection < [LabelInSchematic] > {
    return self.mLabels_property.prop
  }

  //····················································································································

  final var mLabels : [LabelInSchematic] {
    get { return self.mLabels_property.propval }
    set { self.mLabels_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  // final let mX_property = EBStoredProperty_Int (defaultValue: 0)

  final let mX_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mX_toDefaultValue () {
    self.mX = 0
  }

  //····················································································································

  final var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································

  final var mX_property_selection : EBSelection <Int> { return self.mX_property.prop }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  // final let mY_property = EBStoredProperty_Int (defaultValue: 0)

  final let mY_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mY_toDefaultValue () {
    self.mY = 0
  }

  //····················································································································

  final var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································

  final var mY_property_selection : EBSelection <Int> { return self.mY_property.prop }

  //····················································································································
  //   To many property: mWiresP2s
  //····················································································································

  final let mWiresP2s_property = StoredArrayOf_WireInSchematic (usedForSignature: false)

  //····················································································································

  final var mWiresP2s_property_selection : EBSelection < [WireInSchematic] > {
    return self.mWiresP2s_property.prop
  }

  //····················································································································

  final var mWiresP2s : [WireInSchematic] {
    get { return self.mWiresP2s_property.propval }
    set { self.mWiresP2s_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mWiresP1s
  //····················································································································

  final let mWiresP1s_property = StoredArrayOf_WireInSchematic (usedForSignature: false)

  //····················································································································

  final var mWiresP1s_property_selection : EBSelection < [WireInSchematic] > {
    return self.mWiresP1s_property.prop
  }

  //····················································································································

  final var mWiresP1s : [WireInSchematic] {
    get { return self.mWiresP1s_property.propval }
    set { self.mWiresP1s_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: mSymbol
  //····················································································································

  final let mSymbol_property = StoredObject_ComponentSymbolInProject (usedForSignature: false)

  //····················································································································

  final var mSymbol_property_selection : EBSelection <ComponentSymbolInProject?> {
    return .single (self.mSymbol_property.propval)
  }

  //····················································································································

  final var mSymbol : ComponentSymbolInProject? {
    get {
      return self.mSymbol_property.propval
    }
    set {
      if self.mSymbol_property.propval != nil {
        self.mSymbol_property.setProp (nil)
      }
      if newValue != nil {
        self.mSymbol_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  final var mSymbol_none : StoredObject_ComponentSymbolInProject { return self.mSymbol_property }

  //····················································································································

  final var mSymbol_none_selection : EBSelection <Bool> {
    return .single (self.mSymbol_property.propval == nil)
  }

  //····················································································································
  //   To one property: mNet
  //····················································································································

  final let mNet_property = StoredObject_NetInProject (usedForSignature: false)

  //····················································································································

  final var mNet_property_selection : EBSelection <NetInProject?> {
    return .single (self.mNet_property.propval)
  }

  //····················································································································

  final var mNet : NetInProject? {
    get {
      return self.mNet_property.propval
    }
    set {
      if self.mNet_property.propval != nil {
        self.mNet_property.setProp (nil)
      }
      if newValue != nil {
        self.mNet_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  final var mNet_none : StoredObject_NetInProject { return self.mNet_property }

  //····················································································································

  final var mNet_none_selection : EBSelection <Bool> {
    return .single (self.mNet_property.propval == nil)
  }

  //····················································································································
  //   To one property: mNC
  //····················································································································

  final let mNC_property = StoredObject_NCInSchematic (usedForSignature: false)

  //····················································································································

  final var mNC_property_selection : EBSelection <NCInSchematic?> {
    return .single (self.mNC_property.propval)
  }

  //····················································································································

  final var mNC : NCInSchematic? {
    get {
      return self.mNC_property.propval
    }
    set {
      if self.mNC_property.propval != nil {
        self.mNC_property.setProp (nil)
      }
      if newValue != nil {
        self.mNC_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  final var mNC_none : StoredObject_NCInSchematic { return self.mNC_property }

  //····················································································································

  final var mNC_none_selection : EBSelection <Bool> {
    return .single (self.mNC_property.propval == nil)
  }

  //····················································································································
  //   Transient property: location
  //····················································································································

  final let location_property = EBTransientProperty_CanariPoint ()

  //····················································································································

  final var location_property_selection : EBSelection <CanariPoint> {
    return self.location_property.prop
  }

  //····················································································································

  final var location : CanariPoint? {
    switch self.location_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netName
  //····················································································································

  final let netName_property = EBTransientProperty_String ()

  //····················································································································

  final var netName_property_selection : EBSelection <String> {
    return self.netName_property.prop
  }

  //····················································································································

  final var netName : String? {
    switch self.netName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netClassName
  //····················································································································

  final let netClassName_property = EBTransientProperty_String ()

  //····················································································································

  final var netClassName_property_selection : EBSelection <String> {
    return self.netClassName_property.prop
  }

  //····················································································································

  final var netClassName : String? {
    switch self.netClassName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: hasNet
  //····················································································································

  final let hasNet_property = EBTransientProperty_Bool ()

  //····················································································································

  final var hasNet_property_selection : EBSelection <Bool> {
    return self.hasNet_property.prop
  }

  //····················································································································

  final var hasNet : Bool? {
    switch self.hasNet_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canMove
  //····················································································································

  final let canMove_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canMove_property_selection : EBSelection <Bool> {
    return self.canMove_property.prop
  }

  //····················································································································

  final var canMove : Bool? {
    switch self.canMove_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: wireColor
  //····················································································································

  final let wireColor_property = EBTransientProperty_NSColor ()

  //····················································································································

  final var wireColor_property_selection : EBSelection <NSColor> {
    return self.wireColor_property.prop
  }

  //····················································································································

  final var wireColor : NSColor? {
    switch self.wireColor_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolRotation
  //····················································································································

  final let symbolRotation_property = EBTransientProperty_QuadrantRotation ()

  //····················································································································

  final var symbolRotation_property_selection : EBSelection <QuadrantRotation> {
    return self.symbolRotation_property.prop
  }

  //····················································································································

  final var symbolRotation : QuadrantRotation? {
    switch self.symbolRotation_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   To one property: mSheet
  //····················································································································

  final let mSheet_property = StoredObject_SheetInProject (usedForSignature: false)

  //····················································································································

  final var mSheet_property_selection : EBSelection <SheetInProject?> {
    return .single (self.mSheet_property.propval)
  }

  //····················································································································

  final var mSheet : SheetInProject? {
    get {
      return self.mSheet_property.propval
    }
    set {
      if self.mSheet_property.propval != nil {
        self.mSheet_property.setProp (nil)
      }
      if newValue != nil {
        self.mSheet_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  final var mSheet_none : StoredObject_SheetInProject { return self.mSheet_property }

  //····················································································································

  final var mSheet_none_selection : EBSelection <Bool> {
    return .single (self.mSheet_property.propval == nil)
  }

  //····················································································································
  //   Transient property: symbolNameNetName
  //····················································································································

  final let symbolNameNetName_property = EBTransientProperty_TwoStrings ()

  //····················································································································

  final var symbolNameNetName_property_selection : EBSelection <TwoStrings> {
    return self.symbolNameNetName_property.prop
  }

  //····················································································································

  final var symbolNameNetName : TwoStrings? {
    switch self.symbolNameNetName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: isConnected
  //····················································································································

  final let isConnected_property = EBTransientProperty_Bool ()

  //····················································································································

  final var isConnected_property_selection : EBSelection <Bool> {
    return self.isConnected_property.prop
  }

  //····················································································································

  final var isConnected : Bool? {
    switch self.isConnected_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: status
  //····················································································································

  final let status_property = EBTransientProperty_SchematicPointStatus ()

  //····················································································································

  final var status_property_selection : EBSelection <SchematicPointStatus> {
    return self.status_property.prop
  }

  //····················································································································

  final var status : SchematicPointStatus? {
    switch self.status_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: connectedPoints
  //····················································································································

  final let connectedPoints_property = EBTransientProperty_CanariPointArray ()

  //····················································································································

  final var connectedPoints_property_selection : EBSelection <CanariPointArray> {
    return self.connectedPoints_property.prop
  }

  //····················································································································

  final var connectedPoints : CanariPointArray? {
    switch self.connectedPoints_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netInfoForPoint
  //····················································································································

  final let netInfoForPoint_property = EBTransientProperty_NetInfoPoint ()

  //····················································································································

  final var netInfoForPoint_property_selection : EBSelection <NetInfoPoint> {
    return self.netInfoForPoint_property.prop
  }

  //····················································································································

  final var netInfoForPoint : NetInfoPoint? {
    switch self.netInfoForPoint_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.mSymbolPinName_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.mX_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mY_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    super.init (ebUndoManager)
    self.configureObject ()
  }
  
  //····················································································································

  private final func configureObject () {
  //--- To many property: mLabels (has opposite relationship)
    self.mLabels_property.ebUndoManager = self.ebUndoManager
    self.mLabels_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPoint_property.setProp (me) } },
      resetter: { inObject in inObject.mPoint_property.setProp (nil) }
    )
  //--- To many property: mWiresP2s (has opposite relationship)
    self.mWiresP2s_property.ebUndoManager = self.ebUndoManager
    self.mWiresP2s_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mP2_property.setProp (me) } },
      resetter: { inObject in inObject.mP2_property.setProp (nil) }
    )
  //--- To many property: mWiresP1s (has opposite relationship)
    self.mWiresP1s_property.ebUndoManager = self.ebUndoManager
    self.mWiresP1s_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mP1_property.setProp (me) } },
      resetter: { inObject in inObject.mP1_property.setProp (nil) }
    )
  //--- To one property: mSymbol (has opposite to many relationship: mPoints)
    self.mSymbol_property.ebUndoManager = self.ebUndoManager
    self.mSymbol_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPoints_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mPoints_property.remove (me) } }
    )
  //--- To one property: mNet (has opposite to many relationship: mPoints)
    self.mNet_property.ebUndoManager = self.ebUndoManager
    self.mNet_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPoints_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mPoints_property.remove (me) } }
    )
  //--- To one property: mNC (has opposite to one relationship: mPoint)
    self.mNC_property.ebUndoManager = self.ebUndoManager
    self.mNC_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPoint_property.setProp (me) } },
      resetter: { inObject in inObject.mPoint_property.setProp (nil) }
    )
  //--- Atomic property: location
    self.location_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        kind &= unwSelf.mSymbolPinName_property_selection.kind ()
        kind &= unwSelf.mSymbol_property.symbolInfo_property_selection.kind ()
        kind &= unwSelf.mSymbol_property.mSymbolInstanceName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mX_property_selection, unwSelf.mY_property_selection, unwSelf.mSymbolPinName_property_selection, unwSelf.mSymbol_property.symbolInfo_property_selection, unwSelf.mSymbol_property.mSymbolInstanceName_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_PointInSchematic_location (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.location_property)
    self.mY_property.addEBObserver (self.location_property)
    self.mSymbolPinName_property.addEBObserver (self.location_property)
    self.mSymbol_property.addEBObserverOf_symbolInfo (self.location_property)
    self.mSymbol_property.addEBObserverOf_mSymbolInstanceName (self.location_property)
  //--- Atomic property: netName
    self.netName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNet_property.mNetName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNet_property.mNetName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PointInSchematic_netName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.addEBObserverOf_mNetName (self.netName_property)
  //--- Atomic property: netClassName
    self.netClassName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNet_property.netClassName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNet_property.netClassName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PointInSchematic_netClassName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.addEBObserverOf_netClassName (self.netClassName_property)
  //--- Atomic property: hasNet
    self.hasNet_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNet_none_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNet_none_selection) {
          case (.single (let v0)) :
            return .single (transient_PointInSchematic_hasNet (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.addEBObserver (self.hasNet_property)
  //--- Atomic property: canMove
    self.canMove_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSymbol_none_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSymbol_none_selection) {
          case (.single (let v0)) :
            return .single (transient_PointInSchematic_canMove (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbol_property.addEBObserver (self.canMove_property)
  //--- Atomic property: wireColor
    self.wireColor_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNet_property.wireColor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNet_property.wireColor_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PointInSchematic_wireColor (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.addEBObserverOf_wireColor (self.wireColor_property)
  //--- Atomic property: symbolRotation
    self.symbolRotation_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mSymbol_property.mRotation_property_selection.kind ()
        kind &= unwSelf.mSymbol_property.mMirror_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSymbol_property.mRotation_property_selection, unwSelf.mSymbol_property.mMirror_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_PointInSchematic_symbolRotation (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbol_property.addEBObserverOf_mRotation (self.symbolRotation_property)
    self.mSymbol_property.addEBObserverOf_mMirror (self.symbolRotation_property)
  //--- To one property: mSheet (has opposite to many relationship: mPoints)
    self.mSheet_property.ebUndoManager = self.ebUndoManager
    self.mSheet_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPoints_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mPoints_property.remove (me) } }
    )
  //--- Atomic property: symbolNameNetName
    self.symbolNameNetName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mSymbolPinName_property_selection.kind ()
        kind &= unwSelf.netName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSymbolPinName_property_selection, unwSelf.netName_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_PointInSchematic_symbolNameNetName (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbolPinName_property.addEBObserver (self.symbolNameNetName_property)
    self.netName_property.addEBObserver (self.symbolNameNetName_property)
  //--- Atomic property: isConnected
    self.isConnected_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mNC_none_selection.kind ()
        kind &= unwSelf.mSymbol_none_selection.kind ()
        kind &= unwSelf.mWiresP1s_property.count_property_selection.kind ()
        kind &= unwSelf.mWiresP2s_property.count_property_selection.kind ()
        kind &= unwSelf.mLabels_property.count_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNC_none_selection, unwSelf.mSymbol_none_selection, unwSelf.mWiresP1s_property.count_property_selection, unwSelf.mWiresP2s_property.count_property_selection, unwSelf.mLabels_property.count_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_PointInSchematic_isConnected (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNC_property.addEBObserver (self.isConnected_property)
    self.mSymbol_property.addEBObserver (self.isConnected_property)
    self.mWiresP1s_property.addEBObserver (self.isConnected_property)
    self.mWiresP2s_property.addEBObserver (self.isConnected_property)
    self.mLabels_property.addEBObserver (self.isConnected_property)
  //--- Atomic property: status
    self.status_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.location_property_selection.kind ()
        kind &= unwSelf.isConnected_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.location_property_selection, unwSelf.isConnected_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_PointInSchematic_status (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.location_property.addEBObserver (self.status_property)
    self.isConnected_property.addEBObserver (self.status_property)
  //--- Atomic property: connectedPoints
    self.connectedPoints_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.location_property_selection.kind ()
        kind &= unwSelf.isConnected_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.location_property_selection, unwSelf.isConnected_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_PointInSchematic_connectedPoints (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.location_property.addEBObserver (self.connectedPoints_property)
    self.isConnected_property.addEBObserver (self.connectedPoints_property)
  //--- Atomic property: netInfoForPoint
    self.netInfoForPoint_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mLabels_property.count_property_selection.kind ()
        kind &= unwSelf.mSymbol_property.componentName_property_selection.kind ()
        kind &= unwSelf.mSymbol_property.mSymbolInstanceName_property_selection.kind ()
        kind &= unwSelf.mSymbolPinName_property_selection.kind ()
        kind &= unwSelf.mSymbol_property.pinPadAssignments_property_selection.kind ()
        kind &= unwSelf.mWiresP1s_property_selection.kind ()
        kind &= unwSelf.mWiresP2s_property_selection.kind ()
        kind &= unwSelf.location_property_selection.kind ()
        kind &= unwSelf.mSheet_property.sheetDescriptor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mLabels_property.count_property_selection, unwSelf.mSymbol_property.componentName_property_selection, unwSelf.mSymbol_property.mSymbolInstanceName_property_selection, unwSelf.mSymbolPinName_property_selection, unwSelf.mSymbol_property.pinPadAssignments_property_selection, unwSelf.mWiresP1s_property_selection, unwSelf.mWiresP2s_property_selection, unwSelf.location_property_selection, unwSelf.mSheet_property.sheetDescriptor_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8)) :
            return .single (transient_PointInSchematic_netInfoForPoint (v0, v1, v2, v3, v4, v5, v6, v7, v8))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mLabels_property.addEBObserver (self.netInfoForPoint_property)
    self.mSymbol_property.addEBObserverOf_componentName (self.netInfoForPoint_property)
    self.mSymbol_property.addEBObserverOf_mSymbolInstanceName (self.netInfoForPoint_property)
    self.mSymbolPinName_property.addEBObserver (self.netInfoForPoint_property)
    self.mSymbol_property.addEBObserverOf_pinPadAssignments (self.netInfoForPoint_property)
    self.mWiresP1s_property.addEBObserver (self.netInfoForPoint_property)
    self.mWiresP2s_property.addEBObserver (self.netInfoForPoint_property)
    self.location_property.addEBObserver (self.netInfoForPoint_property)
    self.mSheet_property.addEBObserverOf_sheetDescriptor (self.netInfoForPoint_property)
  //--- Install undoers and opposite setter for relationships
    self.mLabels_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPoint_property.setProp (me) } },
      resetter: { inObject in inObject.mPoint_property.setProp (nil) }
    )
    self.mWiresP2s_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mP2_property.setProp (me) } },
      resetter: { inObject in inObject.mP2_property.setProp (nil) }
    )
    self.mWiresP1s_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mP1_property.setProp (me) } },
      resetter: { inObject in inObject.mP1_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mX_property.removeEBObserver (self.location_property)
    self.mY_property.removeEBObserver (self.location_property)
    self.mSymbolPinName_property.removeEBObserver (self.location_property)
    self.mSymbol_property.removeEBObserverOf_symbolInfo (self.location_property)
    self.mSymbol_property.removeEBObserverOf_mSymbolInstanceName (self.location_property)
    self.mNet_property.removeEBObserverOf_mNetName (self.netName_property)
    self.mNet_property.removeEBObserverOf_netClassName (self.netClassName_property)
    self.mNet_property.removeEBObserver (self.hasNet_property)
    self.mSymbol_property.removeEBObserver (self.canMove_property)
    self.mNet_property.removeEBObserverOf_wireColor (self.wireColor_property)
    self.mSymbol_property.removeEBObserverOf_mRotation (self.symbolRotation_property)
    self.mSymbol_property.removeEBObserverOf_mMirror (self.symbolRotation_property)
    self.mSymbolPinName_property.removeEBObserver (self.symbolNameNetName_property)
    self.netName_property.removeEBObserver (self.symbolNameNetName_property)
    self.mNC_property.removeEBObserver (self.isConnected_property)
    self.mSymbol_property.removeEBObserver (self.isConnected_property)
    self.mWiresP1s_property.removeEBObserver (self.isConnected_property)
    self.mWiresP2s_property.removeEBObserver (self.isConnected_property)
    self.mLabels_property.removeEBObserver (self.isConnected_property)
    self.location_property.removeEBObserver (self.status_property)
    self.isConnected_property.removeEBObserver (self.status_property)
    self.location_property.removeEBObserver (self.connectedPoints_property)
    self.isConnected_property.removeEBObserver (self.connectedPoints_property)
    self.mLabels_property.removeEBObserver (self.netInfoForPoint_property)
    self.mSymbol_property.removeEBObserverOf_componentName (self.netInfoForPoint_property)
    self.mSymbol_property.removeEBObserverOf_mSymbolInstanceName (self.netInfoForPoint_property)
    self.mSymbolPinName_property.removeEBObserver (self.netInfoForPoint_property)
    self.mSymbol_property.removeEBObserverOf_pinPadAssignments (self.netInfoForPoint_property)
    self.mWiresP1s_property.removeEBObserver (self.netInfoForPoint_property)
    self.mWiresP2s_property.removeEBObserver (self.netInfoForPoint_property)
    self.location_property.removeEBObserver (self.netInfoForPoint_property)
    self.mSheet_property.removeEBObserverOf_sheetDescriptor (self.netInfoForPoint_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mSymbolPinName",
      idx: self.mSymbolPinName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSymbolPinName_property.mObserverExplorer,
      valueExplorer: &self.mSymbolPinName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mX",
      idx: self.mX_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mX_property.mObserverExplorer,
      valueExplorer: &self.mX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mY",
      idx: self.mY_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mY_property.mObserverExplorer,
      valueExplorer: &self.mY_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "location",
      idx: self.location_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.location_property.mObserverExplorer,
      valueExplorer: &self.location_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netName",
      idx: self.netName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netName_property.mObserverExplorer,
      valueExplorer: &self.netName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netClassName",
      idx: self.netClassName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netClassName_property.mObserverExplorer,
      valueExplorer: &self.netClassName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "hasNet",
      idx: self.hasNet_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.hasNet_property.mObserverExplorer,
      valueExplorer: &self.hasNet_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "canMove",
      idx: self.canMove_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.canMove_property.mObserverExplorer,
      valueExplorer: &self.canMove_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "wireColor",
      idx: self.wireColor_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.wireColor_property.mObserverExplorer,
      valueExplorer: &self.wireColor_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "symbolRotation",
      idx: self.symbolRotation_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.symbolRotation_property.mObserverExplorer,
      valueExplorer: &self.symbolRotation_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "symbolNameNetName",
      idx: self.symbolNameNetName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.symbolNameNetName_property.mObserverExplorer,
      valueExplorer: &self.symbolNameNetName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "isConnected",
      idx: self.isConnected_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.isConnected_property.mObserverExplorer,
      valueExplorer: &self.isConnected_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "status",
      idx: self.status_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.status_property.mObserverExplorer,
      valueExplorer: &self.status_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "connectedPoints",
      idx: self.connectedPoints_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.connectedPoints_property.mObserverExplorer,
      valueExplorer: &self.connectedPoints_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netInfoForPoint",
      idx: self.netInfoForPoint_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netInfoForPoint_property.mObserverExplorer,
      valueExplorer: &self.netInfoForPoint_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "mLabels",
      idx:mLabels_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mLabels_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mWiresP2s",
      idx:mWiresP2s_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mWiresP2s_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mWiresP1s",
      idx:mWiresP1s_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mWiresP1s_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "mSymbol",
      idx:self.mSymbol_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mSymbol_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mNet",
      idx:self.mNet_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mNet_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mNC",
      idx:self.mNC_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mNC_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mSheet",
      idx:self.mSheet_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mSheet_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mSymbolPinName
    self.mSymbolPinName_property.mObserverExplorer = nil
    self.mSymbolPinName_property.mValueExplorer = nil
  //--- To many property: mLabels
    self.mLabels_property.mValueExplorer = nil
  //--- Atomic property: mX
    self.mX_property.mObserverExplorer = nil
    self.mX_property.mValueExplorer = nil
  //--- Atomic property: mY
    self.mY_property.mObserverExplorer = nil
    self.mY_property.mValueExplorer = nil
  //--- To many property: mWiresP2s
    self.mWiresP2s_property.mValueExplorer = nil
  //--- To many property: mWiresP1s
    self.mWiresP1s_property.mValueExplorer = nil
  //--- To one property: mSymbol
    self.mSymbol_property.mObserverExplorer = nil
    self.mSymbol_property.mValueExplorer = nil
  //--- To one property: mNet
    self.mNet_property.mObserverExplorer = nil
    self.mNet_property.mValueExplorer = nil
  //--- To one property: mNC
    self.mNC_property.mObserverExplorer = nil
    self.mNC_property.mValueExplorer = nil
  //--- To one property: mSheet
    self.mSheet_property.mObserverExplorer = nil
    self.mSheet_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mLabels = []
    self.mWiresP2s = []
    self.mWiresP1s = []
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mSymbol = nil
    self.mNet = nil
    self.mNC = nil
    self.mSheet = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mSymbolPinName
    self.mSymbolPinName_property.storeIn (dictionary: ioDictionary, forKey: "mSymbolPinName")
  //--- To many property: mLabels
    self.store (
      managedObjectArray: self.mLabels_property.propval,
      relationshipName: "mLabels",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: mX
    self.mX_property.storeIn (dictionary: ioDictionary, forKey: "mX")
  //--- Atomic property: mY
    self.mY_property.storeIn (dictionary: ioDictionary, forKey: "mY")
  //--- To many property: mWiresP2s
    self.store (
      managedObjectArray: self.mWiresP2s_property.propval,
      relationshipName: "mWiresP2s",
      intoDictionary: ioDictionary
    )
  //--- To many property: mWiresP1s
    self.store (
      managedObjectArray: self.mWiresP1s_property.propval,
      relationshipName: "mWiresP1s",
      intoDictionary: ioDictionary
    )
  //--- To one property: mNC // Opposite is toOne mPoint
    self.store (managedObject:self.mNC_property.propval,
      relationshipName: "mNC",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  //--- To many property: mLabels
    self.mLabels_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mLabels",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [LabelInSchematic])
  //--- To many property: mWiresP2s
    self.mWiresP2s_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mWiresP2s",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [WireInSchematic])
  //--- To many property: mWiresP1s
    self.mWiresP1s_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mWiresP1s",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [WireInSchematic])
  //--- To one property: mSymbol
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mSymbol",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? ComponentSymbolInProject {
        self.mSymbol_property.setProp (entity)
      }
    }
  //--- To one property: mNet
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mNet",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? NetInProject {
        self.mNet_property.setProp (entity)
      }
    }
  //--- To one property: mNC
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mNC",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? NCInSchematic {
        self.mNC_property.setProp (entity)
      }
    }
  //--- To one property: mSheet
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mSheet",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? SheetInProject {
        self.mSheet_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mSymbolPinName
    self.mSymbolPinName_property.readFrom (dictionary: inDictionary, forKey: "mSymbolPinName")
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey: "mX")
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey: "mY")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mSymbolPinName\n"
    ioString += "mX\n"
    ioString += "mY\n"
  //--- To one relationships
    ioString += "mSymbol\n"
    ioString += "mNet\n"
    ioString += "mNC\n"
    ioString += "mSheet\n"
  //--- To many relationships
    ioString += "mLabels\n"
    ioString += "mWiresP2s\n"
    ioString += "mWiresP1s\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mSymbolPinName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.mSymbol {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mNet {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mNC {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mSheet {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mLabels {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mWiresP2s {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mWiresP1s {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.mOperationQueue.addOperation {
    //--- Atomic properties
      if let range = inDictionary ["mSymbolPinName"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mSymbolPinName = value
      }
      if let range = inDictionary ["mX"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mX = value
      }
      if let range = inDictionary ["mY"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mY = value
      }
    //--- To one relationships
      if let range = inDictionary ["mSymbol"], let objectIndex = inData.base62EncodedInt (range: range) {
        inParallelObjectSetupContext.mMutex.wait ()
        inParallelObjectSetupContext.mToOneSetUpOperationList.append ({ self.mSymbol = inObjectArray [objectIndex] as? ComponentSymbolInProject })
        inParallelObjectSetupContext.mMutex.signal ()
      }
      if let range = inDictionary ["mNet"], let objectIndex = inData.base62EncodedInt (range: range) {
        inParallelObjectSetupContext.mMutex.wait ()
        inParallelObjectSetupContext.mToOneSetUpOperationList.append ({ self.mNet = inObjectArray [objectIndex] as? NetInProject })
        inParallelObjectSetupContext.mMutex.signal ()
      }
      if let range = inDictionary ["mNC"], let objectIndex = inData.base62EncodedInt (range: range) {
        inParallelObjectSetupContext.mMutex.wait ()
        inParallelObjectSetupContext.mToOneSetUpOperationList.append ({ self.mNC = inObjectArray [objectIndex] as? NCInSchematic })
        inParallelObjectSetupContext.mMutex.signal ()
      }
      if let range = inDictionary ["mSheet"], let objectIndex = inData.base62EncodedInt (range: range) {
        inParallelObjectSetupContext.mMutex.wait ()
        inParallelObjectSetupContext.mToOneSetUpOperationList.append ({ self.mSheet = inObjectArray [objectIndex] as? SheetInProject })
        inParallelObjectSetupContext.mMutex.signal ()
      }
    //--- To many relationships
      if let range = inDictionary ["mLabels"], range.length > 0 {
        var relationshipArray = [LabelInSchematic] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! LabelInSchematic)
        }
        inParallelObjectSetupContext.mMutex.wait ()
        inParallelObjectSetupContext.mToManySetUpOperationList.append ({ self.mLabels = relationshipArray })
        inParallelObjectSetupContext.mMutex.signal ()
      }
      if let range = inDictionary ["mWiresP2s"], range.length > 0 {
        var relationshipArray = [WireInSchematic] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! WireInSchematic)
        }
        inParallelObjectSetupContext.mMutex.wait ()
        inParallelObjectSetupContext.mToManySetUpOperationList.append ({ self.mWiresP2s = relationshipArray })
        inParallelObjectSetupContext.mMutex.signal ()
      }
      if let range = inDictionary ["mWiresP1s"], range.length > 0 {
        var relationshipArray = [WireInSchematic] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! WireInSchematic)
        }
        inParallelObjectSetupContext.mMutex.wait ()
        inParallelObjectSetupContext.mToManySetUpOperationList.append ({ self.mWiresP1s = relationshipArray })
        inParallelObjectSetupContext.mMutex.signal ()
      }
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mLabels
    for managedObject in self.mLabels {
      objects.append (managedObject)
    }
  //--- To many property: mWiresP2s
    for managedObject in self.mWiresP2s {
      objects.append (managedObject)
    }
  //--- To many property: mWiresP1s
    for managedObject in self.mWiresP1s {
      objects.append (managedObject)
    }
  //--- To one property: mSymbol
    if let object = self.mSymbol {
      objects.append (object)
    }
  //--- To one property: mNet
    if let object = self.mNet {
      objects.append (object)
    }
  //--- To one property: mNC
    if let object = self.mNC {
      objects.append (object)
    }
  //--- To one property: mSheet
    if let object = self.mSheet {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mLabels
    for managedObject in self.mLabels {
      objects.append (managedObject)
    }
  //--- To many property: mWiresP2s
    for managedObject in self.mWiresP2s {
      objects.append (managedObject)
    }
  //--- To many property: mWiresP1s
    for managedObject in self.mWiresP1s {
      objects.append (managedObject)
    }
  //--- To one property: mSymbol
    if let object = self.mSymbol {
      objects.append (object)
    }
  //--- To one property: mNet
    if let object = self.mNet {
      objects.append (object)
    }
  //--- To one property: mNC
    if let object = self.mNC {
      objects.append (object)
    }
  //--- To one property: mSheet
    if let object = self.mSheet {
      objects.append (object)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------

