//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_PointInSchematic 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_PointInSchematic : ReadOnlyAbstractObjectProperty <PointInSchematic> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : PointInSchematic?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
 //     oldValue.mSymbolPinName_property.removeEBObserversFrom (&self.mObserversOf_mSymbolPinName) // Stored property
      oldValue.mSymbolPinName_property.removeEBObserver (self.mSymbolPinName_property) // Stored property
 //     oldValue.mX_property.removeEBObserversFrom (&self.mObserversOf_mX) // Stored property
      oldValue.mX_property.removeEBObserver (self.mX_property) // Stored property
 //     oldValue.mY_property.removeEBObserversFrom (&self.mObserversOf_mY) // Stored property
      oldValue.mY_property.removeEBObserver (self.mY_property) // Stored property
 //     oldValue.location_property.removeEBObserversFrom (&self.mObserversOf_location) // Transient property
      oldValue.location_property.removeEBObserver (self.location_property) // Transient property
 //     oldValue.netName_property.removeEBObserversFrom (&self.mObserversOf_netName) // Transient property
      oldValue.netName_property.removeEBObserver (self.netName_property) // Transient property
 //     oldValue.netClassName_property.removeEBObserversFrom (&self.mObserversOf_netClassName) // Transient property
      oldValue.netClassName_property.removeEBObserver (self.netClassName_property) // Transient property
 //     oldValue.hasNet_property.removeEBObserversFrom (&self.mObserversOf_hasNet) // Transient property
      oldValue.hasNet_property.removeEBObserver (self.hasNet_property) // Transient property
 //     oldValue.canMove_property.removeEBObserversFrom (&self.mObserversOf_canMove) // Transient property
      oldValue.canMove_property.removeEBObserver (self.canMove_property) // Transient property
 //     oldValue.wireColor_property.removeEBObserversFrom (&self.mObserversOf_wireColor) // Transient property
      oldValue.wireColor_property.removeEBObserver (self.wireColor_property) // Transient property
 //     oldValue.symbolRotation_property.removeEBObserversFrom (&self.mObserversOf_symbolRotation) // Transient property
      oldValue.symbolRotation_property.removeEBObserver (self.symbolRotation_property) // Transient property
 //     oldValue.symbolNameNetName_property.removeEBObserversFrom (&self.mObserversOf_symbolNameNetName) // Transient property
      oldValue.symbolNameNetName_property.removeEBObserver (self.symbolNameNetName_property) // Transient property
 //     oldValue.isConnected_property.removeEBObserversFrom (&self.mObserversOf_isConnected) // Transient property
      oldValue.isConnected_property.removeEBObserver (self.isConnected_property) // Transient property
 //     oldValue.status_property.removeEBObserversFrom (&self.mObserversOf_status) // Transient property
      oldValue.status_property.removeEBObserver (self.status_property) // Transient property
 //     oldValue.connectedPoints_property.removeEBObserversFrom (&self.mObserversOf_connectedPoints) // Transient property
      oldValue.connectedPoints_property.removeEBObserver (self.connectedPoints_property) // Transient property
 //     oldValue.netInfoForPoint_property.removeEBObserversFrom (&self.mObserversOf_netInfoForPoint) // Transient property
      oldValue.netInfoForPoint_property.removeEBObserver (self.netInfoForPoint_property) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
 //     newValue.mSymbolPinName_property.addEBObserversFrom (&self.mObserversOf_mSymbolPinName) // Stored property
      newValue.mSymbolPinName_property.addEBObserver (self.mSymbolPinName_property) // Stored property
 //     newValue.mX_property.addEBObserversFrom (&self.mObserversOf_mX) // Stored property
      newValue.mX_property.addEBObserver (self.mX_property) // Stored property
 //     newValue.mY_property.addEBObserversFrom (&self.mObserversOf_mY) // Stored property
      newValue.mY_property.addEBObserver (self.mY_property) // Stored property
  //    newValue.location_property.addEBObserversFrom (&self.mObserversOf_location) // Transient property
      newValue.location_property.addEBObserver (self.location_property) // Transient property
  //    newValue.netName_property.addEBObserversFrom (&self.mObserversOf_netName) // Transient property
      newValue.netName_property.addEBObserver (self.netName_property) // Transient property
  //    newValue.netClassName_property.addEBObserversFrom (&self.mObserversOf_netClassName) // Transient property
      newValue.netClassName_property.addEBObserver (self.netClassName_property) // Transient property
  //    newValue.hasNet_property.addEBObserversFrom (&self.mObserversOf_hasNet) // Transient property
      newValue.hasNet_property.addEBObserver (self.hasNet_property) // Transient property
  //    newValue.canMove_property.addEBObserversFrom (&self.mObserversOf_canMove) // Transient property
      newValue.canMove_property.addEBObserver (self.canMove_property) // Transient property
  //    newValue.wireColor_property.addEBObserversFrom (&self.mObserversOf_wireColor) // Transient property
      newValue.wireColor_property.addEBObserver (self.wireColor_property) // Transient property
  //    newValue.symbolRotation_property.addEBObserversFrom (&self.mObserversOf_symbolRotation) // Transient property
      newValue.symbolRotation_property.addEBObserver (self.symbolRotation_property) // Transient property
  //    newValue.symbolNameNetName_property.addEBObserversFrom (&self.mObserversOf_symbolNameNetName) // Transient property
      newValue.symbolNameNetName_property.addEBObserver (self.symbolNameNetName_property) // Transient property
  //    newValue.isConnected_property.addEBObserversFrom (&self.mObserversOf_isConnected) // Transient property
      newValue.isConnected_property.addEBObserver (self.isConnected_property) // Transient property
  //    newValue.status_property.addEBObserversFrom (&self.mObserversOf_status) // Transient property
      newValue.status_property.addEBObserver (self.status_property) // Transient property
  //    newValue.connectedPoints_property.addEBObserversFrom (&self.mObserversOf_connectedPoints) // Transient property
      newValue.connectedPoints_property.addEBObserver (self.connectedPoints_property) // Transient property
  //    newValue.netInfoForPoint_property.addEBObserversFrom (&self.mObserversOf_netInfoForPoint) // Transient property
      newValue.netInfoForPoint_property.addEBObserver (self.netInfoForPoint_property) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mSymbolPinName' stored property
  //····················································································································

  final let mSymbolPinName_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_mSymbolPinName = EBWeakEventSet ()

  //····················································································································

  final var mSymbolPinName_property_selection : EBSelection <String?> { // §
    return self.mSymbolPinName_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mSymbolPinName (_ inObserver : EBEvent) {
    self.mSymbolPinName_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSymbolPinName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSymbolPinName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolPinName (_ inObserver : EBEvent) {
    self.mSymbolPinName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSymbolPinName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSymbolPinName_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  final let mX_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  final var mX_property_selection : EBSelection <Int?> { // §
    return self.mX_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mX (_ inObserver : EBEvent) {
    self.mX_property.addEBObserver (inObserver)
/*    self.mObserversOf_mX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mX_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mX (_ inObserver : EBEvent) {
    self.mX_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mX_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  final let mY_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mY = EBWeakEventSet ()

  //····················································································································

  final var mY_property_selection : EBSelection <Int?> { // §
    return self.mY_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mY (_ inObserver : EBEvent) {
    self.mY_property.addEBObserver (inObserver)
/*    self.mObserversOf_mY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mY_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mY (_ inObserver : EBEvent) {
    self.mY_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mY_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'location' transient property
  //····················································································································

  final let location_property = EBGenericTransientProperty <CanariPoint?> ()
//  private final var mObserversOf_location = EBWeakEventSet ()

  //····················································································································

  final var location_property_selection : EBSelection <CanariPoint?> {
    return self.location_property.selection
  }

  //····················································································································

  final func addEBObserverOf_location (_ inObserver : EBEvent) {
    self.location_property.addEBObserver (inObserver)
/*    self.mObserversOf_location.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.location_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_location (_ inObserver : EBEvent) {
    self.location_property.removeEBObserver (inObserver)
/*    self.mObserversOf_location.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.location_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'netName' transient property
  //····················································································································

  final let netName_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_netName = EBWeakEventSet ()

  //····················································································································

  final var netName_property_selection : EBSelection <String?> {
    return self.netName_property.selection
  }

  //····················································································································

  final func addEBObserverOf_netName (_ inObserver : EBEvent) {
    self.netName_property.addEBObserver (inObserver)
/*    self.mObserversOf_netName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_netName (_ inObserver : EBEvent) {
    self.netName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_netName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netName_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'netClassName' transient property
  //····················································································································

  final let netClassName_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_netClassName = EBWeakEventSet ()

  //····················································································································

  final var netClassName_property_selection : EBSelection <String?> {
    return self.netClassName_property.selection
  }

  //····················································································································

  final func addEBObserverOf_netClassName (_ inObserver : EBEvent) {
    self.netClassName_property.addEBObserver (inObserver)
/*    self.mObserversOf_netClassName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netClassName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_netClassName (_ inObserver : EBEvent) {
    self.netClassName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_netClassName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netClassName_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'hasNet' transient property
  //····················································································································

  final let hasNet_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_hasNet = EBWeakEventSet ()

  //····················································································································

  final var hasNet_property_selection : EBSelection <Bool?> {
    return self.hasNet_property.selection
  }

  //····················································································································

  final func addEBObserverOf_hasNet (_ inObserver : EBEvent) {
    self.hasNet_property.addEBObserver (inObserver)
/*    self.mObserversOf_hasNet.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.hasNet_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_hasNet (_ inObserver : EBEvent) {
    self.hasNet_property.removeEBObserver (inObserver)
/*    self.mObserversOf_hasNet.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.hasNet_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'canMove' transient property
  //····················································································································

  final let canMove_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_canMove = EBWeakEventSet ()

  //····················································································································

  final var canMove_property_selection : EBSelection <Bool?> {
    return self.canMove_property.selection
  }

  //····················································································································

  final func addEBObserverOf_canMove (_ inObserver : EBEvent) {
    self.canMove_property.addEBObserver (inObserver)
/*    self.mObserversOf_canMove.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.canMove_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_canMove (_ inObserver : EBEvent) {
    self.canMove_property.removeEBObserver (inObserver)
/*    self.mObserversOf_canMove.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.canMove_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'wireColor' transient property
  //····················································································································

  final let wireColor_property = EBGenericTransientProperty <NSColor?> ()
//  private final var mObserversOf_wireColor = EBWeakEventSet ()

  //····················································································································

  final var wireColor_property_selection : EBSelection <NSColor?> {
    return self.wireColor_property.selection
  }

  //····················································································································

  final func addEBObserverOf_wireColor (_ inObserver : EBEvent) {
    self.wireColor_property.addEBObserver (inObserver)
/*    self.mObserversOf_wireColor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.wireColor_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_wireColor (_ inObserver : EBEvent) {
    self.wireColor_property.removeEBObserver (inObserver)
/*    self.mObserversOf_wireColor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.wireColor_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'symbolRotation' transient property
  //····················································································································

  final let symbolRotation_property = EBGenericTransientProperty <QuadrantRotation?> ()
//  private final var mObserversOf_symbolRotation = EBWeakEventSet ()

  //····················································································································

  final var symbolRotation_property_selection : EBSelection <QuadrantRotation?> {
    return self.symbolRotation_property.selection
  }

  //····················································································································

  final func addEBObserverOf_symbolRotation (_ inObserver : EBEvent) {
    self.symbolRotation_property.addEBObserver (inObserver)
/*    self.mObserversOf_symbolRotation.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.symbolRotation_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_symbolRotation (_ inObserver : EBEvent) {
    self.symbolRotation_property.removeEBObserver (inObserver)
/*    self.mObserversOf_symbolRotation.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.symbolRotation_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'symbolNameNetName' transient property
  //····················································································································

  final let symbolNameNetName_property = EBGenericTransientProperty <TwoStrings?> ()
//  private final var mObserversOf_symbolNameNetName = EBWeakEventSet ()

  //····················································································································

  final var symbolNameNetName_property_selection : EBSelection <TwoStrings?> {
    return self.symbolNameNetName_property.selection
  }

  //····················································································································

  final func addEBObserverOf_symbolNameNetName (_ inObserver : EBEvent) {
    self.symbolNameNetName_property.addEBObserver (inObserver)
/*    self.mObserversOf_symbolNameNetName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.symbolNameNetName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_symbolNameNetName (_ inObserver : EBEvent) {
    self.symbolNameNetName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_symbolNameNetName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.symbolNameNetName_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'isConnected' transient property
  //····················································································································

  final let isConnected_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_isConnected = EBWeakEventSet ()

  //····················································································································

  final var isConnected_property_selection : EBSelection <Bool?> {
    return self.isConnected_property.selection
  }

  //····················································································································

  final func addEBObserverOf_isConnected (_ inObserver : EBEvent) {
    self.isConnected_property.addEBObserver (inObserver)
/*    self.mObserversOf_isConnected.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.isConnected_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_isConnected (_ inObserver : EBEvent) {
    self.isConnected_property.removeEBObserver (inObserver)
/*    self.mObserversOf_isConnected.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.isConnected_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'status' transient property
  //····················································································································

  final let status_property = EBGenericTransientProperty <SchematicPointStatus?> ()
//  private final var mObserversOf_status = EBWeakEventSet ()

  //····················································································································

  final var status_property_selection : EBSelection <SchematicPointStatus?> {
    return self.status_property.selection
  }

  //····················································································································

  final func addEBObserverOf_status (_ inObserver : EBEvent) {
    self.status_property.addEBObserver (inObserver)
/*    self.mObserversOf_status.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.status_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_status (_ inObserver : EBEvent) {
    self.status_property.removeEBObserver (inObserver)
/*    self.mObserversOf_status.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.status_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'connectedPoints' transient property
  //····················································································································

  final let connectedPoints_property = EBGenericTransientProperty <CanariPointArray?> ()
//  private final var mObserversOf_connectedPoints = EBWeakEventSet ()

  //····················································································································

  final var connectedPoints_property_selection : EBSelection <CanariPointArray?> {
    return self.connectedPoints_property.selection
  }

  //····················································································································

  final func addEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.connectedPoints_property.addEBObserver (inObserver)
/*    self.mObserversOf_connectedPoints.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connectedPoints_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.connectedPoints_property.removeEBObserver (inObserver)
/*    self.mObserversOf_connectedPoints.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connectedPoints_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'netInfoForPoint' transient property
  //····················································································································

  final let netInfoForPoint_property = EBGenericTransientProperty <NetInfoPoint?> ()
//  private final var mObserversOf_netInfoForPoint = EBWeakEventSet ()

  //····················································································································

  final var netInfoForPoint_property_selection : EBSelection <NetInfoPoint?> {
    return self.netInfoForPoint_property.selection
  }

  //····················································································································

  final func addEBObserverOf_netInfoForPoint (_ inObserver : EBEvent) {
    self.netInfoForPoint_property.addEBObserver (inObserver)
/*    self.mObserversOf_netInfoForPoint.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netInfoForPoint_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_netInfoForPoint (_ inObserver : EBEvent) {
    self.netInfoForPoint_property.removeEBObserver (inObserver)
/*    self.mObserversOf_netInfoForPoint.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netInfoForPoint_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observable toMany property: mLabels
  //····················································································································

  private final var mObserversOf_mLabels = EBWeakEventSet ()

  //····················································································································

  final var mLabels_property_selection : EBSelection <[LabelInSchematic]> {
    if let model = self.propval {
      switch (model.mLabels_property.selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mLabels (_ inObserver : EBEvent) {
    self.mObserversOf_mLabels.insert (inObserver)
    if let object = self.propval {
      object.mLabels_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mLabels (_ inObserver : EBEvent) {
    self.mObserversOf_mLabels.remove (inObserver)
    if let object = self.propval {
      object.mLabels_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mWiresP2s
  //····················································································································

  private final var mObserversOf_mWiresP2s = EBWeakEventSet ()

  //····················································································································

  final var mWiresP2s_property_selection : EBSelection <[WireInSchematic]> {
    if let model = self.propval {
      switch (model.mWiresP2s_property.selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mWiresP2s (_ inObserver : EBEvent) {
    self.mObserversOf_mWiresP2s.insert (inObserver)
    if let object = self.propval {
      object.mWiresP2s_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mWiresP2s (_ inObserver : EBEvent) {
    self.mObserversOf_mWiresP2s.remove (inObserver)
    if let object = self.propval {
      object.mWiresP2s_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mWiresP1s
  //····················································································································

  private final var mObserversOf_mWiresP1s = EBWeakEventSet ()

  //····················································································································

  final var mWiresP1s_property_selection : EBSelection <[WireInSchematic]> {
    if let model = self.propval {
      switch (model.mWiresP1s_property.selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mWiresP1s (_ inObserver : EBEvent) {
    self.mObserversOf_mWiresP1s.insert (inObserver)
    if let object = self.propval {
      object.mWiresP1s_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mWiresP1s (_ inObserver : EBEvent) {
    self.mObserversOf_mWiresP1s.remove (inObserver)
    if let object = self.propval {
      object.mWiresP1s_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT 
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mSymbolPinName simple stored property
    self.mSymbolPinName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSymbolPinName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mX simple stored property
    self.mX_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mX_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mY simple stored property
    self.mY_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mY_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure location transient property
    self.location_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.location_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netName transient property
    self.netName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.netName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netClassName transient property
    self.netClassName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.netClassName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure hasNet transient property
    self.hasNet_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.hasNet_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure canMove transient property
    self.canMove_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.canMove_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure wireColor transient property
    self.wireColor_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.wireColor_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure symbolRotation transient property
    self.symbolRotation_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.symbolRotation_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure symbolNameNetName transient property
    self.symbolNameNetName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.symbolNameNetName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure isConnected transient property
    self.isConnected_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.isConnected_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure status transient property
    self.status_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.status_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure connectedPoints transient property
    self.connectedPoints_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.connectedPoints_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure netInfoForPoint transient property
    self.netInfoForPoint_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.netInfoForPoint_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject PointInSchematic
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_PointInSchematic : ReadOnlyObject_PointInSchematic {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_PointInSchematic? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_PointInSchematic?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : PointInSchematic? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < PointInSchematic? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : PointInSchematic? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_PointInSchematic
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_PointInSchematic : ReadOnlyObject_PointInSchematic {

  //····················································································································
 
  func setProp (_ inValue : PointInSchematic?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_PointInSchematic
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_PointInSchematic : ReadWriteObject_PointInSchematic {

  //····················································································································

  private var mModel : ReadWriteObject_PointInSchematic? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_PointInSchematic?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : PointInSchematic?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : PointInSchematic?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < PointInSchematic? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : PointInSchematic? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_PointInSchematic 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_PointInSchematic : ReadWriteObject_PointInSchematic, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PointInSchematic) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PointInSchematic) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PointInSchematic) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PointInSchematic) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : PointInSchematic?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < PointInSchematic? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : PointInSchematic?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : PointInSchematic? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

