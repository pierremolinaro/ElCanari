//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_PointInSchematic 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_PointInSchematic : ReadOnlyAbstractObjectProperty <PointInSchematic> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : PointInSchematic?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mSymbolPinName_property.removeEBObserversFrom (&self.mObserversOf_mSymbolPinName) // Stored property
      oldValue.mX_property.removeEBObserversFrom (&self.mObserversOf_mX) // Stored property
      oldValue.mY_property.removeEBObserversFrom (&self.mObserversOf_mY) // Stored property
      oldValue.location_property.removeEBObserversFrom (&self.mObserversOf_location) // Transient property
      oldValue.netName_property.removeEBObserversFrom (&self.mObserversOf_netName) // Transient property
      oldValue.netClassName_property.removeEBObserversFrom (&self.mObserversOf_netClassName) // Transient property
      oldValue.hasNet_property.removeEBObserversFrom (&self.mObserversOf_hasNet) // Transient property
      oldValue.canMove_property.removeEBObserversFrom (&self.mObserversOf_canMove) // Transient property
      oldValue.wireColor_property.removeEBObserversFrom (&self.mObserversOf_wireColor) // Transient property
      oldValue.symbolRotation_property.removeEBObserversFrom (&self.mObserversOf_symbolRotation) // Transient property
      oldValue.symbolNameNetName_property.removeEBObserversFrom (&self.mObserversOf_symbolNameNetName) // Transient property
      oldValue.isConnected_property.removeEBObserversFrom (&self.mObserversOf_isConnected) // Transient property
      oldValue.status_property.removeEBObserversFrom (&self.mObserversOf_status) // Transient property
      oldValue.connectedPoints_property.removeEBObserversFrom (&self.mObserversOf_connectedPoints) // Transient property
      oldValue.netInfoForPoint_property.removeEBObserversFrom (&self.mObserversOf_netInfoForPoint) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
      newValue.mSymbolPinName_property.addEBObserversFrom (&self.mObserversOf_mSymbolPinName) // Stored property
      newValue.mX_property.addEBObserversFrom (&self.mObserversOf_mX) // Stored property
      newValue.mY_property.addEBObserversFrom (&self.mObserversOf_mY) // Stored property
      newValue.location_property.addEBObserversFrom (&self.mObserversOf_location) // Transient property
      newValue.netName_property.addEBObserversFrom (&self.mObserversOf_netName) // Transient property
      newValue.netClassName_property.addEBObserversFrom (&self.mObserversOf_netClassName) // Transient property
      newValue.hasNet_property.addEBObserversFrom (&self.mObserversOf_hasNet) // Transient property
      newValue.canMove_property.addEBObserversFrom (&self.mObserversOf_canMove) // Transient property
      newValue.wireColor_property.addEBObserversFrom (&self.mObserversOf_wireColor) // Transient property
      newValue.symbolRotation_property.addEBObserversFrom (&self.mObserversOf_symbolRotation) // Transient property
      newValue.symbolNameNetName_property.addEBObserversFrom (&self.mObserversOf_symbolNameNetName) // Transient property
      newValue.isConnected_property.addEBObserversFrom (&self.mObserversOf_isConnected) // Transient property
      newValue.status_property.addEBObserversFrom (&self.mObserversOf_status) // Transient property
      newValue.connectedPoints_property.addEBObserversFrom (&self.mObserversOf_connectedPoints) // Transient property
      newValue.netInfoForPoint_property.addEBObserversFrom (&self.mObserversOf_netInfoForPoint) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mSymbolPinName' stored property
  //····················································································································

  private final var mObserversOf_mSymbolPinName = EBWeakEventSet ()

  //····················································································································

  final var mSymbolPinName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mSymbolPinName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolPinName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolPinName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSymbolPinName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolPinName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolPinName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSymbolPinName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolPinName_toElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_mSymbolPinName.apply { (_ observer : EBEvent) in
        managedObject.mSymbolPinName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolPinName_fromElementsOfSet (_ inSet : Set<PointInSchematic>) {
    self.mObserversOf_mSymbolPinName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSymbolPinName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private final var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  final var mX_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mX_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mX_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mX_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mX_toElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_mX.apply { (_ observer : EBEvent) in
        managedObject.mX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX_fromElementsOfSet (_ inSet : Set<PointInSchematic>) {
    self.mObserversOf_mX.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private final var mObserversOf_mY = EBWeakEventSet ()

  //····················································································································

  final var mY_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mY_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mY_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mY_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mY_toElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_mY.apply { (_ observer : EBEvent) in
        managedObject.mY_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mY_fromElementsOfSet (_ inSet : Set<PointInSchematic>) {
    self.mObserversOf_mY.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'location' transient property
  //····················································································································

  private final var mObserversOf_location = EBWeakEventSet ()

  //····················································································································

  final var location_property_selection : EBSelection <CanariPoint?> {
    if let model = self.propval {
      switch (model.location_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_location (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_location.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.location_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_location (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_location.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.location_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_location_toElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_location.apply { (_ observer : EBEvent) in
        managedObject.location_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_location_fromElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_location.apply { (_ observer : EBEvent) in
        managedObject.location_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netName' transient property
  //····················································································································

  private final var mObserversOf_netName = EBWeakEventSet ()

  //····················································································································

  final var netName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.netName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_netName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_netName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_netName_toElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_netName.apply { (_ observer : EBEvent) in
        managedObject.netName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netName_fromElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_netName.apply { (_ observer : EBEvent) in
        managedObject.netName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netClassName' transient property
  //····················································································································

  private final var mObserversOf_netClassName = EBWeakEventSet ()

  //····················································································································

  final var netClassName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.netClassName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_netClassName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netClassName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netClassName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_netClassName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netClassName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netClassName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_netClassName_toElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_netClassName.apply { (_ observer : EBEvent) in
        managedObject.netClassName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netClassName_fromElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_netClassName.apply { (_ observer : EBEvent) in
        managedObject.netClassName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'hasNet' transient property
  //····················································································································

  private final var mObserversOf_hasNet = EBWeakEventSet ()

  //····················································································································

  final var hasNet_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.hasNet_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_hasNet (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_hasNet.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.hasNet_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_hasNet (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_hasNet.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.hasNet_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_hasNet_toElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_hasNet.apply { (_ observer : EBEvent) in
        managedObject.hasNet_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_hasNet_fromElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_hasNet.apply { (_ observer : EBEvent) in
        managedObject.hasNet_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'canMove' transient property
  //····················································································································

  private final var mObserversOf_canMove = EBWeakEventSet ()

  //····················································································································

  final var canMove_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.canMove_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_canMove (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_canMove.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.canMove_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_canMove (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_canMove.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.canMove_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_canMove_toElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_canMove.apply { (_ observer : EBEvent) in
        managedObject.canMove_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_canMove_fromElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_canMove.apply { (_ observer : EBEvent) in
        managedObject.canMove_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'wireColor' transient property
  //····················································································································

  private final var mObserversOf_wireColor = EBWeakEventSet ()

  //····················································································································

  final var wireColor_property_selection : EBSelection <NSColor?> {
    if let model = self.propval {
      switch (model.wireColor_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_wireColor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_wireColor.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.wireColor_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_wireColor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_wireColor.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.wireColor_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_wireColor_toElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_wireColor.apply { (_ observer : EBEvent) in
        managedObject.wireColor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_wireColor_fromElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_wireColor.apply { (_ observer : EBEvent) in
        managedObject.wireColor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'symbolRotation' transient property
  //····················································································································

  private final var mObserversOf_symbolRotation = EBWeakEventSet ()

  //····················································································································

  final var symbolRotation_property_selection : EBSelection <QuadrantRotation?> {
    if let model = self.propval {
      switch (model.symbolRotation_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_symbolRotation (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolRotation.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.symbolRotation_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolRotation (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolRotation.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.symbolRotation_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_symbolRotation_toElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_symbolRotation.apply { (_ observer : EBEvent) in
        managedObject.symbolRotation_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_symbolRotation_fromElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_symbolRotation.apply { (_ observer : EBEvent) in
        managedObject.symbolRotation_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'symbolNameNetName' transient property
  //····················································································································

  private final var mObserversOf_symbolNameNetName = EBWeakEventSet ()

  //····················································································································

  final var symbolNameNetName_property_selection : EBSelection <TwoStrings?> {
    if let model = self.propval {
      switch (model.symbolNameNetName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_symbolNameNetName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolNameNetName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.symbolNameNetName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolNameNetName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolNameNetName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.symbolNameNetName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_symbolNameNetName_toElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_symbolNameNetName.apply { (_ observer : EBEvent) in
        managedObject.symbolNameNetName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_symbolNameNetName_fromElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_symbolNameNetName.apply { (_ observer : EBEvent) in
        managedObject.symbolNameNetName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'isConnected' transient property
  //····················································································································

  private final var mObserversOf_isConnected = EBWeakEventSet ()

  //····················································································································

  final var isConnected_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.isConnected_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_isConnected (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_isConnected.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.isConnected_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_isConnected (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_isConnected.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.isConnected_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_isConnected_toElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_isConnected.apply { (_ observer : EBEvent) in
        managedObject.isConnected_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_isConnected_fromElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_isConnected.apply { (_ observer : EBEvent) in
        managedObject.isConnected_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'status' transient property
  //····················································································································

  private final var mObserversOf_status = EBWeakEventSet ()

  //····················································································································

  final var status_property_selection : EBSelection <SchematicPointStatus?> {
    if let model = self.propval {
      switch (model.status_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_status (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_status.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.status_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_status (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_status.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.status_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_status_toElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_status.apply { (_ observer : EBEvent) in
        managedObject.status_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_status_fromElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_status.apply { (_ observer : EBEvent) in
        managedObject.status_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'connectedPoints' transient property
  //····················································································································

  private final var mObserversOf_connectedPoints = EBWeakEventSet ()

  //····················································································································

  final var connectedPoints_property_selection : EBSelection <CanariPointArray?> {
    if let model = self.propval {
      switch (model.connectedPoints_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_connectedPoints.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connectedPoints_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_connectedPoints.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.connectedPoints_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_connectedPoints_toElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_connectedPoints.apply { (_ observer : EBEvent) in
        managedObject.connectedPoints_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_connectedPoints_fromElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_connectedPoints.apply { (_ observer : EBEvent) in
        managedObject.connectedPoints_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netInfoForPoint' transient property
  //····················································································································

  private final var mObserversOf_netInfoForPoint = EBWeakEventSet ()

  //····················································································································

  final var netInfoForPoint_property_selection : EBSelection <NetInfoPoint?> {
    if let model = self.propval {
      switch (model.netInfoForPoint_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_netInfoForPoint (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netInfoForPoint.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netInfoForPoint_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_netInfoForPoint (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netInfoForPoint.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.netInfoForPoint_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_netInfoForPoint_toElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_netInfoForPoint.apply { (_ observer : EBEvent) in
        managedObject.netInfoForPoint_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netInfoForPoint_fromElementsOfSet (_ inSet : Set<PointInSchematic>) {
    for managedObject in inSet {
      self.mObserversOf_netInfoForPoint.apply { (_ observer : EBEvent) in
        managedObject.netInfoForPoint_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observable toMany property: mLabels
  //····················································································································

  private final var mObserversOf_mLabels = EBWeakEventSet ()

  //····················································································································

  final var mLabels_property_selection : EBSelection <[LabelInSchematic]> {
    if let model = self.propval {
      switch (model.mLabels_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mLabels (_ inObserver : EBEvent) {
    self.mObserversOf_mLabels.insert (inObserver)
    if let object = self.propval {
      object.mLabels_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mLabels (_ inObserver : EBEvent) {
    self.mObserversOf_mLabels.remove (inObserver)
    if let object = self.propval {
      object.mLabels_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mWiresP2s
  //····················································································································

  private final var mObserversOf_mWiresP2s = EBWeakEventSet ()

  //····················································································································

  final var mWiresP2s_property_selection : EBSelection <[WireInSchematic]> {
    if let model = self.propval {
      switch (model.mWiresP2s_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mWiresP2s (_ inObserver : EBEvent) {
    self.mObserversOf_mWiresP2s.insert (inObserver)
    if let object = self.propval {
      object.mWiresP2s_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mWiresP2s (_ inObserver : EBEvent) {
    self.mObserversOf_mWiresP2s.remove (inObserver)
    if let object = self.propval {
      object.mWiresP2s_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mWiresP1s
  //····················································································································

  private final var mObserversOf_mWiresP1s = EBWeakEventSet ()

  //····················································································································

  final var mWiresP1s_property_selection : EBSelection <[WireInSchematic]> {
    if let model = self.propval {
      switch (model.mWiresP1s_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mWiresP1s (_ inObserver : EBEvent) {
    self.mObserversOf_mWiresP1s.insert (inObserver)
    if let object = self.propval {
      object.mWiresP1s_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mWiresP1s (_ inObserver : EBEvent) {
    self.mObserversOf_mWiresP1s.remove (inObserver)
    if let object = self.propval {
      object.mWiresP1s_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject PointInSchematic
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_PointInSchematic : ReadOnlyObject_PointInSchematic {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_PointInSchematic? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_PointInSchematic?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : PointInSchematic? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < PointInSchematic? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : PointInSchematic? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_PointInSchematic
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_PointInSchematic : ReadOnlyObject_PointInSchematic {

  //····················································································································
 
  func setProp (_ inValue : PointInSchematic?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_PointInSchematic
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_PointInSchematic : ReadWriteObject_PointInSchematic {

  //····················································································································

  private var mModel : ReadWriteObject_PointInSchematic? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_PointInSchematic?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : PointInSchematic?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : PointInSchematic?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < PointInSchematic? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : PointInSchematic? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_PointInSchematic 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_PointInSchematic : ReadWriteObject_PointInSchematic, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PointInSchematic) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PointInSchematic) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PointInSchematic) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PointInSchematic) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : PointInSchematic?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < PointInSchematic? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : PointInSchematic?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : PointInSchematic? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

