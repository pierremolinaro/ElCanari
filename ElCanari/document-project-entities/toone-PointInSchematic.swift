//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_PointInSchematic 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_PointInSchematic : ReadOnlyAbstractObjectProperty <PointInSchematic> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : PointInSchematic?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.mSymbolPinName_property.removeEBObserver (self.mSymbolPinName_property) // Stored property
    inOldValue?.mX_property.removeEBObserver (self.mX_property) // Stored property
    inOldValue?.mY_property.removeEBObserver (self.mY_property) // Stored property
    inOldValue?.location_property.removeEBObserver (self.location_property) // Transient property
    inOldValue?.netName_property.removeEBObserver (self.netName_property) // Transient property
    inOldValue?.netClassName_property.removeEBObserver (self.netClassName_property) // Transient property
    inOldValue?.hasNet_property.removeEBObserver (self.hasNet_property) // Transient property
    inOldValue?.canMove_property.removeEBObserver (self.canMove_property) // Transient property
    inOldValue?.wireColor_property.removeEBObserver (self.wireColor_property) // Transient property
    inOldValue?.symbolRotation_property.removeEBObserver (self.symbolRotation_property) // Transient property
    inOldValue?.symbolNameNetName_property.removeEBObserver (self.symbolNameNetName_property) // Transient property
    inOldValue?.isConnected_property.removeEBObserver (self.isConnected_property) // Transient property
    inOldValue?.status_property.removeEBObserver (self.status_property) // Transient property
    inOldValue?.connectedPoints_property.removeEBObserver (self.connectedPoints_property) // Transient property
    inOldValue?.netInfoForPoint_property.removeEBObserver (self.netInfoForPoint_property) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.mSymbolPinName_property.addEBObserver (self.mSymbolPinName_property) // Stored property
    self.mInternalValue?.mX_property.addEBObserver (self.mX_property) // Stored property
    self.mInternalValue?.mY_property.addEBObserver (self.mY_property) // Stored property
    self.mInternalValue?.location_property.addEBObserver (self.location_property) // Transient property
    self.mInternalValue?.netName_property.addEBObserver (self.netName_property) // Transient property
    self.mInternalValue?.netClassName_property.addEBObserver (self.netClassName_property) // Transient property
    self.mInternalValue?.hasNet_property.addEBObserver (self.hasNet_property) // Transient property
    self.mInternalValue?.canMove_property.addEBObserver (self.canMove_property) // Transient property
    self.mInternalValue?.wireColor_property.addEBObserver (self.wireColor_property) // Transient property
    self.mInternalValue?.symbolRotation_property.addEBObserver (self.symbolRotation_property) // Transient property
    self.mInternalValue?.symbolNameNetName_property.addEBObserver (self.symbolNameNetName_property) // Transient property
    self.mInternalValue?.isConnected_property.addEBObserver (self.isConnected_property) // Transient property
    self.mInternalValue?.status_property.addEBObserver (self.status_property) // Transient property
    self.mInternalValue?.connectedPoints_property.addEBObserver (self.connectedPoints_property) // Transient property
    self.mInternalValue?.netInfoForPoint_property.addEBObserver (self.netInfoForPoint_property) // Transient property
  }

  //····················································································································
  //   init
  //····················································································································

  override init () {
    super.init ()
    self.mSymbolPinName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mSymbolPinName_property.prop ?? .empty }
    self.mSymbolPinName_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.mSymbolPinName_property.setProp (inValue) }
    self.mX_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mX_property.prop ?? .empty }
    self.mX_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mX_property.setProp (inValue) }
    self.mY_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mY_property.prop ?? .empty }
    self.mY_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mY_property.setProp (inValue) }
    self.location_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.location_property.prop ?? .empty }
    self.netName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.netName_property.prop ?? .empty }
    self.netClassName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.netClassName_property.prop ?? .empty }
    self.hasNet_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.hasNet_property.prop ?? .empty }
    self.canMove_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.canMove_property.prop ?? .empty }
    self.wireColor_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.wireColor_property.prop ?? .empty }
    self.symbolRotation_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.symbolRotation_property.prop ?? .empty }
    self.symbolNameNetName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.symbolNameNetName_property.prop ?? .empty }
    self.isConnected_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.isConnected_property.prop ?? .empty }
    self.status_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.status_property.prop ?? .empty }
    self.connectedPoints_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.connectedPoints_property.prop ?? .empty }
    self.netInfoForPoint_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.netInfoForPoint_property.prop ?? .empty }
  }

  //····················································································································
  //   Proxy of 'mSymbolPinName' stored property
  //····················································································································

  let mSymbolPinName_property = EBPropertyProxy_String ()

  var mSymbolPinName_property_selection : EBSelection <String> {
    switch (self.mSymbolPinName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mX' stored property
  //····················································································································

  let mX_property = EBPropertyProxy_Int ()

  var mX_property_selection : EBSelection <Int> {
    switch (self.mX_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mY' stored property
  //····················································································································

  let mY_property = EBPropertyProxy_Int ()

  var mY_property_selection : EBSelection <Int> {
    switch (self.mY_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'location' transient property
  //····················································································································

  let location_property = EBTransientProperty_CanariPoint ()

  var location_property_selection : EBSelection <CanariPoint> {
    switch (self.location_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'netName' transient property
  //····················································································································

  let netName_property = EBTransientProperty_String ()

  var netName_property_selection : EBSelection <String> {
    switch (self.netName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'netClassName' transient property
  //····················································································································

  let netClassName_property = EBTransientProperty_String ()

  var netClassName_property_selection : EBSelection <String> {
    switch (self.netClassName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'hasNet' transient property
  //····················································································································

  let hasNet_property = EBTransientProperty_Bool ()

  var hasNet_property_selection : EBSelection <Bool> {
    switch (self.hasNet_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'canMove' transient property
  //····················································································································

  let canMove_property = EBTransientProperty_Bool ()

  var canMove_property_selection : EBSelection <Bool> {
    switch (self.canMove_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'wireColor' transient property
  //····················································································································

  let wireColor_property = EBTransientProperty_NSColor ()

  var wireColor_property_selection : EBSelection <NSColor> {
    switch (self.wireColor_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'symbolRotation' transient property
  //····················································································································

  let symbolRotation_property = EBTransientProperty_QuadrantRotation ()

  var symbolRotation_property_selection : EBSelection <QuadrantRotation> {
    switch (self.symbolRotation_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'symbolNameNetName' transient property
  //····················································································································

  let symbolNameNetName_property = EBTransientProperty_TwoStrings ()

  var symbolNameNetName_property_selection : EBSelection <TwoStrings> {
    switch (self.symbolNameNetName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'isConnected' transient property
  //····················································································································

  let isConnected_property = EBTransientProperty_Bool ()

  var isConnected_property_selection : EBSelection <Bool> {
    switch (self.isConnected_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'status' transient property
  //····················································································································

  let status_property = EBTransientProperty_SchematicPointStatus ()

  var status_property_selection : EBSelection <SchematicPointStatus> {
    switch (self.status_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'connectedPoints' transient property
  //····················································································································

  let connectedPoints_property = EBTransientProperty_CanariPointArray ()

  var connectedPoints_property_selection : EBSelection <CanariPointArray> {
    switch (self.connectedPoints_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'netInfoForPoint' transient property
  //····················································································································

  let netInfoForPoint_property = EBTransientProperty_NetInfoPoint ()

  var netInfoForPoint_property_selection : EBSelection <NetInfoPoint> {
    switch (self.netInfoForPoint_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observable toMany property: mLabels
  //····················································································································

  private var mObserversOf_mLabels = EBWeakEventSet ()

  //····················································································································

  var mLabels_property_selection : EBSelection <[LabelInSchematic]> {
    if let model = self.propval {
      switch (model.mLabels_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mLabels (_ inObserver : EBEvent) {
    self.mObserversOf_mLabels.insert (inObserver)
    if let object = self.propval {
      object.mLabels_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mLabels (_ inObserver : EBEvent) {
    self.mObserversOf_mLabels.remove (inObserver)
    if let object = self.propval {
      object.mLabels_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mWiresP2s
  //····················································································································

  private var mObserversOf_mWiresP2s = EBWeakEventSet ()

  //····················································································································

  var mWiresP2s_property_selection : EBSelection <[WireInSchematic]> {
    if let model = self.propval {
      switch (model.mWiresP2s_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mWiresP2s (_ inObserver : EBEvent) {
    self.mObserversOf_mWiresP2s.insert (inObserver)
    if let object = self.propval {
      object.mWiresP2s_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mWiresP2s (_ inObserver : EBEvent) {
    self.mObserversOf_mWiresP2s.remove (inObserver)
    if let object = self.propval {
      object.mWiresP2s_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mWiresP1s
  //····················································································································

  private var mObserversOf_mWiresP1s = EBWeakEventSet ()

  //····················································································································

  var mWiresP1s_property_selection : EBSelection <[WireInSchematic]> {
    if let model = self.propval {
      switch (model.mWiresP1s_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mWiresP1s (_ inObserver : EBEvent) {
    self.mObserversOf_mWiresP1s.insert (inObserver)
    if let object = self.propval {
      object.mWiresP1s_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mWiresP1s (_ inObserver : EBEvent) {
    self.mObserversOf_mWiresP1s.remove (inObserver)
    if let object = self.propval {
      object.mWiresP1s_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    TransientObject PointInSchematic
//----------------------------------------------------------------------------------------------------------------------

class TransientObject_PointInSchematic : ReadOnlyObject_PointInSchematic {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_PointInSchematic? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_PointInSchematic?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : PointInSchematic? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < PointInSchematic? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : PointInSchematic? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_PointInSchematic
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_PointInSchematic : ReadOnlyObject_PointInSchematic {

  //····················································································································
 
  func setProp (_ inValue : PointInSchematic?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_PointInSchematic
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_PointInSchematic : ReadWriteObject_PointInSchematic {

  //····················································································································

  private var mModel : ReadWriteObject_PointInSchematic? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_PointInSchematic?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : PointInSchematic?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : PointInSchematic?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < PointInSchematic? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : PointInSchematic? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_PointInSchematic 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_PointInSchematic : ReadWriteObject_PointInSchematic, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PointInSchematic) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PointInSchematic) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PointInSchematic) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PointInSchematic) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : PointInSchematic?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < PointInSchematic? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : PointInSchematic?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : PointInSchematic? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

