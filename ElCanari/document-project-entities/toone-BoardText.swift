//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_BoardText 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_BoardText : ReadOnlyAbstractObjectProperty <BoardText> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : BoardText?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
  //--- Add observers to added objects
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private final var mX_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  final var mX_property_selection : EBSelection <Int?> { // §
    return self.mX_property.selection
/*    if let model = self.propval {
      switch (model.mX_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mX (_ inObserver : EBEvent) {
    self.mX_property.addEBObserver (inObserver)
/*    self.mObserversOf_mX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mX_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mX (_ inObserver : EBEvent) {
    self.mX_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mX_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private final var mY_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mY = EBWeakEventSet ()

  //····················································································································

  final var mY_property_selection : EBSelection <Int?> { // §
    return self.mY_property.selection
/*    if let model = self.propval {
      switch (model.mY_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mY (_ inObserver : EBEvent) {
    self.mY_property.addEBObserver (inObserver)
/*    self.mObserversOf_mY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mY_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mY (_ inObserver : EBEvent) {
    self.mY_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mY_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mFontSize' stored property
  //····················································································································

  private final var mFontSize_property = EBGenericTransientProperty <Double?> ()
//  private final var mObserversOf_mFontSize = EBWeakEventSet ()

  //····················································································································

  final var mFontSize_property_selection : EBSelection <Double?> { // §
    return self.mFontSize_property.selection
/*    if let model = self.propval {
      switch (model.mFontSize_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mFontSize (_ inObserver : EBEvent) {
    self.mFontSize_property.addEBObserver (inObserver)
/*    self.mObserversOf_mFontSize.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mFontSize_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mFontSize (_ inObserver : EBEvent) {
    self.mFontSize_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mFontSize.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mFontSize_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mLayer' stored property
  //····················································································································

  private final var mLayer_property = EBGenericTransientProperty <BoardTextLayer?> ()
//  private final var mObserversOf_mLayer = EBWeakEventSet ()

  //····················································································································

  final var mLayer_property_selection : EBSelection <BoardTextLayer?> { // §
    return self.mLayer_property.selection
/*    if let model = self.propval {
      switch (model.mLayer_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mLayer (_ inObserver : EBEvent) {
    self.mLayer_property.addEBObserver (inObserver)
/*    self.mObserversOf_mLayer.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mLayer_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mLayer (_ inObserver : EBEvent) {
    self.mLayer_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mLayer.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mLayer_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mText' stored property
  //····················································································································

  private final var mText_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_mText = EBWeakEventSet ()

  //····················································································································

  final var mText_property_selection : EBSelection <String?> { // §
    return self.mText_property.selection
/*    if let model = self.propval {
      switch (model.mText_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mText (_ inObserver : EBEvent) {
    self.mText_property.addEBObserver (inObserver)
/*    self.mObserversOf_mText.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mText_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mText (_ inObserver : EBEvent) {
    self.mText_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mText.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mText_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mHorizontalAlignment' stored property
  //····················································································································

  private final var mHorizontalAlignment_property = EBGenericTransientProperty <HorizontalAlignment?> ()
//  private final var mObserversOf_mHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  final var mHorizontalAlignment_property_selection : EBSelection <HorizontalAlignment?> { // §
    return self.mHorizontalAlignment_property.selection
/*    if let model = self.propval {
      switch (model.mHorizontalAlignment_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mHorizontalAlignment (_ inObserver : EBEvent) {
    self.mHorizontalAlignment_property.addEBObserver (inObserver)
/*    self.mObserversOf_mHorizontalAlignment.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mHorizontalAlignment_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mHorizontalAlignment (_ inObserver : EBEvent) {
    self.mHorizontalAlignment_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mHorizontalAlignment.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mHorizontalAlignment_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mVerticalAlignment' stored property
  //····················································································································

  private final var mVerticalAlignment_property = EBGenericTransientProperty <BoardTextVerticalAlignment?> ()
//  private final var mObserversOf_mVerticalAlignment = EBWeakEventSet ()

  //····················································································································

  final var mVerticalAlignment_property_selection : EBSelection <BoardTextVerticalAlignment?> { // §
    return self.mVerticalAlignment_property.selection
/*    if let model = self.propval {
      switch (model.mVerticalAlignment_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mVerticalAlignment (_ inObserver : EBEvent) {
    self.mVerticalAlignment_property.addEBObserver (inObserver)
/*    self.mObserversOf_mVerticalAlignment.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mVerticalAlignment_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mVerticalAlignment (_ inObserver : EBEvent) {
    self.mVerticalAlignment_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mVerticalAlignment.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mVerticalAlignment_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mRotation' stored property
  //····················································································································

  private final var mRotation_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mRotation = EBWeakEventSet ()

  //····················································································································

  final var mRotation_property_selection : EBSelection <Int?> { // §
    return self.mRotation_property.selection
/*    if let model = self.propval {
      switch (model.mRotation_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mRotation (_ inObserver : EBEvent) {
    self.mRotation_property.addEBObserver (inObserver)
/*    self.mObserversOf_mRotation.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mRotation_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mRotation (_ inObserver : EBEvent) {
    self.mRotation_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mRotation.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mRotation_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mWeight' stored property
  //····················································································································

  private final var mWeight_property = EBGenericTransientProperty <Double?> ()
//  private final var mObserversOf_mWeight = EBWeakEventSet ()

  //····················································································································

  final var mWeight_property_selection : EBSelection <Double?> { // §
    return self.mWeight_property.selection
/*    if let model = self.propval {
      switch (model.mWeight_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mWeight (_ inObserver : EBEvent) {
    self.mWeight_property.addEBObserver (inObserver)
/*    self.mObserversOf_mWeight.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mWeight_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mWeight (_ inObserver : EBEvent) {
    self.mWeight_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mWeight.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mWeight_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mOblique' stored property
  //····················································································································

  private final var mOblique_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mOblique = EBWeakEventSet ()

  //····················································································································

  final var mOblique_property_selection : EBSelection <Bool?> { // §
    return self.mOblique_property.selection
/*    if let model = self.propval {
      switch (model.mOblique_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mOblique (_ inObserver : EBEvent) {
    self.mOblique_property.addEBObserver (inObserver)
/*    self.mObserversOf_mOblique.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mOblique_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mOblique (_ inObserver : EBEvent) {
    self.mOblique_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mOblique.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mOblique_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var objectDisplay_property = EBGenericTransientProperty <EBShape?> ()
//  private final var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final var objectDisplay_property_selection : EBSelection <EBShape?> {
    return self.objectDisplay_property.selection
/*    if let model = self.propval {
      switch (model.objectDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.objectDisplay_property.addEBObserver (inObserver)
/*    self.mObserversOf_objectDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.objectDisplay_property.removeEBObserver (inObserver)
/*    self.mObserversOf_objectDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var selectionDisplay_property = EBGenericTransientProperty <EBShape?> ()
//  private final var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final var selectionDisplay_property_selection : EBSelection <EBShape?> {
    return self.selectionDisplay_property.selection
/*    if let model = self.propval {
      switch (model.selectionDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.selectionDisplay_property.addEBObserver (inObserver)
/*    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.selectionDisplay_property.removeEBObserver (inObserver)
/*    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'fontName' transient property
  //····················································································································

  private final var fontName_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_fontName = EBWeakEventSet ()

  //····················································································································

  final var fontName_property_selection : EBSelection <String?> {
    return self.fontName_property.selection
/*    if let model = self.propval {
      switch (model.fontName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_fontName (_ inObserver : EBEvent) {
    self.fontName_property.addEBObserver (inObserver)
/*    self.mObserversOf_fontName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.fontName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_fontName (_ inObserver : EBEvent) {
    self.fontName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_fontName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.fontName_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'signatureForERCChecking' transient property
  //····················································································································

  private final var signatureForERCChecking_property = EBGenericTransientProperty <UInt32?> ()
//  private final var mObserversOf_signatureForERCChecking = EBWeakEventSet ()

  //····················································································································

  final var signatureForERCChecking_property_selection : EBSelection <UInt32?> {
    return self.signatureForERCChecking_property.selection
/*    if let model = self.propval {
      switch (model.signatureForERCChecking_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }*/
  }

  //····················································································································

  final func addEBObserverOf_signatureForERCChecking (_ inObserver : EBEvent) {
    self.signatureForERCChecking_property.addEBObserver (inObserver)
/*    self.mObserversOf_signatureForERCChecking.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.signatureForERCChecking_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_signatureForERCChecking (_ inObserver : EBEvent) {
    self.signatureForERCChecking_property.removeEBObserver (inObserver)
/*    self.mObserversOf_signatureForERCChecking.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.signatureForERCChecking_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   INIT 
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mX simple stored property
    self.mX_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mX_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mX_property)
  //--- Configure mY simple stored property
    self.mY_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mY_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mY_property)
  //--- Configure mFontSize simple stored property
    self.mFontSize_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mFontSize_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mFontSize_property)
  //--- Configure mLayer simple stored property
    self.mLayer_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mLayer_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mLayer_property)
  //--- Configure mText simple stored property
    self.mText_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mText_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mText_property)
  //--- Configure mHorizontalAlignment simple stored property
    self.mHorizontalAlignment_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mHorizontalAlignment_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mHorizontalAlignment_property)
  //--- Configure mVerticalAlignment simple stored property
    self.mVerticalAlignment_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mVerticalAlignment_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mVerticalAlignment_property)
  //--- Configure mRotation simple stored property
    self.mRotation_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mRotation_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mRotation_property)
  //--- Configure mWeight simple stored property
    self.mWeight_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mWeight_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mWeight_property)
  //--- Configure mOblique simple stored property
    self.mOblique_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mOblique_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mOblique_property)
  //--- Configure objectDisplay transient property
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.objectDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.objectDisplay_property)
  //--- Configure selectionDisplay transient property
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.selectionDisplay_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.selectionDisplay_property)
  //--- Configure fontName transient property
    self.fontName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.fontName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.fontName_property)
  //--- Configure signatureForERCChecking transient property
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.signatureForERCChecking_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.signatureForERCChecking_property)
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject BoardText
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_BoardText : ReadOnlyObject_BoardText {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_BoardText? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_BoardText?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : BoardText? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < BoardText? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : BoardText? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_BoardText
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_BoardText : ReadOnlyObject_BoardText {

  //····················································································································
 
  func setProp (_ inValue : BoardText?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_BoardText
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_BoardText : ReadWriteObject_BoardText {

  //····················································································································

  private var mModel : ReadWriteObject_BoardText? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_BoardText?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : BoardText?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : BoardText?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < BoardText? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : BoardText? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_BoardText 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_BoardText : ReadWriteObject_BoardText, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : BoardText) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : BoardText) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : BoardText) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : BoardText) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : BoardText?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < BoardText? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : BoardText?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : BoardText? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

