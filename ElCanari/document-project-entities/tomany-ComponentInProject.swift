//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_ComponentInProject : ReadOnlyAbstractArrayProperty <ComponentInProject> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <ComponentInProject>, addedSet inAddedSet : Set <ComponentInProject>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_mX_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mY_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mRotation_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSide_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mNameIsVisibleInBoard_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mXName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mYName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mNameFontSize_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mNameRotation_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mValueIsVisibleInBoard_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mXValue_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mYValue_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mValueFontSize_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mValueRotation_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mComponentValue_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mNamePrefix_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mNameIndex_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mXUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mYUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_deviceName_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_packagePadDictionary_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_selectedPackageName_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_availablePackages_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_issues_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_componentIsPlacedInBoard_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_componentIsPlacedInBoardString_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_strokeBezierPath_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_placementInSchematic_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_deviceSymbolDictionary_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_componentNameFontName_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_componentValueFontName_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_componentPadDictionary_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_padNetDictionary_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_componentName_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_unplacedSymbols_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_objectDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_mPackages_fromElementsOfSet (inAddedSet) // ToMany proxy
  //--- Add observers to added objects
    self.addEBObserversOf_mX_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mY_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mRotation_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSide_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mNameIsVisibleInBoard_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mXName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mYName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mNameFontSize_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mNameRotation_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mValueIsVisibleInBoard_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mXValue_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mYValue_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mValueFontSize_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mValueRotation_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mComponentValue_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mNamePrefix_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mNameIndex_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mXUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mYUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_deviceName_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_packagePadDictionary_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_selectedPackageName_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_availablePackages_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_issues_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_componentIsPlacedInBoard_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_componentIsPlacedInBoardString_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_strokeBezierPath_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_placementInSchematic_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_deviceSymbolDictionary_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_componentNameFontName_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_componentValueFontName_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_componentPadDictionary_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_padNetDictionary_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_componentName_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_selectionDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_unplacedSymbols_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_objectDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_mPackages_toElementsOfSet (inAddedSet) // ToMany proxy
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mX.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mX.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mX_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mX.apply { (_ observer : EBEvent) in
        managedObject.mX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mX.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private var mObserversOf_mY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mY.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mY.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mY_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mY.apply { (_ observer : EBEvent) in
        managedObject.mY_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mY_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mY.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mRotation' stored property
  //····················································································································

  private var mObserversOf_mRotation = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mRotation (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mRotation.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRotation_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mRotation (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mRotation.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mRotation_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mRotation_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mRotation.apply { (_ observer : EBEvent) in
        managedObject.mRotation_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mRotation_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mRotation.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mRotation_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSide' stored property
  //····················································································································

  private var mObserversOf_mSide = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSide (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSide.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSide_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSide (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSide.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSide_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSide_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mSide.apply { (_ observer : EBEvent) in
        managedObject.mSide_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSide_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mSide.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSide_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNameIsVisibleInBoard' stored property
  //····················································································································

  private var mObserversOf_mNameIsVisibleInBoard = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNameIsVisibleInBoard (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNameIsVisibleInBoard.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameIsVisibleInBoard_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNameIsVisibleInBoard (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNameIsVisibleInBoard.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameIsVisibleInBoard_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNameIsVisibleInBoard_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNameIsVisibleInBoard.apply { (_ observer : EBEvent) in
        managedObject.mNameIsVisibleInBoard_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNameIsVisibleInBoard_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mNameIsVisibleInBoard.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNameIsVisibleInBoard_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mXName' stored property
  //····················································································································

  private var mObserversOf_mXName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mXName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mXName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mXName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mXName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mXName_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mXName.apply { (_ observer : EBEvent) in
        managedObject.mXName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mXName_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mXName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mXName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mYName' stored property
  //····················································································································

  private var mObserversOf_mYName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mYName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mYName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mYName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mYName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mYName_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mYName.apply { (_ observer : EBEvent) in
        managedObject.mYName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mYName_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mYName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mYName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNameFontSize' stored property
  //····················································································································

  private var mObserversOf_mNameFontSize = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNameFontSize (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNameFontSize.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameFontSize_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNameFontSize (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNameFontSize.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameFontSize_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNameFontSize_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNameFontSize.apply { (_ observer : EBEvent) in
        managedObject.mNameFontSize_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNameFontSize_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mNameFontSize.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNameFontSize_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNameRotation' stored property
  //····················································································································

  private var mObserversOf_mNameRotation = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNameRotation (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNameRotation.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameRotation_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNameRotation (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNameRotation.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameRotation_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNameRotation_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNameRotation.apply { (_ observer : EBEvent) in
        managedObject.mNameRotation_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNameRotation_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mNameRotation.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNameRotation_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mValueIsVisibleInBoard' stored property
  //····················································································································

  private var mObserversOf_mValueIsVisibleInBoard = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mValueIsVisibleInBoard (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mValueIsVisibleInBoard.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mValueIsVisibleInBoard_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mValueIsVisibleInBoard (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mValueIsVisibleInBoard.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mValueIsVisibleInBoard_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mValueIsVisibleInBoard_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mValueIsVisibleInBoard.apply { (_ observer : EBEvent) in
        managedObject.mValueIsVisibleInBoard_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mValueIsVisibleInBoard_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mValueIsVisibleInBoard.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mValueIsVisibleInBoard_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mXValue' stored property
  //····················································································································

  private var mObserversOf_mXValue = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mXValue (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mXValue.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXValue_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mXValue (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mXValue.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXValue_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mXValue_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mXValue.apply { (_ observer : EBEvent) in
        managedObject.mXValue_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mXValue_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mXValue.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mXValue_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mYValue' stored property
  //····················································································································

  private var mObserversOf_mYValue = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mYValue (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mYValue.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYValue_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mYValue (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mYValue.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYValue_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mYValue_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mYValue.apply { (_ observer : EBEvent) in
        managedObject.mYValue_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mYValue_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mYValue.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mYValue_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mValueFontSize' stored property
  //····················································································································

  private var mObserversOf_mValueFontSize = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mValueFontSize (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mValueFontSize.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mValueFontSize_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mValueFontSize (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mValueFontSize.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mValueFontSize_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mValueFontSize_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mValueFontSize.apply { (_ observer : EBEvent) in
        managedObject.mValueFontSize_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mValueFontSize_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mValueFontSize.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mValueFontSize_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mValueRotation' stored property
  //····················································································································

  private var mObserversOf_mValueRotation = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mValueRotation (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mValueRotation.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mValueRotation_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mValueRotation (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mValueRotation.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mValueRotation_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mValueRotation_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mValueRotation.apply { (_ observer : EBEvent) in
        managedObject.mValueRotation_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mValueRotation_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mValueRotation.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mValueRotation_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mComponentValue' stored property
  //····················································································································

  private var mObserversOf_mComponentValue = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mComponentValue (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mComponentValue.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mComponentValue_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComponentValue (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mComponentValue.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mComponentValue_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mComponentValue_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mComponentValue.apply { (_ observer : EBEvent) in
        managedObject.mComponentValue_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mComponentValue_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mComponentValue.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mComponentValue_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNamePrefix' stored property
  //····················································································································

  private var mObserversOf_mNamePrefix = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNamePrefix (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNamePrefix.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNamePrefix_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNamePrefix (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNamePrefix.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNamePrefix_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNamePrefix_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNamePrefix.apply { (_ observer : EBEvent) in
        managedObject.mNamePrefix_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNamePrefix_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mNamePrefix.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNamePrefix_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNameIndex' stored property
  //····················································································································

  private var mObserversOf_mNameIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNameIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNameIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNameIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNameIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNameIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNameIndex_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNameIndex.apply { (_ observer : EBEvent) in
        managedObject.mNameIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNameIndex_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mNameIndex.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNameIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mXUnit' stored property
  //····················································································································

  private var mObserversOf_mXUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mXUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mXUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mXUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mXUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mXUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mXUnit_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mXUnit.apply { (_ observer : EBEvent) in
        managedObject.mXUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mXUnit_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mXUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mXUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mYUnit' stored property
  //····················································································································

  private var mObserversOf_mYUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mYUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mYUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mYUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mYUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mYUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mYUnit_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mYUnit.apply { (_ observer : EBEvent) in
        managedObject.mYUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mYUnit_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mYUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mYUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPackages' toMany proxy
  //····················································································································

  private var mObserversOf_mPackages = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPackages (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPackages.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPackages_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackages (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPackages.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPackages_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPackages_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mPackages.apply { (_ observer : EBEvent) in
        managedObject.mPackages_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPackages_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    self.mObserversOf_mPackages.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPackages_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'deviceName' transient property
  //····················································································································

  private var mObserversOf_deviceName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_deviceName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_deviceName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_deviceName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_deviceName_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_deviceName.apply { (_ observer : EBEvent) in
        managedObject.deviceName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_deviceName_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_deviceName.apply { (_ observer : EBEvent) in
        managedObject.deviceName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'packagePadDictionary' transient property
  //····················································································································

  private var mObserversOf_packagePadDictionary = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_packagePadDictionary (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_packagePadDictionary.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.packagePadDictionary_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_packagePadDictionary (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_packagePadDictionary.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.packagePadDictionary_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_packagePadDictionary_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_packagePadDictionary.apply { (_ observer : EBEvent) in
        managedObject.packagePadDictionary_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_packagePadDictionary_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_packagePadDictionary.apply { (_ observer : EBEvent) in
        managedObject.packagePadDictionary_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedPackageName' transient property
  //····················································································································

  private var mObserversOf_selectedPackageName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedPackageName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedPackageName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPackageName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPackageName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedPackageName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPackageName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedPackageName_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_selectedPackageName.apply { (_ observer : EBEvent) in
        managedObject.selectedPackageName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedPackageName_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_selectedPackageName.apply { (_ observer : EBEvent) in
        managedObject.selectedPackageName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'availablePackages' transient property
  //····················································································································

  private var mObserversOf_availablePackages = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_availablePackages (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_availablePackages.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.availablePackages_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_availablePackages (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_availablePackages.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.availablePackages_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_availablePackages_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_availablePackages.apply { (_ observer : EBEvent) in
        managedObject.availablePackages_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_availablePackages_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_availablePackages.apply { (_ observer : EBEvent) in
        managedObject.availablePackages_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'componentIsPlacedInBoard' transient property
  //····················································································································

  private var mObserversOf_componentIsPlacedInBoard = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_componentIsPlacedInBoard (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_componentIsPlacedInBoard.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentIsPlacedInBoard_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_componentIsPlacedInBoard (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_componentIsPlacedInBoard.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentIsPlacedInBoard_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_componentIsPlacedInBoard_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_componentIsPlacedInBoard.apply { (_ observer : EBEvent) in
        managedObject.componentIsPlacedInBoard_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentIsPlacedInBoard_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_componentIsPlacedInBoard.apply { (_ observer : EBEvent) in
        managedObject.componentIsPlacedInBoard_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'componentIsPlacedInBoardString' transient property
  //····················································································································

  private var mObserversOf_componentIsPlacedInBoardString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_componentIsPlacedInBoardString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_componentIsPlacedInBoardString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentIsPlacedInBoardString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_componentIsPlacedInBoardString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_componentIsPlacedInBoardString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentIsPlacedInBoardString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_componentIsPlacedInBoardString_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_componentIsPlacedInBoardString.apply { (_ observer : EBEvent) in
        managedObject.componentIsPlacedInBoardString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentIsPlacedInBoardString_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_componentIsPlacedInBoardString.apply { (_ observer : EBEvent) in
        managedObject.componentIsPlacedInBoardString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'strokeBezierPath' transient property
  //····················································································································

  private var mObserversOf_strokeBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_strokeBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_strokeBezierPath.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.strokeBezierPath_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_strokeBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_strokeBezierPath.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.strokeBezierPath_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_strokeBezierPath_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_strokeBezierPath.apply { (_ observer : EBEvent) in
        managedObject.strokeBezierPath_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_strokeBezierPath_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_strokeBezierPath.apply { (_ observer : EBEvent) in
        managedObject.strokeBezierPath_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'placementInSchematic' transient property
  //····················································································································

  private var mObserversOf_placementInSchematic = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_placementInSchematic (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_placementInSchematic.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.placementInSchematic_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_placementInSchematic (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_placementInSchematic.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.placementInSchematic_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_placementInSchematic_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_placementInSchematic.apply { (_ observer : EBEvent) in
        managedObject.placementInSchematic_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_placementInSchematic_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_placementInSchematic.apply { (_ observer : EBEvent) in
        managedObject.placementInSchematic_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'deviceSymbolDictionary' transient property
  //····················································································································

  private var mObserversOf_deviceSymbolDictionary = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_deviceSymbolDictionary (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_deviceSymbolDictionary.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceSymbolDictionary_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceSymbolDictionary (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_deviceSymbolDictionary.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceSymbolDictionary_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_deviceSymbolDictionary_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_deviceSymbolDictionary.apply { (_ observer : EBEvent) in
        managedObject.deviceSymbolDictionary_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_deviceSymbolDictionary_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_deviceSymbolDictionary.apply { (_ observer : EBEvent) in
        managedObject.deviceSymbolDictionary_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'componentNameFontName' transient property
  //····················································································································

  private var mObserversOf_componentNameFontName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_componentNameFontName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_componentNameFontName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentNameFontName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_componentNameFontName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_componentNameFontName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentNameFontName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_componentNameFontName_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_componentNameFontName.apply { (_ observer : EBEvent) in
        managedObject.componentNameFontName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentNameFontName_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_componentNameFontName.apply { (_ observer : EBEvent) in
        managedObject.componentNameFontName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'componentValueFontName' transient property
  //····················································································································

  private var mObserversOf_componentValueFontName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_componentValueFontName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_componentValueFontName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentValueFontName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_componentValueFontName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_componentValueFontName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentValueFontName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_componentValueFontName_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_componentValueFontName.apply { (_ observer : EBEvent) in
        managedObject.componentValueFontName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentValueFontName_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_componentValueFontName.apply { (_ observer : EBEvent) in
        managedObject.componentValueFontName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'componentPadDictionary' transient property
  //····················································································································

  private var mObserversOf_componentPadDictionary = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_componentPadDictionary (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_componentPadDictionary.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentPadDictionary_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_componentPadDictionary (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_componentPadDictionary.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentPadDictionary_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_componentPadDictionary_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_componentPadDictionary.apply { (_ observer : EBEvent) in
        managedObject.componentPadDictionary_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentPadDictionary_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_componentPadDictionary.apply { (_ observer : EBEvent) in
        managedObject.componentPadDictionary_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padNetDictionary' transient property
  //····················································································································

  private var mObserversOf_padNetDictionary = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padNetDictionary (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNetDictionary.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNetDictionary_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNetDictionary (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNetDictionary.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNetDictionary_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padNetDictionary_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_padNetDictionary.apply { (_ observer : EBEvent) in
        managedObject.padNetDictionary_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNetDictionary_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_padNetDictionary.apply { (_ observer : EBEvent) in
        managedObject.padNetDictionary_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'componentName' transient property
  //····················································································································

  private var mObserversOf_componentName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_componentName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_componentName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_componentName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_componentName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.componentName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_componentName_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_componentName.apply { (_ observer : EBEvent) in
        managedObject.componentName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_componentName_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_componentName.apply { (_ observer : EBEvent) in
        managedObject.componentName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'unplacedSymbols' transient property
  //····················································································································

  private var mObserversOf_unplacedSymbols = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unplacedSymbols_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_unplacedSymbols (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unplacedSymbols.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unplacedSymbols_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_unplacedSymbols_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_unplacedSymbols.apply { (_ observer : EBEvent) in
        managedObject.unplacedSymbols_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_unplacedSymbols_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_unplacedSymbols.apply { (_ observer : EBEvent) in
        managedObject.unplacedSymbols_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<ComponentInProject>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_ComponentInProject : ReadOnlyArrayOf_ComponentInProject {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : ComponentInProject, _ right : ComponentInProject) -> Bool > = nil 
  private var mSortObserver : EBModelNotifierEvent? = nil

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_ComponentInProject? = nil
  private var mTransientKind : PropertyKind = .empty

 
  func setDataProvider (_ inProvider : ReadOnlyArrayOf_ComponentInProject,
                        sortCallback inSortCallBack : Optional < (_ left : ComponentInProject, _ right : ComponentInProject) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = []
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newArray : [ComponentInProject] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        if let sortFunction = self.mIsOrderedBefore {
          newArray = v.sorted { sortFunction ($0, $1) }
        }else{
          newArray = v
        }
        self.mTransientKind = .single
       case .multiple :
        newArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newArray = []
      self.mTransientKind = .empty
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [ComponentInProject] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [ComponentInProject] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_ComponentInProject <SUPER : EBManagedObject> : ReadOnlyArrayOf_ComponentInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    var newModelArray : [SUPER] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newModelArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newModelArray = v
        self.mTransientKind = .single
       case .multiple :
        newModelArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newModelArray = []
      self.mTransientKind = .empty
    }
    var newArray = [ComponentInProject] ()
    for superObject in newModelArray {
      if let object = superObject as? ComponentInProject {
        newArray.append (object)
      }
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [ComponentInProject] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [ComponentInProject] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_ComponentInProject : ReadOnlyArrayOf_ComponentInProject {

  //····················································································································
 
  func setProp (_ value :  [ComponentInProject]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_ComponentInProject : ReadWriteArrayOf_ComponentInProject {

  //····················································································································

  private var mModel : ReadWriteArrayOf_ComponentInProject? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_ComponentInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [ComponentInProject]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [ComponentInProject]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [ComponentInProject] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : [ComponentInProject] {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_ComponentInProject : ReadWriteArrayOf_ComponentInProject, EBSignatureObserverProtocol {

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : ComponentInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : ComponentInProject) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : ComponentInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : ComponentInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [ComponentInProject]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [ComponentInProject]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <ComponentInProject>, addedSet inAddedSet : Set <ComponentInProject>) {
    for managedObject in inRemovedSet {
      managedObject.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (managedObject)
    }
  //---
    for managedObject in inAddedSet {
      managedObject.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }
 
  //····················································································································

  override var prop : EBSelection < [ComponentInProject] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [ComponentInProject]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [ComponentInProject] { return self.mInternalArrayValue }

  //····················································································································

  func remove (_ object : ComponentInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : ComponentInProject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mInternalArrayValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: ComponentInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PreferencesArrayOf_ComponentInProject : StoredArrayOf_ComponentInProject {

  //····················································································································

  private let mPrefKey : String
  private let mObserverForWritingPreferences = EBOutletEvent ()
  
  //····················································································································

  init (prefKey : String) {
    self.mPrefKey = prefKey
    super.init ()
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [ComponentInProject] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "ComponentInProject") as? ComponentInProject {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
    self.addEBObserverOf_mX (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mY (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mRotation (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mSide (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mNameIsVisibleInBoard (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mXName (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mYName (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mNameFontSize (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mNameRotation (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mValueIsVisibleInBoard (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mXValue (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mYValue (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mValueFontSize (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mValueRotation (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mComponentValue (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mNamePrefix (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mNameIndex (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mXUnit (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mYUnit (self.mObserverForWritingPreferences)
    self.mObserverForWritingPreferences.mEventCallBack = { self.writeInPreferences () }
 }

  //····················································································································
 
  private func writeInPreferences () {
    var dictionaryArray = [NSDictionary] ()
    for object in self.mInternalArrayValue {
      let d = NSMutableDictionary ()
      object.saveIntoDictionary (d)
      d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
      dictionaryArray.append (d)
    }
    UserDefaults.standard.set (dictionaryArray, forKey: self.mPrefKey)
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

