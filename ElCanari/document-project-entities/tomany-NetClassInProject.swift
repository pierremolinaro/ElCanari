//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_NetClassInProject : ReadOnlyAbstractArrayProperty <NetClassInProject> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <NetClassInProject>, addedSet inAddedSet : Set <NetClassInProject>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_mNetClassName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mNetClassColor_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mNetWidth_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mNetWidthUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mViaHoleDiameter_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mViaHoleDiameterUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mViaPadDiameter_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mViaPadDiameterUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_netWidth_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_viaHoleDiameter_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_viaPadDiameter_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_canRemove_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_netUsage_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_netsDescription_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_netWarningCount_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_mNetClassName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mNetClassColor_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mNetWidth_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mNetWidthUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mViaHoleDiameter_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mViaHoleDiameterUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mViaPadDiameter_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mViaPadDiameterUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_netWidth_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_viaHoleDiameter_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_viaPadDiameter_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_canRemove_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_netUsage_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_netsDescription_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_netWarningCount_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'mNetClassName' stored property
  //····················································································································

  private var mObserversOf_mNetClassName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNetClassName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNetClassName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetClassName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetClassName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNetClassName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetClassName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNetClassName_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNetClassName.apply { (_ observer : EBEvent) in
        managedObject.mNetClassName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNetClassName_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mNetClassName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNetClassName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNetClassColor' stored property
  //····················································································································

  private var mObserversOf_mNetClassColor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNetClassColor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNetClassColor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetClassColor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetClassColor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNetClassColor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetClassColor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNetClassColor_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNetClassColor.apply { (_ observer : EBEvent) in
        managedObject.mNetClassColor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNetClassColor_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mNetClassColor.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNetClassColor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNetWidth' stored property
  //····················································································································

  private var mObserversOf_mNetWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNetWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNetWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNetWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNetWidth_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNetWidth.apply { (_ observer : EBEvent) in
        managedObject.mNetWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNetWidth_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mNetWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNetWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mNetWidthUnit' stored property
  //····················································································································

  private var mObserversOf_mNetWidthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mNetWidthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNetWidthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetWidthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNetWidthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNetWidthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mNetWidthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mNetWidthUnit_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mNetWidthUnit.apply { (_ observer : EBEvent) in
        managedObject.mNetWidthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mNetWidthUnit_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mNetWidthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mNetWidthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mViaHoleDiameter' stored property
  //····················································································································

  private var mObserversOf_mViaHoleDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mViaHoleDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mViaHoleDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaHoleDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mViaHoleDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mViaHoleDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaHoleDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mViaHoleDiameter_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mViaHoleDiameter.apply { (_ observer : EBEvent) in
        managedObject.mViaHoleDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mViaHoleDiameter_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mViaHoleDiameter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mViaHoleDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mViaHoleDiameterUnit' stored property
  //····················································································································

  private var mObserversOf_mViaHoleDiameterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mViaHoleDiameterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mViaHoleDiameterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaHoleDiameterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mViaHoleDiameterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mViaHoleDiameterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaHoleDiameterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mViaHoleDiameterUnit_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mViaHoleDiameterUnit.apply { (_ observer : EBEvent) in
        managedObject.mViaHoleDiameterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mViaHoleDiameterUnit_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mViaHoleDiameterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mViaHoleDiameterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mViaPadDiameter' stored property
  //····················································································································

  private var mObserversOf_mViaPadDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mViaPadDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mViaPadDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaPadDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mViaPadDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mViaPadDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaPadDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mViaPadDiameter_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mViaPadDiameter.apply { (_ observer : EBEvent) in
        managedObject.mViaPadDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mViaPadDiameter_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mViaPadDiameter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mViaPadDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mViaPadDiameterUnit' stored property
  //····················································································································

  private var mObserversOf_mViaPadDiameterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mViaPadDiameterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mViaPadDiameterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaPadDiameterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mViaPadDiameterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mViaPadDiameterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mViaPadDiameterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mViaPadDiameterUnit_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mViaPadDiameterUnit.apply { (_ observer : EBEvent) in
        managedObject.mViaPadDiameterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mViaPadDiameterUnit_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    self.mObserversOf_mViaPadDiameterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mViaPadDiameterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netWidth' transient property
  //····················································································································

  private var mObserversOf_netWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netWidth_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_netWidth.apply { (_ observer : EBEvent) in
        managedObject.netWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netWidth_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_netWidth.apply { (_ observer : EBEvent) in
        managedObject.netWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaHoleDiameter' transient property
  //····················································································································

  private var mObserversOf_viaHoleDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaHoleDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_viaHoleDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaHoleDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaHoleDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_viaHoleDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaHoleDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaHoleDiameter_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_viaHoleDiameter.apply { (_ observer : EBEvent) in
        managedObject.viaHoleDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaHoleDiameter_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_viaHoleDiameter.apply { (_ observer : EBEvent) in
        managedObject.viaHoleDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'viaPadDiameter' transient property
  //····················································································································

  private var mObserversOf_viaPadDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_viaPadDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_viaPadDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaPadDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_viaPadDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_viaPadDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.viaPadDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_viaPadDiameter_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_viaPadDiameter.apply { (_ observer : EBEvent) in
        managedObject.viaPadDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_viaPadDiameter_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_viaPadDiameter.apply { (_ observer : EBEvent) in
        managedObject.viaPadDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'canRemove' transient property
  //····················································································································

  private var mObserversOf_canRemove = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_canRemove (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_canRemove.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canRemove_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_canRemove (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_canRemove.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canRemove_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_canRemove_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_canRemove.apply { (_ observer : EBEvent) in
        managedObject.canRemove_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_canRemove_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_canRemove.apply { (_ observer : EBEvent) in
        managedObject.canRemove_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netUsage' transient property
  //····················································································································

  private var mObserversOf_netUsage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netUsage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netUsage.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netUsage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netUsage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netUsage.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netUsage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netUsage_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_netUsage.apply { (_ observer : EBEvent) in
        managedObject.netUsage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netUsage_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_netUsage.apply { (_ observer : EBEvent) in
        managedObject.netUsage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netsDescription' transient property
  //····················································································································

  private var mObserversOf_netsDescription = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netsDescription (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netsDescription.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netsDescription_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netsDescription (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netsDescription.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netsDescription_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netsDescription_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_netsDescription.apply { (_ observer : EBEvent) in
        managedObject.netsDescription_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netsDescription_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_netsDescription.apply { (_ observer : EBEvent) in
        managedObject.netsDescription_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'netWarningCount' transient property
  //····················································································································

  private var mObserversOf_netWarningCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_netWarningCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_netWarningCount.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netWarningCount_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_netWarningCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_netWarningCount.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.netWarningCount_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_netWarningCount_toElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_netWarningCount.apply { (_ observer : EBEvent) in
        managedObject.netWarningCount_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_netWarningCount_fromElementsOfSet (_ inSet : Set<NetClassInProject>) {
    for managedObject in inSet {
      self.mObserversOf_netWarningCount.apply { (_ observer : EBEvent) in
        managedObject.netWarningCount_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_NetClassInProject : ReadOnlyArrayOf_NetClassInProject {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : NetClassInProject, _ right : NetClassInProject) -> Bool > = nil 
  private var mSortObserver : EBModelNotifierEvent? = nil

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_NetClassInProject? = nil
  private var mTransientKind : PropertyKind = .empty

 
  func setDataProvider (_ inProvider : ReadOnlyArrayOf_NetClassInProject,
                        sortCallback inSortCallBack : Optional < (_ left : NetClassInProject, _ right : NetClassInProject) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = []
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newArray : [NetClassInProject] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        if let sortFunction = self.mIsOrderedBefore {
          newArray = v.sorted { sortFunction ($0, $1) }
        }else{
          newArray = v
        }
        self.mTransientKind = .single
       case .multiple :
        newArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newArray = []
      self.mTransientKind = .empty
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [NetClassInProject] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [NetClassInProject] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_NetClassInProject <SUPER : EBManagedObject> : ReadOnlyArrayOf_NetClassInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    var newModelArray : [SUPER] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newModelArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newModelArray = v
        self.mTransientKind = .single
       case .multiple :
        newModelArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newModelArray = []
      self.mTransientKind = .empty
    }
    var newArray = [NetClassInProject] ()
    for superObject in newModelArray {
      if let object = superObject as? NetClassInProject {
        newArray.append (object)
      }
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [NetClassInProject] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [NetClassInProject] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_NetClassInProject : ReadOnlyArrayOf_NetClassInProject {

  //····················································································································
 
  func setProp (_ value :  [NetClassInProject]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_NetClassInProject : ReadWriteArrayOf_NetClassInProject {

  //····················································································································

  private var mModel : ReadWriteArrayOf_NetClassInProject? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_NetClassInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [NetClassInProject]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [NetClassInProject]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [NetClassInProject] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : [NetClassInProject] {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: NetClassInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_NetClassInProject : ReadWriteArrayOf_NetClassInProject, EBSignatureObserverProtocol {

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : NetClassInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : NetClassInProject) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : NetClassInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : NetClassInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  //  Init
  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [NetClassInProject] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "NetClassInProject") as? NetClassInProject {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [NetClassInProject]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [NetClassInProject]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //--- Write in preferences ?
    self.writeInPreferences ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <NetClassInProject>, addedSet inAddedSet : Set <NetClassInProject>) {
    for managedObject in inRemovedSet {
      managedObject.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (managedObject)
    }
  //---
    for managedObject in inAddedSet {
      managedObject.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }
 
  //····················································································································

  override var prop : EBSelection < [NetClassInProject] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [NetClassInProject]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [NetClassInProject] { return self.mInternalArrayValue }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mInternalArrayValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  func remove (_ object : NetClassInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : NetClassInProject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mInternalArrayValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

