//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_mComponentPadName : class {
  var mComponentPadName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_mPadIndex : class {
  var mPadIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_mX : class {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_mY : class {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_mDefaultHoleDiameterUnit : class {
  var mDefaultHoleDiameterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_mCustomHoleDiameter : class {
  var mCustomHoleDiameter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_mCustomHoleDiameterUnit : class {
  var mCustomHoleDiameterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_mUsesCustomHoleDiameter : class {
  var mUsesCustomHoleDiameter : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_mDefaultPadDiameterUnit : class {
  var mDefaultPadDiameterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_mCustomPadDiameter : class {
  var mCustomPadDiameter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_mCustomPadDiameterUnit : class {
  var mCustomPadDiameterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_mUsesCustomPadDiameter : class {
  var mUsesCustomPadDiameter : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_location : class {
  var location : CanariPoint? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_netNameFromComponentPad : class {
  var netNameFromComponentPad : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_netNameAndPadLocation : class {
  var netNameAndPadLocation : RastnetInfoArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_side : class {
  var side : ConnectorSide? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_isVia : class {
  var isVia : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_viaDefaultHoleDiameter : class {
  var viaDefaultHoleDiameter : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_viaDefaultPadDiameter : class {
  var viaDefaultPadDiameter : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_netNameFromTracks : class {
  var netNameFromTracks : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_netClassName : class {
  var netClassName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_connectedToComponent : class {
  var connectedToComponent : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_actualHoleDiameter : class {
  var actualHoleDiameter : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_actualPadDiameter : class {
  var actualPadDiameter : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardConnector_signatureForERCChecking : class {
  var signatureForERCChecking : UInt32? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardConnector
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class BoardConnector : BoardObject,
         BoardConnector_mComponentPadName,
         BoardConnector_mPadIndex,
         BoardConnector_mX,
         BoardConnector_mY,
         BoardConnector_mDefaultHoleDiameterUnit,
         BoardConnector_mCustomHoleDiameter,
         BoardConnector_mCustomHoleDiameterUnit,
         BoardConnector_mUsesCustomHoleDiameter,
         BoardConnector_mDefaultPadDiameterUnit,
         BoardConnector_mCustomPadDiameter,
         BoardConnector_mCustomPadDiameterUnit,
         BoardConnector_mUsesCustomPadDiameter,
         BoardConnector_location,
         BoardConnector_netNameFromComponentPad,
         BoardConnector_netNameAndPadLocation,
         BoardConnector_side,
         BoardConnector_isVia,
         BoardConnector_issues,
         BoardConnector_viaDefaultHoleDiameter,
         BoardConnector_viaDefaultPadDiameter,
         BoardConnector_netNameFromTracks,
         BoardConnector_netClassName,
         BoardConnector_connectedToComponent,
         BoardConnector_actualHoleDiameter,
         BoardConnector_actualPadDiameter,
         BoardConnector_objectDisplay,
         BoardConnector_selectionDisplay,
         BoardConnector_signatureForERCChecking {

  //····················································································································
  //   Atomic property: mComponentPadName
  //····················································································································

  let mComponentPadName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mComponentPadName : String {
    get { return self.mComponentPadName_property.propval }
    set { self.mComponentPadName_property.setProp (newValue) }
  }

  //····················································································································

  var mComponentPadName_property_selection : EBSelection <String> { return self.mComponentPadName_property.prop }

  //····················································································································
  //   Atomic property: mPadIndex
  //····················································································································

  let mPadIndex_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mPadIndex : Int {
    get { return self.mPadIndex_property.propval }
    set { self.mPadIndex_property.setProp (newValue) }
  }

  //····················································································································

  var mPadIndex_property_selection : EBSelection <Int> { return self.mPadIndex_property.prop }

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  let mX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································

  var mX_property_selection : EBSelection <Int> { return self.mX_property.prop }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  let mY_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································

  var mY_property_selection : EBSelection <Int> { return self.mY_property.prop }

  //····················································································································
  //   To many property: mTracksP2
  //····················································································································

  let mTracksP2_property = StoredArrayOf_BoardTrack (usedForSignature: false)

  //····················································································································

  var mTracksP2_property_selection : EBSelection < [BoardTrack] > {
    return self.mTracksP2_property.prop
  }

  //····················································································································

  var mTracksP2 : [BoardTrack] {
    get { return self.mTracksP2_property.propval }
    set { self.mTracksP2_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mDefaultHoleDiameterUnit
  //····················································································································

  let mDefaultHoleDiameterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var mDefaultHoleDiameterUnit : Int {
    get { return self.mDefaultHoleDiameterUnit_property.propval }
    set { self.mDefaultHoleDiameterUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mDefaultHoleDiameterUnit_property_selection : EBSelection <Int> { return self.mDefaultHoleDiameterUnit_property.prop }

  //····················································································································
  //   Atomic property: mCustomHoleDiameter
  //····················································································································

  let mCustomHoleDiameter_property = EBStoredProperty_Int (defaultValue: 45720)

  //····················································································································

  var mCustomHoleDiameter : Int {
    get { return self.mCustomHoleDiameter_property.propval }
    set { self.mCustomHoleDiameter_property.setProp (newValue) }
  }

  //····················································································································

  var mCustomHoleDiameter_property_selection : EBSelection <Int> { return self.mCustomHoleDiameter_property.prop }

  //····················································································································
  //   Atomic property: mCustomHoleDiameterUnit
  //····················································································································

  let mCustomHoleDiameterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var mCustomHoleDiameterUnit : Int {
    get { return self.mCustomHoleDiameterUnit_property.propval }
    set { self.mCustomHoleDiameterUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mCustomHoleDiameterUnit_property_selection : EBSelection <Int> { return self.mCustomHoleDiameterUnit_property.prop }

  //····················································································································
  //   Atomic property: mUsesCustomHoleDiameter
  //····················································································································

  let mUsesCustomHoleDiameter_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mUsesCustomHoleDiameter : Bool {
    get { return self.mUsesCustomHoleDiameter_property.propval }
    set { self.mUsesCustomHoleDiameter_property.setProp (newValue) }
  }

  //····················································································································

  var mUsesCustomHoleDiameter_property_selection : EBSelection <Bool> { return self.mUsesCustomHoleDiameter_property.prop }

  //····················································································································
  //   Atomic property: mDefaultPadDiameterUnit
  //····················································································································

  let mDefaultPadDiameterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var mDefaultPadDiameterUnit : Int {
    get { return self.mDefaultPadDiameterUnit_property.propval }
    set { self.mDefaultPadDiameterUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mDefaultPadDiameterUnit_property_selection : EBSelection <Int> { return self.mDefaultPadDiameterUnit_property.prop }

  //····················································································································
  //   Atomic property: mCustomPadDiameter
  //····················································································································

  let mCustomPadDiameter_property = EBStoredProperty_Int (defaultValue: 91440)

  //····················································································································

  var mCustomPadDiameter : Int {
    get { return self.mCustomPadDiameter_property.propval }
    set { self.mCustomPadDiameter_property.setProp (newValue) }
  }

  //····················································································································

  var mCustomPadDiameter_property_selection : EBSelection <Int> { return self.mCustomPadDiameter_property.prop }

  //····················································································································
  //   Atomic property: mCustomPadDiameterUnit
  //····················································································································

  let mCustomPadDiameterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var mCustomPadDiameterUnit : Int {
    get { return self.mCustomPadDiameterUnit_property.propval }
    set { self.mCustomPadDiameterUnit_property.setProp (newValue) }
  }

  //····················································································································

  var mCustomPadDiameterUnit_property_selection : EBSelection <Int> { return self.mCustomPadDiameterUnit_property.prop }

  //····················································································································
  //   Atomic property: mUsesCustomPadDiameter
  //····················································································································

  let mUsesCustomPadDiameter_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mUsesCustomPadDiameter : Bool {
    get { return self.mUsesCustomPadDiameter_property.propval }
    set { self.mUsesCustomPadDiameter_property.setProp (newValue) }
  }

  //····················································································································

  var mUsesCustomPadDiameter_property_selection : EBSelection <Bool> { return self.mUsesCustomPadDiameter_property.prop }

  //····················································································································
  //   To many property: mTracksP1
  //····················································································································

  let mTracksP1_property = StoredArrayOf_BoardTrack (usedForSignature: false)

  //····················································································································

  var mTracksP1_property_selection : EBSelection < [BoardTrack] > {
    return self.mTracksP1_property.prop
  }

  //····················································································································

  var mTracksP1 : [BoardTrack] {
    get { return self.mTracksP1_property.propval }
    set { self.mTracksP1_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: mComponent
  //····················································································································

   let mComponent_property = StoredObject_ComponentInProject (usedForSignature: false)

  //····················································································································

  var mComponent_property_selection : EBSelection <ComponentInProject?> {
    return .single (self.mComponent_property.propval)
  }

  //····················································································································

  var mComponent : ComponentInProject? {
    get {
      return self.mComponent_property.propval
    }
    set {
      if self.mComponent_property.propval != nil {
        self.mComponent_property.setProp (nil)
      }
      if newValue != nil {
        self.mComponent_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mComponent_none : StoredObject_ComponentInProject { return self.mComponent_property }

  //····················································································································

  var mComponent_none_selection : EBSelection <Bool> {
    return .single (self.mComponent_property.propval == nil)
  }

  //····················································································································
  //   Transient property: location
  //····················································································································

  let location_property = EBTransientProperty_CanariPoint ()

  //····················································································································

  var location_property_selection : EBSelection <CanariPoint> {
    return self.location_property.prop
  }

  //····················································································································

  var location : CanariPoint? {
    switch self.location_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netNameFromComponentPad
  //····················································································································

  let netNameFromComponentPad_property = EBTransientProperty_String ()

  //····················································································································

  var netNameFromComponentPad_property_selection : EBSelection <String> {
    return self.netNameFromComponentPad_property.prop
  }

  //····················································································································

  var netNameFromComponentPad : String? {
    switch self.netNameFromComponentPad_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: side
  //····················································································································

  let side_property = EBTransientProperty_ConnectorSide ()

  //····················································································································

  var side_property_selection : EBSelection <ConnectorSide> {
    return self.side_property.prop
  }

  //····················································································································

  var side : ConnectorSide? {
    switch self.side_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: viaDefaultHoleDiameter
  //····················································································································

  let viaDefaultHoleDiameter_property = EBTransientProperty_Int ()

  //····················································································································

  var viaDefaultHoleDiameter_property_selection : EBSelection <Int> {
    return self.viaDefaultHoleDiameter_property.prop
  }

  //····················································································································

  var viaDefaultHoleDiameter : Int? {
    switch self.viaDefaultHoleDiameter_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: viaDefaultPadDiameter
  //····················································································································

  let viaDefaultPadDiameter_property = EBTransientProperty_Int ()

  //····················································································································

  var viaDefaultPadDiameter_property_selection : EBSelection <Int> {
    return self.viaDefaultPadDiameter_property.prop
  }

  //····················································································································

  var viaDefaultPadDiameter : Int? {
    switch self.viaDefaultPadDiameter_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netNameFromTracks
  //····················································································································

  let netNameFromTracks_property = EBTransientProperty_String ()

  //····················································································································

  var netNameFromTracks_property_selection : EBSelection <String> {
    return self.netNameFromTracks_property.prop
  }

  //····················································································································

  var netNameFromTracks : String? {
    switch self.netNameFromTracks_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netClassName
  //····················································································································

  let netClassName_property = EBTransientProperty_String ()

  //····················································································································

  var netClassName_property_selection : EBSelection <String> {
    return self.netClassName_property.prop
  }

  //····················································································································

  var netClassName : String? {
    switch self.netClassName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: connectedToComponent
  //····················································································································

  let connectedToComponent_property = EBTransientProperty_Bool ()

  //····················································································································

  var connectedToComponent_property_selection : EBSelection <Bool> {
    return self.connectedToComponent_property.prop
  }

  //····················································································································

  var connectedToComponent : Bool? {
    switch self.connectedToComponent_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: actualHoleDiameter
  //····················································································································

  let actualHoleDiameter_property = EBTransientProperty_Int ()

  //····················································································································

  var actualHoleDiameter_property_selection : EBSelection <Int> {
    return self.actualHoleDiameter_property.prop
  }

  //····················································································································

  var actualHoleDiameter : Int? {
    switch self.actualHoleDiameter_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: actualPadDiameter
  //····················································································································

  let actualPadDiameter_property = EBTransientProperty_Int ()

  //····················································································································

  var actualPadDiameter_property_selection : EBSelection <Int> {
    return self.actualPadDiameter_property.prop
  }

  //····················································································································

  var actualPadDiameter : Int? {
    switch self.actualPadDiameter_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
    let operationQueue = OperationQueue ()
  //--- Atomic property: mComponentPadName
    self.mComponentPadName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mPadIndex
    self.mPadIndex_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mX
    self.mX_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mY
    self.mY_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mTracksP2 (has opposite relationship)
    self.mTracksP2_property.ebUndoManager = self.ebUndoManager
    self.mTracksP2_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mConnectorP2_property.setProp (me) } },
      resetter: { inObject in inObject.mConnectorP2_property.setProp (nil) }
    )
  //--- Atomic property: mDefaultHoleDiameterUnit
    self.mDefaultHoleDiameterUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mCustomHoleDiameter
    self.mCustomHoleDiameter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mCustomHoleDiameterUnit
    self.mCustomHoleDiameterUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mUsesCustomHoleDiameter
    self.mUsesCustomHoleDiameter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mDefaultPadDiameterUnit
    self.mDefaultPadDiameterUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mCustomPadDiameter
    self.mCustomPadDiameter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mCustomPadDiameterUnit
    self.mCustomPadDiameterUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mUsesCustomPadDiameter
    self.mUsesCustomPadDiameter_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mTracksP1 (has opposite relationship)
    self.mTracksP1_property.ebUndoManager = self.ebUndoManager
    self.mTracksP1_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mConnectorP1_property.setProp (me) } },
      resetter: { inObject in inObject.mConnectorP1_property.setProp (nil) }
    )
  //--- To one property: mComponent (has opposite to many relationship: mConnectors)
    self.mComponent_property.ebUndoManager = self.ebUndoManager
    self.mComponent_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mConnectors_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mConnectors_property.remove (me) } }
    )
  //--- Atomic property: location
    self.location_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mComponent_property.componentPadDictionary_property_selection.kind ()
        kind &= unwSelf.mComponentPadName_property_selection.kind ()
        kind &= unwSelf.mPadIndex_property_selection.kind ()
        kind &= unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mComponent_property.componentPadDictionary_property_selection, unwSelf.mComponentPadName_property_selection, unwSelf.mPadIndex_property_selection, unwSelf.mX_property_selection, unwSelf.mY_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardConnector_location (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mComponent_property.addEBObserverOf_componentPadDictionary (self.location_property, postEvent: false)
    self.mComponentPadName_property.addEBObserver (self.location_property, postEvent: false)
    self.mPadIndex_property.addEBObserver (self.location_property, postEvent: false)
    self.mX_property.addEBObserver (self.location_property, postEvent: false)
    self.mY_property.addEBObserver (self.location_property, postEvent: false)
    self.location_property.postEvent ()
  //--- Atomic property: netNameFromComponentPad
    self.netNameFromComponentPad_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mComponent_property.padNetDictionary_property_selection.kind ()
        kind &= unwSelf.mComponentPadName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mComponent_property.padNetDictionary_property_selection, unwSelf.mComponentPadName_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_BoardConnector_netNameFromComponentPad (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mComponent_property.addEBObserverOf_padNetDictionary (self.netNameFromComponentPad_property, postEvent: false)
    self.mComponentPadName_property.addEBObserver (self.netNameFromComponentPad_property, postEvent: false)
    self.netNameFromComponentPad_property.postEvent ()
  //--- Atomic property: netNameAndPadLocation
    self.netNameAndPadLocation_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mComponent_property.padNetDictionary_property_selection.kind ()
        kind &= unwSelf.mComponentPadName_property_selection.kind ()
        kind &= unwSelf.location_property_selection.kind ()
        kind &= unwSelf.mComponent_property.componentName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mComponent_property.padNetDictionary_property_selection, unwSelf.mComponentPadName_property_selection, unwSelf.location_property_selection, unwSelf.mComponent_property.componentName_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_BoardConnector_netNameAndPadLocation (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mComponent_property.addEBObserverOf_padNetDictionary (self.netNameAndPadLocation_property, postEvent: false)
    self.mComponentPadName_property.addEBObserver (self.netNameAndPadLocation_property, postEvent: false)
    self.location_property.addEBObserver (self.netNameAndPadLocation_property, postEvent: false)
    self.mComponent_property.addEBObserverOf_componentName (self.netNameAndPadLocation_property, postEvent: false)
    self.netNameAndPadLocation_property.postEvent ()
  //--- Atomic property: side
    self.side_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mComponent_property.componentPadDictionary_property_selection.kind ()
        kind &= unwSelf.mComponentPadName_property_selection.kind ()
        kind &= unwSelf.mPadIndex_property_selection.kind ()
        kind &= unwSelf.mTracksP1_property_selection.kind ()
        kind &= unwSelf.mTracksP2_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mComponent_property.componentPadDictionary_property_selection, unwSelf.mComponentPadName_property_selection, unwSelf.mPadIndex_property_selection, unwSelf.mTracksP1_property_selection, unwSelf.mTracksP2_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_BoardConnector_side (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mComponent_property.addEBObserverOf_componentPadDictionary (self.side_property, postEvent: false)
    self.mComponentPadName_property.addEBObserver (self.side_property, postEvent: false)
    self.mPadIndex_property.addEBObserver (self.side_property, postEvent: false)
    self.mTracksP1_property.addEBObserverOf_mSide (self.side_property, postEvent: false)
    self.mTracksP2_property.addEBObserverOf_mSide (self.side_property, postEvent: false)
    self.side_property.postEvent ()
  //--- Atomic property: isVia
    self.isVia_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mTracksP1_property_selection.kind ()
        kind &= unwSelf.mTracksP2_property_selection.kind ()
        kind &= unwSelf.mComponent_none_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mTracksP1_property_selection, unwSelf.mTracksP2_property_selection, unwSelf.mComponent_none_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_BoardConnector_isVia (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mTracksP1_property.addEBObserverOf_mSide (self.isVia_property, postEvent: false)
    self.mTracksP2_property.addEBObserverOf_mSide (self.isVia_property, postEvent: false)
    self.mComponent_property.addEBObserver (self.isVia_property, postEvent: false)
    self.isVia_property.postEvent ()
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.location_property_selection.kind ()
        kind &= unwSelf.mComponent_none_selection.kind ()
        kind &= unwSelf.mComponentPadName_property_selection.kind ()
        kind &= unwSelf.mTracksP1_property.count_property_selection.kind ()
        kind &= unwSelf.mTracksP2_property.count_property_selection.kind ()
        kind &= unwSelf.errorOrWarningIssueSize_property_selection.kind ()
        kind &= unwSelf.mComponent_property.padNetDictionary_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.location_property_selection, unwSelf.mComponent_none_selection, unwSelf.mComponentPadName_property_selection, unwSelf.mTracksP1_property.count_property_selection, unwSelf.mTracksP2_property.count_property_selection, unwSelf.errorOrWarningIssueSize_property_selection, unwSelf.mComponent_property.padNetDictionary_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6)) :
            return .single (transient_BoardConnector_issues (v0, v1, v2, v3, v4, v5, v6))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.location_property.addEBObserver (self.issues_property, postEvent: false)
    self.mComponent_property.addEBObserver (self.issues_property, postEvent: false)
    self.mComponentPadName_property.addEBObserver (self.issues_property, postEvent: false)
    self.mTracksP1_property.addEBObserver (self.issues_property, postEvent: false)
    self.mTracksP2_property.addEBObserver (self.issues_property, postEvent: false)
    self.errorOrWarningIssueSize_property.addEBObserver (self.issues_property, postEvent: false)
    self.mComponent_property.addEBObserverOf_padNetDictionary (self.issues_property, postEvent: false)
    self.issues_property.postEvent ()
  //--- Atomic property: viaDefaultHoleDiameter
    self.viaDefaultHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mTracksP1_property_selection.kind ()
        kind &= unwSelf.mTracksP2_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mTracksP1_property_selection, unwSelf.mTracksP2_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_BoardConnector_viaDefaultHoleDiameter (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mTracksP1_property.addEBObserverOf_netClassViaHoleDiameter (self.viaDefaultHoleDiameter_property, postEvent: false)
    self.mTracksP2_property.addEBObserverOf_netClassViaHoleDiameter (self.viaDefaultHoleDiameter_property, postEvent: false)
    self.viaDefaultHoleDiameter_property.postEvent ()
  //--- Atomic property: viaDefaultPadDiameter
    self.viaDefaultPadDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mTracksP1_property_selection.kind ()
        kind &= unwSelf.mTracksP2_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mTracksP1_property_selection, unwSelf.mTracksP2_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_BoardConnector_viaDefaultPadDiameter (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mTracksP1_property.addEBObserverOf_netClassViaPadDiameter (self.viaDefaultPadDiameter_property, postEvent: false)
    self.mTracksP2_property.addEBObserverOf_netClassViaPadDiameter (self.viaDefaultPadDiameter_property, postEvent: false)
    self.viaDefaultPadDiameter_property.postEvent ()
  //--- Atomic property: netNameFromTracks
    self.netNameFromTracks_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mTracksP1_property_selection.kind ()
        kind &= unwSelf.mTracksP2_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mTracksP1_property_selection, unwSelf.mTracksP2_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_BoardConnector_netNameFromTracks (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mTracksP1_property.addEBObserverOf_netName (self.netNameFromTracks_property, postEvent: false)
    self.mTracksP2_property.addEBObserverOf_netName (self.netNameFromTracks_property, postEvent: false)
    self.netNameFromTracks_property.postEvent ()
  //--- Atomic property: netClassName
    self.netClassName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mTracksP1_property_selection.kind ()
        kind &= unwSelf.mTracksP2_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mTracksP1_property_selection, unwSelf.mTracksP2_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_BoardConnector_netClassName (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mTracksP1_property.addEBObserverOf_netClassName (self.netClassName_property, postEvent: false)
    self.mTracksP2_property.addEBObserverOf_netClassName (self.netClassName_property, postEvent: false)
    self.netClassName_property.postEvent ()
  //--- Atomic property: connectedToComponent
    self.connectedToComponent_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mComponent_none_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mComponent_none_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardConnector_connectedToComponent (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mComponent_property.addEBObserver (self.connectedToComponent_property, postEvent: false)
    self.connectedToComponent_property.postEvent ()
  //--- Atomic property: actualHoleDiameter
    self.actualHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.viaDefaultHoleDiameter_property_selection.kind ()
        kind &= unwSelf.mUsesCustomHoleDiameter_property_selection.kind ()
        kind &= unwSelf.mCustomHoleDiameter_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.viaDefaultHoleDiameter_property_selection, unwSelf.mUsesCustomHoleDiameter_property_selection, unwSelf.mCustomHoleDiameter_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_BoardConnector_actualHoleDiameter (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.viaDefaultHoleDiameter_property.addEBObserver (self.actualHoleDiameter_property, postEvent: false)
    self.mUsesCustomHoleDiameter_property.addEBObserver (self.actualHoleDiameter_property, postEvent: false)
    self.mCustomHoleDiameter_property.addEBObserver (self.actualHoleDiameter_property, postEvent: false)
    self.actualHoleDiameter_property.postEvent ()
  //--- Atomic property: actualPadDiameter
    self.actualPadDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.viaDefaultPadDiameter_property_selection.kind ()
        kind &= unwSelf.mUsesCustomPadDiameter_property_selection.kind ()
        kind &= unwSelf.mCustomPadDiameter_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.viaDefaultPadDiameter_property_selection, unwSelf.mUsesCustomPadDiameter_property_selection, unwSelf.mCustomPadDiameter_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_BoardConnector_actualPadDiameter (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.viaDefaultPadDiameter_property.addEBObserver (self.actualPadDiameter_property, postEvent: false)
    self.mUsesCustomPadDiameter_property.addEBObserver (self.actualPadDiameter_property, postEvent: false)
    self.mCustomPadDiameter_property.addEBObserver (self.actualPadDiameter_property, postEvent: false)
    self.actualPadDiameter_property.postEvent ()
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.connectedToComponent_property_selection.kind ()
        kind &= unwSelf.side_property_selection.kind ()
        kind &= unwSelf.location_property_selection.kind ()
        kind &= unwSelf.actualHoleDiameter_property_selection.kind ()
        kind &= unwSelf.actualPadDiameter_property_selection.kind ()
        kind &= g_Preferences!.frontSidePadColorForBoard_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.connectedToComponent_property_selection, unwSelf.side_property_selection, unwSelf.location_property_selection, unwSelf.actualHoleDiameter_property_selection, unwSelf.actualPadDiameter_property_selection, g_Preferences!.frontSidePadColorForBoard_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5)) :
            return .single (transient_BoardConnector_objectDisplay (v0, v1, v2, v3, v4, v5))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.connectedToComponent_property.addEBObserver (self.objectDisplay_property, postEvent: false)
    self.side_property.addEBObserver (self.objectDisplay_property, postEvent: false)
    self.location_property.addEBObserver (self.objectDisplay_property, postEvent: false)
    self.actualHoleDiameter_property.addEBObserver (self.objectDisplay_property, postEvent: false)
    self.actualPadDiameter_property.addEBObserver (self.objectDisplay_property, postEvent: false)
    g_Preferences?.frontSidePadColorForBoard_property.addEBObserver (self.objectDisplay_property, postEvent: false)
    self.objectDisplay_property.postEvent ()
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.connectedToComponent_property_selection.kind ()
        kind &= unwSelf.side_property_selection.kind ()
        kind &= unwSelf.location_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.connectedToComponent_property_selection, unwSelf.side_property_selection, unwSelf.location_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_BoardConnector_selectionDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.connectedToComponent_property.addEBObserver (self.selectionDisplay_property, postEvent: false)
    self.side_property.addEBObserver (self.selectionDisplay_property, postEvent: false)
    self.location_property.addEBObserver (self.selectionDisplay_property, postEvent: false)
    self.selectionDisplay_property.postEvent ()
  //--- Atomic property: signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.location_property_selection.kind ()
        kind &= unwSelf.isVia_property_selection.kind ()
        kind &= unwSelf.actualPadDiameter_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.location_property_selection, unwSelf.isVia_property_selection, unwSelf.actualPadDiameter_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_BoardConnector_signatureForERCChecking (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.location_property.addEBObserver (self.signatureForERCChecking_property, postEvent: false)
    self.isVia_property.addEBObserver (self.signatureForERCChecking_property, postEvent: false)
    self.actualPadDiameter_property.addEBObserver (self.signatureForERCChecking_property, postEvent: false)
    self.signatureForERCChecking_property.postEvent ()
  //--- Install undoers and opposite setter for relationships
    self.mTracksP2_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mConnectorP2_property.setProp (me) } },
      resetter: { inObject in inObject.mConnectorP2_property.setProp (nil) }
    )
    self.mTracksP1_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mConnectorP1_property.setProp (me) } },
      resetter: { inObject in inObject.mConnectorP1_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
    operationQueue.waitUntilAllOperationsAreFinished ()
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mComponent_property.removeEBObserverOf_componentPadDictionary (self.location_property)
    self.mComponentPadName_property.removeEBObserver (self.location_property)
    self.mPadIndex_property.removeEBObserver (self.location_property)
    self.mX_property.removeEBObserver (self.location_property)
    self.mY_property.removeEBObserver (self.location_property)
    self.mComponent_property.removeEBObserverOf_padNetDictionary (self.netNameFromComponentPad_property)
    self.mComponentPadName_property.removeEBObserver (self.netNameFromComponentPad_property)
    self.mComponent_property.removeEBObserverOf_padNetDictionary (self.netNameAndPadLocation_property)
    self.mComponentPadName_property.removeEBObserver (self.netNameAndPadLocation_property)
    self.location_property.removeEBObserver (self.netNameAndPadLocation_property)
    self.mComponent_property.removeEBObserverOf_componentName (self.netNameAndPadLocation_property)
    self.mComponent_property.removeEBObserverOf_componentPadDictionary (self.side_property)
    self.mComponentPadName_property.removeEBObserver (self.side_property)
    self.mPadIndex_property.removeEBObserver (self.side_property)
    self.mTracksP1_property.removeEBObserverOf_mSide (self.side_property)
    self.mTracksP2_property.removeEBObserverOf_mSide (self.side_property)
    self.mTracksP1_property.removeEBObserverOf_mSide (self.isVia_property)
    self.mTracksP2_property.removeEBObserverOf_mSide (self.isVia_property)
    self.mComponent_property.removeEBObserver (self.isVia_property)
    self.location_property.removeEBObserver (self.issues_property)
    self.mComponent_property.removeEBObserver (self.issues_property)
    self.mComponentPadName_property.removeEBObserver (self.issues_property)
    self.mTracksP1_property.removeEBObserver (self.issues_property)
    self.mTracksP2_property.removeEBObserver (self.issues_property)
    self.errorOrWarningIssueSize_property.removeEBObserver (self.issues_property)
    self.mComponent_property.removeEBObserverOf_padNetDictionary (self.issues_property)
    self.mTracksP1_property.removeEBObserverOf_netClassViaHoleDiameter (self.viaDefaultHoleDiameter_property)
    self.mTracksP2_property.removeEBObserverOf_netClassViaHoleDiameter (self.viaDefaultHoleDiameter_property)
    self.mTracksP1_property.removeEBObserverOf_netClassViaPadDiameter (self.viaDefaultPadDiameter_property)
    self.mTracksP2_property.removeEBObserverOf_netClassViaPadDiameter (self.viaDefaultPadDiameter_property)
    self.mTracksP1_property.removeEBObserverOf_netName (self.netNameFromTracks_property)
    self.mTracksP2_property.removeEBObserverOf_netName (self.netNameFromTracks_property)
    self.mTracksP1_property.removeEBObserverOf_netClassName (self.netClassName_property)
    self.mTracksP2_property.removeEBObserverOf_netClassName (self.netClassName_property)
    self.mComponent_property.removeEBObserver (self.connectedToComponent_property)
    self.viaDefaultHoleDiameter_property.removeEBObserver (self.actualHoleDiameter_property)
    self.mUsesCustomHoleDiameter_property.removeEBObserver (self.actualHoleDiameter_property)
    self.mCustomHoleDiameter_property.removeEBObserver (self.actualHoleDiameter_property)
    self.viaDefaultPadDiameter_property.removeEBObserver (self.actualPadDiameter_property)
    self.mUsesCustomPadDiameter_property.removeEBObserver (self.actualPadDiameter_property)
    self.mCustomPadDiameter_property.removeEBObserver (self.actualPadDiameter_property)
    self.connectedToComponent_property.removeEBObserver (self.objectDisplay_property)
    self.side_property.removeEBObserver (self.objectDisplay_property)
    self.location_property.removeEBObserver (self.objectDisplay_property)
    self.actualHoleDiameter_property.removeEBObserver (self.objectDisplay_property)
    self.actualPadDiameter_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSidePadColorForBoard_property.removeEBObserver (self.objectDisplay_property)
    self.connectedToComponent_property.removeEBObserver (self.selectionDisplay_property)
    self.side_property.removeEBObserver (self.selectionDisplay_property)
    self.location_property.removeEBObserver (self.selectionDisplay_property)
    self.location_property.removeEBObserver (self.signatureForERCChecking_property)
    self.isVia_property.removeEBObserver (self.signatureForERCChecking_property)
    self.actualPadDiameter_property.removeEBObserver (self.signatureForERCChecking_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mComponentPadName",
      idx: self.mComponentPadName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mComponentPadName_property.mObserverExplorer,
      valueExplorer: &self.mComponentPadName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPadIndex",
      idx: self.mPadIndex_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mPadIndex_property.mObserverExplorer,
      valueExplorer: &self.mPadIndex_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mX",
      idx: self.mX_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mX_property.mObserverExplorer,
      valueExplorer: &self.mX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mY",
      idx: self.mY_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mY_property.mObserverExplorer,
      valueExplorer: &self.mY_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDefaultHoleDiameterUnit",
      idx: self.mDefaultHoleDiameterUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDefaultHoleDiameterUnit_property.mObserverExplorer,
      valueExplorer: &self.mDefaultHoleDiameterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mCustomHoleDiameter",
      idx: self.mCustomHoleDiameter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCustomHoleDiameter_property.mObserverExplorer,
      valueExplorer: &self.mCustomHoleDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mCustomHoleDiameterUnit",
      idx: self.mCustomHoleDiameterUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCustomHoleDiameterUnit_property.mObserverExplorer,
      valueExplorer: &self.mCustomHoleDiameterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mUsesCustomHoleDiameter",
      idx: self.mUsesCustomHoleDiameter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mUsesCustomHoleDiameter_property.mObserverExplorer,
      valueExplorer: &self.mUsesCustomHoleDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDefaultPadDiameterUnit",
      idx: self.mDefaultPadDiameterUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDefaultPadDiameterUnit_property.mObserverExplorer,
      valueExplorer: &self.mDefaultPadDiameterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mCustomPadDiameter",
      idx: self.mCustomPadDiameter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCustomPadDiameter_property.mObserverExplorer,
      valueExplorer: &self.mCustomPadDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mCustomPadDiameterUnit",
      idx: self.mCustomPadDiameterUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCustomPadDiameterUnit_property.mObserverExplorer,
      valueExplorer: &self.mCustomPadDiameterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mUsesCustomPadDiameter",
      idx: self.mUsesCustomPadDiameter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mUsesCustomPadDiameter_property.mObserverExplorer,
      valueExplorer: &self.mUsesCustomPadDiameter_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "location",
      idx: self.location_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.location_property.mObserverExplorer,
      valueExplorer: &self.location_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netNameFromComponentPad",
      idx: self.netNameFromComponentPad_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netNameFromComponentPad_property.mObserverExplorer,
      valueExplorer: &self.netNameFromComponentPad_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netNameAndPadLocation",
      idx: self.netNameAndPadLocation_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netNameAndPadLocation_property.mObserverExplorer,
      valueExplorer: &self.netNameAndPadLocation_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "side",
      idx: self.side_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.side_property.mObserverExplorer,
      valueExplorer: &self.side_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "isVia",
      idx: self.isVia_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.isVia_property.mObserverExplorer,
      valueExplorer: &self.isVia_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx: self.issues_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.issues_property.mObserverExplorer,
      valueExplorer: &self.issues_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viaDefaultHoleDiameter",
      idx: self.viaDefaultHoleDiameter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.viaDefaultHoleDiameter_property.mObserverExplorer,
      valueExplorer: &self.viaDefaultHoleDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viaDefaultPadDiameter",
      idx: self.viaDefaultPadDiameter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.viaDefaultPadDiameter_property.mObserverExplorer,
      valueExplorer: &self.viaDefaultPadDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netNameFromTracks",
      idx: self.netNameFromTracks_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netNameFromTracks_property.mObserverExplorer,
      valueExplorer: &self.netNameFromTracks_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netClassName",
      idx: self.netClassName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netClassName_property.mObserverExplorer,
      valueExplorer: &self.netClassName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "connectedToComponent",
      idx: self.connectedToComponent_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.connectedToComponent_property.mObserverExplorer,
      valueExplorer: &self.connectedToComponent_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "actualHoleDiameter",
      idx: self.actualHoleDiameter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.actualHoleDiameter_property.mObserverExplorer,
      valueExplorer: &self.actualHoleDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "actualPadDiameter",
      idx: self.actualPadDiameter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.actualPadDiameter_property.mObserverExplorer,
      valueExplorer: &self.actualPadDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx: self.objectDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.objectDisplay_property.mObserverExplorer,
      valueExplorer: &self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx: self.selectionDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
      valueExplorer: &self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "signatureForERCChecking",
      idx: self.signatureForERCChecking_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.signatureForERCChecking_property.mObserverExplorer,
      valueExplorer: &self.signatureForERCChecking_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "mTracksP2",
      idx:mTracksP2_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mTracksP2_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mTracksP1",
      idx:mTracksP1_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mTracksP1_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "mComponent",
      idx:self.mComponent_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mComponent_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mComponentPadName
    self.mComponentPadName_property.mObserverExplorer = nil
    self.mComponentPadName_property.mValueExplorer = nil
  //--- Atomic property: mPadIndex
    self.mPadIndex_property.mObserverExplorer = nil
    self.mPadIndex_property.mValueExplorer = nil
  //--- Atomic property: mX
    self.mX_property.mObserverExplorer = nil
    self.mX_property.mValueExplorer = nil
  //--- Atomic property: mY
    self.mY_property.mObserverExplorer = nil
    self.mY_property.mValueExplorer = nil
  //--- To many property: mTracksP2
    self.mTracksP2_property.mValueExplorer = nil
  //--- Atomic property: mDefaultHoleDiameterUnit
    self.mDefaultHoleDiameterUnit_property.mObserverExplorer = nil
    self.mDefaultHoleDiameterUnit_property.mValueExplorer = nil
  //--- Atomic property: mCustomHoleDiameter
    self.mCustomHoleDiameter_property.mObserverExplorer = nil
    self.mCustomHoleDiameter_property.mValueExplorer = nil
  //--- Atomic property: mCustomHoleDiameterUnit
    self.mCustomHoleDiameterUnit_property.mObserverExplorer = nil
    self.mCustomHoleDiameterUnit_property.mValueExplorer = nil
  //--- Atomic property: mUsesCustomHoleDiameter
    self.mUsesCustomHoleDiameter_property.mObserverExplorer = nil
    self.mUsesCustomHoleDiameter_property.mValueExplorer = nil
  //--- Atomic property: mDefaultPadDiameterUnit
    self.mDefaultPadDiameterUnit_property.mObserverExplorer = nil
    self.mDefaultPadDiameterUnit_property.mValueExplorer = nil
  //--- Atomic property: mCustomPadDiameter
    self.mCustomPadDiameter_property.mObserverExplorer = nil
    self.mCustomPadDiameter_property.mValueExplorer = nil
  //--- Atomic property: mCustomPadDiameterUnit
    self.mCustomPadDiameterUnit_property.mObserverExplorer = nil
    self.mCustomPadDiameterUnit_property.mValueExplorer = nil
  //--- Atomic property: mUsesCustomPadDiameter
    self.mUsesCustomPadDiameter_property.mObserverExplorer = nil
    self.mUsesCustomPadDiameter_property.mValueExplorer = nil
  //--- To many property: mTracksP1
    self.mTracksP1_property.mValueExplorer = nil
  //--- To one property: mComponent
    self.mComponent_property.mObserverExplorer = nil
    self.mComponent_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mTracksP2 = []
    self.mTracksP1 = []
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mComponent = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mComponentPadName
    self.mComponentPadName_property.storeIn (dictionary: ioDictionary, forKey:"mComponentPadName")
  //--- Atomic property: mPadIndex
    self.mPadIndex_property.storeIn (dictionary: ioDictionary, forKey:"mPadIndex")
  //--- Atomic property: mX
    self.mX_property.storeIn (dictionary: ioDictionary, forKey:"mX")
  //--- Atomic property: mY
    self.mY_property.storeIn (dictionary: ioDictionary, forKey:"mY")
  //--- To many property: mTracksP2
    self.store (
      managedObjectArray: self.mTracksP2_property.propval,
      relationshipName: "mTracksP2",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: mDefaultHoleDiameterUnit
    self.mDefaultHoleDiameterUnit_property.storeIn (dictionary: ioDictionary, forKey:"mDefaultHoleDiameterUnit")
  //--- Atomic property: mCustomHoleDiameter
    self.mCustomHoleDiameter_property.storeIn (dictionary: ioDictionary, forKey:"mCustomHoleDiameter")
  //--- Atomic property: mCustomHoleDiameterUnit
    self.mCustomHoleDiameterUnit_property.storeIn (dictionary: ioDictionary, forKey:"mCustomHoleDiameterUnit")
  //--- Atomic property: mUsesCustomHoleDiameter
    self.mUsesCustomHoleDiameter_property.storeIn (dictionary: ioDictionary, forKey:"mUsesCustomHoleDiameter")
  //--- Atomic property: mDefaultPadDiameterUnit
    self.mDefaultPadDiameterUnit_property.storeIn (dictionary: ioDictionary, forKey:"mDefaultPadDiameterUnit")
  //--- Atomic property: mCustomPadDiameter
    self.mCustomPadDiameter_property.storeIn (dictionary: ioDictionary, forKey:"mCustomPadDiameter")
  //--- Atomic property: mCustomPadDiameterUnit
    self.mCustomPadDiameterUnit_property.storeIn (dictionary: ioDictionary, forKey:"mCustomPadDiameterUnit")
  //--- Atomic property: mUsesCustomPadDiameter
    self.mUsesCustomPadDiameter_property.storeIn (dictionary: ioDictionary, forKey:"mUsesCustomPadDiameter")
  //--- To many property: mTracksP1
    self.store (
      managedObjectArray: self.mTracksP1_property.propval,
      relationshipName: "mTracksP1",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mTracksP2
    self.mTracksP2_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mTracksP2",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardTrack])
  //--- To many property: mTracksP1
    self.mTracksP1_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mTracksP1",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardTrack])
  //--- To one property: mComponent
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mComponent",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? ComponentInProject {
        self.mComponent_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mComponentPadName
    self.mComponentPadName_property.readFrom (dictionary: inDictionary, forKey:"mComponentPadName")
  //--- Atomic property: mPadIndex
    self.mPadIndex_property.readFrom (dictionary: inDictionary, forKey:"mPadIndex")
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey:"mX")
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey:"mY")
  //--- Atomic property: mDefaultHoleDiameterUnit
    self.mDefaultHoleDiameterUnit_property.readFrom (dictionary: inDictionary, forKey:"mDefaultHoleDiameterUnit")
  //--- Atomic property: mCustomHoleDiameter
    self.mCustomHoleDiameter_property.readFrom (dictionary: inDictionary, forKey:"mCustomHoleDiameter")
  //--- Atomic property: mCustomHoleDiameterUnit
    self.mCustomHoleDiameterUnit_property.readFrom (dictionary: inDictionary, forKey:"mCustomHoleDiameterUnit")
  //--- Atomic property: mUsesCustomHoleDiameter
    self.mUsesCustomHoleDiameter_property.readFrom (dictionary: inDictionary, forKey:"mUsesCustomHoleDiameter")
  //--- Atomic property: mDefaultPadDiameterUnit
    self.mDefaultPadDiameterUnit_property.readFrom (dictionary: inDictionary, forKey:"mDefaultPadDiameterUnit")
  //--- Atomic property: mCustomPadDiameter
    self.mCustomPadDiameter_property.readFrom (dictionary: inDictionary, forKey:"mCustomPadDiameter")
  //--- Atomic property: mCustomPadDiameterUnit
    self.mCustomPadDiameterUnit_property.readFrom (dictionary: inDictionary, forKey:"mCustomPadDiameterUnit")
  //--- Atomic property: mUsesCustomPadDiameter
    self.mUsesCustomPadDiameter_property.readFrom (dictionary: inDictionary, forKey:"mUsesCustomPadDiameter")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mTracksP2
    for managedObject in self.mTracksP2 {
      objects.append (managedObject)
    }
  //--- To many property: mTracksP1
    for managedObject in self.mTracksP1 {
      objects.append (managedObject)
    }
  //--- To one property: mComponent
    if let object = self.mComponent {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mTracksP2
    for managedObject in self.mTracksP2 {
      objects.append (managedObject)
    }
  //--- To many property: mTracksP1
    for managedObject in self.mTracksP1 {
      objects.append (managedObject)
    }
  //--- To one property: mComponent
    if let object = self.mComponent {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

