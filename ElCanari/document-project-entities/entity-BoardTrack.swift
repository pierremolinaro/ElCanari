//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

//--- START OF USER ZONE 1

let BOARD_TRACK_P1  = 0
let BOARD_TRACK_P2  = 1

//--- END OF USER ZONE 1
//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_mSide : AnyObject {
  var mSide : TrackSide { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_mDefaultTrackWidthUnit : AnyObject {
  var mDefaultTrackWidthUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_mCustomTrackWidth : AnyObject {
  var mCustomTrackWidth : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_mCustomTrackWidthUnit : AnyObject {
  var mCustomTrackWidthUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_mUsesCustomTrackWidth : AnyObject {
  var mUsesCustomTrackWidth : Bool { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_mIsPreservedByAutoRouter : AnyObject {
  var mIsPreservedByAutoRouter : Bool { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_mP1XUnit : AnyObject {
  var mP1XUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_mP1YUnit : AnyObject {
  var mP1YUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_mP2XUnit : AnyObject {
  var mP2XUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_mP2YUnit : AnyObject {
  var mP2YUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_mManualLockP1 : AnyObject {
  var mManualLockP1 : Bool { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_mManualLockP2 : AnyObject {
  var mManualLockP2 : Bool { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_mDirectionLockOnKnobDragging : AnyObject {
  var mDirectionLockOnKnobDragging : TrackLockDirection { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_actualTrackWidth : AnyObject {
  var actualTrackWidth : Int? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_netName : AnyObject {
  var netName : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_netClassName : AnyObject {
  var netClassName : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_netClassTrackWidth : AnyObject {
  var netClassTrackWidth : Int? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_netClassViaHoleDiameter : AnyObject {
  var netClassViaHoleDiameter : Int? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_netClassViaPadDiameter : AnyObject {
  var netClassViaPadDiameter : Int? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_trackLengthInCanariUnit : AnyObject {
  var trackLengthInCanariUnit : Double? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_signatureForERCChecking : AnyObject {
  var signatureForERCChecking : UInt32? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_p1ConnectedToSomePad : AnyObject {
  var p1ConnectedToSomePad : Bool? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_p2ConnectedToSomePad : AnyObject {
  var p2ConnectedToSomePad : Bool? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_objectDisplay : AnyObject {
  var objectDisplay : EBShape? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_p1CanMove : AnyObject {
  var p1CanMove : Bool? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_p2CanMove : AnyObject {
  var p2CanMove : Bool? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_trackCanRotate : AnyObject {
  var trackCanRotate : Bool? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_selectionDisplay : AnyObject {
  var selectionDisplay : EBShape? { get }
}

//----------------------------------------------------------------------------------------------------------------------
//    Entity: BoardTrack
//----------------------------------------------------------------------------------------------------------------------

final class BoardTrack : BoardObject,
         BoardTrack_mSide,
         BoardTrack_mDefaultTrackWidthUnit,
         BoardTrack_mCustomTrackWidth,
         BoardTrack_mCustomTrackWidthUnit,
         BoardTrack_mUsesCustomTrackWidth,
         BoardTrack_mIsPreservedByAutoRouter,
         BoardTrack_mP1XUnit,
         BoardTrack_mP1YUnit,
         BoardTrack_mP2XUnit,
         BoardTrack_mP2YUnit,
         BoardTrack_mManualLockP1,
         BoardTrack_mManualLockP2,
         BoardTrack_mDirectionLockOnKnobDragging,
         BoardTrack_actualTrackWidth,
         BoardTrack_netName,
         BoardTrack_netClassName,
         BoardTrack_netClassTrackWidth,
         BoardTrack_netClassViaHoleDiameter,
         BoardTrack_netClassViaPadDiameter,
         BoardTrack_trackLengthInCanariUnit,
         BoardTrack_signatureForERCChecking,
         BoardTrack_p1ConnectedToSomePad,
         BoardTrack_p2ConnectedToSomePad,
         BoardTrack_objectDisplay,
         BoardTrack_p1CanMove,
         BoardTrack_p2CanMove,
         BoardTrack_trackCanRotate,
         BoardTrack_selectionDisplay {

  //····················································································································
  //   Atomic property: mSide
  //····················································································································

  final let mSide_property : EBStoredProperty_TrackSide

  //····················································································································

  final func reset_mSide_toDefaultValue () {
    self.mSide = TrackSide.front
  }

  //····················································································································

  final var mSide : TrackSide {
    get { return self.mSide_property.propval }
    set { self.mSide_property.setProp (newValue) }
  }

  //····················································································································

  final var mSide_property_selection : EBSelection <TrackSide> { return self.mSide_property.selection }

  //····················································································································
  //   Atomic property: mDefaultTrackWidthUnit
  //····················································································································

  final let mDefaultTrackWidthUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mDefaultTrackWidthUnit_toDefaultValue () {
    self.mDefaultTrackWidthUnit = 2286
  }

  //····················································································································

  final var mDefaultTrackWidthUnit : Int {
    get { return self.mDefaultTrackWidthUnit_property.propval }
    set { self.mDefaultTrackWidthUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var mDefaultTrackWidthUnit_property_selection : EBSelection <Int> { return self.mDefaultTrackWidthUnit_property.selection }

  //····················································································································
  //   Atomic property: mCustomTrackWidth
  //····················································································································

  final let mCustomTrackWidth_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCustomTrackWidth_toDefaultValue () {
    self.mCustomTrackWidth = 45720
  }

  //····················································································································

  final var mCustomTrackWidth : Int {
    get { return self.mCustomTrackWidth_property.propval }
    set { self.mCustomTrackWidth_property.setProp (newValue) }
  }

  //····················································································································

  final var mCustomTrackWidth_property_selection : EBSelection <Int> { return self.mCustomTrackWidth_property.selection }

  //····················································································································
  //   Atomic property: mCustomTrackWidthUnit
  //····················································································································

  final let mCustomTrackWidthUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mCustomTrackWidthUnit_toDefaultValue () {
    self.mCustomTrackWidthUnit = 2286
  }

  //····················································································································

  final var mCustomTrackWidthUnit : Int {
    get { return self.mCustomTrackWidthUnit_property.propval }
    set { self.mCustomTrackWidthUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var mCustomTrackWidthUnit_property_selection : EBSelection <Int> { return self.mCustomTrackWidthUnit_property.selection }

  //····················································································································
  //   Atomic property: mUsesCustomTrackWidth
  //····················································································································

  final let mUsesCustomTrackWidth_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mUsesCustomTrackWidth_toDefaultValue () {
    self.mUsesCustomTrackWidth = false
  }

  //····················································································································

  final var mUsesCustomTrackWidth : Bool {
    get { return self.mUsesCustomTrackWidth_property.propval }
    set { self.mUsesCustomTrackWidth_property.setProp (newValue) }
  }

  //····················································································································

  final var mUsesCustomTrackWidth_property_selection : EBSelection <Bool> { return self.mUsesCustomTrackWidth_property.selection }

  //····················································································································
  //   Atomic property: mIsPreservedByAutoRouter
  //····················································································································

  final let mIsPreservedByAutoRouter_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mIsPreservedByAutoRouter_toDefaultValue () {
    self.mIsPreservedByAutoRouter = false
  }

  //····················································································································

  final var mIsPreservedByAutoRouter : Bool {
    get { return self.mIsPreservedByAutoRouter_property.propval }
    set { self.mIsPreservedByAutoRouter_property.setProp (newValue) }
  }

  //····················································································································

  final var mIsPreservedByAutoRouter_property_selection : EBSelection <Bool> { return self.mIsPreservedByAutoRouter_property.selection }

  //····················································································································
  //   Atomic property: mP1XUnit
  //····················································································································

  final let mP1XUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mP1XUnit_toDefaultValue () {
    self.mP1XUnit = 2286
  }

  //····················································································································

  final var mP1XUnit : Int {
    get { return self.mP1XUnit_property.propval }
    set { self.mP1XUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var mP1XUnit_property_selection : EBSelection <Int> { return self.mP1XUnit_property.selection }

  //····················································································································
  //   Atomic property: mP1YUnit
  //····················································································································

  final let mP1YUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mP1YUnit_toDefaultValue () {
    self.mP1YUnit = 2286
  }

  //····················································································································

  final var mP1YUnit : Int {
    get { return self.mP1YUnit_property.propval }
    set { self.mP1YUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var mP1YUnit_property_selection : EBSelection <Int> { return self.mP1YUnit_property.selection }

  //····················································································································
  //   Atomic property: mP2XUnit
  //····················································································································

  final let mP2XUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mP2XUnit_toDefaultValue () {
    self.mP2XUnit = 2286
  }

  //····················································································································

  final var mP2XUnit : Int {
    get { return self.mP2XUnit_property.propval }
    set { self.mP2XUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var mP2XUnit_property_selection : EBSelection <Int> { return self.mP2XUnit_property.selection }

  //····················································································································
  //   Atomic property: mP2YUnit
  //····················································································································

  final let mP2YUnit_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mP2YUnit_toDefaultValue () {
    self.mP2YUnit = 2286
  }

  //····················································································································

  final var mP2YUnit : Int {
    get { return self.mP2YUnit_property.propval }
    set { self.mP2YUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var mP2YUnit_property_selection : EBSelection <Int> { return self.mP2YUnit_property.selection }

  //····················································································································
  //   Atomic property: mManualLockP1
  //····················································································································

  final let mManualLockP1_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mManualLockP1_toDefaultValue () {
    self.mManualLockP1 = false
  }

  //····················································································································

  final var mManualLockP1 : Bool {
    get { return self.mManualLockP1_property.propval }
    set { self.mManualLockP1_property.setProp (newValue) }
  }

  //····················································································································

  final var mManualLockP1_property_selection : EBSelection <Bool> { return self.mManualLockP1_property.selection }

  //····················································································································
  //   Atomic property: mManualLockP2
  //····················································································································

  final let mManualLockP2_property : EBStoredProperty_Bool

  //····················································································································

  final func reset_mManualLockP2_toDefaultValue () {
    self.mManualLockP2 = false
  }

  //····················································································································

  final var mManualLockP2 : Bool {
    get { return self.mManualLockP2_property.propval }
    set { self.mManualLockP2_property.setProp (newValue) }
  }

  //····················································································································

  final var mManualLockP2_property_selection : EBSelection <Bool> { return self.mManualLockP2_property.selection }

  //····················································································································
  //   Atomic property: mDirectionLockOnKnobDragging
  //····················································································································

  final let mDirectionLockOnKnobDragging_property : EBStoredProperty_TrackLockDirection

  //····················································································································

  final func reset_mDirectionLockOnKnobDragging_toDefaultValue () {
    self.mDirectionLockOnKnobDragging = TrackLockDirection.unlocked
  }

  //····················································································································

  final var mDirectionLockOnKnobDragging : TrackLockDirection {
    get { return self.mDirectionLockOnKnobDragging_property.propval }
    set { self.mDirectionLockOnKnobDragging_property.setProp (newValue) }
  }

  //····················································································································

  final var mDirectionLockOnKnobDragging_property_selection : EBSelection <TrackLockDirection> { return self.mDirectionLockOnKnobDragging_property.selection }

  //····················································································································
  //   To one property: mConnectorP1
  //····················································································································

  final let mConnectorP1_property = StoredObject_BoardConnector (usedForSignature: false)

  //····················································································································

  final var mConnectorP1_property_selection : EBSelection <BoardConnector?> {
    return .single (self.mConnectorP1_property.propval)
  }

  //····················································································································

  final var mConnectorP1 : BoardConnector? {
    get {
      return self.mConnectorP1_property.propval
    }
    set {
      if self.mConnectorP1_property.propval != nil {
        self.mConnectorP1_property.setProp (nil)
      }
      if newValue != nil {
        self.mConnectorP1_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  final var mConnectorP1_none : StoredObject_BoardConnector { return self.mConnectorP1_property }

  //····················································································································

  final var mConnectorP1_none_selection : EBSelection <Bool> {
    return .single (self.mConnectorP1_property.propval == nil)
  }

  //····················································································································
  //   To one property: mConnectorP2
  //····················································································································

  final let mConnectorP2_property = StoredObject_BoardConnector (usedForSignature: false)

  //····················································································································

  final var mConnectorP2_property_selection : EBSelection <BoardConnector?> {
    return .single (self.mConnectorP2_property.propval)
  }

  //····················································································································

  final var mConnectorP2 : BoardConnector? {
    get {
      return self.mConnectorP2_property.propval
    }
    set {
      if self.mConnectorP2_property.propval != nil {
        self.mConnectorP2_property.setProp (nil)
      }
      if newValue != nil {
        self.mConnectorP2_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  final var mConnectorP2_none : StoredObject_BoardConnector { return self.mConnectorP2_property }

  //····················································································································

  final var mConnectorP2_none_selection : EBSelection <Bool> {
    return .single (self.mConnectorP2_property.propval == nil)
  }

  //····················································································································
  //   To one property: mNet
  //····················································································································

  final let mNet_property = StoredObject_NetInProject (usedForSignature: false)

  //····················································································································

  final var mNet_property_selection : EBSelection <NetInProject?> {
    return .single (self.mNet_property.propval)
  }

  //····················································································································

  final var mNet : NetInProject? {
    get {
      return self.mNet_property.propval
    }
    set {
      if self.mNet_property.propval != nil {
        self.mNet_property.setProp (nil)
      }
      if newValue != nil {
        self.mNet_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  final var mNet_none : StoredObject_NetInProject { return self.mNet_property }

  //····················································································································

  final var mNet_none_selection : EBSelection <Bool> {
    return .single (self.mNet_property.propval == nil)
  }

  //····················································································································
  //   Transient property: actualTrackWidth
  //····················································································································

  final let actualTrackWidth_property = EBTransientProperty_Int ()

  //····················································································································

  final var actualTrackWidth_property_selection : EBSelection <Int> {
    return self.actualTrackWidth_property.selection
  }

  //····················································································································

  final var actualTrackWidth : Int? {
    switch self.actualTrackWidth_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netName
  //····················································································································

  final let netName_property = EBTransientProperty_String ()

  //····················································································································

  final var netName_property_selection : EBSelection <String> {
    return self.netName_property.selection
  }

  //····················································································································

  final var netName : String? {
    switch self.netName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netClassName
  //····················································································································

  final let netClassName_property = EBTransientProperty_String ()

  //····················································································································

  final var netClassName_property_selection : EBSelection <String> {
    return self.netClassName_property.selection
  }

  //····················································································································

  final var netClassName : String? {
    switch self.netClassName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netClassTrackWidth
  //····················································································································

  final let netClassTrackWidth_property = EBTransientProperty_Int ()

  //····················································································································

  final var netClassTrackWidth_property_selection : EBSelection <Int> {
    return self.netClassTrackWidth_property.selection
  }

  //····················································································································

  final var netClassTrackWidth : Int? {
    switch self.netClassTrackWidth_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netClassViaHoleDiameter
  //····················································································································

  final let netClassViaHoleDiameter_property = EBTransientProperty_Int ()

  //····················································································································

  final var netClassViaHoleDiameter_property_selection : EBSelection <Int> {
    return self.netClassViaHoleDiameter_property.selection
  }

  //····················································································································

  final var netClassViaHoleDiameter : Int? {
    switch self.netClassViaHoleDiameter_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netClassViaPadDiameter
  //····················································································································

  final let netClassViaPadDiameter_property = EBTransientProperty_Int ()

  //····················································································································

  final var netClassViaPadDiameter_property_selection : EBSelection <Int> {
    return self.netClassViaPadDiameter_property.selection
  }

  //····················································································································

  final var netClassViaPadDiameter : Int? {
    switch self.netClassViaPadDiameter_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: trackDirectionInDegrees
  //····················································································································

  final let trackDirectionInDegrees_property = EBComputedProperty_Int ()

  //····················································································································

  final var trackDirectionInDegrees_property_selection : EBSelection <Int> {
    return self.trackDirectionInDegrees_property.selection
  }

  //····················································································································

  final var trackDirectionInDegrees : Int? {
    switch self.trackDirectionInDegrees_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: p1ConnectedToSomePad
  //····················································································································

  final let p1ConnectedToSomePad_property = EBTransientProperty_Bool ()

  //····················································································································

  final var p1ConnectedToSomePad_property_selection : EBSelection <Bool> {
    return self.p1ConnectedToSomePad_property.selection
  }

  //····················································································································

  final var p1ConnectedToSomePad : Bool? {
    switch self.p1ConnectedToSomePad_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: p2ConnectedToSomePad
  //····················································································································

  final let p2ConnectedToSomePad_property = EBTransientProperty_Bool ()

  //····················································································································

  final var p2ConnectedToSomePad_property_selection : EBSelection <Bool> {
    return self.p2ConnectedToSomePad_property.selection
  }

  //····················································································································

  final var p2ConnectedToSomePad : Bool? {
    switch self.p2ConnectedToSomePad_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: computedP1X
  //····················································································································

  final let computedP1X_property = EBComputedProperty_Int ()

  //····················································································································

  final var computedP1X_property_selection : EBSelection <Int> {
    return self.computedP1X_property.selection
  }

  //····················································································································

  final var computedP1X : Int? {
    switch self.computedP1X_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: computedP1Y
  //····················································································································

  final let computedP1Y_property = EBComputedProperty_Int ()

  //····················································································································

  final var computedP1Y_property_selection : EBSelection <Int> {
    return self.computedP1Y_property.selection
  }

  //····················································································································

  final var computedP1Y : Int? {
    switch self.computedP1Y_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: computedP2X
  //····················································································································

  final let computedP2X_property = EBComputedProperty_Int ()

  //····················································································································

  final var computedP2X_property_selection : EBSelection <Int> {
    return self.computedP2X_property.selection
  }

  //····················································································································

  final var computedP2X : Int? {
    switch self.computedP2X_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: computedP2Y
  //····················································································································

  final let computedP2Y_property = EBComputedProperty_Int ()

  //····················································································································

  final var computedP2Y_property_selection : EBSelection <Int> {
    return self.computedP2Y_property.selection
  }

  //····················································································································

  final var computedP2Y : Int? {
    switch self.computedP2Y_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: p1CanMove
  //····················································································································

  final let p1CanMove_property = EBTransientProperty_Bool ()

  //····················································································································

  final var p1CanMove_property_selection : EBSelection <Bool> {
    return self.p1CanMove_property.selection
  }

  //····················································································································

  final var p1CanMove : Bool? {
    switch self.p1CanMove_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: p2CanMove
  //····················································································································

  final let p2CanMove_property = EBTransientProperty_Bool ()

  //····················································································································

  final var p2CanMove_property_selection : EBSelection <Bool> {
    return self.p2CanMove_property.selection
  }

  //····················································································································

  final var p2CanMove : Bool? {
    switch self.p2CanMove_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: trackCanRotate
  //····················································································································

  final let trackCanRotate_property = EBTransientProperty_Bool ()

  //····················································································································

  final var trackCanRotate_property_selection : EBSelection <Bool> {
    return self.trackCanRotate_property.selection
  }

  //····················································································································

  final var trackCanRotate : Bool? {
    switch self.trackCanRotate_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.mSide_property = EBStoredProperty_TrackSide (defaultValue: TrackSide.front, undoManager: ebUndoManager)
    self.mDefaultTrackWidthUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mCustomTrackWidth_property = EBStoredProperty_Int (defaultValue: 45720, undoManager: ebUndoManager)
    self.mCustomTrackWidthUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mUsesCustomTrackWidth_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.mIsPreservedByAutoRouter_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.mP1XUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mP1YUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mP2XUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mP2YUnit_property = EBStoredProperty_Int (defaultValue: 2286, undoManager: ebUndoManager)
    self.mManualLockP1_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.mManualLockP2_property = EBStoredProperty_Bool (defaultValue: false, undoManager: ebUndoManager)
    self.mDirectionLockOnKnobDragging_property = EBStoredProperty_TrackLockDirection (defaultValue: TrackLockDirection.unlocked, undoManager: ebUndoManager)
    super.init (ebUndoManager)
  //--- To one property: mConnectorP1 (has opposite to many relationship: mTracksP1)
    self.mConnectorP1_property.ebUndoManager = self.ebUndoManager
    self.mConnectorP1_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mTracksP1_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mTracksP1_property.remove (me) } }
    )
  //--- To one property: mConnectorP2 (has opposite to many relationship: mTracksP2)
    self.mConnectorP2_property.ebUndoManager = self.ebUndoManager
    self.mConnectorP2_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mTracksP2_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mTracksP2_property.remove (me) } }
    )
  //--- To one property: mNet (has opposite to many relationship: mTracks)
    self.mNet_property.ebUndoManager = self.ebUndoManager
    self.mNet_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mTracks_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mTracks_property.remove (me) } }
    )
  //--- Atomic property: actualTrackWidth
    self.actualTrackWidth_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mNet_property.netClassTrackWidth_property_selection.kind ()
        kind &= unwSelf.mUsesCustomTrackWidth_property_selection.kind ()
        kind &= unwSelf.mCustomTrackWidth_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNet_property.netClassTrackWidth_property_selection, unwSelf.mUsesCustomTrackWidth_property_selection, unwSelf.mCustomTrackWidth_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_BoardTrack_actualTrackWidth (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.addEBObserverOf_netClassTrackWidth (self.actualTrackWidth_property)
    self.mUsesCustomTrackWidth_property.addEBObserver (self.actualTrackWidth_property)
    self.mCustomTrackWidth_property.addEBObserver (self.actualTrackWidth_property)
  //--- Atomic property: netName
    self.netName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNet_property.mNetName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNet_property.mNetName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardTrack_netName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.addEBObserverOf_mNetName (self.netName_property)
  //--- Atomic property: netClassName
    self.netClassName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNet_property.netClassName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNet_property.netClassName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardTrack_netClassName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.addEBObserverOf_netClassName (self.netClassName_property)
  //--- Atomic property: netClassTrackWidth
    self.netClassTrackWidth_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNet_property.netClassTrackWidth_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNet_property.netClassTrackWidth_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardTrack_netClassTrackWidth (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.addEBObserverOf_netClassTrackWidth (self.netClassTrackWidth_property)
  //--- Atomic property: netClassViaHoleDiameter
    self.netClassViaHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNet_property.netClassViaHoleDiameter_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNet_property.netClassViaHoleDiameter_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardTrack_netClassViaHoleDiameter (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.addEBObserverOf_netClassViaHoleDiameter (self.netClassViaHoleDiameter_property)
  //--- Atomic property: netClassViaPadDiameter
    self.netClassViaPadDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNet_property.netClassViaPadDiameter_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNet_property.netClassViaPadDiameter_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardTrack_netClassViaPadDiameter (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.addEBObserverOf_netClassViaPadDiameter (self.netClassViaPadDiameter_property)
  //--- Atomic property: trackLengthInCanariUnit
    self.trackLengthInCanariUnit_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mConnectorP1_property.location_property_selection.kind ()
        kind &= unwSelf.mConnectorP2_property.location_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mConnectorP1_property.location_property_selection, unwSelf.mConnectorP2_property.location_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_BoardTrack_trackLengthInCanariUnit (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mConnectorP1_property.addEBObserverOf_location (self.trackLengthInCanariUnit_property)
    self.mConnectorP2_property.addEBObserverOf_location (self.trackLengthInCanariUnit_property)
  //--- Atomic property: signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mSide_property_selection.kind ()
        kind &= unwSelf.actualTrackWidth_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSide_property_selection, unwSelf.actualTrackWidth_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_BoardTrack_signatureForERCChecking (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSide_property.addEBObserver (self.signatureForERCChecking_property)
    self.actualTrackWidth_property.addEBObserver (self.signatureForERCChecking_property)
  //--- Computed property: trackDirectionInDegrees
    self.trackDirectionInDegrees_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mConnectorP1_property.location_property_selection.kind ()
        kind &= unwSelf.mConnectorP2_property.location_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mConnectorP1_property.location_property_selection, unwSelf.mConnectorP2_property.location_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (computed_BoardTrack_trackDirectionInDegrees (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.trackDirectionInDegrees_property.mStoreFunction = { [weak self] in self?.compute_trackDirectionInDegrees_property ($0, $1) ?? false }
    self.mConnectorP1_property.addEBObserverOf_location (self.trackDirectionInDegrees_property)
    self.mConnectorP2_property.addEBObserverOf_location (self.trackDirectionInDegrees_property)
  //--- Atomic property: p1ConnectedToSomePad
    self.p1ConnectedToSomePad_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mConnectorP1_property.isConnectedToSomePad_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mConnectorP1_property.isConnectedToSomePad_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardTrack_p1ConnectedToSomePad (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mConnectorP1_property.addEBObserverOf_isConnectedToSomePad (self.p1ConnectedToSomePad_property)
  //--- Atomic property: p2ConnectedToSomePad
    self.p2ConnectedToSomePad_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mConnectorP2_property.isConnectedToSomePad_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mConnectorP2_property.isConnectedToSomePad_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardTrack_p2ConnectedToSomePad (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mConnectorP2_property.addEBObserverOf_isConnectedToSomePad (self.p2ConnectedToSomePad_property)
  //--- Computed property: computedP1X
    self.computedP1X_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mConnectorP1_property.location_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mConnectorP1_property.location_property_selection) {
          case (.single (let v0)) :
            return .single (computed_BoardTrack_computedP1X (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.computedP1X_property.mStoreFunction = { [weak self] in self?.compute_computedP1X_property ($0, $1) ?? false }
    self.mConnectorP1_property.addEBObserverOf_location (self.computedP1X_property)
  //--- Computed property: computedP1Y
    self.computedP1Y_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mConnectorP1_property.location_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mConnectorP1_property.location_property_selection) {
          case (.single (let v0)) :
            return .single (computed_BoardTrack_computedP1Y (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.computedP1Y_property.mStoreFunction = { [weak self] in self?.compute_computedP1Y_property ($0, $1) ?? false }
    self.mConnectorP1_property.addEBObserverOf_location (self.computedP1Y_property)
  //--- Computed property: computedP2X
    self.computedP2X_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mConnectorP2_property.location_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mConnectorP2_property.location_property_selection) {
          case (.single (let v0)) :
            return .single (computed_BoardTrack_computedP2X (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.computedP2X_property.mStoreFunction = { [weak self] in self?.compute_computedP2X_property ($0, $1) ?? false }
    self.mConnectorP2_property.addEBObserverOf_location (self.computedP2X_property)
  //--- Computed property: computedP2Y
    self.computedP2Y_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mConnectorP2_property.location_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mConnectorP2_property.location_property_selection) {
          case (.single (let v0)) :
            return .single (computed_BoardTrack_computedP2Y (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.computedP2Y_property.mStoreFunction = { [weak self] in self?.compute_computedP2Y_property ($0, $1) ?? false }
    self.mConnectorP2_property.addEBObserverOf_location (self.computedP2Y_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mConnectorP1_property.location_property_selection.kind ()
        kind &= unwSelf.mConnectorP2_property.location_property_selection.kind ()
        kind &= preferences_displayFrontLayoutForBoard_property_selection.kind ()
        kind &= preferences_displayBackLayoutForBoard_property_selection.kind ()
        kind &= preferences_frontSideLayoutColorForBoard_property_selection.kind ()
        kind &= preferences_backSideLayoutColorForBoard_property_selection.kind ()
        kind &= unwSelf.actualTrackWidth_property_selection.kind ()
        kind &= unwSelf.mSide_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mConnectorP1_property.location_property_selection, unwSelf.mConnectorP2_property.location_property_selection, preferences_displayFrontLayoutForBoard_property_selection, preferences_displayBackLayoutForBoard_property_selection, preferences_frontSideLayoutColorForBoard_property_selection, preferences_backSideLayoutColorForBoard_property_selection, unwSelf.actualTrackWidth_property_selection, unwSelf.mSide_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (transient_BoardTrack_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mConnectorP1_property.addEBObserverOf_location (self.objectDisplay_property)
    self.mConnectorP2_property.addEBObserverOf_location (self.objectDisplay_property)
    preferences_displayFrontLayoutForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_displayBackLayoutForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_frontSideLayoutColorForBoard_property.addEBObserver (self.objectDisplay_property)
    preferences_backSideLayoutColorForBoard_property.addEBObserver (self.objectDisplay_property)
    self.actualTrackWidth_property.addEBObserver (self.objectDisplay_property)
    self.mSide_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: p1CanMove
    self.p1CanMove_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mManualLockP1_property_selection.kind ()
        kind &= unwSelf.p1ConnectedToSomePad_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mManualLockP1_property_selection, unwSelf.p1ConnectedToSomePad_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_BoardTrack_p1CanMove (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mManualLockP1_property.addEBObserver (self.p1CanMove_property)
    self.p1ConnectedToSomePad_property.addEBObserver (self.p1CanMove_property)
  //--- Atomic property: p2CanMove
    self.p2CanMove_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mManualLockP2_property_selection.kind ()
        kind &= unwSelf.p2ConnectedToSomePad_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mManualLockP2_property_selection, unwSelf.p2ConnectedToSomePad_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_BoardTrack_p2CanMove (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mManualLockP2_property.addEBObserver (self.p2CanMove_property)
    self.p2ConnectedToSomePad_property.addEBObserver (self.p2CanMove_property)
  //--- Atomic property: trackCanRotate
    self.trackCanRotate_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.p1CanMove_property_selection.kind ()
        kind &= unwSelf.p2CanMove_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.p1CanMove_property_selection, unwSelf.p2CanMove_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_BoardTrack_trackCanRotate (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.p1CanMove_property.addEBObserver (self.trackCanRotate_property)
    self.p2CanMove_property.addEBObserver (self.trackCanRotate_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mConnectorP1_property.location_property_selection.kind ()
        kind &= unwSelf.p1CanMove_property_selection.kind ()
        kind &= unwSelf.mConnectorP2_property.location_property_selection.kind ()
        kind &= unwSelf.p2CanMove_property_selection.kind ()
        kind &= preferences_frontSideLayoutColorForBoard_property_selection.kind ()
        kind &= preferences_backSideLayoutColorForBoard_property_selection.kind ()
        kind &= unwSelf.mSide_property_selection.kind ()
        kind &= unwSelf.actualTrackWidth_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mConnectorP1_property.location_property_selection, unwSelf.p1CanMove_property_selection, unwSelf.mConnectorP2_property.location_property_selection, unwSelf.p2CanMove_property_selection, preferences_frontSideLayoutColorForBoard_property_selection, preferences_backSideLayoutColorForBoard_property_selection, unwSelf.mSide_property_selection, unwSelf.actualTrackWidth_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (transient_BoardTrack_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mConnectorP1_property.addEBObserverOf_location (self.selectionDisplay_property)
    self.p1CanMove_property.addEBObserver (self.selectionDisplay_property)
    self.mConnectorP2_property.addEBObserverOf_location (self.selectionDisplay_property)
    self.p2CanMove_property.addEBObserver (self.selectionDisplay_property)
    preferences_frontSideLayoutColorForBoard_property.addEBObserver (self.selectionDisplay_property)
    preferences_backSideLayoutColorForBoard_property.addEBObserver (self.selectionDisplay_property)
    self.mSide_property.addEBObserver (self.selectionDisplay_property)
    self.actualTrackWidth_property.addEBObserver (self.selectionDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    // self.mNet_property.netClassTrackWidth_property.removeEBObserver (self.actualTrackWidth_property)
    // self.mUsesCustomTrackWidth_property.removeEBObserver (self.actualTrackWidth_property)
    // self.mCustomTrackWidth_property.removeEBObserver (self.actualTrackWidth_property)
    // self.mNet_property.mNetName_property.removeEBObserver (self.netName_property)
    // self.mNet_property.netClassName_property.removeEBObserver (self.netClassName_property)
    // self.mNet_property.netClassTrackWidth_property.removeEBObserver (self.netClassTrackWidth_property)
    // self.mNet_property.netClassViaHoleDiameter_property.removeEBObserver (self.netClassViaHoleDiameter_property)
    // self.mNet_property.netClassViaPadDiameter_property.removeEBObserver (self.netClassViaPadDiameter_property)
    // self.mConnectorP1_property.location_property.removeEBObserver (self.trackLengthInCanariUnit_property)
    // self.mConnectorP2_property.location_property.removeEBObserver (self.trackLengthInCanariUnit_property)
    // self.mSide_property.removeEBObserver (self.signatureForERCChecking_property)
    // self.actualTrackWidth_property.removeEBObserver (self.signatureForERCChecking_property)
    // self.mConnectorP1_property.location_property.removeEBObserver (self.trackDirectionInDegrees_property)
    // self.mConnectorP2_property.location_property.removeEBObserver (self.trackDirectionInDegrees_property)
    // self.mConnectorP1_property.isConnectedToSomePad_property.removeEBObserver (self.p1ConnectedToSomePad_property)
    // self.mConnectorP2_property.isConnectedToSomePad_property.removeEBObserver (self.p2ConnectedToSomePad_property)
    // self.mConnectorP1_property.location_property.removeEBObserver (self.computedP1X_property)
    // self.mConnectorP1_property.location_property.removeEBObserver (self.computedP1Y_property)
    // self.mConnectorP2_property.location_property.removeEBObserver (self.computedP2X_property)
    // self.mConnectorP2_property.location_property.removeEBObserver (self.computedP2Y_property)
    // self.mConnectorP1_property.location_property.removeEBObserver (self.objectDisplay_property)
    // self.mConnectorP2_property.location_property.removeEBObserver (self.objectDisplay_property)
    // preferences_displayFrontLayoutForBoard_property.removeEBObserver (self.objectDisplay_property)
    // preferences_displayBackLayoutForBoard_property.removeEBObserver (self.objectDisplay_property)
    // preferences_frontSideLayoutColorForBoard_property.removeEBObserver (self.objectDisplay_property)
    // preferences_backSideLayoutColorForBoard_property.removeEBObserver (self.objectDisplay_property)
    // self.actualTrackWidth_property.removeEBObserver (self.objectDisplay_property)
    // self.mSide_property.removeEBObserver (self.objectDisplay_property)
    // self.mManualLockP1_property.removeEBObserver (self.p1CanMove_property)
    // self.p1ConnectedToSomePad_property.removeEBObserver (self.p1CanMove_property)
    // self.mManualLockP2_property.removeEBObserver (self.p2CanMove_property)
    // self.p2ConnectedToSomePad_property.removeEBObserver (self.p2CanMove_property)
    // self.p1CanMove_property.removeEBObserver (self.trackCanRotate_property)
    // self.p2CanMove_property.removeEBObserver (self.trackCanRotate_property)
    // self.mConnectorP1_property.location_property.removeEBObserver (self.selectionDisplay_property)
    // self.p1CanMove_property.removeEBObserver (self.selectionDisplay_property)
    // self.mConnectorP2_property.location_property.removeEBObserver (self.selectionDisplay_property)
    // self.p2CanMove_property.removeEBObserver (self.selectionDisplay_property)
    // preferences_frontSideLayoutColorForBoard_property.removeEBObserver (self.selectionDisplay_property)
    // preferences_backSideLayoutColorForBoard_property.removeEBObserver (self.selectionDisplay_property)
    // self.mSide_property.removeEBObserver (self.selectionDisplay_property)
    // self.actualTrackWidth_property.removeEBObserver (self.selectionDisplay_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mSide",
      idx: self.mSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSide_property.mObserverExplorer,
      valueExplorer: &self.mSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDefaultTrackWidthUnit",
      idx: self.mDefaultTrackWidthUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDefaultTrackWidthUnit_property.mObserverExplorer,
      valueExplorer: &self.mDefaultTrackWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mCustomTrackWidth",
      idx: self.mCustomTrackWidth_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCustomTrackWidth_property.mObserverExplorer,
      valueExplorer: &self.mCustomTrackWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mCustomTrackWidthUnit",
      idx: self.mCustomTrackWidthUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCustomTrackWidthUnit_property.mObserverExplorer,
      valueExplorer: &self.mCustomTrackWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mUsesCustomTrackWidth",
      idx: self.mUsesCustomTrackWidth_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mUsesCustomTrackWidth_property.mObserverExplorer,
      valueExplorer: &self.mUsesCustomTrackWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mIsPreservedByAutoRouter",
      idx: self.mIsPreservedByAutoRouter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mIsPreservedByAutoRouter_property.mObserverExplorer,
      valueExplorer: &self.mIsPreservedByAutoRouter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mP1XUnit",
      idx: self.mP1XUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mP1XUnit_property.mObserverExplorer,
      valueExplorer: &self.mP1XUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mP1YUnit",
      idx: self.mP1YUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mP1YUnit_property.mObserverExplorer,
      valueExplorer: &self.mP1YUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mP2XUnit",
      idx: self.mP2XUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mP2XUnit_property.mObserverExplorer,
      valueExplorer: &self.mP2XUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mP2YUnit",
      idx: self.mP2YUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mP2YUnit_property.mObserverExplorer,
      valueExplorer: &self.mP2YUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mManualLockP1",
      idx: self.mManualLockP1_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mManualLockP1_property.mObserverExplorer,
      valueExplorer: &self.mManualLockP1_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mManualLockP2",
      idx: self.mManualLockP2_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mManualLockP2_property.mObserverExplorer,
      valueExplorer: &self.mManualLockP2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDirectionLockOnKnobDragging",
      idx: self.mDirectionLockOnKnobDragging_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDirectionLockOnKnobDragging_property.mObserverExplorer,
      valueExplorer: &self.mDirectionLockOnKnobDragging_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "actualTrackWidth",
      idx: self.actualTrackWidth_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.actualTrackWidth_property.mObserverExplorer,
      valueExplorer: &self.actualTrackWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netName",
      idx: self.netName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netName_property.mObserverExplorer,
      valueExplorer: &self.netName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netClassName",
      idx: self.netClassName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netClassName_property.mObserverExplorer,
      valueExplorer: &self.netClassName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netClassTrackWidth",
      idx: self.netClassTrackWidth_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netClassTrackWidth_property.mObserverExplorer,
      valueExplorer: &self.netClassTrackWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netClassViaHoleDiameter",
      idx: self.netClassViaHoleDiameter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netClassViaHoleDiameter_property.mObserverExplorer,
      valueExplorer: &self.netClassViaHoleDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netClassViaPadDiameter",
      idx: self.netClassViaPadDiameter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netClassViaPadDiameter_property.mObserverExplorer,
      valueExplorer: &self.netClassViaPadDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "trackLengthInCanariUnit",
      idx: self.trackLengthInCanariUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.trackLengthInCanariUnit_property.mObserverExplorer,
      valueExplorer: &self.trackLengthInCanariUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "signatureForERCChecking",
      idx: self.signatureForERCChecking_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.signatureForERCChecking_property.mObserverExplorer,
      valueExplorer: &self.signatureForERCChecking_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "p1ConnectedToSomePad",
      idx: self.p1ConnectedToSomePad_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.p1ConnectedToSomePad_property.mObserverExplorer,
      valueExplorer: &self.p1ConnectedToSomePad_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "p2ConnectedToSomePad",
      idx: self.p2ConnectedToSomePad_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.p2ConnectedToSomePad_property.mObserverExplorer,
      valueExplorer: &self.p2ConnectedToSomePad_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx: self.objectDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.objectDisplay_property.mObserverExplorer,
      valueExplorer: &self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "p1CanMove",
      idx: self.p1CanMove_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.p1CanMove_property.mObserverExplorer,
      valueExplorer: &self.p1CanMove_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "p2CanMove",
      idx: self.p2CanMove_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.p2CanMove_property.mObserverExplorer,
      valueExplorer: &self.p2CanMove_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "trackCanRotate",
      idx: self.trackCanRotate_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.trackCanRotate_property.mObserverExplorer,
      valueExplorer: &self.trackCanRotate_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx: self.selectionDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
      valueExplorer: &self.selectionDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "mConnectorP1",
      idx:self.mConnectorP1_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mConnectorP1_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mConnectorP2",
      idx:self.mConnectorP2_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mConnectorP2_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mNet",
      idx:self.mNet_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mNet_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mSide
    self.mSide_property.mObserverExplorer = nil
    self.mSide_property.mValueExplorer = nil
  //--- Atomic property: mDefaultTrackWidthUnit
    self.mDefaultTrackWidthUnit_property.mObserverExplorer = nil
    self.mDefaultTrackWidthUnit_property.mValueExplorer = nil
  //--- Atomic property: mCustomTrackWidth
    self.mCustomTrackWidth_property.mObserverExplorer = nil
    self.mCustomTrackWidth_property.mValueExplorer = nil
  //--- Atomic property: mCustomTrackWidthUnit
    self.mCustomTrackWidthUnit_property.mObserverExplorer = nil
    self.mCustomTrackWidthUnit_property.mValueExplorer = nil
  //--- Atomic property: mUsesCustomTrackWidth
    self.mUsesCustomTrackWidth_property.mObserverExplorer = nil
    self.mUsesCustomTrackWidth_property.mValueExplorer = nil
  //--- Atomic property: mIsPreservedByAutoRouter
    self.mIsPreservedByAutoRouter_property.mObserverExplorer = nil
    self.mIsPreservedByAutoRouter_property.mValueExplorer = nil
  //--- Atomic property: mP1XUnit
    self.mP1XUnit_property.mObserverExplorer = nil
    self.mP1XUnit_property.mValueExplorer = nil
  //--- Atomic property: mP1YUnit
    self.mP1YUnit_property.mObserverExplorer = nil
    self.mP1YUnit_property.mValueExplorer = nil
  //--- Atomic property: mP2XUnit
    self.mP2XUnit_property.mObserverExplorer = nil
    self.mP2XUnit_property.mValueExplorer = nil
  //--- Atomic property: mP2YUnit
    self.mP2YUnit_property.mObserverExplorer = nil
    self.mP2YUnit_property.mValueExplorer = nil
  //--- Atomic property: mManualLockP1
    self.mManualLockP1_property.mObserverExplorer = nil
    self.mManualLockP1_property.mValueExplorer = nil
  //--- Atomic property: mManualLockP2
    self.mManualLockP2_property.mObserverExplorer = nil
    self.mManualLockP2_property.mValueExplorer = nil
  //--- Atomic property: mDirectionLockOnKnobDragging
    self.mDirectionLockOnKnobDragging_property.mObserverExplorer = nil
    self.mDirectionLockOnKnobDragging_property.mValueExplorer = nil
  //--- To one property: mConnectorP1
    self.mConnectorP1_property.mObserverExplorer = nil
    self.mConnectorP1_property.mValueExplorer = nil
  //--- To one property: mConnectorP2
    self.mConnectorP2_property.mObserverExplorer = nil
    self.mConnectorP2_property.mValueExplorer = nil
  //--- To one property: mNet
    self.mNet_property.mObserverExplorer = nil
    self.mNet_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mConnectorP1 = nil
    self.mConnectorP2 = nil
    self.mNet = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mSide
    self.mSide_property.storeIn (dictionary: ioDictionary, forKey: "mSide")
  //--- Atomic property: mDefaultTrackWidthUnit
    self.mDefaultTrackWidthUnit_property.storeIn (dictionary: ioDictionary, forKey: "mDefaultTrackWidthUnit")
  //--- Atomic property: mCustomTrackWidth
    self.mCustomTrackWidth_property.storeIn (dictionary: ioDictionary, forKey: "mCustomTrackWidth")
  //--- Atomic property: mCustomTrackWidthUnit
    self.mCustomTrackWidthUnit_property.storeIn (dictionary: ioDictionary, forKey: "mCustomTrackWidthUnit")
  //--- Atomic property: mUsesCustomTrackWidth
    self.mUsesCustomTrackWidth_property.storeIn (dictionary: ioDictionary, forKey: "mUsesCustomTrackWidth")
  //--- Atomic property: mIsPreservedByAutoRouter
    self.mIsPreservedByAutoRouter_property.storeIn (dictionary: ioDictionary, forKey: "mIsPreservedByAutoRouter")
  //--- Atomic property: mP1XUnit
    self.mP1XUnit_property.storeIn (dictionary: ioDictionary, forKey: "mP1XUnit")
  //--- Atomic property: mP1YUnit
    self.mP1YUnit_property.storeIn (dictionary: ioDictionary, forKey: "mP1YUnit")
  //--- Atomic property: mP2XUnit
    self.mP2XUnit_property.storeIn (dictionary: ioDictionary, forKey: "mP2XUnit")
  //--- Atomic property: mP2YUnit
    self.mP2YUnit_property.storeIn (dictionary: ioDictionary, forKey: "mP2YUnit")
  //--- Atomic property: mManualLockP1
    self.mManualLockP1_property.storeIn (dictionary: ioDictionary, forKey: "mManualLockP1")
  //--- Atomic property: mManualLockP2
    self.mManualLockP2_property.storeIn (dictionary: ioDictionary, forKey: "mManualLockP2")
  //--- Atomic property: mDirectionLockOnKnobDragging
    self.mDirectionLockOnKnobDragging_property.storeIn (dictionary: ioDictionary, forKey: "mDirectionLockOnKnobDragging")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  //--- To one property: mConnectorP1
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mConnectorP1",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? BoardConnector {
        self.mConnectorP1_property.setProp (entity)
      }
    }
  //--- To one property: mConnectorP2
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mConnectorP2",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? BoardConnector {
        self.mConnectorP2_property.setProp (entity)
      }
    }
  //--- To one property: mNet
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mNet",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? NetInProject {
        self.mNet_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mSide
    self.mSide_property.readFrom (dictionary: inDictionary, forKey: "mSide")
  //--- Atomic property: mDefaultTrackWidthUnit
    self.mDefaultTrackWidthUnit_property.readFrom (dictionary: inDictionary, forKey: "mDefaultTrackWidthUnit")
  //--- Atomic property: mCustomTrackWidth
    self.mCustomTrackWidth_property.readFrom (dictionary: inDictionary, forKey: "mCustomTrackWidth")
  //--- Atomic property: mCustomTrackWidthUnit
    self.mCustomTrackWidthUnit_property.readFrom (dictionary: inDictionary, forKey: "mCustomTrackWidthUnit")
  //--- Atomic property: mUsesCustomTrackWidth
    self.mUsesCustomTrackWidth_property.readFrom (dictionary: inDictionary, forKey: "mUsesCustomTrackWidth")
  //--- Atomic property: mIsPreservedByAutoRouter
    self.mIsPreservedByAutoRouter_property.readFrom (dictionary: inDictionary, forKey: "mIsPreservedByAutoRouter")
  //--- Atomic property: mP1XUnit
    self.mP1XUnit_property.readFrom (dictionary: inDictionary, forKey: "mP1XUnit")
  //--- Atomic property: mP1YUnit
    self.mP1YUnit_property.readFrom (dictionary: inDictionary, forKey: "mP1YUnit")
  //--- Atomic property: mP2XUnit
    self.mP2XUnit_property.readFrom (dictionary: inDictionary, forKey: "mP2XUnit")
  //--- Atomic property: mP2YUnit
    self.mP2YUnit_property.readFrom (dictionary: inDictionary, forKey: "mP2YUnit")
  //--- Atomic property: mManualLockP1
    self.mManualLockP1_property.readFrom (dictionary: inDictionary, forKey: "mManualLockP1")
  //--- Atomic property: mManualLockP2
    self.mManualLockP2_property.readFrom (dictionary: inDictionary, forKey: "mManualLockP2")
  //--- Atomic property: mDirectionLockOnKnobDragging
    self.mDirectionLockOnKnobDragging_property.readFrom (dictionary: inDictionary, forKey: "mDirectionLockOnKnobDragging")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mSide\n"
    ioString += "mDefaultTrackWidthUnit\n"
    ioString += "mCustomTrackWidth\n"
    ioString += "mCustomTrackWidthUnit\n"
    ioString += "mUsesCustomTrackWidth\n"
    ioString += "mIsPreservedByAutoRouter\n"
    ioString += "mP1XUnit\n"
    ioString += "mP1YUnit\n"
    ioString += "mP2XUnit\n"
    ioString += "mP2YUnit\n"
    ioString += "mManualLockP1\n"
    ioString += "mManualLockP2\n"
    ioString += "mDirectionLockOnKnobDragging\n"
  //--- To one relationships
    ioString += "mConnectorP1\n"
    ioString += "mConnectorP2\n"
    ioString += "mNet\n"
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mSide.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDefaultTrackWidthUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mCustomTrackWidth.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mCustomTrackWidthUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mUsesCustomTrackWidth.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mIsPreservedByAutoRouter.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mP1XUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mP1YUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mP2XUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mP2YUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mManualLockP1.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mManualLockP2.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDirectionLockOnKnobDragging.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.mConnectorP1 {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mConnectorP2 {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mNet {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.addOperation {
    //--- Atomic properties
      if let range = inDictionary ["mSide"], let value = TrackSide.unarchiveFromDataRange (inData, range) {
        self.mSide = value
      }
      if let range = inDictionary ["mDefaultTrackWidthUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mDefaultTrackWidthUnit = value
      }
      if let range = inDictionary ["mCustomTrackWidth"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mCustomTrackWidth = value
      }
      if let range = inDictionary ["mCustomTrackWidthUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mCustomTrackWidthUnit = value
      }
      if let range = inDictionary ["mUsesCustomTrackWidth"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mUsesCustomTrackWidth = value
      }
      if let range = inDictionary ["mIsPreservedByAutoRouter"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mIsPreservedByAutoRouter = value
      }
      if let range = inDictionary ["mP1XUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mP1XUnit = value
      }
      if let range = inDictionary ["mP1YUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mP1YUnit = value
      }
      if let range = inDictionary ["mP2XUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mP2XUnit = value
      }
      if let range = inDictionary ["mP2YUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mP2YUnit = value
      }
      if let range = inDictionary ["mManualLockP1"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mManualLockP1 = value
      }
      if let range = inDictionary ["mManualLockP2"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mManualLockP2 = value
      }
      if let range = inDictionary ["mDirectionLockOnKnobDragging"], let value = TrackLockDirection.unarchiveFromDataRange (inData, range) {
        self.mDirectionLockOnKnobDragging = value
      }
    //--- To one relationships
      if let range = inDictionary ["mConnectorP1"], let objectIndex = inData.base62EncodedInt (range: range) {
        inParallelObjectSetupContext.addToOneSetupDeferredOperation ({ self.mConnectorP1 = inObjectArray [objectIndex] as? BoardConnector })
      }
      if let range = inDictionary ["mConnectorP2"], let objectIndex = inData.base62EncodedInt (range: range) {
        inParallelObjectSetupContext.addToOneSetupDeferredOperation ({ self.mConnectorP2 = inObjectArray [objectIndex] as? BoardConnector })
      }
      if let range = inDictionary ["mNet"], let objectIndex = inData.base62EncodedInt (range: range) {
        inParallelObjectSetupContext.addToOneSetupDeferredOperation ({ self.mNet = inObjectArray [objectIndex] as? NetInProject })
      }
    //--- To many relationships
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To one property: mConnectorP1
    if let object = self.mConnectorP1 {
      objects.append (object)
    }
  //--- To one property: mConnectorP2
    if let object = self.mConnectorP2 {
      objects.append (object)
    }
  //--- To one property: mNet
    if let object = self.mNet {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To one property: mConnectorP1
    if let object = self.mConnectorP1 {
      objects.append (object)
    }
  //--- To one property: mConnectorP2
    if let object = self.mConnectorP2 {
      objects.append (object)
    }
  //--- To one property: mNet
    if let object = self.mNet {
      objects.append (object)
    }
  }

  //····················································································································
  //  USER ZONE 2
  //····················································································································
//--- START OF USER ZONE 2

  override func cursorForKnob (knob inKnobIndex: Int) -> NSCursor? {
    return NSCursor.upDownRightLeftCursor
  }

  //····················································································································

  override func acceptToTranslate (xBy inDx: Int, yBy inDy: Int) -> Bool {
    return true
  }

  //····················································································································

  override func translate (xBy inDx : Int, yBy inDy : Int, userSet ioSet : inout Set <ObjcObject>) {
    if let connectorP1 = self.mConnectorP1, !ioSet.contains (connectorP1) {
      ioSet.insert (connectorP1)
      connectorP1.mX += inDx
      connectorP1.mY += inDy
    }
    if let connectorP2 = self.mConnectorP2, !ioSet.contains (connectorP2) {
      ioSet.insert (connectorP2)
      connectorP2.mX += inDx
      connectorP2.mY += inDy
    }
  }

  //····················································································································
  //  Knob
  //····················································································································

  override func canMove (knob inKnobIndex : Int,
                         proposedUnalignedAlignedTranslation inProposedUnalignedTranslation : CanariPoint,
                         proposedAlignedTranslation inProposedAlignedTranslation : CanariPoint,
                         unalignedMouseDraggedLocation inUnalignedMouseDraggedLocation : CanariPoint,
                         shift inShift : Bool) -> CanariPoint {
    return inProposedUnalignedTranslation
//    if let p1 = self.mConnectorP1?.location, let p2 = self.mConnectorP2?.location {
//      if inKnobIndex == BOARD_TRACK_P1 {
//        if inShift {
//          return inProposedUnalignedTranslation
//        }else{
//          var p = inUnalignedMouseDraggedLocation.p
//          p.quadrantAligned (from: p2)
//          return CanariPoint (x: p.x - p1.x, y: p.y - p1.y)
//        }
//      }else if inKnobIndex == BOARD_TRACK_P2 {
//        if inShift {
//          return inProposedUnalignedTranslation
//        }else{
//          var p = inUnalignedMouseDraggedLocation.p
//          p.quadrantAligned (from: p1)
//          return CanariPoint (x: p.x - p2.x, y: p.y - p2.y)
//        }
//      }else{
//        return CanariPoint ()
//      }
//    }else{
//      return CanariPoint ()
//    }
  }

  //····················································································································

  override func move (knob inKnobIndex: Int,
                      proposedDx inDx: Int,
                      proposedDy inDy: Int,
                      unalignedMouseLocationX inUnalignedMouseLocationX : Int,
                      unalignedMouseLocationY inUnalignedMouseLocationY : Int,
                      alignedMouseLocationX inAlignedMouseLocationX : Int,
                      alignedMouseLocationY inAlignedMouseLocationY : Int,
                      shift inShift : Bool) {
    if inKnobIndex == BOARD_TRACK_P1 {
      switch self.mDirectionLockOnKnobDragging {
      case .unlocked :
        self.mConnectorP1?.mX = inUnalignedMouseLocationX
        self.mConnectorP1?.mY = inUnalignedMouseLocationY
      case .locked :
        let p1 = self.mConnectorP1!.location!
        let p2 = self.mConnectorP2!.location!
        let angle = Double (CanariPoint.angleInRadian (p1, p2))
        let newLength : Double = Double (inUnalignedMouseLocationX - p2.x) * cos (angle) + Double (inUnalignedMouseLocationY - p2.y) * sin (angle)
        let newP1X = p2.x + Int ((newLength * cos (angle)).rounded ())
        let newP1Y = p2.y + Int ((newLength * sin (angle)).rounded ())
        self.mConnectorP1?.mX = newP1X
        self.mConnectorP1?.mY = newP1Y
      case .octolinear :
        let p2 = self.mConnectorP2!.location!
        let inUnalignedMouseLocation = CanariPoint (x: inUnalignedMouseLocationX, y: inUnalignedMouseLocationY)
        let angle = Double (CanariPoint.octolinearNearestAngleInDegrees (inUnalignedMouseLocation, p2)) * .pi / 180.0
        let newLength : Double = Double (inUnalignedMouseLocationX - p2.x) * cos (angle) + Double (inUnalignedMouseLocationY - p2.y) * sin (angle)
        let newP1X = p2.x + Int ((newLength * cos (angle)).rounded ())
        let newP1Y = p2.y + Int ((newLength * sin (angle)).rounded ())
        self.mConnectorP1?.mX = newP1X
        self.mConnectorP1?.mY = newP1Y
      case .rectilinear :
        let p2 = self.mConnectorP2!.location!
        let inUnalignedMouseLocation = CanariPoint (x: inUnalignedMouseLocationX, y: inUnalignedMouseLocationY)
        let angle = Double (CanariPoint.rectilinearNearestAngleInDegrees (inUnalignedMouseLocation, p2)) * .pi / 180.0
        let newLength : Double = Double (inUnalignedMouseLocationX - p2.x) * cos (angle) + Double (inUnalignedMouseLocationY - p2.y) * sin (angle)
        let newP1X = p2.x + Int ((newLength * cos (angle)).rounded ())
        let newP1Y = p2.y + Int ((newLength * sin (angle)).rounded ())
        self.mConnectorP1?.mX = newP1X
        self.mConnectorP1?.mY = newP1Y      }
    }else if inKnobIndex == BOARD_TRACK_P2 {
      switch self.mDirectionLockOnKnobDragging {
      case .unlocked :
        self.mConnectorP2?.mX = inUnalignedMouseLocationX
        self.mConnectorP2?.mY = inUnalignedMouseLocationY
      case .locked :
        let p1 = self.mConnectorP1!.location!
        let p2 = self.mConnectorP2!.location!
        let angle = Double (CanariPoint.angleInRadian (p1, p2))
        let newLength : Double = Double (inUnalignedMouseLocationX - p1.x) * cos (angle) + Double (inUnalignedMouseLocationY - p1.y) * sin (angle)
        let newP2X = p1.x + Int ((newLength * cos (angle)).rounded ())
        let newP2Y = p1.y + Int ((newLength * sin (angle)).rounded ())
        self.mConnectorP2?.mX = newP2X
        self.mConnectorP2?.mY = newP2Y
      case .octolinear :
        let p1 = self.mConnectorP1!.location!
        let inUnalignedMouseLocation = CanariPoint (x: inUnalignedMouseLocationX, y: inUnalignedMouseLocationY)
        let angle = Double (CanariPoint.octolinearNearestAngleInDegrees (p1, inUnalignedMouseLocation)) * .pi / 180.0
        let newLength : Double = Double (inUnalignedMouseLocationX - p1.x) * cos (angle) + Double (inUnalignedMouseLocationY - p1.y) * sin (angle)
        let newP2X = p1.x + Int ((newLength * cos (angle)).rounded ())
        let newP2Y = p1.y + Int ((newLength * sin (angle)).rounded ())
        self.mConnectorP2?.mX = newP2X
        self.mConnectorP2?.mY = newP2Y
      case .rectilinear :
        let p1 = self.mConnectorP1!.location!
        let inUnalignedMouseLocation = CanariPoint (x: inUnalignedMouseLocationX, y: inUnalignedMouseLocationY)
        let angle = Double (CanariPoint.rectilinearNearestAngleInDegrees (p1, inUnalignedMouseLocation)) * .pi / 180.0
        let newLength : Double = Double (inUnalignedMouseLocationX - p1.x) * cos (angle) + Double (inUnalignedMouseLocationY - p1.y) * sin (angle)
        let newP2X = p1.x + Int ((newLength * cos (angle)).rounded ())
        let newP2Y = p1.y + Int ((newLength * sin (angle)).rounded ())
        self.mConnectorP2?.mX = newP2X
        self.mConnectorP2?.mY = newP2Y
      }
    }
  }

  //····················································································································
  //  Rotate 90°
  //····················································································································

  override func canRotate90 (accumulatedPoints : inout Set <CanariPoint>) -> Bool {
    if let p1 = self.mConnectorP1?.location, let p2 = self.mConnectorP2?.location {
      accumulatedPoints.insert (CanariPoint (x: p1.x, y: p1.y))
      accumulatedPoints.insert (CanariPoint (x: p2.x, y: p2.y))
      return true
    }else{
      return false
    }
  }

  //····················································································································

  override func rotate90Clockwise (from inRotationCenter : CanariPoint, userSet ioSet : inout Set <ObjcObject>) {
    if let connectorP1 = self.mConnectorP1, let connectorP2 = self.mConnectorP2 {
      if !ioSet.contains (connectorP1) {
        let p = inRotationCenter.rotated90Clockwise (x: connectorP1.mX, y: connectorP1.mY)
        connectorP1.mX = p.x
        connectorP1.mY = p.y
        ioSet.insert (connectorP1)
      }
      if !ioSet.contains (connectorP2) {
        let p = inRotationCenter.rotated90Clockwise (x: connectorP2.mX, y: connectorP2.mY)
        connectorP2.mX = p.x
        connectorP2.mY = p.y
        ioSet.insert (connectorP2)
      }
    }
  }

  //····················································································································

  override func rotate90CounterClockwise (from inRotationCenter : CanariPoint, userSet ioSet : inout Set <ObjcObject>) {
    if let connectorP1 = self.mConnectorP1, let connectorP2 = self.mConnectorP2 {
      if !ioSet.contains (connectorP1) {
        let p = inRotationCenter.rotated90CounterClockwise (x: connectorP1.mX, y: connectorP1.mY)
        connectorP1.mX = p.x
        connectorP1.mY = p.y
        ioSet.insert (connectorP1)
      }
      if !ioSet.contains (connectorP2) {
        let p = inRotationCenter.rotated90CounterClockwise (x: connectorP2.mX, y: connectorP2.mY)
        connectorP2.mX = p.x
        connectorP2.mY = p.y
        ioSet.insert (connectorP2)
      }
    }
  }

  //····················································································································
  //   SNAP TO GRID
  //····················································································································

  override func canSnapToGrid (_ inGrid : Int) -> Bool {
    var isAligned = self.mConnectorP1?.mX.isAlignedOnGrid (inGrid) ?? true
    if isAligned, let connectorP1 = self.mConnectorP1 {
      isAligned = connectorP1.mY.isAlignedOnGrid (inGrid)
    }
    if isAligned, let connectorP2 = self.mConnectorP2 {
      isAligned = connectorP2.mX.isAlignedOnGrid (inGrid)
    }
    if isAligned, let connectorP2 = self.mConnectorP2 {
      isAligned = connectorP2.mY.isAlignedOnGrid (inGrid)
    }
    return !isAligned
  }

  //····················································································································

  override func snapToGrid (_ inGrid : Int) {
    self.mConnectorP1?.mX.align (onGrid: inGrid)
    self.mConnectorP1?.mY.align (onGrid: inGrid)
    self.mConnectorP2?.mX.align (onGrid: inGrid)
    self.mConnectorP2?.mY.align (onGrid: inGrid)
  }

  //····················································································································
  //  REMOVING
  //····················································································································

  override func operationBeforeRemoving () {
    let optionalNet = self.mNet
    self.mConnectorP1 = nil
    self.mConnectorP2 = nil
    self.mNet = nil
    if let net = optionalNet, net.mPoints.count == 0, net.mTracks.count == 0 {
      net.mNetClass = nil // Remove net
    }
  }

  //····················································································································
  //  Bezier path
  //····················································································································

  func bezierPath (extraWidth inExtraWidth : Int) -> EBBezierPath {
    var bp = EBBezierPath ()
    bp.lineWidth = canariUnitToCocoa (self.actualTrackWidth! + inExtraWidth)
    bp.lineCapStyle = .round
    bp.lineJoinStyle = .round
    bp.move (to: self.mConnectorP1!.location!.cocoaPoint)
    bp.line (to: self.mConnectorP2!.location!.cocoaPoint)
    return bp.pathByStroking
  }

  //····················································································································

//--- END OF USER ZONE 2
}

//----------------------------------------------------------------------------------------------------------------------
