//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardTrack_mSide : class {
  var mSide : TrackSide { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardTrack
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class BoardTrack : BoardObject,
         BoardTrack_mSide {

  //····················································································································
  //   Atomic property: mSide
  //····················································································································

  let mSide_property = EBStoredProperty_TrackSide (defaultValue: TrackSide.front)

  //····················································································································

  var mSide : TrackSide {
    get { return self.mSide_property.propval }
    set { self.mSide_property.setProp (newValue) }
  }

  //····················································································································

  var mSide_property_selection : EBSelection <TrackSide> { return self.mSide_property.prop }

  //····················································································································
  //   To one property: mConnectorP1
  //····················································································································

   let mConnectorP1_property = StoredObject_ConnectorInBoard ()

  //····················································································································

  var mConnectorP1_property_selection : EBSelection <ConnectorInBoard?> {
    return .single (self.mConnectorP1_property.propval)
  }

  //····················································································································

  var mConnectorP1 : ConnectorInBoard? {
    get {
      return self.mConnectorP1_property.propval
    }
    set {
      if self.mConnectorP1_property.propval != nil {
        self.mConnectorP1_property.setProp (nil)
      }
      if newValue != nil {
        self.mConnectorP1_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mConnectorP1_none : StoredObject_ConnectorInBoard { return self.mConnectorP1_property }

  //····················································································································

  var mConnectorP1_none_selection : EBSelection <Bool> {
    return .single (self.mConnectorP1_property.propval == nil)
  }

  //····················································································································
  //   To one property: mConnectorP2
  //····················································································································

   let mConnectorP2_property = StoredObject_ConnectorInBoard ()

  //····················································································································

  var mConnectorP2_property_selection : EBSelection <ConnectorInBoard?> {
    return .single (self.mConnectorP2_property.propval)
  }

  //····················································································································

  var mConnectorP2 : ConnectorInBoard? {
    get {
      return self.mConnectorP2_property.propval
    }
    set {
      if self.mConnectorP2_property.propval != nil {
        self.mConnectorP2_property.setProp (nil)
      }
      if newValue != nil {
        self.mConnectorP2_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mConnectorP2_none : StoredObject_ConnectorInBoard { return self.mConnectorP2_property }

  //····················································································································

  var mConnectorP2_none_selection : EBSelection <Bool> {
    return .single (self.mConnectorP2_property.propval == nil)
  }

  //····················································································································
  //   To one property: mPadRepresentantP1
  //····················································································································

   let mPadRepresentantP1_property = StoredObject_PadRepresentant ()

  //····················································································································

  var mPadRepresentantP1_property_selection : EBSelection <PadRepresentant?> {
    return .single (self.mPadRepresentantP1_property.propval)
  }

  //····················································································································

  var mPadRepresentantP1 : PadRepresentant? {
    get {
      return self.mPadRepresentantP1_property.propval
    }
    set {
      if self.mPadRepresentantP1_property.propval != nil {
        self.mPadRepresentantP1_property.setProp (nil)
      }
      if newValue != nil {
        self.mPadRepresentantP1_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mPadRepresentantP1_none : StoredObject_PadRepresentant { return self.mPadRepresentantP1_property }

  //····················································································································

  var mPadRepresentantP1_none_selection : EBSelection <Bool> {
    return .single (self.mPadRepresentantP1_property.propval == nil)
  }

  //····················································································································
  //   To one property: mPadRepresentantP2
  //····················································································································

   let mPadRepresentantP2_property = StoredObject_PadRepresentant ()

  //····················································································································

  var mPadRepresentantP2_property_selection : EBSelection <PadRepresentant?> {
    return .single (self.mPadRepresentantP2_property.propval)
  }

  //····················································································································

  var mPadRepresentantP2 : PadRepresentant? {
    get {
      return self.mPadRepresentantP2_property.propval
    }
    set {
      if self.mPadRepresentantP2_property.propval != nil {
        self.mPadRepresentantP2_property.setProp (nil)
      }
      if newValue != nil {
        self.mPadRepresentantP2_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mPadRepresentantP2_none : StoredObject_PadRepresentant { return self.mPadRepresentantP2_property }

  //····················································································································

  var mPadRepresentantP2_none_selection : EBSelection <Bool> {
    return .single (self.mPadRepresentantP2_property.propval == nil)
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mSide
    self.mSide_property.ebUndoManager = self.ebUndoManager
  //--- To one property: mConnectorP1 (has opposite to many relationship: mTracksP1)
    self.mConnectorP1_property.ebUndoManager = self.ebUndoManager
    self.mConnectorP1_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mTracksP1_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mTracksP1_property.remove (me) } }
    )
  //--- To one property: mConnectorP2 (has opposite to many relationship: mTracksP2)
    self.mConnectorP2_property.ebUndoManager = self.ebUndoManager
    self.mConnectorP2_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mTracksP2_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mTracksP2_property.remove (me) } }
    )
  //--- To one property: mPadRepresentantP1 (has opposite to many relationship: mTracksP1)
    self.mPadRepresentantP1_property.ebUndoManager = self.ebUndoManager
    self.mPadRepresentantP1_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mTracksP1_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mTracksP1_property.remove (me) } }
    )
  //--- To one property: mPadRepresentantP2 (has opposite to many relationship: mTracksP2)
    self.mPadRepresentantP2_property.ebUndoManager = self.ebUndoManager
    self.mPadRepresentantP2_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mTracksP2_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mTracksP2_property.remove (me) } }
    )
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mSide",
      idx: self.mSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSide_property.mObserverExplorer,
      valueExplorer: &self.mSide_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "mConnectorP1",
      idx:self.mConnectorP1_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mConnectorP1_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mConnectorP2",
      idx:self.mConnectorP2_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mConnectorP2_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mPadRepresentantP1",
      idx:self.mPadRepresentantP1_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mPadRepresentantP1_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mPadRepresentantP2",
      idx:self.mPadRepresentantP2_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mPadRepresentantP2_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mSide
    self.mSide_property.mObserverExplorer = nil
    self.mSide_property.mValueExplorer = nil
  //--- To one property: mConnectorP1
    self.mConnectorP1_property.mObserverExplorer = nil
    self.mConnectorP1_property.mValueExplorer = nil
  //--- To one property: mConnectorP2
    self.mConnectorP2_property.mObserverExplorer = nil
    self.mConnectorP2_property.mValueExplorer = nil
  //--- To one property: mPadRepresentantP1
    self.mPadRepresentantP1_property.mObserverExplorer = nil
    self.mPadRepresentantP1_property.mValueExplorer = nil
  //--- To one property: mPadRepresentantP2
    self.mPadRepresentantP2_property.mObserverExplorer = nil
    self.mPadRepresentantP2_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mConnectorP1 = nil
    self.mConnectorP2 = nil
    self.mPadRepresentantP1 = nil
    self.mPadRepresentantP2 = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mSide
    self.mSide_property.storeIn (dictionary: ioDictionary, forKey:"mSide")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To one property: mConnectorP1
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mConnectorP1",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? ConnectorInBoard {
        self.mConnectorP1_property.setProp (entity)
      }
    }
  //--- To one property: mConnectorP2
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mConnectorP2",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? ConnectorInBoard {
        self.mConnectorP2_property.setProp (entity)
      }
    }
  //--- To one property: mPadRepresentantP1
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mPadRepresentantP1",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? PadRepresentant {
        self.mPadRepresentantP1_property.setProp (entity)
      }
    }
  //--- To one property: mPadRepresentantP2
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mPadRepresentantP2",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? PadRepresentant {
        self.mPadRepresentantP2_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mSide
    self.mSide_property.readFrom (dictionary: inDictionary, forKey:"mSide")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To one property: mConnectorP1
    if let object = self.mConnectorP1 {
      objects.append (object)
    }
  //--- To one property: mConnectorP2
    if let object = self.mConnectorP2 {
      objects.append (object)
    }
  //--- To one property: mPadRepresentantP1
    if let object = self.mPadRepresentantP1 {
      objects.append (object)
    }
  //--- To one property: mPadRepresentantP2
    if let object = self.mPadRepresentantP2 {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To one property: mConnectorP1
    if let object = self.mConnectorP1 {
      objects.append (object)
    }
  //--- To one property: mConnectorP2
    if let object = self.mConnectorP2 {
      objects.append (object)
    }
  //--- To one property: mPadRepresentantP1
    if let object = self.mPadRepresentantP1 {
      objects.append (object)
    }
  //--- To one property: mPadRepresentantP2
    if let object = self.mPadRepresentantP2 {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

