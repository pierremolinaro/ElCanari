//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_mSide : class {
  var mSide : TrackSide { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_mDefaultTrackWidthUnit : class {
  var mDefaultTrackWidthUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_mCustomTrackWidth : class {
  var mCustomTrackWidth : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_mCustomTrackWidthUnit : class {
  var mCustomTrackWidthUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_mUsesCustomTrackWidth : class {
  var mUsesCustomTrackWidth : Bool { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_mIsPreservedByAutoRouter : class {
  var mIsPreservedByAutoRouter : Bool { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_actualTrackWidth : class {
  var actualTrackWidth : Int? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_netName : class {
  var netName : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_netClassName : class {
  var netClassName : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_netClassTrackWidth : class {
  var netClassTrackWidth : Int? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_netClassViaHoleDiameter : class {
  var netClassViaHoleDiameter : Int? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_netClassViaPadDiameter : class {
  var netClassViaPadDiameter : Int? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_trackLength : class {
  var trackLength : Double? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_endPointsLocation : class {
  var endPointsLocation : CanariPointArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_signatureForERCChecking : class {
  var signatureForERCChecking : UInt32? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol BoardTrack_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//----------------------------------------------------------------------------------------------------------------------
//    Entity: BoardTrack
//----------------------------------------------------------------------------------------------------------------------

class BoardTrack : BoardObject,
         BoardTrack_mSide,
         BoardTrack_mDefaultTrackWidthUnit,
         BoardTrack_mCustomTrackWidth,
         BoardTrack_mCustomTrackWidthUnit,
         BoardTrack_mUsesCustomTrackWidth,
         BoardTrack_mIsPreservedByAutoRouter,
         BoardTrack_actualTrackWidth,
         BoardTrack_selectionDisplay,
         BoardTrack_netName,
         BoardTrack_netClassName,
         BoardTrack_netClassTrackWidth,
         BoardTrack_netClassViaHoleDiameter,
         BoardTrack_netClassViaPadDiameter,
         BoardTrack_trackLength,
         BoardTrack_endPointsLocation,
         BoardTrack_signatureForERCChecking,
         BoardTrack_objectDisplay {

  //····················································································································
  //   Atomic property: mSide
  //····················································································································

  let mSide_property = EBStoredProperty_TrackSide (defaultValue: TrackSide.front)

  //····················································································································

  final func reset_mSide_toDefaultValue () {
    self.mSide = TrackSide.front
  }

  //····················································································································

  final var mSide : TrackSide {
    get { return self.mSide_property.propval }
    set { self.mSide_property.setProp (newValue) }
  }

  //····················································································································

  final var mSide_property_selection : EBSelection <TrackSide> { return self.mSide_property.prop }

  //····················································································································
  //   Atomic property: mDefaultTrackWidthUnit
  //····················································································································

  let mDefaultTrackWidthUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  final func reset_mDefaultTrackWidthUnit_toDefaultValue () {
    self.mDefaultTrackWidthUnit = 2286
  }

  //····················································································································

  final var mDefaultTrackWidthUnit : Int {
    get { return self.mDefaultTrackWidthUnit_property.propval }
    set { self.mDefaultTrackWidthUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var mDefaultTrackWidthUnit_property_selection : EBSelection <Int> { return self.mDefaultTrackWidthUnit_property.prop }

  //····················································································································
  //   Atomic property: mCustomTrackWidth
  //····················································································································

  let mCustomTrackWidth_property = EBStoredProperty_Int (defaultValue: 45720)

  //····················································································································

  final func reset_mCustomTrackWidth_toDefaultValue () {
    self.mCustomTrackWidth = 45720
  }

  //····················································································································

  final var mCustomTrackWidth : Int {
    get { return self.mCustomTrackWidth_property.propval }
    set { self.mCustomTrackWidth_property.setProp (newValue) }
  }

  //····················································································································

  final var mCustomTrackWidth_property_selection : EBSelection <Int> { return self.mCustomTrackWidth_property.prop }

  //····················································································································
  //   Atomic property: mCustomTrackWidthUnit
  //····················································································································

  let mCustomTrackWidthUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  final func reset_mCustomTrackWidthUnit_toDefaultValue () {
    self.mCustomTrackWidthUnit = 2286
  }

  //····················································································································

  final var mCustomTrackWidthUnit : Int {
    get { return self.mCustomTrackWidthUnit_property.propval }
    set { self.mCustomTrackWidthUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var mCustomTrackWidthUnit_property_selection : EBSelection <Int> { return self.mCustomTrackWidthUnit_property.prop }

  //····················································································································
  //   Atomic property: mUsesCustomTrackWidth
  //····················································································································

  let mUsesCustomTrackWidth_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  final func reset_mUsesCustomTrackWidth_toDefaultValue () {
    self.mUsesCustomTrackWidth = false
  }

  //····················································································································

  final var mUsesCustomTrackWidth : Bool {
    get { return self.mUsesCustomTrackWidth_property.propval }
    set { self.mUsesCustomTrackWidth_property.setProp (newValue) }
  }

  //····················································································································

  final var mUsesCustomTrackWidth_property_selection : EBSelection <Bool> { return self.mUsesCustomTrackWidth_property.prop }

  //····················································································································
  //   Atomic property: mIsPreservedByAutoRouter
  //····················································································································

  let mIsPreservedByAutoRouter_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  final func reset_mIsPreservedByAutoRouter_toDefaultValue () {
    self.mIsPreservedByAutoRouter = false
  }

  //····················································································································

  final var mIsPreservedByAutoRouter : Bool {
    get { return self.mIsPreservedByAutoRouter_property.propval }
    set { self.mIsPreservedByAutoRouter_property.setProp (newValue) }
  }

  //····················································································································

  final var mIsPreservedByAutoRouter_property_selection : EBSelection <Bool> { return self.mIsPreservedByAutoRouter_property.prop }

  //····················································································································
  //   To one property: mConnectorP1
  //····················································································································

  let mConnectorP1_property = StoredObject_BoardConnector (usedForSignature: false)

  //····················································································································

  var mConnectorP1_property_selection : EBSelection <BoardConnector?> {
    return .single (self.mConnectorP1_property.propval)
  }

  //····················································································································

  var mConnectorP1 : BoardConnector? {
    get {
      return self.mConnectorP1_property.propval
    }
    set {
      if self.mConnectorP1_property.propval != nil {
        self.mConnectorP1_property.setProp (nil)
      }
      if newValue != nil {
        self.mConnectorP1_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mConnectorP1_none : StoredObject_BoardConnector { return self.mConnectorP1_property }

  //····················································································································

  var mConnectorP1_none_selection : EBSelection <Bool> {
    return .single (self.mConnectorP1_property.propval == nil)
  }

  //····················································································································
  //   To one property: mConnectorP2
  //····················································································································

  let mConnectorP2_property = StoredObject_BoardConnector (usedForSignature: false)

  //····················································································································

  var mConnectorP2_property_selection : EBSelection <BoardConnector?> {
    return .single (self.mConnectorP2_property.propval)
  }

  //····················································································································

  var mConnectorP2 : BoardConnector? {
    get {
      return self.mConnectorP2_property.propval
    }
    set {
      if self.mConnectorP2_property.propval != nil {
        self.mConnectorP2_property.setProp (nil)
      }
      if newValue != nil {
        self.mConnectorP2_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mConnectorP2_none : StoredObject_BoardConnector { return self.mConnectorP2_property }

  //····················································································································

  var mConnectorP2_none_selection : EBSelection <Bool> {
    return .single (self.mConnectorP2_property.propval == nil)
  }

  //····················································································································
  //   To one property: mNet
  //····················································································································

  let mNet_property = StoredObject_NetInProject (usedForSignature: false)

  //····················································································································

  var mNet_property_selection : EBSelection <NetInProject?> {
    return .single (self.mNet_property.propval)
  }

  //····················································································································

  var mNet : NetInProject? {
    get {
      return self.mNet_property.propval
    }
    set {
      if self.mNet_property.propval != nil {
        self.mNet_property.setProp (nil)
      }
      if newValue != nil {
        self.mNet_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mNet_none : StoredObject_NetInProject { return self.mNet_property }

  //····················································································································

  var mNet_none_selection : EBSelection <Bool> {
    return .single (self.mNet_property.propval == nil)
  }

  //····················································································································
  //   Transient property: actualTrackWidth
  //····················································································································

  let actualTrackWidth_property = EBTransientProperty_Int ()

  //····················································································································

  var actualTrackWidth_property_selection : EBSelection <Int> {
    return self.actualTrackWidth_property.prop
  }

  //····················································································································

  var actualTrackWidth : Int? {
    switch self.actualTrackWidth_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netName
  //····················································································································

  let netName_property = EBTransientProperty_String ()

  //····················································································································

  var netName_property_selection : EBSelection <String> {
    return self.netName_property.prop
  }

  //····················································································································

  var netName : String? {
    switch self.netName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netClassName
  //····················································································································

  let netClassName_property = EBTransientProperty_String ()

  //····················································································································

  var netClassName_property_selection : EBSelection <String> {
    return self.netClassName_property.prop
  }

  //····················································································································

  var netClassName : String? {
    switch self.netClassName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netClassTrackWidth
  //····················································································································

  let netClassTrackWidth_property = EBTransientProperty_Int ()

  //····················································································································

  var netClassTrackWidth_property_selection : EBSelection <Int> {
    return self.netClassTrackWidth_property.prop
  }

  //····················································································································

  var netClassTrackWidth : Int? {
    switch self.netClassTrackWidth_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netClassViaHoleDiameter
  //····················································································································

  let netClassViaHoleDiameter_property = EBTransientProperty_Int ()

  //····················································································································

  var netClassViaHoleDiameter_property_selection : EBSelection <Int> {
    return self.netClassViaHoleDiameter_property.prop
  }

  //····················································································································

  var netClassViaHoleDiameter : Int? {
    switch self.netClassViaHoleDiameter_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netClassViaPadDiameter
  //····················································································································

  let netClassViaPadDiameter_property = EBTransientProperty_Int ()

  //····················································································································

  var netClassViaPadDiameter_property_selection : EBSelection <Int> {
    return self.netClassViaPadDiameter_property.prop
  }

  //····················································································································

  var netClassViaPadDiameter : Int? {
    switch self.netClassViaPadDiameter_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: endPointsLocation
  //····················································································································

  let endPointsLocation_property = EBTransientProperty_CanariPointArray ()

  //····················································································································

  var endPointsLocation_property_selection : EBSelection <CanariPointArray> {
    return self.endPointsLocation_property.prop
  }

  //····················································································································

  var endPointsLocation : CanariPointArray? {
    switch self.endPointsLocation_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
    self.configureObject ()
  }
  
  //····················································································································

  private final func configureObject () {
  //--- Atomic property: mSide
    self.mSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mDefaultTrackWidthUnit
    self.mDefaultTrackWidthUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mCustomTrackWidth
    self.mCustomTrackWidth_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mCustomTrackWidthUnit
    self.mCustomTrackWidthUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mUsesCustomTrackWidth
    self.mUsesCustomTrackWidth_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mIsPreservedByAutoRouter
    self.mIsPreservedByAutoRouter_property.ebUndoManager = self.ebUndoManager
  //--- To one property: mConnectorP1 (has opposite to many relationship: mTracksP1)
    self.mConnectorP1_property.ebUndoManager = self.ebUndoManager
    self.mConnectorP1_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mTracksP1_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mTracksP1_property.remove (me) } }
    )
  //--- To one property: mConnectorP2 (has opposite to many relationship: mTracksP2)
    self.mConnectorP2_property.ebUndoManager = self.ebUndoManager
    self.mConnectorP2_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mTracksP2_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mTracksP2_property.remove (me) } }
    )
  //--- To one property: mNet (has opposite to many relationship: mTracks)
    self.mNet_property.ebUndoManager = self.ebUndoManager
    self.mNet_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mTracks_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mTracks_property.remove (me) } }
    )
  //--- Atomic property: actualTrackWidth
    self.actualTrackWidth_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mNet_property.netClassTrackWidth_property_selection.kind ()
        kind &= unwSelf.mUsesCustomTrackWidth_property_selection.kind ()
        kind &= unwSelf.mCustomTrackWidth_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNet_property.netClassTrackWidth_property_selection, unwSelf.mUsesCustomTrackWidth_property_selection, unwSelf.mCustomTrackWidth_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_BoardTrack_actualTrackWidth (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.addEBObserverOf_netClassTrackWidth (self.actualTrackWidth_property)
    self.mUsesCustomTrackWidth_property.addEBObserver (self.actualTrackWidth_property)
    self.mCustomTrackWidth_property.addEBObserver (self.actualTrackWidth_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mConnectorP1_property.location_property_selection.kind ()
        kind &= unwSelf.mConnectorP1_property.connectedToComponent_property_selection.kind ()
        kind &= unwSelf.mConnectorP2_property.location_property_selection.kind ()
        kind &= unwSelf.mConnectorP2_property.connectedToComponent_property_selection.kind ()
        kind &= g_Preferences!.frontSideLayoutColorForBoard_property_selection.kind ()
        kind &= g_Preferences!.backSideLayoutColorForBoard_property_selection.kind ()
        kind &= unwSelf.mSide_property_selection.kind ()
        kind &= unwSelf.actualTrackWidth_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mConnectorP1_property.location_property_selection, unwSelf.mConnectorP1_property.connectedToComponent_property_selection, unwSelf.mConnectorP2_property.location_property_selection, unwSelf.mConnectorP2_property.connectedToComponent_property_selection, g_Preferences!.frontSideLayoutColorForBoard_property_selection, g_Preferences!.backSideLayoutColorForBoard_property_selection, unwSelf.mSide_property_selection, unwSelf.actualTrackWidth_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (transient_BoardTrack_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mConnectorP1_property.addEBObserverOf_location (self.selectionDisplay_property)
    self.mConnectorP1_property.addEBObserverOf_connectedToComponent (self.selectionDisplay_property)
    self.mConnectorP2_property.addEBObserverOf_location (self.selectionDisplay_property)
    self.mConnectorP2_property.addEBObserverOf_connectedToComponent (self.selectionDisplay_property)
    g_Preferences?.frontSideLayoutColorForBoard_property.addEBObserver (self.selectionDisplay_property)
    g_Preferences?.backSideLayoutColorForBoard_property.addEBObserver (self.selectionDisplay_property)
    self.mSide_property.addEBObserver (self.selectionDisplay_property)
    self.actualTrackWidth_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: netName
    self.netName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNet_property.mNetName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNet_property.mNetName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardTrack_netName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.addEBObserverOf_mNetName (self.netName_property)
  //--- Atomic property: netClassName
    self.netClassName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNet_property.netClassName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNet_property.netClassName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardTrack_netClassName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.addEBObserverOf_netClassName (self.netClassName_property)
  //--- Atomic property: netClassTrackWidth
    self.netClassTrackWidth_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNet_property.netClassTrackWidth_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNet_property.netClassTrackWidth_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardTrack_netClassTrackWidth (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.addEBObserverOf_netClassTrackWidth (self.netClassTrackWidth_property)
  //--- Atomic property: netClassViaHoleDiameter
    self.netClassViaHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNet_property.netClassViaHoleDiameter_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNet_property.netClassViaHoleDiameter_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardTrack_netClassViaHoleDiameter (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.addEBObserverOf_netClassViaHoleDiameter (self.netClassViaHoleDiameter_property)
  //--- Atomic property: netClassViaPadDiameter
    self.netClassViaPadDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNet_property.netClassViaPadDiameter_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNet_property.netClassViaPadDiameter_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardTrack_netClassViaPadDiameter (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNet_property.addEBObserverOf_netClassViaPadDiameter (self.netClassViaPadDiameter_property)
  //--- Atomic property: trackLength
    self.trackLength_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mConnectorP1_property.location_property_selection.kind ()
        kind &= unwSelf.mConnectorP2_property.location_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mConnectorP1_property.location_property_selection, unwSelf.mConnectorP2_property.location_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_BoardTrack_trackLength (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mConnectorP1_property.addEBObserverOf_location (self.trackLength_property)
    self.mConnectorP2_property.addEBObserverOf_location (self.trackLength_property)
  //--- Atomic property: endPointsLocation
    self.endPointsLocation_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mConnectorP1_property.location_property_selection.kind ()
        kind &= unwSelf.mConnectorP2_property.location_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mConnectorP1_property.location_property_selection, unwSelf.mConnectorP2_property.location_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_BoardTrack_endPointsLocation (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mConnectorP1_property.addEBObserverOf_location (self.endPointsLocation_property)
    self.mConnectorP2_property.addEBObserverOf_location (self.endPointsLocation_property)
  //--- Atomic property: signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mSide_property_selection.kind ()
        kind &= unwSelf.actualTrackWidth_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSide_property_selection, unwSelf.actualTrackWidth_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_BoardTrack_signatureForERCChecking (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSide_property.addEBObserver (self.signatureForERCChecking_property)
    self.actualTrackWidth_property.addEBObserver (self.signatureForERCChecking_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mConnectorP1_property.location_property_selection.kind ()
        kind &= unwSelf.mConnectorP2_property.location_property_selection.kind ()
        kind &= g_Preferences!.displayFrontLayoutForBoard_property_selection.kind ()
        kind &= g_Preferences!.displayBackLayoutForBoard_property_selection.kind ()
        kind &= g_Preferences!.frontSideLayoutColorForBoard_property_selection.kind ()
        kind &= g_Preferences!.backSideLayoutColorForBoard_property_selection.kind ()
        kind &= unwSelf.actualTrackWidth_property_selection.kind ()
        kind &= unwSelf.mSide_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mConnectorP1_property.location_property_selection, unwSelf.mConnectorP2_property.location_property_selection, g_Preferences!.displayFrontLayoutForBoard_property_selection, g_Preferences!.displayBackLayoutForBoard_property_selection, g_Preferences!.frontSideLayoutColorForBoard_property_selection, g_Preferences!.backSideLayoutColorForBoard_property_selection, unwSelf.actualTrackWidth_property_selection, unwSelf.mSide_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (transient_BoardTrack_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mConnectorP1_property.addEBObserverOf_location (self.objectDisplay_property)
    self.mConnectorP2_property.addEBObserverOf_location (self.objectDisplay_property)
    g_Preferences?.displayFrontLayoutForBoard_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.displayBackLayoutForBoard_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSideLayoutColorForBoard_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.backSideLayoutColorForBoard_property.addEBObserver (self.objectDisplay_property)
    self.actualTrackWidth_property.addEBObserver (self.objectDisplay_property)
    self.mSide_property.addEBObserver (self.objectDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mNet_property.removeEBObserverOf_netClassTrackWidth (self.actualTrackWidth_property)
    self.mUsesCustomTrackWidth_property.removeEBObserver (self.actualTrackWidth_property)
    self.mCustomTrackWidth_property.removeEBObserver (self.actualTrackWidth_property)
    self.mConnectorP1_property.removeEBObserverOf_location (self.selectionDisplay_property)
    self.mConnectorP1_property.removeEBObserverOf_connectedToComponent (self.selectionDisplay_property)
    self.mConnectorP2_property.removeEBObserverOf_location (self.selectionDisplay_property)
    self.mConnectorP2_property.removeEBObserverOf_connectedToComponent (self.selectionDisplay_property)
    g_Preferences?.frontSideLayoutColorForBoard_property.removeEBObserver (self.selectionDisplay_property)
    g_Preferences?.backSideLayoutColorForBoard_property.removeEBObserver (self.selectionDisplay_property)
    self.mSide_property.removeEBObserver (self.selectionDisplay_property)
    self.actualTrackWidth_property.removeEBObserver (self.selectionDisplay_property)
    self.mNet_property.removeEBObserverOf_mNetName (self.netName_property)
    self.mNet_property.removeEBObserverOf_netClassName (self.netClassName_property)
    self.mNet_property.removeEBObserverOf_netClassTrackWidth (self.netClassTrackWidth_property)
    self.mNet_property.removeEBObserverOf_netClassViaHoleDiameter (self.netClassViaHoleDiameter_property)
    self.mNet_property.removeEBObserverOf_netClassViaPadDiameter (self.netClassViaPadDiameter_property)
    self.mConnectorP1_property.removeEBObserverOf_location (self.trackLength_property)
    self.mConnectorP2_property.removeEBObserverOf_location (self.trackLength_property)
    self.mConnectorP1_property.removeEBObserverOf_location (self.endPointsLocation_property)
    self.mConnectorP2_property.removeEBObserverOf_location (self.endPointsLocation_property)
    self.mSide_property.removeEBObserver (self.signatureForERCChecking_property)
    self.actualTrackWidth_property.removeEBObserver (self.signatureForERCChecking_property)
    self.mConnectorP1_property.removeEBObserverOf_location (self.objectDisplay_property)
    self.mConnectorP2_property.removeEBObserverOf_location (self.objectDisplay_property)
    g_Preferences?.displayFrontLayoutForBoard_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.displayBackLayoutForBoard_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSideLayoutColorForBoard_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.backSideLayoutColorForBoard_property.removeEBObserver (self.objectDisplay_property)
    self.actualTrackWidth_property.removeEBObserver (self.objectDisplay_property)
    self.mSide_property.removeEBObserver (self.objectDisplay_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mSide",
      idx: self.mSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSide_property.mObserverExplorer,
      valueExplorer: &self.mSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDefaultTrackWidthUnit",
      idx: self.mDefaultTrackWidthUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDefaultTrackWidthUnit_property.mObserverExplorer,
      valueExplorer: &self.mDefaultTrackWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mCustomTrackWidth",
      idx: self.mCustomTrackWidth_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCustomTrackWidth_property.mObserverExplorer,
      valueExplorer: &self.mCustomTrackWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mCustomTrackWidthUnit",
      idx: self.mCustomTrackWidthUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mCustomTrackWidthUnit_property.mObserverExplorer,
      valueExplorer: &self.mCustomTrackWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mUsesCustomTrackWidth",
      idx: self.mUsesCustomTrackWidth_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mUsesCustomTrackWidth_property.mObserverExplorer,
      valueExplorer: &self.mUsesCustomTrackWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mIsPreservedByAutoRouter",
      idx: self.mIsPreservedByAutoRouter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mIsPreservedByAutoRouter_property.mObserverExplorer,
      valueExplorer: &self.mIsPreservedByAutoRouter_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "actualTrackWidth",
      idx: self.actualTrackWidth_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.actualTrackWidth_property.mObserverExplorer,
      valueExplorer: &self.actualTrackWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx: self.selectionDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
      valueExplorer: &self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netName",
      idx: self.netName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netName_property.mObserverExplorer,
      valueExplorer: &self.netName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netClassName",
      idx: self.netClassName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netClassName_property.mObserverExplorer,
      valueExplorer: &self.netClassName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netClassTrackWidth",
      idx: self.netClassTrackWidth_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netClassTrackWidth_property.mObserverExplorer,
      valueExplorer: &self.netClassTrackWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netClassViaHoleDiameter",
      idx: self.netClassViaHoleDiameter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netClassViaHoleDiameter_property.mObserverExplorer,
      valueExplorer: &self.netClassViaHoleDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netClassViaPadDiameter",
      idx: self.netClassViaPadDiameter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netClassViaPadDiameter_property.mObserverExplorer,
      valueExplorer: &self.netClassViaPadDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "trackLength",
      idx: self.trackLength_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.trackLength_property.mObserverExplorer,
      valueExplorer: &self.trackLength_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "endPointsLocation",
      idx: self.endPointsLocation_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.endPointsLocation_property.mObserverExplorer,
      valueExplorer: &self.endPointsLocation_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "signatureForERCChecking",
      idx: self.signatureForERCChecking_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.signatureForERCChecking_property.mObserverExplorer,
      valueExplorer: &self.signatureForERCChecking_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx: self.objectDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.objectDisplay_property.mObserverExplorer,
      valueExplorer: &self.objectDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "mConnectorP1",
      idx:self.mConnectorP1_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mConnectorP1_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mConnectorP2",
      idx:self.mConnectorP2_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mConnectorP2_property.mValueExplorer
    )
    createEntryForToOneRelationshipNamed (
      "mNet",
      idx:self.mNet_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mNet_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mSide
    self.mSide_property.mObserverExplorer = nil
    self.mSide_property.mValueExplorer = nil
  //--- Atomic property: mDefaultTrackWidthUnit
    self.mDefaultTrackWidthUnit_property.mObserverExplorer = nil
    self.mDefaultTrackWidthUnit_property.mValueExplorer = nil
  //--- Atomic property: mCustomTrackWidth
    self.mCustomTrackWidth_property.mObserverExplorer = nil
    self.mCustomTrackWidth_property.mValueExplorer = nil
  //--- Atomic property: mCustomTrackWidthUnit
    self.mCustomTrackWidthUnit_property.mObserverExplorer = nil
    self.mCustomTrackWidthUnit_property.mValueExplorer = nil
  //--- Atomic property: mUsesCustomTrackWidth
    self.mUsesCustomTrackWidth_property.mObserverExplorer = nil
    self.mUsesCustomTrackWidth_property.mValueExplorer = nil
  //--- Atomic property: mIsPreservedByAutoRouter
    self.mIsPreservedByAutoRouter_property.mObserverExplorer = nil
    self.mIsPreservedByAutoRouter_property.mValueExplorer = nil
  //--- To one property: mConnectorP1
    self.mConnectorP1_property.mObserverExplorer = nil
    self.mConnectorP1_property.mValueExplorer = nil
  //--- To one property: mConnectorP2
    self.mConnectorP2_property.mObserverExplorer = nil
    self.mConnectorP2_property.mValueExplorer = nil
  //--- To one property: mNet
    self.mNet_property.mObserverExplorer = nil
    self.mNet_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mConnectorP1 = nil
    self.mConnectorP2 = nil
    self.mNet = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mSide
    self.mSide_property.storeIn (dictionary: ioDictionary, forKey: "mSide")
  //--- Atomic property: mDefaultTrackWidthUnit
    self.mDefaultTrackWidthUnit_property.storeIn (dictionary: ioDictionary, forKey: "mDefaultTrackWidthUnit")
  //--- Atomic property: mCustomTrackWidth
    self.mCustomTrackWidth_property.storeIn (dictionary: ioDictionary, forKey: "mCustomTrackWidth")
  //--- Atomic property: mCustomTrackWidthUnit
    self.mCustomTrackWidthUnit_property.storeIn (dictionary: ioDictionary, forKey: "mCustomTrackWidthUnit")
  //--- Atomic property: mUsesCustomTrackWidth
    self.mUsesCustomTrackWidth_property.storeIn (dictionary: ioDictionary, forKey: "mUsesCustomTrackWidth")
  //--- Atomic property: mIsPreservedByAutoRouter
    self.mIsPreservedByAutoRouter_property.storeIn (dictionary: ioDictionary, forKey: "mIsPreservedByAutoRouter")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To one property: mConnectorP1
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mConnectorP1",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? BoardConnector {
        self.mConnectorP1_property.setProp (entity)
      }
    }
  //--- To one property: mConnectorP2
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mConnectorP2",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? BoardConnector {
        self.mConnectorP2_property.setProp (entity)
      }
    }
  //--- To one property: mNet
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mNet",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? NetInProject {
        self.mNet_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mSide
    self.mSide_property.readFrom (dictionary: inDictionary, forKey: "mSide")
  //--- Atomic property: mDefaultTrackWidthUnit
    self.mDefaultTrackWidthUnit_property.readFrom (dictionary: inDictionary, forKey: "mDefaultTrackWidthUnit")
  //--- Atomic property: mCustomTrackWidth
    self.mCustomTrackWidth_property.readFrom (dictionary: inDictionary, forKey: "mCustomTrackWidth")
  //--- Atomic property: mCustomTrackWidthUnit
    self.mCustomTrackWidthUnit_property.readFrom (dictionary: inDictionary, forKey: "mCustomTrackWidthUnit")
  //--- Atomic property: mUsesCustomTrackWidth
    self.mUsesCustomTrackWidth_property.readFrom (dictionary: inDictionary, forKey: "mUsesCustomTrackWidth")
  //--- Atomic property: mIsPreservedByAutoRouter
    self.mIsPreservedByAutoRouter_property.readFrom (dictionary: inDictionary, forKey: "mIsPreservedByAutoRouter")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mSide\n"
    ioString += "mDefaultTrackWidthUnit\n"
    ioString += "mCustomTrackWidth\n"
    ioString += "mCustomTrackWidthUnit\n"
    ioString += "mUsesCustomTrackWidth\n"
    ioString += "mIsPreservedByAutoRouter\n"
  //--- To one relationships
    ioString += "mConnectorP1\n"
    ioString += "mConnectorP2\n"
    ioString += "mNet\n"
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mSide.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDefaultTrackWidthUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mCustomTrackWidth.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mCustomTrackWidthUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mUsesCustomTrackWidth.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mIsPreservedByAutoRouter.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.mConnectorP1 {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mConnectorP2 {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
    if let object = self.mNet {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To one property: mConnectorP1
    if let object = self.mConnectorP1 {
      objects.append (object)
    }
  //--- To one property: mConnectorP2
    if let object = self.mConnectorP2 {
      objects.append (object)
    }
  //--- To one property: mNet
    if let object = self.mNet {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To one property: mConnectorP1
    if let object = self.mConnectorP1 {
      objects.append (object)
    }
  //--- To one property: mConnectorP2
    if let object = self.mConnectorP2 {
      objects.append (object)
    }
  //--- To one property: mNet
    if let object = self.mNet {
      objects.append (object)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------

