//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum TrackShape : Int, EnumPropertyProtocol {
  case round = 0
  case rect = 1


  //····················································································································

  init? (string : String) {
    switch string {
      case "round" : self = .round // 0
      case "rect" : self = .rect // 1
      case _ : return nil
    }
  }

  //····················································································································

  func descriptionForExplorer () -> String {
    switch self {
      case .round : return "round" // 0
      case .rect : return "rect" // 1
    }
  }

  //····················································································································
  //  Enum generic bindings utility functions
  //····················································································································

  static func buildfromRawValue (rawValue : Int) -> TrackShape? {
    if let v = TrackShape (rawValue:rawValue) {
      return v
    }else{
      return nil
    }
  }

  //····················································································································

  func enumfromRawValue (rawValue : Int) -> TrackShape {
    var result = self
    let v : TrackShape? = TrackShape (rawValue:rawValue) ;
    if let unwrappedV = v {
      result = unwrappedV
    }
    return result
  }

  //····················································································································
  //  ValuePropertyProtocol
  //····················································································································

  func ebHashValue () -> UInt32 {
    return UInt32 (self.rawValue)
  }

  func convertToNSObject () -> NSObject {
    return NSNumber (value: self.rawValue)
  }

  static func convertFromNSObject (object : NSObject) -> TrackShape {
    var result = TrackShape.round
    if let number = object as? NSNumber, let v = TrackShape (rawValue: number.intValue) {
      result = v
    }
    return result
  }

  //····················································································································

  func appendPropertyValueTo (_ ioData : inout Data) {
    ioData.append (base62Encoded: self.rawValue)
  }
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_TrackShape = EBReadOnlyEnumProperty <TrackShape>
typealias EBTransientProperty_TrackShape = EBTransientEnumProperty <TrackShape>
typealias EBReadWriteProperty_TrackShape = EBReadWriteEnumProperty <TrackShape>
typealias EBStoredProperty_TrackShape = EBStoredEnumProperty <TrackShape>
typealias EBPropertyProxy_TrackShape = EBPropertyEnumProxy <TrackShape>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
