//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NCInSchematics_mOrientation : class {
  var mOrientation : QuadrantRotation { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NCInSchematics_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol NCInSchematics_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: NCInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class NCInSchematics : SchematicsObject,
         NCInSchematics_mOrientation,
         NCInSchematics_objectDisplay,
         NCInSchematics_selectionDisplay {

  //····················································································································
  //   Atomic property: mOrientation
  //····················································································································

  let mOrientation_property = EBStoredProperty_QuadrantRotation (defaultValue: QuadrantRotation.rotation0)

  //····················································································································

  var mOrientation : QuadrantRotation {
    get { return self.mOrientation_property.propval }
    set { self.mOrientation_property.setProp (newValue) }
  }

  //····················································································································

  var mOrientation_property_selection : EBSelection <QuadrantRotation> { return self.mOrientation_property.prop }

  //····················································································································
  //   To one property: mPoint
  //····················································································································

  let mPoint_property = ToOneRelationship_NCInSchematics_mPoint ()

  //····················································································································

  var mPoint_property_selection : EBSelection <PointInSchematics?> {
    return .single (self.mPoint_property.propval)
  }

  //····················································································································

  var mPoint : PointInSchematics? {
    get { return self.mPoint_property.propval }
    set { self.mPoint_property.setProp (newValue) }
  }

  //····················································································································

  var mPoint_none : ToOneRelationship_NCInSchematics_mPoint { return self.mPoint_property }

  //····················································································································

  var mPoint_none_selection : EBSelection <Bool> {
    return .single (self.mPoint_property.propval == nil)
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mOrientation
    self.mOrientation_property.ebUndoManager = self.ebUndoManager
  //--- To one property: mPoint
    self.mPoint_property.owner = self
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mPoint_property.location_property_selection.kind ()
        kind &= unwSelf.mOrientation_property_selection.kind ()
        kind &= g_Preferences!.pinNameFont_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mPoint_property.location_property_selection, unwSelf.mOrientation_property_selection, g_Preferences!.pinNameFont_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_NCInSchematics_objectDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPoint_property.addEBObserverOf_location (self.objectDisplay_property)
    self.mOrientation_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.pinNameFont_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mPoint_property.location_property_selection.kind ()
        kind &= unwSelf.mOrientation_property_selection.kind ()
        kind &= g_Preferences!.pinNameFont_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mPoint_property.location_property_selection, unwSelf.mOrientation_property_selection, g_Preferences!.pinNameFont_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_NCInSchematics_selectionDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPoint_property.addEBObserverOf_location (self.selectionDisplay_property)
    self.mOrientation_property.addEBObserver (self.selectionDisplay_property)
    g_Preferences?.pinNameFont_property.addEBObserver (self.selectionDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mPoint_property.removeEBObserverOf_location (self.objectDisplay_property)
    self.mOrientation_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.pinNameFont_property.removeEBObserver (self.objectDisplay_property)
    self.mPoint_property.removeEBObserverOf_location (self.selectionDisplay_property)
    self.mOrientation_property.removeEBObserver (self.selectionDisplay_property)
    g_Preferences?.pinNameFont_property.removeEBObserver (self.selectionDisplay_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mOrientation",
      idx:self.mOrientation_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mOrientation_property.mObserverExplorer,
      valueExplorer:&self.mOrientation_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "objectDisplay",
      idx:self.objectDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.objectDisplay_property.mObserverExplorer,
      valueExplorer:&self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx:self.selectionDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectionDisplay_property.mObserverExplorer,
      valueExplorer:&self.selectionDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "mPoint",
      idx:self.mPoint_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mPoint_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mOrientation
    self.mOrientation_property.mObserverExplorer = nil
    self.mOrientation_property.mValueExplorer = nil
  //--- To one property: mPoint
    self.mPoint_property.mObserverExplorer = nil
    self.mPoint_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mPoint_property.setProp (nil)
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mOrientation
    self.mOrientation_property.storeIn (dictionary: ioDictionary, forKey:"mOrientation")
  //--- To one property: mPoint // Opposite is toOne mNC
    self.store (managedObject:self.mPoint_property.propval,
      relationshipName: "mPoint",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To one property: mPoint
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mPoint",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? PointInSchematics {
        self.mPoint_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mOrientation
    self.mOrientation_property.readFrom (dictionary: inDictionary, forKey:"mOrientation")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To one property: mPoint
    if let managedObject = self.mPoint_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To one property: mPoint
    if let managedObject = self.mPoint_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_NCInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_NCInSchematics : ReadOnlyAbstractArrayProperty <NCInSchematics> {

  //····················································································································
  //   Observers of 'mOrientation' stored property
  //····················································································································

  private var mObserversOf_mOrientation = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mOrientation (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mOrientation.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mOrientation_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mOrientation (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mOrientation.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mOrientation_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mOrientation_toElementsOfSet (_ inSet : Set<NCInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_mOrientation.apply { (_ observer : EBEvent) in
        managedObject.mOrientation_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mOrientation_fromElementsOfSet (_ inSet : Set<NCInSchematics>) {
    self.mObserversOf_mOrientation.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mOrientation_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<NCInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<NCInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<NCInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<NCInSchematics>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_NCInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_NCInSchematics : ReadOnlyArrayOf_NCInSchematics {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [NCInSchematics] > > = nil

  //····················································································································

  override var propset : Set <NCInSchematics> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [NCInSchematics] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [NCInSchematics] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  private var mSet = Set <NCInSchematics> ()

  //····················································································································

  private var mCachedValue : EBSelection < [NCInSchematics] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      let cachedValue = unwrappedComputeFunction ()
      self.mCachedValue = cachedValue
      let newSet : Set <NCInSchematics>
      switch cachedValue {
      case .multiple, .empty :
        newSet = Set <NCInSchematics> ()
      case .single (let array) :
        newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_mOrientation_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_mOrientation_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_objectDisplay_toElementsOfSet (addedSet)
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: NCInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_NCInSchematics : ReadOnlyArrayOf_NCInSchematics {

  //····················································································································
 
  func setProp (_ value :  [NCInSchematics]) { } // Abstract method
  
 //····················································································································

  private var mProxyArray = [ProxyArrayOf_NCInSchematics] ()

  //····················································································································

  func attachProxy (_ inProxy : ProxyArrayOf_NCInSchematics) {
    self.mProxyArray.append (inProxy)
    inProxy.updateProxy ()
    self.postEvent ()
  }

  //····················································································································

  func detachProxy (_ inProxy : ProxyArrayOf_NCInSchematics) {
    if let idx = self.mProxyArray.firstIndex(of: inProxy) {
      self.mProxyArray.remove (at: idx)
      self.postEvent ()
    }
  }

  //····················································································································

  internal func propagateProxyUpdate () {
    for proxy in self.mProxyArray {
      proxy.updateProxy ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_NCInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_NCInSchematics : ReadWriteArrayOf_NCInSchematics {

   //····················································································································

  private var mModel : ReadWriteArrayOf_NCInSchematics? = nil

  //····················································································································

  private var mInternalValue : EBSelection < [NCInSchematics] > = .empty {
    didSet {
      if self.mInternalValue != oldValue {
        switch self.mInternalValue {
        case .empty, .multiple :
          self.mCurrentObjectSet = []
        case .single (let v) :
          self.mCurrentObjectSet = Set (v)
        }
        self.propagateProxyUpdate ()
        self.postEvent ()
      }
    }
  }

  //····················································································································

  private var mCurrentObjectSet = Set <NCInSchematics> () {
    didSet {
      if self.mCurrentObjectSet != oldValue {
      //--- Add observers from removed objects
        let removedObjectSet = oldValue.subtracting (self.mCurrentObjectSet)
        self.removeEBObserversOf_mOrientation_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedObjectSet) // Transient property
        self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedObjectSet) // Transient property
      //--- Add observers to added objects
        let addedObjectSet = self.mCurrentObjectSet.subtracting (oldValue)
        self.addEBObserversOf_mOrientation_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_objectDisplay_toElementsOfSet (addedObjectSet) // Transient property
        self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedObjectSet) // Transient property
      }
    }
  }

  //····················································································································

  func bind (_ inModel : ReadWriteArrayOf_NCInSchematics) {
    self.unbind ()
    self.mModel = inModel
    inModel.attachProxy (self)
  }

  //····················································································································

  func unbind () {
    if let model = self.mModel {
      model.detachProxy (self)
      self.mModel = nil
    }
  }

  //····················································································································

  func updateProxy () {
    if let model = self.mModel {
      self.mInternalValue = model.prop
    }else{
      self.mInternalValue = .empty
    }
  }

  //····················································································································

  override func setProp (_ inArrayValue :  [NCInSchematics]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [NCInSchematics] > {
    return self.mInternalValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: NCInSchematics
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_NCInSchematics : ReadWriteArrayOf_NCInSchematics, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : NCInSchematics) -> Void > = nil
  var resetOppositeRelationship : Optional < (_ inManagedObject : NCInSchematics) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [NCInSchematics] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "NCInSchematics") as? NCInSchematics {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <NCInSchematics> ()
  private var mValue = [NCInSchematics] () {
    didSet {
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.resetOppositeRelationship? (managedObject)
            managedObject.mOrientation_property.mSetterDelegate = nil
          }
        //--- Remove observers of stored properties
          self.removeEBObserversOf_mOrientation_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of transient properties
          self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedObjectSet)
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : NCInSchematics in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
            managedObject.mOrientation_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
        //--- Add observers of stored properties
          self.addEBObserversOf_mOrientation_toElementsOfSet (addedObjectSet)
        //--- Add observers of transient properties
          self.addEBObserversOf_objectDisplay_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedObjectSet)
        }
      //--- Notify observers
        self.propagateProxyUpdate ()
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [NCInSchematics] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [NCInSchematics]) { self.mValue = inValue }

  //····················································································································

  override var propval : [NCInSchematics] { return self.mValue }

  //····················································································································

  override var propset : Set <NCInSchematics> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [NCInSchematics]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : NCInSchematics) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : NCInSchematics) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: mPoint
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_NCInSchematics_mPoint : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : NCInSchematics? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  private var mValue : PointInSchematics? {
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.ebUndoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
     //--- Reset old opposite relation ship
        oldValue?.mNC_property.setProp (nil)
      //--- Set new opposite relation ship
        self.mValue?.mNC_property.setProp (unwrappedOwner)
      //--- Remove property observers of old object
        oldValue?.connectedPoints_property.removeEBObserversFrom (&self.mObserversOf_connectedPoints)
        oldValue?.isConnected_property.removeEBObserversFrom (&self.mObserversOf_isConnected)
        oldValue?.issues_property.removeEBObserversFrom (&self.mObserversOf_issues)
        oldValue?.location_property.removeEBObserversFrom (&self.mObserversOf_location)
        oldValue?.mLabels_property.removeEBObserversFrom (&self.mObserversOf_mLabels)
        oldValue?.mSymbolPinName_property.removeEBObserversFrom (&self.mObserversOf_mSymbolPinName)
        oldValue?.mWiresP1s_property.removeEBObserversFrom (&self.mObserversOf_mWiresP1s)
        oldValue?.mWiresP2s_property.removeEBObserversFrom (&self.mObserversOf_mWiresP2s)
        oldValue?.mX_property.removeEBObserversFrom (&self.mObserversOf_mX)
        oldValue?.mY_property.removeEBObserversFrom (&self.mObserversOf_mY)
        oldValue?.netName_property.removeEBObserversFrom (&self.mObserversOf_netName)
      //--- Add property observers to new object
        self.mValue?.connectedPoints_property.addEBObserversFrom (&self.mObserversOf_connectedPoints)
        self.mValue?.isConnected_property.addEBObserversFrom (&self.mObserversOf_isConnected)
        self.mValue?.issues_property.addEBObserversFrom (&self.mObserversOf_issues)
        self.mValue?.location_property.addEBObserversFrom (&self.mObserversOf_location)
        self.mValue?.mLabels_property.addEBObserversFrom (&self.mObserversOf_mLabels)
        self.mValue?.mSymbolPinName_property.addEBObserversFrom (&self.mObserversOf_mSymbolPinName)
        self.mValue?.mWiresP1s_property.addEBObserversFrom (&self.mObserversOf_mWiresP1s)
        self.mValue?.mWiresP2s_property.addEBObserversFrom (&self.mObserversOf_mWiresP2s)
        self.mValue?.mX_property.addEBObserversFrom (&self.mObserversOf_mX)
        self.mValue?.mY_property.addEBObserversFrom (&self.mObserversOf_mY)
        self.mValue?.netName_property.addEBObserversFrom (&self.mObserversOf_netName)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : PointInSchematics? { return self.mValue }

  var prop : EBSelection <PointInSchematics?> { return .single (self.mValue) }

  func setProp (_ value : PointInSchematics?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : PointInSchematics?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : PointInSchematics) {
    if self.mValue === object {
      self.mValue = nil
    }
  }

  //····················································································································
  //   Observable atomic property: connectedPoints
  //····················································································································

  private var mObserversOf_connectedPoints = EBWeakEventSet ()

  //····················································································································

  var connectedPoints_property_selection : EBSelection <CanariPointArray?> {
    if let model = self.propval {
      switch (model.connectedPoints_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.mObserversOf_connectedPoints.insert (inObserver)
    if let object = self.propval {
      object.connectedPoints_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_connectedPoints (_ inObserver : EBEvent) {
    self.mObserversOf_connectedPoints.remove (inObserver)
    if let object = self.propval {
      object.connectedPoints_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: isConnected
  //····················································································································

  private var mObserversOf_isConnected = EBWeakEventSet ()

  //····················································································································

  var isConnected_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.isConnected_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_isConnected (_ inObserver : EBEvent) {
    self.mObserversOf_isConnected.insert (inObserver)
    if let object = self.propval {
      object.isConnected_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_isConnected (_ inObserver : EBEvent) {
    self.mObserversOf_isConnected.remove (inObserver)
    if let object = self.propval {
      object.isConnected_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: issues
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.issues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.mObserversOf_issues.insert (inObserver)
    if let object = self.propval {
      object.issues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.mObserversOf_issues.remove (inObserver)
    if let object = self.propval {
      object.issues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: location
  //····················································································································

  private var mObserversOf_location = EBWeakEventSet ()

  //····················································································································

  var location_property_selection : EBSelection <CanariPoint?> {
    if let model = self.propval {
      switch (model.location_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_location (_ inObserver : EBEvent) {
    self.mObserversOf_location.insert (inObserver)
    if let object = self.propval {
      object.location_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_location (_ inObserver : EBEvent) {
    self.mObserversOf_location.remove (inObserver)
    if let object = self.propval {
      object.location_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mLabels
  //····················································································································

  private var mObserversOf_mLabels = EBWeakEventSet ()

  //····················································································································

  var mLabels_property_selection : EBSelection <[LabelInSchematics]> {
    if let model = self.propval {
      switch (model.mLabels_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mLabels (_ inObserver : EBEvent) {
    self.mObserversOf_mLabels.insert (inObserver)
    if let object = self.propval {
      object.mLabels_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mLabels (_ inObserver : EBEvent) {
    self.mObserversOf_mLabels.remove (inObserver)
    if let object = self.propval {
      object.mLabels_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mSymbolPinName
  //····················································································································

  private var mObserversOf_mSymbolPinName = EBWeakEventSet ()

  //····················································································································

  var mSymbolPinName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mSymbolPinName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolPinName (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolPinName.insert (inObserver)
    if let object = self.propval {
      object.mSymbolPinName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolPinName (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolPinName.remove (inObserver)
    if let object = self.propval {
      object.mSymbolPinName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mWiresP1s
  //····················································································································

  private var mObserversOf_mWiresP1s = EBWeakEventSet ()

  //····················································································································

  var mWiresP1s_property_selection : EBSelection <[WireInSchematics]> {
    if let model = self.propval {
      switch (model.mWiresP1s_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mWiresP1s (_ inObserver : EBEvent) {
    self.mObserversOf_mWiresP1s.insert (inObserver)
    if let object = self.propval {
      object.mWiresP1s_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mWiresP1s (_ inObserver : EBEvent) {
    self.mObserversOf_mWiresP1s.remove (inObserver)
    if let object = self.propval {
      object.mWiresP1s_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mWiresP2s
  //····················································································································

  private var mObserversOf_mWiresP2s = EBWeakEventSet ()

  //····················································································································

  var mWiresP2s_property_selection : EBSelection <[WireInSchematics]> {
    if let model = self.propval {
      switch (model.mWiresP2s_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mWiresP2s (_ inObserver : EBEvent) {
    self.mObserversOf_mWiresP2s.insert (inObserver)
    if let object = self.propval {
      object.mWiresP2s_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mWiresP2s (_ inObserver : EBEvent) {
    self.mObserversOf_mWiresP2s.remove (inObserver)
    if let object = self.propval {
      object.mWiresP2s_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mX
  //····················································································································

  private var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  var mX_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mX_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mX (_ inObserver : EBEvent) {
    self.mObserversOf_mX.insert (inObserver)
    if let object = self.propval {
      object.mX_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mX (_ inObserver : EBEvent) {
    self.mObserversOf_mX.remove (inObserver)
    if let object = self.propval {
      object.mX_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mY
  //····················································································································

  private var mObserversOf_mY = EBWeakEventSet ()

  //····················································································································

  var mY_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mY_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mY (_ inObserver : EBEvent) {
    self.mObserversOf_mY.insert (inObserver)
    if let object = self.propval {
      object.mY_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mY (_ inObserver : EBEvent) {
    self.mObserversOf_mY.remove (inObserver)
    if let object = self.propval {
      object.mY_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: netName
  //····················································································································

  private var mObserversOf_netName = EBWeakEventSet ()

  //····················································································································

  var netName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.netName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_netName (_ inObserver : EBEvent) {
    self.mObserversOf_netName.insert (inObserver)
    if let object = self.propval {
      object.netName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_netName (_ inObserver : EBEvent) {
    self.mObserversOf_netName.remove (inObserver)
    if let object = self.propval {
      object.netName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
