//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

protocol DeviceInProject_mDeviceName : class {
  var mDeviceName : String { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol DeviceInProject_mPrefix : class {
  var mPrefix : String { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol DeviceInProject_mDeviceVersion : class {
  var mDeviceVersion : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol DeviceInProject_mDeviceFileData : class {
  var mDeviceFileData : Data { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol DeviceInProject_versionString : class {
  var versionString : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol DeviceInProject_sizeString : class {
  var sizeString : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol DeviceInProject_canExport : class {
  var canExport : Bool? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol DeviceInProject_packageNames : class {
  var packageNames : StringArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol DeviceInProject_deviceComponentCountString : class {
  var deviceComponentCountString : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol DeviceInProject_canRemove : class {
  var canRemove : Bool? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol DeviceInProject_symbolAndTypesNames : class {
  var symbolAndTypesNames : SymbolInProjectIdentifierArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol DeviceInProject_pinPadAssignments : class {
  var pinPadAssignments : ThreeStringArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol DeviceInProject_deviceSymbolDictionary : class {
  var deviceSymbolDictionary : DeviceSymbolDictionary? { get }
}

//----------------------------------------------------------------------------------------------------------------------
//    Entity: DeviceInProject
//----------------------------------------------------------------------------------------------------------------------

class DeviceInProject : EBManagedObject,
         DeviceInProject_mDeviceName,
         DeviceInProject_mPrefix,
         DeviceInProject_mDeviceVersion,
         DeviceInProject_mDeviceFileData,
         DeviceInProject_versionString,
         DeviceInProject_sizeString,
         DeviceInProject_canExport,
         DeviceInProject_packageNames,
         DeviceInProject_deviceComponentCountString,
         DeviceInProject_canRemove,
         DeviceInProject_symbolAndTypesNames,
         DeviceInProject_pinPadAssignments,
         DeviceInProject_deviceSymbolDictionary {

  //····················································································································
  //   Atomic property: mDeviceName
  //····················································································································

  // final let mDeviceName_property = EBStoredProperty_String (defaultValue: "")

  final let mDeviceName_property : EBStoredProperty_String

  //····················································································································

  final func reset_mDeviceName_toDefaultValue () {
    self.mDeviceName = ""
  }

  //····················································································································

  final var mDeviceName : String {
    get { return self.mDeviceName_property.propval }
    set { self.mDeviceName_property.setProp (newValue) }
  }

  //····················································································································

  final var mDeviceName_property_selection : EBSelection <String> { return self.mDeviceName_property.selection }

  //····················································································································
  //   Atomic property: mPrefix
  //····················································································································

  // final let mPrefix_property = EBStoredProperty_String (defaultValue: "")

  final let mPrefix_property : EBStoredProperty_String

  //····················································································································

  final func reset_mPrefix_toDefaultValue () {
    self.mPrefix = ""
  }

  //····················································································································

  final var mPrefix : String {
    get { return self.mPrefix_property.propval }
    set { self.mPrefix_property.setProp (newValue) }
  }

  //····················································································································

  final var mPrefix_property_selection : EBSelection <String> { return self.mPrefix_property.selection }

  //····················································································································
  //   Atomic property: mDeviceVersion
  //····················································································································

  // final let mDeviceVersion_property = EBStoredProperty_Int (defaultValue: 0)

  final let mDeviceVersion_property : EBStoredProperty_Int

  //····················································································································

  final func reset_mDeviceVersion_toDefaultValue () {
    self.mDeviceVersion = 0
  }

  //····················································································································

  final var mDeviceVersion : Int {
    get { return self.mDeviceVersion_property.propval }
    set { self.mDeviceVersion_property.setProp (newValue) }
  }

  //····················································································································

  final var mDeviceVersion_property_selection : EBSelection <Int> { return self.mDeviceVersion_property.selection }

  //····················································································································
  //   Atomic property: mDeviceFileData
  //····················································································································

  // final let mDeviceFileData_property = EBStoredProperty_Data (defaultValue: Data ())

  final let mDeviceFileData_property : EBStoredProperty_Data

  //····················································································································

  final func reset_mDeviceFileData_toDefaultValue () {
    self.mDeviceFileData = Data ()
  }

  //····················································································································

  final var mDeviceFileData : Data {
    get { return self.mDeviceFileData_property.propval }
    set { self.mDeviceFileData_property.setProp (newValue) }
  }

  //····················································································································

  final var mDeviceFileData_property_selection : EBSelection <Data> { return self.mDeviceFileData_property.selection }

  //····················································································································
  //   To many property: mPackages
  //····················································································································

  final let mPackages_property = StoredArrayOf_DevicePackageInProject (usedForSignature: false)

  //····················································································································

  final var mPackages_property_selection : EBSelection < [DevicePackageInProject] > {
    return self.mPackages_property.selection
  }

  //····················································································································

  final var mPackages : [DevicePackageInProject] {
    get { return self.mPackages_property.propval }
    set { self.mPackages_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mSymbols
  //····················································································································

  final let mSymbols_property = StoredArrayOf_DeviceSymbolInstanceInProject (usedForSignature: false)

  //····················································································································

  final var mSymbols_property_selection : EBSelection < [DeviceSymbolInstanceInProject] > {
    return self.mSymbols_property.selection
  }

  //····················································································································

  final var mSymbols : [DeviceSymbolInstanceInProject] {
    get { return self.mSymbols_property.propval }
    set { self.mSymbols_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mComponents
  //····················································································································

  final let mComponents_property = StoredArrayOf_ComponentInProject (usedForSignature: false)

  //····················································································································

  final var mComponents_property_selection : EBSelection < [ComponentInProject] > {
    return self.mComponents_property.selection
  }

  //····················································································································

  final var mComponents : [ComponentInProject] {
    get { return self.mComponents_property.propval }
    set { self.mComponents_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mPadAssignments
  //····················································································································

  final let mPadAssignments_property = StoredArrayOf_DevicePadAssignmentInProject (usedForSignature: false)

  //····················································································································

  final var mPadAssignments_property_selection : EBSelection < [DevicePadAssignmentInProject] > {
    return self.mPadAssignments_property.selection
  }

  //····················································································································

  final var mPadAssignments : [DevicePadAssignmentInProject] {
    get { return self.mPadAssignments_property.propval }
    set { self.mPadAssignments_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: versionString
  //····················································································································

  final let versionString_property = EBTransientProperty_String ()

  //····················································································································

  final var versionString_property_selection : EBSelection <String> {
    return self.versionString_property.selection
  }

  //····················································································································

  final var versionString : String? {
    switch self.versionString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: sizeString
  //····················································································································

  final let sizeString_property = EBTransientProperty_String ()

  //····················································································································

  final var sizeString_property_selection : EBSelection <String> {
    return self.sizeString_property.selection
  }

  //····················································································································

  final var sizeString : String? {
    switch self.sizeString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canExport
  //····················································································································

  final let canExport_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canExport_property_selection : EBSelection <Bool> {
    return self.canExport_property.selection
  }

  //····················································································································

  final var canExport : Bool? {
    switch self.canExport_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: packageNames
  //····················································································································

  final let packageNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  final var packageNames_property_selection : EBSelection <StringArray> {
    return self.packageNames_property.selection
  }

  //····················································································································

  final var packageNames : StringArray? {
    switch self.packageNames_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: deviceComponentCountString
  //····················································································································

  final let deviceComponentCountString_property = EBTransientProperty_String ()

  //····················································································································

  final var deviceComponentCountString_property_selection : EBSelection <String> {
    return self.deviceComponentCountString_property.selection
  }

  //····················································································································

  final var deviceComponentCountString : String? {
    switch self.deviceComponentCountString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canRemove
  //····················································································································

  final let canRemove_property = EBTransientProperty_Bool ()

  //····················································································································

  final var canRemove_property_selection : EBSelection <Bool> {
    return self.canRemove_property.selection
  }

  //····················································································································

  final var canRemove : Bool? {
    switch self.canRemove_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolAndTypesNames
  //····················································································································

  final let symbolAndTypesNames_property = EBTransientProperty_SymbolInProjectIdentifierArray ()

  //····················································································································

  final var symbolAndTypesNames_property_selection : EBSelection <SymbolInProjectIdentifierArray> {
    return self.symbolAndTypesNames_property.selection
  }

  //····················································································································

  final var symbolAndTypesNames : SymbolInProjectIdentifierArray? {
    switch self.symbolAndTypesNames_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: pinPadAssignments
  //····················································································································

  final let pinPadAssignments_property = EBTransientProperty_ThreeStringArray ()

  //····················································································································

  final var pinPadAssignments_property_selection : EBSelection <ThreeStringArray> {
    return self.pinPadAssignments_property.selection
  }

  //····················································································································

  final var pinPadAssignments : ThreeStringArray? {
    switch self.pinPadAssignments_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: deviceSymbolDictionary
  //····················································································································

  final let deviceSymbolDictionary_property = EBTransientProperty_DeviceSymbolDictionary ()

  //····················································································································

  final var deviceSymbolDictionary_property_selection : EBSelection <DeviceSymbolDictionary> {
    return self.deviceSymbolDictionary_property.selection
  }

  //····················································································································

  final var deviceSymbolDictionary : DeviceSymbolDictionary? {
    switch self.deviceSymbolDictionary_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    self.mDeviceName_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.mPrefix_property = EBStoredProperty_String (defaultValue: "", undoManager: ebUndoManager)
    self.mDeviceVersion_property = EBStoredProperty_Int (defaultValue: 0, undoManager: ebUndoManager)
    self.mDeviceFileData_property = EBStoredProperty_Data (defaultValue: Data (), undoManager: ebUndoManager)
    super.init (ebUndoManager)
    self.configureObject ()
  }
  
  //····················································································································

  private final func configureObject () {
  //--- To many property: mPackages (no option)
    self.mPackages_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mSymbols (no option)
    self.mSymbols_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mComponents (has opposite relationship)
    self.mComponents_property.ebUndoManager = self.ebUndoManager
    self.mComponents_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mDevice_property.setProp (me) } },
      resetter: { inObject in inObject.mDevice_property.setProp (nil) }
    )
  //--- To many property: mPadAssignments (no option)
    self.mPadAssignments_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: versionString
    self.versionString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDeviceVersion_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mDeviceVersion_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceInProject_versionString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDeviceVersion_property.addEBObserver (self.versionString_property)
  //--- Atomic property: sizeString
    self.sizeString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDeviceFileData_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mDeviceFileData_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceInProject_sizeString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDeviceFileData_property.addEBObserver (self.sizeString_property)
  //--- Atomic property: canExport
    self.canExport_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mDeviceFileData_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mDeviceFileData_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceInProject_canExport (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mDeviceFileData_property.addEBObserver (self.canExport_property)
  //--- Atomic property: packageNames
    self.packageNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mPackages_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mPackages_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceInProject_packageNames (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPackages_property.addEBObserverOf_mPackageName (self.packageNames_property)
  //--- Atomic property: deviceComponentCountString
    self.deviceComponentCountString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mComponents_property.count_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mComponents_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceInProject_deviceComponentCountString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mComponents_property.addEBObserver (self.deviceComponentCountString_property)
  //--- Atomic property: canRemove
    self.canRemove_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mComponents_property.count_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mComponents_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceInProject_canRemove (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mComponents_property.addEBObserver (self.canRemove_property)
  //--- Atomic property: symbolAndTypesNames
    self.symbolAndTypesNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSymbols_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSymbols_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceInProject_symbolAndTypesNames (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbols_property.addEBObserverOf_symbolAndTypeName (self.symbolAndTypesNames_property)
  //--- Atomic property: pinPadAssignments
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mPadAssignments_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mPadAssignments_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceInProject_pinPadAssignments (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPadAssignments_property.addEBObserverOf_pinPadAssignment (self.pinPadAssignments_property)
  //--- Atomic property: deviceSymbolDictionary
    self.deviceSymbolDictionary_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mPadAssignments_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        kind &= unwSelf.mSymbols_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mPadAssignments_property_selection, unwSelf.mSymbols_property_selection, unwSelf.mSymbols_property_selection, unwSelf.mSymbols_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_DeviceInProject_deviceSymbolDictionary (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPadAssignments_property.addEBObserverOf_descriptor (self.deviceSymbolDictionary_property)
    self.mSymbols_property.addEBObserverOf_symbolAndTypeName (self.deviceSymbolDictionary_property)
    self.mSymbols_property.addEBObserverOf_filledBezierPath (self.deviceSymbolDictionary_property)
    self.mSymbols_property.addEBObserverOf_strokeBezierPath (self.deviceSymbolDictionary_property)
  //--- Install undoers and opposite setter for relationships
    self.mComponents_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mDevice_property.setProp (me) } },
      resetter: { inObject in inObject.mDevice_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    // self.mDeviceVersion_property.removeEBObserver (self.versionString_property)
    // self.mDeviceFileData_property.removeEBObserver (self.sizeString_property)
    // self.mDeviceFileData_property.removeEBObserver (self.canExport_property)
    // self.mPackages_property.removeEBObserverOf_mPackageName (self.packageNames_property)
    // self.mComponents_property.removeEBObserver (self.deviceComponentCountString_property)
    // self.mComponents_property.removeEBObserver (self.canRemove_property)
    // self.mSymbols_property.removeEBObserverOf_symbolAndTypeName (self.symbolAndTypesNames_property)
    // self.mPadAssignments_property.removeEBObserverOf_pinPadAssignment (self.pinPadAssignments_property)
    // self.mPadAssignments_property.removeEBObserverOf_descriptor (self.deviceSymbolDictionary_property)
    // self.mSymbols_property.removeEBObserverOf_symbolAndTypeName (self.deviceSymbolDictionary_property)
    // self.mSymbols_property.removeEBObserverOf_filledBezierPath (self.deviceSymbolDictionary_property)
    // self.mSymbols_property.removeEBObserverOf_strokeBezierPath (self.deviceSymbolDictionary_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mDeviceName",
      idx: self.mDeviceName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDeviceName_property.mObserverExplorer,
      valueExplorer: &self.mDeviceName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPrefix",
      idx: self.mPrefix_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mPrefix_property.mObserverExplorer,
      valueExplorer: &self.mPrefix_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDeviceVersion",
      idx: self.mDeviceVersion_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDeviceVersion_property.mObserverExplorer,
      valueExplorer: &self.mDeviceVersion_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDeviceFileData",
      idx: self.mDeviceFileData_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDeviceFileData_property.mObserverExplorer,
      valueExplorer: &self.mDeviceFileData_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "versionString",
      idx: self.versionString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.versionString_property.mObserverExplorer,
      valueExplorer: &self.versionString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "sizeString",
      idx: self.sizeString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.sizeString_property.mObserverExplorer,
      valueExplorer: &self.sizeString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "canExport",
      idx: self.canExport_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.canExport_property.mObserverExplorer,
      valueExplorer: &self.canExport_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "packageNames",
      idx: self.packageNames_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.packageNames_property.mObserverExplorer,
      valueExplorer: &self.packageNames_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "deviceComponentCountString",
      idx: self.deviceComponentCountString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.deviceComponentCountString_property.mObserverExplorer,
      valueExplorer: &self.deviceComponentCountString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "canRemove",
      idx: self.canRemove_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.canRemove_property.mObserverExplorer,
      valueExplorer: &self.canRemove_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "symbolAndTypesNames",
      idx: self.symbolAndTypesNames_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.symbolAndTypesNames_property.mObserverExplorer,
      valueExplorer: &self.symbolAndTypesNames_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "pinPadAssignments",
      idx: self.pinPadAssignments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.pinPadAssignments_property.mObserverExplorer,
      valueExplorer: &self.pinPadAssignments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "deviceSymbolDictionary",
      idx: self.deviceSymbolDictionary_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.deviceSymbolDictionary_property.mObserverExplorer,
      valueExplorer: &self.deviceSymbolDictionary_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "mPackages",
      idx:mPackages_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mPackages_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mSymbols",
      idx:mSymbols_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mSymbols_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mComponents",
      idx:mComponents_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mComponents_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mPadAssignments",
      idx:mPadAssignments_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mPadAssignments_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mDeviceName
    self.mDeviceName_property.mObserverExplorer = nil
    self.mDeviceName_property.mValueExplorer = nil
  //--- Atomic property: mPrefix
    self.mPrefix_property.mObserverExplorer = nil
    self.mPrefix_property.mValueExplorer = nil
  //--- Atomic property: mDeviceVersion
    self.mDeviceVersion_property.mObserverExplorer = nil
    self.mDeviceVersion_property.mValueExplorer = nil
  //--- Atomic property: mDeviceFileData
    self.mDeviceFileData_property.mObserverExplorer = nil
    self.mDeviceFileData_property.mValueExplorer = nil
  //--- To many property: mPackages
    self.mPackages_property.mValueExplorer = nil
  //--- To many property: mSymbols
    self.mSymbols_property.mValueExplorer = nil
  //--- To many property: mComponents
    self.mComponents_property.mValueExplorer = nil
  //--- To many property: mPadAssignments
    self.mPadAssignments_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mPackages = []
    self.mSymbols = []
    self.mComponents = []
    self.mPadAssignments = []
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mDeviceName
    self.mDeviceName_property.storeIn (dictionary: ioDictionary, forKey: "mDeviceName")
  //--- Atomic property: mPrefix
    self.mPrefix_property.storeIn (dictionary: ioDictionary, forKey: "mPrefix")
  //--- Atomic property: mDeviceVersion
    self.mDeviceVersion_property.storeIn (dictionary: ioDictionary, forKey: "mDeviceVersion")
  //--- Atomic property: mDeviceFileData
    self.mDeviceFileData_property.storeIn (dictionary: ioDictionary, forKey: "mDeviceFileData")
  //--- To many property: mPackages
    self.store (
      managedObjectArray: self.mPackages_property.propval,
      relationshipName: "mPackages",
      intoDictionary: ioDictionary
    )
  //--- To many property: mSymbols
    self.store (
      managedObjectArray: self.mSymbols_property.propval,
      relationshipName: "mSymbols",
      intoDictionary: ioDictionary
    )
  //--- To many property: mComponents
    self.store (
      managedObjectArray: self.mComponents_property.propval,
      relationshipName: "mComponents",
      intoDictionary: ioDictionary
    )
  //--- To many property: mPadAssignments
    self.store (
      managedObjectArray: self.mPadAssignments_property.propval,
      relationshipName: "mPadAssignments",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  //--- To many property: mPackages
    self.mPackages_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mPackages",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [DevicePackageInProject])
  //--- To many property: mSymbols
    self.mSymbols_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mSymbols",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [DeviceSymbolInstanceInProject])
  //--- To many property: mComponents
    self.mComponents_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mComponents",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [ComponentInProject])
  //--- To many property: mPadAssignments
    self.mPadAssignments_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mPadAssignments",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [DevicePadAssignmentInProject])
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mDeviceName
    self.mDeviceName_property.readFrom (dictionary: inDictionary, forKey: "mDeviceName")
  //--- Atomic property: mPrefix
    self.mPrefix_property.readFrom (dictionary: inDictionary, forKey: "mPrefix")
  //--- Atomic property: mDeviceVersion
    self.mDeviceVersion_property.readFrom (dictionary: inDictionary, forKey: "mDeviceVersion")
  //--- Atomic property: mDeviceFileData
    self.mDeviceFileData_property.readFrom (dictionary: inDictionary, forKey: "mDeviceFileData")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mDeviceName\n"
    ioString += "mPrefix\n"
    ioString += "mDeviceVersion\n"
    ioString += "mDeviceFileData\n"
  //--- To one relationships
  //--- To many relationships
    ioString += "mPackages\n"
    ioString += "mSymbols\n"
    ioString += "mComponents\n"
    ioString += "mPadAssignments\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mDeviceName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mPrefix.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDeviceVersion.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDeviceFileData.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mPackages {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mSymbols {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mComponents {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mPadAssignments {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.mOperationQueue.addOperation {
    //--- Atomic properties
      if let range = inDictionary ["mDeviceName"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mDeviceName = value
      }
      if let range = inDictionary ["mPrefix"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mPrefix = value
      }
      if let range = inDictionary ["mDeviceVersion"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mDeviceVersion = value
      }
      if let range = inDictionary ["mDeviceFileData"], let value = Data.unarchiveFromDataRange (inData, range) {
        self.mDeviceFileData = value
      }
    //--- To one relationships
    //--- To many relationships
      if let range = inDictionary ["mPackages"], range.length > 0 {
        var relationshipArray = [DevicePackageInProject] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! DevicePackageInProject)
        }
        inParallelObjectSetupContext.mMutex.wait ()
        inParallelObjectSetupContext.mToManySetUpOperationList.append ({ self.mPackages = relationshipArray })
        inParallelObjectSetupContext.mMutex.signal ()
      }
      if let range = inDictionary ["mSymbols"], range.length > 0 {
        var relationshipArray = [DeviceSymbolInstanceInProject] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! DeviceSymbolInstanceInProject)
        }
        inParallelObjectSetupContext.mMutex.wait ()
        inParallelObjectSetupContext.mToManySetUpOperationList.append ({ self.mSymbols = relationshipArray })
        inParallelObjectSetupContext.mMutex.signal ()
      }
      if let range = inDictionary ["mComponents"], range.length > 0 {
        var relationshipArray = [ComponentInProject] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! ComponentInProject)
        }
        inParallelObjectSetupContext.mMutex.wait ()
        inParallelObjectSetupContext.mToManySetUpOperationList.append ({ self.mComponents = relationshipArray })
        inParallelObjectSetupContext.mMutex.signal ()
      }
      if let range = inDictionary ["mPadAssignments"], range.length > 0 {
        var relationshipArray = [DevicePadAssignmentInProject] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! DevicePadAssignmentInProject)
        }
        inParallelObjectSetupContext.mMutex.wait ()
        inParallelObjectSetupContext.mToManySetUpOperationList.append ({ self.mPadAssignments = relationshipArray })
        inParallelObjectSetupContext.mMutex.signal ()
      }
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mPackages
    for managedObject in self.mPackages {
      objects.append (managedObject)
    }
  //--- To many property: mSymbols
    for managedObject in self.mSymbols {
      objects.append (managedObject)
    }
  //--- To many property: mComponents
    for managedObject in self.mComponents {
      objects.append (managedObject)
    }
  //--- To many property: mPadAssignments
    for managedObject in self.mPadAssignments {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mPackages
    for managedObject in self.mPackages {
      objects.append (managedObject)
    }
  //--- To many property: mSymbols
    for managedObject in self.mSymbols {
      objects.append (managedObject)
    }
  //--- To many property: mComponents
    for managedObject in self.mComponents {
      objects.append (managedObject)
    }
  //--- To many property: mPadAssignments
    for managedObject in self.mPadAssignments {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------

