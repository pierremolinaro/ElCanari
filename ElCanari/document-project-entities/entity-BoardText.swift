//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_mX : class {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_mY : class {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_mFontSize : class {
  var mFontSize : Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_mLayer : class {
  var mLayer : BoardTextLayer { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_mText : class {
  var mText : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_mHorizontalAlignment : class {
  var mHorizontalAlignment : HorizontalAlignment { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_mVerticalAlignment : class {
  var mVerticalAlignment : BoardTextVerticalAlignment { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_mRotation : class {
  var mRotation : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_mWeight : class {
  var mWeight : Double { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_mOblique : class {
  var mOblique : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_fontName : class {
  var fontName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol BoardText_signatureForERCChecking : class {
  var signatureForERCChecking : UInt32? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: BoardText
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class BoardText : BoardObject,
         BoardText_mX,
         BoardText_mY,
         BoardText_mFontSize,
         BoardText_mLayer,
         BoardText_mText,
         BoardText_mHorizontalAlignment,
         BoardText_mVerticalAlignment,
         BoardText_mRotation,
         BoardText_mWeight,
         BoardText_mOblique,
         BoardText_objectDisplay,
         BoardText_selectionDisplay,
         BoardText_fontName,
         BoardText_signatureForERCChecking {

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  let mX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································

  var mX_property_selection : EBSelection <Int> { return self.mX_property.prop }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  let mY_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································

  var mY_property_selection : EBSelection <Int> { return self.mY_property.prop }

  //····················································································································
  //   Atomic property: mFontSize
  //····················································································································

  let mFontSize_property = EBStoredProperty_Double (defaultValue: 4)

  //····················································································································

  var mFontSize : Double {
    get { return self.mFontSize_property.propval }
    set { self.mFontSize_property.setProp (newValue) }
  }

  //····················································································································

  var mFontSize_property_selection : EBSelection <Double> { return self.mFontSize_property.prop }

  //····················································································································
  //   Atomic property: mLayer
  //····················································································································

  let mLayer_property = EBStoredProperty_BoardTextLayer (defaultValue: BoardTextLayer.legendFront)

  //····················································································································

  var mLayer : BoardTextLayer {
    get { return self.mLayer_property.propval }
    set { self.mLayer_property.setProp (newValue) }
  }

  //····················································································································

  var mLayer_property_selection : EBSelection <BoardTextLayer> { return self.mLayer_property.prop }

  //····················································································································
  //   Atomic property: mText
  //····················································································································

  let mText_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mText : String {
    get { return self.mText_property.propval }
    set { self.mText_property.setProp (newValue) }
  }

  //····················································································································

  var mText_property_selection : EBSelection <String> { return self.mText_property.prop }

  //····················································································································
  //   Atomic property: mHorizontalAlignment
  //····················································································································

  let mHorizontalAlignment_property = EBStoredProperty_HorizontalAlignment (defaultValue: HorizontalAlignment.center)

  //····················································································································

  var mHorizontalAlignment : HorizontalAlignment {
    get { return self.mHorizontalAlignment_property.propval }
    set { self.mHorizontalAlignment_property.setProp (newValue) }
  }

  //····················································································································

  var mHorizontalAlignment_property_selection : EBSelection <HorizontalAlignment> { return self.mHorizontalAlignment_property.prop }

  //····················································································································
  //   Atomic property: mVerticalAlignment
  //····················································································································

  let mVerticalAlignment_property = EBStoredProperty_BoardTextVerticalAlignment (defaultValue: BoardTextVerticalAlignment.base)

  //····················································································································

  var mVerticalAlignment : BoardTextVerticalAlignment {
    get { return self.mVerticalAlignment_property.propval }
    set { self.mVerticalAlignment_property.setProp (newValue) }
  }

  //····················································································································

  var mVerticalAlignment_property_selection : EBSelection <BoardTextVerticalAlignment> { return self.mVerticalAlignment_property.prop }

  //····················································································································
  //   Atomic property: mRotation
  //····················································································································

  let mRotation_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mRotation : Int {
    get { return self.mRotation_property.propval }
    set { self.mRotation_property.setProp (newValue) }
  }

  //····················································································································

  var mRotation_property_selection : EBSelection <Int> { return self.mRotation_property.prop }

  //····················································································································
  //   Atomic property: mWeight
  //····················································································································

  let mWeight_property = EBStoredProperty_Double (defaultValue: 1)

  //····················································································································

  var mWeight : Double {
    get { return self.mWeight_property.propval }
    set { self.mWeight_property.setProp (newValue) }
  }

  //····················································································································

  var mWeight_property_selection : EBSelection <Double> { return self.mWeight_property.prop }

  //····················································································································
  //   Atomic property: mOblique
  //····················································································································

  let mOblique_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mOblique : Bool {
    get { return self.mOblique_property.propval }
    set { self.mOblique_property.setProp (newValue) }
  }

  //····················································································································

  var mOblique_property_selection : EBSelection <Bool> { return self.mOblique_property.prop }

  //····················································································································
  //   To one property: mFont
  //····················································································································

   let mFont_property = StoredObject_FontInProject ()

  //····················································································································

  var mFont_property_selection : EBSelection <FontInProject?> {
    return .single (self.mFont_property.propval)
  }

  //····················································································································

  var mFont : FontInProject? {
    get {
      return self.mFont_property.propval
    }
    set {
      if self.mFont_property.propval != nil {
        self.mFont_property.setProp (nil)
      }
      if newValue != nil {
        self.mFont_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mFont_none : StoredObject_FontInProject { return self.mFont_property }

  //····················································································································

  var mFont_none_selection : EBSelection <Bool> {
    return .single (self.mFont_property.propval == nil)
  }

  //····················································································································
  //   Transient property: fontName
  //····················································································································

  let fontName_property = EBTransientProperty_String ()

  //····················································································································

  var fontName_property_selection : EBSelection <String> {
    return self.fontName_property.prop
  }

  //····················································································································

  var fontName : String? {
    switch self.fontName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mX
    self.mX_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mY
    self.mY_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mFontSize
    self.mFontSize_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mLayer
    self.mLayer_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mText
    self.mText_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mHorizontalAlignment
    self.mHorizontalAlignment_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mVerticalAlignment
    self.mVerticalAlignment_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mRotation
    self.mRotation_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mWeight
    self.mWeight_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mOblique
    self.mOblique_property.ebUndoManager = self.ebUndoManager
  //--- To one property: mFont (has opposite to many relationship: mTexts)
    self.mFont_property.ebUndoManager = self.ebUndoManager
    self.mFont_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mTexts_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mTexts_property.remove (me) } }
    )
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        kind &= unwSelf.mText_property_selection.kind ()
        kind &= unwSelf.mFontSize_property_selection.kind ()
        kind &= unwSelf.mFont_property.descriptor_property_selection.kind ()
        kind &= unwSelf.mHorizontalAlignment_property_selection.kind ()
        kind &= unwSelf.mVerticalAlignment_property_selection.kind ()
        kind &= unwSelf.mLayer_property_selection.kind ()
        kind &= unwSelf.mRotation_property_selection.kind ()
        kind &= unwSelf.mWeight_property_selection.kind ()
        kind &= unwSelf.mOblique_property_selection.kind ()
        kind &= g_Preferences!.displayFrontLegendForBoard_property_selection.kind ()
        kind &= g_Preferences!.displayBackLegendForBoard_property_selection.kind ()
        kind &= g_Preferences!.displayFrontLayoutForBoard_property_selection.kind ()
        kind &= g_Preferences!.displayBackLayoutForBoard_property_selection.kind ()
        kind &= g_Preferences!.frontSideLegendColorForBoard_property_selection.kind ()
        kind &= g_Preferences!.frontSideLayoutColorForBoard_property_selection.kind ()
        kind &= g_Preferences!.backSideLayoutColorForBoard_property_selection.kind ()
        kind &= g_Preferences!.backSideLegendColorForBoard_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mX_property_selection, unwSelf.mY_property_selection, unwSelf.mText_property_selection, unwSelf.mFontSize_property_selection, unwSelf.mFont_property.descriptor_property_selection, unwSelf.mHorizontalAlignment_property_selection, unwSelf.mVerticalAlignment_property_selection, unwSelf.mLayer_property_selection, unwSelf.mRotation_property_selection, unwSelf.mWeight_property_selection, unwSelf.mOblique_property_selection, g_Preferences!.displayFrontLegendForBoard_property_selection, g_Preferences!.displayBackLegendForBoard_property_selection, g_Preferences!.displayFrontLayoutForBoard_property_selection, g_Preferences!.displayBackLayoutForBoard_property_selection, g_Preferences!.frontSideLegendColorForBoard_property_selection, g_Preferences!.frontSideLayoutColorForBoard_property_selection, g_Preferences!.backSideLayoutColorForBoard_property_selection, g_Preferences!.backSideLegendColorForBoard_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11), .single (let v12), .single (let v13), .single (let v14), .single (let v15), .single (let v16), .single (let v17), .single (let v18)) :
            return .single (transient_BoardText_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.objectDisplay_property)
    self.mY_property.addEBObserver (self.objectDisplay_property)
    self.mText_property.addEBObserver (self.objectDisplay_property)
    self.mFontSize_property.addEBObserver (self.objectDisplay_property)
    self.mFont_property.addEBObserverOf_descriptor (self.objectDisplay_property)
    self.mHorizontalAlignment_property.addEBObserver (self.objectDisplay_property)
    self.mVerticalAlignment_property.addEBObserver (self.objectDisplay_property)
    self.mLayer_property.addEBObserver (self.objectDisplay_property)
    self.mRotation_property.addEBObserver (self.objectDisplay_property)
    self.mWeight_property.addEBObserver (self.objectDisplay_property)
    self.mOblique_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.displayFrontLegendForBoard_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.displayBackLegendForBoard_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.displayFrontLayoutForBoard_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.displayBackLayoutForBoard_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSideLegendColorForBoard_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSideLayoutColorForBoard_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.backSideLayoutColorForBoard_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.backSideLegendColorForBoard_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        kind &= unwSelf.mText_property_selection.kind ()
        kind &= unwSelf.mFontSize_property_selection.kind ()
        kind &= unwSelf.mFont_property.descriptor_property_selection.kind ()
        kind &= unwSelf.mHorizontalAlignment_property_selection.kind ()
        kind &= unwSelf.mVerticalAlignment_property_selection.kind ()
        kind &= unwSelf.mLayer_property_selection.kind ()
        kind &= unwSelf.mRotation_property_selection.kind ()
        kind &= unwSelf.mWeight_property_selection.kind ()
        kind &= unwSelf.mOblique_property_selection.kind ()
        kind &= g_Preferences!.frontSideLegendColorForBoard_property_selection.kind ()
        kind &= g_Preferences!.frontSideLayoutColorForBoard_property_selection.kind ()
        kind &= g_Preferences!.backSideLayoutColorForBoard_property_selection.kind ()
        kind &= g_Preferences!.backSideLegendColorForBoard_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mX_property_selection, unwSelf.mY_property_selection, unwSelf.mText_property_selection, unwSelf.mFontSize_property_selection, unwSelf.mFont_property.descriptor_property_selection, unwSelf.mHorizontalAlignment_property_selection, unwSelf.mVerticalAlignment_property_selection, unwSelf.mLayer_property_selection, unwSelf.mRotation_property_selection, unwSelf.mWeight_property_selection, unwSelf.mOblique_property_selection, g_Preferences!.frontSideLegendColorForBoard_property_selection, g_Preferences!.frontSideLayoutColorForBoard_property_selection, g_Preferences!.backSideLayoutColorForBoard_property_selection, g_Preferences!.backSideLegendColorForBoard_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11), .single (let v12), .single (let v13), .single (let v14)) :
            return .single (transient_BoardText_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.selectionDisplay_property)
    self.mY_property.addEBObserver (self.selectionDisplay_property)
    self.mText_property.addEBObserver (self.selectionDisplay_property)
    self.mFontSize_property.addEBObserver (self.selectionDisplay_property)
    self.mFont_property.addEBObserverOf_descriptor (self.selectionDisplay_property)
    self.mHorizontalAlignment_property.addEBObserver (self.selectionDisplay_property)
    self.mVerticalAlignment_property.addEBObserver (self.selectionDisplay_property)
    self.mLayer_property.addEBObserver (self.selectionDisplay_property)
    self.mRotation_property.addEBObserver (self.selectionDisplay_property)
    self.mWeight_property.addEBObserver (self.selectionDisplay_property)
    self.mOblique_property.addEBObserver (self.selectionDisplay_property)
    g_Preferences?.frontSideLegendColorForBoard_property.addEBObserver (self.selectionDisplay_property)
    g_Preferences?.frontSideLayoutColorForBoard_property.addEBObserver (self.selectionDisplay_property)
    g_Preferences?.backSideLayoutColorForBoard_property.addEBObserver (self.selectionDisplay_property)
    g_Preferences?.backSideLegendColorForBoard_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: fontName
    self.fontName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mFont_property.mFontName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mFont_property.mFontName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_BoardText_fontName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mFont_property.addEBObserverOf_mFontName (self.fontName_property)
  //--- Atomic property: signatureForERCChecking
    self.signatureForERCChecking_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mLayer_property_selection.kind ()
        kind &= unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        kind &= unwSelf.mText_property_selection.kind ()
        kind &= unwSelf.mFontSize_property_selection.kind ()
        kind &= unwSelf.mFont_property.descriptor_property_selection.kind ()
        kind &= unwSelf.mHorizontalAlignment_property_selection.kind ()
        kind &= unwSelf.mVerticalAlignment_property_selection.kind ()
        kind &= unwSelf.mRotation_property_selection.kind ()
        kind &= unwSelf.mWeight_property_selection.kind ()
        kind &= unwSelf.mOblique_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mLayer_property_selection, unwSelf.mX_property_selection, unwSelf.mY_property_selection, unwSelf.mText_property_selection, unwSelf.mFontSize_property_selection, unwSelf.mFont_property.descriptor_property_selection, unwSelf.mHorizontalAlignment_property_selection, unwSelf.mVerticalAlignment_property_selection, unwSelf.mRotation_property_selection, unwSelf.mWeight_property_selection, unwSelf.mOblique_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10)) :
            return .single (transient_BoardText_signatureForERCChecking (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mLayer_property.addEBObserver (self.signatureForERCChecking_property)
    self.mX_property.addEBObserver (self.signatureForERCChecking_property)
    self.mY_property.addEBObserver (self.signatureForERCChecking_property)
    self.mText_property.addEBObserver (self.signatureForERCChecking_property)
    self.mFontSize_property.addEBObserver (self.signatureForERCChecking_property)
    self.mFont_property.addEBObserverOf_descriptor (self.signatureForERCChecking_property)
    self.mHorizontalAlignment_property.addEBObserver (self.signatureForERCChecking_property)
    self.mVerticalAlignment_property.addEBObserver (self.signatureForERCChecking_property)
    self.mRotation_property.addEBObserver (self.signatureForERCChecking_property)
    self.mWeight_property.addEBObserver (self.signatureForERCChecking_property)
    self.mOblique_property.addEBObserver (self.signatureForERCChecking_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mX_property.removeEBObserver (self.objectDisplay_property)
    self.mY_property.removeEBObserver (self.objectDisplay_property)
    self.mText_property.removeEBObserver (self.objectDisplay_property)
    self.mFontSize_property.removeEBObserver (self.objectDisplay_property)
    self.mFont_property.removeEBObserverOf_descriptor (self.objectDisplay_property)
    self.mHorizontalAlignment_property.removeEBObserver (self.objectDisplay_property)
    self.mVerticalAlignment_property.removeEBObserver (self.objectDisplay_property)
    self.mLayer_property.removeEBObserver (self.objectDisplay_property)
    self.mRotation_property.removeEBObserver (self.objectDisplay_property)
    self.mWeight_property.removeEBObserver (self.objectDisplay_property)
    self.mOblique_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.displayFrontLegendForBoard_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.displayBackLegendForBoard_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.displayFrontLayoutForBoard_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.displayBackLayoutForBoard_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSideLegendColorForBoard_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSideLayoutColorForBoard_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.backSideLayoutColorForBoard_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.backSideLegendColorForBoard_property.removeEBObserver (self.objectDisplay_property)
    self.mX_property.removeEBObserver (self.selectionDisplay_property)
    self.mY_property.removeEBObserver (self.selectionDisplay_property)
    self.mText_property.removeEBObserver (self.selectionDisplay_property)
    self.mFontSize_property.removeEBObserver (self.selectionDisplay_property)
    self.mFont_property.removeEBObserverOf_descriptor (self.selectionDisplay_property)
    self.mHorizontalAlignment_property.removeEBObserver (self.selectionDisplay_property)
    self.mVerticalAlignment_property.removeEBObserver (self.selectionDisplay_property)
    self.mLayer_property.removeEBObserver (self.selectionDisplay_property)
    self.mRotation_property.removeEBObserver (self.selectionDisplay_property)
    self.mWeight_property.removeEBObserver (self.selectionDisplay_property)
    self.mOblique_property.removeEBObserver (self.selectionDisplay_property)
    g_Preferences?.frontSideLegendColorForBoard_property.removeEBObserver (self.selectionDisplay_property)
    g_Preferences?.frontSideLayoutColorForBoard_property.removeEBObserver (self.selectionDisplay_property)
    g_Preferences?.backSideLayoutColorForBoard_property.removeEBObserver (self.selectionDisplay_property)
    g_Preferences?.backSideLegendColorForBoard_property.removeEBObserver (self.selectionDisplay_property)
    self.mFont_property.removeEBObserverOf_mFontName (self.fontName_property)
    self.mLayer_property.removeEBObserver (self.signatureForERCChecking_property)
    self.mX_property.removeEBObserver (self.signatureForERCChecking_property)
    self.mY_property.removeEBObserver (self.signatureForERCChecking_property)
    self.mText_property.removeEBObserver (self.signatureForERCChecking_property)
    self.mFontSize_property.removeEBObserver (self.signatureForERCChecking_property)
    self.mFont_property.removeEBObserverOf_descriptor (self.signatureForERCChecking_property)
    self.mHorizontalAlignment_property.removeEBObserver (self.signatureForERCChecking_property)
    self.mVerticalAlignment_property.removeEBObserver (self.signatureForERCChecking_property)
    self.mRotation_property.removeEBObserver (self.signatureForERCChecking_property)
    self.mWeight_property.removeEBObserver (self.signatureForERCChecking_property)
    self.mOblique_property.removeEBObserver (self.signatureForERCChecking_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mX",
      idx: self.mX_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mX_property.mObserverExplorer,
      valueExplorer: &self.mX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mY",
      idx: self.mY_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mY_property.mObserverExplorer,
      valueExplorer: &self.mY_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mFontSize",
      idx: self.mFontSize_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mFontSize_property.mObserverExplorer,
      valueExplorer: &self.mFontSize_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mLayer",
      idx: self.mLayer_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mLayer_property.mObserverExplorer,
      valueExplorer: &self.mLayer_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mText",
      idx: self.mText_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mText_property.mObserverExplorer,
      valueExplorer: &self.mText_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mHorizontalAlignment",
      idx: self.mHorizontalAlignment_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mHorizontalAlignment_property.mObserverExplorer,
      valueExplorer: &self.mHorizontalAlignment_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mVerticalAlignment",
      idx: self.mVerticalAlignment_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mVerticalAlignment_property.mObserverExplorer,
      valueExplorer: &self.mVerticalAlignment_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mRotation",
      idx: self.mRotation_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mRotation_property.mObserverExplorer,
      valueExplorer: &self.mRotation_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mWeight",
      idx: self.mWeight_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mWeight_property.mObserverExplorer,
      valueExplorer: &self.mWeight_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mOblique",
      idx: self.mOblique_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mOblique_property.mObserverExplorer,
      valueExplorer: &self.mOblique_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "objectDisplay",
      idx: self.objectDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.objectDisplay_property.mObserverExplorer,
      valueExplorer: &self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx: self.selectionDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
      valueExplorer: &self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "fontName",
      idx: self.fontName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.fontName_property.mObserverExplorer,
      valueExplorer: &self.fontName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "signatureForERCChecking",
      idx: self.signatureForERCChecking_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.signatureForERCChecking_property.mObserverExplorer,
      valueExplorer: &self.signatureForERCChecking_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "mFont",
      idx:self.mFont_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mFont_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mX
    self.mX_property.mObserverExplorer = nil
    self.mX_property.mValueExplorer = nil
  //--- Atomic property: mY
    self.mY_property.mObserverExplorer = nil
    self.mY_property.mValueExplorer = nil
  //--- Atomic property: mFontSize
    self.mFontSize_property.mObserverExplorer = nil
    self.mFontSize_property.mValueExplorer = nil
  //--- Atomic property: mLayer
    self.mLayer_property.mObserverExplorer = nil
    self.mLayer_property.mValueExplorer = nil
  //--- Atomic property: mText
    self.mText_property.mObserverExplorer = nil
    self.mText_property.mValueExplorer = nil
  //--- Atomic property: mHorizontalAlignment
    self.mHorizontalAlignment_property.mObserverExplorer = nil
    self.mHorizontalAlignment_property.mValueExplorer = nil
  //--- Atomic property: mVerticalAlignment
    self.mVerticalAlignment_property.mObserverExplorer = nil
    self.mVerticalAlignment_property.mValueExplorer = nil
  //--- Atomic property: mRotation
    self.mRotation_property.mObserverExplorer = nil
    self.mRotation_property.mValueExplorer = nil
  //--- Atomic property: mWeight
    self.mWeight_property.mObserverExplorer = nil
    self.mWeight_property.mValueExplorer = nil
  //--- Atomic property: mOblique
    self.mOblique_property.mObserverExplorer = nil
    self.mOblique_property.mValueExplorer = nil
  //--- To one property: mFont
    self.mFont_property.mObserverExplorer = nil
    self.mFont_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mFont = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mX
    self.mX_property.storeIn (dictionary: ioDictionary, forKey:"mX")
  //--- Atomic property: mY
    self.mY_property.storeIn (dictionary: ioDictionary, forKey:"mY")
  //--- Atomic property: mFontSize
    self.mFontSize_property.storeIn (dictionary: ioDictionary, forKey:"mFontSize")
  //--- Atomic property: mLayer
    self.mLayer_property.storeIn (dictionary: ioDictionary, forKey:"mLayer")
  //--- Atomic property: mText
    self.mText_property.storeIn (dictionary: ioDictionary, forKey:"mText")
  //--- Atomic property: mHorizontalAlignment
    self.mHorizontalAlignment_property.storeIn (dictionary: ioDictionary, forKey:"mHorizontalAlignment")
  //--- Atomic property: mVerticalAlignment
    self.mVerticalAlignment_property.storeIn (dictionary: ioDictionary, forKey:"mVerticalAlignment")
  //--- Atomic property: mRotation
    self.mRotation_property.storeIn (dictionary: ioDictionary, forKey:"mRotation")
  //--- Atomic property: mWeight
    self.mWeight_property.storeIn (dictionary: ioDictionary, forKey:"mWeight")
  //--- Atomic property: mOblique
    self.mOblique_property.storeIn (dictionary: ioDictionary, forKey:"mOblique")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To one property: mFont
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mFont",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? FontInProject {
        self.mFont_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey:"mX")
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey:"mY")
  //--- Atomic property: mFontSize
    self.mFontSize_property.readFrom (dictionary: inDictionary, forKey:"mFontSize")
  //--- Atomic property: mLayer
    self.mLayer_property.readFrom (dictionary: inDictionary, forKey:"mLayer")
  //--- Atomic property: mText
    self.mText_property.readFrom (dictionary: inDictionary, forKey:"mText")
  //--- Atomic property: mHorizontalAlignment
    self.mHorizontalAlignment_property.readFrom (dictionary: inDictionary, forKey:"mHorizontalAlignment")
  //--- Atomic property: mVerticalAlignment
    self.mVerticalAlignment_property.readFrom (dictionary: inDictionary, forKey:"mVerticalAlignment")
  //--- Atomic property: mRotation
    self.mRotation_property.readFrom (dictionary: inDictionary, forKey:"mRotation")
  //--- Atomic property: mWeight
    self.mWeight_property.readFrom (dictionary: inDictionary, forKey:"mWeight")
  //--- Atomic property: mOblique
    self.mOblique_property.readFrom (dictionary: inDictionary, forKey:"mOblique")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To one property: mFont
    if let object = self.mFont {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To one property: mFont
    if let object = self.mFont {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

