//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

protocol NetClassInProject_mNetClassName : class {
  var mNetClassName : String { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol NetClassInProject_mNetClassColor : class {
  var mNetClassColor : NSColor { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol NetClassInProject_mTrackWidth : class {
  var mTrackWidth : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol NetClassInProject_mTrackWidthUnit : class {
  var mTrackWidthUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol NetClassInProject_mViaHoleDiameter : class {
  var mViaHoleDiameter : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol NetClassInProject_mViaHoleDiameterUnit : class {
  var mViaHoleDiameterUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol NetClassInProject_mViaPadDiameter : class {
  var mViaPadDiameter : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol NetClassInProject_mViaPadDiameterUnit : class {
  var mViaPadDiameterUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol NetClassInProject_mAllowTracksOnFrontSide : class {
  var mAllowTracksOnFrontSide : Bool { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol NetClassInProject_mAllowTracksOnBackSide : class {
  var mAllowTracksOnBackSide : Bool { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol NetClassInProject_trackWidthString : class {
  var trackWidthString : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol NetClassInProject_viaHoleDiameter : class {
  var viaHoleDiameter : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol NetClassInProject_viaPadDiameter : class {
  var viaPadDiameter : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol NetClassInProject_allowTracksOnFrontSideString : class {
  var allowTracksOnFrontSideString : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol NetClassInProject_allowTracksOnBackSideString : class {
  var allowTracksOnBackSideString : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol NetClassInProject_canRemove : class {
  var canRemove : Bool? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol NetClassInProject_netUsage : class {
  var netUsage : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol NetClassInProject_netsDescription : class {
  var netsDescription : NetInfoArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol NetClassInProject_netWarningCount : class {
  var netWarningCount : Int? { get }
}

//----------------------------------------------------------------------------------------------------------------------
//    Entity: NetClassInProject
//----------------------------------------------------------------------------------------------------------------------

class NetClassInProject : EBManagedObject,
         NetClassInProject_mNetClassName,
         NetClassInProject_mNetClassColor,
         NetClassInProject_mTrackWidth,
         NetClassInProject_mTrackWidthUnit,
         NetClassInProject_mViaHoleDiameter,
         NetClassInProject_mViaHoleDiameterUnit,
         NetClassInProject_mViaPadDiameter,
         NetClassInProject_mViaPadDiameterUnit,
         NetClassInProject_mAllowTracksOnFrontSide,
         NetClassInProject_mAllowTracksOnBackSide,
         NetClassInProject_trackWidthString,
         NetClassInProject_viaHoleDiameter,
         NetClassInProject_viaPadDiameter,
         NetClassInProject_allowTracksOnFrontSideString,
         NetClassInProject_allowTracksOnBackSideString,
         NetClassInProject_canRemove,
         NetClassInProject_netUsage,
         NetClassInProject_netsDescription,
         NetClassInProject_netWarningCount {

  //····················································································································
  //   Atomic property: mNetClassName
  //····················································································································

  let mNetClassName_property = EBStoredProperty_String (defaultValue: "Default")

  //····················································································································

  final func reset_mNetClassName_toDefaultValue () {
    self.mNetClassName = "Default"
  }

  //····················································································································

  final var mNetClassName : String {
    get { return self.mNetClassName_property.propval }
    set { self.mNetClassName_property.setProp (newValue) }
  }

  //····················································································································

  final var mNetClassName_property_selection : EBSelection <String> { return self.mNetClassName_property.prop }

  //····················································································································
  //   Atomic property: mNetClassColor
  //····················································································································

  let mNetClassColor_property = EBStoredProperty_NSColor (defaultValue: NSColor.blue)

  //····················································································································

  final func reset_mNetClassColor_toDefaultValue () {
    self.mNetClassColor = NSColor.blue
  }

  //····················································································································

  final var mNetClassColor : NSColor {
    get { return self.mNetClassColor_property.propval }
    set { self.mNetClassColor_property.setProp (newValue) }
  }

  //····················································································································

  final var mNetClassColor_property_selection : EBSelection <NSColor> { return self.mNetClassColor_property.prop }

  //····················································································································
  //   Atomic property: mTrackWidth
  //····················································································································

  let mTrackWidth_property = EBStoredProperty_Int (defaultValue: 45720)

  //····················································································································

  final func reset_mTrackWidth_toDefaultValue () {
    self.mTrackWidth = 45720
  }

  //····················································································································

  final var mTrackWidth : Int {
    get { return self.mTrackWidth_property.propval }
    set { self.mTrackWidth_property.setProp (newValue) }
  }

  //····················································································································

  final var mTrackWidth_property_selection : EBSelection <Int> { return self.mTrackWidth_property.prop }

  //····················································································································
  //   Atomic property: mTrackWidthUnit
  //····················································································································

  let mTrackWidthUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  final func reset_mTrackWidthUnit_toDefaultValue () {
    self.mTrackWidthUnit = 2286
  }

  //····················································································································

  final var mTrackWidthUnit : Int {
    get { return self.mTrackWidthUnit_property.propval }
    set { self.mTrackWidthUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var mTrackWidthUnit_property_selection : EBSelection <Int> { return self.mTrackWidthUnit_property.prop }

  //····················································································································
  //   Atomic property: mViaHoleDiameter
  //····················································································································

  let mViaHoleDiameter_property = EBStoredProperty_Int (defaultValue: 45720)

  //····················································································································

  final func reset_mViaHoleDiameter_toDefaultValue () {
    self.mViaHoleDiameter = 45720
  }

  //····················································································································

  final var mViaHoleDiameter : Int {
    get { return self.mViaHoleDiameter_property.propval }
    set { self.mViaHoleDiameter_property.setProp (newValue) }
  }

  //····················································································································

  final var mViaHoleDiameter_property_selection : EBSelection <Int> { return self.mViaHoleDiameter_property.prop }

  //····················································································································
  //   Atomic property: mViaHoleDiameterUnit
  //····················································································································

  let mViaHoleDiameterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  final func reset_mViaHoleDiameterUnit_toDefaultValue () {
    self.mViaHoleDiameterUnit = 2286
  }

  //····················································································································

  final var mViaHoleDiameterUnit : Int {
    get { return self.mViaHoleDiameterUnit_property.propval }
    set { self.mViaHoleDiameterUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var mViaHoleDiameterUnit_property_selection : EBSelection <Int> { return self.mViaHoleDiameterUnit_property.prop }

  //····················································································································
  //   Atomic property: mViaPadDiameter
  //····················································································································

  let mViaPadDiameter_property = EBStoredProperty_Int (defaultValue: 91440)

  //····················································································································

  final func reset_mViaPadDiameter_toDefaultValue () {
    self.mViaPadDiameter = 91440
  }

  //····················································································································

  final var mViaPadDiameter : Int {
    get { return self.mViaPadDiameter_property.propval }
    set { self.mViaPadDiameter_property.setProp (newValue) }
  }

  //····················································································································

  final var mViaPadDiameter_property_selection : EBSelection <Int> { return self.mViaPadDiameter_property.prop }

  //····················································································································
  //   Atomic property: mViaPadDiameterUnit
  //····················································································································

  let mViaPadDiameterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  final func reset_mViaPadDiameterUnit_toDefaultValue () {
    self.mViaPadDiameterUnit = 2286
  }

  //····················································································································

  final var mViaPadDiameterUnit : Int {
    get { return self.mViaPadDiameterUnit_property.propval }
    set { self.mViaPadDiameterUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var mViaPadDiameterUnit_property_selection : EBSelection <Int> { return self.mViaPadDiameterUnit_property.prop }

  //····················································································································
  //   Atomic property: mAllowTracksOnFrontSide
  //····················································································································

  let mAllowTracksOnFrontSide_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  final func reset_mAllowTracksOnFrontSide_toDefaultValue () {
    self.mAllowTracksOnFrontSide = true
  }

  //····················································································································

  final var mAllowTracksOnFrontSide : Bool {
    get { return self.mAllowTracksOnFrontSide_property.propval }
    set { self.mAllowTracksOnFrontSide_property.setProp (newValue) }
  }

  //····················································································································

  final var mAllowTracksOnFrontSide_property_selection : EBSelection <Bool> { return self.mAllowTracksOnFrontSide_property.prop }

  //····················································································································
  //   Atomic property: mAllowTracksOnBackSide
  //····················································································································

  let mAllowTracksOnBackSide_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  final func reset_mAllowTracksOnBackSide_toDefaultValue () {
    self.mAllowTracksOnBackSide = true
  }

  //····················································································································

  final var mAllowTracksOnBackSide : Bool {
    get { return self.mAllowTracksOnBackSide_property.propval }
    set { self.mAllowTracksOnBackSide_property.setProp (newValue) }
  }

  //····················································································································

  final var mAllowTracksOnBackSide_property_selection : EBSelection <Bool> { return self.mAllowTracksOnBackSide_property.prop }

  //····················································································································
  //   To many property: mNets
  //····················································································································

  let mNets_property = StoredArrayOf_NetInProject (usedForSignature: false)

  //····················································································································

  var mNets_property_selection : EBSelection < [NetInProject] > {
    return self.mNets_property.prop
  }

  //····················································································································

  var mNets : [NetInProject] {
    get { return self.mNets_property.propval }
    set { self.mNets_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: trackWidthString
  //····················································································································

  let trackWidthString_property = EBTransientProperty_String ()

  //····················································································································

  var trackWidthString_property_selection : EBSelection <String> {
    return self.trackWidthString_property.prop
  }

  //····················································································································

  var trackWidthString : String? {
    switch self.trackWidthString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: viaHoleDiameter
  //····················································································································

  let viaHoleDiameter_property = EBTransientProperty_String ()

  //····················································································································

  var viaHoleDiameter_property_selection : EBSelection <String> {
    return self.viaHoleDiameter_property.prop
  }

  //····················································································································

  var viaHoleDiameter : String? {
    switch self.viaHoleDiameter_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: viaPadDiameter
  //····················································································································

  let viaPadDiameter_property = EBTransientProperty_String ()

  //····················································································································

  var viaPadDiameter_property_selection : EBSelection <String> {
    return self.viaPadDiameter_property.prop
  }

  //····················································································································

  var viaPadDiameter : String? {
    switch self.viaPadDiameter_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: allowTracksOnFrontSideString
  //····················································································································

  let allowTracksOnFrontSideString_property = EBTransientProperty_String ()

  //····················································································································

  var allowTracksOnFrontSideString_property_selection : EBSelection <String> {
    return self.allowTracksOnFrontSideString_property.prop
  }

  //····················································································································

  var allowTracksOnFrontSideString : String? {
    switch self.allowTracksOnFrontSideString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: allowTracksOnBackSideString
  //····················································································································

  let allowTracksOnBackSideString_property = EBTransientProperty_String ()

  //····················································································································

  var allowTracksOnBackSideString_property_selection : EBSelection <String> {
    return self.allowTracksOnBackSideString_property.prop
  }

  //····················································································································

  var allowTracksOnBackSideString : String? {
    switch self.allowTracksOnBackSideString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: canRemove
  //····················································································································

  let canRemove_property = EBTransientProperty_Bool ()

  //····················································································································

  var canRemove_property_selection : EBSelection <Bool> {
    return self.canRemove_property.prop
  }

  //····················································································································

  var canRemove : Bool? {
    switch self.canRemove_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netUsage
  //····················································································································

  let netUsage_property = EBTransientProperty_String ()

  //····················································································································

  var netUsage_property_selection : EBSelection <String> {
    return self.netUsage_property.prop
  }

  //····················································································································

  var netUsage : String? {
    switch self.netUsage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netsDescription
  //····················································································································

  let netsDescription_property = EBTransientProperty_NetInfoArray ()

  //····················································································································

  var netsDescription_property_selection : EBSelection <NetInfoArray> {
    return self.netsDescription_property.prop
  }

  //····················································································································

  var netsDescription : NetInfoArray? {
    switch self.netsDescription_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: netWarningCount
  //····················································································································

  let netWarningCount_property = EBTransientProperty_Int ()

  //····················································································································

  var netWarningCount_property_selection : EBSelection <Int> {
    return self.netWarningCount_property.prop
  }

  //····················································································································

  var netWarningCount : Int? {
    switch self.netWarningCount_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
    self.configureObject ()
  }
  
  //····················································································································

  private final func configureObject () {
  //--- Atomic property: mNetClassName
    self.mNetClassName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mNetClassColor
    self.mNetClassColor_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mTrackWidth
    self.mTrackWidth_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mTrackWidthUnit
    self.mTrackWidthUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mViaHoleDiameter
    self.mViaHoleDiameter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mViaHoleDiameterUnit
    self.mViaHoleDiameterUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mViaPadDiameter
    self.mViaPadDiameter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mViaPadDiameterUnit
    self.mViaPadDiameterUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mAllowTracksOnFrontSide
    self.mAllowTracksOnFrontSide_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mAllowTracksOnBackSide
    self.mAllowTracksOnBackSide_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mNets (has opposite relationship)
    self.mNets_property.ebUndoManager = self.ebUndoManager
    self.mNets_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mNetClass_property.setProp (me) } },
      resetter: { inObject in inObject.mNetClass_property.setProp (nil) }
    )
  //--- Atomic property: trackWidthString
    self.trackWidthString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mTrackWidth_property_selection.kind ()
        kind &= unwSelf.mTrackWidthUnit_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mTrackWidth_property_selection, unwSelf.mTrackWidthUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_NetClassInProject_trackWidthString (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mTrackWidth_property.addEBObserver (self.trackWidthString_property)
    self.mTrackWidthUnit_property.addEBObserver (self.trackWidthString_property)
  //--- Atomic property: viaHoleDiameter
    self.viaHoleDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mViaHoleDiameter_property_selection.kind ()
        kind &= unwSelf.mViaHoleDiameterUnit_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mViaHoleDiameter_property_selection, unwSelf.mViaHoleDiameterUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_NetClassInProject_viaHoleDiameter (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mViaHoleDiameter_property.addEBObserver (self.viaHoleDiameter_property)
    self.mViaHoleDiameterUnit_property.addEBObserver (self.viaHoleDiameter_property)
  //--- Atomic property: viaPadDiameter
    self.viaPadDiameter_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mViaPadDiameter_property_selection.kind ()
        kind &= unwSelf.mViaPadDiameterUnit_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mViaPadDiameter_property_selection, unwSelf.mViaPadDiameterUnit_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_NetClassInProject_viaPadDiameter (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mViaPadDiameter_property.addEBObserver (self.viaPadDiameter_property)
    self.mViaPadDiameterUnit_property.addEBObserver (self.viaPadDiameter_property)
  //--- Atomic property: allowTracksOnFrontSideString
    self.allowTracksOnFrontSideString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mAllowTracksOnFrontSide_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mAllowTracksOnFrontSide_property_selection) {
          case (.single (let v0)) :
            return .single (transient_NetClassInProject_allowTracksOnFrontSideString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mAllowTracksOnFrontSide_property.addEBObserver (self.allowTracksOnFrontSideString_property)
  //--- Atomic property: allowTracksOnBackSideString
    self.allowTracksOnBackSideString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mAllowTracksOnBackSide_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mAllowTracksOnBackSide_property_selection) {
          case (.single (let v0)) :
            return .single (transient_NetClassInProject_allowTracksOnBackSideString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mAllowTracksOnBackSide_property.addEBObserver (self.allowTracksOnBackSideString_property)
  //--- Atomic property: canRemove
    self.canRemove_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNets_property.count_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNets_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (transient_NetClassInProject_canRemove (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNets_property.addEBObserver (self.canRemove_property)
  //--- Atomic property: netUsage
    self.netUsage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mNets_property.count_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNets_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (transient_NetClassInProject_netUsage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNets_property.addEBObserver (self.netUsage_property)
  //--- Atomic property: netsDescription
    self.netsDescription_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mNets_property_selection.kind ()
        kind &= unwSelf.mNets_property_selection.kind ()
        kind &= unwSelf.mNets_property_selection.kind ()
        kind &= unwSelf.mNets_property_selection.kind ()
        kind &= unwSelf.mNetClassName_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mNets_property_selection, unwSelf.mNets_property_selection, unwSelf.mNets_property_selection, unwSelf.mNets_property_selection, unwSelf.mNetClassName_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_NetClassInProject_netsDescription (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mNets_property.addEBObserver (self.netsDescription_property)
    self.mNets_property.addEBObserverOf_trackCount (self.netsDescription_property)
    self.mNets_property.addEBObserverOf_mNetName (self.netsDescription_property)
    self.mNets_property.addEBObserverOf_netSchematicPointsInfo (self.netsDescription_property)
    self.mNetClassName_property.addEBObserver (self.netsDescription_property)
  //--- Atomic property: netWarningCount
    self.netWarningCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.netsDescription_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.netsDescription_property_selection) {
          case (.single (let v0)) :
            return .single (transient_NetClassInProject_netWarningCount (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.netsDescription_property.addEBObserver (self.netWarningCount_property)
  //--- Install undoers and opposite setter for relationships
    self.mNets_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mNetClass_property.setProp (me) } },
      resetter: { inObject in inObject.mNetClass_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mTrackWidth_property.removeEBObserver (self.trackWidthString_property)
    self.mTrackWidthUnit_property.removeEBObserver (self.trackWidthString_property)
    self.mViaHoleDiameter_property.removeEBObserver (self.viaHoleDiameter_property)
    self.mViaHoleDiameterUnit_property.removeEBObserver (self.viaHoleDiameter_property)
    self.mViaPadDiameter_property.removeEBObserver (self.viaPadDiameter_property)
    self.mViaPadDiameterUnit_property.removeEBObserver (self.viaPadDiameter_property)
    self.mAllowTracksOnFrontSide_property.removeEBObserver (self.allowTracksOnFrontSideString_property)
    self.mAllowTracksOnBackSide_property.removeEBObserver (self.allowTracksOnBackSideString_property)
    self.mNets_property.removeEBObserver (self.canRemove_property)
    self.mNets_property.removeEBObserver (self.netUsage_property)
    self.mNets_property.removeEBObserver (self.netsDescription_property)
    self.mNets_property.removeEBObserverOf_trackCount (self.netsDescription_property)
    self.mNets_property.removeEBObserverOf_mNetName (self.netsDescription_property)
    self.mNets_property.removeEBObserverOf_netSchematicPointsInfo (self.netsDescription_property)
    self.mNetClassName_property.removeEBObserver (self.netsDescription_property)
    self.netsDescription_property.removeEBObserver (self.netWarningCount_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mNetClassName",
      idx: self.mNetClassName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mNetClassName_property.mObserverExplorer,
      valueExplorer: &self.mNetClassName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mNetClassColor",
      idx: self.mNetClassColor_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mNetClassColor_property.mObserverExplorer,
      valueExplorer: &self.mNetClassColor_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mTrackWidth",
      idx: self.mTrackWidth_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mTrackWidth_property.mObserverExplorer,
      valueExplorer: &self.mTrackWidth_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mTrackWidthUnit",
      idx: self.mTrackWidthUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mTrackWidthUnit_property.mObserverExplorer,
      valueExplorer: &self.mTrackWidthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mViaHoleDiameter",
      idx: self.mViaHoleDiameter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mViaHoleDiameter_property.mObserverExplorer,
      valueExplorer: &self.mViaHoleDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mViaHoleDiameterUnit",
      idx: self.mViaHoleDiameterUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mViaHoleDiameterUnit_property.mObserverExplorer,
      valueExplorer: &self.mViaHoleDiameterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mViaPadDiameter",
      idx: self.mViaPadDiameter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mViaPadDiameter_property.mObserverExplorer,
      valueExplorer: &self.mViaPadDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mViaPadDiameterUnit",
      idx: self.mViaPadDiameterUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mViaPadDiameterUnit_property.mObserverExplorer,
      valueExplorer: &self.mViaPadDiameterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mAllowTracksOnFrontSide",
      idx: self.mAllowTracksOnFrontSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mAllowTracksOnFrontSide_property.mObserverExplorer,
      valueExplorer: &self.mAllowTracksOnFrontSide_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mAllowTracksOnBackSide",
      idx: self.mAllowTracksOnBackSide_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mAllowTracksOnBackSide_property.mObserverExplorer,
      valueExplorer: &self.mAllowTracksOnBackSide_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "trackWidthString",
      idx: self.trackWidthString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.trackWidthString_property.mObserverExplorer,
      valueExplorer: &self.trackWidthString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viaHoleDiameter",
      idx: self.viaHoleDiameter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.viaHoleDiameter_property.mObserverExplorer,
      valueExplorer: &self.viaHoleDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "viaPadDiameter",
      idx: self.viaPadDiameter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.viaPadDiameter_property.mObserverExplorer,
      valueExplorer: &self.viaPadDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "allowTracksOnFrontSideString",
      idx: self.allowTracksOnFrontSideString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.allowTracksOnFrontSideString_property.mObserverExplorer,
      valueExplorer: &self.allowTracksOnFrontSideString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "allowTracksOnBackSideString",
      idx: self.allowTracksOnBackSideString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.allowTracksOnBackSideString_property.mObserverExplorer,
      valueExplorer: &self.allowTracksOnBackSideString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "canRemove",
      idx: self.canRemove_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.canRemove_property.mObserverExplorer,
      valueExplorer: &self.canRemove_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netUsage",
      idx: self.netUsage_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netUsage_property.mObserverExplorer,
      valueExplorer: &self.netUsage_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netsDescription",
      idx: self.netsDescription_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netsDescription_property.mObserverExplorer,
      valueExplorer: &self.netsDescription_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "netWarningCount",
      idx: self.netWarningCount_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.netWarningCount_property.mObserverExplorer,
      valueExplorer: &self.netWarningCount_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "mNets",
      idx:mNets_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mNets_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mNetClassName
    self.mNetClassName_property.mObserverExplorer = nil
    self.mNetClassName_property.mValueExplorer = nil
  //--- Atomic property: mNetClassColor
    self.mNetClassColor_property.mObserverExplorer = nil
    self.mNetClassColor_property.mValueExplorer = nil
  //--- Atomic property: mTrackWidth
    self.mTrackWidth_property.mObserverExplorer = nil
    self.mTrackWidth_property.mValueExplorer = nil
  //--- Atomic property: mTrackWidthUnit
    self.mTrackWidthUnit_property.mObserverExplorer = nil
    self.mTrackWidthUnit_property.mValueExplorer = nil
  //--- Atomic property: mViaHoleDiameter
    self.mViaHoleDiameter_property.mObserverExplorer = nil
    self.mViaHoleDiameter_property.mValueExplorer = nil
  //--- Atomic property: mViaHoleDiameterUnit
    self.mViaHoleDiameterUnit_property.mObserverExplorer = nil
    self.mViaHoleDiameterUnit_property.mValueExplorer = nil
  //--- Atomic property: mViaPadDiameter
    self.mViaPadDiameter_property.mObserverExplorer = nil
    self.mViaPadDiameter_property.mValueExplorer = nil
  //--- Atomic property: mViaPadDiameterUnit
    self.mViaPadDiameterUnit_property.mObserverExplorer = nil
    self.mViaPadDiameterUnit_property.mValueExplorer = nil
  //--- Atomic property: mAllowTracksOnFrontSide
    self.mAllowTracksOnFrontSide_property.mObserverExplorer = nil
    self.mAllowTracksOnFrontSide_property.mValueExplorer = nil
  //--- Atomic property: mAllowTracksOnBackSide
    self.mAllowTracksOnBackSide_property.mObserverExplorer = nil
    self.mAllowTracksOnBackSide_property.mValueExplorer = nil
  //--- To many property: mNets
    self.mNets_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mNets = []
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mNetClassName
    self.mNetClassName_property.storeIn (dictionary: ioDictionary, forKey: "mNetClassName")
  //--- Atomic property: mNetClassColor
    self.mNetClassColor_property.storeIn (dictionary: ioDictionary, forKey: "mNetClassColor")
  //--- Atomic property: mTrackWidth
    self.mTrackWidth_property.storeIn (dictionary: ioDictionary, forKey: "mTrackWidth")
  //--- Atomic property: mTrackWidthUnit
    self.mTrackWidthUnit_property.storeIn (dictionary: ioDictionary, forKey: "mTrackWidthUnit")
  //--- Atomic property: mViaHoleDiameter
    self.mViaHoleDiameter_property.storeIn (dictionary: ioDictionary, forKey: "mViaHoleDiameter")
  //--- Atomic property: mViaHoleDiameterUnit
    self.mViaHoleDiameterUnit_property.storeIn (dictionary: ioDictionary, forKey: "mViaHoleDiameterUnit")
  //--- Atomic property: mViaPadDiameter
    self.mViaPadDiameter_property.storeIn (dictionary: ioDictionary, forKey: "mViaPadDiameter")
  //--- Atomic property: mViaPadDiameterUnit
    self.mViaPadDiameterUnit_property.storeIn (dictionary: ioDictionary, forKey: "mViaPadDiameterUnit")
  //--- Atomic property: mAllowTracksOnFrontSide
    self.mAllowTracksOnFrontSide_property.storeIn (dictionary: ioDictionary, forKey: "mAllowTracksOnFrontSide")
  //--- Atomic property: mAllowTracksOnBackSide
    self.mAllowTracksOnBackSide_property.storeIn (dictionary: ioDictionary, forKey: "mAllowTracksOnBackSide")
  //--- To many property: mNets
    self.store (
      managedObjectArray: self.mNets_property.propval,
      relationshipName: "mNets",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  //--- To many property: mNets
    self.mNets_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mNets",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [NetInProject])
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mNetClassName
    self.mNetClassName_property.readFrom (dictionary: inDictionary, forKey: "mNetClassName")
  //--- Atomic property: mNetClassColor
    self.mNetClassColor_property.readFrom (dictionary: inDictionary, forKey: "mNetClassColor")
  //--- Atomic property: mTrackWidth
    self.mTrackWidth_property.readFrom (dictionary: inDictionary, forKey: "mTrackWidth")
  //--- Atomic property: mTrackWidthUnit
    self.mTrackWidthUnit_property.readFrom (dictionary: inDictionary, forKey: "mTrackWidthUnit")
  //--- Atomic property: mViaHoleDiameter
    self.mViaHoleDiameter_property.readFrom (dictionary: inDictionary, forKey: "mViaHoleDiameter")
  //--- Atomic property: mViaHoleDiameterUnit
    self.mViaHoleDiameterUnit_property.readFrom (dictionary: inDictionary, forKey: "mViaHoleDiameterUnit")
  //--- Atomic property: mViaPadDiameter
    self.mViaPadDiameter_property.readFrom (dictionary: inDictionary, forKey: "mViaPadDiameter")
  //--- Atomic property: mViaPadDiameterUnit
    self.mViaPadDiameterUnit_property.readFrom (dictionary: inDictionary, forKey: "mViaPadDiameterUnit")
  //--- Atomic property: mAllowTracksOnFrontSide
    self.mAllowTracksOnFrontSide_property.readFrom (dictionary: inDictionary, forKey: "mAllowTracksOnFrontSide")
  //--- Atomic property: mAllowTracksOnBackSide
    self.mAllowTracksOnBackSide_property.readFrom (dictionary: inDictionary, forKey: "mAllowTracksOnBackSide")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mNetClassName\n"
    ioString += "mNetClassColor\n"
    ioString += "mTrackWidth\n"
    ioString += "mTrackWidthUnit\n"
    ioString += "mViaHoleDiameter\n"
    ioString += "mViaHoleDiameterUnit\n"
    ioString += "mViaPadDiameter\n"
    ioString += "mViaPadDiameterUnit\n"
    ioString += "mAllowTracksOnFrontSide\n"
    ioString += "mAllowTracksOnBackSide\n"
  //--- To one relationships
  //--- To many relationships
    ioString += "mNets\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mNetClassName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mNetClassColor.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mTrackWidth.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mTrackWidthUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mViaHoleDiameter.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mViaHoleDiameterUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mViaPadDiameter.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mViaPadDiameterUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mAllowTracksOnFrontSide.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mAllowTracksOnBackSide.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mNets {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.mOperationQueue.addOperation {
    //--- Atomic properties
      if let range = inDictionary ["mNetClassName"], let value = String.unarchiveFromDataRange (inData, range) {
        self.mNetClassName = value
      }
      if let range = inDictionary ["mNetClassColor"], let value = NSColor.unarchiveFromDataRange (inData, range) {
        self.mNetClassColor = value
      }
      if let range = inDictionary ["mTrackWidth"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mTrackWidth = value
      }
      if let range = inDictionary ["mTrackWidthUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mTrackWidthUnit = value
      }
      if let range = inDictionary ["mViaHoleDiameter"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mViaHoleDiameter = value
      }
      if let range = inDictionary ["mViaHoleDiameterUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mViaHoleDiameterUnit = value
      }
      if let range = inDictionary ["mViaPadDiameter"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mViaPadDiameter = value
      }
      if let range = inDictionary ["mViaPadDiameterUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.mViaPadDiameterUnit = value
      }
      if let range = inDictionary ["mAllowTracksOnFrontSide"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mAllowTracksOnFrontSide = value
      }
      if let range = inDictionary ["mAllowTracksOnBackSide"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.mAllowTracksOnBackSide = value
      }
    //--- To one relationships
    //--- To many relationships
      if let range = inDictionary ["mNets"], range.length > 0 {
        var relationshipArray = [NetInProject] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! NetInProject)
        }
        inParallelObjectSetupContext.mMutex.wait ()
        inParallelObjectSetupContext.mToManySetUpOperationList.append ({ self.mNets = relationshipArray })
        inParallelObjectSetupContext.mMutex.signal ()
      }
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mNets
    for managedObject in self.mNets {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mNets
    for managedObject in self.mNets {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------

