//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ConnectorInBoard_mX : class {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol ConnectorInBoard_mY : class {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: ConnectorInBoard
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ConnectorInBoard : BoardObject,
         ConnectorInBoard_mX,
         ConnectorInBoard_mY {

  //····················································································································
  //   To many property: mTracksP1
  //····················································································································

  let mTracksP1_property = StoredArrayOf_BoardTrack ()

  //····················································································································

  var mTracksP1_property_selection : EBSelection < [BoardTrack] > {
    return self.mTracksP1_property.prop
  }

  //····················································································································

  var mTracksP1 : [BoardTrack] {
    get { return self.mTracksP1_property.propval }
    set { self.mTracksP1_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mTracksP2
  //····················································································································

  let mTracksP2_property = StoredArrayOf_BoardTrack ()

  //····················································································································

  var mTracksP2_property_selection : EBSelection < [BoardTrack] > {
    return self.mTracksP2_property.prop
  }

  //····················································································································

  var mTracksP2 : [BoardTrack] {
    get { return self.mTracksP2_property.propval }
    set { self.mTracksP2_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  let mX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································

  var mX_property_selection : EBSelection <Int> { return self.mX_property.prop }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  let mY_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································

  var mY_property_selection : EBSelection <Int> { return self.mY_property.prop }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- To many property: mTracksP1 (has opposite relationship)
    self.mTracksP1_property.ebUndoManager = self.ebUndoManager
    self.mTracksP1_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mConnectorP1_property.setProp (me) } },
      resetter: { inObject in inObject.mConnectorP1_property.setProp (nil) }
    )
  //--- To many property: mTracksP2 (has opposite relationship)
    self.mTracksP2_property.ebUndoManager = self.ebUndoManager
    self.mTracksP2_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mConnectorP2_property.setProp (me) } },
      resetter: { inObject in inObject.mConnectorP2_property.setProp (nil) }
    )
  //--- Atomic property: mX
    self.mX_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mY
    self.mY_property.ebUndoManager = self.ebUndoManager
  //--- Install undoers and opposite setter for relationships
    self.mTracksP1_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mConnectorP1_property.setProp (me) } },
      resetter: { inObject in inObject.mConnectorP1_property.setProp (nil) }
    )
    self.mTracksP2_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mConnectorP2_property.setProp (me) } },
      resetter: { inObject in inObject.mConnectorP2_property.setProp (nil) }
    )
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mX",
      idx: self.mX_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mX_property.mObserverExplorer,
      valueExplorer: &self.mX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mY",
      idx: self.mY_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mY_property.mObserverExplorer,
      valueExplorer: &self.mY_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "mTracksP1",
      idx:mTracksP1_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mTracksP1_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mTracksP2",
      idx:mTracksP2_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mTracksP2_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- To many property: mTracksP1
    self.mTracksP1_property.mValueExplorer = nil
  //--- To many property: mTracksP2
    self.mTracksP2_property.mValueExplorer = nil
  //--- Atomic property: mX
    self.mX_property.mObserverExplorer = nil
    self.mX_property.mValueExplorer = nil
  //--- Atomic property: mY
    self.mY_property.mObserverExplorer = nil
    self.mY_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mTracksP1 = []
    self.mTracksP2 = []
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- To many property: mTracksP1
    self.store (
      managedObjectArray: self.mTracksP1_property.propval,
      relationshipName: "mTracksP1",
      intoDictionary: ioDictionary
    )
  //--- To many property: mTracksP2
    self.store (
      managedObjectArray: self.mTracksP2_property.propval,
      relationshipName: "mTracksP2",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: mX
    self.mX_property.storeIn (dictionary: ioDictionary, forKey:"mX")
  //--- Atomic property: mY
    self.mY_property.storeIn (dictionary: ioDictionary, forKey:"mY")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mTracksP1
    self.mTracksP1_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mTracksP1",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardTrack])
  //--- To many property: mTracksP2
    self.mTracksP2_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mTracksP2",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [BoardTrack])
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey:"mX")
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey:"mY")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mTracksP1
    for managedObject in self.mTracksP1 {
      objects.append (managedObject)
    }
  //--- To many property: mTracksP2
    for managedObject in self.mTracksP2 {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mTracksP1
    for managedObject in self.mTracksP1 {
      objects.append (managedObject)
    }
  //--- To many property: mTracksP2
    for managedObject in self.mTracksP2 {
      objects.append (managedObject)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

