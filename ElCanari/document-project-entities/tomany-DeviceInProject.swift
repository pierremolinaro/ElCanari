//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_DeviceInProject : ReadOnlyAbstractArrayProperty <DeviceInProject> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <DeviceInProject>, addedSet inAddedSet : Set <DeviceInProject>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_mDeviceName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mPrefix_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mDeviceVersion_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mDeviceFileData_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_versionString_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_sizeString_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_canExport_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_canRemove_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_packageNames_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_symbolAndTypesNames_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_pinPadAssignments_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_deviceSymbolDictionary_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_mDeviceName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mPrefix_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mDeviceVersion_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mDeviceFileData_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_versionString_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_sizeString_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_canExport_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_canRemove_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_packageNames_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_symbolAndTypesNames_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_pinPadAssignments_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_deviceSymbolDictionary_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'mDeviceName' stored property
  //····················································································································

  private var mObserversOf_mDeviceName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDeviceName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDeviceName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDeviceName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDeviceName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDeviceName_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mDeviceName.apply { (_ observer : EBEvent) in
        managedObject.mDeviceName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDeviceName_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    self.mObserversOf_mDeviceName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDeviceName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPrefix' stored property
  //····················································································································

  private var mObserversOf_mPrefix = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPrefix (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPrefix.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPrefix_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPrefix (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPrefix.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPrefix_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPrefix_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mPrefix.apply { (_ observer : EBEvent) in
        managedObject.mPrefix_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPrefix_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    self.mObserversOf_mPrefix.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPrefix_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDeviceVersion' stored property
  //····················································································································

  private var mObserversOf_mDeviceVersion = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDeviceVersion (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDeviceVersion.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceVersion_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDeviceVersion (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDeviceVersion.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceVersion_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDeviceVersion_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mDeviceVersion.apply { (_ observer : EBEvent) in
        managedObject.mDeviceVersion_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDeviceVersion_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    self.mObserversOf_mDeviceVersion.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDeviceVersion_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mDeviceFileData' stored property
  //····················································································································

  private var mObserversOf_mDeviceFileData = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mDeviceFileData (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mDeviceFileData.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceFileData_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDeviceFileData (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mDeviceFileData.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mDeviceFileData_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mDeviceFileData_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_mDeviceFileData.apply { (_ observer : EBEvent) in
        managedObject.mDeviceFileData_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mDeviceFileData_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    self.mObserversOf_mDeviceFileData.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mDeviceFileData_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'versionString' transient property
  //····················································································································

  private var mObserversOf_versionString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_versionString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.versionString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_versionString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.versionString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_versionString_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_versionString.apply { (_ observer : EBEvent) in
        managedObject.versionString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_versionString_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_versionString.apply { (_ observer : EBEvent) in
        managedObject.versionString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'sizeString' transient property
  //····················································································································

  private var mObserversOf_sizeString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_sizeString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_sizeString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sizeString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_sizeString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_sizeString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.sizeString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_sizeString_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_sizeString.apply { (_ observer : EBEvent) in
        managedObject.sizeString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_sizeString_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_sizeString.apply { (_ observer : EBEvent) in
        managedObject.sizeString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'canExport' transient property
  //····················································································································

  private var mObserversOf_canExport = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_canExport (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_canExport.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canExport_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_canExport (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_canExport.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canExport_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_canExport_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_canExport.apply { (_ observer : EBEvent) in
        managedObject.canExport_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_canExport_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_canExport.apply { (_ observer : EBEvent) in
        managedObject.canExport_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'canRemove' transient property
  //····················································································································

  private var mObserversOf_canRemove = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_canRemove (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_canRemove.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canRemove_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_canRemove (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_canRemove.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.canRemove_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_canRemove_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_canRemove.apply { (_ observer : EBEvent) in
        managedObject.canRemove_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_canRemove_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_canRemove.apply { (_ observer : EBEvent) in
        managedObject.canRemove_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'packageNames' transient property
  //····················································································································

  private var mObserversOf_packageNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_packageNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_packageNames.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.packageNames_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_packageNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_packageNames.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.packageNames_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_packageNames_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_packageNames.apply { (_ observer : EBEvent) in
        managedObject.packageNames_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_packageNames_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_packageNames.apply { (_ observer : EBEvent) in
        managedObject.packageNames_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'symbolAndTypesNames' transient property
  //····················································································································

  private var mObserversOf_symbolAndTypesNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_symbolAndTypesNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolAndTypesNames.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolAndTypesNames_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolAndTypesNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolAndTypesNames.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolAndTypesNames_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_symbolAndTypesNames_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_symbolAndTypesNames.apply { (_ observer : EBEvent) in
        managedObject.symbolAndTypesNames_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_symbolAndTypesNames_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_symbolAndTypesNames.apply { (_ observer : EBEvent) in
        managedObject.symbolAndTypesNames_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'pinPadAssignments' transient property
  //····················································································································

  private var mObserversOf_pinPadAssignments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_pinPadAssignments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_pinPadAssignments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinPadAssignments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_pinPadAssignments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_pinPadAssignments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinPadAssignments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_pinPadAssignments_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_pinPadAssignments.apply { (_ observer : EBEvent) in
        managedObject.pinPadAssignments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_pinPadAssignments_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_pinPadAssignments.apply { (_ observer : EBEvent) in
        managedObject.pinPadAssignments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'deviceSymbolDictionary' transient property
  //····················································································································

  private var mObserversOf_deviceSymbolDictionary = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_deviceSymbolDictionary (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_deviceSymbolDictionary.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceSymbolDictionary_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_deviceSymbolDictionary (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_deviceSymbolDictionary.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.deviceSymbolDictionary_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_deviceSymbolDictionary_toElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_deviceSymbolDictionary.apply { (_ observer : EBEvent) in
        managedObject.deviceSymbolDictionary_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_deviceSymbolDictionary_fromElementsOfSet (_ inSet : Set<DeviceInProject>) {
    for managedObject in inSet {
      self.mObserversOf_deviceSymbolDictionary.apply { (_ observer : EBEvent) in
        managedObject.deviceSymbolDictionary_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_DeviceInProject : ReadOnlyArrayOf_DeviceInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_DeviceInProject? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_DeviceInProject?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
      if inProvider == nil {
        self.mInternalArrayValue = []
      }
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newArray : [DeviceInProject] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newArray = v
        self.mTransientKind = .single
       case .multiple :
        newArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newArray = []
      self.mTransientKind = .empty
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [DeviceInProject] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [DeviceInProject] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_DeviceInProject <SUPER : EBManagedObject> : ReadOnlyArrayOf_DeviceInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    var newModelArray : [SUPER] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newModelArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newModelArray = v
        self.mTransientKind = .single
       case .multiple :
        newModelArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newModelArray = []
      self.mTransientKind = .empty
    }
    var newArray = [DeviceInProject] ()
    for superObject in newModelArray {
      if let object = superObject as? DeviceInProject {
        newArray.append (object)
      }
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [DeviceInProject] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [DeviceInProject] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_DeviceInProject : ReadOnlyArrayOf_DeviceInProject {

  //····················································································································
 
  func setProp (_ value :  [DeviceInProject]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_DeviceInProject : ReadWriteArrayOf_DeviceInProject {

  //····················································································································

  private var mModel : ReadWriteArrayOf_DeviceInProject? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_DeviceInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
      /* if inModel == nil {
        self.mInternalArrayValue = []
      } */
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [DeviceInProject]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [DeviceInProject]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [DeviceInProject] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : [DeviceInProject] {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: DeviceInProject
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_DeviceInProject : ReadWriteArrayOf_DeviceInProject, EBSignatureObserverProtocol {

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : DeviceInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : DeviceInProject) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : DeviceInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : DeviceInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  //  Init
  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [DeviceInProject] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "DeviceInProject") as? DeviceInProject {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [DeviceInProject]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [DeviceInProject]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //--- Write in preferences ?
    self.writeInPreferences ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <DeviceInProject>, addedSet inAddedSet : Set <DeviceInProject>) {
    for managedObject in inRemovedSet {
      managedObject.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (managedObject)
    }
  //---
    for managedObject in inAddedSet {
      managedObject.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }
 
  //····················································································································

  override var prop : EBSelection < [DeviceInProject] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [DeviceInProject]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [DeviceInProject] { return self.mInternalArrayValue }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mInternalArrayValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  func remove (_ object : DeviceInProject) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : DeviceInProject) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mInternalArrayValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

