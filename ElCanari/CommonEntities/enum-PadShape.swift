//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum PadShape : Int, EnumPropertyProtocol {
  case rectangular = 0
  case round = 1


  //····················································································································

  func descriptionForExplorer () -> String {
    switch self {
      case .rectangular : return "rectangular" // 0
      case .round : return "round" // 1
    }
  }

  //····················································································································
  //  Enum generic bindings utility functions
  //····················································································································

  static func buildfromRawValue (rawValue : Int) -> PadShape? {
    if let v = PadShape (rawValue:rawValue) {
      return v
    }else{
      return nil
    }
  }

  //····················································································································

  func enumfromRawValue (rawValue : Int) -> PadShape {
    var result = self
    let v : PadShape? = PadShape (rawValue:rawValue) ;
    if let unwrappedV = v {
      result = unwrappedV
    }
    return result
  }

  //····················································································································
  //  ValuePropertyProtocol
  //····················································································································

  func ebHashValue () -> UInt32 {
    return UInt32 (self.rawValue)
  }

  func convertToNSObject () -> NSObject {
    return NSNumber (value: self.rawValue)
  }

  static func convertFromNSObject (object : NSObject) -> PadShape {
    var result = PadShape.rectangular
    if let number = object as? NSNumber, let v = PadShape (rawValue: number.intValue) {
      result = v
    }
    return result
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

typealias EBReadOnlyProperty_PadShape = EBReadOnlyEnumProperty <PadShape>
typealias EBTransientProperty_PadShape = EBTransientEnumProperty <PadShape>
typealias EBReadWriteProperty_PadShape = EBReadWriteEnumProperty <PadShape>
typealias EBStoredProperty_PadShape = EBStoredEnumProperty <PadShape>
typealias EBPropertyProxy_PadShape = EBPropertyEnumProxy <PadShape>

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
