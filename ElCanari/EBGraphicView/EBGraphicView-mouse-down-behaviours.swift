//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class DefaultMouseDownBehaviour {

  //····················································································································

  public func onMouseDragged (_ inMouseDraggedLocation : NSPoint,
                              _ inGraphicView : EBGraphicView) {
  }

  //····················································································································

  public func onMouseUp () {
  }

  //····················································································································
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class MouseDownOutsideAnyObjectBehaviour : DefaultMouseDownBehaviour { // Mouse down without any modifier, outside any object

  //····················································································································

  private let mMouseDownUnalignedLocation : NSPoint

  //····················································································································

  public init (_ inUnalignedLocation : NSPoint, _ inViewController : EBGraphicViewControllerProtocol) {
    self.mMouseDownUnalignedLocation = inUnalignedLocation
    inViewController.clearSelection ()
  }

  //····················································································································

  public override func onMouseDragged (_ inMouseDraggedLocation : NSPoint,
                                       _ inGraphicView : EBGraphicView) {
    let xMin = min (self.mMouseDownUnalignedLocation.x, inMouseDraggedLocation.x)
    let yMin = min (self.mMouseDownUnalignedLocation.y, inMouseDraggedLocation.y)
    let xMax = max (self.mMouseDownUnalignedLocation.x, inMouseDraggedLocation.x)
    let yMax = max (self.mMouseDownUnalignedLocation.y, inMouseDraggedLocation.y)
    if (xMax > xMin) && (yMax > yMin) {
      let r = NSRect (x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin)
      inGraphicView.mSelectionRectangle = r
      let indexSet : Set <Int> = inGraphicView.indexesOfObjects (intersecting: r)
      inGraphicView.viewController?.setSelection (objectsWithIndexes: Array (indexSet))
    }else{
      inGraphicView.mSelectionRectangle = nil
      inGraphicView.viewController?.setSelection (objectsWithIndexes: [])
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class MouseDownOnObjectBehaviour : DefaultMouseDownBehaviour { // Mouse down without any modifier, on an object

  //····················································································································

  private let mMouseDownUnalignedLocation : NSPoint
  private var mLastMouseDraggedAlignedLocation : CanariPoint
  private let mObjectIndex : Int
  private let mPossibleKnobIndex : Int? //  knob index

  //····················································································································

  public init (_ inUnalignedLocation : NSPoint,
               objectIndex inObjectIndex : Int,
               possibleKnobIndex inPossibleKnobIndex : Int?,
               _ inGraphicView : EBGraphicView,
               _ inViewController : EBGraphicViewControllerProtocol) {
    self.mMouseDownUnalignedLocation = inUnalignedLocation
    self.mLastMouseDraggedAlignedLocation = inUnalignedLocation.canariPointAligned (onCanariGrid: inGraphicView.mouseGridInCanariUnit)
    self.mObjectIndex = inObjectIndex
    self.mPossibleKnobIndex = inPossibleKnobIndex
    inViewController.setSelection (objectsWithIndexes: [inObjectIndex])
  }

  //····················································································································

  public override func onMouseDragged (_ inMouseDraggedLocation : NSPoint,
                                       _ inGraphicView : EBGraphicView) {
    let mouseDraggedCanariLocation = inMouseDraggedLocation.canariPointAligned (onCanariGrid: inGraphicView.mouseGridInCanariUnit)
    var proposedTranslation = CanariPoint (
      x: mouseDraggedCanariLocation.x - self.mLastMouseDraggedAlignedLocation.x,
      y: mouseDraggedCanariLocation.y - self.mLastMouseDraggedAlignedLocation.y
    )
    if inGraphicView.mDraggingObjectsIsAlignedOnArrowKeyMagnitude {
      proposedTranslation = proposedTranslation.point (alignedOnGrid: inGraphicView.mouseGridInCanariUnit)
    }
    inGraphicView.guideFor (objectIndexes: [self.mObjectIndex])
    inGraphicView.drag (knob: self.mPossibleKnobIndex, objectIndex: self.mObjectIndex, proposedTranslation, mouseDraggedCanariLocation)
    self.mLastMouseDraggedAlignedLocation = mouseDraggedCanariLocation
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ShiftMouseDownOutsideAnyObjectBehaviour : DefaultMouseDownBehaviour { // Mouse down without any modifier, outside any object

  //····················································································································

  private let mMouseDownUnalignedLocation : NSPoint
  private let mSelectedObjectIndexSet : Set <Int>

  //····················································································································

  public init (_ inUnalignedLocation : NSPoint, _ inViewController : EBGraphicViewControllerProtocol) {
    self.mMouseDownUnalignedLocation = inUnalignedLocation
    self.mSelectedObjectIndexSet = inViewController.selectedIndexesSet
  }

  //····················································································································

  public override func onMouseDragged (_ inMouseDraggedLocation : NSPoint,
                                       _ inGraphicView : EBGraphicView) {
    let xMin = min (self.mMouseDownUnalignedLocation.x, inMouseDraggedLocation.x)
    let yMin = min (self.mMouseDownUnalignedLocation.y, inMouseDraggedLocation.y)
    let xMax = max (self.mMouseDownUnalignedLocation.x, inMouseDraggedLocation.x)
    let yMax = max (self.mMouseDownUnalignedLocation.y, inMouseDraggedLocation.y)
    if (xMax > xMin) && (yMax > yMin) {
      let r = NSRect (x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin)
      inGraphicView.mSelectionRectangle = r
      let indexSet : Set <Int> = inGraphicView.indexesOfObjects (intersecting: r)
      inGraphicView.viewController?.setSelection (objectsWithIndexes: Array (indexSet.symmetricDifference (self.mSelectedObjectIndexSet)))
    }else{
      inGraphicView.mSelectionRectangle = nil
      inGraphicView.viewController?.setSelection (objectsWithIndexes: Array (self.mSelectedObjectIndexSet))
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ShiftMouseDownOnObjectBehaviour : DefaultMouseDownBehaviour { // Mouse down without any modifier, on an object

  //····················································································································

  private let mMouseDownUnalignedLocation : NSPoint
  private let mObjectIndex : Int
  private let mSelectedObjectIndexSet : Set <Int>

  //····················································································································

  public init (_ inUnalignedLocation : NSPoint,
               objectIndex inObjectIndex : Int,
               _ inViewController : EBGraphicViewControllerProtocol) {
    self.mMouseDownUnalignedLocation = inUnalignedLocation
    self.mObjectIndex = inObjectIndex
    self.mSelectedObjectIndexSet = inViewController.selectedIndexesSet
    inViewController.setSelection (objectsWithIndexes: Array (self.mSelectedObjectIndexSet.symmetricDifference ([inObjectIndex])))
  }

  //····················································································································

  public override func onMouseDragged (_ inMouseDraggedLocation : NSPoint,
                                       _ inGraphicView : EBGraphicView) {
    let xMin = min (self.mMouseDownUnalignedLocation.x, inMouseDraggedLocation.x)
    let yMin = min (self.mMouseDownUnalignedLocation.y, inMouseDraggedLocation.y)
    let xMax = max (self.mMouseDownUnalignedLocation.x, inMouseDraggedLocation.x)
    let yMax = max (self.mMouseDownUnalignedLocation.y, inMouseDraggedLocation.y)
    if (xMax > xMin) && (yMax > yMin) {
      let r = NSRect (x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin)
      inGraphicView.mSelectionRectangle = r
      let indexSet : Set <Int> = inGraphicView.indexesOfObjects (intersecting: r)
      inGraphicView.viewController?.setSelection (objectsWithIndexes: Array (indexSet.symmetricDifference (self.mSelectedObjectIndexSet)))
    }else{
      inGraphicView.mSelectionRectangle = nil
      inGraphicView.viewController?.setSelection (objectsWithIndexes: Array (self.mSelectedObjectIndexSet))
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
