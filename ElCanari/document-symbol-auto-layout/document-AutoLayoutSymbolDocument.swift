//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

@objc(AutoLayoutSymbolDocument) class AutoLayoutSymbolDocument : AutoLayoutSymbolDocumentSuperClass, NSToolbarDelegate {

  //····················································································································
  //   Array controller: mSymbolObjectsController
  //····················································································································

  var mSymbolObjectsController = Controller_AutoLayoutSymbolDocument_mSymbolObjectsController ()

  //····················································································································
  //   Selection controller: mSymbolTextSelectionController
  //····················································································································

  var mSymbolTextSelectionController = SelectionController_AutoLayoutSymbolDocument_mSymbolTextSelectionController ()

  //····················································································································
  //   Selection controller: mSymbolPinSelectionController
  //····················································································································

  var mSymbolPinSelectionController = SelectionController_AutoLayoutSymbolDocument_mSymbolPinSelectionController ()

  //····················································································································
  //   Transient property: statusMessage
  //····················································································································

  final let statusMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var statusMessage_property_selection : EBSelection <String> {
    return self.statusMessage_property.selection
  }

  //····················································································································

  final var statusMessage : String? {
    switch self.statusMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: metadataStatus
  //····················································································································

  final let metadataStatus_property = EBTransientProperty_MetadataStatus ()

  //····················································································································

  final var metadataStatus_property_selection : EBSelection <MetadataStatus> {
    return self.metadataStatus_property.selection
  }

  //····················································································································

  final var metadataStatus : MetadataStatus? {
    switch self.metadataStatus_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: addSegmentButtonImage
  //····················································································································

  final let addSegmentButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addSegmentButtonImage_property_selection : EBSelection <NSImage> {
    return self.addSegmentButtonImage_property.selection
  }

  //····················································································································

  final var addSegmentButtonImage : NSImage? {
    switch self.addSegmentButtonImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: addBezierButtonImage
  //····················································································································

  final let addBezierButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addBezierButtonImage_property_selection : EBSelection <NSImage> {
    return self.addBezierButtonImage_property.selection
  }

  //····················································································································

  final var addBezierButtonImage : NSImage? {
    switch self.addBezierButtonImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: addOvalButtonImage
  //····················································································································

  final let addOvalButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addOvalButtonImage_property_selection : EBSelection <NSImage> {
    return self.addOvalButtonImage_property.selection
  }

  //····················································································································

  final var addOvalButtonImage : NSImage? {
    switch self.addOvalButtonImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: addSolidOvalButtonImage
  //····················································································································

  final let addSolidOvalButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addSolidOvalButtonImage_property_selection : EBSelection <NSImage> {
    return self.addSolidOvalButtonImage_property.selection
  }

  //····················································································································

  final var addSolidOvalButtonImage : NSImage? {
    switch self.addSolidOvalButtonImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: addSolidRectButtonImage
  //····················································································································

  final let addSolidRectButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addSolidRectButtonImage_property_selection : EBSelection <NSImage> {
    return self.addSolidRectButtonImage_property.selection
  }

  //····················································································································

  final var addSolidRectButtonImage : NSImage? {
    switch self.addSolidRectButtonImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: addTextButtonImage
  //····················································································································

  final let addTextButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addTextButtonImage_property_selection : EBSelection <NSImage> {
    return self.addTextButtonImage_property.selection
  }

  //····················································································································

  final var addTextButtonImage : NSImage? {
    switch self.addTextButtonImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: addPinButtonImage
  //····················································································································

  final let addPinButtonImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var addPinButtonImage_property_selection : EBSelection <NSImage> {
    return self.addPinButtonImage_property.selection
  }

  //····················································································································

  final var addPinButtonImage : NSImage? {
    switch self.addPinButtonImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: documentFilePath
  //····················································································································

  final let documentFilePath_property = EBTransientProperty_String ()

  //····················································································································

  final var documentFilePath_property_selection : EBSelection <String> {
    return self.documentFilePath_property.selection
  }

  //····················································································································

  final var documentFilePath : String? {
    switch self.documentFilePath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: statusImage
  //····················································································································

  final let statusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var statusImage_property_selection : EBSelection <NSImage> {
    return self.statusImage_property.selection
  }

  //····················································································································

  final var statusImage : NSImage? {
    switch self.statusImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    Outlets
  //····················································································································

  weak final var mPackageGraphicView : AutoLayoutGraphicView? = nil

  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet final var mAddBezierButton : CanariDragSourceButton? = nil
  @IBOutlet final var mAddOvalButton : CanariDragSourceButton? = nil
  @IBOutlet final var mAddPinButton : CanariDragSourceButton? = nil
  @IBOutlet final var mAddSegmentButton : CanariDragSourceButton? = nil
  @IBOutlet final var mAddSolidOvalButton : CanariDragSourceButton? = nil
  @IBOutlet final var mAddSolidRectButton : CanariDragSourceButton? = nil
  @IBOutlet final var mAddTextButton : CanariDragSourceButton? = nil
  @IBOutlet final var mComposedSymbolView : EBEnclosingGraphicView? = nil
  @IBOutlet final var mCrossColorOfSymbolGridColorWell : EBColorWell? = nil
  @IBOutlet final var mDeselectIssueButton : EBButton? = nil
  @IBOutlet final var mGridDisplayFactorPopUpButton : EBPopUpButton? = nil
  @IBOutlet final var mGridStyle : EBPopUpButton? = nil
  @IBOutlet final var mHorizontalFlip : EBSwitch? = nil
  @IBOutlet final var mInspectorSegmentedControl : CanariSegmentedControl? = nil
  @IBOutlet final var mIssueScrollView : NSScrollView? = nil
  @IBOutlet final var mIssueTableView : IssueTableView? = nil
  @IBOutlet final var mIssueTextField : EBTextObserverField? = nil
  @IBOutlet final var mLineColorOfSymbolGridColorWell : EBColorWell? = nil
  @IBOutlet final var mPinInspectorView : CanariViewWithKeyView? = nil
  @IBOutlet final var mPinNameFontButton : EBFontButton? = nil
  @IBOutlet final var mStatusImageViewInToolbar : EBImageObserverView? = nil
  @IBOutlet final var mSymbolBackgroundColorColorWell : EBColorWell? = nil
  @IBOutlet final var mSymbolBaseInspectorView : CanariViewWithKeyView? = nil
  @IBOutlet final var mSymbolColorColorWell : EBColorWell? = nil
  @IBOutlet final var mSymbolDrawingWidthMultipliedByTenPopupButton : EBPopUpButton? = nil
  @IBOutlet final var mSymbolIssueInspectorView : CanariViewWithKeyView? = nil
  @IBOutlet final var mSymbolPinLabelHorizontalAlignmentSegmentedControl : CanariEnumSegmentedControl? = nil
  @IBOutlet final var mSymbolPinLabelNameTextField : EBTextField? = nil
  @IBOutlet final var mSymbolPinNumberHorizontalAlignmentSegmentedControl : CanariEnumSegmentedControl? = nil
  @IBOutlet final var mSymbolPinNumberIsVisibleInSchematicsSwitch : EBSwitch? = nil
  @IBOutlet final var mSymbolRootInspectorView : NSView? = nil
  @IBOutlet final var mSymbolTextHorizontalAlignmentSegmentedControl : CanariEnumSegmentedControl? = nil
  @IBOutlet final var mSymbolTextValueTextField : EBTextField? = nil
  @IBOutlet final var mSymbolZoomFlipInspectorView : CanariViewWithKeyView? = nil
  @IBOutlet final var mTextInspectorView : CanariViewWithKeyView? = nil
  @IBOutlet final var mVerticalFlip : EBSwitch? = nil
  @IBOutlet final var mXPlacardUnitPopUpButton : EBPopUpButton? = nil
  @IBOutlet final var mYPlacardUnitPopUpButton : EBPopUpButton? = nil

  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

//  var mController_mDeselectIssueButton_hidden : MultipleBindingController_hidden? = nil
//  var mController_mIssueScrollView_hidden : MultipleBindingController_hidden? = nil

  //····················································································································
  //    Document file path
  //····················································································································
  // Cette méthode est appelée après tout enregistrement, qu'il y ait changement de nom ou pas.

  override final var fileModificationDate : Date? {
    get {
      return super.fileModificationDate
    }
    set{
      super.fileModificationDate = newValue
      self.documentFilePath_property.postEvent ()
    }
  }

  //····················································································································

  final func computeTransient_documentFilePath () -> String {
    var documentFilePath = ""
    if let url = self.fileURL {
      documentFilePath = url.path
    }
    return documentFilePath
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
  //--- Array controller property: mSymbolObjectsController
    self.mSymbolObjectsController.addExplorer (name: "mSymbolObjectsController", y:&y, view:view)
  //--- Selection controller property: mSymbolTextSelectionController
    self.mSymbolTextSelectionController.addExplorer (name: "mSymbolTextSelectionController", y:&y, view:view)
  //--- Selection controller property: mSymbolPinSelectionController
    self.mSymbolPinSelectionController.addExplorer (name: "mSymbolPinSelectionController", y:&y, view:view)
  //---
    super.populateExplorerWindow (&y, view:view)
  }

  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override final func rootEntityClassName () -> String {
    return "SymbolRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  final var rootObject : SymbolRoot { return self.mRootObject as! SymbolRoot }

  //····················································································································
  //    VIEW mPageMasterView
  //····················································································································

  lazy var mPageMasterView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mDocumentMainView
  //····················································································································

  lazy var mDocumentMainView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (spacing: 0)
    let view_0 = AutoLayoutHorizontalStackView ()
      .set (margins: 8)
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
      do{
        let view_0_0_0 = AutoLayoutSegmentedControlWithPages (documentView: self.mPageMasterView, equalWidth: false, small: false)
          .addPage (title: "Symbol", pageView: self.mSymbolPage)
          .addPage (title: "Infos", pageView: self.mInfosPage)
          .bind_selectedPage (self.rootObject.selectedPageIndex_property)
        view_0_0.appendView (view_0_0_0)
        let view_0_0_1 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_0_1_0 = AutoLayoutFlexibleSpace ()
          view_0_0_1.appendView (view_0_0_1_0)
          let view_0_0_1_1 = AutoLayoutStaticLabel (title: "Page", bold: false, small: true)
          view_0_0_1.appendView (view_0_0_1_1)
          let view_0_0_1_2 = AutoLayoutFlexibleSpace ()
          view_0_0_1.appendView (view_0_0_1_2)
        }
        view_0_0.appendView (view_0_0_1)
      }
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView ()
      do{
        let view_0_1_0 = AutoLayoutSignatureField ()
          .bind_signature (self.signatureObserver_property)
        view_0_1.appendView (view_0_1_0)
        let view_0_1_1 = AutoLayoutStaticLabel (title: "Signature", bold: false, small: true)
          .setCenterAlignment ()
          .makeWidthExpandable ()
        view_0_1.appendView (view_0_1_1)
      }
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutVerticalStackView ()
      do{
        let view_0_2_0 = AutoLayoutVersionField ()
          .bind_version (self.versionObserver_property)
          .bind_versionShouldChange (self.versionShouldChangeObserver_property)
        view_0_2.appendView (view_0_2_0)
        let view_0_2_1 = AutoLayoutStaticLabel (title: "Version", bold: false, small: true)
          .setCenterAlignment ()
          .makeWidthExpandable ()
        view_0_2.appendView (view_0_2_1)
      }
      view_0.appendView (view_0_2)
      let view_0_3 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_3)
      let view_0_4 = AutoLayoutVerticalStackView ()
      do{
        let view_0_4_0 = AutoLayoutHorizontalStackView ()
        do{
          let view_0_4_0_0 = AutoLayoutFlexibleSpace ()
          view_0_4_0.appendView (view_0_4_0_0)
          let view_0_4_0_1 = AutoLayoutImageObserverView (small: false)
            .bind_image (self.statusImage_property)
            .bind_tooltip (self.statusMessage_property)
          view_0_4_0.appendView (view_0_4_0_1)
          let view_0_4_0_2 = AutoLayoutFlexibleSpace ()
          view_0_4_0.appendView (view_0_4_0_2)
        }
        view_0_4.appendView (view_0_4_0)
        let view_0_4_1 = AutoLayoutStaticLabel (title: "Status", bold: false, small: true)
          .setCenterAlignment ()
        view_0_4.appendView (view_0_4_1)
      }
      view_0.appendView (view_0_4)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
    vStackView.appendView (view_1)
    let view_2 = mPageMasterView
    vStackView.appendView (view_2)
    return vStackView
  } ()

  //····················································································································
  //    VIEW mSymbolPageInspectorMasterView
  //····················································································································

  let mSymbolPageInspectorMasterView : AutoLayoutAbstractStackView = AutoLayoutVerticalStackView ()

  //····················································································································
  //    VIEW mSymbolPage
  //····················································································································

  lazy var mSymbolPage : AutoLayoutHorizontalStackView = {
    let hStackView = AutoLayoutHorizontalStackView ()
      .set (margins: 0)
      .set (spacing: 0)
    let view_0 = AutoLayoutVerticalStackView ()
      .set (width: 250)
    do{
      let view_0_0 = AutoLayoutVerticalStackView ()
        .set (leftMargin: 20)
        .set (rightMargin: 20)
        .set (topMargin: 8)
        .set (spacing: 12)
      do{
        let view_0_0_0 = AutoLayoutHorizontalStackView ()
          .set (spacing: 0)
        do{
          let view_0_0_0_0 = AutoLayoutDragSourceButton (tooltip: "Add Segment")
            .bind_image (self.addSegmentButtonImage_property)
          self.configure_addSymbolSegment (view_0_0_0_0) // Configurator
          view_0_0_0.appendView (view_0_0_0_0)
          let view_0_0_0_1 = AutoLayoutFlexibleSpace ()
          view_0_0_0.appendView (view_0_0_0_1)
          let view_0_0_0_2 = AutoLayoutDragSourceButton (tooltip: "Add Bezier")
            .bind_image (self.addBezierButtonImage_property)
          self.configure_addSymbolBezier (view_0_0_0_2) // Configurator
          view_0_0_0.appendView (view_0_0_0_2)
          let view_0_0_0_3 = AutoLayoutFlexibleSpace ()
          view_0_0_0.appendView (view_0_0_0_3)
          let view_0_0_0_4 = AutoLayoutDragSourceButton (tooltip: "Add Solid Oval")
            .bind_image (self.addSolidOvalButtonImage_property)
          self.configure_addSymbolSolidOval (view_0_0_0_4) // Configurator
          view_0_0_0.appendView (view_0_0_0_4)
          let view_0_0_0_5 = AutoLayoutFlexibleSpace ()
          view_0_0_0.appendView (view_0_0_0_5)
          let view_0_0_0_6 = AutoLayoutDragSourceButton (tooltip: "Add Oval")
            .bind_image (self.addOvalButtonImage_property)
          self.configure_addSymbolOval (view_0_0_0_6) // Configurator
          view_0_0_0.appendView (view_0_0_0_6)
          let view_0_0_0_7 = AutoLayoutFlexibleSpace ()
          view_0_0_0.appendView (view_0_0_0_7)
          let view_0_0_0_8 = AutoLayoutDragSourceButton (tooltip: "Add Solid Rect")
            .bind_image (self.addSolidRectButtonImage_property)
          self.configure_addSymbolSolidRect (view_0_0_0_8) // Configurator
          view_0_0_0.appendView (view_0_0_0_8)
          let view_0_0_0_9 = AutoLayoutFlexibleSpace ()
          view_0_0_0.appendView (view_0_0_0_9)
          let view_0_0_0_10 = AutoLayoutDragSourceButton (tooltip: "Add Text")
            .bind_image (self.addTextButtonImage_property)
          self.configure_addSymbolText (view_0_0_0_10) // Configurator
          view_0_0_0.appendView (view_0_0_0_10)
          let view_0_0_0_11 = AutoLayoutFlexibleSpace ()
          view_0_0_0.appendView (view_0_0_0_11)
          let view_0_0_0_12 = AutoLayoutDragSourceButton (tooltip: "Add Pin")
            .bind_image (self.addPinButtonImage_property)
          self.configure_addSymbolPin (view_0_0_0_12) // Configurator
          view_0_0_0.appendView (view_0_0_0_12)
          let view_0_0_0_13 = AutoLayoutFlexibleSpace ()
          view_0_0_0.appendView (view_0_0_0_13)
        }
        view_0_0.appendView (view_0_0_0)
      }
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutVerticalStackView.HorizontalSeparator ()
      view_0.appendView (view_0_1)
      let view_0_2 = AutoLayoutVerticalStackView ()
        .set (leftMargin: 20)
        .set (rightMargin: 20)
        .set (bottomMargin: 20)
        .set (spacing: 12)
      do{
        let view_0_2_0 = AutoLayoutSegmentedControlWithPages (documentView: self.mSymbolPageInspectorMasterView, equalWidth: true, small: true)
          .makeWidthExpandable ()
          .addPage (title: "", pageView: self.mSelectedObjectsInspectorView)
          .addPage (title: "", pageView: self.mGridZoomInspectorView)
          .addPage (title: "", pageView: self.mIssuesInspectorView)
          .bind_selectedPage (self.rootObject.selectedInspector_property)
        self.configure_packagePageSegmentedControl (view_0_2_0) // Configurator
        view_0_2.appendView (view_0_2_0)
        let view_0_2_1 = self.mSymbolPageInspectorMasterView
        view_0_2.appendView (view_0_2_1)
      }
      view_0.appendView (view_0_2)
    }
    hStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView.VerticalSeparator ()
    hStackView.appendView (view_1)
    let view_2 = AutoLayoutGraphicView (minZoom: 10, maxZoom: 4000)
      .bind_horizontalFlip (self.rootObject.horizontalFlip_property)
      .bind_verticalFlip (self.rootObject.verticalFlip_property)
      .bind_gridStyle (self.rootObject.gridStyle_property)
      .bind_gridDisplayFactor (self.rootObject.gridDisplay_property)
      .bind_gridLineColor (preferences_lineColorOfSymbolGrid_property)
      .bind_gridCrossColor (preferences_crossColorOfSymbolGrid_property)
      .bind_zoom (self.rootObject.zoom_property)
      .bind_backColor (preferences_symbolBackgroundColor_property)
      .bind_xPlacardUnit (self.rootObject.xPlacardUnit_property)
      .bind_yPlacardUnit (self.rootObject.yPlacardUnit_property)
      .bind_graphic_controller (self.mSymbolObjectsController)
    self.mPackageGraphicView = view_2 // Outlet
    self.configure_packageGraphicView (view_2) // Configurator
    hStackView.appendView (view_2)
    return hStackView
  } ()

  //····················································································································
  //    VIEW mSelectedObjectsInspectorView
  //····················································································································

  lazy var mSelectedObjectsInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mGridZoomInspectorView
  //····················································································································

  lazy var mGridZoomInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mIssuesInspectorView
  //····················································································································

  lazy var mIssuesInspectorView : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
    return vStackView
  } ()

  //····················································································································
  //    VIEW mInfosPage
  //····················································································································

  lazy var mInfosPage : AutoLayoutVerticalStackView = {
    let vStackView = AutoLayoutVerticalStackView ()
      .set (leftMargin: 20)
      .set (rightMargin: 20)
      .set (bottomMargin: 20)
      .set (topMargin: 8)
    let view_0 = AutoLayoutHorizontalStackView ()
    do{
      let view_0_0 = AutoLayoutButton (title: "Reset Version and Signature", small: true)
        .bind_run (
          target: self,
          selector: #selector (AutoLayoutSymbolDocument.resetVersionAction (_:))
        )
      view_0.appendView (view_0_0)
      let view_0_1 = AutoLayoutFlexibleSpace ()
      view_0.appendView (view_0_1)
    }
    vStackView.appendView (view_0)
    let view_1 = AutoLayoutHorizontalStackView ()
    do{
      let view_1_0 = AutoLayoutVerticalStackView ()
      do{
        let view_1_0_0 = AutoLayoutStaticLabel (title: "Comments", bold: true, small: false)
        view_1_0.appendView (view_1_0_0)
        let view_1_0_1 = AutoLayoutFlexibleSpace ()
        view_1_0.appendView (view_1_0_1)
      }
      view_1.appendView (view_1_0)
      let view_1_1 = AutoLayoutTextView (editable: true)
        .bind_value (self.rootObject.comments_property)
      view_1.appendView (view_1_1)
    }
    vStackView.appendView (view_1)
    return vStackView
  } ()

  //····················································································································
  //    Build User Interface
  //····················································································································

  override func ebBuildUserInterface () {
  //--- Build window content view
    self.configureProperties ()
    let mainView = self.mDocumentMainView
  //--- Call outlet linkers
  //--- Assign main view to window
    self.windowForSheet?.contentView = mainView
  }
  
  //····················································································································
  //    Toolbar
  //····················································································································
  
  final func toolbarAllowedItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return self.toolbarDefaultItemIdentifiers (toolbar)
  }

  //····················································································································

  final func toolbarDefaultItemIdentifiers (_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {
    return []
  }

  //····················································································································

  final func toolbar (_ toolbar: NSToolbar,
                      itemForItemIdentifier itemIdentifier: NSToolbarItem.Identifier,
                      willBeInsertedIntoToolbar flag: Bool) -> NSToolbarItem? {
    switch itemIdentifier.rawValue {
    default :
      return nil
    }
  }

  //····················································································································
  //    check outlet connections
  //····················································································································

//  private func checkOutletConnections () {
//    let start = Date ()
//    checkOutletConnection (self.mAddBezierButton, "mAddBezierButton", CanariDragSourceButton.self, #file, #line)
//    checkOutletConnection (self.mAddOvalButton, "mAddOvalButton", CanariDragSourceButton.self, #file, #line)
//    checkOutletConnection (self.mAddPinButton, "mAddPinButton", CanariDragSourceButton.self, #file, #line)
//    checkOutletConnection (self.mAddSegmentButton, "mAddSegmentButton", CanariDragSourceButton.self, #file, #line)
//    checkOutletConnection (self.mAddSolidOvalButton, "mAddSolidOvalButton", CanariDragSourceButton.self, #file, #line)
//    checkOutletConnection (self.mAddSolidRectButton, "mAddSolidRectButton", CanariDragSourceButton.self, #file, #line)
//    checkOutletConnection (self.mAddTextButton, "mAddTextButton", CanariDragSourceButton.self, #file, #line)
//    checkOutletConnection (self.mComposedSymbolView, "mComposedSymbolView", EBEnclosingGraphicView.self, #file, #line)
//    checkOutletConnection (self.mCrossColorOfSymbolGridColorWell, "mCrossColorOfSymbolGridColorWell", EBColorWell.self, #file, #line)
//    checkOutletConnection (self.mDeselectIssueButton, "mDeselectIssueButton", EBButton.self, #file, #line)
//    checkOutletConnection (self.mGridDisplayFactorPopUpButton, "mGridDisplayFactorPopUpButton", EBPopUpButton.self, #file, #line)
//    checkOutletConnection (self.mGridStyle, "mGridStyle", EBPopUpButton.self, #file, #line)
//    checkOutletConnection (self.mHorizontalFlip, "mHorizontalFlip", EBSwitch.self, #file, #line)
//    checkOutletConnection (self.mInspectorSegmentedControl, "mInspectorSegmentedControl", CanariSegmentedControl.self, #file, #line)
//    checkOutletConnection (self.mIssueScrollView, "mIssueScrollView", NSScrollView.self, #file, #line)
//    checkOutletConnection (self.mIssueTableView, "mIssueTableView", IssueTableView.self, #file, #line)
//    checkOutletConnection (self.mIssueTextField, "mIssueTextField", EBTextObserverField.self, #file, #line)
//    checkOutletConnection (self.mLineColorOfSymbolGridColorWell, "mLineColorOfSymbolGridColorWell", EBColorWell.self, #file, #line)
//    checkOutletConnection (self.mPinInspectorView, "mPinInspectorView", CanariViewWithKeyView.self, #file, #line)
//    checkOutletConnection (self.mPinNameFontButton, "mPinNameFontButton", EBFontButton.self, #file, #line)
//    checkOutletConnection (self.mStatusImageViewInToolbar, "mStatusImageViewInToolbar", EBImageObserverView.self, #file, #line)
//    checkOutletConnection (self.mSymbolBackgroundColorColorWell, "mSymbolBackgroundColorColorWell", EBColorWell.self, #file, #line)
//    checkOutletConnection (self.mSymbolBaseInspectorView, "mSymbolBaseInspectorView", CanariViewWithKeyView.self, #file, #line)
//    checkOutletConnection (self.mSymbolColorColorWell, "mSymbolColorColorWell", EBColorWell.self, #file, #line)
//    checkOutletConnection (self.mSymbolDrawingWidthMultipliedByTenPopupButton, "mSymbolDrawingWidthMultipliedByTenPopupButton", EBPopUpButton.self, #file, #line)
//    checkOutletConnection (self.mSymbolIssueInspectorView, "mSymbolIssueInspectorView", CanariViewWithKeyView.self, #file, #line)
//    checkOutletConnection (self.mSymbolPinLabelHorizontalAlignmentSegmentedControl, "mSymbolPinLabelHorizontalAlignmentSegmentedControl", CanariEnumSegmentedControl.self, #file, #line)
//    checkOutletConnection (self.mSymbolPinLabelNameTextField, "mSymbolPinLabelNameTextField", EBTextField.self, #file, #line)
//    checkOutletConnection (self.mSymbolPinNumberHorizontalAlignmentSegmentedControl, "mSymbolPinNumberHorizontalAlignmentSegmentedControl", CanariEnumSegmentedControl.self, #file, #line)
//    checkOutletConnection (self.mSymbolPinNumberIsVisibleInSchematicsSwitch, "mSymbolPinNumberIsVisibleInSchematicsSwitch", EBSwitch.self, #file, #line)
//    checkOutletConnection (self.mSymbolRootInspectorView, "mSymbolRootInspectorView", NSView.self, #file, #line)
//    checkOutletConnection (self.mSymbolTextHorizontalAlignmentSegmentedControl, "mSymbolTextHorizontalAlignmentSegmentedControl", CanariEnumSegmentedControl.self, #file, #line)
//    checkOutletConnection (self.mSymbolTextValueTextField, "mSymbolTextValueTextField", EBTextField.self, #file, #line)
//    checkOutletConnection (self.mSymbolZoomFlipInspectorView, "mSymbolZoomFlipInspectorView", CanariViewWithKeyView.self, #file, #line)
//    checkOutletConnection (self.mTextInspectorView, "mTextInspectorView", CanariViewWithKeyView.self, #file, #line)
//    checkOutletConnection (self.mVerticalFlip, "mVerticalFlip", EBSwitch.self, #file, #line)
//    checkOutletConnection (self.mXPlacardUnitPopUpButton, "mXPlacardUnitPopUpButton", EBPopUpButton.self, #file, #line)
//    checkOutletConnection (self.mYPlacardUnitPopUpButton, "mYPlacardUnitPopUpButton", EBPopUpButton.self, #file, #line)
//    if LOG_OPERATION_DURATION {
//      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
//      Swift.print ("Check outlet connections \(durationMS) ms")
//    }
//  }
  
  //····················································································································
  
  final private func configureProperties () {
    let start = Date ()
    var opIdx = 0
  //--- Array controller property: mSymbolObjectsController
    self.mSymbolObjectsController.bind_model (self.rootObject.symbolObjects_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mSymbolTextSelectionController
    self.mSymbolTextSelectionController.bind_selection (model: self.mSymbolObjectsController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: mSymbolPinSelectionController
    self.mSymbolPinSelectionController.bind_selection (model: self.mSymbolObjectsController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: statusMessage
    self.statusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_AutoLayoutSymbolDocument_statusMessage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.statusMessage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: metadataStatus
    self.metadataStatus_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_AutoLayoutSymbolDocument_metadataStatus (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.metadataStatus_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addSegmentButtonImage
    self.addSegmentButtonImage_property.mReadModelFunction = {
        let kind = preferences_symbolColor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (preferences_symbolColor_property_selection) {
          case (.single (let v0)) :
            return .single (transient_AutoLayoutSymbolDocument_addSegmentButtonImage (v0))
          default :
            return .empty
          }
        }
    }
    preferences_symbolColor_property.addEBObserver (self.addSegmentButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addBezierButtonImage
    self.addBezierButtonImage_property.mReadModelFunction = {
        let kind = preferences_symbolColor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (preferences_symbolColor_property_selection) {
          case (.single (let v0)) :
            return .single (transient_AutoLayoutSymbolDocument_addBezierButtonImage (v0))
          default :
            return .empty
          }
        }
    }
    preferences_symbolColor_property.addEBObserver (self.addBezierButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addOvalButtonImage
    self.addOvalButtonImage_property.mReadModelFunction = {
        let kind = preferences_symbolColor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (preferences_symbolColor_property_selection) {
          case (.single (let v0)) :
            return .single (transient_AutoLayoutSymbolDocument_addOvalButtonImage (v0))
          default :
            return .empty
          }
        }
    }
    preferences_symbolColor_property.addEBObserver (self.addOvalButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addSolidOvalButtonImage
    self.addSolidOvalButtonImage_property.mReadModelFunction = {
        let kind = preferences_symbolColor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (preferences_symbolColor_property_selection) {
          case (.single (let v0)) :
            return .single (transient_AutoLayoutSymbolDocument_addSolidOvalButtonImage (v0))
          default :
            return .empty
          }
        }
    }
    preferences_symbolColor_property.addEBObserver (self.addSolidOvalButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addSolidRectButtonImage
    self.addSolidRectButtonImage_property.mReadModelFunction = {
        let kind = preferences_symbolColor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (preferences_symbolColor_property_selection) {
          case (.single (let v0)) :
            return .single (transient_AutoLayoutSymbolDocument_addSolidRectButtonImage (v0))
          default :
            return .empty
          }
        }
    }
    preferences_symbolColor_property.addEBObserver (self.addSolidRectButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addTextButtonImage
    self.addTextButtonImage_property.mReadModelFunction = {
        let kind = preferences_symbolColor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (preferences_symbolColor_property_selection) {
          case (.single (let v0)) :
            return .single (transient_AutoLayoutSymbolDocument_addTextButtonImage (v0))
          default :
            return .empty
          }
        }
    }
    preferences_symbolColor_property.addEBObserver (self.addTextButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: addPinButtonImage
    self.addPinButtonImage_property.mReadModelFunction = {
        let kind = preferences_symbolColor_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (preferences_symbolColor_property_selection) {
          case (.single (let v0)) :
            return .single (transient_AutoLayoutSymbolDocument_addPinButtonImage (v0))
          default :
            return .empty
          }
        }
    }
    preferences_symbolColor_property.addEBObserver (self.addPinButtonImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: statusImage
    self.statusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_AutoLayoutSymbolDocument_statusImage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.statusImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Configure properties \(durationMS) ms")
    }
  }

  //····················································································································
  
/*  final private func installBindings () {
    let start = Date ()
  //--------------------------- Install table view bindings
  //--------------------------- Install ebView bindings
    self.mSymbolObjectsController.bind_ebView (self.mComposedSymbolView)
  //--------------------------- Install regular bindings
    self.mInspectorSegmentedControl?.bind_selectedPage (self.rootObject.selectedInspector_property, file: #file, line: #line)
    self.mHorizontalFlip?.bind_value (self.rootObject.horizontalFlip_property, file: #file, line: #line)
    self.mVerticalFlip?.bind_value (self.rootObject.verticalFlip_property, file: #file, line: #line)
    self.mGridStyle?.bind_selectedIndex (self.rootObject.gridStyle_property, file: #file, line: #line)
    self.mGridDisplayFactorPopUpButton?.bind_selectedTag (self.rootObject.gridDisplay_property, file: #file, line: #line)
    self.mXPlacardUnitPopUpButton?.bind_selectedTag (self.rootObject.xPlacardUnit_property, file: #file, line: #line)
    self.mYPlacardUnitPopUpButton?.bind_selectedTag (self.rootObject.yPlacardUnit_property, file: #file, line: #line)
    self.mCrossColorOfSymbolGridColorWell?.bind_color (preferences_crossColorOfSymbolGrid_property, file: #file, line: #line, sendContinously:false)
    self.mLineColorOfSymbolGridColorWell?.bind_color (preferences_lineColorOfSymbolGrid_property, file: #file, line: #line, sendContinously:false)
    self.mSymbolColorColorWell?.bind_color (preferences_symbolColor_property, file: #file, line: #line, sendContinously:false)
    self.mSymbolBackgroundColorColorWell?.bind_color (preferences_symbolBackgroundColor_property, file: #file, line: #line, sendContinously:false)
    self.mSymbolDrawingWidthMultipliedByTenPopupButton?.bind_selectedTag (preferences_symbolDrawingWidthMultipliedByTen_property, file: #file, line: #line)
    self.mPinNameFontButton?.bind_fontValue (preferences_pinNameFont_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_horizontalFlip (self.rootObject.horizontalFlip_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_verticalFlip (self.rootObject.verticalFlip_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_gridStyle (self.rootObject.gridStyle_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_gridDisplayFactor (self.rootObject.gridDisplay_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_gridLineColor (preferences_lineColorOfSymbolGrid_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_gridCrossColor (preferences_crossColorOfSymbolGrid_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_zoom (self.rootObject.zoom_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_backColor (preferences_symbolBackgroundColor_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_xPlacardUnit (self.rootObject.xPlacardUnit_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_yPlacardUnit (self.rootObject.yPlacardUnit_property, file: #file, line: #line)
    self.mSymbolTextValueTextField?.bind_value (self.mSymbolTextSelectionController.text_property, file: #file, line: #line, sendContinously:true)
    self.mSymbolTextHorizontalAlignmentSegmentedControl?.bind_selectedSegment (self.mSymbolTextSelectionController.horizontalAlignment_property, file: #file, line: #line)
    self.mSymbolPinLabelHorizontalAlignmentSegmentedControl?.bind_selectedSegment (self.mSymbolPinSelectionController.nameHorizontalAlignment_property, file: #file, line: #line)
    self.mSymbolPinNumberHorizontalAlignmentSegmentedControl?.bind_selectedSegment (self.mSymbolPinSelectionController.numberHorizontalAlignment_property, file: #file, line: #line)
    self.mSymbolPinNumberIsVisibleInSchematicsSwitch?.bind_value (self.mSymbolPinSelectionController.pinNameIsDisplayedInSchematics_property, file: #file, line: #line)
    self.mSymbolPinLabelNameTextField?.bind_value (self.mSymbolPinSelectionController.name_property, file: #file, line: #line, sendContinously:true)
    self.mStatusImageViewInToolbar?.bind_image (self.statusImage_property, file: #file, line: #line)
    self.mStatusImageViewInToolbar?.bind_tooltip (self.statusMessage_property, file: #file, line: #line)
    self.mIssueTextField?.bind_valueObserver (self.statusMessage_property, file: #file, line: #line)
    self.mIssueTableView?.bind_issues (self.rootObject.issues_property, file: #file, line: #line)
  //--------------------------- Install multiple bindings
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return self.rootObject.noIssue_property_selection
        },
        outlet: self.mDeselectIssueButton
      )
      self.rootObject.noIssue_property.addEBObserver (controller)
      self.mController_mDeselectIssueButton_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return self.rootObject.noIssue_property_selection
        },
        outlet: self.mIssueScrollView
      )
      self.rootObject.noIssue_property.addEBObserver (controller)
      self.mController_mIssueScrollView_hidden = controller
    }
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Install bindings \(durationMS) ms")
    }
  } */

  //····················································································································
  
/*  final private func setTargetsAndActions () {
     let start = Date ()
   //--------------------------- Set targets / actions
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Set target and actions \(durationMS) ms")
    }
  } */

  //····················································································································
  //   removeUserInterface
  //····················································································································

  override func removeUserInterface () {
    super.removeUserInterface ()
  //--------------------------- Clean up auto layout views
    self.mPageMasterView.ebCleanUp ()
    self.mDocumentMainView.ebCleanUp ()
    self.mSymbolPageInspectorMasterView.ebCleanUp ()
    self.mSymbolPage.ebCleanUp ()
    self.mSelectedObjectsInspectorView.ebCleanUp ()
    self.mGridZoomInspectorView.ebCleanUp ()
    self.mIssuesInspectorView.ebCleanUp ()
    self.mInfosPage.ebCleanUp ()
    let toolbarItems = self.windowForSheet?.toolbar?.items ?? []
    for item in toolbarItems {
      item.view?.ebCleanUp ()
    }
  //--------------------------- Unbind regular bindings
    self.mInspectorSegmentedControl?.unbind_selectedPage ()
    self.mHorizontalFlip?.unbind_value ()
    self.mVerticalFlip?.unbind_value ()
    self.mGridStyle?.unbind_selectedIndex ()
    self.mGridDisplayFactorPopUpButton?.unbind_selectedTag ()
    self.mXPlacardUnitPopUpButton?.unbind_selectedTag ()
    self.mYPlacardUnitPopUpButton?.unbind_selectedTag ()
    self.mCrossColorOfSymbolGridColorWell?.unbind_color ()
    self.mLineColorOfSymbolGridColorWell?.unbind_color ()
    self.mSymbolColorColorWell?.unbind_color ()
    self.mSymbolBackgroundColorColorWell?.unbind_color ()
    self.mSymbolDrawingWidthMultipliedByTenPopupButton?.unbind_selectedTag ()
    self.mPinNameFontButton?.unbind_fontValue ()
    self.mComposedSymbolView?.unbind_horizontalFlip ()
    self.mComposedSymbolView?.unbind_verticalFlip ()
    self.mComposedSymbolView?.unbind_gridStyle ()
    self.mComposedSymbolView?.unbind_gridDisplayFactor ()
    self.mComposedSymbolView?.unbind_gridLineColor ()
    self.mComposedSymbolView?.unbind_gridCrossColor ()
    self.mComposedSymbolView?.unbind_zoom ()
    self.mComposedSymbolView?.unbind_backColor ()
    self.mComposedSymbolView?.unbind_xPlacardUnit ()
    self.mComposedSymbolView?.unbind_yPlacardUnit ()
    self.mSymbolTextValueTextField?.unbind_value ()
    self.mSymbolTextHorizontalAlignmentSegmentedControl?.unbind_selectedSegment ()
    self.mSymbolPinLabelHorizontalAlignmentSegmentedControl?.unbind_selectedSegment ()
    self.mSymbolPinNumberHorizontalAlignmentSegmentedControl?.unbind_selectedSegment ()
    self.mSymbolPinNumberIsVisibleInSchematicsSwitch?.unbind_value ()
    self.mSymbolPinLabelNameTextField?.unbind_value ()
    self.mStatusImageViewInToolbar?.unbind_image ()
    self.mStatusImageViewInToolbar?.unbind_tooltip ()
    self.mIssueTextField?.unbind_valueObserver ()
    self.mIssueTableView?.unbind_issues ()
  //--------------------------- Unbind multiple bindings
 //   self.rootObject.noIssue_property.removeEBObserver (self.mController_mDeselectIssueButton_hidden!)
 //   self.mController_mDeselectIssueButton_hidden = nil
 //   self.rootObject.noIssue_property.removeEBObserver (self.mController_mIssueScrollView_hidden!)
 //   self.mController_mIssueScrollView_hidden = nil
  //--------------------------- Unbind array controllers
    self.mSymbolObjectsController.unbind_ebView (self.mComposedSymbolView)
  //--- Array controller property: mSymbolObjectsController
    self.mSymbolObjectsController.unbind_model ()
  //--- Selection controller property: mSymbolTextSelectionController
    self.mSymbolTextSelectionController.unbind_selection ()
  //--- Selection controller property: mSymbolPinSelectionController
    self.mSymbolPinSelectionController.unbind_selection ()
    // self.rootObject.issues_property.removeEBObserver (self.statusMessage_property)
    // self.rootObject.issues_property.removeEBObserver (self.metadataStatus_property)
    // preferences_symbolColor_property.removeEBObserver (self.addSegmentButtonImage_property)
    // preferences_symbolColor_property.removeEBObserver (self.addBezierButtonImage_property)
    // preferences_symbolColor_property.removeEBObserver (self.addOvalButtonImage_property)
    // preferences_symbolColor_property.removeEBObserver (self.addSolidOvalButtonImage_property)
    // preferences_symbolColor_property.removeEBObserver (self.addSolidRectButtonImage_property)
    // preferences_symbolColor_property.removeEBObserver (self.addTextButtonImage_property)
    // preferences_symbolColor_property.removeEBObserver (self.addPinButtonImage_property)
    // self.rootObject.issues_property.removeEBObserver (self.statusImage_property)
  //--------------------------- Remove targets / actions
  //--------------------------- Clean up outlets
    self.mAddBezierButton?.ebCleanUp ()
    self.mAddOvalButton?.ebCleanUp ()
    self.mAddPinButton?.ebCleanUp ()
    self.mAddSegmentButton?.ebCleanUp ()
    self.mAddSolidOvalButton?.ebCleanUp ()
    self.mAddSolidRectButton?.ebCleanUp ()
    self.mAddTextButton?.ebCleanUp ()
    self.mComposedSymbolView?.ebCleanUp ()
    self.mCrossColorOfSymbolGridColorWell?.ebCleanUp ()
    self.mDeselectIssueButton?.ebCleanUp ()
    self.mGridDisplayFactorPopUpButton?.ebCleanUp ()
    self.mGridStyle?.ebCleanUp ()
    self.mHorizontalFlip?.ebCleanUp ()
    self.mInspectorSegmentedControl?.ebCleanUp ()
    self.mIssueScrollView?.ebCleanUp ()
    self.mIssueTableView?.ebCleanUp ()
    self.mIssueTextField?.ebCleanUp ()
    self.mLineColorOfSymbolGridColorWell?.ebCleanUp ()
    self.mPinInspectorView?.ebCleanUp ()
    self.mPinNameFontButton?.ebCleanUp ()
    self.mStatusImageViewInToolbar?.ebCleanUp ()
    self.mSymbolBackgroundColorColorWell?.ebCleanUp ()
    self.mSymbolBaseInspectorView?.ebCleanUp ()
    self.mSymbolColorColorWell?.ebCleanUp ()
    self.mSymbolDrawingWidthMultipliedByTenPopupButton?.ebCleanUp ()
    self.mSymbolIssueInspectorView?.ebCleanUp ()
    self.mSymbolPinLabelHorizontalAlignmentSegmentedControl?.ebCleanUp ()
    self.mSymbolPinLabelNameTextField?.ebCleanUp ()
    self.mSymbolPinNumberHorizontalAlignmentSegmentedControl?.ebCleanUp ()
    self.mSymbolPinNumberIsVisibleInSchematicsSwitch?.ebCleanUp ()
    self.mSymbolRootInspectorView?.ebCleanUp ()
    self.mSymbolTextHorizontalAlignmentSegmentedControl?.ebCleanUp ()
    self.mSymbolTextValueTextField?.ebCleanUp ()
    self.mSymbolZoomFlipInspectorView?.ebCleanUp ()
    self.mTextInspectorView?.ebCleanUp ()
    self.mVerticalFlip?.ebCleanUp ()
    self.mXPlacardUnitPopUpButton?.ebCleanUp ()
    self.mYPlacardUnitPopUpButton?.ebCleanUp ()
  //--------------------------- Detach outlets
    self.mAddBezierButton = nil
    self.mAddOvalButton = nil
    self.mAddPinButton = nil
    self.mAddSegmentButton = nil
    self.mAddSolidOvalButton = nil
    self.mAddSolidRectButton = nil
    self.mAddTextButton = nil
    self.mComposedSymbolView = nil
    self.mCrossColorOfSymbolGridColorWell = nil
    self.mDeselectIssueButton = nil
    self.mGridDisplayFactorPopUpButton = nil
    self.mGridStyle = nil
    self.mHorizontalFlip = nil
    self.mInspectorSegmentedControl = nil
    self.mIssueScrollView = nil
    self.mIssueTableView = nil
    self.mIssueTextField = nil
    self.mLineColorOfSymbolGridColorWell = nil
    self.mPinInspectorView = nil
    self.mPinNameFontButton = nil
    self.mStatusImageViewInToolbar = nil
    self.mSymbolBackgroundColorColorWell = nil
    self.mSymbolBaseInspectorView = nil
    self.mSymbolColorColorWell = nil
    self.mSymbolDrawingWidthMultipliedByTenPopupButton = nil
    self.mSymbolIssueInspectorView = nil
    self.mSymbolPinLabelHorizontalAlignmentSegmentedControl = nil
    self.mSymbolPinLabelNameTextField = nil
    self.mSymbolPinNumberHorizontalAlignmentSegmentedControl = nil
    self.mSymbolPinNumberIsVisibleInSchematicsSwitch = nil
    self.mSymbolRootInspectorView = nil
    self.mSymbolTextHorizontalAlignmentSegmentedControl = nil
    self.mSymbolTextValueTextField = nil
    self.mSymbolZoomFlipInspectorView = nil
    self.mTextInspectorView = nil
    self.mVerticalFlip = nil
    self.mXPlacardUnitPopUpButton = nil
    self.mYPlacardUnitPopUpButton = nil
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------

