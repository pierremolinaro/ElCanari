//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func transient_BoardTrack_objectDisplay (
       _ self_mConnectorP1_location : CanariPoint?,
       _ self_mConnectorP2_location : CanariPoint?,
       _ prefs_displayFrontLayoutForBoard : Bool,
       _ prefs_displayBackLayoutForBoard : Bool,
       _ prefs_frontSideLayoutColorForBoard : NSColor,
       _ prefs_backSideLayoutColorForBoard : NSColor,
       _ self_actualTrackWidth : Int,    
       _ self_mSide : TrackSide,         
       _ self_mTrackShape : TrackShape
) -> EBShape {
//--- START OF USER ZONE 2
       var shape = EBShape ()
       if let p1 = self_mConnectorP1_location?.cocoaPoint, let p2 = self_mConnectorP2_location?.cocoaPoint {
         let color : NSColor
         let display : Bool
         switch self_mSide {
         case .front :
           color = prefs_frontSideLayoutColorForBoard
           display = prefs_displayFrontLayoutForBoard
         case .back :
           display = prefs_displayBackLayoutForBoard
           color = prefs_backSideLayoutColorForBoard
         }
         if display {
           let w = canariUnitToCocoa ((self_actualTrackWidth == 0) ? milsToCanariUnit (10) : self_actualTrackWidth)
           switch self_mTrackShape {
           case .rect :
            let hw = w * 0.5
            let α = NSPoint.angleInRadian (p1, p2)
            let dx = hw * sin (α)
            let dy = hw * cos (α)
            var bp = EBBezierPath ()
            bp.lineCapStyle = .round
            bp.lineJoinStyle = .round
            bp.move (to: NSPoint (x: p1.x + dx, y: p1.y - dy))
            bp.line (to: NSPoint (x: p1.x - dx, y: p1.y + dy))
            bp.line (to: NSPoint (x: p2.x - dx, y: p2.y + dy))
            bp.line (to: NSPoint (x: p2.x + dx, y: p2.y - dy))
            bp.close ()
            shape.add (filled: [bp], color)
           case .round :
             var bp = EBBezierPath ()
             bp.lineWidth = w
             bp.lineCapStyle = .round
             bp.lineJoinStyle = .round
             bp.move (to: p1)
             bp.line (to: p2)
             shape.add (stroke: [bp], color)
           }
         }
       }
       return shape
//--- END OF USER ZONE 2
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
