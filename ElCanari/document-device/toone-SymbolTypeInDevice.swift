//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_SymbolTypeInDevice 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_SymbolTypeInDevice : ReadOnlyAbstractObjectProperty <SymbolTypeInDevice> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : SymbolTypeInDevice?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
 //     oldValue.mTypeName_property.removeEBObserversFrom (&self.mObserversOf_mTypeName) // Stored property
 //     oldValue.mVersion_property.removeEBObserversFrom (&self.mObserversOf_mVersion) // Stored property
 //     oldValue.mFileData_property.removeEBObserversFrom (&self.mObserversOf_mFileData) // Stored property
 //     oldValue.mStrokeBezierPath_property.removeEBObserversFrom (&self.mObserversOf_mStrokeBezierPath) // Stored property
 //     oldValue.mFilledBezierPath_property.removeEBObserversFrom (&self.mObserversOf_mFilledBezierPath) // Stored property
      oldValue.versionString_property.removeEBObserversFrom (&self.mObserversOf_versionString) // Transient property
      oldValue.instanceCount_property.removeEBObserversFrom (&self.mObserversOf_instanceCount) // Transient property
      oldValue.documentSizeString_property.removeEBObserversFrom (&self.mObserversOf_documentSizeString) // Transient property
      oldValue.pinNameShape_property.removeEBObserversFrom (&self.mObserversOf_pinNameShape) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
 //     newValue.mTypeName_property.addEBObserversFrom (&self.mObserversOf_mTypeName) // Stored property
 //     newValue.mVersion_property.addEBObserversFrom (&self.mObserversOf_mVersion) // Stored property
 //     newValue.mFileData_property.addEBObserversFrom (&self.mObserversOf_mFileData) // Stored property
 //     newValue.mStrokeBezierPath_property.addEBObserversFrom (&self.mObserversOf_mStrokeBezierPath) // Stored property
 //     newValue.mFilledBezierPath_property.addEBObserversFrom (&self.mObserversOf_mFilledBezierPath) // Stored property
      newValue.versionString_property.addEBObserversFrom (&self.mObserversOf_versionString) // Transient property
      newValue.instanceCount_property.addEBObserversFrom (&self.mObserversOf_instanceCount) // Transient property
      newValue.documentSizeString_property.addEBObserversFrom (&self.mObserversOf_documentSizeString) // Transient property
      newValue.pinNameShape_property.addEBObserversFrom (&self.mObserversOf_pinNameShape) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mTypeName' stored property
  //····················································································································

  private final var mTypeName_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_mTypeName = EBWeakEventSet ()

  //····················································································································

  final var mTypeName_property_selection : EBSelection <String?> { // §
    return self.mTypeName_property.selection
/*    if let model = self.propval {
      switch (model.mTypeName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mTypeName (_ inObserver : EBEvent) {
    self.mTypeName_property.addEBObserver (inObserver)
/*    self.mObserversOf_mTypeName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mTypeName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mTypeName (_ inObserver : EBEvent) {
    self.mTypeName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mTypeName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mTypeName_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mVersion' stored property
  //····················································································································

  private final var mVersion_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mVersion = EBWeakEventSet ()

  //····················································································································

  final var mVersion_property_selection : EBSelection <Int?> { // §
    return self.mVersion_property.selection
/*    if let model = self.propval {
      switch (model.mVersion_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mVersion (_ inObserver : EBEvent) {
    self.mVersion_property.addEBObserver (inObserver)
/*    self.mObserversOf_mVersion.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mVersion_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mVersion (_ inObserver : EBEvent) {
    self.mVersion_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mVersion.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mVersion_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mFileData' stored property
  //····················································································································

  private final var mFileData_property = EBGenericTransientProperty <Data?> ()
//  private final var mObserversOf_mFileData = EBWeakEventSet ()

  //····················································································································

  final var mFileData_property_selection : EBSelection <Data?> { // §
    return self.mFileData_property.selection
/*    if let model = self.propval {
      switch (model.mFileData_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mFileData (_ inObserver : EBEvent) {
    self.mFileData_property.addEBObserver (inObserver)
/*    self.mObserversOf_mFileData.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mFileData_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mFileData (_ inObserver : EBEvent) {
    self.mFileData_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mFileData.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mFileData_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mStrokeBezierPath' stored property
  //····················································································································

  private final var mStrokeBezierPath_property = EBGenericTransientProperty <NSBezierPath?> ()
//  private final var mObserversOf_mStrokeBezierPath = EBWeakEventSet ()

  //····················································································································

  final var mStrokeBezierPath_property_selection : EBSelection <NSBezierPath?> { // §
    return self.mStrokeBezierPath_property.selection
/*    if let model = self.propval {
      switch (model.mStrokeBezierPath_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mStrokeBezierPath (_ inObserver : EBEvent) {
    self.mStrokeBezierPath_property.addEBObserver (inObserver)
/*    self.mObserversOf_mStrokeBezierPath.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mStrokeBezierPath_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mStrokeBezierPath (_ inObserver : EBEvent) {
    self.mStrokeBezierPath_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mStrokeBezierPath.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mStrokeBezierPath_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mFilledBezierPath' stored property
  //····················································································································

  private final var mFilledBezierPath_property = EBGenericTransientProperty <NSBezierPath?> ()
//  private final var mObserversOf_mFilledBezierPath = EBWeakEventSet ()

  //····················································································································

  final var mFilledBezierPath_property_selection : EBSelection <NSBezierPath?> { // §
    return self.mFilledBezierPath_property.selection
/*    if let model = self.propval {
      switch (model.mFilledBezierPath_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_mFilledBezierPath (_ inObserver : EBEvent) {
    self.mFilledBezierPath_property.addEBObserver (inObserver)
/*    self.mObserversOf_mFilledBezierPath.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mFilledBezierPath_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mFilledBezierPath (_ inObserver : EBEvent) {
    self.mFilledBezierPath_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mFilledBezierPath.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mFilledBezierPath_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'versionString' transient property
  //····················································································································

  private final var mObserversOf_versionString = EBWeakEventSet ()

  //····················································································································

  final var versionString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.versionString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_versionString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.versionString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_versionString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.versionString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'instanceCount' transient property
  //····················································································································

  private final var mObserversOf_instanceCount = EBWeakEventSet ()

  //····················································································································

  final var instanceCount_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.instanceCount_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_instanceCount.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.instanceCount_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_instanceCount.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.instanceCount_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'documentSizeString' transient property
  //····················································································································

  private final var mObserversOf_documentSizeString = EBWeakEventSet ()

  //····················································································································

  final var documentSizeString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.documentSizeString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_documentSizeString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_documentSizeString.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.documentSizeString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_documentSizeString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_documentSizeString.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.documentSizeString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'pinNameShape' transient property
  //····················································································································

  private final var mObserversOf_pinNameShape = EBWeakEventSet ()

  //····················································································································

  final var pinNameShape_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.pinNameShape_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_pinNameShape (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_pinNameShape.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.pinNameShape_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_pinNameShape (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_pinNameShape.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.pinNameShape_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mInstances
  //····················································································································

  private final var mObserversOf_mInstances = EBWeakEventSet ()

  //····················································································································

  final var mInstances_property_selection : EBSelection <[SymbolInstanceInDevice]> {
    if let model = self.propval {
      switch (model.mInstances_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mInstances (_ inObserver : EBEvent) {
    self.mObserversOf_mInstances.insert (inObserver)
    if let object = self.propval {
      object.mInstances_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mInstances (_ inObserver : EBEvent) {
    self.mObserversOf_mInstances.remove (inObserver)
    if let object = self.propval {
      object.mInstances_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mPinTypes
  //····················································································································

  private final var mObserversOf_mPinTypes = EBWeakEventSet ()

  //····················································································································

  final var mPinTypes_property_selection : EBSelection <[SymbolPinTypeInDevice]> {
    if let model = self.propval {
      switch (model.mPinTypes_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mPinTypes (_ inObserver : EBEvent) {
    self.mObserversOf_mPinTypes.insert (inObserver)
    if let object = self.propval {
      object.mPinTypes_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinTypes (_ inObserver : EBEvent) {
    self.mObserversOf_mPinTypes.remove (inObserver)
    if let object = self.propval {
      object.mPinTypes_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT 
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mTypeName simple stored property
    self.mTypeName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mTypeName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mTypeName_property)
  //--- Configure mVersion simple stored property
    self.mVersion_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mVersion_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mVersion_property)
  //--- Configure mFileData simple stored property
    self.mFileData_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mFileData_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mFileData_property)
  //--- Configure mStrokeBezierPath simple stored property
    self.mStrokeBezierPath_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mStrokeBezierPath_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mStrokeBezierPath_property)
  //--- Configure mFilledBezierPath simple stored property
    self.mFilledBezierPath_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mFilledBezierPath_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.mFilledBezierPath_property)
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject SymbolTypeInDevice
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_SymbolTypeInDevice : ReadOnlyObject_SymbolTypeInDevice {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_SymbolTypeInDevice? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_SymbolTypeInDevice?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : SymbolTypeInDevice? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < SymbolTypeInDevice? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : SymbolTypeInDevice? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_SymbolTypeInDevice
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_SymbolTypeInDevice : ReadOnlyObject_SymbolTypeInDevice {

  //····················································································································
 
  func setProp (_ inValue : SymbolTypeInDevice?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_SymbolTypeInDevice
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_SymbolTypeInDevice : ReadWriteObject_SymbolTypeInDevice {

  //····················································································································

  private var mModel : ReadWriteObject_SymbolTypeInDevice? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_SymbolTypeInDevice?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : SymbolTypeInDevice?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : SymbolTypeInDevice?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < SymbolTypeInDevice? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : SymbolTypeInDevice? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_SymbolTypeInDevice 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_SymbolTypeInDevice : ReadWriteObject_SymbolTypeInDevice, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : SymbolTypeInDevice) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : SymbolTypeInDevice) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : SymbolTypeInDevice) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : SymbolTypeInDevice) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : SymbolTypeInDevice?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < SymbolTypeInDevice? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : SymbolTypeInDevice?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : SymbolTypeInDevice? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

