//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_DeviceRoot 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_DeviceRoot : ReadOnlyAbstractObjectProperty <DeviceRoot> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : DeviceRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.mSelectedPageIndex_property.removeEBObserver (self.mSelectedPageIndex_property) // Stored property
    inOldValue?.mTitle_property.removeEBObserver (self.mTitle_property) // Stored property
    inOldValue?.mImageData_property.removeEBObserver (self.mImageData_property) // Stored property
    inOldValue?.mPrefix_property.removeEBObserver (self.mPrefix_property) // Stored property
    inOldValue?.mComments_property.removeEBObserver (self.mComments_property) // Stored property
    inOldValue?.mPackageDisplayZoom_property.removeEBObserver (self.mPackageDisplayZoom_property) // Stored property
    inOldValue?.mPackageDisplayHorizontalFlip_property.removeEBObserver (self.mPackageDisplayHorizontalFlip_property) // Stored property
    inOldValue?.mPackageDisplayVerticalFlip_property.removeEBObserver (self.mPackageDisplayVerticalFlip_property) // Stored property
    inOldValue?.mShowPackages_property.removeEBObserver (self.mShowPackages_property) // Stored property
    inOldValue?.mShowPackagePadNumbers_property.removeEBObserver (self.mShowPackagePadNumbers_property) // Stored property
    inOldValue?.mShowPackageFrontPads_property.removeEBObserver (self.mShowPackageFrontPads_property) // Stored property
    inOldValue?.mShowPackageBackPads_property.removeEBObserver (self.mShowPackageBackPads_property) // Stored property
    inOldValue?.mSymbolDisplayZoom_property.removeEBObserver (self.mSymbolDisplayZoom_property) // Stored property
    inOldValue?.mSymbolDisplayHorizontalFlip_property.removeEBObserver (self.mSymbolDisplayHorizontalFlip_property) // Stored property
    inOldValue?.mSymbolDisplayVerticalFlip_property.removeEBObserver (self.mSymbolDisplayVerticalFlip_property) // Stored property
    inOldValue?.imageIsValid_property.removeEBObserver (self.imageIsValid_property) // Transient property
    inOldValue?.inconsistentPackagePadNameSetsMessage_property.removeEBObserver (self.inconsistentPackagePadNameSetsMessage_property) // Transient property
    inOldValue?.inconsistentSymbolNameSetMessage_property.removeEBObserver (self.inconsistentSymbolNameSetMessage_property) // Transient property
    inOldValue?.unconnectedPins_property.removeEBObserver (self.unconnectedPins_property) // Transient property
    inOldValue?.packagePadNameSetsAreConsistent_property.removeEBObserver (self.packagePadNameSetsAreConsistent_property) // Transient property
    inOldValue?.symbolNameAreConsistent_property.removeEBObserver (self.symbolNameAreConsistent_property) // Transient property
    inOldValue?.symbolTypeNames_property.removeEBObserver (self.symbolTypeNames_property) // Transient property
    inOldValue?.unconnectedPads_property.removeEBObserver (self.unconnectedPads_property) // Transient property
    inOldValue?.assignedPadProxies_property.removeEBObserver (self.assignedPadProxies_property) // Transient property
    inOldValue?.issues_property.removeEBObserver (self.issues_property) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.mSelectedPageIndex_property.addEBObserver (self.mSelectedPageIndex_property) // Stored property
    self.mInternalValue?.mTitle_property.addEBObserver (self.mTitle_property) // Stored property
    self.mInternalValue?.mImageData_property.addEBObserver (self.mImageData_property) // Stored property
    self.mInternalValue?.mPrefix_property.addEBObserver (self.mPrefix_property) // Stored property
    self.mInternalValue?.mComments_property.addEBObserver (self.mComments_property) // Stored property
    self.mInternalValue?.mPackageDisplayZoom_property.addEBObserver (self.mPackageDisplayZoom_property) // Stored property
    self.mInternalValue?.mPackageDisplayHorizontalFlip_property.addEBObserver (self.mPackageDisplayHorizontalFlip_property) // Stored property
    self.mInternalValue?.mPackageDisplayVerticalFlip_property.addEBObserver (self.mPackageDisplayVerticalFlip_property) // Stored property
    self.mInternalValue?.mShowPackages_property.addEBObserver (self.mShowPackages_property) // Stored property
    self.mInternalValue?.mShowPackagePadNumbers_property.addEBObserver (self.mShowPackagePadNumbers_property) // Stored property
    self.mInternalValue?.mShowPackageFrontPads_property.addEBObserver (self.mShowPackageFrontPads_property) // Stored property
    self.mInternalValue?.mShowPackageBackPads_property.addEBObserver (self.mShowPackageBackPads_property) // Stored property
    self.mInternalValue?.mSymbolDisplayZoom_property.addEBObserver (self.mSymbolDisplayZoom_property) // Stored property
    self.mInternalValue?.mSymbolDisplayHorizontalFlip_property.addEBObserver (self.mSymbolDisplayHorizontalFlip_property) // Stored property
    self.mInternalValue?.mSymbolDisplayVerticalFlip_property.addEBObserver (self.mSymbolDisplayVerticalFlip_property) // Stored property
    self.mInternalValue?.imageIsValid_property.addEBObserver (self.imageIsValid_property) // Transient property
    self.mInternalValue?.inconsistentPackagePadNameSetsMessage_property.addEBObserver (self.inconsistentPackagePadNameSetsMessage_property) // Transient property
    self.mInternalValue?.inconsistentSymbolNameSetMessage_property.addEBObserver (self.inconsistentSymbolNameSetMessage_property) // Transient property
    self.mInternalValue?.unconnectedPins_property.addEBObserver (self.unconnectedPins_property) // Transient property
    self.mInternalValue?.packagePadNameSetsAreConsistent_property.addEBObserver (self.packagePadNameSetsAreConsistent_property) // Transient property
    self.mInternalValue?.symbolNameAreConsistent_property.addEBObserver (self.symbolNameAreConsistent_property) // Transient property
    self.mInternalValue?.symbolTypeNames_property.addEBObserver (self.symbolTypeNames_property) // Transient property
    self.mInternalValue?.unconnectedPads_property.addEBObserver (self.unconnectedPads_property) // Transient property
    self.mInternalValue?.assignedPadProxies_property.addEBObserver (self.assignedPadProxies_property) // Transient property
    self.mInternalValue?.issues_property.addEBObserver (self.issues_property) // Transient property
  }

  //····················································································································
  //   init
  //····················································································································

  override init () {
    super.init ()
    self.mSelectedPageIndex_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mSelectedPageIndex_property.prop ?? .empty }
    self.mSelectedPageIndex_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mSelectedPageIndex_property.setProp (inValue) }
    self.mTitle_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mTitle_property.prop ?? .empty }
    self.mTitle_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.mTitle_property.setProp (inValue) }
    self.mImageData_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mImageData_property.prop ?? .empty }
    self.mImageData_property.mWriteModelFunction = { [weak self] (inValue : Data) in self?.mInternalValue?.mImageData_property.setProp (inValue) }
    self.mPrefix_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mPrefix_property.prop ?? .empty }
    self.mPrefix_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.mPrefix_property.setProp (inValue) }
    self.mComments_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mComments_property.prop ?? .empty }
    self.mComments_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.mComments_property.setProp (inValue) }
    self.mPackageDisplayZoom_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mPackageDisplayZoom_property.prop ?? .empty }
    self.mPackageDisplayZoom_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mPackageDisplayZoom_property.setProp (inValue) }
    self.mPackageDisplayHorizontalFlip_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mPackageDisplayHorizontalFlip_property.prop ?? .empty }
    self.mPackageDisplayHorizontalFlip_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mPackageDisplayHorizontalFlip_property.setProp (inValue) }
    self.mPackageDisplayVerticalFlip_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mPackageDisplayVerticalFlip_property.prop ?? .empty }
    self.mPackageDisplayVerticalFlip_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mPackageDisplayVerticalFlip_property.setProp (inValue) }
    self.mShowPackages_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mShowPackages_property.prop ?? .empty }
    self.mShowPackages_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mShowPackages_property.setProp (inValue) }
    self.mShowPackagePadNumbers_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mShowPackagePadNumbers_property.prop ?? .empty }
    self.mShowPackagePadNumbers_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mShowPackagePadNumbers_property.setProp (inValue) }
    self.mShowPackageFrontPads_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mShowPackageFrontPads_property.prop ?? .empty }
    self.mShowPackageFrontPads_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mShowPackageFrontPads_property.setProp (inValue) }
    self.mShowPackageBackPads_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mShowPackageBackPads_property.prop ?? .empty }
    self.mShowPackageBackPads_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mShowPackageBackPads_property.setProp (inValue) }
    self.mSymbolDisplayZoom_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mSymbolDisplayZoom_property.prop ?? .empty }
    self.mSymbolDisplayZoom_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mSymbolDisplayZoom_property.setProp (inValue) }
    self.mSymbolDisplayHorizontalFlip_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mSymbolDisplayHorizontalFlip_property.prop ?? .empty }
    self.mSymbolDisplayHorizontalFlip_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mSymbolDisplayHorizontalFlip_property.setProp (inValue) }
    self.mSymbolDisplayVerticalFlip_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mSymbolDisplayVerticalFlip_property.prop ?? .empty }
    self.mSymbolDisplayVerticalFlip_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.mSymbolDisplayVerticalFlip_property.setProp (inValue) }
    self.imageIsValid_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.imageIsValid_property.prop ?? .empty }
    self.inconsistentPackagePadNameSetsMessage_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.inconsistentPackagePadNameSetsMessage_property.prop ?? .empty }
    self.inconsistentSymbolNameSetMessage_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.inconsistentSymbolNameSetMessage_property.prop ?? .empty }
    self.unconnectedPins_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.unconnectedPins_property.prop ?? .empty }
    self.packagePadNameSetsAreConsistent_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.packagePadNameSetsAreConsistent_property.prop ?? .empty }
    self.symbolNameAreConsistent_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.symbolNameAreConsistent_property.prop ?? .empty }
    self.symbolTypeNames_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.symbolTypeNames_property.prop ?? .empty }
    self.unconnectedPads_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.unconnectedPads_property.prop ?? .empty }
    self.assignedPadProxies_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.assignedPadProxies_property.prop ?? .empty }
    self.issues_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.issues_property.prop ?? .empty }
  }

  //····················································································································
  //   Proxy of 'mSelectedPageIndex' stored property
  //····················································································································

  let mSelectedPageIndex_property = EBPropertyProxy_Int ()

  var mSelectedPageIndex_property_selection : EBSelection <Int> {
    switch (self.mSelectedPageIndex_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mTitle' stored property
  //····················································································································

  let mTitle_property = EBPropertyProxy_String ()

  var mTitle_property_selection : EBSelection <String> {
    switch (self.mTitle_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mImageData' stored property
  //····················································································································

  let mImageData_property = EBPropertyProxy_Data ()

  var mImageData_property_selection : EBSelection <Data> {
    switch (self.mImageData_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mPrefix' stored property
  //····················································································································

  let mPrefix_property = EBPropertyProxy_String ()

  var mPrefix_property_selection : EBSelection <String> {
    switch (self.mPrefix_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mComments' stored property
  //····················································································································

  let mComments_property = EBPropertyProxy_String ()

  var mComments_property_selection : EBSelection <String> {
    switch (self.mComments_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mPackageDisplayZoom' stored property
  //····················································································································

  let mPackageDisplayZoom_property = EBPropertyProxy_Int ()

  var mPackageDisplayZoom_property_selection : EBSelection <Int> {
    switch (self.mPackageDisplayZoom_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mPackageDisplayHorizontalFlip' stored property
  //····················································································································

  let mPackageDisplayHorizontalFlip_property = EBPropertyProxy_Bool ()

  var mPackageDisplayHorizontalFlip_property_selection : EBSelection <Bool> {
    switch (self.mPackageDisplayHorizontalFlip_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mPackageDisplayVerticalFlip' stored property
  //····················································································································

  let mPackageDisplayVerticalFlip_property = EBPropertyProxy_Bool ()

  var mPackageDisplayVerticalFlip_property_selection : EBSelection <Bool> {
    switch (self.mPackageDisplayVerticalFlip_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mShowPackages' stored property
  //····················································································································

  let mShowPackages_property = EBPropertyProxy_Bool ()

  var mShowPackages_property_selection : EBSelection <Bool> {
    switch (self.mShowPackages_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mShowPackagePadNumbers' stored property
  //····················································································································

  let mShowPackagePadNumbers_property = EBPropertyProxy_Bool ()

  var mShowPackagePadNumbers_property_selection : EBSelection <Bool> {
    switch (self.mShowPackagePadNumbers_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mShowPackageFrontPads' stored property
  //····················································································································

  let mShowPackageFrontPads_property = EBPropertyProxy_Bool ()

  var mShowPackageFrontPads_property_selection : EBSelection <Bool> {
    switch (self.mShowPackageFrontPads_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mShowPackageBackPads' stored property
  //····················································································································

  let mShowPackageBackPads_property = EBPropertyProxy_Bool ()

  var mShowPackageBackPads_property_selection : EBSelection <Bool> {
    switch (self.mShowPackageBackPads_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mSymbolDisplayZoom' stored property
  //····················································································································

  let mSymbolDisplayZoom_property = EBPropertyProxy_Int ()

  var mSymbolDisplayZoom_property_selection : EBSelection <Int> {
    switch (self.mSymbolDisplayZoom_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mSymbolDisplayHorizontalFlip' stored property
  //····················································································································

  let mSymbolDisplayHorizontalFlip_property = EBPropertyProxy_Bool ()

  var mSymbolDisplayHorizontalFlip_property_selection : EBSelection <Bool> {
    switch (self.mSymbolDisplayHorizontalFlip_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mSymbolDisplayVerticalFlip' stored property
  //····················································································································

  let mSymbolDisplayVerticalFlip_property = EBPropertyProxy_Bool ()

  var mSymbolDisplayVerticalFlip_property_selection : EBSelection <Bool> {
    switch (self.mSymbolDisplayVerticalFlip_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'imageIsValid' transient property
  //····················································································································

  let imageIsValid_property = EBTransientProperty_Bool ()

  var imageIsValid_property_selection : EBSelection <Bool> {
    switch (self.imageIsValid_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'inconsistentPackagePadNameSetsMessage' transient property
  //····················································································································

  let inconsistentPackagePadNameSetsMessage_property = EBTransientProperty_String ()

  var inconsistentPackagePadNameSetsMessage_property_selection : EBSelection <String> {
    switch (self.inconsistentPackagePadNameSetsMessage_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'inconsistentSymbolNameSetMessage' transient property
  //····················································································································

  let inconsistentSymbolNameSetMessage_property = EBTransientProperty_String ()

  var inconsistentSymbolNameSetMessage_property_selection : EBSelection <String> {
    switch (self.inconsistentSymbolNameSetMessage_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'unconnectedPins' transient property
  //····················································································································

  let unconnectedPins_property = EBTransientProperty_UnconnectedSymbolPinsInDevice ()

  var unconnectedPins_property_selection : EBSelection <UnconnectedSymbolPinsInDevice> {
    switch (self.unconnectedPins_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'packagePadNameSetsAreConsistent' transient property
  //····················································································································

  let packagePadNameSetsAreConsistent_property = EBTransientProperty_Bool ()

  var packagePadNameSetsAreConsistent_property_selection : EBSelection <Bool> {
    switch (self.packagePadNameSetsAreConsistent_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'symbolNameAreConsistent' transient property
  //····················································································································

  let symbolNameAreConsistent_property = EBTransientProperty_Bool ()

  var symbolNameAreConsistent_property_selection : EBSelection <Bool> {
    switch (self.symbolNameAreConsistent_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'symbolTypeNames' transient property
  //····················································································································

  let symbolTypeNames_property = EBTransientProperty_StringArray ()

  var symbolTypeNames_property_selection : EBSelection <StringArray> {
    switch (self.symbolTypeNames_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'unconnectedPads' transient property
  //····················································································································

  let unconnectedPads_property = EBTransientProperty_StringArray ()

  var unconnectedPads_property_selection : EBSelection <StringArray> {
    switch (self.unconnectedPads_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'assignedPadProxies' transient property
  //····················································································································

  let assignedPadProxies_property = EBTransientProperty_AssignedPadProxiesInDevice ()

  var assignedPadProxies_property_selection : EBSelection <AssignedPadProxiesInDevice> {
    switch (self.assignedPadProxies_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'issues' transient property
  //····················································································································

  let issues_property = EBTransientProperty_CanariIssueArray ()

  var issues_property_selection : EBSelection <CanariIssueArray> {
    switch (self.issues_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observable toMany property: mDocs
  //····················································································································

  private var mObserversOf_mDocs = EBWeakEventSet ()

  //····················································································································

  var mDocs_property_selection : EBSelection <[DeviceDocumentation]> {
    if let model = self.propval {
      switch (model.mDocs_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mDocs (_ inObserver : EBEvent) {
    self.mObserversOf_mDocs.insert (inObserver)
    if let object = self.propval {
      object.mDocs_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDocs (_ inObserver : EBEvent) {
    self.mObserversOf_mDocs.remove (inObserver)
    if let object = self.propval {
      object.mDocs_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mSymbolInstances
  //····················································································································

  private var mObserversOf_mSymbolInstances = EBWeakEventSet ()

  //····················································································································

  var mSymbolInstances_property_selection : EBSelection <[SymbolInstanceInDevice]> {
    if let model = self.propval {
      switch (model.mSymbolInstances_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolInstances (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolInstances.insert (inObserver)
    if let object = self.propval {
      object.mSymbolInstances_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolInstances (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolInstances.remove (inObserver)
    if let object = self.propval {
      object.mSymbolInstances_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mPackages
  //····················································································································

  private var mObserversOf_mPackages = EBWeakEventSet ()

  //····················································································································

  var mPackages_property_selection : EBSelection <[PackageInDevice]> {
    if let model = self.propval {
      switch (model.mPackages_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mPackages (_ inObserver : EBEvent) {
    self.mObserversOf_mPackages.insert (inObserver)
    if let object = self.propval {
      object.mPackages_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackages (_ inObserver : EBEvent) {
    self.mObserversOf_mPackages.remove (inObserver)
    if let object = self.propval {
      object.mPackages_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mSymbolTypes
  //····················································································································

  private var mObserversOf_mSymbolTypes = EBWeakEventSet ()

  //····················································································································

  var mSymbolTypes_property_selection : EBSelection <[SymbolTypeInDevice]> {
    if let model = self.propval {
      switch (model.mSymbolTypes_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolTypes (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolTypes.insert (inObserver)
    if let object = self.propval {
      object.mSymbolTypes_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolTypes (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolTypes.remove (inObserver)
    if let object = self.propval {
      object.mSymbolTypes_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mPadProxies
  //····················································································································

  private var mObserversOf_mPadProxies = EBWeakEventSet ()

  //····················································································································

  var mPadProxies_property_selection : EBSelection <[PadProxyInDevice]> {
    if let model = self.propval {
      switch (model.mPadProxies_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mPadProxies (_ inObserver : EBEvent) {
    self.mObserversOf_mPadProxies.insert (inObserver)
    if let object = self.propval {
      object.mPadProxies_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPadProxies (_ inObserver : EBEvent) {
    self.mObserversOf_mPadProxies.remove (inObserver)
    if let object = self.propval {
      object.mPadProxies_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    TransientObject DeviceRoot
//----------------------------------------------------------------------------------------------------------------------

class TransientObject_DeviceRoot : ReadOnlyObject_DeviceRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_DeviceRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_DeviceRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : DeviceRoot? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < DeviceRoot? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : DeviceRoot? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_DeviceRoot
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_DeviceRoot : ReadOnlyObject_DeviceRoot {

  //····················································································································
 
  func setProp (_ inValue : DeviceRoot?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_DeviceRoot
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_DeviceRoot : ReadWriteObject_DeviceRoot {

  //····················································································································

  private var mModel : ReadWriteObject_DeviceRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_DeviceRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : DeviceRoot?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : DeviceRoot?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < DeviceRoot? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : DeviceRoot? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_DeviceRoot 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_DeviceRoot : ReadWriteObject_DeviceRoot, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : DeviceRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : DeviceRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : DeviceRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : DeviceRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : DeviceRoot?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < DeviceRoot? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : DeviceRoot?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : DeviceRoot? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

