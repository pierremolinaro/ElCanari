//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_DeviceRoot 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_DeviceRoot : ReadOnlyAbstractObjectProperty <DeviceRoot> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : DeviceRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.mSelectedPageIndex_property.removeEBObserversFrom (&self.mObserversOf_mSelectedPageIndex) // Stored property
    inOldValue?.mTitle_property.removeEBObserversFrom (&self.mObserversOf_mTitle) // Stored property
    inOldValue?.mImageData_property.removeEBObserversFrom (&self.mObserversOf_mImageData) // Stored property
    inOldValue?.mPrefix_property.removeEBObserversFrom (&self.mObserversOf_mPrefix) // Stored property
    inOldValue?.mComments_property.removeEBObserversFrom (&self.mObserversOf_mComments) // Stored property
    inOldValue?.mPackageDisplayZoom_property.removeEBObserversFrom (&self.mObserversOf_mPackageDisplayZoom) // Stored property
    inOldValue?.mPackageDisplayHorizontalFlip_property.removeEBObserversFrom (&self.mObserversOf_mPackageDisplayHorizontalFlip) // Stored property
    inOldValue?.mPackageDisplayVerticalFlip_property.removeEBObserversFrom (&self.mObserversOf_mPackageDisplayVerticalFlip) // Stored property
    inOldValue?.mShowPackages_property.removeEBObserversFrom (&self.mObserversOf_mShowPackages) // Stored property
    inOldValue?.mShowPackagePadNumbers_property.removeEBObserversFrom (&self.mObserversOf_mShowPackagePadNumbers) // Stored property
    inOldValue?.mShowPackageFrontPads_property.removeEBObserversFrom (&self.mObserversOf_mShowPackageFrontPads) // Stored property
    inOldValue?.mShowPackageBackPads_property.removeEBObserversFrom (&self.mObserversOf_mShowPackageBackPads) // Stored property
    inOldValue?.mSymbolDisplayZoom_property.removeEBObserversFrom (&self.mObserversOf_mSymbolDisplayZoom) // Stored property
    inOldValue?.mSymbolDisplayHorizontalFlip_property.removeEBObserversFrom (&self.mObserversOf_mSymbolDisplayHorizontalFlip) // Stored property
    inOldValue?.mSymbolDisplayVerticalFlip_property.removeEBObserversFrom (&self.mObserversOf_mSymbolDisplayVerticalFlip) // Stored property
    inOldValue?.imageIsValid_property.removeEBObserversFrom (&self.mObserversOf_imageIsValid) // Transient property
    inOldValue?.inconsistentPackagePadNameSetsMessage_property.removeEBObserversFrom (&self.mObserversOf_inconsistentPackagePadNameSetsMessage) // Transient property
    inOldValue?.inconsistentSymbolNameSetMessage_property.removeEBObserversFrom (&self.mObserversOf_inconsistentSymbolNameSetMessage) // Transient property
    inOldValue?.unconnectedPins_property.removeEBObserversFrom (&self.mObserversOf_unconnectedPins) // Transient property
    inOldValue?.packagePadNameSetsAreConsistent_property.removeEBObserversFrom (&self.mObserversOf_packagePadNameSetsAreConsistent) // Transient property
    inOldValue?.symbolNameAreConsistent_property.removeEBObserversFrom (&self.mObserversOf_symbolNameAreConsistent) // Transient property
    inOldValue?.symbolTypeNames_property.removeEBObserversFrom (&self.mObserversOf_symbolTypeNames) // Transient property
    inOldValue?.unconnectedPads_property.removeEBObserversFrom (&self.mObserversOf_unconnectedPads) // Transient property
    inOldValue?.assignedPadProxies_property.removeEBObserversFrom (&self.mObserversOf_assignedPadProxies) // Transient property
    inOldValue?.issues_property.removeEBObserversFrom (&self.mObserversOf_issues) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.mSelectedPageIndex_property.addEBObserversFrom (&self.mObserversOf_mSelectedPageIndex) // Stored property
    self.mInternalValue?.mTitle_property.addEBObserversFrom (&self.mObserversOf_mTitle) // Stored property
    self.mInternalValue?.mImageData_property.addEBObserversFrom (&self.mObserversOf_mImageData) // Stored property
    self.mInternalValue?.mPrefix_property.addEBObserversFrom (&self.mObserversOf_mPrefix) // Stored property
    self.mInternalValue?.mComments_property.addEBObserversFrom (&self.mObserversOf_mComments) // Stored property
    self.mInternalValue?.mPackageDisplayZoom_property.addEBObserversFrom (&self.mObserversOf_mPackageDisplayZoom) // Stored property
    self.mInternalValue?.mPackageDisplayHorizontalFlip_property.addEBObserversFrom (&self.mObserversOf_mPackageDisplayHorizontalFlip) // Stored property
    self.mInternalValue?.mPackageDisplayVerticalFlip_property.addEBObserversFrom (&self.mObserversOf_mPackageDisplayVerticalFlip) // Stored property
    self.mInternalValue?.mShowPackages_property.addEBObserversFrom (&self.mObserversOf_mShowPackages) // Stored property
    self.mInternalValue?.mShowPackagePadNumbers_property.addEBObserversFrom (&self.mObserversOf_mShowPackagePadNumbers) // Stored property
    self.mInternalValue?.mShowPackageFrontPads_property.addEBObserversFrom (&self.mObserversOf_mShowPackageFrontPads) // Stored property
    self.mInternalValue?.mShowPackageBackPads_property.addEBObserversFrom (&self.mObserversOf_mShowPackageBackPads) // Stored property
    self.mInternalValue?.mSymbolDisplayZoom_property.addEBObserversFrom (&self.mObserversOf_mSymbolDisplayZoom) // Stored property
    self.mInternalValue?.mSymbolDisplayHorizontalFlip_property.addEBObserversFrom (&self.mObserversOf_mSymbolDisplayHorizontalFlip) // Stored property
    self.mInternalValue?.mSymbolDisplayVerticalFlip_property.addEBObserversFrom (&self.mObserversOf_mSymbolDisplayVerticalFlip) // Stored property
    self.mInternalValue?.imageIsValid_property.addEBObserversFrom (&self.mObserversOf_imageIsValid) // Transient property
    self.mInternalValue?.inconsistentPackagePadNameSetsMessage_property.addEBObserversFrom (&self.mObserversOf_inconsistentPackagePadNameSetsMessage) // Transient property
    self.mInternalValue?.inconsistentSymbolNameSetMessage_property.addEBObserversFrom (&self.mObserversOf_inconsistentSymbolNameSetMessage) // Transient property
    self.mInternalValue?.unconnectedPins_property.addEBObserversFrom (&self.mObserversOf_unconnectedPins) // Transient property
    self.mInternalValue?.packagePadNameSetsAreConsistent_property.addEBObserversFrom (&self.mObserversOf_packagePadNameSetsAreConsistent) // Transient property
    self.mInternalValue?.symbolNameAreConsistent_property.addEBObserversFrom (&self.mObserversOf_symbolNameAreConsistent) // Transient property
    self.mInternalValue?.symbolTypeNames_property.addEBObserversFrom (&self.mObserversOf_symbolTypeNames) // Transient property
    self.mInternalValue?.unconnectedPads_property.addEBObserversFrom (&self.mObserversOf_unconnectedPads) // Transient property
    self.mInternalValue?.assignedPadProxies_property.addEBObserversFrom (&self.mObserversOf_assignedPadProxies) // Transient property
    self.mInternalValue?.issues_property.addEBObserversFrom (&self.mObserversOf_issues) // Transient property
  }

  //····················································································································
  //   Observers of 'mSelectedPageIndex' stored property
  //····················································································································

  private var mObserversOf_mSelectedPageIndex = EBWeakEventSet ()

  //····················································································································

  var mSelectedPageIndex_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mSelectedPageIndex_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSelectedPageIndex.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSelectedPageIndex_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSelectedPageIndex.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSelectedPageIndex_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSelectedPageIndex_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSelectedPageIndex.apply { (_ observer : EBEvent) in
        managedObject.mSelectedPageIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSelectedPageIndex_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mSelectedPageIndex.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSelectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mTitle' stored property
  //····················································································································

  private var mObserversOf_mTitle = EBWeakEventSet ()

  //····················································································································

  var mTitle_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mTitle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mTitle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mTitle.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mTitle_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mTitle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mTitle.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mTitle_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mTitle_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mTitle.apply { (_ observer : EBEvent) in
        managedObject.mTitle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mTitle_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mTitle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mTitle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mImageData' stored property
  //····················································································································

  private var mObserversOf_mImageData = EBWeakEventSet ()

  //····················································································································

  var mImageData_property_selection : EBSelection <Data?> {
    if let model = self.propval {
      switch (model.mImageData_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mImageData (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mImageData.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mImageData_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mImageData (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mImageData.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mImageData_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mImageData_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mImageData.apply { (_ observer : EBEvent) in
        managedObject.mImageData_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mImageData_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mImageData.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mImageData_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPrefix' stored property
  //····················································································································

  private var mObserversOf_mPrefix = EBWeakEventSet ()

  //····················································································································

  var mPrefix_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mPrefix_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPrefix (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPrefix.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mPrefix_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPrefix (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPrefix.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mPrefix_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mPrefix_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mPrefix.apply { (_ observer : EBEvent) in
        managedObject.mPrefix_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPrefix_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mPrefix.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPrefix_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mComments' stored property
  //····················································································································

  private var mObserversOf_mComments = EBWeakEventSet ()

  //····················································································································

  var mComments_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mComments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mComments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mComments.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mComments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mComments.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mComments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mComments_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mComments.apply { (_ observer : EBEvent) in
        managedObject.mComments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mComments_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mComments.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mComments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPackageDisplayZoom' stored property
  //····················································································································

  private var mObserversOf_mPackageDisplayZoom = EBWeakEventSet ()

  //····················································································································

  var mPackageDisplayZoom_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mPackageDisplayZoom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPackageDisplayZoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayZoom.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mPackageDisplayZoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayZoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayZoom.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mPackageDisplayZoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mPackageDisplayZoom_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mPackageDisplayZoom.apply { (_ observer : EBEvent) in
        managedObject.mPackageDisplayZoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPackageDisplayZoom_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mPackageDisplayZoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPackageDisplayZoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPackageDisplayHorizontalFlip' stored property
  //····················································································································

  private var mObserversOf_mPackageDisplayHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  var mPackageDisplayHorizontalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mPackageDisplayHorizontalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPackageDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayHorizontalFlip.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mPackageDisplayHorizontalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayHorizontalFlip.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mPackageDisplayHorizontalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mPackageDisplayHorizontalFlip_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mPackageDisplayHorizontalFlip.apply { (_ observer : EBEvent) in
        managedObject.mPackageDisplayHorizontalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPackageDisplayHorizontalFlip_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mPackageDisplayHorizontalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPackageDisplayHorizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPackageDisplayVerticalFlip' stored property
  //····················································································································

  private var mObserversOf_mPackageDisplayVerticalFlip = EBWeakEventSet ()

  //····················································································································

  var mPackageDisplayVerticalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mPackageDisplayVerticalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPackageDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayVerticalFlip.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mPackageDisplayVerticalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayVerticalFlip.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mPackageDisplayVerticalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mPackageDisplayVerticalFlip_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mPackageDisplayVerticalFlip.apply { (_ observer : EBEvent) in
        managedObject.mPackageDisplayVerticalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPackageDisplayVerticalFlip_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mPackageDisplayVerticalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPackageDisplayVerticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mShowPackages' stored property
  //····················································································································

  private var mObserversOf_mShowPackages = EBWeakEventSet ()

  //····················································································································

  var mShowPackages_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mShowPackages_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mShowPackages (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mShowPackages.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mShowPackages_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackages (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mShowPackages.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mShowPackages_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mShowPackages_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mShowPackages.apply { (_ observer : EBEvent) in
        managedObject.mShowPackages_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mShowPackages_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mShowPackages.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mShowPackages_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mShowPackagePadNumbers' stored property
  //····················································································································

  private var mObserversOf_mShowPackagePadNumbers = EBWeakEventSet ()

  //····················································································································

  var mShowPackagePadNumbers_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mShowPackagePadNumbers_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mShowPackagePadNumbers (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mShowPackagePadNumbers.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mShowPackagePadNumbers_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackagePadNumbers (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mShowPackagePadNumbers.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mShowPackagePadNumbers_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mShowPackagePadNumbers_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mShowPackagePadNumbers.apply { (_ observer : EBEvent) in
        managedObject.mShowPackagePadNumbers_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mShowPackagePadNumbers_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mShowPackagePadNumbers.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mShowPackagePadNumbers_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mShowPackageFrontPads' stored property
  //····················································································································

  private var mObserversOf_mShowPackageFrontPads = EBWeakEventSet ()

  //····················································································································

  var mShowPackageFrontPads_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mShowPackageFrontPads_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mShowPackageFrontPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mShowPackageFrontPads.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mShowPackageFrontPads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackageFrontPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mShowPackageFrontPads.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mShowPackageFrontPads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mShowPackageFrontPads_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mShowPackageFrontPads.apply { (_ observer : EBEvent) in
        managedObject.mShowPackageFrontPads_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mShowPackageFrontPads_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mShowPackageFrontPads.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mShowPackageFrontPads_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mShowPackageBackPads' stored property
  //····················································································································

  private var mObserversOf_mShowPackageBackPads = EBWeakEventSet ()

  //····················································································································

  var mShowPackageBackPads_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mShowPackageBackPads_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mShowPackageBackPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mShowPackageBackPads.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mShowPackageBackPads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackageBackPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mShowPackageBackPads.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mShowPackageBackPads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mShowPackageBackPads_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mShowPackageBackPads.apply { (_ observer : EBEvent) in
        managedObject.mShowPackageBackPads_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mShowPackageBackPads_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mShowPackageBackPads.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mShowPackageBackPads_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSymbolDisplayZoom' stored property
  //····················································································································

  private var mObserversOf_mSymbolDisplayZoom = EBWeakEventSet ()

  //····················································································································

  var mSymbolDisplayZoom_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mSymbolDisplayZoom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolDisplayZoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolDisplayZoom.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSymbolDisplayZoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolDisplayZoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolDisplayZoom.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSymbolDisplayZoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolDisplayZoom_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSymbolDisplayZoom.apply { (_ observer : EBEvent) in
        managedObject.mSymbolDisplayZoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolDisplayZoom_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mSymbolDisplayZoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSymbolDisplayZoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSymbolDisplayHorizontalFlip' stored property
  //····················································································································

  private var mObserversOf_mSymbolDisplayHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  var mSymbolDisplayHorizontalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mSymbolDisplayHorizontalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolDisplayHorizontalFlip.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSymbolDisplayHorizontalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolDisplayHorizontalFlip.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSymbolDisplayHorizontalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolDisplayHorizontalFlip_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSymbolDisplayHorizontalFlip.apply { (_ observer : EBEvent) in
        managedObject.mSymbolDisplayHorizontalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolDisplayHorizontalFlip_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mSymbolDisplayHorizontalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSymbolDisplayHorizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSymbolDisplayVerticalFlip' stored property
  //····················································································································

  private var mObserversOf_mSymbolDisplayVerticalFlip = EBWeakEventSet ()

  //····················································································································

  var mSymbolDisplayVerticalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mSymbolDisplayVerticalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolDisplayVerticalFlip.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSymbolDisplayVerticalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolDisplayVerticalFlip.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSymbolDisplayVerticalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolDisplayVerticalFlip_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSymbolDisplayVerticalFlip.apply { (_ observer : EBEvent) in
        managedObject.mSymbolDisplayVerticalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolDisplayVerticalFlip_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mSymbolDisplayVerticalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSymbolDisplayVerticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'imageIsValid' transient property
  //····················································································································

  private var mObserversOf_imageIsValid = EBWeakEventSet ()

  //····················································································································

  var imageIsValid_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.imageIsValid_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_imageIsValid (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_imageIsValid.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.imageIsValid_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_imageIsValid (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_imageIsValid.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.imageIsValid_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_imageIsValid_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_imageIsValid.apply { (_ observer : EBEvent) in
        managedObject.imageIsValid_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_imageIsValid_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_imageIsValid.apply { (_ observer : EBEvent) in
        managedObject.imageIsValid_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'inconsistentPackagePadNameSetsMessage' transient property
  //····················································································································

  private var mObserversOf_inconsistentPackagePadNameSetsMessage = EBWeakEventSet ()

  //····················································································································

  var inconsistentPackagePadNameSetsMessage_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.inconsistentPackagePadNameSetsMessage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_inconsistentPackagePadNameSetsMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_inconsistentPackagePadNameSetsMessage.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.inconsistentPackagePadNameSetsMessage_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_inconsistentPackagePadNameSetsMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_inconsistentPackagePadNameSetsMessage.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.inconsistentPackagePadNameSetsMessage_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_inconsistentPackagePadNameSetsMessage_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_inconsistentPackagePadNameSetsMessage.apply { (_ observer : EBEvent) in
        managedObject.inconsistentPackagePadNameSetsMessage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_inconsistentPackagePadNameSetsMessage_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_inconsistentPackagePadNameSetsMessage.apply { (_ observer : EBEvent) in
        managedObject.inconsistentPackagePadNameSetsMessage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'inconsistentSymbolNameSetMessage' transient property
  //····················································································································

  private var mObserversOf_inconsistentSymbolNameSetMessage = EBWeakEventSet ()

  //····················································································································

  var inconsistentSymbolNameSetMessage_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.inconsistentSymbolNameSetMessage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_inconsistentSymbolNameSetMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_inconsistentSymbolNameSetMessage.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.inconsistentSymbolNameSetMessage_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_inconsistentSymbolNameSetMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_inconsistentSymbolNameSetMessage.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.inconsistentSymbolNameSetMessage_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_inconsistentSymbolNameSetMessage_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_inconsistentSymbolNameSetMessage.apply { (_ observer : EBEvent) in
        managedObject.inconsistentSymbolNameSetMessage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_inconsistentSymbolNameSetMessage_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_inconsistentSymbolNameSetMessage.apply { (_ observer : EBEvent) in
        managedObject.inconsistentSymbolNameSetMessage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'unconnectedPins' transient property
  //····················································································································

  private var mObserversOf_unconnectedPins = EBWeakEventSet ()

  //····················································································································

  var unconnectedPins_property_selection : EBSelection <UnconnectedSymbolPinsInDevice?> {
    if let model = self.propval {
      switch (model.unconnectedPins_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_unconnectedPins (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unconnectedPins.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.unconnectedPins_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_unconnectedPins (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unconnectedPins.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.unconnectedPins_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_unconnectedPins_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_unconnectedPins.apply { (_ observer : EBEvent) in
        managedObject.unconnectedPins_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_unconnectedPins_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_unconnectedPins.apply { (_ observer : EBEvent) in
        managedObject.unconnectedPins_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'packagePadNameSetsAreConsistent' transient property
  //····················································································································

  private var mObserversOf_packagePadNameSetsAreConsistent = EBWeakEventSet ()

  //····················································································································

  var packagePadNameSetsAreConsistent_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.packagePadNameSetsAreConsistent_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_packagePadNameSetsAreConsistent (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_packagePadNameSetsAreConsistent.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.packagePadNameSetsAreConsistent_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_packagePadNameSetsAreConsistent (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_packagePadNameSetsAreConsistent.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.packagePadNameSetsAreConsistent_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_packagePadNameSetsAreConsistent_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_packagePadNameSetsAreConsistent.apply { (_ observer : EBEvent) in
        managedObject.packagePadNameSetsAreConsistent_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_packagePadNameSetsAreConsistent_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_packagePadNameSetsAreConsistent.apply { (_ observer : EBEvent) in
        managedObject.packagePadNameSetsAreConsistent_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'symbolNameAreConsistent' transient property
  //····················································································································

  private var mObserversOf_symbolNameAreConsistent = EBWeakEventSet ()

  //····················································································································

  var symbolNameAreConsistent_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.symbolNameAreConsistent_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_symbolNameAreConsistent (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolNameAreConsistent.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.symbolNameAreConsistent_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolNameAreConsistent (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolNameAreConsistent.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.symbolNameAreConsistent_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_symbolNameAreConsistent_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_symbolNameAreConsistent.apply { (_ observer : EBEvent) in
        managedObject.symbolNameAreConsistent_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_symbolNameAreConsistent_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_symbolNameAreConsistent.apply { (_ observer : EBEvent) in
        managedObject.symbolNameAreConsistent_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'symbolTypeNames' transient property
  //····················································································································

  private var mObserversOf_symbolTypeNames = EBWeakEventSet ()

  //····················································································································

  var symbolTypeNames_property_selection : EBSelection <StringArray?> {
    if let model = self.propval {
      switch (model.symbolTypeNames_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_symbolTypeNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolTypeNames.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.symbolTypeNames_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolTypeNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolTypeNames.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.symbolTypeNames_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_symbolTypeNames_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_symbolTypeNames.apply { (_ observer : EBEvent) in
        managedObject.symbolTypeNames_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_symbolTypeNames_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_symbolTypeNames.apply { (_ observer : EBEvent) in
        managedObject.symbolTypeNames_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'unconnectedPads' transient property
  //····················································································································

  private var mObserversOf_unconnectedPads = EBWeakEventSet ()

  //····················································································································

  var unconnectedPads_property_selection : EBSelection <StringArray?> {
    if let model = self.propval {
      switch (model.unconnectedPads_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_unconnectedPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unconnectedPads.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.unconnectedPads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_unconnectedPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unconnectedPads.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.unconnectedPads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_unconnectedPads_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_unconnectedPads.apply { (_ observer : EBEvent) in
        managedObject.unconnectedPads_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_unconnectedPads_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_unconnectedPads.apply { (_ observer : EBEvent) in
        managedObject.unconnectedPads_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'assignedPadProxies' transient property
  //····················································································································

  private var mObserversOf_assignedPadProxies = EBWeakEventSet ()

  //····················································································································

  var assignedPadProxies_property_selection : EBSelection <AssignedPadProxiesInDevice?> {
    if let model = self.propval {
      switch (model.assignedPadProxies_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_assignedPadProxies (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_assignedPadProxies.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.assignedPadProxies_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_assignedPadProxies (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_assignedPadProxies.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.assignedPadProxies_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_assignedPadProxies_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_assignedPadProxies.apply { (_ observer : EBEvent) in
        managedObject.assignedPadProxies_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_assignedPadProxies_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_assignedPadProxies.apply { (_ observer : EBEvent) in
        managedObject.assignedPadProxies_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.issues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch self.prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observable toMany property: mDocs
  //····················································································································

  private var mObserversOf_mDocs = EBWeakEventSet ()

  //····················································································································

  var mDocs_property_selection : EBSelection <[DeviceDocumentation]> {
    if let model = self.propval {
      switch (model.mDocs_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mDocs (_ inObserver : EBEvent) {
    self.mObserversOf_mDocs.insert (inObserver)
    if let object = self.propval {
      object.mDocs_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDocs (_ inObserver : EBEvent) {
    self.mObserversOf_mDocs.remove (inObserver)
    if let object = self.propval {
      object.mDocs_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mSymbolInstances
  //····················································································································

  private var mObserversOf_mSymbolInstances = EBWeakEventSet ()

  //····················································································································

  var mSymbolInstances_property_selection : EBSelection <[SymbolInstanceInDevice]> {
    if let model = self.propval {
      switch (model.mSymbolInstances_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolInstances (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolInstances.insert (inObserver)
    if let object = self.propval {
      object.mSymbolInstances_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolInstances (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolInstances.remove (inObserver)
    if let object = self.propval {
      object.mSymbolInstances_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mPackages
  //····················································································································

  private var mObserversOf_mPackages = EBWeakEventSet ()

  //····················································································································

  var mPackages_property_selection : EBSelection <[PackageInDevice]> {
    if let model = self.propval {
      switch (model.mPackages_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mPackages (_ inObserver : EBEvent) {
    self.mObserversOf_mPackages.insert (inObserver)
    if let object = self.propval {
      object.mPackages_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackages (_ inObserver : EBEvent) {
    self.mObserversOf_mPackages.remove (inObserver)
    if let object = self.propval {
      object.mPackages_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mSymbolTypes
  //····················································································································

  private var mObserversOf_mSymbolTypes = EBWeakEventSet ()

  //····················································································································

  var mSymbolTypes_property_selection : EBSelection <[SymbolTypeInDevice]> {
    if let model = self.propval {
      switch (model.mSymbolTypes_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolTypes (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolTypes.insert (inObserver)
    if let object = self.propval {
      object.mSymbolTypes_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolTypes (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolTypes.remove (inObserver)
    if let object = self.propval {
      object.mSymbolTypes_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mPadProxies
  //····················································································································

  private var mObserversOf_mPadProxies = EBWeakEventSet ()

  //····················································································································

  var mPadProxies_property_selection : EBSelection <[PadProxyInDevice]> {
    if let model = self.propval {
      switch (model.mPadProxies_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mPadProxies (_ inObserver : EBEvent) {
    self.mObserversOf_mPadProxies.insert (inObserver)
    if let object = self.propval {
      object.mPadProxies_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPadProxies (_ inObserver : EBEvent) {
    self.mObserversOf_mPadProxies.remove (inObserver)
    if let object = self.propval {
      object.mPadProxies_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    TransientObject DeviceRoot
//----------------------------------------------------------------------------------------------------------------------

class TransientObject_DeviceRoot : ReadOnlyObject_DeviceRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_DeviceRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_DeviceRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : DeviceRoot? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < DeviceRoot? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : DeviceRoot? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_DeviceRoot
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_DeviceRoot : ReadOnlyObject_DeviceRoot {

  //····················································································································
 
  func setProp (_ inValue : DeviceRoot?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_DeviceRoot
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_DeviceRoot : ReadWriteObject_DeviceRoot {

  //····················································································································

  private var mModel : ReadWriteObject_DeviceRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_DeviceRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : DeviceRoot?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : DeviceRoot?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < DeviceRoot? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : DeviceRoot? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_DeviceRoot 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_DeviceRoot : ReadWriteObject_DeviceRoot, EBSignatureObserverProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : DeviceRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : DeviceRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : DeviceRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : DeviceRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : DeviceRoot?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < DeviceRoot? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : DeviceRoot?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : DeviceRoot? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

