//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_DeviceRoot 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_DeviceRoot : ReadOnlyAbstractObjectProperty <DeviceRoot> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : DeviceRoot?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
 //     oldValue.mSelectedPageIndex_property.removeEBObserversFrom (&self.mObserversOf_mSelectedPageIndex) // Stored property
      oldValue.mSelectedPageIndex_property.removeEBObserver (self.mSelectedPageIndex_property) // Stored property
 //     oldValue.mTitle_property.removeEBObserversFrom (&self.mObserversOf_mTitle) // Stored property
      oldValue.mTitle_property.removeEBObserver (self.mTitle_property) // Stored property
 //     oldValue.mImageData_property.removeEBObserversFrom (&self.mObserversOf_mImageData) // Stored property
      oldValue.mImageData_property.removeEBObserver (self.mImageData_property) // Stored property
 //     oldValue.mPrefix_property.removeEBObserversFrom (&self.mObserversOf_mPrefix) // Stored property
      oldValue.mPrefix_property.removeEBObserver (self.mPrefix_property) // Stored property
 //     oldValue.mComments_property.removeEBObserversFrom (&self.mObserversOf_mComments) // Stored property
      oldValue.mComments_property.removeEBObserver (self.mComments_property) // Stored property
 //     oldValue.mPackageDisplayZoom_property.removeEBObserversFrom (&self.mObserversOf_mPackageDisplayZoom) // Stored property
      oldValue.mPackageDisplayZoom_property.removeEBObserver (self.mPackageDisplayZoom_property) // Stored property
 //     oldValue.mPackageDisplayHorizontalFlip_property.removeEBObserversFrom (&self.mObserversOf_mPackageDisplayHorizontalFlip) // Stored property
      oldValue.mPackageDisplayHorizontalFlip_property.removeEBObserver (self.mPackageDisplayHorizontalFlip_property) // Stored property
 //     oldValue.mPackageDisplayVerticalFlip_property.removeEBObserversFrom (&self.mObserversOf_mPackageDisplayVerticalFlip) // Stored property
      oldValue.mPackageDisplayVerticalFlip_property.removeEBObserver (self.mPackageDisplayVerticalFlip_property) // Stored property
 //     oldValue.mShowPackages_property.removeEBObserversFrom (&self.mObserversOf_mShowPackages) // Stored property
      oldValue.mShowPackages_property.removeEBObserver (self.mShowPackages_property) // Stored property
 //     oldValue.mShowPackagePadNumbers_property.removeEBObserversFrom (&self.mObserversOf_mShowPackagePadNumbers) // Stored property
      oldValue.mShowPackagePadNumbers_property.removeEBObserver (self.mShowPackagePadNumbers_property) // Stored property
 //     oldValue.mShowPackageFrontPads_property.removeEBObserversFrom (&self.mObserversOf_mShowPackageFrontPads) // Stored property
      oldValue.mShowPackageFrontPads_property.removeEBObserver (self.mShowPackageFrontPads_property) // Stored property
 //     oldValue.mShowPackageBackPads_property.removeEBObserversFrom (&self.mObserversOf_mShowPackageBackPads) // Stored property
      oldValue.mShowPackageBackPads_property.removeEBObserver (self.mShowPackageBackPads_property) // Stored property
 //     oldValue.mSymbolDisplayZoom_property.removeEBObserversFrom (&self.mObserversOf_mSymbolDisplayZoom) // Stored property
      oldValue.mSymbolDisplayZoom_property.removeEBObserver (self.mSymbolDisplayZoom_property) // Stored property
 //     oldValue.mSymbolDisplayHorizontalFlip_property.removeEBObserversFrom (&self.mObserversOf_mSymbolDisplayHorizontalFlip) // Stored property
      oldValue.mSymbolDisplayHorizontalFlip_property.removeEBObserver (self.mSymbolDisplayHorizontalFlip_property) // Stored property
 //     oldValue.mSymbolDisplayVerticalFlip_property.removeEBObserversFrom (&self.mObserversOf_mSymbolDisplayVerticalFlip) // Stored property
      oldValue.mSymbolDisplayVerticalFlip_property.removeEBObserver (self.mSymbolDisplayVerticalFlip_property) // Stored property
 //     oldValue.imageIsValid_property.removeEBObserversFrom (&self.mObserversOf_imageIsValid) // Transient property
      oldValue.imageIsValid_property.removeEBObserver (self.imageIsValid_property) // Transient property
 //     oldValue.inconsistentPackagePadNameSetsMessage_property.removeEBObserversFrom (&self.mObserversOf_inconsistentPackagePadNameSetsMessage) // Transient property
      oldValue.inconsistentPackagePadNameSetsMessage_property.removeEBObserver (self.inconsistentPackagePadNameSetsMessage_property) // Transient property
 //     oldValue.inconsistentSymbolNameSetMessage_property.removeEBObserversFrom (&self.mObserversOf_inconsistentSymbolNameSetMessage) // Transient property
      oldValue.inconsistentSymbolNameSetMessage_property.removeEBObserver (self.inconsistentSymbolNameSetMessage_property) // Transient property
 //     oldValue.unconnectedPins_property.removeEBObserversFrom (&self.mObserversOf_unconnectedPins) // Transient property
      oldValue.unconnectedPins_property.removeEBObserver (self.unconnectedPins_property) // Transient property
 //     oldValue.packagePadNameSetsAreConsistent_property.removeEBObserversFrom (&self.mObserversOf_packagePadNameSetsAreConsistent) // Transient property
      oldValue.packagePadNameSetsAreConsistent_property.removeEBObserver (self.packagePadNameSetsAreConsistent_property) // Transient property
 //     oldValue.symbolNameAreConsistent_property.removeEBObserversFrom (&self.mObserversOf_symbolNameAreConsistent) // Transient property
      oldValue.symbolNameAreConsistent_property.removeEBObserver (self.symbolNameAreConsistent_property) // Transient property
 //     oldValue.symbolTypeNames_property.removeEBObserversFrom (&self.mObserversOf_symbolTypeNames) // Transient property
      oldValue.symbolTypeNames_property.removeEBObserver (self.symbolTypeNames_property) // Transient property
 //     oldValue.unconnectedPads_property.removeEBObserversFrom (&self.mObserversOf_unconnectedPads) // Transient property
      oldValue.unconnectedPads_property.removeEBObserver (self.unconnectedPads_property) // Transient property
 //     oldValue.assignedPadProxies_property.removeEBObserversFrom (&self.mObserversOf_assignedPadProxies) // Transient property
      oldValue.assignedPadProxies_property.removeEBObserver (self.assignedPadProxies_property) // Transient property
 //     oldValue.issues_property.removeEBObserversFrom (&self.mObserversOf_issues) // Transient property
      oldValue.issues_property.removeEBObserver (self.issues_property) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
 //     newValue.mSelectedPageIndex_property.addEBObserversFrom (&self.mObserversOf_mSelectedPageIndex) // Stored property
      newValue.mSelectedPageIndex_property.addEBObserver (self.mSelectedPageIndex_property) // Stored property
 //     newValue.mTitle_property.addEBObserversFrom (&self.mObserversOf_mTitle) // Stored property
      newValue.mTitle_property.addEBObserver (self.mTitle_property) // Stored property
 //     newValue.mImageData_property.addEBObserversFrom (&self.mObserversOf_mImageData) // Stored property
      newValue.mImageData_property.addEBObserver (self.mImageData_property) // Stored property
 //     newValue.mPrefix_property.addEBObserversFrom (&self.mObserversOf_mPrefix) // Stored property
      newValue.mPrefix_property.addEBObserver (self.mPrefix_property) // Stored property
 //     newValue.mComments_property.addEBObserversFrom (&self.mObserversOf_mComments) // Stored property
      newValue.mComments_property.addEBObserver (self.mComments_property) // Stored property
 //     newValue.mPackageDisplayZoom_property.addEBObserversFrom (&self.mObserversOf_mPackageDisplayZoom) // Stored property
      newValue.mPackageDisplayZoom_property.addEBObserver (self.mPackageDisplayZoom_property) // Stored property
 //     newValue.mPackageDisplayHorizontalFlip_property.addEBObserversFrom (&self.mObserversOf_mPackageDisplayHorizontalFlip) // Stored property
      newValue.mPackageDisplayHorizontalFlip_property.addEBObserver (self.mPackageDisplayHorizontalFlip_property) // Stored property
 //     newValue.mPackageDisplayVerticalFlip_property.addEBObserversFrom (&self.mObserversOf_mPackageDisplayVerticalFlip) // Stored property
      newValue.mPackageDisplayVerticalFlip_property.addEBObserver (self.mPackageDisplayVerticalFlip_property) // Stored property
 //     newValue.mShowPackages_property.addEBObserversFrom (&self.mObserversOf_mShowPackages) // Stored property
      newValue.mShowPackages_property.addEBObserver (self.mShowPackages_property) // Stored property
 //     newValue.mShowPackagePadNumbers_property.addEBObserversFrom (&self.mObserversOf_mShowPackagePadNumbers) // Stored property
      newValue.mShowPackagePadNumbers_property.addEBObserver (self.mShowPackagePadNumbers_property) // Stored property
 //     newValue.mShowPackageFrontPads_property.addEBObserversFrom (&self.mObserversOf_mShowPackageFrontPads) // Stored property
      newValue.mShowPackageFrontPads_property.addEBObserver (self.mShowPackageFrontPads_property) // Stored property
 //     newValue.mShowPackageBackPads_property.addEBObserversFrom (&self.mObserversOf_mShowPackageBackPads) // Stored property
      newValue.mShowPackageBackPads_property.addEBObserver (self.mShowPackageBackPads_property) // Stored property
 //     newValue.mSymbolDisplayZoom_property.addEBObserversFrom (&self.mObserversOf_mSymbolDisplayZoom) // Stored property
      newValue.mSymbolDisplayZoom_property.addEBObserver (self.mSymbolDisplayZoom_property) // Stored property
 //     newValue.mSymbolDisplayHorizontalFlip_property.addEBObserversFrom (&self.mObserversOf_mSymbolDisplayHorizontalFlip) // Stored property
      newValue.mSymbolDisplayHorizontalFlip_property.addEBObserver (self.mSymbolDisplayHorizontalFlip_property) // Stored property
 //     newValue.mSymbolDisplayVerticalFlip_property.addEBObserversFrom (&self.mObserversOf_mSymbolDisplayVerticalFlip) // Stored property
      newValue.mSymbolDisplayVerticalFlip_property.addEBObserver (self.mSymbolDisplayVerticalFlip_property) // Stored property
  //    newValue.imageIsValid_property.addEBObserversFrom (&self.mObserversOf_imageIsValid) // Transient property
      newValue.imageIsValid_property.addEBObserver (self.imageIsValid_property) // Transient property
  //    newValue.inconsistentPackagePadNameSetsMessage_property.addEBObserversFrom (&self.mObserversOf_inconsistentPackagePadNameSetsMessage) // Transient property
      newValue.inconsistentPackagePadNameSetsMessage_property.addEBObserver (self.inconsistentPackagePadNameSetsMessage_property) // Transient property
  //    newValue.inconsistentSymbolNameSetMessage_property.addEBObserversFrom (&self.mObserversOf_inconsistentSymbolNameSetMessage) // Transient property
      newValue.inconsistentSymbolNameSetMessage_property.addEBObserver (self.inconsistentSymbolNameSetMessage_property) // Transient property
  //    newValue.unconnectedPins_property.addEBObserversFrom (&self.mObserversOf_unconnectedPins) // Transient property
      newValue.unconnectedPins_property.addEBObserver (self.unconnectedPins_property) // Transient property
  //    newValue.packagePadNameSetsAreConsistent_property.addEBObserversFrom (&self.mObserversOf_packagePadNameSetsAreConsistent) // Transient property
      newValue.packagePadNameSetsAreConsistent_property.addEBObserver (self.packagePadNameSetsAreConsistent_property) // Transient property
  //    newValue.symbolNameAreConsistent_property.addEBObserversFrom (&self.mObserversOf_symbolNameAreConsistent) // Transient property
      newValue.symbolNameAreConsistent_property.addEBObserver (self.symbolNameAreConsistent_property) // Transient property
  //    newValue.symbolTypeNames_property.addEBObserversFrom (&self.mObserversOf_symbolTypeNames) // Transient property
      newValue.symbolTypeNames_property.addEBObserver (self.symbolTypeNames_property) // Transient property
  //    newValue.unconnectedPads_property.addEBObserversFrom (&self.mObserversOf_unconnectedPads) // Transient property
      newValue.unconnectedPads_property.addEBObserver (self.unconnectedPads_property) // Transient property
  //    newValue.assignedPadProxies_property.addEBObserversFrom (&self.mObserversOf_assignedPadProxies) // Transient property
      newValue.assignedPadProxies_property.addEBObserver (self.assignedPadProxies_property) // Transient property
  //    newValue.issues_property.addEBObserversFrom (&self.mObserversOf_issues) // Transient property
      newValue.issues_property.addEBObserver (self.issues_property) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mSelectedPageIndex' stored property
  //····················································································································

  final let mSelectedPageIndex_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mSelectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final var mSelectedPageIndex_property_selection : EBSelection <Int?> { // §
    return self.mSelectedPageIndex_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.mSelectedPageIndex_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSelectedPageIndex.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSelectedPageIndex_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.mSelectedPageIndex_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSelectedPageIndex.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSelectedPageIndex_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mTitle' stored property
  //····················································································································

  final let mTitle_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_mTitle = EBWeakEventSet ()

  //····················································································································

  final var mTitle_property_selection : EBSelection <String?> { // §
    return self.mTitle_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mTitle (_ inObserver : EBEvent) {
    self.mTitle_property.addEBObserver (inObserver)
/*    self.mObserversOf_mTitle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mTitle_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mTitle (_ inObserver : EBEvent) {
    self.mTitle_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mTitle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mTitle_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mImageData' stored property
  //····················································································································

  final let mImageData_property = EBGenericTransientProperty <Data?> ()
//  private final var mObserversOf_mImageData = EBWeakEventSet ()

  //····················································································································

  final var mImageData_property_selection : EBSelection <Data?> { // §
    return self.mImageData_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mImageData (_ inObserver : EBEvent) {
    self.mImageData_property.addEBObserver (inObserver)
/*    self.mObserversOf_mImageData.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mImageData_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mImageData (_ inObserver : EBEvent) {
    self.mImageData_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mImageData.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mImageData_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mPrefix' stored property
  //····················································································································

  final let mPrefix_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_mPrefix = EBWeakEventSet ()

  //····················································································································

  final var mPrefix_property_selection : EBSelection <String?> { // §
    return self.mPrefix_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mPrefix (_ inObserver : EBEvent) {
    self.mPrefix_property.addEBObserver (inObserver)
/*    self.mObserversOf_mPrefix.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mPrefix_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mPrefix (_ inObserver : EBEvent) {
    self.mPrefix_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mPrefix.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mPrefix_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mComments' stored property
  //····················································································································

  final let mComments_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_mComments = EBWeakEventSet ()

  //····················································································································

  final var mComments_property_selection : EBSelection <String?> { // §
    return self.mComments_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mComments (_ inObserver : EBEvent) {
    self.mComments_property.addEBObserver (inObserver)
/*    self.mObserversOf_mComments.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mComments_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mComments (_ inObserver : EBEvent) {
    self.mComments_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mComments.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mComments_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mPackageDisplayZoom' stored property
  //····················································································································

  final let mPackageDisplayZoom_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mPackageDisplayZoom = EBWeakEventSet ()

  //····················································································································

  final var mPackageDisplayZoom_property_selection : EBSelection <Int?> { // §
    return self.mPackageDisplayZoom_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mPackageDisplayZoom (_ inObserver : EBEvent) {
    self.mPackageDisplayZoom_property.addEBObserver (inObserver)
/*    self.mObserversOf_mPackageDisplayZoom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mPackageDisplayZoom_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayZoom (_ inObserver : EBEvent) {
    self.mPackageDisplayZoom_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mPackageDisplayZoom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mPackageDisplayZoom_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mPackageDisplayHorizontalFlip' stored property
  //····················································································································

  final let mPackageDisplayHorizontalFlip_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mPackageDisplayHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  final var mPackageDisplayHorizontalFlip_property_selection : EBSelection <Bool?> { // §
    return self.mPackageDisplayHorizontalFlip_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mPackageDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.mPackageDisplayHorizontalFlip_property.addEBObserver (inObserver)
/*    self.mObserversOf_mPackageDisplayHorizontalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mPackageDisplayHorizontalFlip_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.mPackageDisplayHorizontalFlip_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mPackageDisplayHorizontalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mPackageDisplayHorizontalFlip_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mPackageDisplayVerticalFlip' stored property
  //····················································································································

  final let mPackageDisplayVerticalFlip_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mPackageDisplayVerticalFlip = EBWeakEventSet ()

  //····················································································································

  final var mPackageDisplayVerticalFlip_property_selection : EBSelection <Bool?> { // §
    return self.mPackageDisplayVerticalFlip_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mPackageDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.mPackageDisplayVerticalFlip_property.addEBObserver (inObserver)
/*    self.mObserversOf_mPackageDisplayVerticalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mPackageDisplayVerticalFlip_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.mPackageDisplayVerticalFlip_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mPackageDisplayVerticalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mPackageDisplayVerticalFlip_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mShowPackages' stored property
  //····················································································································

  final let mShowPackages_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mShowPackages = EBWeakEventSet ()

  //····················································································································

  final var mShowPackages_property_selection : EBSelection <Bool?> { // §
    return self.mShowPackages_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mShowPackages (_ inObserver : EBEvent) {
    self.mShowPackages_property.addEBObserver (inObserver)
/*    self.mObserversOf_mShowPackages.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mShowPackages_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackages (_ inObserver : EBEvent) {
    self.mShowPackages_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mShowPackages.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mShowPackages_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mShowPackagePadNumbers' stored property
  //····················································································································

  final let mShowPackagePadNumbers_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mShowPackagePadNumbers = EBWeakEventSet ()

  //····················································································································

  final var mShowPackagePadNumbers_property_selection : EBSelection <Bool?> { // §
    return self.mShowPackagePadNumbers_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mShowPackagePadNumbers (_ inObserver : EBEvent) {
    self.mShowPackagePadNumbers_property.addEBObserver (inObserver)
/*    self.mObserversOf_mShowPackagePadNumbers.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mShowPackagePadNumbers_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackagePadNumbers (_ inObserver : EBEvent) {
    self.mShowPackagePadNumbers_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mShowPackagePadNumbers.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mShowPackagePadNumbers_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mShowPackageFrontPads' stored property
  //····················································································································

  final let mShowPackageFrontPads_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mShowPackageFrontPads = EBWeakEventSet ()

  //····················································································································

  final var mShowPackageFrontPads_property_selection : EBSelection <Bool?> { // §
    return self.mShowPackageFrontPads_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mShowPackageFrontPads (_ inObserver : EBEvent) {
    self.mShowPackageFrontPads_property.addEBObserver (inObserver)
/*    self.mObserversOf_mShowPackageFrontPads.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mShowPackageFrontPads_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackageFrontPads (_ inObserver : EBEvent) {
    self.mShowPackageFrontPads_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mShowPackageFrontPads.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mShowPackageFrontPads_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mShowPackageBackPads' stored property
  //····················································································································

  final let mShowPackageBackPads_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mShowPackageBackPads = EBWeakEventSet ()

  //····················································································································

  final var mShowPackageBackPads_property_selection : EBSelection <Bool?> { // §
    return self.mShowPackageBackPads_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mShowPackageBackPads (_ inObserver : EBEvent) {
    self.mShowPackageBackPads_property.addEBObserver (inObserver)
/*    self.mObserversOf_mShowPackageBackPads.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mShowPackageBackPads_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackageBackPads (_ inObserver : EBEvent) {
    self.mShowPackageBackPads_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mShowPackageBackPads.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mShowPackageBackPads_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mSymbolDisplayZoom' stored property
  //····················································································································

  final let mSymbolDisplayZoom_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_mSymbolDisplayZoom = EBWeakEventSet ()

  //····················································································································

  final var mSymbolDisplayZoom_property_selection : EBSelection <Int?> { // §
    return self.mSymbolDisplayZoom_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mSymbolDisplayZoom (_ inObserver : EBEvent) {
    self.mSymbolDisplayZoom_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSymbolDisplayZoom.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSymbolDisplayZoom_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolDisplayZoom (_ inObserver : EBEvent) {
    self.mSymbolDisplayZoom_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSymbolDisplayZoom.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSymbolDisplayZoom_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mSymbolDisplayHorizontalFlip' stored property
  //····················································································································

  final let mSymbolDisplayHorizontalFlip_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mSymbolDisplayHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  final var mSymbolDisplayHorizontalFlip_property_selection : EBSelection <Bool?> { // §
    return self.mSymbolDisplayHorizontalFlip_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mSymbolDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.mSymbolDisplayHorizontalFlip_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSymbolDisplayHorizontalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSymbolDisplayHorizontalFlip_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.mSymbolDisplayHorizontalFlip_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSymbolDisplayHorizontalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSymbolDisplayHorizontalFlip_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'mSymbolDisplayVerticalFlip' stored property
  //····················································································································

  final let mSymbolDisplayVerticalFlip_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_mSymbolDisplayVerticalFlip = EBWeakEventSet ()

  //····················································································································

  final var mSymbolDisplayVerticalFlip_property_selection : EBSelection <Bool?> { // §
    return self.mSymbolDisplayVerticalFlip_property.selection
  }

  //····················································································································

  final func addEBObserverOf_mSymbolDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.mSymbolDisplayVerticalFlip_property.addEBObserver (inObserver)
/*    self.mObserversOf_mSymbolDisplayVerticalFlip.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mSymbolDisplayVerticalFlip_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.mSymbolDisplayVerticalFlip_property.removeEBObserver (inObserver)
/*    self.mObserversOf_mSymbolDisplayVerticalFlip.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mSymbolDisplayVerticalFlip_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'imageIsValid' transient property
  //····················································································································

  final let imageIsValid_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_imageIsValid = EBWeakEventSet ()

  //····················································································································

  final var imageIsValid_property_selection : EBSelection <Bool?> {
    return self.imageIsValid_property.selection
  }

  //····················································································································

  final func addEBObserverOf_imageIsValid (_ inObserver : EBEvent) {
    self.imageIsValid_property.addEBObserver (inObserver)
/*    self.mObserversOf_imageIsValid.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.imageIsValid_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_imageIsValid (_ inObserver : EBEvent) {
    self.imageIsValid_property.removeEBObserver (inObserver)
/*    self.mObserversOf_imageIsValid.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.imageIsValid_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'inconsistentPackagePadNameSetsMessage' transient property
  //····················································································································

  final let inconsistentPackagePadNameSetsMessage_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_inconsistentPackagePadNameSetsMessage = EBWeakEventSet ()

  //····················································································································

  final var inconsistentPackagePadNameSetsMessage_property_selection : EBSelection <String?> {
    return self.inconsistentPackagePadNameSetsMessage_property.selection
  }

  //····················································································································

  final func addEBObserverOf_inconsistentPackagePadNameSetsMessage (_ inObserver : EBEvent) {
    self.inconsistentPackagePadNameSetsMessage_property.addEBObserver (inObserver)
/*    self.mObserversOf_inconsistentPackagePadNameSetsMessage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.inconsistentPackagePadNameSetsMessage_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_inconsistentPackagePadNameSetsMessage (_ inObserver : EBEvent) {
    self.inconsistentPackagePadNameSetsMessage_property.removeEBObserver (inObserver)
/*    self.mObserversOf_inconsistentPackagePadNameSetsMessage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.inconsistentPackagePadNameSetsMessage_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'inconsistentSymbolNameSetMessage' transient property
  //····················································································································

  final let inconsistentSymbolNameSetMessage_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_inconsistentSymbolNameSetMessage = EBWeakEventSet ()

  //····················································································································

  final var inconsistentSymbolNameSetMessage_property_selection : EBSelection <String?> {
    return self.inconsistentSymbolNameSetMessage_property.selection
  }

  //····················································································································

  final func addEBObserverOf_inconsistentSymbolNameSetMessage (_ inObserver : EBEvent) {
    self.inconsistentSymbolNameSetMessage_property.addEBObserver (inObserver)
/*    self.mObserversOf_inconsistentSymbolNameSetMessage.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.inconsistentSymbolNameSetMessage_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_inconsistentSymbolNameSetMessage (_ inObserver : EBEvent) {
    self.inconsistentSymbolNameSetMessage_property.removeEBObserver (inObserver)
/*    self.mObserversOf_inconsistentSymbolNameSetMessage.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.inconsistentSymbolNameSetMessage_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'unconnectedPins' transient property
  //····················································································································

  final let unconnectedPins_property = EBGenericTransientProperty <UnconnectedSymbolPinsInDevice?> ()
//  private final var mObserversOf_unconnectedPins = EBWeakEventSet ()

  //····················································································································

  final var unconnectedPins_property_selection : EBSelection <UnconnectedSymbolPinsInDevice?> {
    return self.unconnectedPins_property.selection
  }

  //····················································································································

  final func addEBObserverOf_unconnectedPins (_ inObserver : EBEvent) {
    self.unconnectedPins_property.addEBObserver (inObserver)
/*    self.mObserversOf_unconnectedPins.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.unconnectedPins_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_unconnectedPins (_ inObserver : EBEvent) {
    self.unconnectedPins_property.removeEBObserver (inObserver)
/*    self.mObserversOf_unconnectedPins.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.unconnectedPins_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'packagePadNameSetsAreConsistent' transient property
  //····················································································································

  final let packagePadNameSetsAreConsistent_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_packagePadNameSetsAreConsistent = EBWeakEventSet ()

  //····················································································································

  final var packagePadNameSetsAreConsistent_property_selection : EBSelection <Bool?> {
    return self.packagePadNameSetsAreConsistent_property.selection
  }

  //····················································································································

  final func addEBObserverOf_packagePadNameSetsAreConsistent (_ inObserver : EBEvent) {
    self.packagePadNameSetsAreConsistent_property.addEBObserver (inObserver)
/*    self.mObserversOf_packagePadNameSetsAreConsistent.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.packagePadNameSetsAreConsistent_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_packagePadNameSetsAreConsistent (_ inObserver : EBEvent) {
    self.packagePadNameSetsAreConsistent_property.removeEBObserver (inObserver)
/*    self.mObserversOf_packagePadNameSetsAreConsistent.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.packagePadNameSetsAreConsistent_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'symbolNameAreConsistent' transient property
  //····················································································································

  final let symbolNameAreConsistent_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_symbolNameAreConsistent = EBWeakEventSet ()

  //····················································································································

  final var symbolNameAreConsistent_property_selection : EBSelection <Bool?> {
    return self.symbolNameAreConsistent_property.selection
  }

  //····················································································································

  final func addEBObserverOf_symbolNameAreConsistent (_ inObserver : EBEvent) {
    self.symbolNameAreConsistent_property.addEBObserver (inObserver)
/*    self.mObserversOf_symbolNameAreConsistent.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.symbolNameAreConsistent_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_symbolNameAreConsistent (_ inObserver : EBEvent) {
    self.symbolNameAreConsistent_property.removeEBObserver (inObserver)
/*    self.mObserversOf_symbolNameAreConsistent.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.symbolNameAreConsistent_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'symbolTypeNames' transient property
  //····················································································································

  final let symbolTypeNames_property = EBGenericTransientProperty <StringArray?> ()
//  private final var mObserversOf_symbolTypeNames = EBWeakEventSet ()

  //····················································································································

  final var symbolTypeNames_property_selection : EBSelection <StringArray?> {
    return self.symbolTypeNames_property.selection
  }

  //····················································································································

  final func addEBObserverOf_symbolTypeNames (_ inObserver : EBEvent) {
    self.symbolTypeNames_property.addEBObserver (inObserver)
/*    self.mObserversOf_symbolTypeNames.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.symbolTypeNames_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_symbolTypeNames (_ inObserver : EBEvent) {
    self.symbolTypeNames_property.removeEBObserver (inObserver)
/*    self.mObserversOf_symbolTypeNames.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.symbolTypeNames_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'unconnectedPads' transient property
  //····················································································································

  final let unconnectedPads_property = EBGenericTransientProperty <StringArray?> ()
//  private final var mObserversOf_unconnectedPads = EBWeakEventSet ()

  //····················································································································

  final var unconnectedPads_property_selection : EBSelection <StringArray?> {
    return self.unconnectedPads_property.selection
  }

  //····················································································································

  final func addEBObserverOf_unconnectedPads (_ inObserver : EBEvent) {
    self.unconnectedPads_property.addEBObserver (inObserver)
/*    self.mObserversOf_unconnectedPads.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.unconnectedPads_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_unconnectedPads (_ inObserver : EBEvent) {
    self.unconnectedPads_property.removeEBObserver (inObserver)
/*    self.mObserversOf_unconnectedPads.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.unconnectedPads_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'assignedPadProxies' transient property
  //····················································································································

  final let assignedPadProxies_property = EBGenericTransientProperty <AssignedPadProxiesInDevice?> ()
//  private final var mObserversOf_assignedPadProxies = EBWeakEventSet ()

  //····················································································································

  final var assignedPadProxies_property_selection : EBSelection <AssignedPadProxiesInDevice?> {
    return self.assignedPadProxies_property.selection
  }

  //····················································································································

  final func addEBObserverOf_assignedPadProxies (_ inObserver : EBEvent) {
    self.assignedPadProxies_property.addEBObserver (inObserver)
/*    self.mObserversOf_assignedPadProxies.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.assignedPadProxies_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_assignedPadProxies (_ inObserver : EBEvent) {
    self.assignedPadProxies_property.removeEBObserver (inObserver)
/*    self.mObserversOf_assignedPadProxies.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.assignedPadProxies_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  final let issues_property = EBGenericTransientProperty <CanariIssueArray?> ()
//  private final var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final var issues_property_selection : EBSelection <CanariIssueArray?> {
    return self.issues_property.selection
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.issues_property.addEBObserver (inObserver)
/*    self.mObserversOf_issues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.issues_property.removeEBObserver (inObserver)
/*    self.mObserversOf_issues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observable toMany property: mDocs
  //····················································································································

  private final var mObserversOf_mDocs = EBWeakEventSet ()

  //····················································································································

  final var mDocs_property_selection : EBSelection <[DeviceDocumentation]> {
    if let model = self.propval {
      switch (model.mDocs_property.selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mDocs (_ inObserver : EBEvent) {
    self.mObserversOf_mDocs.insert (inObserver)
    if let object = self.propval {
      object.mDocs_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDocs (_ inObserver : EBEvent) {
    self.mObserversOf_mDocs.remove (inObserver)
    if let object = self.propval {
      object.mDocs_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mSymbolInstances
  //····················································································································

  private final var mObserversOf_mSymbolInstances = EBWeakEventSet ()

  //····················································································································

  final var mSymbolInstances_property_selection : EBSelection <[SymbolInstanceInDevice]> {
    if let model = self.propval {
      switch (model.mSymbolInstances_property.selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolInstances (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolInstances.insert (inObserver)
    if let object = self.propval {
      object.mSymbolInstances_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolInstances (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolInstances.remove (inObserver)
    if let object = self.propval {
      object.mSymbolInstances_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mPackages
  //····················································································································

  private final var mObserversOf_mPackages = EBWeakEventSet ()

  //····················································································································

  final var mPackages_property_selection : EBSelection <[PackageInDevice]> {
    if let model = self.propval {
      switch (model.mPackages_property.selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mPackages (_ inObserver : EBEvent) {
    self.mObserversOf_mPackages.insert (inObserver)
    if let object = self.propval {
      object.mPackages_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackages (_ inObserver : EBEvent) {
    self.mObserversOf_mPackages.remove (inObserver)
    if let object = self.propval {
      object.mPackages_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mSymbolTypes
  //····················································································································

  private final var mObserversOf_mSymbolTypes = EBWeakEventSet ()

  //····················································································································

  final var mSymbolTypes_property_selection : EBSelection <[SymbolTypeInDevice]> {
    if let model = self.propval {
      switch (model.mSymbolTypes_property.selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolTypes (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolTypes.insert (inObserver)
    if let object = self.propval {
      object.mSymbolTypes_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolTypes (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolTypes.remove (inObserver)
    if let object = self.propval {
      object.mSymbolTypes_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mPadProxies
  //····················································································································

  private final var mObserversOf_mPadProxies = EBWeakEventSet ()

  //····················································································································

  final var mPadProxies_property_selection : EBSelection <[PadProxyInDevice]> {
    if let model = self.propval {
      switch (model.mPadProxies_property.selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mPadProxies (_ inObserver : EBEvent) {
    self.mObserversOf_mPadProxies.insert (inObserver)
    if let object = self.propval {
      object.mPadProxies_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPadProxies (_ inObserver : EBEvent) {
    self.mObserversOf_mPadProxies.remove (inObserver)
    if let object = self.propval {
      object.mPadProxies_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT 
  //····················································································································

  override init () {
    super.init ()
  //--- Configure mSelectedPageIndex simple stored property
    self.mSelectedPageIndex_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSelectedPageIndex_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mTitle simple stored property
    self.mTitle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mTitle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mImageData simple stored property
    self.mImageData_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mImageData_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mPrefix simple stored property
    self.mPrefix_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mPrefix_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mComments simple stored property
    self.mComments_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mComments_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mPackageDisplayZoom simple stored property
    self.mPackageDisplayZoom_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mPackageDisplayZoom_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mPackageDisplayHorizontalFlip simple stored property
    self.mPackageDisplayHorizontalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mPackageDisplayHorizontalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mPackageDisplayVerticalFlip simple stored property
    self.mPackageDisplayVerticalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mPackageDisplayVerticalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mShowPackages simple stored property
    self.mShowPackages_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mShowPackages_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mShowPackagePadNumbers simple stored property
    self.mShowPackagePadNumbers_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mShowPackagePadNumbers_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mShowPackageFrontPads simple stored property
    self.mShowPackageFrontPads_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mShowPackageFrontPads_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mShowPackageBackPads simple stored property
    self.mShowPackageBackPads_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mShowPackageBackPads_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mSymbolDisplayZoom simple stored property
    self.mSymbolDisplayZoom_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSymbolDisplayZoom_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mSymbolDisplayHorizontalFlip simple stored property
    self.mSymbolDisplayHorizontalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSymbolDisplayHorizontalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure mSymbolDisplayVerticalFlip simple stored property
    self.mSymbolDisplayVerticalFlip_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.mSymbolDisplayVerticalFlip_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure imageIsValid transient property
    self.imageIsValid_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.imageIsValid_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure inconsistentPackagePadNameSetsMessage transient property
    self.inconsistentPackagePadNameSetsMessage_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.inconsistentPackagePadNameSetsMessage_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure inconsistentSymbolNameSetMessage transient property
    self.inconsistentSymbolNameSetMessage_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.inconsistentSymbolNameSetMessage_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure unconnectedPins transient property
    self.unconnectedPins_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.unconnectedPins_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure packagePadNameSetsAreConsistent transient property
    self.packagePadNameSetsAreConsistent_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.packagePadNameSetsAreConsistent_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure symbolNameAreConsistent transient property
    self.symbolNameAreConsistent_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.symbolNameAreConsistent_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure symbolTypeNames transient property
    self.symbolTypeNames_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.symbolTypeNames_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure unconnectedPads transient property
    self.unconnectedPads_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.unconnectedPads_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure assignedPadProxies transient property
    self.assignedPadProxies_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.assignedPadProxies_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure issues transient property
    self.issues_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.issues_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject DeviceRoot
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_DeviceRoot : ReadOnlyObject_DeviceRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_DeviceRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_DeviceRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : DeviceRoot? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < DeviceRoot? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : DeviceRoot? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_DeviceRoot
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_DeviceRoot : ReadOnlyObject_DeviceRoot {

  //····················································································································
 
  func setProp (_ inValue : DeviceRoot?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_DeviceRoot
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_DeviceRoot : ReadWriteObject_DeviceRoot {

  //····················································································································

  private var mModel : ReadWriteObject_DeviceRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_DeviceRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : DeviceRoot?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : DeviceRoot?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < DeviceRoot? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : DeviceRoot? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_DeviceRoot 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_DeviceRoot : ReadWriteObject_DeviceRoot, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : DeviceRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : DeviceRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : DeviceRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : DeviceRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : DeviceRoot?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < DeviceRoot? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : DeviceRoot?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : DeviceRoot? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

