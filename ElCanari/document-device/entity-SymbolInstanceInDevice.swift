//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolInstanceInDevice_mInstanceName : class {
  var mInstanceName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolInstanceInDevice_mX : class {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolInstanceInDevice_mY : class {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolInstanceInDevice_symbolQualifiedName : class {
  var symbolQualifiedName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolInstanceInDevice_symbolTypeName : class {
  var symbolTypeName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolInstanceInDevice_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolInstanceInDevice_unconnectedPins : class {
  var unconnectedPins : UnconnectedSymbolPinsInDevice? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolInstanceInDevice_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: SymbolInstanceInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class SymbolInstanceInDevice : EBGraphicManagedObject,
         SymbolInstanceInDevice_mInstanceName,
         SymbolInstanceInDevice_mX,
         SymbolInstanceInDevice_mY,
         SymbolInstanceInDevice_symbolQualifiedName,
         SymbolInstanceInDevice_symbolTypeName,
         SymbolInstanceInDevice_selectionDisplay,
         SymbolInstanceInDevice_unconnectedPins,
         SymbolInstanceInDevice_objectDisplay {

  //····················································································································
  //   To many property: mPinInstances
  //····················································································································

  let mPinInstances_property = StoredArrayOf_SymbolPinInstanceInDevice ()

  //····················································································································

  var mPinInstances_property_selection : EBSelection < [SymbolPinInstanceInDevice] > {
    return self.mPinInstances_property.prop
  }

  //····················································································································

  var mPinInstances : [SymbolPinInstanceInDevice] {
    get { return self.mPinInstances_property.propval }
    set { self.mPinInstances_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mInstanceName
  //····················································································································

  let mInstanceName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mInstanceName : String {
    get { return self.mInstanceName_property.propval }
    set { self.mInstanceName_property.setProp (newValue) }
  }

  //····················································································································

  var mInstanceName_property_selection : EBSelection <String> { return self.mInstanceName_property.prop }

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  let mX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································

  var mX_property_selection : EBSelection <Int> { return self.mX_property.prop }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  let mY_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································

  var mY_property_selection : EBSelection <Int> { return self.mY_property.prop }

  //····················································································································
  //   To one property: mType
  //····················································································································

  let mType_property = ToOneRelationship_SymbolInstanceInDevice_mType ()

  //····················································································································

  var mType_property_selection : EBSelection <SymbolTypeInDevice?> {
    return .single (self.mType_property.propval)
  }

  //····················································································································

  var mType : SymbolTypeInDevice? {
    get { return self.mType_property.propval }
    set { self.mType_property.setProp (newValue) }
  }

  //····················································································································

  var mType_none : ToOneRelationship_SymbolInstanceInDevice_mType { return self.mType_property }

  //····················································································································

  var mType_none_selection : EBSelection <Bool> {
    return .single (self.mType_property.propval == nil)
  }

  //····················································································································
  //   Transient property: symbolQualifiedName
  //····················································································································

  let symbolQualifiedName_property = EBTransientProperty_String ()

  //····················································································································

  var symbolQualifiedName_property_selection : EBSelection <String> {
    return self.symbolQualifiedName_property.prop
  }

  //····················································································································

  var symbolQualifiedName : String? {
    switch self.symbolQualifiedName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolTypeName
  //····················································································································

  let symbolTypeName_property = EBTransientProperty_String ()

  //····················································································································

  var symbolTypeName_property_selection : EBSelection <String> {
    return self.symbolTypeName_property.prop
  }

  //····················································································································

  var symbolTypeName : String? {
    switch self.symbolTypeName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unconnectedPins
  //····················································································································

  let unconnectedPins_property = EBTransientProperty_UnconnectedSymbolPinsInDevice ()

  //····················································································································

  var unconnectedPins_property_selection : EBSelection <UnconnectedSymbolPinsInDevice> {
    return self.unconnectedPins_property.prop
  }

  //····················································································································

  var unconnectedPins : UnconnectedSymbolPinsInDevice? {
    switch self.unconnectedPins_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- To many property: mPinInstances (has opposite relationship)
    self.mPinInstances_property.ebUndoManager = self.ebUndoManager
    self.mPinInstances_property.setOppositeRelationship = { [weak self] (_ inManagedObject :SymbolPinInstanceInDevice?) in
      inManagedObject?.mSymbolInstance_property.setProp (self)
    }
  //--- Atomic property: mInstanceName
    self.mInstanceName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mX
    self.mX_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mY
    self.mY_property.ebUndoManager = self.ebUndoManager
  //--- To one property: mType
    self.mType_property.owner = self
  //--- Atomic property: symbolQualifiedName
    self.symbolQualifiedName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mInstanceName_property_selection.kind ()
        kind &= unwSelf.mType_property.mTypeName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mInstanceName_property_selection, unwSelf.mType_property.mTypeName_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_SymbolInstanceInDevice_symbolQualifiedName (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mInstanceName_property.addEBObserver (self.symbolQualifiedName_property)
    self.mType_property.addEBObserverOf_mTypeName (self.symbolQualifiedName_property)
  //--- Atomic property: symbolTypeName
    self.symbolTypeName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mType_property.mTypeName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mType_property.mTypeName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_SymbolInstanceInDevice_symbolTypeName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mType_property.addEBObserverOf_mTypeName (self.symbolTypeName_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mType_property.mStrokeBezierPath_property_selection.kind ()
        kind &= unwSelf.mType_property.mFilledBezierPath_property_selection.kind ()
        kind &= unwSelf.symbolQualifiedName_property_selection.kind ()
        kind &= g_Preferences!.symbolDrawingWidthMultipliedByTen_property_selection.kind ()
        kind &= unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mType_property.mStrokeBezierPath_property_selection, unwSelf.mType_property.mFilledBezierPath_property_selection, unwSelf.symbolQualifiedName_property_selection, g_Preferences!.symbolDrawingWidthMultipliedByTen_property_selection, unwSelf.mX_property_selection, unwSelf.mY_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5)) :
            return .single (transient_SymbolInstanceInDevice_selectionDisplay (v0, v1, v2, v3, v4, v5))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mType_property.addEBObserverOf_mStrokeBezierPath (self.selectionDisplay_property)
    self.mType_property.addEBObserverOf_mFilledBezierPath (self.selectionDisplay_property)
    self.symbolQualifiedName_property.addEBObserver (self.selectionDisplay_property)
    g_Preferences?.symbolDrawingWidthMultipliedByTen_property.addEBObserver (self.selectionDisplay_property)
    self.mX_property.addEBObserver (self.selectionDisplay_property)
    self.mY_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: unconnectedPins
    self.unconnectedPins_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mPinInstances_property_selection.kind ()
        kind &= unwSelf.mPinInstances_property_selection.kind ()
        kind &= unwSelf.mInstanceName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mPinInstances_property_selection, unwSelf.mPinInstances_property_selection, unwSelf.mInstanceName_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_SymbolInstanceInDevice_unconnectedPins (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPinInstances_property.addEBObserverOf_pinName (self.unconnectedPins_property)
    self.mPinInstances_property.addEBObserverOf_isConnected (self.unconnectedPins_property)
    self.mInstanceName_property.addEBObserver (self.unconnectedPins_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mType_property.mStrokeBezierPath_property_selection.kind ()
        kind &= unwSelf.mType_property.mFilledBezierPath_property_selection.kind ()
        kind &= unwSelf.mType_property.pinNameShape_property_selection.kind ()
        kind &= unwSelf.mPinInstances_property_selection.kind ()
        kind &= unwSelf.symbolQualifiedName_property_selection.kind ()
        kind &= unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        kind &= g_Preferences!.symbolDrawingWidthMultipliedByTen_property_selection.kind ()
        kind &= g_Preferences!.symbolColor_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mType_property.mStrokeBezierPath_property_selection, unwSelf.mType_property.mFilledBezierPath_property_selection, unwSelf.mType_property.pinNameShape_property_selection, unwSelf.mPinInstances_property_selection, unwSelf.symbolQualifiedName_property_selection, unwSelf.mX_property_selection, unwSelf.mY_property_selection, g_Preferences!.symbolDrawingWidthMultipliedByTen_property_selection, g_Preferences!.symbolColor_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8)) :
            return .single (transient_SymbolInstanceInDevice_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mType_property.addEBObserverOf_mStrokeBezierPath (self.objectDisplay_property)
    self.mType_property.addEBObserverOf_mFilledBezierPath (self.objectDisplay_property)
    self.mType_property.addEBObserverOf_pinNameShape (self.objectDisplay_property)
    self.mPinInstances_property.addEBObserverOf_numberShape (self.objectDisplay_property)
    self.symbolQualifiedName_property.addEBObserver (self.objectDisplay_property)
    self.mX_property.addEBObserver (self.objectDisplay_property)
    self.mY_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.symbolDrawingWidthMultipliedByTen_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.symbolColor_property.addEBObserver (self.objectDisplay_property)
  //--- Install undoers and opposite setter for relationships
    self.mPinInstances_property.setOppositeRelationship = { [weak self] (_ inManagedObject : SymbolPinInstanceInDevice) in
      if let me = self {
        inManagedObject.mSymbolInstance_property.setProp (me)
      }
    }
    self.mPinInstances_property.resetOppositeRelationship = { (_ inManagedObject : SymbolPinInstanceInDevice) in
      inManagedObject.mSymbolInstance_property.setProp (nil)
    }
  //--- Register properties for handling signature
    self.mInstanceName_property.setSignatureObserver (observer: self)
    self.mX_property.setSignatureObserver (observer: self)
    self.mY_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mInstanceName_property.removeEBObserver (self.symbolQualifiedName_property)
    self.mType_property.removeEBObserverOf_mTypeName (self.symbolQualifiedName_property)
    self.mType_property.removeEBObserverOf_mTypeName (self.symbolTypeName_property)
    self.mType_property.removeEBObserverOf_mStrokeBezierPath (self.selectionDisplay_property)
    self.mType_property.removeEBObserverOf_mFilledBezierPath (self.selectionDisplay_property)
    self.symbolQualifiedName_property.removeEBObserver (self.selectionDisplay_property)
    g_Preferences?.symbolDrawingWidthMultipliedByTen_property.removeEBObserver (self.selectionDisplay_property)
    self.mX_property.removeEBObserver (self.selectionDisplay_property)
    self.mY_property.removeEBObserver (self.selectionDisplay_property)
    self.mPinInstances_property.removeEBObserverOf_pinName (self.unconnectedPins_property)
    self.mPinInstances_property.removeEBObserverOf_isConnected (self.unconnectedPins_property)
    self.mInstanceName_property.removeEBObserver (self.unconnectedPins_property)
    self.mType_property.removeEBObserverOf_mStrokeBezierPath (self.objectDisplay_property)
    self.mType_property.removeEBObserverOf_mFilledBezierPath (self.objectDisplay_property)
    self.mType_property.removeEBObserverOf_pinNameShape (self.objectDisplay_property)
    self.mPinInstances_property.removeEBObserverOf_numberShape (self.objectDisplay_property)
    self.symbolQualifiedName_property.removeEBObserver (self.objectDisplay_property)
    self.mX_property.removeEBObserver (self.objectDisplay_property)
    self.mY_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.symbolDrawingWidthMultipliedByTen_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.symbolColor_property.removeEBObserver (self.objectDisplay_property)
 //   self.mPinInstances_property.setOppositeRelationship = nil
  //--- Unregister properties for handling signature
    self.mInstanceName_property.setSignatureObserver (observer: nil)
    self.mX_property.setSignatureObserver (observer: nil)
    self.mY_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mInstanceName",
      idx:self.mInstanceName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mInstanceName_property.mObserverExplorer,
      valueExplorer:&self.mInstanceName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mX",
      idx:self.mX_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mX_property.mObserverExplorer,
      valueExplorer:&self.mX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mY",
      idx:self.mY_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mY_property.mObserverExplorer,
      valueExplorer:&self.mY_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "symbolQualifiedName",
      idx:self.symbolQualifiedName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.symbolQualifiedName_property.mObserverExplorer,
      valueExplorer:&self.symbolQualifiedName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "symbolTypeName",
      idx:self.symbolTypeName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.symbolTypeName_property.mObserverExplorer,
      valueExplorer:&self.symbolTypeName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx:self.selectionDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectionDisplay_property.mObserverExplorer,
      valueExplorer:&self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "unconnectedPins",
      idx:self.unconnectedPins_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.unconnectedPins_property.mObserverExplorer,
      valueExplorer:&self.unconnectedPins_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx:self.objectDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.objectDisplay_property.mObserverExplorer,
      valueExplorer:&self.objectDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "mPinInstances",
      idx:mPinInstances_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mPinInstances_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "mType",
      idx:self.mType_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mType_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- To many property: mPinInstances
    self.mPinInstances_property.mValueExplorer = nil
  //--- Atomic property: mInstanceName
    self.mInstanceName_property.mObserverExplorer = nil
    self.mInstanceName_property.mValueExplorer = nil
  //--- Atomic property: mX
    self.mX_property.mObserverExplorer = nil
    self.mX_property.mValueExplorer = nil
  //--- Atomic property: mY
    self.mY_property.mObserverExplorer = nil
    self.mY_property.mValueExplorer = nil
  //--- To one property: mType
    self.mType_property.mObserverExplorer = nil
    self.mType_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mPinInstances_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mType_property.setProp (nil)
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- To many property: mPinInstances
    self.store (
      managedObjectArray: self.mPinInstances_property.propval,
      relationshipName: "mPinInstances",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: mInstanceName
    self.mInstanceName_property.storeIn (dictionary: ioDictionary, forKey:"mInstanceName")
  //--- Atomic property: mX
    self.mX_property.storeIn (dictionary: ioDictionary, forKey:"mX")
  //--- Atomic property: mY
    self.mY_property.storeIn (dictionary: ioDictionary, forKey:"mY")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mPinInstances
    self.mPinInstances_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mPinInstances",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SymbolPinInstanceInDevice])
  //--- To one property: mType
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mType",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? SymbolTypeInDevice {
        self.mType_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mInstanceName
    self.mInstanceName_property.readFrom (dictionary: inDictionary, forKey:"mInstanceName")
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey:"mX")
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey:"mY")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mPinInstances
    for managedObject in self.mPinInstances_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mType
    if let managedObject = self.mType_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mPinInstances
    for managedObject in self.mPinInstances_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mType
    if let managedObject = self.mType_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.mInstanceName_property.signature ())
    crc.accumulateUInt32 (self.mX_property.signature ())
    crc.accumulateUInt32 (self.mY_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_SymbolInstanceInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_SymbolInstanceInDevice : ReadOnlyAbstractArrayProperty <SymbolInstanceInDevice> {

  //····················································································································
  //   Observers of 'mInstanceName' stored property
  //····················································································································

  private var mObserversOf_mInstanceName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mInstanceName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mInstanceName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mInstanceName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mInstanceName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mInstanceName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mInstanceName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mInstanceName_toElementsOfSet (_ inSet : Set<SymbolInstanceInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mInstanceName.apply { (_ observer : EBEvent) in
        managedObject.mInstanceName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mInstanceName_fromElementsOfSet (_ inSet : Set<SymbolInstanceInDevice>) {
    self.mObserversOf_mInstanceName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mInstanceName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mX.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mX.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mX_toElementsOfSet (_ inSet : Set<SymbolInstanceInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mX.apply { (_ observer : EBEvent) in
        managedObject.mX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX_fromElementsOfSet (_ inSet : Set<SymbolInstanceInDevice>) {
    self.mObserversOf_mX.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private var mObserversOf_mY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mY.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mY.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mY_toElementsOfSet (_ inSet : Set<SymbolInstanceInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mY.apply { (_ observer : EBEvent) in
        managedObject.mY_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mY_fromElementsOfSet (_ inSet : Set<SymbolInstanceInDevice>) {
    self.mObserversOf_mY.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'symbolQualifiedName' transient property
  //····················································································································

  private var mObserversOf_symbolQualifiedName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_symbolQualifiedName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolQualifiedName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolQualifiedName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolQualifiedName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolQualifiedName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolQualifiedName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_symbolQualifiedName_toElementsOfSet (_ inSet : Set<SymbolInstanceInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_symbolQualifiedName.apply { (_ observer : EBEvent) in
        managedObject.symbolQualifiedName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_symbolQualifiedName_fromElementsOfSet (_ inSet : Set<SymbolInstanceInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_symbolQualifiedName.apply { (_ observer : EBEvent) in
        managedObject.symbolQualifiedName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'symbolTypeName' transient property
  //····················································································································

  private var mObserversOf_symbolTypeName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_symbolTypeName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolTypeName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolTypeName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolTypeName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolTypeName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolTypeName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_symbolTypeName_toElementsOfSet (_ inSet : Set<SymbolInstanceInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_symbolTypeName.apply { (_ observer : EBEvent) in
        managedObject.symbolTypeName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_symbolTypeName_fromElementsOfSet (_ inSet : Set<SymbolInstanceInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_symbolTypeName.apply { (_ observer : EBEvent) in
        managedObject.symbolTypeName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<SymbolInstanceInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<SymbolInstanceInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'unconnectedPins' transient property
  //····················································································································

  private var mObserversOf_unconnectedPins = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_unconnectedPins (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unconnectedPins.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unconnectedPins_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_unconnectedPins (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unconnectedPins.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unconnectedPins_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_unconnectedPins_toElementsOfSet (_ inSet : Set<SymbolInstanceInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_unconnectedPins.apply { (_ observer : EBEvent) in
        managedObject.unconnectedPins_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_unconnectedPins_fromElementsOfSet (_ inSet : Set<SymbolInstanceInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_unconnectedPins.apply { (_ observer : EBEvent) in
        managedObject.unconnectedPins_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<SymbolInstanceInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<SymbolInstanceInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [SymbolInstanceInDevice] > > = nil

  //····················································································································

  override var propset : Set <SymbolInstanceInDevice> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [SymbolInstanceInDevice] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [SymbolInstanceInDevice] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  private var mSet = Set <SymbolInstanceInDevice> ()

  //····················································································································

  private var mCachedValue : EBSelection < [SymbolInstanceInDevice] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      let cachedValue = unwrappedComputeFunction ()
      self.mCachedValue = cachedValue
      let newSet : Set <SymbolInstanceInDevice>
      switch cachedValue {
      case .multiple, .empty :
        newSet = Set <SymbolInstanceInDevice> ()
      case .single (let array) :
        newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_mInstanceName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mX_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mY_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_symbolQualifiedName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_symbolTypeName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_unconnectedPins_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_mInstanceName_toElementsOfSet (addedSet)
      self.addEBObserversOf_mX_toElementsOfSet (addedSet)
      self.addEBObserversOf_mY_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_symbolQualifiedName_toElementsOfSet (addedSet)
      self.addEBObserversOf_symbolTypeName_toElementsOfSet (addedSet)
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedSet)
      self.addEBObserversOf_unconnectedPins_toElementsOfSet (addedSet)
      self.addEBObserversOf_objectDisplay_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: SymbolInstanceInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_SymbolInstanceInDevice : TransientArrayOf_SymbolInstanceInDevice {

  //····················································································································
 
  func setProp (_ value :  [SymbolInstanceInDevice]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: SymbolInstanceInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_SymbolInstanceInDevice : ReadWriteArrayOf_SymbolInstanceInDevice, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : SymbolInstanceInDevice) -> Void > = nil
  var resetOppositeRelationship : Optional < (_ inManagedObject : SymbolInstanceInDevice) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [SymbolInstanceInDevice] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "SymbolInstanceInDevice") as? SymbolInstanceInDevice {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <SymbolInstanceInDevice> ()
  private var mValue = [SymbolInstanceInDevice] () {
    didSet {
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.resetOppositeRelationship? (managedObject)
            managedObject.mInstanceName_property.mSetterDelegate = nil
            managedObject.mX_property.mSetterDelegate = nil
            managedObject.mY_property.mSetterDelegate = nil
          }
        //--- Remove observers of stored properties
          self.removeEBObserversOf_mInstanceName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mX_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mY_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of transient properties
          self.removeEBObserversOf_symbolQualifiedName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_symbolTypeName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_unconnectedPins_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedObjectSet)
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : SymbolInstanceInDevice in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
            managedObject.mInstanceName_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mX_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mY_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
        //--- Add observers of stored properties
          self.addEBObserversOf_mInstanceName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mX_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mY_toElementsOfSet (addedObjectSet)
        //--- Add observers of transient properties
          self.addEBObserversOf_symbolQualifiedName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_symbolTypeName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_unconnectedPins_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_objectDisplay_toElementsOfSet (addedObjectSet)
        }
      //--- Notify observers
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [SymbolInstanceInDevice] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [SymbolInstanceInDevice]) { self.mValue = inValue }

  //····················································································································

  override var propval : [SymbolInstanceInDevice] { return self.mValue }

  //····················································································································

  override var propset : Set <SymbolInstanceInDevice> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [SymbolInstanceInDevice]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : SymbolInstanceInDevice) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : SymbolInstanceInDevice) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: mType
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_SymbolInstanceInDevice_mType : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : SymbolInstanceInDevice? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  private var mValue : SymbolTypeInDevice? {
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.ebUndoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        oldValue?.mInstances_property.remove (unwrappedOwner)
      //--- Set new opposite relation ship
        self.mValue?.mInstances_property.add (unwrappedOwner)
      //--- Remove property observers of old object
        oldValue?.instanceCount_property.removeEBObserversFrom (&self.mObserversOf_instanceCount)
        oldValue?.mFileData_property.removeEBObserversFrom (&self.mObserversOf_mFileData)
        oldValue?.mFilledBezierPath_property.removeEBObserversFrom (&self.mObserversOf_mFilledBezierPath)
        oldValue?.mInstances_property.removeEBObserversFrom (&self.mObserversOf_mInstances)
        oldValue?.mPinTypes_property.removeEBObserversFrom (&self.mObserversOf_mPinTypes)
        oldValue?.mStrokeBezierPath_property.removeEBObserversFrom (&self.mObserversOf_mStrokeBezierPath)
        oldValue?.mTypeName_property.removeEBObserversFrom (&self.mObserversOf_mTypeName)
        oldValue?.mVersion_property.removeEBObserversFrom (&self.mObserversOf_mVersion)
        oldValue?.pinNameShape_property.removeEBObserversFrom (&self.mObserversOf_pinNameShape)
        oldValue?.versionString_property.removeEBObserversFrom (&self.mObserversOf_versionString)
      //--- Add property observers to new object
        self.mValue?.instanceCount_property.addEBObserversFrom (&self.mObserversOf_instanceCount)
        self.mValue?.mFileData_property.addEBObserversFrom (&self.mObserversOf_mFileData)
        self.mValue?.mFilledBezierPath_property.addEBObserversFrom (&self.mObserversOf_mFilledBezierPath)
        self.mValue?.mInstances_property.addEBObserversFrom (&self.mObserversOf_mInstances)
        self.mValue?.mPinTypes_property.addEBObserversFrom (&self.mObserversOf_mPinTypes)
        self.mValue?.mStrokeBezierPath_property.addEBObserversFrom (&self.mObserversOf_mStrokeBezierPath)
        self.mValue?.mTypeName_property.addEBObserversFrom (&self.mObserversOf_mTypeName)
        self.mValue?.mVersion_property.addEBObserversFrom (&self.mObserversOf_mVersion)
        self.mValue?.pinNameShape_property.addEBObserversFrom (&self.mObserversOf_pinNameShape)
        self.mValue?.versionString_property.addEBObserversFrom (&self.mObserversOf_versionString)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : SymbolTypeInDevice? { return self.mValue }

  var prop : EBSelection <SymbolTypeInDevice?> { return .single (self.mValue) }

  func setProp (_ value : SymbolTypeInDevice?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : SymbolTypeInDevice?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : SymbolTypeInDevice) {
    if self.mValue === object {
      self.mValue = nil
    }
  }

  //····················································································································
  //   Observable atomic property: instanceCount
  //····················································································································

  private var mObserversOf_instanceCount = EBWeakEventSet ()

  //····················································································································

  var instanceCount_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.instanceCount_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    self.mObserversOf_instanceCount.insert (inObserver)
    if let object = self.propval {
      object.instanceCount_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    self.mObserversOf_instanceCount.remove (inObserver)
    if let object = self.propval {
      object.instanceCount_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mFileData
  //····················································································································

  private var mObserversOf_mFileData = EBWeakEventSet ()

  //····················································································································

  var mFileData_property_selection : EBSelection <Data?> {
    if let model = self.propval {
      switch (model.mFileData_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mFileData (_ inObserver : EBEvent) {
    self.mObserversOf_mFileData.insert (inObserver)
    if let object = self.propval {
      object.mFileData_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mFileData (_ inObserver : EBEvent) {
    self.mObserversOf_mFileData.remove (inObserver)
    if let object = self.propval {
      object.mFileData_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mFilledBezierPath
  //····················································································································

  private var mObserversOf_mFilledBezierPath = EBWeakEventSet ()

  //····················································································································

  var mFilledBezierPath_property_selection : EBSelection <NSBezierPath?> {
    if let model = self.propval {
      switch (model.mFilledBezierPath_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mFilledBezierPath (_ inObserver : EBEvent) {
    self.mObserversOf_mFilledBezierPath.insert (inObserver)
    if let object = self.propval {
      object.mFilledBezierPath_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mFilledBezierPath (_ inObserver : EBEvent) {
    self.mObserversOf_mFilledBezierPath.remove (inObserver)
    if let object = self.propval {
      object.mFilledBezierPath_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mInstances
  //····················································································································

  private var mObserversOf_mInstances = EBWeakEventSet ()

  //····················································································································

  var mInstances_property_selection : EBSelection <[SymbolInstanceInDevice]> {
    if let model = self.propval {
      switch (model.mInstances_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mInstances (_ inObserver : EBEvent) {
    self.mObserversOf_mInstances.insert (inObserver)
    if let object = self.propval {
      object.mInstances_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mInstances (_ inObserver : EBEvent) {
    self.mObserversOf_mInstances.remove (inObserver)
    if let object = self.propval {
      object.mInstances_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mPinTypes
  //····················································································································

  private var mObserversOf_mPinTypes = EBWeakEventSet ()

  //····················································································································

  var mPinTypes_property_selection : EBSelection <[SymbolPinTypeInDevice]> {
    if let model = self.propval {
      switch (model.mPinTypes_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mPinTypes (_ inObserver : EBEvent) {
    self.mObserversOf_mPinTypes.insert (inObserver)
    if let object = self.propval {
      object.mPinTypes_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinTypes (_ inObserver : EBEvent) {
    self.mObserversOf_mPinTypes.remove (inObserver)
    if let object = self.propval {
      object.mPinTypes_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mStrokeBezierPath
  //····················································································································

  private var mObserversOf_mStrokeBezierPath = EBWeakEventSet ()

  //····················································································································

  var mStrokeBezierPath_property_selection : EBSelection <NSBezierPath?> {
    if let model = self.propval {
      switch (model.mStrokeBezierPath_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mStrokeBezierPath (_ inObserver : EBEvent) {
    self.mObserversOf_mStrokeBezierPath.insert (inObserver)
    if let object = self.propval {
      object.mStrokeBezierPath_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mStrokeBezierPath (_ inObserver : EBEvent) {
    self.mObserversOf_mStrokeBezierPath.remove (inObserver)
    if let object = self.propval {
      object.mStrokeBezierPath_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mTypeName
  //····················································································································

  private var mObserversOf_mTypeName = EBWeakEventSet ()

  //····················································································································

  var mTypeName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mTypeName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mTypeName (_ inObserver : EBEvent) {
    self.mObserversOf_mTypeName.insert (inObserver)
    if let object = self.propval {
      object.mTypeName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mTypeName (_ inObserver : EBEvent) {
    self.mObserversOf_mTypeName.remove (inObserver)
    if let object = self.propval {
      object.mTypeName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mVersion
  //····················································································································

  private var mObserversOf_mVersion = EBWeakEventSet ()

  //····················································································································

  var mVersion_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mVersion_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mVersion (_ inObserver : EBEvent) {
    self.mObserversOf_mVersion.insert (inObserver)
    if let object = self.propval {
      object.mVersion_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mVersion (_ inObserver : EBEvent) {
    self.mObserversOf_mVersion.remove (inObserver)
    if let object = self.propval {
      object.mVersion_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: pinNameShape
  //····················································································································

  private var mObserversOf_pinNameShape = EBWeakEventSet ()

  //····················································································································

  var pinNameShape_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.pinNameShape_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_pinNameShape (_ inObserver : EBEvent) {
    self.mObserversOf_pinNameShape.insert (inObserver)
    if let object = self.propval {
      object.pinNameShape_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_pinNameShape (_ inObserver : EBEvent) {
    self.mObserversOf_pinNameShape.remove (inObserver)
    if let object = self.propval {
      object.pinNameShape_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: versionString
  //····················································································································

  private var mObserversOf_versionString = EBWeakEventSet ()

  //····················································································································

  var versionString_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.versionString_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.mObserversOf_versionString.insert (inObserver)
    if let object = self.propval {
      object.versionString_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.mObserversOf_versionString.remove (inObserver)
    if let object = self.propval {
      object.versionString_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
