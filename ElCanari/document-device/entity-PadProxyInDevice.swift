//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PadProxyInDevice_mPadName : class {
  var mPadName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PadProxyInDevice_mIsNC : class {
  var mIsNC : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PadProxyInDevice_isConnected : class {
  var isConnected : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PadProxyInDevice_pinInstanceName : class {
  var pinInstanceName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PadProxyInDevice_symbolName : class {
  var symbolName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PadProxyInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class PadProxyInDevice : EBManagedObject,
         PadProxyInDevice_mPadName,
         PadProxyInDevice_mIsNC,
         PadProxyInDevice_isConnected,
         PadProxyInDevice_pinInstanceName,
         PadProxyInDevice_symbolName {

  //····················································································································
  //   Atomic property: mPadName
  //····················································································································

  let mPadName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mPadName : String {
    get { return self.mPadName_property.propval }
    set { self.mPadName_property.setProp (newValue) }
  }

  //····················································································································

  var mPadName_property_selection : EBSelection <String> { return self.mPadName_property.prop }

  //····················································································································
  //   Atomic property: mIsNC
  //····················································································································

  let mIsNC_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mIsNC : Bool {
    get { return self.mIsNC_property.propval }
    set { self.mIsNC_property.setProp (newValue) }
  }

  //····················································································································

  var mIsNC_property_selection : EBSelection <Bool> { return self.mIsNC_property.prop }

  //····················································································································
  //   To one property: mPinInstance
  //····················································································································

  let mPinInstance_property = ToOneRelationship_PadProxyInDevice_mPinInstance ()

  //····················································································································

  var mPinInstance_property_selection : EBSelection <SymbolPinInstanceInDevice?> {
    return .single (self.mPinInstance_property.propval)
  }

  //····················································································································

  var mPinInstance : SymbolPinInstanceInDevice? {
    get { return self.mPinInstance_property.propval }
    set { self.mPinInstance_property.setProp (newValue) }
  }

  //····················································································································

  var mPinInstance_none : ToOneRelationship_PadProxyInDevice_mPinInstance { return self.mPinInstance_property }

  //····················································································································

  var mPinInstance_none_selection : EBSelection <Bool> {
    return .single (self.mPinInstance_property.propval == nil)
  }

  //····················································································································
  //   Transient property: isConnected
  //····················································································································

  let isConnected_property = EBTransientProperty_Bool ()

  //····················································································································

  var isConnected_property_selection : EBSelection <Bool> {
    return self.isConnected_property.prop
  }

  //····················································································································

  var isConnected : Bool? {
    switch self.isConnected_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: pinInstanceName
  //····················································································································

  let pinInstanceName_property = EBTransientProperty_String ()

  //····················································································································

  var pinInstanceName_property_selection : EBSelection <String> {
    return self.pinInstanceName_property.prop
  }

  //····················································································································

  var pinInstanceName : String? {
    switch self.pinInstanceName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolName
  //····················································································································

  let symbolName_property = EBTransientProperty_String ()

  //····················································································································

  var symbolName_property_selection : EBSelection <String> {
    return self.symbolName_property.prop
  }

  //····················································································································

  var symbolName : String? {
    switch self.symbolName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mPadName
    self.mPadName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mIsNC
    self.mIsNC_property.ebUndoManager = self.ebUndoManager
  //--- To one property: mPinInstance
    self.mPinInstance_property.owner = self
  //--- Atomic property: isConnected
    self.isConnected_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mIsNC_property_selection.kind ()
        kind &= unwSelf.mPinInstance_none_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mIsNC_property_selection, unwSelf.mPinInstance_none_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_PadProxyInDevice_isConnected (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mIsNC_property.addEBObserver (self.isConnected_property)
    self.mPinInstance_property.addEBObserver (self.isConnected_property)
  //--- Atomic property: pinInstanceName
    self.pinInstanceName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mPinInstance_property.pinName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mPinInstance_property.pinName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PadProxyInDevice_pinInstanceName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPinInstance_property.addEBObserverOf_pinName (self.pinInstanceName_property)
  //--- Atomic property: symbolName
    self.symbolName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mPinInstance_property.symbolName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mPinInstance_property.symbolName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PadProxyInDevice_symbolName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPinInstance_property.addEBObserverOf_symbolName (self.symbolName_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.mIsNC_property.setSignatureObserver (observer: self)
    self.mPadName_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mIsNC_property.removeEBObserver (self.isConnected_property)
    self.mPinInstance_property.removeEBObserver (self.isConnected_property)
    self.mPinInstance_property.removeEBObserverOf_pinName (self.pinInstanceName_property)
    self.mPinInstance_property.removeEBObserverOf_symbolName (self.symbolName_property)
  //--- Unregister properties for handling signature
    self.mIsNC_property.setSignatureObserver (observer: nil)
    self.mPadName_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mPadName",
      idx:self.mPadName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mPadName_property.mObserverExplorer,
      valueExplorer:&self.mPadName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mIsNC",
      idx:self.mIsNC_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mIsNC_property.mObserverExplorer,
      valueExplorer:&self.mIsNC_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "isConnected",
      idx:self.isConnected_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.isConnected_property.mObserverExplorer,
      valueExplorer:&self.isConnected_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "pinInstanceName",
      idx:self.pinInstanceName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.pinInstanceName_property.mObserverExplorer,
      valueExplorer:&self.pinInstanceName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "symbolName",
      idx:self.symbolName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.symbolName_property.mObserverExplorer,
      valueExplorer:&self.symbolName_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "mPinInstance",
      idx:self.mPinInstance_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mPinInstance_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mPadName
    self.mPadName_property.mObserverExplorer = nil
    self.mPadName_property.mValueExplorer = nil
  //--- Atomic property: mIsNC
    self.mIsNC_property.mObserverExplorer = nil
    self.mIsNC_property.mValueExplorer = nil
  //--- To one property: mPinInstance
    self.mPinInstance_property.mObserverExplorer = nil
    self.mPinInstance_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mPinInstance_property.setProp (nil)
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mPadName
    self.mPadName_property.storeIn (dictionary: ioDictionary, forKey:"mPadName")
  //--- Atomic property: mIsNC
    self.mIsNC_property.storeIn (dictionary: ioDictionary, forKey:"mIsNC")
  //--- To one property: mPinInstance // Opposite is toOne mPadProxy
    self.store (managedObject:self.mPinInstance_property.propval,
      relationshipName: "mPinInstance",
      intoDictionary: ioDictionary)
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To one property: mPinInstance
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mPinInstance",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? SymbolPinInstanceInDevice {
        self.mPinInstance_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mPadName
    self.mPadName_property.readFrom (dictionary: inDictionary, forKey:"mPadName")
  //--- Atomic property: mIsNC
    self.mIsNC_property.readFrom (dictionary: inDictionary, forKey:"mIsNC")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To one property: mPinInstance
    if let managedObject = self.mPinInstance_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To one property: mPinInstance
    if let managedObject = self.mPinInstance_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.mIsNC_property.signature ())
    crc.accumulateUInt32 (self.mPadName_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PadProxyInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PadProxyInDevice : ReadOnlyAbstractArrayProperty <PadProxyInDevice> {

  //····················································································································
  //   Observers of 'mPadName' stored property
  //····················································································································

  private var mObserversOf_mPadName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPadName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPadName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPadName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPadName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPadName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPadName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPadName_toElementsOfSet (_ inSet : Set<PadProxyInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mPadName.apply { (_ observer : EBEvent) in
        managedObject.mPadName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPadName_fromElementsOfSet (_ inSet : Set<PadProxyInDevice>) {
    self.mObserversOf_mPadName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPadName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mIsNC' stored property
  //····················································································································

  private var mObserversOf_mIsNC = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mIsNC (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mIsNC.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mIsNC_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mIsNC (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mIsNC.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mIsNC_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mIsNC_toElementsOfSet (_ inSet : Set<PadProxyInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mIsNC.apply { (_ observer : EBEvent) in
        managedObject.mIsNC_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mIsNC_fromElementsOfSet (_ inSet : Set<PadProxyInDevice>) {
    self.mObserversOf_mIsNC.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mIsNC_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'isConnected' transient property
  //····················································································································

  private var mObserversOf_isConnected = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_isConnected (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_isConnected.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isConnected_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_isConnected (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_isConnected.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.isConnected_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_isConnected_toElementsOfSet (_ inSet : Set<PadProxyInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_isConnected.apply { (_ observer : EBEvent) in
        managedObject.isConnected_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_isConnected_fromElementsOfSet (_ inSet : Set<PadProxyInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_isConnected.apply { (_ observer : EBEvent) in
        managedObject.isConnected_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'pinInstanceName' transient property
  //····················································································································

  private var mObserversOf_pinInstanceName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_pinInstanceName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_pinInstanceName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinInstanceName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_pinInstanceName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_pinInstanceName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinInstanceName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_pinInstanceName_toElementsOfSet (_ inSet : Set<PadProxyInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_pinInstanceName.apply { (_ observer : EBEvent) in
        managedObject.pinInstanceName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_pinInstanceName_fromElementsOfSet (_ inSet : Set<PadProxyInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_pinInstanceName.apply { (_ observer : EBEvent) in
        managedObject.pinInstanceName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'symbolName' transient property
  //····················································································································

  private var mObserversOf_symbolName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_symbolName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_symbolName_toElementsOfSet (_ inSet : Set<PadProxyInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_symbolName.apply { (_ observer : EBEvent) in
        managedObject.symbolName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_symbolName_fromElementsOfSet (_ inSet : Set<PadProxyInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_symbolName.apply { (_ observer : EBEvent) in
        managedObject.symbolName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_PadProxyInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_PadProxyInDevice : ReadOnlyArrayOf_PadProxyInDevice {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [PadProxyInDevice] > > = nil

  //····················································································································

  override var propset : Set <PadProxyInDevice> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [PadProxyInDevice] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [PadProxyInDevice] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  private var mSet = Set <PadProxyInDevice> ()

  //····················································································································

  private var mCachedValue : EBSelection < [PadProxyInDevice] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      let cachedValue = unwrappedComputeFunction ()
      self.mCachedValue = cachedValue
      let newSet : Set <PadProxyInDevice>
      switch cachedValue {
      case .multiple, .empty :
        newSet = Set <PadProxyInDevice> ()
      case .single (let array) :
        newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_mPadName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mIsNC_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_isConnected_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_pinInstanceName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_symbolName_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_mPadName_toElementsOfSet (addedSet)
      self.addEBObserversOf_mIsNC_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_isConnected_toElementsOfSet (addedSet)
      self.addEBObserversOf_pinInstanceName_toElementsOfSet (addedSet)
      self.addEBObserversOf_symbolName_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PadProxyInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PadProxyInDevice : ReadOnlyArrayOf_PadProxyInDevice {

  //····················································································································
 
  func setProp (_ value :  [PadProxyInDevice]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PadProxyInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_PadProxyInDevice : ReadWriteArrayOf_PadProxyInDevice {

  //····················································································································

  private var mModel : ReadWriteArrayOf_PadProxyInDevice? = nil

  //····················································································································

  func bind (_ inModel : ReadWriteArrayOf_PadProxyInDevice) {
    self.unbind ()
    self.mModel = inModel
    inModel.addEBObserver (self)
  }

  //····················································································································

  func unbind () {
    if let model = self.mModel {
      model.removeEBObserver (self)
      self.mModel = nil
    }
  }

  //····················································································································

  override func setProp (_ inArrayValue :  [PadProxyInDevice]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [PadProxyInDevice] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: PadProxyInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_PadProxyInDevice : ReadWriteArrayOf_PadProxyInDevice, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : PadProxyInDevice) -> Void > = nil
  var resetOppositeRelationship : Optional < (_ inManagedObject : PadProxyInDevice) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [PadProxyInDevice] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "PadProxyInDevice") as? PadProxyInDevice {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <PadProxyInDevice> ()
  private var mValue = [PadProxyInDevice] () {
    didSet {
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.resetOppositeRelationship? (managedObject)
            managedObject.mPadName_property.mSetterDelegate = nil
            managedObject.mIsNC_property.mSetterDelegate = nil
          }
        //--- Remove observers of stored properties
          self.removeEBObserversOf_mPadName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mIsNC_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of transient properties
          self.removeEBObserversOf_isConnected_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_pinInstanceName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_symbolName_fromElementsOfSet (removedObjectSet)
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : PadProxyInDevice in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
            managedObject.mPadName_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mIsNC_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
        //--- Add observers of stored properties
          self.addEBObserversOf_mPadName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mIsNC_toElementsOfSet (addedObjectSet)
        //--- Add observers of transient properties
          self.addEBObserversOf_isConnected_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_pinInstanceName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_symbolName_toElementsOfSet (addedObjectSet)
        }
      //--- Notify observers
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [PadProxyInDevice] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [PadProxyInDevice]) { self.mValue = inValue }

  //····················································································································

  override var propval : [PadProxyInDevice] { return self.mValue }

  //····················································································································

  override var propset : Set <PadProxyInDevice> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [PadProxyInDevice]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : PadProxyInDevice) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : PadProxyInDevice) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: mPinInstance
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_PadProxyInDevice_mPinInstance : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : PadProxyInDevice? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  private var mValue : SymbolPinInstanceInDevice? {
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.ebUndoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
     //--- Reset old opposite relation ship
        oldValue?.mPadProxy_property.setProp (nil)
      //--- Set new opposite relation ship
        self.mValue?.mPadProxy_property.setProp (unwrappedOwner)
      //--- Remove property observers of old object
        oldValue?.isConnected_property.removeEBObserversFrom (&self.mObserversOf_isConnected)
        oldValue?.numberShape_property.removeEBObserversFrom (&self.mObserversOf_numberShape)
        oldValue?.pinName_property.removeEBObserversFrom (&self.mObserversOf_pinName)
        oldValue?.pinQualifiedName_property.removeEBObserversFrom (&self.mObserversOf_pinQualifiedName)
        oldValue?.symbolName_property.removeEBObserversFrom (&self.mObserversOf_symbolName)
      //--- Add property observers to new object
        self.mValue?.isConnected_property.addEBObserversFrom (&self.mObserversOf_isConnected)
        self.mValue?.numberShape_property.addEBObserversFrom (&self.mObserversOf_numberShape)
        self.mValue?.pinName_property.addEBObserversFrom (&self.mObserversOf_pinName)
        self.mValue?.pinQualifiedName_property.addEBObserversFrom (&self.mObserversOf_pinQualifiedName)
        self.mValue?.symbolName_property.addEBObserversFrom (&self.mObserversOf_symbolName)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : SymbolPinInstanceInDevice? { return self.mValue }

  var prop : EBSelection <SymbolPinInstanceInDevice?> { return .single (self.mValue) }

  func setProp (_ value : SymbolPinInstanceInDevice?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : SymbolPinInstanceInDevice?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : SymbolPinInstanceInDevice) {
    if self.mValue === object {
      self.mValue = nil
    }
  }

  //····················································································································
  //   Observable atomic property: isConnected
  //····················································································································

  private var mObserversOf_isConnected = EBWeakEventSet ()

  //····················································································································

  var isConnected_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.isConnected_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_isConnected (_ inObserver : EBEvent) {
    self.mObserversOf_isConnected.insert (inObserver)
    if let object = self.propval {
      object.isConnected_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_isConnected (_ inObserver : EBEvent) {
    self.mObserversOf_isConnected.remove (inObserver)
    if let object = self.propval {
      object.isConnected_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: numberShape
  //····················································································································

  private var mObserversOf_numberShape = EBWeakEventSet ()

  //····················································································································

  var numberShape_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.numberShape_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_numberShape (_ inObserver : EBEvent) {
    self.mObserversOf_numberShape.insert (inObserver)
    if let object = self.propval {
      object.numberShape_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_numberShape (_ inObserver : EBEvent) {
    self.mObserversOf_numberShape.remove (inObserver)
    if let object = self.propval {
      object.numberShape_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: pinName
  //····················································································································

  private var mObserversOf_pinName = EBWeakEventSet ()

  //····················································································································

  var pinName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.pinName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_pinName (_ inObserver : EBEvent) {
    self.mObserversOf_pinName.insert (inObserver)
    if let object = self.propval {
      object.pinName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_pinName (_ inObserver : EBEvent) {
    self.mObserversOf_pinName.remove (inObserver)
    if let object = self.propval {
      object.pinName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: pinQualifiedName
  //····················································································································

  private var mObserversOf_pinQualifiedName = EBWeakEventSet ()

  //····················································································································

  var pinQualifiedName_property_selection : EBSelection <PinQualifiedNameStruct?> {
    if let model = self.propval {
      switch (model.pinQualifiedName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_pinQualifiedName (_ inObserver : EBEvent) {
    self.mObserversOf_pinQualifiedName.insert (inObserver)
    if let object = self.propval {
      object.pinQualifiedName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_pinQualifiedName (_ inObserver : EBEvent) {
    self.mObserversOf_pinQualifiedName.remove (inObserver)
    if let object = self.propval {
      object.pinQualifiedName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: symbolName
  //····················································································································

  private var mObserversOf_symbolName = EBWeakEventSet ()

  //····················································································································

  var symbolName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.symbolName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_symbolName (_ inObserver : EBEvent) {
    self.mObserversOf_symbolName.insert (inObserver)
    if let object = self.propval {
      object.symbolName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolName (_ inObserver : EBEvent) {
    self.mObserversOf_symbolName.remove (inObserver)
    if let object = self.propval {
      object.symbolName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
