//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_SymbolPinTypeInDevice 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_SymbolPinTypeInDevice : ReadOnlyAbstractObjectProperty <SymbolPinTypeInDevice> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : SymbolPinTypeInDevice?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.mPinX_property.removeEBObserversFrom (&self.mObserversOf_mPinX) // Stored property
      oldValue.mPinY_property.removeEBObserversFrom (&self.mObserversOf_mPinY) // Stored property
      oldValue.mXName_property.removeEBObserversFrom (&self.mObserversOf_mXName) // Stored property
      oldValue.mYName_property.removeEBObserversFrom (&self.mObserversOf_mYName) // Stored property
      oldValue.mName_property.removeEBObserversFrom (&self.mObserversOf_mName) // Stored property
      oldValue.mNameHorizontalAlignment_property.removeEBObserversFrom (&self.mObserversOf_mNameHorizontalAlignment) // Stored property
      oldValue.mPinNameIsDisplayedInSchematics_property.removeEBObserversFrom (&self.mObserversOf_mPinNameIsDisplayedInSchematics) // Stored property
      oldValue.mXNumber_property.removeEBObserversFrom (&self.mObserversOf_mXNumber) // Stored property
      oldValue.mYNumber_property.removeEBObserversFrom (&self.mObserversOf_mYNumber) // Stored property
      oldValue.mNumberHorizontalAlignment_property.removeEBObserversFrom (&self.mObserversOf_mNumberHorizontalAlignment) // Stored property
      oldValue.nameShape_property.removeEBObserversFrom (&self.mObserversOf_nameShape) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
      newValue.mPinX_property.addEBObserversFrom (&self.mObserversOf_mPinX) // Stored property
      newValue.mPinY_property.addEBObserversFrom (&self.mObserversOf_mPinY) // Stored property
      newValue.mXName_property.addEBObserversFrom (&self.mObserversOf_mXName) // Stored property
      newValue.mYName_property.addEBObserversFrom (&self.mObserversOf_mYName) // Stored property
      newValue.mName_property.addEBObserversFrom (&self.mObserversOf_mName) // Stored property
      newValue.mNameHorizontalAlignment_property.addEBObserversFrom (&self.mObserversOf_mNameHorizontalAlignment) // Stored property
      newValue.mPinNameIsDisplayedInSchematics_property.addEBObserversFrom (&self.mObserversOf_mPinNameIsDisplayedInSchematics) // Stored property
      newValue.mXNumber_property.addEBObserversFrom (&self.mObserversOf_mXNumber) // Stored property
      newValue.mYNumber_property.addEBObserversFrom (&self.mObserversOf_mYNumber) // Stored property
      newValue.mNumberHorizontalAlignment_property.addEBObserversFrom (&self.mObserversOf_mNumberHorizontalAlignment) // Stored property
      newValue.nameShape_property.addEBObserversFrom (&self.mObserversOf_nameShape) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'mPinX' stored property
  //····················································································································

//  private final var mPinX_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_mPinX = EBWeakEventSet ()

  //····················································································································

  final var mPinX_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mPinX_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPinX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPinX.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mPinX_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPinX.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mPinX_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'mPinY' stored property
  //····················································································································

//  private final var mPinY_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_mPinY = EBWeakEventSet ()

  //····················································································································

  final var mPinY_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mPinY_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPinY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPinY.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mPinY_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPinY.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mPinY_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'mXName' stored property
  //····················································································································

//  private final var mXName_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_mXName = EBWeakEventSet ()

  //····················································································································

  final var mXName_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mXName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mXName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mXName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mXName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mXName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mXName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mXName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'mYName' stored property
  //····················································································································

//  private final var mYName_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_mYName = EBWeakEventSet ()

  //····················································································································

  final var mYName_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mYName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mYName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mYName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mYName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mYName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mYName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mYName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'mName' stored property
  //····················································································································

//  private final var mName_property = EBGenericPropertyProxy <String?> ()
  private final var mObserversOf_mName = EBWeakEventSet ()

  //····················································································································

  final var mName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'mNameHorizontalAlignment' stored property
  //····················································································································

//  private final var mNameHorizontalAlignment_property = EBGenericPropertyProxy <HorizontalAlignment?> ()
  private final var mObserversOf_mNameHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  final var mNameHorizontalAlignment_property_selection : EBSelection <HorizontalAlignment?> {
    if let model = self.propval {
      switch (model.mNameHorizontalAlignment_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mNameHorizontalAlignment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNameHorizontalAlignment.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mNameHorizontalAlignment_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNameHorizontalAlignment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNameHorizontalAlignment.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mNameHorizontalAlignment_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'mPinNameIsDisplayedInSchematics' stored property
  //····················································································································

//  private final var mPinNameIsDisplayedInSchematics_property = EBGenericPropertyProxy <Bool?> ()
  private final var mObserversOf_mPinNameIsDisplayedInSchematics = EBWeakEventSet ()

  //····················································································································

  final var mPinNameIsDisplayedInSchematics_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mPinNameIsDisplayedInSchematics_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPinNameIsDisplayedInSchematics (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPinNameIsDisplayedInSchematics.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mPinNameIsDisplayedInSchematics_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPinNameIsDisplayedInSchematics (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPinNameIsDisplayedInSchematics.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mPinNameIsDisplayedInSchematics_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'mXNumber' stored property
  //····················································································································

//  private final var mXNumber_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_mXNumber = EBWeakEventSet ()

  //····················································································································

  final var mXNumber_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mXNumber_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mXNumber (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mXNumber.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mXNumber_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mXNumber (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mXNumber.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mXNumber_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'mYNumber' stored property
  //····················································································································

//  private final var mYNumber_property = EBGenericPropertyProxy <Int?> ()
  private final var mObserversOf_mYNumber = EBWeakEventSet ()

  //····················································································································

  final var mYNumber_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mYNumber_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mYNumber (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mYNumber.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mYNumber_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mYNumber (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mYNumber.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mYNumber_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'mNumberHorizontalAlignment' stored property
  //····················································································································

//  private final var mNumberHorizontalAlignment_property = EBGenericPropertyProxy <HorizontalAlignment?> ()
  private final var mObserversOf_mNumberHorizontalAlignment = EBWeakEventSet ()

  //····················································································································

  final var mNumberHorizontalAlignment_property_selection : EBSelection <HorizontalAlignment?> {
    if let model = self.propval {
      switch (model.mNumberHorizontalAlignment_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mNumberHorizontalAlignment (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mNumberHorizontalAlignment.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.mNumberHorizontalAlignment_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mNumberHorizontalAlignment (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mNumberHorizontalAlignment.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.mNumberHorizontalAlignment_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'nameShape' transient property
  //····················································································································

  private final var mObserversOf_nameShape = EBWeakEventSet ()

  //····················································································································

  final var nameShape_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.nameShape_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_nameShape (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_nameShape.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.nameShape_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_nameShape (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_nameShape.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.nameShape_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mInstances
  //····················································································································

  private final var mObserversOf_mInstances = EBWeakEventSet ()

  //····················································································································

  final var mInstances_property_selection : EBSelection <[SymbolPinInstanceInDevice]> {
    if let model = self.propval {
      switch (model.mInstances_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mInstances (_ inObserver : EBEvent) {
    self.mObserversOf_mInstances.insert (inObserver)
    if let object = self.propval {
      object.mInstances_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mInstances (_ inObserver : EBEvent) {
    self.mObserversOf_mInstances.remove (inObserver)
    if let object = self.propval {
      object.mInstances_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT 
  //····················································································································

 // override init () {
//    super.init ()
  //--- Configure mPinX simple stored property
 /*   self.mPinX_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mPinX_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mPinX_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mPinX_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mPinX_property) */
  //--- Configure mPinY simple stored property
 /*   self.mPinY_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mPinY_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mPinY_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mPinY_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mPinY_property) */
  //--- Configure mXName simple stored property
 /*   self.mXName_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mXName_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mXName_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mXName_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mXName_property) */
  //--- Configure mYName simple stored property
 /*   self.mYName_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mYName_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mYName_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mYName_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mYName_property) */
  //--- Configure mName simple stored property
 /*   self.mName_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mName_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mName_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mName_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mName_property) */
  //--- Configure mNameHorizontalAlignment simple stored property
 /*   self.mNameHorizontalAlignment_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mNameHorizontalAlignment_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mNameHorizontalAlignment_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mNameHorizontalAlignment_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mNameHorizontalAlignment_property) */
  //--- Configure mPinNameIsDisplayedInSchematics simple stored property
 /*   self.mPinNameIsDisplayedInSchematics_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mPinNameIsDisplayedInSchematics_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mPinNameIsDisplayedInSchematics_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mPinNameIsDisplayedInSchematics_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mPinNameIsDisplayedInSchematics_property) */
  //--- Configure mXNumber simple stored property
 /*   self.mXNumber_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mXNumber_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mXNumber_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mXNumber_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mXNumber_property) */
  //--- Configure mYNumber simple stored property
 /*   self.mYNumber_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mYNumber_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mYNumber_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mYNumber_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mYNumber_property) */
  //--- Configure mNumberHorizontalAlignment simple stored property
 /*   self.mNumberHorizontalAlignment_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.mNumberHorizontalAlignment_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.mNumberHorizontalAlignment_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.mNumberHorizontalAlignment_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.mNumberHorizontalAlignment_property) */
 // }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject SymbolPinTypeInDevice
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_SymbolPinTypeInDevice : ReadOnlyObject_SymbolPinTypeInDevice {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_SymbolPinTypeInDevice? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_SymbolPinTypeInDevice?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : SymbolPinTypeInDevice? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < SymbolPinTypeInDevice? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : SymbolPinTypeInDevice? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_SymbolPinTypeInDevice
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_SymbolPinTypeInDevice : ReadOnlyObject_SymbolPinTypeInDevice {

  //····················································································································
 
  func setProp (_ inValue : SymbolPinTypeInDevice?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_SymbolPinTypeInDevice
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_SymbolPinTypeInDevice : ReadWriteObject_SymbolPinTypeInDevice {

  //····················································································································

  private var mModel : ReadWriteObject_SymbolPinTypeInDevice? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_SymbolPinTypeInDevice?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : SymbolPinTypeInDevice?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : SymbolPinTypeInDevice?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < SymbolPinTypeInDevice? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : SymbolPinTypeInDevice? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_SymbolPinTypeInDevice 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_SymbolPinTypeInDevice : ReadWriteObject_SymbolPinTypeInDevice, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : SymbolPinTypeInDevice) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : SymbolPinTypeInDevice) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : SymbolPinTypeInDevice) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : SymbolPinTypeInDevice) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : SymbolPinTypeInDevice?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < SymbolPinTypeInDevice? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : SymbolPinTypeInDevice?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : SymbolPinTypeInDevice? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

