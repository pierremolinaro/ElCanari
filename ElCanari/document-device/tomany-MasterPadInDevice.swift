//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_MasterPadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_MasterPadInDevice : ReadOnlyAbstractArrayProperty <MasterPadInDevice> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <MasterPadInDevice>, addedSet inAddedSet : Set <MasterPadInDevice>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_mCenterX_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mCenterY_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mWidth_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mHeight_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mHoleWidth_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mHoleHeight_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mShape_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mStyle_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_padNumberDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_frontSideFilledBezierPathArray_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_backSideFilledBezierPathArray_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_mCenterX_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mCenterY_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mWidth_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mHeight_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mHoleWidth_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mHoleHeight_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mShape_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mStyle_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_padNumberDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_frontSideFilledBezierPathArray_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_backSideFilledBezierPathArray_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'mCenterX' stored property
  //····················································································································

  private var mObserversOf_mCenterX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mCenterX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCenterX.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCenterX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCenterX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCenterX.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCenterX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mCenterX_toElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mCenterX.apply { (_ observer : EBEvent) in
        managedObject.mCenterX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCenterX_fromElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    self.mObserversOf_mCenterX.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mCenterX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mCenterY' stored property
  //····················································································································

  private var mObserversOf_mCenterY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mCenterY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mCenterY.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCenterY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mCenterY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mCenterY.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mCenterY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mCenterY_toElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mCenterY.apply { (_ observer : EBEvent) in
        managedObject.mCenterY_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mCenterY_fromElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    self.mObserversOf_mCenterY.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mCenterY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mWidth' stored property
  //····················································································································

  private var mObserversOf_mWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mWidth_toElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mWidth.apply { (_ observer : EBEvent) in
        managedObject.mWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mWidth_fromElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    self.mObserversOf_mWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mHeight' stored property
  //····················································································································

  private var mObserversOf_mHeight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mHeight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mHeight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mHeight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mHeight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mHeight_toElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mHeight.apply { (_ observer : EBEvent) in
        managedObject.mHeight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mHeight_fromElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    self.mObserversOf_mHeight.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mHeight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mHoleWidth' stored property
  //····················································································································

  private var mObserversOf_mHoleWidth = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mHoleWidth (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mHoleWidth.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mHoleWidth_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mHoleWidth (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mHoleWidth.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mHoleWidth_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mHoleWidth_toElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mHoleWidth.apply { (_ observer : EBEvent) in
        managedObject.mHoleWidth_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mHoleWidth_fromElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    self.mObserversOf_mHoleWidth.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mHoleWidth_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mHoleHeight' stored property
  //····················································································································

  private var mObserversOf_mHoleHeight = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mHoleHeight (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mHoleHeight.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mHoleHeight_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mHoleHeight (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mHoleHeight.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mHoleHeight_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mHoleHeight_toElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mHoleHeight.apply { (_ observer : EBEvent) in
        managedObject.mHoleHeight_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mHoleHeight_fromElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    self.mObserversOf_mHoleHeight.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mHoleHeight_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mShape' stored property
  //····················································································································

  private var mObserversOf_mShape = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mShape (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mShape.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShape_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShape (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mShape.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShape_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mShape_toElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mShape.apply { (_ observer : EBEvent) in
        managedObject.mShape_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mShape_fromElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    self.mObserversOf_mShape.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mShape_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mStyle' stored property
  //····················································································································

  private var mObserversOf_mStyle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mStyle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mStyle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mStyle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mStyle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mStyle_toElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mStyle.apply { (_ observer : EBEvent) in
        managedObject.mStyle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mStyle_fromElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    self.mObserversOf_mStyle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mName' stored property
  //····················································································································

  private var mObserversOf_mName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mName_toElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mName.apply { (_ observer : EBEvent) in
        managedObject.mName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mName_fromElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    self.mObserversOf_mName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padNumberDisplay' transient property
  //····················································································································

  private var mObserversOf_padNumberDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumberDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumberDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padNumberDisplay_toElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_padNumberDisplay.apply { (_ observer : EBEvent) in
        managedObject.padNumberDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNumberDisplay_fromElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_padNumberDisplay.apply { (_ observer : EBEvent) in
        managedObject.padNumberDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontSideFilledBezierPathArray' transient property
  //····················································································································

  private var mObserversOf_frontSideFilledBezierPathArray = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontSideFilledBezierPathArray (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_frontSideFilledBezierPathArray.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontSideFilledBezierPathArray_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontSideFilledBezierPathArray (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_frontSideFilledBezierPathArray.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontSideFilledBezierPathArray_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontSideFilledBezierPathArray_toElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_frontSideFilledBezierPathArray.apply { (_ observer : EBEvent) in
        managedObject.frontSideFilledBezierPathArray_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontSideFilledBezierPathArray_fromElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_frontSideFilledBezierPathArray.apply { (_ observer : EBEvent) in
        managedObject.frontSideFilledBezierPathArray_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backSideFilledBezierPathArray' transient property
  //····················································································································

  private var mObserversOf_backSideFilledBezierPathArray = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backSideFilledBezierPathArray (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backSideFilledBezierPathArray.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backSideFilledBezierPathArray_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backSideFilledBezierPathArray (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backSideFilledBezierPathArray.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backSideFilledBezierPathArray_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backSideFilledBezierPathArray_toElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_backSideFilledBezierPathArray.apply { (_ observer : EBEvent) in
        managedObject.backSideFilledBezierPathArray_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backSideFilledBezierPathArray_fromElementsOfSet (_ inSet : Set<MasterPadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_backSideFilledBezierPathArray.apply { (_ observer : EBEvent) in
        managedObject.backSideFilledBezierPathArray_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf MasterPadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_MasterPadInDevice : ReadOnlyArrayOf_MasterPadInDevice {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : MasterPadInDevice, _ right : MasterPadInDevice) -> Bool > = nil 
  private var mSortObserver : EBModelNotifierEvent? = nil

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_MasterPadInDevice? = nil
  private var mTransientKind : PropertyKind = .empty

 
  func setDataProvider (_ inProvider : ReadOnlyArrayOf_MasterPadInDevice,
                        sortCallback inSortCallBack : Optional < (_ left : MasterPadInDevice, _ right : MasterPadInDevice) -> Bool >,
                        addSortObserversCallback inAddSortObserversCallback : (EBModelNotifierEvent) -> Void,
                        removeSortObserversCallback inRemoveSortObserversCallback : @escaping (EBModelNotifierEvent) -> Void) {
    if self.mDataProvider !== inProvider {
      self.mSortObserver?.removeSortObservers ()
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mIsOrderedBefore = inSortCallBack
      self.mDataProvider?.attachClient (self)
      if inSortCallBack != nil {
        self.mSortObserver = EBModelNotifierEvent (
          self,
          addSortObserversCallback: inAddSortObserversCallback,
          removeSortObserversCallback: inRemoveSortObserversCallback
        )
      }else{
        self.mInternalArrayValue = []
      }
    }
  }

  //····················································································································

  func resetDataProvider () {
    if self.mDataProvider != nil {
      self.mSortObserver = nil
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = nil
      self.mIsOrderedBefore = nil
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newArray : [MasterPadInDevice] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        if let sortFunction = self.mIsOrderedBefore {
          newArray = v.sorted { sortFunction ($0, $1) }
        }else{
          newArray = v
        }
        self.mTransientKind = .single
       case .multiple :
        newArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newArray = []
      self.mTransientKind = .empty
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [MasterPadInDevice] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [MasterPadInDevice] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf MasterPadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_MasterPadInDevice <SUPER : EBManagedObject> : ReadOnlyArrayOf_MasterPadInDevice {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    var newModelArray : [SUPER] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newModelArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newModelArray = v
        self.mTransientKind = .single
       case .multiple :
        newModelArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newModelArray = []
      self.mTransientKind = .empty
    }
    var newArray = [MasterPadInDevice] ()
    for superObject in newModelArray {
      if let object = superObject as? MasterPadInDevice {
        newArray.append (object)
      }
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [MasterPadInDevice] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [MasterPadInDevice] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: MasterPadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_MasterPadInDevice : ReadOnlyArrayOf_MasterPadInDevice {

  //····················································································································
 
  func setProp (_ value :  [MasterPadInDevice]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_MasterPadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_MasterPadInDevice : ReadWriteArrayOf_MasterPadInDevice {

  //····················································································································

  private var mModel : ReadWriteArrayOf_MasterPadInDevice? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_MasterPadInDevice?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [MasterPadInDevice]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [MasterPadInDevice]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [MasterPadInDevice] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : [MasterPadInDevice] {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stored Array: MasterPadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StoredArrayOf_MasterPadInDevice : ReadWriteArrayOf_MasterPadInDevice, EBSignatureObserverProtocol {

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : MasterPadInDevice) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : MasterPadInDevice) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : MasterPadInDevice) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : MasterPadInDevice) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [MasterPadInDevice]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [MasterPadInDevice]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <MasterPadInDevice>, addedSet inAddedSet : Set <MasterPadInDevice>) {
    for managedObject in inRemovedSet {
      managedObject.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (managedObject)
   }
  //---
    for managedObject in inAddedSet {
      managedObject.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }
 
  //····················································································································

  override var prop : EBSelection < [MasterPadInDevice] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [MasterPadInDevice]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [MasterPadInDevice] { return self.mInternalArrayValue }

  //····················································································································

  func remove (_ object : MasterPadInDevice) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : MasterPadInDevice) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = observer
    observer?.clearSignatureCache ()
    self.clearSignatureCache ()
 }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Stand alone Array: MasterPadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class StandAloneArrayOf_MasterPadInDevice : ReadWriteArrayOf_MasterPadInDevice {

  //····················································································································

  override var prop : EBSelection < [MasterPadInDevice] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [MasterPadInDevice]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [MasterPadInDevice] { return self.mInternalArrayValue }

  //····················································································································

  override func notifyModelDidChange () {
    self.postEvent ()
    super.notifyModelDidChange ()
  }

  //····················································································································

  func remove (_ object : MasterPadInDevice) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : MasterPadInDevice) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Preferences array: MasterPadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class PreferencesArrayOf_MasterPadInDevice : StoredArrayOf_MasterPadInDevice {

  //····················································································································

  private let mPrefKey : String
  private let mObserverForWritingPreferences = EBOutletEvent ()
  
  //····················································································································

  init (prefKey : String) {
    self.mPrefKey = prefKey
    super.init ()
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [MasterPadInDevice] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "MasterPadInDevice") as? MasterPadInDevice {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
    self.addEBObserverOf_mCenterX (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mCenterY (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mWidth (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mHeight (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mHoleWidth (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mHoleHeight (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mShape (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mStyle (self.mObserverForWritingPreferences)
    self.addEBObserverOf_mName (self.mObserverForWritingPreferences)
    self.mObserverForWritingPreferences.mEventCallBack = { self.writeInPreferences () }
 }

  //····················································································································
 
  private func writeInPreferences () {
    var dictionaryArray = [NSDictionary] ()
    for object in self.mInternalArrayValue {
      let d = NSMutableDictionary ()
      object.saveIntoDictionary (d)
      d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
      dictionaryArray.append (d)
    }
    UserDefaults.standard.set (dictionaryArray, forKey: self.mPrefKey)
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

