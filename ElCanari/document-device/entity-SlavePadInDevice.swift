//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SlavePadInDevice_xCenter : class {
  var xCenter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SlavePadInDevice_yCenter : class {
  var yCenter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SlavePadInDevice_width : class {
  var width : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SlavePadInDevice_height : class {
  var height : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SlavePadInDevice_holeDiameter : class {
  var holeDiameter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SlavePadInDevice_padShape : class {
  var padShape : PadShape { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SlavePadInDevice_padStyle : class {
  var padStyle : SlavePadStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SlavePadInDevice_frontSideFilledBezierPath : class {
  var frontSideFilledBezierPath : NSBezierPath? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SlavePadInDevice_backSideFilledBezierPath : class {
  var backSideFilledBezierPath : NSBezierPath? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SlavePadInDevice_padNumberDisplay : class {
  var padNumberDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: SlavePadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class SlavePadInDevice : EBManagedObject,
         SlavePadInDevice_xCenter,
         SlavePadInDevice_yCenter,
         SlavePadInDevice_width,
         SlavePadInDevice_height,
         SlavePadInDevice_holeDiameter,
         SlavePadInDevice_padShape,
         SlavePadInDevice_padStyle,
         SlavePadInDevice_frontSideFilledBezierPath,
         SlavePadInDevice_backSideFilledBezierPath,
         SlavePadInDevice_padNumberDisplay {

  //····················································································································
  //   Atomic property: xCenter
  //····················································································································

  var xCenter_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var xCenter : Int {
    get {
      return self.xCenter_property.propval
    }
    set {
      self.xCenter_property.setProp (newValue)
    }
  }

  //····················································································································

  var xCenter_property_selection : EBSelection <Int> {
    return self.xCenter_property.prop
  }

  //····················································································································
  //   Atomic property: yCenter
  //····················································································································

  var yCenter_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var yCenter : Int {
    get {
      return self.yCenter_property.propval
    }
    set {
      self.yCenter_property.setProp (newValue)
    }
  }

  //····················································································································

  var yCenter_property_selection : EBSelection <Int> {
    return self.yCenter_property.prop
  }

  //····················································································································
  //   Atomic property: width
  //····················································································································

  var width_property = EBStoredProperty_Int (defaultValue: 114300)

  //····················································································································

  var width : Int {
    get {
      return self.width_property.propval
    }
    set {
      self.width_property.setProp (newValue)
    }
  }

  //····················································································································

  var width_property_selection : EBSelection <Int> {
    return self.width_property.prop
  }

  //····················································································································
  //   Atomic property: height
  //····················································································································

  var height_property = EBStoredProperty_Int (defaultValue: 228600)

  //····················································································································

  var height : Int {
    get {
      return self.height_property.propval
    }
    set {
      self.height_property.setProp (newValue)
    }
  }

  //····················································································································

  var height_property_selection : EBSelection <Int> {
    return self.height_property.prop
  }

  //····················································································································
  //   Atomic property: holeDiameter
  //····················································································································

  var holeDiameter_property = EBStoredProperty_Int (defaultValue: 57150)

  //····················································································································

  var holeDiameter : Int {
    get {
      return self.holeDiameter_property.propval
    }
    set {
      self.holeDiameter_property.setProp (newValue)
    }
  }

  //····················································································································

  var holeDiameter_property_selection : EBSelection <Int> {
    return self.holeDiameter_property.prop
  }

  //····················································································································
  //   Atomic property: padShape
  //····················································································································

  var padShape_property = EBStoredProperty_PadShape (defaultValue: PadShape.octo)

  //····················································································································

  var padShape : PadShape {
    get {
      return self.padShape_property.propval
    }
    set {
      self.padShape_property.setProp (newValue)
    }
  }

  //····················································································································

  var padShape_property_selection : EBSelection <PadShape> {
    return self.padShape_property.prop
  }

  //····················································································································
  //   Atomic property: padStyle
  //····················································································································

  var padStyle_property = EBStoredProperty_SlavePadStyle (defaultValue: SlavePadStyle.traversing)

  //····················································································································

  var padStyle : SlavePadStyle {
    get {
      return self.padStyle_property.propval
    }
    set {
      self.padStyle_property.setProp (newValue)
    }
  }

  //····················································································································

  var padStyle_property_selection : EBSelection <SlavePadStyle> {
    return self.padStyle_property.prop
  }

  //····················································································································
  //   To one property: mMasterPad
  //····················································································································

  var mMasterPad_property = ToOneRelationship_SlavePadInDevice_mMasterPad ()

  //····················································································································

  var mMasterPad_property_selection : EBSelection <Bool> {
    return .single (self.mMasterPad_property.propval == nil)
  }

  //····················································································································
  //   Transient property: frontSideFilledBezierPath
  //····················································································································

  var frontSideFilledBezierPath_property = EBTransientProperty_NSBezierPath ()

  //····················································································································

  var frontSideFilledBezierPath_property_selection : EBSelection <NSBezierPath> {
    return self.frontSideFilledBezierPath_property.prop
  }

  //····················································································································

  var frontSideFilledBezierPath : NSBezierPath? {
    switch self.frontSideFilledBezierPath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backSideFilledBezierPath
  //····················································································································

  var backSideFilledBezierPath_property = EBTransientProperty_NSBezierPath ()

  //····················································································································

  var backSideFilledBezierPath_property_selection : EBSelection <NSBezierPath> {
    return self.backSideFilledBezierPath_property.prop
  }

  //····················································································································

  var backSideFilledBezierPath : NSBezierPath? {
    switch self.backSideFilledBezierPath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padNumberDisplay
  //····················································································································

  var padNumberDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  var padNumberDisplay_property_selection : EBSelection <EBShape> {
    return self.padNumberDisplay_property.prop
  }

  //····················································································································

  var padNumberDisplay : EBShape? {
    switch self.padNumberDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ undoManager : EBUndoManager?) {
    super.init (undoManager)
  //--- Atomic property: xCenter
    self.xCenter_property.undoManager = self.undoManager
  //--- Atomic property: yCenter
    self.yCenter_property.undoManager = self.undoManager
  //--- Atomic property: width
    self.width_property.undoManager = self.undoManager
  //--- Atomic property: height
    self.height_property.undoManager = self.undoManager
  //--- Atomic property: holeDiameter
    self.holeDiameter_property.undoManager = self.undoManager
  //--- Atomic property: padShape
    self.padShape_property.undoManager = self.undoManager
  //--- Atomic property: padStyle
    self.padStyle_property.undoManager = self.undoManager
  //--- To one property: mMasterPad
    self.mMasterPad_property.owner = self
  //--- Atomic property: frontSideFilledBezierPath
    self.frontSideFilledBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.holeDiameter_property_selection.kind ()
        kind &= unwSelf.padShape_property_selection.kind ()
        kind &= unwSelf.padStyle_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.holeDiameter_property_selection, unwSelf.padShape_property_selection, unwSelf.padStyle_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6)) :
            return .single (transient_SlavePadInDevice_frontSideFilledBezierPath (v0, v1, v2, v3, v4, v5, v6))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.frontSideFilledBezierPath_property)
    self.yCenter_property.addEBObserver (self.frontSideFilledBezierPath_property)
    self.width_property.addEBObserver (self.frontSideFilledBezierPath_property)
    self.height_property.addEBObserver (self.frontSideFilledBezierPath_property)
    self.holeDiameter_property.addEBObserver (self.frontSideFilledBezierPath_property)
    self.padShape_property.addEBObserver (self.frontSideFilledBezierPath_property)
    self.padStyle_property.addEBObserver (self.frontSideFilledBezierPath_property)
  //--- Atomic property: backSideFilledBezierPath
    self.backSideFilledBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.holeDiameter_property_selection.kind ()
        kind &= unwSelf.padShape_property_selection.kind ()
        kind &= unwSelf.padStyle_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.holeDiameter_property_selection, unwSelf.padShape_property_selection, unwSelf.padStyle_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6)) :
            return .single (transient_SlavePadInDevice_backSideFilledBezierPath (v0, v1, v2, v3, v4, v5, v6))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.backSideFilledBezierPath_property)
    self.yCenter_property.addEBObserver (self.backSideFilledBezierPath_property)
    self.width_property.addEBObserver (self.backSideFilledBezierPath_property)
    self.height_property.addEBObserver (self.backSideFilledBezierPath_property)
    self.holeDiameter_property.addEBObserver (self.backSideFilledBezierPath_property)
    self.padShape_property.addEBObserver (self.backSideFilledBezierPath_property)
    self.padStyle_property.addEBObserver (self.backSideFilledBezierPath_property)
  //--- Atomic property: padNumberDisplay
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= g_Preferences!.padNumberFont_property_selection.kind ()
        kind &= g_Preferences!.padNumberColor_property_selection.kind ()
        kind &= unwSelf.mMasterPad_property.padName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, g_Preferences!.padNumberFont_property_selection, g_Preferences!.padNumberColor_property_selection, unwSelf.mMasterPad_property.padName_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_SlavePadInDevice_padNumberDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.padNumberDisplay_property)
    self.yCenter_property.addEBObserver (self.padNumberDisplay_property)
    g_Preferences?.padNumberFont_property.addEBObserver (self.padNumberDisplay_property)
    g_Preferences?.padNumberColor_property.addEBObserver (self.padNumberDisplay_property)
    self.mMasterPad_property.addEBObserverOf_padName (self.padNumberDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- register properties for handling signature
    self.height_property.setSignatureObserver (observer: self)
    self.holeDiameter_property.setSignatureObserver (observer: self)
    self.padShape_property.setSignatureObserver (observer: self)
    self.padStyle_property.setSignatureObserver (observer: self)
    self.width_property.setSignatureObserver (observer: self)
    self.xCenter_property.setSignatureObserver (observer: self)
    self.yCenter_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.xCenter_property.removeEBObserver (self.frontSideFilledBezierPath_property)
    self.yCenter_property.removeEBObserver (self.frontSideFilledBezierPath_property)
    self.width_property.removeEBObserver (self.frontSideFilledBezierPath_property)
    self.height_property.removeEBObserver (self.frontSideFilledBezierPath_property)
    self.holeDiameter_property.removeEBObserver (self.frontSideFilledBezierPath_property)
    self.padShape_property.removeEBObserver (self.frontSideFilledBezierPath_property)
    self.padStyle_property.removeEBObserver (self.frontSideFilledBezierPath_property)
    self.xCenter_property.removeEBObserver (self.backSideFilledBezierPath_property)
    self.yCenter_property.removeEBObserver (self.backSideFilledBezierPath_property)
    self.width_property.removeEBObserver (self.backSideFilledBezierPath_property)
    self.height_property.removeEBObserver (self.backSideFilledBezierPath_property)
    self.holeDiameter_property.removeEBObserver (self.backSideFilledBezierPath_property)
    self.padShape_property.removeEBObserver (self.backSideFilledBezierPath_property)
    self.padStyle_property.removeEBObserver (self.backSideFilledBezierPath_property)
    self.xCenter_property.removeEBObserver (self.padNumberDisplay_property)
    self.yCenter_property.removeEBObserver (self.padNumberDisplay_property)
    g_Preferences?.padNumberFont_property.removeEBObserver (self.padNumberDisplay_property)
    g_Preferences?.padNumberColor_property.removeEBObserver (self.padNumberDisplay_property)
    self.mMasterPad_property.removeEBObserverOf_padName (self.padNumberDisplay_property)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "xCenter",
      idx:self.xCenter_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xCenter_property.mObserverExplorer,
      valueExplorer:&self.xCenter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yCenter",
      idx:self.yCenter_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yCenter_property.mObserverExplorer,
      valueExplorer:&self.yCenter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "width",
      idx:self.width_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.width_property.mObserverExplorer,
      valueExplorer:&self.width_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "height",
      idx:self.height_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.height_property.mObserverExplorer,
      valueExplorer:&self.height_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holeDiameter",
      idx:self.holeDiameter_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.holeDiameter_property.mObserverExplorer,
      valueExplorer:&self.holeDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padShape",
      idx:self.padShape_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padShape_property.mObserverExplorer,
      valueExplorer:&self.padShape_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padStyle",
      idx:self.padStyle_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padStyle_property.mObserverExplorer,
      valueExplorer:&self.padStyle_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "frontSideFilledBezierPath",
      idx:self.frontSideFilledBezierPath_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontSideFilledBezierPath_property.mObserverExplorer,
      valueExplorer:&self.frontSideFilledBezierPath_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backSideFilledBezierPath",
      idx:self.backSideFilledBezierPath_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backSideFilledBezierPath_property.mObserverExplorer,
      valueExplorer:&self.backSideFilledBezierPath_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padNumberDisplay",
      idx:self.padNumberDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padNumberDisplay_property.mObserverExplorer,
      valueExplorer:&self.padNumberDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "mMasterPad",
      idx:self.mMasterPad_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mMasterPad_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: xCenter
    self.xCenter_property.mObserverExplorer = nil
    self.xCenter_property.mValueExplorer = nil
  //--- Atomic property: yCenter
    self.yCenter_property.mObserverExplorer = nil
    self.yCenter_property.mValueExplorer = nil
  //--- Atomic property: width
    self.width_property.mObserverExplorer = nil
    self.width_property.mValueExplorer = nil
  //--- Atomic property: height
    self.height_property.mObserverExplorer = nil
    self.height_property.mValueExplorer = nil
  //--- Atomic property: holeDiameter
    self.holeDiameter_property.mObserverExplorer = nil
    self.holeDiameter_property.mValueExplorer = nil
  //--- Atomic property: padShape
    self.padShape_property.mObserverExplorer = nil
    self.padShape_property.mValueExplorer = nil
  //--- Atomic property: padStyle
    self.padStyle_property.mObserverExplorer = nil
    self.padStyle_property.mValueExplorer = nil
  //--- To one property: mMasterPad
    self.mMasterPad_property.mObserverExplorer = nil
    self.mMasterPad_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mMasterPad_property.setProp (nil)
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: xCenter
    self.xCenter_property.storeIn (dictionary: ioDictionary, forKey:"xCenter")
  //--- Atomic property: yCenter
    self.yCenter_property.storeIn (dictionary: ioDictionary, forKey:"yCenter")
  //--- Atomic property: width
    self.width_property.storeIn (dictionary: ioDictionary, forKey:"width")
  //--- Atomic property: height
    self.height_property.storeIn (dictionary: ioDictionary, forKey:"height")
  //--- Atomic property: holeDiameter
    self.holeDiameter_property.storeIn (dictionary: ioDictionary, forKey:"holeDiameter")
  //--- Atomic property: padShape
    self.padShape_property.storeIn (dictionary: ioDictionary, forKey:"padShape")
  //--- Atomic property: padStyle
    self.padStyle_property.storeIn (dictionary: ioDictionary, forKey:"padStyle")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To one property: mMasterPad
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mMasterPad",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? MasterPadInDevice {
        self.mMasterPad_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: xCenter
    self.xCenter_property.readFrom (dictionary: inDictionary, forKey:"xCenter")
  //--- Atomic property: yCenter
    self.yCenter_property.readFrom (dictionary: inDictionary, forKey:"yCenter")
  //--- Atomic property: width
    self.width_property.readFrom (dictionary: inDictionary, forKey:"width")
  //--- Atomic property: height
    self.height_property.readFrom (dictionary: inDictionary, forKey:"height")
  //--- Atomic property: holeDiameter
    self.holeDiameter_property.readFrom (dictionary: inDictionary, forKey:"holeDiameter")
  //--- Atomic property: padShape
    self.padShape_property.readFrom (dictionary: inDictionary, forKey:"padShape")
  //--- Atomic property: padStyle
    self.padStyle_property.readFrom (dictionary: inDictionary, forKey:"padStyle")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To one property: mMasterPad
    if let managedObject = self.mMasterPad_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.height_property.signature ())
    crc.accumulateUInt32 (self.holeDiameter_property.signature ())
    crc.accumulateUInt32 (self.padShape_property.signature ())
    crc.accumulateUInt32 (self.padStyle_property.signature ())
    crc.accumulateUInt32 (self.width_property.signature ())
    crc.accumulateUInt32 (self.xCenter_property.signature ())
    crc.accumulateUInt32 (self.yCenter_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_SlavePadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_SlavePadInDevice : ReadOnlyAbstractArrayProperty <SlavePadInDevice> {

  //····················································································································
  //   Observers of 'xCenter' stored property
  //····················································································································

  private var mObserversOf_xCenter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xCenter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xCenter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xCenter_toElementsOfSet (_ inSet : Set<SlavePadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_xCenter.apply ( {(_ observer : EBEvent) in
        managedObject.xCenter_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_xCenter_fromElementsOfSet (_ inSet : Set<SlavePadInDevice>) {
    self.mObserversOf_xCenter.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xCenter_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'yCenter' stored property
  //····················································································································

  private var mObserversOf_yCenter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yCenter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yCenter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yCenter_toElementsOfSet (_ inSet : Set<SlavePadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_yCenter.apply ( {(_ observer : EBEvent) in
        managedObject.yCenter_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_yCenter_fromElementsOfSet (_ inSet : Set<SlavePadInDevice>) {
    self.mObserversOf_yCenter.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yCenter_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'width' stored property
  //····················································································································

  private var mObserversOf_width = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_width (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_width.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.width_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_width (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_width.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.width_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_width_toElementsOfSet (_ inSet : Set<SlavePadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_width.apply ( {(_ observer : EBEvent) in
        managedObject.width_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_width_fromElementsOfSet (_ inSet : Set<SlavePadInDevice>) {
    self.mObserversOf_width.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.width_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'height' stored property
  //····················································································································

  private var mObserversOf_height = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_height (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_height.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.height_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_height (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_height.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.height_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_height_toElementsOfSet (_ inSet : Set<SlavePadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_height.apply ( {(_ observer : EBEvent) in
        managedObject.height_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_height_fromElementsOfSet (_ inSet : Set<SlavePadInDevice>) {
    self.mObserversOf_height.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.height_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'holeDiameter' stored property
  //····················································································································

  private var mObserversOf_holeDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holeDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_holeDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holeDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_holeDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holeDiameter_toElementsOfSet (_ inSet : Set<SlavePadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_holeDiameter.apply ( {(_ observer : EBEvent) in
        managedObject.holeDiameter_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_holeDiameter_fromElementsOfSet (_ inSet : Set<SlavePadInDevice>) {
    self.mObserversOf_holeDiameter.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.holeDiameter_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'padShape' stored property
  //····················································································································

  private var mObserversOf_padShape = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padShape (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padShape.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padShape_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padShape (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padShape.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padShape_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padShape_toElementsOfSet (_ inSet : Set<SlavePadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_padShape.apply ( {(_ observer : EBEvent) in
        managedObject.padShape_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_padShape_fromElementsOfSet (_ inSet : Set<SlavePadInDevice>) {
    self.mObserversOf_padShape.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.padShape_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'padStyle' stored property
  //····················································································································

  private var mObserversOf_padStyle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padStyle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padStyle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padStyle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padStyle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padStyle_toElementsOfSet (_ inSet : Set<SlavePadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_padStyle.apply ( {(_ observer : EBEvent) in
        managedObject.padStyle_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_padStyle_fromElementsOfSet (_ inSet : Set<SlavePadInDevice>) {
    self.mObserversOf_padStyle.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.padStyle_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'frontSideFilledBezierPath' transient property
  //····················································································································

  private var mObserversOf_frontSideFilledBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontSideFilledBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_frontSideFilledBezierPath.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontSideFilledBezierPath_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontSideFilledBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_frontSideFilledBezierPath.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontSideFilledBezierPath_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontSideFilledBezierPath_toElementsOfSet (_ inSet : Set<SlavePadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_frontSideFilledBezierPath.apply ( {(_ observer : EBEvent) in
        managedObject.frontSideFilledBezierPath_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontSideFilledBezierPath_fromElementsOfSet (_ inSet : Set<SlavePadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_frontSideFilledBezierPath.apply ( {(_ observer : EBEvent) in
        managedObject.frontSideFilledBezierPath_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································
  //   Observers of 'backSideFilledBezierPath' transient property
  //····················································································································

  private var mObserversOf_backSideFilledBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backSideFilledBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backSideFilledBezierPath.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backSideFilledBezierPath_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backSideFilledBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backSideFilledBezierPath.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backSideFilledBezierPath_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backSideFilledBezierPath_toElementsOfSet (_ inSet : Set<SlavePadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_backSideFilledBezierPath.apply ( {(_ observer : EBEvent) in
        managedObject.backSideFilledBezierPath_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_backSideFilledBezierPath_fromElementsOfSet (_ inSet : Set<SlavePadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_backSideFilledBezierPath.apply ( {(_ observer : EBEvent) in
        managedObject.backSideFilledBezierPath_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································
  //   Observers of 'padNumberDisplay' transient property
  //····················································································································

  private var mObserversOf_padNumberDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumberDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumberDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padNumberDisplay_toElementsOfSet (_ inSet : Set<SlavePadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_padNumberDisplay.apply ( {(_ observer : EBEvent) in
        managedObject.padNumberDisplay_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNumberDisplay_fromElementsOfSet (_ inSet : Set<SlavePadInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_padNumberDisplay.apply ( {(_ observer : EBEvent) in
        managedObject.padNumberDisplay_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_SlavePadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_SlavePadInDevice : ReadOnlyArrayOf_SlavePadInDevice {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [SlavePadInDevice] > > = nil

  //····················································································································

  override var propset : Set <SlavePadInDevice> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [SlavePadInDevice] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [SlavePadInDevice] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <SlavePadInDevice> ()

  //····················································································································

  private var mCachedValue : EBSelection < [SlavePadInDevice] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      self.mCachedValue = unwrappedComputeFunction ()
      let newSet : Set <SlavePadInDevice>
      switch self.mCachedValue! {
      case .multiple, .empty :
        newSet = Set <SlavePadInDevice> ()
      case .single (let array) :
       newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_xCenter_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_yCenter_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_width_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_height_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_holeDiameter_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_padShape_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_padStyle_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_frontSideFilledBezierPath_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_backSideFilledBezierPath_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_padNumberDisplay_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_xCenter_toElementsOfSet (addedSet)
      self.addEBObserversOf_yCenter_toElementsOfSet (addedSet)
      self.addEBObserversOf_width_toElementsOfSet (addedSet)
      self.addEBObserversOf_height_toElementsOfSet (addedSet)
      self.addEBObserversOf_holeDiameter_toElementsOfSet (addedSet)
      self.addEBObserversOf_padShape_toElementsOfSet (addedSet)
      self.addEBObserversOf_padStyle_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_frontSideFilledBezierPath_toElementsOfSet (addedSet)
      self.addEBObserversOf_backSideFilledBezierPath_toElementsOfSet (addedSet)
      self.addEBObserversOf_padNumberDisplay_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: SlavePadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_SlavePadInDevice : ReadOnlyArrayOf_SlavePadInDevice {

  //····················································································································
 
  func setProp (_ value :  [SlavePadInDevice]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: SlavePadInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_SlavePadInDevice : ReadWriteArrayOf_SlavePadInDevice, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : SlavePadInDevice?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [SlavePadInDevice] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.undoManager, "SlavePadInDevice") as? SlavePadInDevice {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <SlavePadInDevice> ()
  private var mValue = [SlavePadInDevice] () {
    didSet {
     // self.postEvent ()
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.undoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.setOppositeRelationship? (nil)
            managedObject.xCenter_property.mSetterDelegate = nil
            managedObject.yCenter_property.mSetterDelegate = nil
            managedObject.width_property.mSetterDelegate = nil
            managedObject.height_property.mSetterDelegate = nil
            managedObject.holeDiameter_property.mSetterDelegate = nil
            managedObject.padShape_property.mSetterDelegate = nil
            managedObject.padStyle_property.mSetterDelegate = nil
          }
          self.removeEBObserversOf_xCenter_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_yCenter_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_height_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_holeDiameter_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_padShape_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_padStyle_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_frontSideFilledBezierPath_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_backSideFilledBezierPath_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_padNumberDisplay_fromElementsOfSet (removedObjectSet)
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : SlavePadInDevice in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
            managedObject.xCenter_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.yCenter_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.width_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.height_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.holeDiameter_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.padShape_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.padStyle_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
          self.addEBObserversOf_xCenter_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_yCenter_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_width_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_height_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_holeDiameter_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_padShape_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_padStyle_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_frontSideFilledBezierPath_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_backSideFilledBezierPath_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_padNumberDisplay_toElementsOfSet (addedObjectSet)
        }
      //--- Notify observers
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [kEntityKey] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [SlavePadInDevice] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [SlavePadInDevice]) { self.mValue = inValue }

  //····················································································································

  override var propval : [SlavePadInDevice] { return self.mValue }

  //····················································································································

  override var propset : Set <SlavePadInDevice> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [SlavePadInDevice]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : SlavePadInDevice) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : SlavePadInDevice) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: mMasterPad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_SlavePadInDevice_mMasterPad : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : SlavePadInDevice? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  private var mValue : MasterPadInDevice? {
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.undoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        oldValue?.mSlavePads_property.remove (unwrappedOwner)
      //--- Set new opposite relation ship
        self.mValue?.mSlavePads_property.add (unwrappedOwner)
      //--- Remove property observers of old object
        oldValue?.backSideFilledBezierPathArray_property.removeEBObserversFrom (&self.mObserversOf_backSideFilledBezierPathArray)
        oldValue?.frontSideFilledBezierPathArray_property.removeEBObserversFrom (&self.mObserversOf_frontSideFilledBezierPathArray)
        oldValue?.height_property.removeEBObserversFrom (&self.mObserversOf_height)
        oldValue?.holeDiameter_property.removeEBObserversFrom (&self.mObserversOf_holeDiameter)
        oldValue?.padName_property.removeEBObserversFrom (&self.mObserversOf_padName)
        oldValue?.padNumberDisplay_property.removeEBObserversFrom (&self.mObserversOf_padNumberDisplay)
        oldValue?.padShape_property.removeEBObserversFrom (&self.mObserversOf_padShape)
        oldValue?.padStyle_property.removeEBObserversFrom (&self.mObserversOf_padStyle)
        oldValue?.width_property.removeEBObserversFrom (&self.mObserversOf_width)
        oldValue?.xCenter_property.removeEBObserversFrom (&self.mObserversOf_xCenter)
        oldValue?.yCenter_property.removeEBObserversFrom (&self.mObserversOf_yCenter)
      //--- Add property observers to new object
        self.mValue?.backSideFilledBezierPathArray_property.addEBObserversFrom (&self.mObserversOf_backSideFilledBezierPathArray)
        self.mValue?.frontSideFilledBezierPathArray_property.addEBObserversFrom (&self.mObserversOf_frontSideFilledBezierPathArray)
        self.mValue?.height_property.addEBObserversFrom (&self.mObserversOf_height)
        self.mValue?.holeDiameter_property.addEBObserversFrom (&self.mObserversOf_holeDiameter)
        self.mValue?.padName_property.addEBObserversFrom (&self.mObserversOf_padName)
        self.mValue?.padNumberDisplay_property.addEBObserversFrom (&self.mObserversOf_padNumberDisplay)
        self.mValue?.padShape_property.addEBObserversFrom (&self.mObserversOf_padShape)
        self.mValue?.padStyle_property.addEBObserversFrom (&self.mObserversOf_padStyle)
        self.mValue?.width_property.addEBObserversFrom (&self.mObserversOf_width)
        self.mValue?.xCenter_property.addEBObserversFrom (&self.mObserversOf_xCenter)
        self.mValue?.yCenter_property.addEBObserversFrom (&self.mObserversOf_yCenter)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : MasterPadInDevice? { return self.mValue }

  var prop : EBSelection <MasterPadInDevice?> { return .single (self.mValue) }

  func setProp (_ value : MasterPadInDevice?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : MasterPadInDevice?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : MasterPadInDevice) {
    if self.mValue === object {
      self.mValue = nil
    }
  }

  //····················································································································
  //   Observable property: backSideFilledBezierPathArray
  //····················································································································

  private var mObserversOf_backSideFilledBezierPathArray = EBWeakEventSet ()

  //····················································································································

  var backSideFilledBezierPathArray_property_selection : EBSelection <BezierPathArray?> {
    if let model = self.propval {
      switch (model.backSideFilledBezierPathArray_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_backSideFilledBezierPathArray (_ inObserver : EBEvent) {
    self.mObserversOf_backSideFilledBezierPathArray.insert (inObserver)
    if let object = self.propval {
      object.backSideFilledBezierPathArray_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_backSideFilledBezierPathArray (_ inObserver : EBEvent) {
    self.mObserversOf_backSideFilledBezierPathArray.remove (inObserver)
    if let object = self.propval {
      object.backSideFilledBezierPathArray_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: frontSideFilledBezierPathArray
  //····················································································································

  private var mObserversOf_frontSideFilledBezierPathArray = EBWeakEventSet ()

  //····················································································································

  var frontSideFilledBezierPathArray_property_selection : EBSelection <BezierPathArray?> {
    if let model = self.propval {
      switch (model.frontSideFilledBezierPathArray_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_frontSideFilledBezierPathArray (_ inObserver : EBEvent) {
    self.mObserversOf_frontSideFilledBezierPathArray.insert (inObserver)
    if let object = self.propval {
      object.frontSideFilledBezierPathArray_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontSideFilledBezierPathArray (_ inObserver : EBEvent) {
    self.mObserversOf_frontSideFilledBezierPathArray.remove (inObserver)
    if let object = self.propval {
      object.frontSideFilledBezierPathArray_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: height
  //····················································································································

  private var mObserversOf_height = EBWeakEventSet ()

  //····················································································································

  var height_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.height_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_height (_ inObserver : EBEvent) {
    self.mObserversOf_height.insert (inObserver)
    if let object = self.propval {
      object.height_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_height (_ inObserver : EBEvent) {
    self.mObserversOf_height.remove (inObserver)
    if let object = self.propval {
      object.height_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: holeDiameter
  //····················································································································

  private var mObserversOf_holeDiameter = EBWeakEventSet ()

  //····················································································································

  var holeDiameter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.holeDiameter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_holeDiameter (_ inObserver : EBEvent) {
    self.mObserversOf_holeDiameter.insert (inObserver)
    if let object = self.propval {
      object.holeDiameter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_holeDiameter (_ inObserver : EBEvent) {
    self.mObserversOf_holeDiameter.remove (inObserver)
    if let object = self.propval {
      object.holeDiameter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: padName
  //····················································································································

  private var mObserversOf_padName = EBWeakEventSet ()

  //····················································································································

  var padName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.padName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_padName (_ inObserver : EBEvent) {
    self.mObserversOf_padName.insert (inObserver)
    if let object = self.propval {
      object.padName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padName (_ inObserver : EBEvent) {
    self.mObserversOf_padName.remove (inObserver)
    if let object = self.propval {
      object.padName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: padNumberDisplay
  //····················································································································

  private var mObserversOf_padNumberDisplay = EBWeakEventSet ()

  //····················································································································

  var padNumberDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.padNumberDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.mObserversOf_padNumberDisplay.insert (inObserver)
    if let object = self.propval {
      object.padNumberDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.mObserversOf_padNumberDisplay.remove (inObserver)
    if let object = self.propval {
      object.padNumberDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: padShape
  //····················································································································

  private var mObserversOf_padShape = EBWeakEventSet ()

  //····················································································································

  var padShape_property_selection : EBSelection <PadShape?> {
    if let model = self.propval {
      switch (model.padShape_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_padShape (_ inObserver : EBEvent) {
    self.mObserversOf_padShape.insert (inObserver)
    if let object = self.propval {
      object.padShape_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padShape (_ inObserver : EBEvent) {
    self.mObserversOf_padShape.remove (inObserver)
    if let object = self.propval {
      object.padShape_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: padStyle
  //····················································································································

  private var mObserversOf_padStyle = EBWeakEventSet ()

  //····················································································································

  var padStyle_property_selection : EBSelection <PadStyle?> {
    if let model = self.propval {
      switch (model.padStyle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_padStyle (_ inObserver : EBEvent) {
    self.mObserversOf_padStyle.insert (inObserver)
    if let object = self.propval {
      object.padStyle_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padStyle (_ inObserver : EBEvent) {
    self.mObserversOf_padStyle.remove (inObserver)
    if let object = self.propval {
      object.padStyle_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: width
  //····················································································································

  private var mObserversOf_width = EBWeakEventSet ()

  //····················································································································

  var width_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.width_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_width (_ inObserver : EBEvent) {
    self.mObserversOf_width.insert (inObserver)
    if let object = self.propval {
      object.width_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_width (_ inObserver : EBEvent) {
    self.mObserversOf_width.remove (inObserver)
    if let object = self.propval {
      object.width_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: xCenter
  //····················································································································

  private var mObserversOf_xCenter = EBWeakEventSet ()

  //····················································································································

  var xCenter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.xCenter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.mObserversOf_xCenter.insert (inObserver)
    if let object = self.propval {
      object.xCenter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.mObserversOf_xCenter.remove (inObserver)
    if let object = self.propval {
      object.xCenter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: yCenter
  //····················································································································

  private var mObserversOf_yCenter = EBWeakEventSet ()

  //····················································································································

  var yCenter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.yCenter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.mObserversOf_yCenter.insert (inObserver)
    if let object = self.propval {
      object.yCenter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.mObserversOf_yCenter.remove (inObserver)
    if let object = self.propval {
      object.yCenter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
