//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mFileData : class {
  var mFileData : Data { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mName : class {
  var mName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mVersion : class {
  var mVersion : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mPadTopSideFilledBezierPathArray : class {
  var mPadTopSideFilledBezierPathArray : BezierPathArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mPadBackSideFilledBezierPathArray : class {
  var mPadBackSideFilledBezierPathArray : BezierPathArray { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mStrokeBezierPath : class {
  var mStrokeBezierPath : NSBezierPath { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mX : class {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mY : class {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_versionString : class {
  var versionString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class PackageInDevice : EBGraphicManagedObject,
         PackageInDevice_mFileData,
         PackageInDevice_mName,
         PackageInDevice_mVersion,
         PackageInDevice_mPadTopSideFilledBezierPathArray,
         PackageInDevice_mPadBackSideFilledBezierPathArray,
         PackageInDevice_mStrokeBezierPath,
         PackageInDevice_mX,
         PackageInDevice_mY,
         PackageInDevice_versionString,
         PackageInDevice_objectDisplay,
         PackageInDevice_selectionDisplay {

  //····················································································································
  //   Atomic property: mFileData
  //····················································································································

  var mFileData_property = EBStoredProperty_Data (defaultValue: Data ())

  //····················································································································

  var mFileData : Data {
    get {
      return self.mFileData_property.propval
    }
    set {
      self.mFileData_property.setProp (newValue)
    }
  }

  //····················································································································

  var mFileData_property_selection : EBSelection <Data> {
    return self.mFileData_property.prop
  }

  //····················································································································
  //   Atomic property: mName
  //····················································································································

  var mName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mName : String {
    get {
      return self.mName_property.propval
    }
    set {
      self.mName_property.setProp (newValue)
    }
  }

  //····················································································································

  var mName_property_selection : EBSelection <String> {
    return self.mName_property.prop
  }

  //····················································································································
  //   Atomic property: mVersion
  //····················································································································

  var mVersion_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mVersion : Int {
    get {
      return self.mVersion_property.propval
    }
    set {
      self.mVersion_property.setProp (newValue)
    }
  }

  //····················································································································

  var mVersion_property_selection : EBSelection <Int> {
    return self.mVersion_property.prop
  }

  //····················································································································
  //   Atomic property: mPadTopSideFilledBezierPathArray
  //····················································································································

  var mPadTopSideFilledBezierPathArray_property = EBStoredProperty_BezierPathArray (defaultValue: BezierPathArray ())

  //····················································································································

  var mPadTopSideFilledBezierPathArray : BezierPathArray {
    get {
      return self.mPadTopSideFilledBezierPathArray_property.propval
    }
    set {
      self.mPadTopSideFilledBezierPathArray_property.setProp (newValue)
    }
  }

  //····················································································································

  var mPadTopSideFilledBezierPathArray_property_selection : EBSelection <BezierPathArray> {
    return self.mPadTopSideFilledBezierPathArray_property.prop
  }

  //····················································································································
  //   Atomic property: mPadBackSideFilledBezierPathArray
  //····················································································································

  var mPadBackSideFilledBezierPathArray_property = EBStoredProperty_BezierPathArray (defaultValue: BezierPathArray ())

  //····················································································································

  var mPadBackSideFilledBezierPathArray : BezierPathArray {
    get {
      return self.mPadBackSideFilledBezierPathArray_property.propval
    }
    set {
      self.mPadBackSideFilledBezierPathArray_property.setProp (newValue)
    }
  }

  //····················································································································

  var mPadBackSideFilledBezierPathArray_property_selection : EBSelection <BezierPathArray> {
    return self.mPadBackSideFilledBezierPathArray_property.prop
  }

  //····················································································································
  //   Atomic property: mStrokeBezierPath
  //····················································································································

  var mStrokeBezierPath_property = EBStoredProperty_NSBezierPath (defaultValue: NSBezierPath ())

  //····················································································································

  var mStrokeBezierPath : NSBezierPath {
    get {
      return self.mStrokeBezierPath_property.propval
    }
    set {
      self.mStrokeBezierPath_property.setProp (newValue)
    }
  }

  //····················································································································

  var mStrokeBezierPath_property_selection : EBSelection <NSBezierPath> {
    return self.mStrokeBezierPath_property.prop
  }

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  var mX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mX : Int {
    get {
      return self.mX_property.propval
    }
    set {
      self.mX_property.setProp (newValue)
    }
  }

  //····················································································································

  var mX_property_selection : EBSelection <Int> {
    return self.mX_property.prop
  }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  var mY_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mY : Int {
    get {
      return self.mY_property.propval
    }
    set {
      self.mY_property.setProp (newValue)
    }
  }

  //····················································································································

  var mY_property_selection : EBSelection <Int> {
    return self.mY_property.prop
  }

  //····················································································································
  //   Transient property: versionString
  //····················································································································

  var versionString_property = EBTransientProperty_String ()

  //····················································································································

  var versionString_property_selection : EBSelection <String> {
    return self.versionString_property.prop
  }

  //····················································································································

  var versionString : String? {
    switch self.versionString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ undoManager : EBUndoManager?, file: String, _ line : Int) {
    super.init (undoManager, file: file, line)
  //--- Atomic property: mFileData
    self.mFileData_property.undoManager = self.undoManager
  //--- Atomic property: mName
    self.mName_property.undoManager = self.undoManager
  //--- Atomic property: mVersion
    self.mVersion_property.undoManager = self.undoManager
  //--- Atomic property: mPadTopSideFilledBezierPathArray
    self.mPadTopSideFilledBezierPathArray_property.undoManager = self.undoManager
  //--- Atomic property: mPadBackSideFilledBezierPathArray
    self.mPadBackSideFilledBezierPathArray_property.undoManager = self.undoManager
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.undoManager = self.undoManager
  //--- Atomic property: mX
    self.mX_property.undoManager = self.undoManager
  //--- Atomic property: mY
    self.mY_property.undoManager = self.undoManager
  //--- Atomic property: versionString
    self.versionString_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mVersion_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mVersion_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackageInDevice_versionString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mVersion_property.addEBObserver (self.versionString_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mStrokeBezierPath_property_selection.kind ()
        kind &= g_Preferences!.packageColor_property_selection.kind ()
        kind &= g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection.kind ()
        kind &= unwSelf.mPadTopSideFilledBezierPathArray_property_selection.kind ()
        kind &= g_Preferences!.topSidePadColor_property_selection.kind ()
        kind &= unwSelf.mPadBackSideFilledBezierPathArray_property_selection.kind ()
        kind &= g_Preferences!.bottomSidePadColor_property_selection.kind ()
        kind &= unwSelf.mName_property_selection.kind ()
        kind &= unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mStrokeBezierPath_property_selection, g_Preferences!.packageColor_property_selection, g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection, unwSelf.mPadTopSideFilledBezierPathArray_property_selection, g_Preferences!.topSidePadColor_property_selection, unwSelf.mPadBackSideFilledBezierPathArray_property_selection, g_Preferences!.bottomSidePadColor_property_selection, unwSelf.mName_property_selection, unwSelf.mX_property_selection, unwSelf.mY_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9)) :
            return .single (transient_PackageInDevice_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mStrokeBezierPath_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.packageColor_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.addEBObserver (self.objectDisplay_property)
    self.mPadTopSideFilledBezierPathArray_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.topSidePadColor_property.addEBObserver (self.objectDisplay_property)
    self.mPadBackSideFilledBezierPathArray_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.bottomSidePadColor_property.addEBObserver (self.objectDisplay_property)
    self.mName_property.addEBObserver (self.objectDisplay_property)
    self.mX_property.addEBObserver (self.objectDisplay_property)
    self.mY_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mStrokeBezierPath_property_selection.kind ()
        kind &= g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection.kind ()
        kind &= unwSelf.mPadTopSideFilledBezierPathArray_property_selection.kind ()
        kind &= unwSelf.mPadBackSideFilledBezierPathArray_property_selection.kind ()
        kind &= unwSelf.mName_property_selection.kind ()
        kind &= unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mStrokeBezierPath_property_selection, g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection, unwSelf.mPadTopSideFilledBezierPathArray_property_selection, unwSelf.mPadBackSideFilledBezierPathArray_property_selection, unwSelf.mName_property_selection, unwSelf.mX_property_selection, unwSelf.mY_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6)) :
            return .single (transient_PackageInDevice_selectionDisplay (v0, v1, v2, v3, v4, v5, v6))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mStrokeBezierPath_property.addEBObserver (self.selectionDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.addEBObserver (self.selectionDisplay_property)
    self.mPadTopSideFilledBezierPathArray_property.addEBObserver (self.selectionDisplay_property)
    self.mPadBackSideFilledBezierPathArray_property.addEBObserver (self.selectionDisplay_property)
    self.mName_property.addEBObserver (self.selectionDisplay_property)
    self.mX_property.addEBObserver (self.selectionDisplay_property)
    self.mY_property.addEBObserver (self.selectionDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- register properties for handling signature
    self.mFileData_property.setSignatureObserver (observer:self)
    self.mName_property.setSignatureObserver (observer:self)
    self.mPadBackSideFilledBezierPathArray_property.setSignatureObserver (observer:self)
    self.mPadTopSideFilledBezierPathArray_property.setSignatureObserver (observer:self)
    self.mStrokeBezierPath_property.setSignatureObserver (observer:self)
    self.mVersion_property.setSignatureObserver (observer:self)
  //--- Extern delegates
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.mVersion_property.removeEBObserver (self.versionString_property)
    self.mStrokeBezierPath_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.removeEBObserver (self.objectDisplay_property)
    self.mPadTopSideFilledBezierPathArray_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.topSidePadColor_property.removeEBObserver (self.objectDisplay_property)
    self.mPadBackSideFilledBezierPathArray_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.bottomSidePadColor_property.removeEBObserver (self.objectDisplay_property)
    self.mName_property.removeEBObserver (self.objectDisplay_property)
    self.mX_property.removeEBObserver (self.objectDisplay_property)
    self.mY_property.removeEBObserver (self.objectDisplay_property)
    self.mStrokeBezierPath_property.removeEBObserver (self.selectionDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.removeEBObserver (self.selectionDisplay_property)
    self.mPadTopSideFilledBezierPathArray_property.removeEBObserver (self.selectionDisplay_property)
    self.mPadBackSideFilledBezierPathArray_property.removeEBObserver (self.selectionDisplay_property)
    self.mName_property.removeEBObserver (self.selectionDisplay_property)
    self.mX_property.removeEBObserver (self.selectionDisplay_property)
    self.mY_property.removeEBObserver (self.selectionDisplay_property)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mFileData",
      idx:self.mFileData_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mFileData_property.mObserverExplorer,
      valueExplorer:&self.mFileData_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mName",
      idx:self.mName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mName_property.mObserverExplorer,
      valueExplorer:&self.mName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mVersion",
      idx:self.mVersion_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mVersion_property.mObserverExplorer,
      valueExplorer:&self.mVersion_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPadTopSideFilledBezierPathArray",
      idx:self.mPadTopSideFilledBezierPathArray_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mPadTopSideFilledBezierPathArray_property.mObserverExplorer,
      valueExplorer:&self.mPadTopSideFilledBezierPathArray_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPadBackSideFilledBezierPathArray",
      idx:self.mPadBackSideFilledBezierPathArray_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mPadBackSideFilledBezierPathArray_property.mObserverExplorer,
      valueExplorer:&self.mPadBackSideFilledBezierPathArray_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mStrokeBezierPath",
      idx:self.mStrokeBezierPath_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mStrokeBezierPath_property.mObserverExplorer,
      valueExplorer:&self.mStrokeBezierPath_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mX",
      idx:self.mX_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mX_property.mObserverExplorer,
      valueExplorer:&self.mX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mY",
      idx:self.mY_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mY_property.mObserverExplorer,
      valueExplorer:&self.mY_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "versionString",
      idx:self.versionString_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.versionString_property.mObserverExplorer,
      valueExplorer:&self.versionString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx:self.objectDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.objectDisplay_property.mObserverExplorer,
      valueExplorer:&self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx:self.selectionDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectionDisplay_property.mObserverExplorer,
      valueExplorer:&self.selectionDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mFileData
    self.mFileData_property.mObserverExplorer = nil
    self.mFileData_property.mValueExplorer = nil
  //--- Atomic property: mName
    self.mName_property.mObserverExplorer = nil
    self.mName_property.mValueExplorer = nil
  //--- Atomic property: mVersion
    self.mVersion_property.mObserverExplorer = nil
    self.mVersion_property.mValueExplorer = nil
  //--- Atomic property: mPadTopSideFilledBezierPathArray
    self.mPadTopSideFilledBezierPathArray_property.mObserverExplorer = nil
    self.mPadTopSideFilledBezierPathArray_property.mValueExplorer = nil
  //--- Atomic property: mPadBackSideFilledBezierPathArray
    self.mPadBackSideFilledBezierPathArray_property.mObserverExplorer = nil
    self.mPadBackSideFilledBezierPathArray_property.mValueExplorer = nil
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.mObserverExplorer = nil
    self.mStrokeBezierPath_property.mValueExplorer = nil
  //--- Atomic property: mX
    self.mX_property.mObserverExplorer = nil
    self.mX_property.mValueExplorer = nil
  //--- Atomic property: mY
    self.mY_property.mObserverExplorer = nil
    self.mY_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mFileData
    self.mFileData_property.storeIn (dictionary: ioDictionary, forKey:"mFileData")
  //--- Atomic property: mName
    self.mName_property.storeIn (dictionary: ioDictionary, forKey:"mName")
  //--- Atomic property: mVersion
    self.mVersion_property.storeIn (dictionary: ioDictionary, forKey:"mVersion")
  //--- Atomic property: mPadTopSideFilledBezierPathArray
    self.mPadTopSideFilledBezierPathArray_property.storeIn (dictionary: ioDictionary, forKey:"mPadTopSideFilledBezierPathArray")
  //--- Atomic property: mPadBackSideFilledBezierPathArray
    self.mPadBackSideFilledBezierPathArray_property.storeIn (dictionary: ioDictionary, forKey:"mPadBackSideFilledBezierPathArray")
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.storeIn (dictionary: ioDictionary, forKey:"mStrokeBezierPath")
  //--- Atomic property: mX
    self.mX_property.storeIn (dictionary: ioDictionary, forKey:"mX")
  //--- Atomic property: mY
    self.mY_property.storeIn (dictionary: ioDictionary, forKey:"mY")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mFileData
    self.mFileData_property.readFrom (dictionary: inDictionary, forKey:"mFileData")
  //--- Atomic property: mName
    self.mName_property.readFrom (dictionary: inDictionary, forKey:"mName")
  //--- Atomic property: mVersion
    self.mVersion_property.readFrom (dictionary: inDictionary, forKey:"mVersion")
  //--- Atomic property: mPadTopSideFilledBezierPathArray
    self.mPadTopSideFilledBezierPathArray_property.readFrom (dictionary: inDictionary, forKey:"mPadTopSideFilledBezierPathArray")
  //--- Atomic property: mPadBackSideFilledBezierPathArray
    self.mPadBackSideFilledBezierPathArray_property.readFrom (dictionary: inDictionary, forKey:"mPadBackSideFilledBezierPathArray")
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.readFrom (dictionary: inDictionary, forKey:"mStrokeBezierPath")
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey:"mX")
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey:"mY")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.mFileData_property.signature ())
    crc.accumulateUInt32 (self.mName_property.signature ())
    crc.accumulateUInt32 (self.mPadBackSideFilledBezierPathArray_property.signature ())
    crc.accumulateUInt32 (self.mPadTopSideFilledBezierPathArray_property.signature ())
    crc.accumulateUInt32 (self.mStrokeBezierPath_property.signature ())
    crc.accumulateUInt32 (self.mVersion_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageInDevice : ReadOnlyAbstractArrayProperty <PackageInDevice> {

  //····················································································································
  //   Observers of 'mFileData' stored property
  //····················································································································

  private var mObserversOf_mFileData = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mFileData (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mFileData.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mFileData_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mFileData (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mFileData.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mFileData_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mFileData_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mFileData.apply ( {(_ observer : EBEvent) in
        managedObject.mFileData_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mFileData_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mFileData.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mFileData_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mName' stored property
  //····················································································································

  private var mObserversOf_mName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mName_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mName.apply ( {(_ observer : EBEvent) in
        managedObject.mName_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mName_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mName.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mName_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mVersion' stored property
  //····················································································································

  private var mObserversOf_mVersion = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mVersion (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mVersion.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mVersion_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mVersion (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mVersion.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mVersion_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mVersion_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mVersion.apply ( {(_ observer : EBEvent) in
        managedObject.mVersion_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mVersion_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mVersion.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mVersion_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mPadTopSideFilledBezierPathArray' stored property
  //····················································································································

  private var mObserversOf_mPadTopSideFilledBezierPathArray = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPadTopSideFilledBezierPathArray (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPadTopSideFilledBezierPathArray.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPadTopSideFilledBezierPathArray_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPadTopSideFilledBezierPathArray (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPadTopSideFilledBezierPathArray.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPadTopSideFilledBezierPathArray_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPadTopSideFilledBezierPathArray_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mPadTopSideFilledBezierPathArray.apply ( {(_ observer : EBEvent) in
        managedObject.mPadTopSideFilledBezierPathArray_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPadTopSideFilledBezierPathArray_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mPadTopSideFilledBezierPathArray.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPadTopSideFilledBezierPathArray_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mPadBackSideFilledBezierPathArray' stored property
  //····················································································································

  private var mObserversOf_mPadBackSideFilledBezierPathArray = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPadBackSideFilledBezierPathArray (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPadBackSideFilledBezierPathArray.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPadBackSideFilledBezierPathArray_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPadBackSideFilledBezierPathArray (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPadBackSideFilledBezierPathArray.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPadBackSideFilledBezierPathArray_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPadBackSideFilledBezierPathArray_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mPadBackSideFilledBezierPathArray.apply ( {(_ observer : EBEvent) in
        managedObject.mPadBackSideFilledBezierPathArray_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPadBackSideFilledBezierPathArray_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mPadBackSideFilledBezierPathArray.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPadBackSideFilledBezierPathArray_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mStrokeBezierPath' stored property
  //····················································································································

  private var mObserversOf_mStrokeBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mStrokeBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mStrokeBezierPath.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mStrokeBezierPath_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mStrokeBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mStrokeBezierPath.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mStrokeBezierPath_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mStrokeBezierPath_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mStrokeBezierPath.apply ( {(_ observer : EBEvent) in
        managedObject.mStrokeBezierPath_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mStrokeBezierPath_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mStrokeBezierPath.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mStrokeBezierPath_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mX.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mX.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mX_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mX.apply ( {(_ observer : EBEvent) in
        managedObject.mX_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mX.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mX_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private var mObserversOf_mY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mY.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mY.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mY_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mY.apply ( {(_ observer : EBEvent) in
        managedObject.mY_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mY_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mY.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mY_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'versionString' transient property
  //····················································································································

  private var mObserversOf_versionString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_versionString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.versionString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_versionString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.versionString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_versionString_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_versionString.apply ( {(_ observer : EBEvent) in
        managedObject.versionString_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_versionString_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_versionString.apply ( {(_ observer : EBEvent) in
        managedObject.versionString_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply ( {(_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply ( {(_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply ( {(_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply ( {(_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_PackageInDevice : ReadOnlyArrayOf_PackageInDevice {

  //····················································································································

  var readModelFunction : Optional < () -> EBSelection < [PackageInDevice] > > = nil

  //····················································································································

  override var propset : Set <PackageInDevice> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [PackageInDevice] > {
    self.computeArrayAndSet ()
    return self.prop_cache!  
  }
 
  //····················································································································

  override var propval : [PackageInDevice] {
    self.computeArrayAndSet ()
    if let value = self.prop_cache {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <PackageInDevice> ()

  //····················································································································

  private var prop_cache : EBSelection < [PackageInDevice] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.readModelFunction, self.prop_cache == nil {
      self.prop_cache = unwrappedComputeFunction ()
      let newSet : Set <PackageInDevice>
      switch self.prop_cache! {
      case .multiple, .empty :
        newSet = Set <PackageInDevice> ()
      case .single (let array) :
       newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_mFileData_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mVersion_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mPadTopSideFilledBezierPathArray_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mPadBackSideFilledBezierPathArray_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mStrokeBezierPath_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mX_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mY_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_versionString_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_mFileData_toElementsOfSet (addedSet)
      self.addEBObserversOf_mName_toElementsOfSet (addedSet)
      self.addEBObserversOf_mVersion_toElementsOfSet (addedSet)
      self.addEBObserversOf_mPadTopSideFilledBezierPathArray_toElementsOfSet (addedSet)
      self.addEBObserversOf_mPadBackSideFilledBezierPathArray_toElementsOfSet (addedSet)
      self.addEBObserversOf_mStrokeBezierPath_toElementsOfSet (addedSet)
      self.addEBObserversOf_mX_toElementsOfSet (addedSet)
      self.addEBObserversOf_mY_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_versionString_toElementsOfSet (addedSet)
      self.addEBObserversOf_objectDisplay_toElementsOfSet (addedSet)
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.prop_cache == nil {
      self.prop_cache = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.prop_cache != nil {
      self.prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackageInDevice : ReadOnlyArrayOf_PackageInDevice {

  //····················································································································
 
  func setProp (_ value :  [PackageInDevice]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_PackageInDevice : ReadWriteArrayOf_PackageInDevice, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : PackageInDevice?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [PackageInDevice] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.undoManager, "PackageInDevice") as? PackageInDevice {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <PackageInDevice> ()
  private var mValue = [PackageInDevice] () {
    didSet {
      self.postEvent ()
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.undoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          self.setOppositeRelationship? (nil)
          managedObject.mFileData_property.mSetterDelegate = nil
          managedObject.mName_property.mSetterDelegate = nil
          managedObject.mVersion_property.mSetterDelegate = nil
          managedObject.mPadTopSideFilledBezierPathArray_property.mSetterDelegate = nil
          managedObject.mPadBackSideFilledBezierPathArray_property.mSetterDelegate = nil
          managedObject.mStrokeBezierPath_property.mSetterDelegate = nil
          managedObject.mX_property.mSetterDelegate = nil
          managedObject.mY_property.mSetterDelegate = nil
        }
        self.removeEBObserversOf_mFileData_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mName_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mVersion_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mPadTopSideFilledBezierPathArray_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mPadBackSideFilledBezierPathArray_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mStrokeBezierPath_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mX_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mY_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_versionString_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        for managedObject : PackageInDevice in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          self.setOppositeRelationship? (managedObject)
          managedObject.mFileData_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mName_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mVersion_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mPadTopSideFilledBezierPathArray_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mPadBackSideFilledBezierPathArray_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mStrokeBezierPath_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mX_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mY_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
        }
        self.addEBObserversOf_mFileData_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mName_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mVersion_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mPadTopSideFilledBezierPathArray_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mPadBackSideFilledBezierPathArray_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mStrokeBezierPath_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mX_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mY_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_versionString_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_objectDisplay_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [kEntityKey] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [PackageInDevice] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [PackageInDevice]) { self.mValue = inValue }

  //····················································································································

  override var propval : [PackageInDevice] { return self.mValue }

  //····················································································································

  override var propset : Set <PackageInDevice> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [PackageInDevice]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : PackageInDevice) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : PackageInDevice) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
