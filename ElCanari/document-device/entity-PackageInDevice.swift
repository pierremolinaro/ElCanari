//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mFileData : class {
  var mFileData : Data { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mName : class {
  var mName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mVersion : class {
  var mVersion : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mStrokeBezierPath : class {
  var mStrokeBezierPath : NSBezierPath { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mX : class {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mY : class {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_versionString : class {
  var versionString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_frontSidePadFilledBezierPathArray : class {
  var frontSidePadFilledBezierPathArray : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_backSidePadFilledBezierPathArray : class {
  var backSidePadFilledBezierPathArray : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_padNameSet : class {
  var padNameSet : StringSet? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class PackageInDevice : EBGraphicManagedObject,
         PackageInDevice_mFileData,
         PackageInDevice_mName,
         PackageInDevice_mVersion,
         PackageInDevice_mStrokeBezierPath,
         PackageInDevice_mX,
         PackageInDevice_mY,
         PackageInDevice_versionString,
         PackageInDevice_frontSidePadFilledBezierPathArray,
         PackageInDevice_backSidePadFilledBezierPathArray,
         PackageInDevice_objectDisplay,
         PackageInDevice_selectionDisplay,
         PackageInDevice_padNameSet {

  //····················································································································
  //   Atomic property: mFileData
  //····················································································································

  let mFileData_property = EBStoredProperty_Data (defaultValue: Data ())

  //····················································································································

  var mFileData : Data {
    get { return self.mFileData_property.propval }
    set { self.mFileData_property.setProp (newValue) }
  }

  //····················································································································

  var mFileData_property_selection : EBSelection <Data> { return self.mFileData_property.prop }

  //····················································································································
  //   Atomic property: mName
  //····················································································································

  let mName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mName : String {
    get { return self.mName_property.propval }
    set { self.mName_property.setProp (newValue) }
  }

  //····················································································································

  var mName_property_selection : EBSelection <String> { return self.mName_property.prop }

  //····················································································································
  //   Atomic property: mVersion
  //····················································································································

  let mVersion_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mVersion : Int {
    get { return self.mVersion_property.propval }
    set { self.mVersion_property.setProp (newValue) }
  }

  //····················································································································

  var mVersion_property_selection : EBSelection <Int> { return self.mVersion_property.prop }

  //····················································································································
  //   Atomic property: mStrokeBezierPath
  //····················································································································

  let mStrokeBezierPath_property = EBStoredProperty_NSBezierPath (defaultValue: NSBezierPath ())

  //····················································································································

  var mStrokeBezierPath : NSBezierPath {
    get { return self.mStrokeBezierPath_property.propval }
    set { self.mStrokeBezierPath_property.setProp (newValue) }
  }

  //····················································································································

  var mStrokeBezierPath_property_selection : EBSelection <NSBezierPath> { return self.mStrokeBezierPath_property.prop }

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  let mX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································

  var mX_property_selection : EBSelection <Int> { return self.mX_property.prop }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  let mY_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································

  var mY_property_selection : EBSelection <Int> { return self.mY_property.prop }

  //····················································································································
  //   To many property: mMasterPads
  //····················································································································

  let mMasterPads_property = StoredArrayOf_MasterPadInDevice ()

  //····················································································································

  var mMasterPads_property_selection : EBSelection < [MasterPadInDevice] > {
    return self.mMasterPads_property.prop
  }

  //····················································································································

  var mMasterPads : [MasterPadInDevice] {
    get { return self.mMasterPads_property.propval }
    set { self.mMasterPads_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: mRoot
  //····················································································································

  let mRoot_property = ToOneRelationship_PackageInDevice_mRoot ()

  //····················································································································

  var mRoot_property_selection : EBSelection <DeviceRoot?> {
    return .single (self.mRoot_property.propval)
  }

  //····················································································································

  var mRoot : DeviceRoot? {
    get { return self.mRoot_property.propval }
    set { self.mRoot_property.setProp (newValue) }
  }

  //····················································································································

  var mRoot_none : ToOneRelationship_PackageInDevice_mRoot { return self.mRoot_property }

  //····················································································································

  var mRoot_none_selection : EBSelection <Bool> {
    return .single (self.mRoot_property.propval == nil)
  }

  //····················································································································
  //   Transient property: versionString
  //····················································································································

  let versionString_property = EBTransientProperty_String ()

  //····················································································································

  var versionString_property_selection : EBSelection <String> {
    return self.versionString_property.prop
  }

  //····················································································································

  var versionString : String? {
    switch self.versionString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontSidePadFilledBezierPathArray
  //····················································································································

  let frontSidePadFilledBezierPathArray_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var frontSidePadFilledBezierPathArray_property_selection : EBSelection <BezierPathArray> {
    return self.frontSidePadFilledBezierPathArray_property.prop
  }

  //····················································································································

  var frontSidePadFilledBezierPathArray : BezierPathArray? {
    switch self.frontSidePadFilledBezierPathArray_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backSidePadFilledBezierPathArray
  //····················································································································

  let backSidePadFilledBezierPathArray_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var backSidePadFilledBezierPathArray_property_selection : EBSelection <BezierPathArray> {
    return self.backSidePadFilledBezierPathArray_property.prop
  }

  //····················································································································

  var backSidePadFilledBezierPathArray : BezierPathArray? {
    switch self.backSidePadFilledBezierPathArray_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padNameSet
  //····················································································································

  let padNameSet_property = EBTransientProperty_StringSet ()

  //····················································································································

  var padNameSet_property_selection : EBSelection <StringSet> {
    return self.padNameSet_property.prop
  }

  //····················································································································

  var padNameSet : StringSet? {
    switch self.padNameSet_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mFileData
    self.mFileData_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mName
    self.mName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mVersion
    self.mVersion_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mX
    self.mX_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mY
    self.mY_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mMasterPads (no option)
    self.mMasterPads_property.ebUndoManager = self.ebUndoManager
  //--- To one property: mRoot
    self.mRoot_property.owner = self
  //--- Atomic property: versionString
    self.versionString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mVersion_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mVersion_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackageInDevice_versionString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mVersion_property.addEBObserver (self.versionString_property)
  //--- Atomic property: frontSidePadFilledBezierPathArray
    self.frontSidePadFilledBezierPathArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mMasterPads_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mMasterPads_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackageInDevice_frontSidePadFilledBezierPathArray (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mMasterPads_property.addEBObserverOf_frontSideFilledBezierPathArray (self.frontSidePadFilledBezierPathArray_property)
  //--- Atomic property: backSidePadFilledBezierPathArray
    self.backSidePadFilledBezierPathArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mMasterPads_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mMasterPads_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackageInDevice_backSidePadFilledBezierPathArray (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mMasterPads_property.addEBObserverOf_backSideFilledBezierPathArray (self.backSidePadFilledBezierPathArray_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mMasterPads_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mShowPackagePadNumbers_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mShowPackages_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mShowPackageFrontPads_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mShowPackageBackPads_property_selection.kind ()
        kind &= unwSelf.mStrokeBezierPath_property_selection.kind ()
        kind &= g_Preferences!.packageColor_property_selection.kind ()
        kind &= g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection.kind ()
        kind &= unwSelf.frontSidePadFilledBezierPathArray_property_selection.kind ()
        kind &= g_Preferences!.frontSidePadColor_property_selection.kind ()
        kind &= unwSelf.backSidePadFilledBezierPathArray_property_selection.kind ()
        kind &= g_Preferences!.backSidePadColor_property_selection.kind ()
        kind &= unwSelf.mName_property_selection.kind ()
        kind &= unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mMasterPads_property_selection, unwSelf.mRoot_property.mShowPackagePadNumbers_property_selection, unwSelf.mRoot_property.mShowPackages_property_selection, unwSelf.mRoot_property.mShowPackageFrontPads_property_selection, unwSelf.mRoot_property.mShowPackageBackPads_property_selection, unwSelf.mStrokeBezierPath_property_selection, g_Preferences!.packageColor_property_selection, g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection, unwSelf.frontSidePadFilledBezierPathArray_property_selection, g_Preferences!.frontSidePadColor_property_selection, unwSelf.backSidePadFilledBezierPathArray_property_selection, g_Preferences!.backSidePadColor_property_selection, unwSelf.mName_property_selection, unwSelf.mX_property_selection, unwSelf.mY_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11), .single (let v12), .single (let v13), .single (let v14)) :
            return .single (transient_PackageInDevice_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mMasterPads_property.addEBObserverOf_padNumberDisplay (self.objectDisplay_property)
    self.mRoot_property.addEBObserverOf_mShowPackagePadNumbers (self.objectDisplay_property)
    self.mRoot_property.addEBObserverOf_mShowPackages (self.objectDisplay_property)
    self.mRoot_property.addEBObserverOf_mShowPackageFrontPads (self.objectDisplay_property)
    self.mRoot_property.addEBObserverOf_mShowPackageBackPads (self.objectDisplay_property)
    self.mStrokeBezierPath_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.packageColor_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.addEBObserver (self.objectDisplay_property)
    self.frontSidePadFilledBezierPathArray_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSidePadColor_property.addEBObserver (self.objectDisplay_property)
    self.backSidePadFilledBezierPathArray_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.backSidePadColor_property.addEBObserver (self.objectDisplay_property)
    self.mName_property.addEBObserver (self.objectDisplay_property)
    self.mX_property.addEBObserver (self.objectDisplay_property)
    self.mY_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mStrokeBezierPath_property_selection.kind ()
        kind &= g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection.kind ()
        kind &= unwSelf.frontSidePadFilledBezierPathArray_property_selection.kind ()
        kind &= unwSelf.backSidePadFilledBezierPathArray_property_selection.kind ()
        kind &= unwSelf.mName_property_selection.kind ()
        kind &= unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mStrokeBezierPath_property_selection, g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection, unwSelf.frontSidePadFilledBezierPathArray_property_selection, unwSelf.backSidePadFilledBezierPathArray_property_selection, unwSelf.mName_property_selection, unwSelf.mX_property_selection, unwSelf.mY_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6)) :
            return .single (transient_PackageInDevice_selectionDisplay (v0, v1, v2, v3, v4, v5, v6))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mStrokeBezierPath_property.addEBObserver (self.selectionDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.addEBObserver (self.selectionDisplay_property)
    self.frontSidePadFilledBezierPathArray_property.addEBObserver (self.selectionDisplay_property)
    self.backSidePadFilledBezierPathArray_property.addEBObserver (self.selectionDisplay_property)
    self.mName_property.addEBObserver (self.selectionDisplay_property)
    self.mX_property.addEBObserver (self.selectionDisplay_property)
    self.mY_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: padNameSet
    self.padNameSet_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mMasterPads_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mMasterPads_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackageInDevice_padNameSet (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mMasterPads_property.addEBObserverOf_mName (self.padNameSet_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.mFileData_property.setSignatureObserver (observer: self)
    self.mMasterPads_property.setSignatureObserver (observer: self)
    self.mName_property.setSignatureObserver (observer: self)
    self.mStrokeBezierPath_property.setSignatureObserver (observer: self)
    self.mVersion_property.setSignatureObserver (observer: self)
    self.mX_property.setSignatureObserver (observer: self)
    self.mY_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mVersion_property.removeEBObserver (self.versionString_property)
    self.mMasterPads_property.removeEBObserverOf_frontSideFilledBezierPathArray (self.frontSidePadFilledBezierPathArray_property)
    self.mMasterPads_property.removeEBObserverOf_backSideFilledBezierPathArray (self.backSidePadFilledBezierPathArray_property)
    self.mMasterPads_property.removeEBObserverOf_padNumberDisplay (self.objectDisplay_property)
    self.mRoot_property.removeEBObserverOf_mShowPackagePadNumbers (self.objectDisplay_property)
    self.mRoot_property.removeEBObserverOf_mShowPackages (self.objectDisplay_property)
    self.mRoot_property.removeEBObserverOf_mShowPackageFrontPads (self.objectDisplay_property)
    self.mRoot_property.removeEBObserverOf_mShowPackageBackPads (self.objectDisplay_property)
    self.mStrokeBezierPath_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.removeEBObserver (self.objectDisplay_property)
    self.frontSidePadFilledBezierPathArray_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSidePadColor_property.removeEBObserver (self.objectDisplay_property)
    self.backSidePadFilledBezierPathArray_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.backSidePadColor_property.removeEBObserver (self.objectDisplay_property)
    self.mName_property.removeEBObserver (self.objectDisplay_property)
    self.mX_property.removeEBObserver (self.objectDisplay_property)
    self.mY_property.removeEBObserver (self.objectDisplay_property)
    self.mStrokeBezierPath_property.removeEBObserver (self.selectionDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.removeEBObserver (self.selectionDisplay_property)
    self.frontSidePadFilledBezierPathArray_property.removeEBObserver (self.selectionDisplay_property)
    self.backSidePadFilledBezierPathArray_property.removeEBObserver (self.selectionDisplay_property)
    self.mName_property.removeEBObserver (self.selectionDisplay_property)
    self.mX_property.removeEBObserver (self.selectionDisplay_property)
    self.mY_property.removeEBObserver (self.selectionDisplay_property)
    self.mMasterPads_property.removeEBObserverOf_mName (self.padNameSet_property)
  //--- Unregister properties for handling signature
    self.mFileData_property.setSignatureObserver (observer: nil)
    self.mMasterPads_property.setSignatureObserver (observer: nil)
    self.mName_property.setSignatureObserver (observer: nil)
    self.mStrokeBezierPath_property.setSignatureObserver (observer: nil)
    self.mVersion_property.setSignatureObserver (observer: nil)
    self.mX_property.setSignatureObserver (observer: nil)
    self.mY_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mFileData",
      idx:self.mFileData_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mFileData_property.mObserverExplorer,
      valueExplorer:&self.mFileData_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mName",
      idx:self.mName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mName_property.mObserverExplorer,
      valueExplorer:&self.mName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mVersion",
      idx:self.mVersion_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mVersion_property.mObserverExplorer,
      valueExplorer:&self.mVersion_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mStrokeBezierPath",
      idx:self.mStrokeBezierPath_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mStrokeBezierPath_property.mObserverExplorer,
      valueExplorer:&self.mStrokeBezierPath_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mX",
      idx:self.mX_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mX_property.mObserverExplorer,
      valueExplorer:&self.mX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mY",
      idx:self.mY_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mY_property.mObserverExplorer,
      valueExplorer:&self.mY_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "versionString",
      idx:self.versionString_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.versionString_property.mObserverExplorer,
      valueExplorer:&self.versionString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontSidePadFilledBezierPathArray",
      idx:self.frontSidePadFilledBezierPathArray_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontSidePadFilledBezierPathArray_property.mObserverExplorer,
      valueExplorer:&self.frontSidePadFilledBezierPathArray_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backSidePadFilledBezierPathArray",
      idx:self.backSidePadFilledBezierPathArray_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backSidePadFilledBezierPathArray_property.mObserverExplorer,
      valueExplorer:&self.backSidePadFilledBezierPathArray_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx:self.objectDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.objectDisplay_property.mObserverExplorer,
      valueExplorer:&self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx:self.selectionDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectionDisplay_property.mObserverExplorer,
      valueExplorer:&self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padNameSet",
      idx:self.padNameSet_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padNameSet_property.mObserverExplorer,
      valueExplorer:&self.padNameSet_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "mMasterPads",
      idx:mMasterPads_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mMasterPads_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "mRoot",
      idx:self.mRoot_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mRoot_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mFileData
    self.mFileData_property.mObserverExplorer = nil
    self.mFileData_property.mValueExplorer = nil
  //--- Atomic property: mName
    self.mName_property.mObserverExplorer = nil
    self.mName_property.mValueExplorer = nil
  //--- Atomic property: mVersion
    self.mVersion_property.mObserverExplorer = nil
    self.mVersion_property.mValueExplorer = nil
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.mObserverExplorer = nil
    self.mStrokeBezierPath_property.mValueExplorer = nil
  //--- Atomic property: mX
    self.mX_property.mObserverExplorer = nil
    self.mX_property.mValueExplorer = nil
  //--- Atomic property: mY
    self.mY_property.mObserverExplorer = nil
    self.mY_property.mValueExplorer = nil
  //--- To many property: mMasterPads
    self.mMasterPads_property.mValueExplorer = nil
  //--- To one property: mRoot
    self.mRoot_property.mObserverExplorer = nil
    self.mRoot_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mMasterPads_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mRoot_property.setProp (nil)
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mFileData
    self.mFileData_property.storeIn (dictionary: ioDictionary, forKey:"mFileData")
  //--- Atomic property: mName
    self.mName_property.storeIn (dictionary: ioDictionary, forKey:"mName")
  //--- Atomic property: mVersion
    self.mVersion_property.storeIn (dictionary: ioDictionary, forKey:"mVersion")
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.storeIn (dictionary: ioDictionary, forKey:"mStrokeBezierPath")
  //--- Atomic property: mX
    self.mX_property.storeIn (dictionary: ioDictionary, forKey:"mX")
  //--- Atomic property: mY
    self.mY_property.storeIn (dictionary: ioDictionary, forKey:"mY")
  //--- To many property: mMasterPads
    self.store (
      managedObjectArray: self.mMasterPads_property.propval,
      relationshipName: "mMasterPads",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mMasterPads
    self.mMasterPads_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mMasterPads",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [MasterPadInDevice])
  //--- To one property: mRoot
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mRoot",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? DeviceRoot {
        self.mRoot_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mFileData
    self.mFileData_property.readFrom (dictionary: inDictionary, forKey:"mFileData")
  //--- Atomic property: mName
    self.mName_property.readFrom (dictionary: inDictionary, forKey:"mName")
  //--- Atomic property: mVersion
    self.mVersion_property.readFrom (dictionary: inDictionary, forKey:"mVersion")
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.readFrom (dictionary: inDictionary, forKey:"mStrokeBezierPath")
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey:"mX")
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey:"mY")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mMasterPads
    for managedObject in self.mMasterPads_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mRoot
    if let managedObject = self.mRoot_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mMasterPads
    for managedObject in self.mMasterPads_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mRoot
    if let managedObject = self.mRoot_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.mFileData_property.signature ())
    crc.accumulateUInt32 (self.mMasterPads_property.signature ())
    crc.accumulateUInt32 (self.mName_property.signature ())
    crc.accumulateUInt32 (self.mStrokeBezierPath_property.signature ())
    crc.accumulateUInt32 (self.mVersion_property.signature ())
    crc.accumulateUInt32 (self.mX_property.signature ())
    crc.accumulateUInt32 (self.mY_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageInDevice : ReadOnlyAbstractArrayProperty <PackageInDevice> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <PackageInDevice>, addedSet inAddedSet : Set <PackageInDevice>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_mFileData_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mName_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mVersion_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mStrokeBezierPath_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mX_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mY_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_versionString_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_frontSidePadFilledBezierPathArray_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_backSidePadFilledBezierPathArray_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_objectDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_padNameSet_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_mFileData_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mName_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mVersion_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mStrokeBezierPath_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mX_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mY_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_versionString_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_frontSidePadFilledBezierPathArray_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_backSidePadFilledBezierPathArray_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_objectDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_selectionDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_padNameSet_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'mFileData' stored property
  //····················································································································

  private var mObserversOf_mFileData = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mFileData (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mFileData.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mFileData_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mFileData (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mFileData.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mFileData_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mFileData_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mFileData.apply { (_ observer : EBEvent) in
        managedObject.mFileData_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mFileData_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mFileData.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mFileData_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mName' stored property
  //····················································································································

  private var mObserversOf_mName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mName_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mName.apply { (_ observer : EBEvent) in
        managedObject.mName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mName_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mVersion' stored property
  //····················································································································

  private var mObserversOf_mVersion = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mVersion (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mVersion.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mVersion_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mVersion (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mVersion.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mVersion_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mVersion_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mVersion.apply { (_ observer : EBEvent) in
        managedObject.mVersion_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mVersion_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mVersion.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mVersion_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mStrokeBezierPath' stored property
  //····················································································································

  private var mObserversOf_mStrokeBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mStrokeBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mStrokeBezierPath.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mStrokeBezierPath_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mStrokeBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mStrokeBezierPath.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mStrokeBezierPath_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mStrokeBezierPath_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mStrokeBezierPath.apply { (_ observer : EBEvent) in
        managedObject.mStrokeBezierPath_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mStrokeBezierPath_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mStrokeBezierPath.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mStrokeBezierPath_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mX.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mX.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mX_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mX.apply { (_ observer : EBEvent) in
        managedObject.mX_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mX.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mX_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private var mObserversOf_mY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mY.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mY.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mY_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mY.apply { (_ observer : EBEvent) in
        managedObject.mY_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mY_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mY.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mY_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'versionString' transient property
  //····················································································································

  private var mObserversOf_versionString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_versionString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.versionString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_versionString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.versionString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_versionString_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_versionString.apply { (_ observer : EBEvent) in
        managedObject.versionString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_versionString_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_versionString.apply { (_ observer : EBEvent) in
        managedObject.versionString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'frontSidePadFilledBezierPathArray' transient property
  //····················································································································

  private var mObserversOf_frontSidePadFilledBezierPathArray = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontSidePadFilledBezierPathArray (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_frontSidePadFilledBezierPathArray.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontSidePadFilledBezierPathArray_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontSidePadFilledBezierPathArray (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_frontSidePadFilledBezierPathArray.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontSidePadFilledBezierPathArray_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontSidePadFilledBezierPathArray_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_frontSidePadFilledBezierPathArray.apply { (_ observer : EBEvent) in
        managedObject.frontSidePadFilledBezierPathArray_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontSidePadFilledBezierPathArray_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_frontSidePadFilledBezierPathArray.apply { (_ observer : EBEvent) in
        managedObject.frontSidePadFilledBezierPathArray_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'backSidePadFilledBezierPathArray' transient property
  //····················································································································

  private var mObserversOf_backSidePadFilledBezierPathArray = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backSidePadFilledBezierPathArray (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backSidePadFilledBezierPathArray.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backSidePadFilledBezierPathArray_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backSidePadFilledBezierPathArray (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backSidePadFilledBezierPathArray.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backSidePadFilledBezierPathArray_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backSidePadFilledBezierPathArray_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_backSidePadFilledBezierPathArray.apply { (_ observer : EBEvent) in
        managedObject.backSidePadFilledBezierPathArray_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_backSidePadFilledBezierPathArray_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_backSidePadFilledBezierPathArray.apply { (_ observer : EBEvent) in
        managedObject.backSidePadFilledBezierPathArray_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padNameSet' transient property
  //····················································································································

  private var mObserversOf_padNameSet = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padNameSet (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNameSet.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNameSet_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNameSet (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNameSet.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNameSet_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padNameSet_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_padNameSet.apply { (_ observer : EBEvent) in
        managedObject.padNameSet_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNameSet_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_padNameSet.apply { (_ observer : EBEvent) in
        managedObject.padNameSet_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_PackageInDevice : ReadOnlyArrayOf_PackageInDevice {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_PackageInDevice? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_PackageInDevice?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newArray : [PackageInDevice] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newArray = v
        self.mTransientKind = .single
       case .multiple :
        newArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newArray = []
      self.mTransientKind = .empty
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [PackageInDevice] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [PackageInDevice] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_PackageInDevice <SUPER : EBManagedObject> : ReadOnlyArrayOf_PackageInDevice {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    var newModelArray : [SUPER] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newModelArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newModelArray = v
        self.mTransientKind = .single
       case .multiple :
        newModelArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newModelArray = []
      self.mTransientKind = .empty
    }
    var newArray = [PackageInDevice] ()
    for superObject in newModelArray {
      if let object = superObject as? PackageInDevice {
        newArray.append (object)
      }
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [PackageInDevice] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [PackageInDevice] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackageInDevice : ReadOnlyArrayOf_PackageInDevice {

  //····················································································································
 
  func setProp (_ value :  [PackageInDevice]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_PackageInDevice : ReadWriteArrayOf_PackageInDevice {

  //····················································································································

  private var mModel : ReadWriteArrayOf_PackageInDevice? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_PackageInDevice) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [PackageInDevice]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [PackageInDevice]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [PackageInDevice] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_PackageInDevice : ReadWriteArrayOf_PackageInDevice, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PackageInDevice) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PackageInDevice) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackageInDevice) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PackageInDevice) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  //  Init
  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [PackageInDevice] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "PackageInDevice") as? PackageInDevice {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [PackageInDevice]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [PackageInDevice]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //--- Write in preferences ?
    self.writeInPreferences ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <PackageInDevice>, addedSet inAddedSet : Set <PackageInDevice>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //---
    for managedObject in inRemovedSet {
      managedObject.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (managedObject)
    }
  //---
    for managedObject in inAddedSet {
      managedObject.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (managedObject)
    }
  }
 
  //····················································································································
 
  // private var mSet = Set <PackageInDevice> ()
  /* private var mValue = [PackageInDevice] () {
    didSet {
      if oldValue != self.mValue {
        let oldSet = Set (oldValue)
        let newSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (newSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.mResetOppositeRelationship? (managedObject)
            managedObject.mFileData_property.mSetterDelegate = nil
            managedObject.mName_property.mSetterDelegate = nil
            managedObject.mVersion_property.mSetterDelegate = nil
            managedObject.mStrokeBezierPath_property.mSetterDelegate = nil
            managedObject.mX_property.mSetterDelegate = nil
            managedObject.mY_property.mSetterDelegate = nil
          }
        //--- Remove observers of stored properties
          self.removeEBObserversOf_mFileData_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mVersion_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mStrokeBezierPath_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mX_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mY_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of transient properties
          self.removeEBObserversOf_versionString_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_frontSidePadFilledBezierPathArray_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_backSidePadFilledBezierPathArray_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_padNameSet_fromElementsOfSet (removedObjectSet)
        }
       //--- Added object set
        let addedObjectSet = newSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : PackageInDevice in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.mSetOppositeRelationship? (managedObject)
            managedObject.mFileData_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mName_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mVersion_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mStrokeBezierPath_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mX_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mY_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
        //--- Add observers of stored properties
          self.addEBObserversOf_mFileData_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mVersion_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mStrokeBezierPath_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mX_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mY_toElementsOfSet (addedObjectSet)
        //--- Add observers of transient properties
          self.addEBObserversOf_versionString_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_frontSidePadFilledBezierPathArray_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_backSidePadFilledBezierPathArray_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_objectDisplay_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_padNameSet_toElementsOfSet (addedObjectSet)
        }
      //--- Notify observers
        // self.propagateProxyUpdate ()
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  } */

  //····················································································································

  override var prop : EBSelection < [PackageInDevice] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [PackageInDevice]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [PackageInDevice] { return self.mInternalArrayValue }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mInternalArrayValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  func remove (_ object : PackageInDevice) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      var array = self.mInternalArrayValue
      array.remove (at: idx)
      self.mInternalArrayValue = array
    }
  }
  
  //····················································································································

  func add (_ object : PackageInDevice) {
    if self.mInternalArrayValue.firstIndex (of: object) == nil {
      var array = self.mInternalArrayValue
      array.append (object)
      self.mInternalArrayValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mInternalArrayValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: mRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_PackageInDevice_mRoot : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : PackageInDevice? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  private var mValue : DeviceRoot? {
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.ebUndoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        oldValue?.mPackages_property.remove (unwrappedOwner)
      //--- Set new opposite relation ship
        self.mValue?.mPackages_property.add (unwrappedOwner)
      //--- Remove property observers of old object
        oldValue?.assignedPadProxies_property.removeEBObserversFrom (&self.mObserversOf_assignedPadProxies)
        oldValue?.imageIsValid_property.removeEBObserversFrom (&self.mObserversOf_imageIsValid)
        oldValue?.inconsistentPackagePadNameSetsMessage_property.removeEBObserversFrom (&self.mObserversOf_inconsistentPackagePadNameSetsMessage)
        oldValue?.inconsistentSymbolNameSetMessage_property.removeEBObserversFrom (&self.mObserversOf_inconsistentSymbolNameSetMessage)
        oldValue?.issues_property.removeEBObserversFrom (&self.mObserversOf_issues)
        oldValue?.mComments_property.removeEBObserversFrom (&self.mObserversOf_mComments)
        oldValue?.mDocs_property.removeEBObserversFrom (&self.mObserversOf_mDocs)
        oldValue?.mImageData_property.removeEBObserversFrom (&self.mObserversOf_mImageData)
        oldValue?.mPackageDisplayHorizontalFlip_property.removeEBObserversFrom (&self.mObserversOf_mPackageDisplayHorizontalFlip)
        oldValue?.mPackageDisplayVerticalFlip_property.removeEBObserversFrom (&self.mObserversOf_mPackageDisplayVerticalFlip)
        oldValue?.mPackageDisplayZoom_property.removeEBObserversFrom (&self.mObserversOf_mPackageDisplayZoom)
        oldValue?.mPackages_property.removeEBObserversFrom (&self.mObserversOf_mPackages)
        oldValue?.mPadProxies_property.removeEBObserversFrom (&self.mObserversOf_mPadProxies)
        oldValue?.mPrefix_property.removeEBObserversFrom (&self.mObserversOf_mPrefix)
        oldValue?.mSelectedPageIndex_property.removeEBObserversFrom (&self.mObserversOf_mSelectedPageIndex)
        oldValue?.mShowPackageBackPads_property.removeEBObserversFrom (&self.mObserversOf_mShowPackageBackPads)
        oldValue?.mShowPackageFrontPads_property.removeEBObserversFrom (&self.mObserversOf_mShowPackageFrontPads)
        oldValue?.mShowPackagePadNumbers_property.removeEBObserversFrom (&self.mObserversOf_mShowPackagePadNumbers)
        oldValue?.mShowPackages_property.removeEBObserversFrom (&self.mObserversOf_mShowPackages)
        oldValue?.mSymbolDisplayHorizontalFlip_property.removeEBObserversFrom (&self.mObserversOf_mSymbolDisplayHorizontalFlip)
        oldValue?.mSymbolDisplayVerticalFlip_property.removeEBObserversFrom (&self.mObserversOf_mSymbolDisplayVerticalFlip)
        oldValue?.mSymbolDisplayZoom_property.removeEBObserversFrom (&self.mObserversOf_mSymbolDisplayZoom)
        oldValue?.mSymbolInstances_property.removeEBObserversFrom (&self.mObserversOf_mSymbolInstances)
        oldValue?.mSymbolTypes_property.removeEBObserversFrom (&self.mObserversOf_mSymbolTypes)
        oldValue?.mTitle_property.removeEBObserversFrom (&self.mObserversOf_mTitle)
        oldValue?.packagePadNameSetsAreConsistent_property.removeEBObserversFrom (&self.mObserversOf_packagePadNameSetsAreConsistent)
        oldValue?.symbolNameAreConsistent_property.removeEBObserversFrom (&self.mObserversOf_symbolNameAreConsistent)
        oldValue?.symbolTypeNames_property.removeEBObserversFrom (&self.mObserversOf_symbolTypeNames)
        oldValue?.unconnectedPads_property.removeEBObserversFrom (&self.mObserversOf_unconnectedPads)
        oldValue?.unconnectedPins_property.removeEBObserversFrom (&self.mObserversOf_unconnectedPins)
      //--- Add property observers to new object
        self.mValue?.assignedPadProxies_property.addEBObserversFrom (&self.mObserversOf_assignedPadProxies)
        self.mValue?.imageIsValid_property.addEBObserversFrom (&self.mObserversOf_imageIsValid)
        self.mValue?.inconsistentPackagePadNameSetsMessage_property.addEBObserversFrom (&self.mObserversOf_inconsistentPackagePadNameSetsMessage)
        self.mValue?.inconsistentSymbolNameSetMessage_property.addEBObserversFrom (&self.mObserversOf_inconsistentSymbolNameSetMessage)
        self.mValue?.issues_property.addEBObserversFrom (&self.mObserversOf_issues)
        self.mValue?.mComments_property.addEBObserversFrom (&self.mObserversOf_mComments)
        self.mValue?.mDocs_property.addEBObserversFrom (&self.mObserversOf_mDocs)
        self.mValue?.mImageData_property.addEBObserversFrom (&self.mObserversOf_mImageData)
        self.mValue?.mPackageDisplayHorizontalFlip_property.addEBObserversFrom (&self.mObserversOf_mPackageDisplayHorizontalFlip)
        self.mValue?.mPackageDisplayVerticalFlip_property.addEBObserversFrom (&self.mObserversOf_mPackageDisplayVerticalFlip)
        self.mValue?.mPackageDisplayZoom_property.addEBObserversFrom (&self.mObserversOf_mPackageDisplayZoom)
        self.mValue?.mPackages_property.addEBObserversFrom (&self.mObserversOf_mPackages)
        self.mValue?.mPadProxies_property.addEBObserversFrom (&self.mObserversOf_mPadProxies)
        self.mValue?.mPrefix_property.addEBObserversFrom (&self.mObserversOf_mPrefix)
        self.mValue?.mSelectedPageIndex_property.addEBObserversFrom (&self.mObserversOf_mSelectedPageIndex)
        self.mValue?.mShowPackageBackPads_property.addEBObserversFrom (&self.mObserversOf_mShowPackageBackPads)
        self.mValue?.mShowPackageFrontPads_property.addEBObserversFrom (&self.mObserversOf_mShowPackageFrontPads)
        self.mValue?.mShowPackagePadNumbers_property.addEBObserversFrom (&self.mObserversOf_mShowPackagePadNumbers)
        self.mValue?.mShowPackages_property.addEBObserversFrom (&self.mObserversOf_mShowPackages)
        self.mValue?.mSymbolDisplayHorizontalFlip_property.addEBObserversFrom (&self.mObserversOf_mSymbolDisplayHorizontalFlip)
        self.mValue?.mSymbolDisplayVerticalFlip_property.addEBObserversFrom (&self.mObserversOf_mSymbolDisplayVerticalFlip)
        self.mValue?.mSymbolDisplayZoom_property.addEBObserversFrom (&self.mObserversOf_mSymbolDisplayZoom)
        self.mValue?.mSymbolInstances_property.addEBObserversFrom (&self.mObserversOf_mSymbolInstances)
        self.mValue?.mSymbolTypes_property.addEBObserversFrom (&self.mObserversOf_mSymbolTypes)
        self.mValue?.mTitle_property.addEBObserversFrom (&self.mObserversOf_mTitle)
        self.mValue?.packagePadNameSetsAreConsistent_property.addEBObserversFrom (&self.mObserversOf_packagePadNameSetsAreConsistent)
        self.mValue?.symbolNameAreConsistent_property.addEBObserversFrom (&self.mObserversOf_symbolNameAreConsistent)
        self.mValue?.symbolTypeNames_property.addEBObserversFrom (&self.mObserversOf_symbolTypeNames)
        self.mValue?.unconnectedPads_property.addEBObserversFrom (&self.mObserversOf_unconnectedPads)
        self.mValue?.unconnectedPins_property.addEBObserversFrom (&self.mObserversOf_unconnectedPins)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : DeviceRoot? { return self.mValue }

  var prop : EBSelection <DeviceRoot?> { return .single (self.mValue) }

  func setProp (_ value : DeviceRoot?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : DeviceRoot?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : DeviceRoot) {
    if self.mValue === object {
      self.mValue = nil
    }
  }

  //····················································································································
  //   Observable atomic property: assignedPadProxies
  //····················································································································

  private var mObserversOf_assignedPadProxies = EBWeakEventSet ()

  //····················································································································

  var assignedPadProxies_property_selection : EBSelection <AssignedPadProxiesInDevice?> {
    if let model = self.propval {
      switch (model.assignedPadProxies_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_assignedPadProxies (_ inObserver : EBEvent) {
    self.mObserversOf_assignedPadProxies.insert (inObserver)
    if let object = self.propval {
      object.assignedPadProxies_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_assignedPadProxies (_ inObserver : EBEvent) {
    self.mObserversOf_assignedPadProxies.remove (inObserver)
    if let object = self.propval {
      object.assignedPadProxies_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: imageIsValid
  //····················································································································

  private var mObserversOf_imageIsValid = EBWeakEventSet ()

  //····················································································································

  var imageIsValid_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.imageIsValid_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_imageIsValid (_ inObserver : EBEvent) {
    self.mObserversOf_imageIsValid.insert (inObserver)
    if let object = self.propval {
      object.imageIsValid_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_imageIsValid (_ inObserver : EBEvent) {
    self.mObserversOf_imageIsValid.remove (inObserver)
    if let object = self.propval {
      object.imageIsValid_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: inconsistentPackagePadNameSetsMessage
  //····················································································································

  private var mObserversOf_inconsistentPackagePadNameSetsMessage = EBWeakEventSet ()

  //····················································································································

  var inconsistentPackagePadNameSetsMessage_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.inconsistentPackagePadNameSetsMessage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_inconsistentPackagePadNameSetsMessage (_ inObserver : EBEvent) {
    self.mObserversOf_inconsistentPackagePadNameSetsMessage.insert (inObserver)
    if let object = self.propval {
      object.inconsistentPackagePadNameSetsMessage_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_inconsistentPackagePadNameSetsMessage (_ inObserver : EBEvent) {
    self.mObserversOf_inconsistentPackagePadNameSetsMessage.remove (inObserver)
    if let object = self.propval {
      object.inconsistentPackagePadNameSetsMessage_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: inconsistentSymbolNameSetMessage
  //····················································································································

  private var mObserversOf_inconsistentSymbolNameSetMessage = EBWeakEventSet ()

  //····················································································································

  var inconsistentSymbolNameSetMessage_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.inconsistentSymbolNameSetMessage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_inconsistentSymbolNameSetMessage (_ inObserver : EBEvent) {
    self.mObserversOf_inconsistentSymbolNameSetMessage.insert (inObserver)
    if let object = self.propval {
      object.inconsistentSymbolNameSetMessage_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_inconsistentSymbolNameSetMessage (_ inObserver : EBEvent) {
    self.mObserversOf_inconsistentSymbolNameSetMessage.remove (inObserver)
    if let object = self.propval {
      object.inconsistentSymbolNameSetMessage_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: issues
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.issues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.mObserversOf_issues.insert (inObserver)
    if let object = self.propval {
      object.issues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.mObserversOf_issues.remove (inObserver)
    if let object = self.propval {
      object.issues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mComments
  //····················································································································

  private var mObserversOf_mComments = EBWeakEventSet ()

  //····················································································································

  var mComments_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mComments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mComments (_ inObserver : EBEvent) {
    self.mObserversOf_mComments.insert (inObserver)
    if let object = self.propval {
      object.mComments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComments (_ inObserver : EBEvent) {
    self.mObserversOf_mComments.remove (inObserver)
    if let object = self.propval {
      object.mComments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mDocs
  //····················································································································

  private var mObserversOf_mDocs = EBWeakEventSet ()

  //····················································································································

  var mDocs_property_selection : EBSelection <[DeviceDocumentation]> {
    if let model = self.propval {
      switch (model.mDocs_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mDocs (_ inObserver : EBEvent) {
    self.mObserversOf_mDocs.insert (inObserver)
    if let object = self.propval {
      object.mDocs_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mDocs (_ inObserver : EBEvent) {
    self.mObserversOf_mDocs.remove (inObserver)
    if let object = self.propval {
      object.mDocs_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mImageData
  //····················································································································

  private var mObserversOf_mImageData = EBWeakEventSet ()

  //····················································································································

  var mImageData_property_selection : EBSelection <Data?> {
    if let model = self.propval {
      switch (model.mImageData_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mImageData (_ inObserver : EBEvent) {
    self.mObserversOf_mImageData.insert (inObserver)
    if let object = self.propval {
      object.mImageData_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mImageData (_ inObserver : EBEvent) {
    self.mObserversOf_mImageData.remove (inObserver)
    if let object = self.propval {
      object.mImageData_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mPackageDisplayHorizontalFlip
  //····················································································································

  private var mObserversOf_mPackageDisplayHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  var mPackageDisplayHorizontalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mPackageDisplayHorizontalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPackageDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.mObserversOf_mPackageDisplayHorizontalFlip.insert (inObserver)
    if let object = self.propval {
      object.mPackageDisplayHorizontalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.mObserversOf_mPackageDisplayHorizontalFlip.remove (inObserver)
    if let object = self.propval {
      object.mPackageDisplayHorizontalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mPackageDisplayVerticalFlip
  //····················································································································

  private var mObserversOf_mPackageDisplayVerticalFlip = EBWeakEventSet ()

  //····················································································································

  var mPackageDisplayVerticalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mPackageDisplayVerticalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPackageDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.mObserversOf_mPackageDisplayVerticalFlip.insert (inObserver)
    if let object = self.propval {
      object.mPackageDisplayVerticalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.mObserversOf_mPackageDisplayVerticalFlip.remove (inObserver)
    if let object = self.propval {
      object.mPackageDisplayVerticalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mPackageDisplayZoom
  //····················································································································

  private var mObserversOf_mPackageDisplayZoom = EBWeakEventSet ()

  //····················································································································

  var mPackageDisplayZoom_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mPackageDisplayZoom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPackageDisplayZoom (_ inObserver : EBEvent) {
    self.mObserversOf_mPackageDisplayZoom.insert (inObserver)
    if let object = self.propval {
      object.mPackageDisplayZoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayZoom (_ inObserver : EBEvent) {
    self.mObserversOf_mPackageDisplayZoom.remove (inObserver)
    if let object = self.propval {
      object.mPackageDisplayZoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mPackages
  //····················································································································

  private var mObserversOf_mPackages = EBWeakEventSet ()

  //····················································································································

  var mPackages_property_selection : EBSelection <[PackageInDevice]> {
    if let model = self.propval {
      switch (model.mPackages_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mPackages (_ inObserver : EBEvent) {
    self.mObserversOf_mPackages.insert (inObserver)
    if let object = self.propval {
      object.mPackages_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackages (_ inObserver : EBEvent) {
    self.mObserversOf_mPackages.remove (inObserver)
    if let object = self.propval {
      object.mPackages_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mPadProxies
  //····················································································································

  private var mObserversOf_mPadProxies = EBWeakEventSet ()

  //····················································································································

  var mPadProxies_property_selection : EBSelection <[PadProxyInDevice]> {
    if let model = self.propval {
      switch (model.mPadProxies_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mPadProxies (_ inObserver : EBEvent) {
    self.mObserversOf_mPadProxies.insert (inObserver)
    if let object = self.propval {
      object.mPadProxies_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPadProxies (_ inObserver : EBEvent) {
    self.mObserversOf_mPadProxies.remove (inObserver)
    if let object = self.propval {
      object.mPadProxies_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mPrefix
  //····················································································································

  private var mObserversOf_mPrefix = EBWeakEventSet ()

  //····················································································································

  var mPrefix_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mPrefix_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPrefix (_ inObserver : EBEvent) {
    self.mObserversOf_mPrefix.insert (inObserver)
    if let object = self.propval {
      object.mPrefix_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPrefix (_ inObserver : EBEvent) {
    self.mObserversOf_mPrefix.remove (inObserver)
    if let object = self.propval {
      object.mPrefix_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mSelectedPageIndex
  //····················································································································

  private var mObserversOf_mSelectedPageIndex = EBWeakEventSet ()

  //····················································································································

  var mSelectedPageIndex_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mSelectedPageIndex_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.mObserversOf_mSelectedPageIndex.insert (inObserver)
    if let object = self.propval {
      object.mSelectedPageIndex_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.mObserversOf_mSelectedPageIndex.remove (inObserver)
    if let object = self.propval {
      object.mSelectedPageIndex_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mShowPackageBackPads
  //····················································································································

  private var mObserversOf_mShowPackageBackPads = EBWeakEventSet ()

  //····················································································································

  var mShowPackageBackPads_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mShowPackageBackPads_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mShowPackageBackPads (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackageBackPads.insert (inObserver)
    if let object = self.propval {
      object.mShowPackageBackPads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackageBackPads (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackageBackPads.remove (inObserver)
    if let object = self.propval {
      object.mShowPackageBackPads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mShowPackageFrontPads
  //····················································································································

  private var mObserversOf_mShowPackageFrontPads = EBWeakEventSet ()

  //····················································································································

  var mShowPackageFrontPads_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mShowPackageFrontPads_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mShowPackageFrontPads (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackageFrontPads.insert (inObserver)
    if let object = self.propval {
      object.mShowPackageFrontPads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackageFrontPads (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackageFrontPads.remove (inObserver)
    if let object = self.propval {
      object.mShowPackageFrontPads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mShowPackagePadNumbers
  //····················································································································

  private var mObserversOf_mShowPackagePadNumbers = EBWeakEventSet ()

  //····················································································································

  var mShowPackagePadNumbers_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mShowPackagePadNumbers_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mShowPackagePadNumbers (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackagePadNumbers.insert (inObserver)
    if let object = self.propval {
      object.mShowPackagePadNumbers_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackagePadNumbers (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackagePadNumbers.remove (inObserver)
    if let object = self.propval {
      object.mShowPackagePadNumbers_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mShowPackages
  //····················································································································

  private var mObserversOf_mShowPackages = EBWeakEventSet ()

  //····················································································································

  var mShowPackages_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mShowPackages_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mShowPackages (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackages.insert (inObserver)
    if let object = self.propval {
      object.mShowPackages_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackages (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackages.remove (inObserver)
    if let object = self.propval {
      object.mShowPackages_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mSymbolDisplayHorizontalFlip
  //····················································································································

  private var mObserversOf_mSymbolDisplayHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  var mSymbolDisplayHorizontalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mSymbolDisplayHorizontalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolDisplayHorizontalFlip.insert (inObserver)
    if let object = self.propval {
      object.mSymbolDisplayHorizontalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolDisplayHorizontalFlip.remove (inObserver)
    if let object = self.propval {
      object.mSymbolDisplayHorizontalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mSymbolDisplayVerticalFlip
  //····················································································································

  private var mObserversOf_mSymbolDisplayVerticalFlip = EBWeakEventSet ()

  //····················································································································

  var mSymbolDisplayVerticalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mSymbolDisplayVerticalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolDisplayVerticalFlip.insert (inObserver)
    if let object = self.propval {
      object.mSymbolDisplayVerticalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolDisplayVerticalFlip.remove (inObserver)
    if let object = self.propval {
      object.mSymbolDisplayVerticalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mSymbolDisplayZoom
  //····················································································································

  private var mObserversOf_mSymbolDisplayZoom = EBWeakEventSet ()

  //····················································································································

  var mSymbolDisplayZoom_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mSymbolDisplayZoom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolDisplayZoom (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolDisplayZoom.insert (inObserver)
    if let object = self.propval {
      object.mSymbolDisplayZoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolDisplayZoom (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolDisplayZoom.remove (inObserver)
    if let object = self.propval {
      object.mSymbolDisplayZoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mSymbolInstances
  //····················································································································

  private var mObserversOf_mSymbolInstances = EBWeakEventSet ()

  //····················································································································

  var mSymbolInstances_property_selection : EBSelection <[SymbolInstanceInDevice]> {
    if let model = self.propval {
      switch (model.mSymbolInstances_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolInstances (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolInstances.insert (inObserver)
    if let object = self.propval {
      object.mSymbolInstances_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolInstances (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolInstances.remove (inObserver)
    if let object = self.propval {
      object.mSymbolInstances_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mSymbolTypes
  //····················································································································

  private var mObserversOf_mSymbolTypes = EBWeakEventSet ()

  //····················································································································

  var mSymbolTypes_property_selection : EBSelection <[SymbolTypeInDevice]> {
    if let model = self.propval {
      switch (model.mSymbolTypes_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolTypes (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolTypes.insert (inObserver)
    if let object = self.propval {
      object.mSymbolTypes_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolTypes (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolTypes.remove (inObserver)
    if let object = self.propval {
      object.mSymbolTypes_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: mTitle
  //····················································································································

  private var mObserversOf_mTitle = EBWeakEventSet ()

  //····················································································································

  var mTitle_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.mTitle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mTitle (_ inObserver : EBEvent) {
    self.mObserversOf_mTitle.insert (inObserver)
    if let object = self.propval {
      object.mTitle_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mTitle (_ inObserver : EBEvent) {
    self.mObserversOf_mTitle.remove (inObserver)
    if let object = self.propval {
      object.mTitle_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: packagePadNameSetsAreConsistent
  //····················································································································

  private var mObserversOf_packagePadNameSetsAreConsistent = EBWeakEventSet ()

  //····················································································································

  var packagePadNameSetsAreConsistent_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.packagePadNameSetsAreConsistent_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_packagePadNameSetsAreConsistent (_ inObserver : EBEvent) {
    self.mObserversOf_packagePadNameSetsAreConsistent.insert (inObserver)
    if let object = self.propval {
      object.packagePadNameSetsAreConsistent_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_packagePadNameSetsAreConsistent (_ inObserver : EBEvent) {
    self.mObserversOf_packagePadNameSetsAreConsistent.remove (inObserver)
    if let object = self.propval {
      object.packagePadNameSetsAreConsistent_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: symbolNameAreConsistent
  //····················································································································

  private var mObserversOf_symbolNameAreConsistent = EBWeakEventSet ()

  //····················································································································

  var symbolNameAreConsistent_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.symbolNameAreConsistent_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_symbolNameAreConsistent (_ inObserver : EBEvent) {
    self.mObserversOf_symbolNameAreConsistent.insert (inObserver)
    if let object = self.propval {
      object.symbolNameAreConsistent_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolNameAreConsistent (_ inObserver : EBEvent) {
    self.mObserversOf_symbolNameAreConsistent.remove (inObserver)
    if let object = self.propval {
      object.symbolNameAreConsistent_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: symbolTypeNames
  //····················································································································

  private var mObserversOf_symbolTypeNames = EBWeakEventSet ()

  //····················································································································

  var symbolTypeNames_property_selection : EBSelection <StringArray?> {
    if let model = self.propval {
      switch (model.symbolTypeNames_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_symbolTypeNames (_ inObserver : EBEvent) {
    self.mObserversOf_symbolTypeNames.insert (inObserver)
    if let object = self.propval {
      object.symbolTypeNames_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolTypeNames (_ inObserver : EBEvent) {
    self.mObserversOf_symbolTypeNames.remove (inObserver)
    if let object = self.propval {
      object.symbolTypeNames_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: unconnectedPads
  //····················································································································

  private var mObserversOf_unconnectedPads = EBWeakEventSet ()

  //····················································································································

  var unconnectedPads_property_selection : EBSelection <StringArray?> {
    if let model = self.propval {
      switch (model.unconnectedPads_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_unconnectedPads (_ inObserver : EBEvent) {
    self.mObserversOf_unconnectedPads.insert (inObserver)
    if let object = self.propval {
      object.unconnectedPads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_unconnectedPads (_ inObserver : EBEvent) {
    self.mObserversOf_unconnectedPads.remove (inObserver)
    if let object = self.propval {
      object.unconnectedPads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: unconnectedPins
  //····················································································································

  private var mObserversOf_unconnectedPins = EBWeakEventSet ()

  //····················································································································

  var unconnectedPins_property_selection : EBSelection <UnconnectedSymbolPinsInDevice?> {
    if let model = self.propval {
      switch (model.unconnectedPins_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_unconnectedPins (_ inObserver : EBEvent) {
    self.mObserversOf_unconnectedPins.insert (inObserver)
    if let object = self.propval {
      object.unconnectedPins_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_unconnectedPins (_ inObserver : EBEvent) {
    self.mObserversOf_unconnectedPins.remove (inObserver)
    if let object = self.propval {
      object.unconnectedPins_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
