//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mFileData : class {
  var mFileData : Data { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mName : class {
  var mName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mVersion : class {
  var mVersion : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mStrokeBezierPath : class {
  var mStrokeBezierPath : NSBezierPath { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mX : class {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mY : class {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_versionString : class {
  var versionString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_frontSidePadFilledBezierPathArray : class {
  var frontSidePadFilledBezierPathArray : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_backSidePadFilledBezierPathArray : class {
  var backSidePadFilledBezierPathArray : BezierPathArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class PackageInDevice : EBGraphicManagedObject,
         PackageInDevice_mFileData,
         PackageInDevice_mName,
         PackageInDevice_mVersion,
         PackageInDevice_mStrokeBezierPath,
         PackageInDevice_mX,
         PackageInDevice_mY,
         PackageInDevice_versionString,
         PackageInDevice_frontSidePadFilledBezierPathArray,
         PackageInDevice_backSidePadFilledBezierPathArray,
         PackageInDevice_objectDisplay,
         PackageInDevice_selectionDisplay {

  //····················································································································
  //   To many property: mPads
  //····················································································································

  var mPads_property = StoredArrayOf_PackagePad ()

  //····················································································································

  var mPads_property_selection : EBSelection < [PackagePad] > {
      return self.mPads_property.prop
  }

  //····················································································································
  //   To many property: mZones
  //····················································································································

  var mZones_property = StoredArrayOf_PackageZone ()

  //····················································································································

  var mZones_property_selection : EBSelection < [PackageZone] > {
      return self.mZones_property.prop
  }

  //····················································································································
  //   To many property: mSlavePads
  //····················································································································

  var mSlavePads_property = StoredArrayOf_PackageSlavePad ()

  //····················································································································

  var mSlavePads_property_selection : EBSelection < [PackageSlavePad] > {
      return self.mSlavePads_property.prop
  }

  //····················································································································
  //   Atomic property: mFileData
  //····················································································································

  var mFileData_property = EBStoredProperty_Data (defaultValue: Data ())

  //····················································································································

  var mFileData : Data {
    get {
      return self.mFileData_property.propval
    }
    set {
      self.mFileData_property.setProp (newValue)
    }
  }

  //····················································································································

  var mFileData_property_selection : EBSelection <Data> {
    return self.mFileData_property.prop
  }

  //····················································································································
  //   Atomic property: mName
  //····················································································································

  var mName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mName : String {
    get {
      return self.mName_property.propval
    }
    set {
      self.mName_property.setProp (newValue)
    }
  }

  //····················································································································

  var mName_property_selection : EBSelection <String> {
    return self.mName_property.prop
  }

  //····················································································································
  //   Atomic property: mVersion
  //····················································································································

  var mVersion_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mVersion : Int {
    get {
      return self.mVersion_property.propval
    }
    set {
      self.mVersion_property.setProp (newValue)
    }
  }

  //····················································································································

  var mVersion_property_selection : EBSelection <Int> {
    return self.mVersion_property.prop
  }

  //····················································································································
  //   Atomic property: mStrokeBezierPath
  //····················································································································

  var mStrokeBezierPath_property = EBStoredProperty_NSBezierPath (defaultValue: NSBezierPath ())

  //····················································································································

  var mStrokeBezierPath : NSBezierPath {
    get {
      return self.mStrokeBezierPath_property.propval
    }
    set {
      self.mStrokeBezierPath_property.setProp (newValue)
    }
  }

  //····················································································································

  var mStrokeBezierPath_property_selection : EBSelection <NSBezierPath> {
    return self.mStrokeBezierPath_property.prop
  }

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  var mX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mX : Int {
    get {
      return self.mX_property.propval
    }
    set {
      self.mX_property.setProp (newValue)
    }
  }

  //····················································································································

  var mX_property_selection : EBSelection <Int> {
    return self.mX_property.prop
  }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  var mY_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mY : Int {
    get {
      return self.mY_property.propval
    }
    set {
      self.mY_property.setProp (newValue)
    }
  }

  //····················································································································

  var mY_property_selection : EBSelection <Int> {
    return self.mY_property.prop
  }

  //····················································································································
  //   To one property: mRoot
  //····················································································································

  var mRoot_property = ToOneRelationship_PackageInDevice_mRoot ()

  //····················································································································

  var mRoot_property_selection : EBSelection <Bool> {
    return .single (self.mRoot_property.propval == nil)
  }

  //····················································································································
  //   Transient property: versionString
  //····················································································································

  var versionString_property = EBTransientProperty_String ()

  //····················································································································

  var versionString_property_selection : EBSelection <String> {
    return self.versionString_property.prop
  }

  //····················································································································

  var versionString : String? {
    switch self.versionString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontSidePadFilledBezierPathArray
  //····················································································································

  var frontSidePadFilledBezierPathArray_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var frontSidePadFilledBezierPathArray_property_selection : EBSelection <BezierPathArray> {
    return self.frontSidePadFilledBezierPathArray_property.prop
  }

  //····················································································································

  var frontSidePadFilledBezierPathArray : BezierPathArray? {
    switch self.frontSidePadFilledBezierPathArray_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backSidePadFilledBezierPathArray
  //····················································································································

  var backSidePadFilledBezierPathArray_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var backSidePadFilledBezierPathArray_property_selection : EBSelection <BezierPathArray> {
    return self.backSidePadFilledBezierPathArray_property.prop
  }

  //····················································································································

  var backSidePadFilledBezierPathArray : BezierPathArray? {
    switch self.backSidePadFilledBezierPathArray_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ undoManager : EBUndoManager?, file: String, _ line : Int) {
    super.init (undoManager, file: file, line)
  //--- To many property: mPads (no option)
    self.mPads_property.undoManager = self.undoManager
  //--- To many property: mZones (no option)
    self.mZones_property.undoManager = self.undoManager
  //--- To many property: mSlavePads (no option)
    self.mSlavePads_property.undoManager = self.undoManager
  //--- Atomic property: mFileData
    self.mFileData_property.undoManager = self.undoManager
  //--- Atomic property: mName
    self.mName_property.undoManager = self.undoManager
  //--- Atomic property: mVersion
    self.mVersion_property.undoManager = self.undoManager
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.undoManager = self.undoManager
  //--- Atomic property: mX
    self.mX_property.undoManager = self.undoManager
  //--- Atomic property: mY
    self.mY_property.undoManager = self.undoManager
  //--- To one property: mRoot
    self.mRoot_property.owner = self
  //--- Atomic property: versionString
    self.versionString_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mVersion_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mVersion_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackageInDevice_versionString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mVersion_property.addEBObserver (self.versionString_property)
  //--- Atomic property: frontSidePadFilledBezierPathArray
    self.frontSidePadFilledBezierPathArray_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mPads_property_selection.kind ()
        kind &= unwSelf.mSlavePads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mPads_property_selection, unwSelf.mSlavePads_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_PackageInDevice_frontSidePadFilledBezierPathArray (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPads_property.addEBObserverOf_frontSideFilledBezierPath (self.frontSidePadFilledBezierPathArray_property)
    self.mSlavePads_property.addEBObserverOf_frontSideFilledBezierPath (self.frontSidePadFilledBezierPathArray_property)
  //--- Atomic property: backSidePadFilledBezierPathArray
    self.backSidePadFilledBezierPathArray_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mPads_property_selection.kind ()
        kind &= unwSelf.mSlavePads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mPads_property_selection, unwSelf.mSlavePads_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_PackageInDevice_backSidePadFilledBezierPathArray (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPads_property.addEBObserverOf_backSideFilledBezierPath (self.backSidePadFilledBezierPathArray_property)
    self.mSlavePads_property.addEBObserverOf_backSideFilledBezierPath (self.backSidePadFilledBezierPathArray_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mPads_property_selection.kind ()
        kind &= unwSelf.mSlavePads_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mShowPackagePadNumbers_property_selection.kind ()
        kind &= unwSelf.mStrokeBezierPath_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mShowPackages_property_selection.kind ()
        kind &= g_Preferences!.packageColor_property_selection.kind ()
        kind &= g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection.kind ()
        kind &= unwSelf.frontSidePadFilledBezierPathArray_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mShowPackageFrontPads_property_selection.kind ()
        kind &= g_Preferences!.frontSidePadColor_property_selection.kind ()
        kind &= unwSelf.backSidePadFilledBezierPathArray_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mShowPackageBackPads_property_selection.kind ()
        kind &= g_Preferences!.backSidePadColor_property_selection.kind ()
        kind &= unwSelf.mName_property_selection.kind ()
        kind &= unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mPads_property_selection, unwSelf.mSlavePads_property_selection, unwSelf.mRoot_property.mShowPackagePadNumbers_property_selection, unwSelf.mStrokeBezierPath_property_selection, unwSelf.mRoot_property.mShowPackages_property_selection, g_Preferences!.packageColor_property_selection, g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection, unwSelf.frontSidePadFilledBezierPathArray_property_selection, unwSelf.mRoot_property.mShowPackageFrontPads_property_selection, g_Preferences!.frontSidePadColor_property_selection, unwSelf.backSidePadFilledBezierPathArray_property_selection, unwSelf.mRoot_property.mShowPackageBackPads_property_selection, g_Preferences!.backSidePadColor_property_selection, unwSelf.mName_property_selection, unwSelf.mX_property_selection, unwSelf.mY_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11), .single (let v12), .single (let v13), .single (let v14), .single (let v15)) :
            return .single (transient_PackageInDevice_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPads_property.addEBObserverOf_padNumberDisplay (self.objectDisplay_property)
    self.mSlavePads_property.addEBObserverOf_padNumberDisplay (self.objectDisplay_property)
    self.mRoot_property.addEBObserverOf_mShowPackagePadNumbers (self.objectDisplay_property)
    self.mStrokeBezierPath_property.addEBObserver (self.objectDisplay_property)
    self.mRoot_property.addEBObserverOf_mShowPackages (self.objectDisplay_property)
    g_Preferences?.packageColor_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.addEBObserver (self.objectDisplay_property)
    self.frontSidePadFilledBezierPathArray_property.addEBObserver (self.objectDisplay_property)
    self.mRoot_property.addEBObserverOf_mShowPackageFrontPads (self.objectDisplay_property)
    g_Preferences?.frontSidePadColor_property.addEBObserver (self.objectDisplay_property)
    self.backSidePadFilledBezierPathArray_property.addEBObserver (self.objectDisplay_property)
    self.mRoot_property.addEBObserverOf_mShowPackageBackPads (self.objectDisplay_property)
    g_Preferences?.backSidePadColor_property.addEBObserver (self.objectDisplay_property)
    self.mName_property.addEBObserver (self.objectDisplay_property)
    self.mX_property.addEBObserver (self.objectDisplay_property)
    self.mY_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mStrokeBezierPath_property_selection.kind ()
        kind &= g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection.kind ()
        kind &= unwSelf.frontSidePadFilledBezierPathArray_property_selection.kind ()
        kind &= unwSelf.backSidePadFilledBezierPathArray_property_selection.kind ()
        kind &= unwSelf.mName_property_selection.kind ()
        kind &= unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mStrokeBezierPath_property_selection, g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection, unwSelf.frontSidePadFilledBezierPathArray_property_selection, unwSelf.backSidePadFilledBezierPathArray_property_selection, unwSelf.mName_property_selection, unwSelf.mX_property_selection, unwSelf.mY_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6)) :
            return .single (transient_PackageInDevice_selectionDisplay (v0, v1, v2, v3, v4, v5, v6))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mStrokeBezierPath_property.addEBObserver (self.selectionDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.addEBObserver (self.selectionDisplay_property)
    self.frontSidePadFilledBezierPathArray_property.addEBObserver (self.selectionDisplay_property)
    self.backSidePadFilledBezierPathArray_property.addEBObserver (self.selectionDisplay_property)
    self.mName_property.addEBObserver (self.selectionDisplay_property)
    self.mX_property.addEBObserver (self.selectionDisplay_property)
    self.mY_property.addEBObserver (self.selectionDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- register properties for handling signature
    self.mFileData_property.setSignatureObserver (observer:self)
    self.mName_property.setSignatureObserver (observer:self)
    self.mStrokeBezierPath_property.setSignatureObserver (observer:self)
    self.mVersion_property.setSignatureObserver (observer:self)
    self.mX_property.setSignatureObserver (observer:self)
    self.mY_property.setSignatureObserver (observer:self)
  //--- Extern delegates
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.mVersion_property.removeEBObserver (self.versionString_property)
    self.mPads_property.removeEBObserverOf_frontSideFilledBezierPath (self.frontSidePadFilledBezierPathArray_property)
    self.mSlavePads_property.removeEBObserverOf_frontSideFilledBezierPath (self.frontSidePadFilledBezierPathArray_property)
    self.mPads_property.removeEBObserverOf_backSideFilledBezierPath (self.backSidePadFilledBezierPathArray_property)
    self.mSlavePads_property.removeEBObserverOf_backSideFilledBezierPath (self.backSidePadFilledBezierPathArray_property)
    self.mPads_property.removeEBObserverOf_padNumberDisplay (self.objectDisplay_property)
    self.mSlavePads_property.removeEBObserverOf_padNumberDisplay (self.objectDisplay_property)
    self.mRoot_property.removeEBObserverOf_mShowPackagePadNumbers (self.objectDisplay_property)
    self.mStrokeBezierPath_property.removeEBObserver (self.objectDisplay_property)
    self.mRoot_property.removeEBObserverOf_mShowPackages (self.objectDisplay_property)
    g_Preferences?.packageColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.removeEBObserver (self.objectDisplay_property)
    self.frontSidePadFilledBezierPathArray_property.removeEBObserver (self.objectDisplay_property)
    self.mRoot_property.removeEBObserverOf_mShowPackageFrontPads (self.objectDisplay_property)
    g_Preferences?.frontSidePadColor_property.removeEBObserver (self.objectDisplay_property)
    self.backSidePadFilledBezierPathArray_property.removeEBObserver (self.objectDisplay_property)
    self.mRoot_property.removeEBObserverOf_mShowPackageBackPads (self.objectDisplay_property)
    g_Preferences?.backSidePadColor_property.removeEBObserver (self.objectDisplay_property)
    self.mName_property.removeEBObserver (self.objectDisplay_property)
    self.mX_property.removeEBObserver (self.objectDisplay_property)
    self.mY_property.removeEBObserver (self.objectDisplay_property)
    self.mStrokeBezierPath_property.removeEBObserver (self.selectionDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.removeEBObserver (self.selectionDisplay_property)
    self.frontSidePadFilledBezierPathArray_property.removeEBObserver (self.selectionDisplay_property)
    self.backSidePadFilledBezierPathArray_property.removeEBObserver (self.selectionDisplay_property)
    self.mName_property.removeEBObserver (self.selectionDisplay_property)
    self.mX_property.removeEBObserver (self.selectionDisplay_property)
    self.mY_property.removeEBObserver (self.selectionDisplay_property)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mFileData",
      idx:self.mFileData_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mFileData_property.mObserverExplorer,
      valueExplorer:&self.mFileData_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mName",
      idx:self.mName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mName_property.mObserverExplorer,
      valueExplorer:&self.mName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mVersion",
      idx:self.mVersion_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mVersion_property.mObserverExplorer,
      valueExplorer:&self.mVersion_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mStrokeBezierPath",
      idx:self.mStrokeBezierPath_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mStrokeBezierPath_property.mObserverExplorer,
      valueExplorer:&self.mStrokeBezierPath_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mX",
      idx:self.mX_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mX_property.mObserverExplorer,
      valueExplorer:&self.mX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mY",
      idx:self.mY_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mY_property.mObserverExplorer,
      valueExplorer:&self.mY_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "versionString",
      idx:self.versionString_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.versionString_property.mObserverExplorer,
      valueExplorer:&self.versionString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontSidePadFilledBezierPathArray",
      idx:self.frontSidePadFilledBezierPathArray_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.frontSidePadFilledBezierPathArray_property.mObserverExplorer,
      valueExplorer:&self.frontSidePadFilledBezierPathArray_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backSidePadFilledBezierPathArray",
      idx:self.backSidePadFilledBezierPathArray_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.backSidePadFilledBezierPathArray_property.mObserverExplorer,
      valueExplorer:&self.backSidePadFilledBezierPathArray_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx:self.objectDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.objectDisplay_property.mObserverExplorer,
      valueExplorer:&self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx:self.selectionDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectionDisplay_property.mObserverExplorer,
      valueExplorer:&self.selectionDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "mPads",
      idx:mPads_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mPads_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mZones",
      idx:mZones_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mZones_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mSlavePads",
      idx:mSlavePads_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mSlavePads_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "mRoot",
      idx:self.mRoot_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mRoot_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- To many property: mPads
    self.mPads_property.mValueExplorer = nil
  //--- To many property: mZones
    self.mZones_property.mValueExplorer = nil
  //--- To many property: mSlavePads
    self.mSlavePads_property.mValueExplorer = nil
  //--- Atomic property: mFileData
    self.mFileData_property.mObserverExplorer = nil
    self.mFileData_property.mValueExplorer = nil
  //--- Atomic property: mName
    self.mName_property.mObserverExplorer = nil
    self.mName_property.mValueExplorer = nil
  //--- Atomic property: mVersion
    self.mVersion_property.mObserverExplorer = nil
    self.mVersion_property.mValueExplorer = nil
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.mObserverExplorer = nil
    self.mStrokeBezierPath_property.mValueExplorer = nil
  //--- Atomic property: mX
    self.mX_property.mObserverExplorer = nil
    self.mX_property.mValueExplorer = nil
  //--- Atomic property: mY
    self.mY_property.mObserverExplorer = nil
    self.mY_property.mValueExplorer = nil
  //--- To one property: mRoot
    self.mRoot_property.mObserverExplorer = nil
    self.mRoot_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override func cleanUpToManyRelationships () {
    self.mPads_property.setProp ([])
    self.mZones_property.setProp ([])
    self.mSlavePads_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override func cleanUpToOneRelationships () {
    self.mRoot_property.setProp (nil)
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- To many property: mPads
    self.store (
      managedObjectArray: mPads_property.propval as NSArray,
      relationshipName: "mPads",
      intoDictionary: ioDictionary
    )
  //--- To many property: mZones
    self.store (
      managedObjectArray: mZones_property.propval as NSArray,
      relationshipName: "mZones",
      intoDictionary: ioDictionary
    )
  //--- To many property: mSlavePads
    self.store (
      managedObjectArray: mSlavePads_property.propval as NSArray,
      relationshipName: "mSlavePads",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: mFileData
    self.mFileData_property.storeIn (dictionary: ioDictionary, forKey:"mFileData")
  //--- Atomic property: mName
    self.mName_property.storeIn (dictionary: ioDictionary, forKey:"mName")
  //--- Atomic property: mVersion
    self.mVersion_property.storeIn (dictionary: ioDictionary, forKey:"mVersion")
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.storeIn (dictionary: ioDictionary, forKey:"mStrokeBezierPath")
  //--- Atomic property: mX
    self.mX_property.storeIn (dictionary: ioDictionary, forKey:"mX")
  //--- Atomic property: mY
    self.mY_property.storeIn (dictionary: ioDictionary, forKey:"mY")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mPads
    self.mPads_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mPads",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [PackagePad])
  //--- To many property: mZones
    self.mZones_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mZones",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [PackageZone])
  //--- To many property: mSlavePads
    self.mSlavePads_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mSlavePads",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [PackageSlavePad])
  //--- To one property: mRoot
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mRoot",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? DeviceRoot {
        self.mRoot_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mFileData
    self.mFileData_property.readFrom (dictionary: inDictionary, forKey:"mFileData")
  //--- Atomic property: mName
    self.mName_property.readFrom (dictionary: inDictionary, forKey:"mName")
  //--- Atomic property: mVersion
    self.mVersion_property.readFrom (dictionary: inDictionary, forKey:"mVersion")
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.readFrom (dictionary: inDictionary, forKey:"mStrokeBezierPath")
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey:"mX")
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey:"mY")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mPads
    for managedObject : EBManagedObject in self.mPads_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mZones
    for managedObject : EBManagedObject in self.mZones_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mSlavePads
    for managedObject : EBManagedObject in self.mSlavePads_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mRoot
    if let managedObject = self.mRoot_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.mFileData_property.signature ())
    crc.accumulateUInt32 (self.mName_property.signature ())
    crc.accumulateUInt32 (self.mStrokeBezierPath_property.signature ())
    crc.accumulateUInt32 (self.mVersion_property.signature ())
    crc.accumulateUInt32 (self.mX_property.signature ())
    crc.accumulateUInt32 (self.mY_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageInDevice : ReadOnlyAbstractArrayProperty <PackageInDevice> {

  //····················································································································
  //   Observers of 'mFileData' stored property
  //····················································································································

  private var mObserversOf_mFileData = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mFileData (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mFileData.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mFileData_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mFileData (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mFileData.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mFileData_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mFileData_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mFileData.apply ( {(_ observer : EBEvent) in
        managedObject.mFileData_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mFileData_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mFileData.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mFileData_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mName' stored property
  //····················································································································

  private var mObserversOf_mName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mName_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mName.apply ( {(_ observer : EBEvent) in
        managedObject.mName_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mName_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mName.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mName_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mVersion' stored property
  //····················································································································

  private var mObserversOf_mVersion = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mVersion (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mVersion.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mVersion_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mVersion (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mVersion.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mVersion_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mVersion_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mVersion.apply ( {(_ observer : EBEvent) in
        managedObject.mVersion_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mVersion_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mVersion.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mVersion_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mStrokeBezierPath' stored property
  //····················································································································

  private var mObserversOf_mStrokeBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mStrokeBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mStrokeBezierPath.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mStrokeBezierPath_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mStrokeBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mStrokeBezierPath.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mStrokeBezierPath_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mStrokeBezierPath_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mStrokeBezierPath.apply ( {(_ observer : EBEvent) in
        managedObject.mStrokeBezierPath_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mStrokeBezierPath_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mStrokeBezierPath.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mStrokeBezierPath_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mX' stored property
  //····················································································································

  private var mObserversOf_mX = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mX (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mX.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mX (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mX.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mX_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mX_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mX.apply ( {(_ observer : EBEvent) in
        managedObject.mX_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mX_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mX.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mX_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mY' stored property
  //····················································································································

  private var mObserversOf_mY = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mY (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mY.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mY (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mY.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mY_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mY_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mY.apply ( {(_ observer : EBEvent) in
        managedObject.mY_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mY_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mY.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mY_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'versionString' transient property
  //····················································································································

  private var mObserversOf_versionString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_versionString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.versionString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_versionString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.versionString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_versionString_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_versionString.apply ( {(_ observer : EBEvent) in
        managedObject.versionString_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_versionString_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_versionString.apply ( {(_ observer : EBEvent) in
        managedObject.versionString_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································
  //   Observers of 'frontSidePadFilledBezierPathArray' transient property
  //····················································································································

  private var mObserversOf_frontSidePadFilledBezierPathArray = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_frontSidePadFilledBezierPathArray (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_frontSidePadFilledBezierPathArray.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontSidePadFilledBezierPathArray_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_frontSidePadFilledBezierPathArray (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_frontSidePadFilledBezierPathArray.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.frontSidePadFilledBezierPathArray_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_frontSidePadFilledBezierPathArray_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_frontSidePadFilledBezierPathArray.apply ( {(_ observer : EBEvent) in
        managedObject.frontSidePadFilledBezierPathArray_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_frontSidePadFilledBezierPathArray_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_frontSidePadFilledBezierPathArray.apply ( {(_ observer : EBEvent) in
        managedObject.frontSidePadFilledBezierPathArray_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································
  //   Observers of 'backSidePadFilledBezierPathArray' transient property
  //····················································································································

  private var mObserversOf_backSidePadFilledBezierPathArray = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_backSidePadFilledBezierPathArray (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_backSidePadFilledBezierPathArray.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backSidePadFilledBezierPathArray_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_backSidePadFilledBezierPathArray (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_backSidePadFilledBezierPathArray.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.backSidePadFilledBezierPathArray_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_backSidePadFilledBezierPathArray_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_backSidePadFilledBezierPathArray.apply ( {(_ observer : EBEvent) in
        managedObject.backSidePadFilledBezierPathArray_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_backSidePadFilledBezierPathArray_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_backSidePadFilledBezierPathArray.apply ( {(_ observer : EBEvent) in
        managedObject.backSidePadFilledBezierPathArray_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply ( {(_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply ( {(_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply ( {(_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply ( {(_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_PackageInDevice : ReadOnlyArrayOf_PackageInDevice {

  //····················································································································

  var readModelFunction : Optional < () -> EBSelection < [PackageInDevice] > > = nil

  //····················································································································

  override var propset : Set <PackageInDevice> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [PackageInDevice] > {
    self.computeArrayAndSet ()
    return self.prop_cache!  
  }
 
  //····················································································································

  override var propval : [PackageInDevice] {
    self.computeArrayAndSet ()
    if let value = self.prop_cache {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <PackageInDevice> ()

  //····················································································································

  private var prop_cache : EBSelection < [PackageInDevice] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.readModelFunction, self.prop_cache == nil {
      self.prop_cache = unwrappedComputeFunction ()
      let newSet : Set <PackageInDevice>
      switch self.prop_cache! {
      case .multiple, .empty :
        newSet = Set <PackageInDevice> ()
      case .single (let array) :
       newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_mFileData_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mVersion_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mStrokeBezierPath_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mX_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mY_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_versionString_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_frontSidePadFilledBezierPathArray_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_backSidePadFilledBezierPathArray_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_mFileData_toElementsOfSet (addedSet)
      self.addEBObserversOf_mName_toElementsOfSet (addedSet)
      self.addEBObserversOf_mVersion_toElementsOfSet (addedSet)
      self.addEBObserversOf_mStrokeBezierPath_toElementsOfSet (addedSet)
      self.addEBObserversOf_mX_toElementsOfSet (addedSet)
      self.addEBObserversOf_mY_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_versionString_toElementsOfSet (addedSet)
      self.addEBObserversOf_frontSidePadFilledBezierPathArray_toElementsOfSet (addedSet)
      self.addEBObserversOf_backSidePadFilledBezierPathArray_toElementsOfSet (addedSet)
      self.addEBObserversOf_objectDisplay_toElementsOfSet (addedSet)
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.prop_cache == nil {
      self.prop_cache = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.prop_cache != nil {
      self.prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackageInDevice : ReadOnlyArrayOf_PackageInDevice {

  //····················································································································
 
  func setProp (_ value :  [PackageInDevice]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_PackageInDevice : ReadWriteArrayOf_PackageInDevice, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : PackageInDevice?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [PackageInDevice] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.undoManager, "PackageInDevice") as? PackageInDevice {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <PackageInDevice> ()
  private var mValue = [PackageInDevice] () {
    didSet {
      self.postEvent ()
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.undoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          self.setOppositeRelationship? (nil)
          managedObject.mFileData_property.mSetterDelegate = nil
          managedObject.mName_property.mSetterDelegate = nil
          managedObject.mVersion_property.mSetterDelegate = nil
          managedObject.mStrokeBezierPath_property.mSetterDelegate = nil
          managedObject.mX_property.mSetterDelegate = nil
          managedObject.mY_property.mSetterDelegate = nil
        }
        self.removeEBObserversOf_mFileData_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mName_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mVersion_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mStrokeBezierPath_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mX_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mY_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_versionString_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_frontSidePadFilledBezierPathArray_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_backSidePadFilledBezierPathArray_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        for managedObject : PackageInDevice in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          self.setOppositeRelationship? (managedObject)
          managedObject.mFileData_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mName_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mVersion_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mStrokeBezierPath_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mX_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mY_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
        }
        self.addEBObserversOf_mFileData_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mName_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mVersion_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mStrokeBezierPath_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mX_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mY_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_versionString_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_frontSidePadFilledBezierPathArray_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_backSidePadFilledBezierPathArray_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_objectDisplay_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [kEntityKey] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [PackageInDevice] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [PackageInDevice]) { self.mValue = inValue }

  //····················································································································

  override var propval : [PackageInDevice] { return self.mValue }

  //····················································································································

  override var propset : Set <PackageInDevice> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [PackageInDevice]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : PackageInDevice) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : PackageInDevice) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: mRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_PackageInDevice_mRoot : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : PackageInDevice? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  private var mValue : DeviceRoot? {
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.undoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        if let unwrappedOldValue = oldValue {
          unwrappedOldValue.packages_property.remove (unwrappedOwner)
        }
      //--- Set new opposite relation ship
        if let unwrappedValue = self.mValue {
          unwrappedValue.packages_property.add (unwrappedOwner)
        }
      //--- Remove property observers of old object
        oldValue?.comments_property.removeEBObserversFrom (self.mObserversOf_comments)
        oldValue?.imageIsValid_property.removeEBObserversFrom (self.mObserversOf_imageIsValid)
        oldValue?.issues_property.removeEBObserversFrom (self.mObserversOf_issues)
        oldValue?.mPackageDisplayHorizontalFlip_property.removeEBObserversFrom (self.mObserversOf_mPackageDisplayHorizontalFlip)
        oldValue?.mPackageDisplayVerticalFlip_property.removeEBObserversFrom (self.mObserversOf_mPackageDisplayVerticalFlip)
        oldValue?.mPackageDisplayZoom_property.removeEBObserversFrom (self.mObserversOf_mPackageDisplayZoom)
        oldValue?.mShowPackageBackPads_property.removeEBObserversFrom (self.mObserversOf_mShowPackageBackPads)
        oldValue?.mShowPackageFrontPads_property.removeEBObserversFrom (self.mObserversOf_mShowPackageFrontPads)
        oldValue?.mShowPackagePadNumbers_property.removeEBObserversFrom (self.mObserversOf_mShowPackagePadNumbers)
        oldValue?.mShowPackages_property.removeEBObserversFrom (self.mObserversOf_mShowPackages)
        oldValue?.prefix_property.removeEBObserversFrom (self.mObserversOf_prefix)
        oldValue?.representationImageData_property.removeEBObserversFrom (self.mObserversOf_representationImageData)
        oldValue?.selectedPageIndex_property.removeEBObserversFrom (self.mObserversOf_selectedPageIndex)
        oldValue?.title_property.removeEBObserversFrom (self.mObserversOf_title)
      //--- Add property observers to new object
        self.mValue?.comments_property.addEBObserversFrom (self.mObserversOf_comments)
        self.mValue?.imageIsValid_property.addEBObserversFrom (self.mObserversOf_imageIsValid)
        self.mValue?.issues_property.addEBObserversFrom (self.mObserversOf_issues)
        self.mValue?.mPackageDisplayHorizontalFlip_property.addEBObserversFrom (self.mObserversOf_mPackageDisplayHorizontalFlip)
        self.mValue?.mPackageDisplayVerticalFlip_property.addEBObserversFrom (self.mObserversOf_mPackageDisplayVerticalFlip)
        self.mValue?.mPackageDisplayZoom_property.addEBObserversFrom (self.mObserversOf_mPackageDisplayZoom)
        self.mValue?.mShowPackageBackPads_property.addEBObserversFrom (self.mObserversOf_mShowPackageBackPads)
        self.mValue?.mShowPackageFrontPads_property.addEBObserversFrom (self.mObserversOf_mShowPackageFrontPads)
        self.mValue?.mShowPackagePadNumbers_property.addEBObserversFrom (self.mObserversOf_mShowPackagePadNumbers)
        self.mValue?.mShowPackages_property.addEBObserversFrom (self.mObserversOf_mShowPackages)
        self.mValue?.prefix_property.addEBObserversFrom (self.mObserversOf_prefix)
        self.mValue?.representationImageData_property.addEBObserversFrom (self.mObserversOf_representationImageData)
        self.mValue?.selectedPageIndex_property.addEBObserversFrom (self.mObserversOf_selectedPageIndex)
        self.mValue?.title_property.addEBObserversFrom (self.mObserversOf_title)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : DeviceRoot? { get { return self.mValue } }

  var prop : EBSelection <DeviceRoot?> { get { return .single (self.mValue) } }

  func setProp (_ value : DeviceRoot?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : DeviceRoot?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : DeviceRoot) {
    if self.mValue === object {
      self.mValue = nil
    }
  }
  
  //····················································································································

//  func add (_ object : DeviceRoot) {
 //   self.mValue = object
//  }

  //····················································································································
  //   Observable property: comments
  //····················································································································

  private var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  var comments_property_selection : EBSelection <String?> {
    get {
      if let model = self.propval {
        switch (model.comments_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    self.mObserversOf_comments.insert (inObserver)
    if let object = self.propval {
      object.comments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    self.mObserversOf_comments.remove (inObserver)
    if let object = self.propval {
      object.comments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: imageIsValid
  //····················································································································

  private var mObserversOf_imageIsValid = EBWeakEventSet ()

  //····················································································································

  var imageIsValid_property_selection : EBSelection <Bool?> {
    get {
      if let model = self.propval {
        switch (model.imageIsValid_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_imageIsValid (_ inObserver : EBEvent) {
    self.mObserversOf_imageIsValid.insert (inObserver)
    if let object = self.propval {
      object.imageIsValid_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_imageIsValid (_ inObserver : EBEvent) {
    self.mObserversOf_imageIsValid.remove (inObserver)
    if let object = self.propval {
      object.imageIsValid_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: issues
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray?> {
    get {
      if let model = self.propval {
        switch (model.issues_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.mObserversOf_issues.insert (inObserver)
    if let object = self.propval {
      object.issues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.mObserversOf_issues.remove (inObserver)
    if let object = self.propval {
      object.issues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mPackageDisplayHorizontalFlip
  //····················································································································

  private var mObserversOf_mPackageDisplayHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  var mPackageDisplayHorizontalFlip_property_selection : EBSelection <Bool?> {
    get {
      if let model = self.propval {
        switch (model.mPackageDisplayHorizontalFlip_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_mPackageDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.mObserversOf_mPackageDisplayHorizontalFlip.insert (inObserver)
    if let object = self.propval {
      object.mPackageDisplayHorizontalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.mObserversOf_mPackageDisplayHorizontalFlip.remove (inObserver)
    if let object = self.propval {
      object.mPackageDisplayHorizontalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mPackageDisplayVerticalFlip
  //····················································································································

  private var mObserversOf_mPackageDisplayVerticalFlip = EBWeakEventSet ()

  //····················································································································

  var mPackageDisplayVerticalFlip_property_selection : EBSelection <Bool?> {
    get {
      if let model = self.propval {
        switch (model.mPackageDisplayVerticalFlip_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_mPackageDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.mObserversOf_mPackageDisplayVerticalFlip.insert (inObserver)
    if let object = self.propval {
      object.mPackageDisplayVerticalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.mObserversOf_mPackageDisplayVerticalFlip.remove (inObserver)
    if let object = self.propval {
      object.mPackageDisplayVerticalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mPackageDisplayZoom
  //····················································································································

  private var mObserversOf_mPackageDisplayZoom = EBWeakEventSet ()

  //····················································································································

  var mPackageDisplayZoom_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.mPackageDisplayZoom_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_mPackageDisplayZoom (_ inObserver : EBEvent) {
    self.mObserversOf_mPackageDisplayZoom.insert (inObserver)
    if let object = self.propval {
      object.mPackageDisplayZoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayZoom (_ inObserver : EBEvent) {
    self.mObserversOf_mPackageDisplayZoom.remove (inObserver)
    if let object = self.propval {
      object.mPackageDisplayZoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mShowPackageBackPads
  //····················································································································

  private var mObserversOf_mShowPackageBackPads = EBWeakEventSet ()

  //····················································································································

  var mShowPackageBackPads_property_selection : EBSelection <Bool?> {
    get {
      if let model = self.propval {
        switch (model.mShowPackageBackPads_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_mShowPackageBackPads (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackageBackPads.insert (inObserver)
    if let object = self.propval {
      object.mShowPackageBackPads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackageBackPads (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackageBackPads.remove (inObserver)
    if let object = self.propval {
      object.mShowPackageBackPads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mShowPackageFrontPads
  //····················································································································

  private var mObserversOf_mShowPackageFrontPads = EBWeakEventSet ()

  //····················································································································

  var mShowPackageFrontPads_property_selection : EBSelection <Bool?> {
    get {
      if let model = self.propval {
        switch (model.mShowPackageFrontPads_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_mShowPackageFrontPads (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackageFrontPads.insert (inObserver)
    if let object = self.propval {
      object.mShowPackageFrontPads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackageFrontPads (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackageFrontPads.remove (inObserver)
    if let object = self.propval {
      object.mShowPackageFrontPads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mShowPackagePadNumbers
  //····················································································································

  private var mObserversOf_mShowPackagePadNumbers = EBWeakEventSet ()

  //····················································································································

  var mShowPackagePadNumbers_property_selection : EBSelection <Bool?> {
    get {
      if let model = self.propval {
        switch (model.mShowPackagePadNumbers_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_mShowPackagePadNumbers (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackagePadNumbers.insert (inObserver)
    if let object = self.propval {
      object.mShowPackagePadNumbers_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackagePadNumbers (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackagePadNumbers.remove (inObserver)
    if let object = self.propval {
      object.mShowPackagePadNumbers_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mShowPackages
  //····················································································································

  private var mObserversOf_mShowPackages = EBWeakEventSet ()

  //····················································································································

  var mShowPackages_property_selection : EBSelection <Bool?> {
    get {
      if let model = self.propval {
        switch (model.mShowPackages_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_mShowPackages (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackages.insert (inObserver)
    if let object = self.propval {
      object.mShowPackages_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackages (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackages.remove (inObserver)
    if let object = self.propval {
      object.mShowPackages_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: prefix
  //····················································································································

  private var mObserversOf_prefix = EBWeakEventSet ()

  //····················································································································

  var prefix_property_selection : EBSelection <String?> {
    get {
      if let model = self.propval {
        switch (model.prefix_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_prefix (_ inObserver : EBEvent) {
    self.mObserversOf_prefix.insert (inObserver)
    if let object = self.propval {
      object.prefix_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_prefix (_ inObserver : EBEvent) {
    self.mObserversOf_prefix.remove (inObserver)
    if let object = self.propval {
      object.prefix_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: representationImageData
  //····················································································································

  private var mObserversOf_representationImageData = EBWeakEventSet ()

  //····················································································································

  var representationImageData_property_selection : EBSelection <Data?> {
    get {
      if let model = self.propval {
        switch (model.representationImageData_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_representationImageData (_ inObserver : EBEvent) {
    self.mObserversOf_representationImageData.insert (inObserver)
    if let object = self.propval {
      object.representationImageData_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_representationImageData (_ inObserver : EBEvent) {
    self.mObserversOf_representationImageData.remove (inObserver)
    if let object = self.propval {
      object.representationImageData_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: selectedPageIndex
  //····················································································································

  private var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  var selectedPageIndex_property_selection : EBSelection <Int?> {
    get {
      if let model = self.propval {
        switch (model.selectedPageIndex_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.mObserversOf_selectedPageIndex.insert (inObserver)
    if let object = self.propval {
      object.selectedPageIndex_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.mObserversOf_selectedPageIndex.remove (inObserver)
    if let object = self.propval {
      object.selectedPageIndex_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: title
  //····················································································································

  private var mObserversOf_title = EBWeakEventSet ()

  //····················································································································

  var title_property_selection : EBSelection <String?> {
    get {
      if let model = self.propval {
        switch (model.title_property_selection) {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

  final func addEBObserverOf_title (_ inObserver : EBEvent) {
    self.mObserversOf_title.insert (inObserver)
    if let object = self.propval {
      object.title_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_title (_ inObserver : EBEvent) {
    self.mObserversOf_title.remove (inObserver)
    if let object = self.propval {
      object.title_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
