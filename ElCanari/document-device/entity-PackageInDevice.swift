//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

protocol PackageInDevice_mFileData : class {
  var mFileData : Data { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageInDevice_mName : class {
  var mName : String { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageInDevice_mVersion : class {
  var mVersion : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageInDevice_mStrokeBezierPath : class {
  var mStrokeBezierPath : NSBezierPath { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageInDevice_mX : class {
  var mX : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageInDevice_mY : class {
  var mY : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageInDevice_versionString : class {
  var versionString : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageInDevice_documentSizeString : class {
  var documentSizeString : String? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageInDevice_frontSidePadFilledBezierPathArray : class {
  var frontSidePadFilledBezierPathArray : BezierPathArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageInDevice_backSidePadFilledBezierPathArray : class {
  var backSidePadFilledBezierPathArray : BezierPathArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageInDevice_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageInDevice_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageInDevice_padNameSet : class {
  var padNameSet : StringSet? { get }
}

//----------------------------------------------------------------------------------------------------------------------
//    Entity: PackageInDevice
//----------------------------------------------------------------------------------------------------------------------

class PackageInDevice : EBGraphicManagedObject,
         PackageInDevice_mFileData,
         PackageInDevice_mName,
         PackageInDevice_mVersion,
         PackageInDevice_mStrokeBezierPath,
         PackageInDevice_mX,
         PackageInDevice_mY,
         PackageInDevice_versionString,
         PackageInDevice_documentSizeString,
         PackageInDevice_frontSidePadFilledBezierPathArray,
         PackageInDevice_backSidePadFilledBezierPathArray,
         PackageInDevice_objectDisplay,
         PackageInDevice_selectionDisplay,
         PackageInDevice_padNameSet {

  //····················································································································
  //   Atomic property: mFileData
  //····················································································································

  let mFileData_property = EBStoredProperty_Data (defaultValue: Data ())

  //····················································································································

  final func reset_mFileData_toDefaultValue () {
    self.mFileData = Data ()
  }

  //····················································································································

  final var mFileData : Data {
    get { return self.mFileData_property.propval }
    set { self.mFileData_property.setProp (newValue) }
  }

  //····················································································································

  final var mFileData_property_selection : EBSelection <Data> { return self.mFileData_property.prop }

  //····················································································································
  //   Atomic property: mName
  //····················································································································

  let mName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  final func reset_mName_toDefaultValue () {
    self.mName = ""
  }

  //····················································································································

  final var mName : String {
    get { return self.mName_property.propval }
    set { self.mName_property.setProp (newValue) }
  }

  //····················································································································

  final var mName_property_selection : EBSelection <String> { return self.mName_property.prop }

  //····················································································································
  //   Atomic property: mVersion
  //····················································································································

  let mVersion_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  final func reset_mVersion_toDefaultValue () {
    self.mVersion = 0
  }

  //····················································································································

  final var mVersion : Int {
    get { return self.mVersion_property.propval }
    set { self.mVersion_property.setProp (newValue) }
  }

  //····················································································································

  final var mVersion_property_selection : EBSelection <Int> { return self.mVersion_property.prop }

  //····················································································································
  //   Atomic property: mStrokeBezierPath
  //····················································································································

  let mStrokeBezierPath_property = EBStoredProperty_NSBezierPath (defaultValue: NSBezierPath ())

  //····················································································································

  final func reset_mStrokeBezierPath_toDefaultValue () {
    self.mStrokeBezierPath = NSBezierPath ()
  }

  //····················································································································

  final var mStrokeBezierPath : NSBezierPath {
    get { return self.mStrokeBezierPath_property.propval }
    set { self.mStrokeBezierPath_property.setProp (newValue) }
  }

  //····················································································································

  final var mStrokeBezierPath_property_selection : EBSelection <NSBezierPath> { return self.mStrokeBezierPath_property.prop }

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  let mX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  final func reset_mX_toDefaultValue () {
    self.mX = 0
  }

  //····················································································································

  final var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································

  final var mX_property_selection : EBSelection <Int> { return self.mX_property.prop }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  let mY_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  final func reset_mY_toDefaultValue () {
    self.mY = 0
  }

  //····················································································································

  final var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································

  final var mY_property_selection : EBSelection <Int> { return self.mY_property.prop }

  //····················································································································
  //   To many property: mMasterPads
  //····················································································································

  let mMasterPads_property = StoredArrayOf_MasterPadInDevice (usedForSignature: true)

  //····················································································································

  var mMasterPads_property_selection : EBSelection < [MasterPadInDevice] > {
    return self.mMasterPads_property.prop
  }

  //····················································································································

  var mMasterPads : [MasterPadInDevice] {
    get { return self.mMasterPads_property.propval }
    set { self.mMasterPads_property.setProp (newValue) }
  }

  //····················································································································
  //   To one property: mRoot
  //····················································································································

  let mRoot_property = StoredObject_DeviceRoot (usedForSignature: false)

  //····················································································································

  var mRoot_property_selection : EBSelection <DeviceRoot?> {
    return .single (self.mRoot_property.propval)
  }

  //····················································································································

  var mRoot : DeviceRoot? {
    get {
      return self.mRoot_property.propval
    }
    set {
      if self.mRoot_property.propval != nil {
        self.mRoot_property.setProp (nil)
      }
      if newValue != nil {
        self.mRoot_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mRoot_none : StoredObject_DeviceRoot { return self.mRoot_property }

  //····················································································································

  var mRoot_none_selection : EBSelection <Bool> {
    return .single (self.mRoot_property.propval == nil)
  }

  //····················································································································
  //   Transient property: versionString
  //····················································································································

  let versionString_property = EBTransientProperty_String ()

  //····················································································································

  var versionString_property_selection : EBSelection <String> {
    return self.versionString_property.prop
  }

  //····················································································································

  var versionString : String? {
    switch self.versionString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: documentSizeString
  //····················································································································

  let documentSizeString_property = EBTransientProperty_String ()

  //····················································································································

  var documentSizeString_property_selection : EBSelection <String> {
    return self.documentSizeString_property.prop
  }

  //····················································································································

  var documentSizeString : String? {
    switch self.documentSizeString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: frontSidePadFilledBezierPathArray
  //····················································································································

  let frontSidePadFilledBezierPathArray_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var frontSidePadFilledBezierPathArray_property_selection : EBSelection <BezierPathArray> {
    return self.frontSidePadFilledBezierPathArray_property.prop
  }

  //····················································································································

  var frontSidePadFilledBezierPathArray : BezierPathArray? {
    switch self.frontSidePadFilledBezierPathArray_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: backSidePadFilledBezierPathArray
  //····················································································································

  let backSidePadFilledBezierPathArray_property = EBTransientProperty_BezierPathArray ()

  //····················································································································

  var backSidePadFilledBezierPathArray_property_selection : EBSelection <BezierPathArray> {
    return self.backSidePadFilledBezierPathArray_property.prop
  }

  //····················································································································

  var backSidePadFilledBezierPathArray : BezierPathArray? {
    switch self.backSidePadFilledBezierPathArray_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padNameSet
  //····················································································································

  let padNameSet_property = EBTransientProperty_StringSet ()

  //····················································································································

  var padNameSet_property_selection : EBSelection <StringSet> {
    return self.padNameSet_property.prop
  }

  //····················································································································

  var padNameSet : StringSet? {
    switch self.padNameSet_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
    self.configureObject ()
  }
  
  //····················································································································

  private final func configureObject () {
  //--- Atomic property: mFileData
    self.mFileData_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mName
    self.mName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mVersion
    self.mVersion_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mX
    self.mX_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mY
    self.mY_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mMasterPads (no option)
    self.mMasterPads_property.ebUndoManager = self.ebUndoManager
  //--- To one property: mRoot (has opposite to many relationship: mPackages)
    self.mRoot_property.ebUndoManager = self.ebUndoManager
    self.mRoot_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mPackages_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mPackages_property.remove (me) } }
    )
  //--- Atomic property: versionString
    self.versionString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mVersion_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mVersion_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackageInDevice_versionString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mVersion_property.addEBObserver (self.versionString_property)
  //--- Atomic property: documentSizeString
    self.documentSizeString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mFileData_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mFileData_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackageInDevice_documentSizeString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mFileData_property.addEBObserver (self.documentSizeString_property)
  //--- Atomic property: frontSidePadFilledBezierPathArray
    self.frontSidePadFilledBezierPathArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mMasterPads_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mMasterPads_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackageInDevice_frontSidePadFilledBezierPathArray (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mMasterPads_property.addEBObserverOf_frontSideFilledBezierPathArray (self.frontSidePadFilledBezierPathArray_property)
  //--- Atomic property: backSidePadFilledBezierPathArray
    self.backSidePadFilledBezierPathArray_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mMasterPads_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mMasterPads_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackageInDevice_backSidePadFilledBezierPathArray (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mMasterPads_property.addEBObserverOf_backSideFilledBezierPathArray (self.backSidePadFilledBezierPathArray_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mMasterPads_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mShowPackagePadNumbers_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mShowPackages_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mShowPackageFrontPads_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mShowPackageBackPads_property_selection.kind ()
        kind &= unwSelf.mStrokeBezierPath_property_selection.kind ()
        kind &= g_Preferences!.packageColor_property_selection.kind ()
        kind &= g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection.kind ()
        kind &= unwSelf.frontSidePadFilledBezierPathArray_property_selection.kind ()
        kind &= g_Preferences!.frontSidePadColor_property_selection.kind ()
        kind &= unwSelf.backSidePadFilledBezierPathArray_property_selection.kind ()
        kind &= g_Preferences!.backSidePadColor_property_selection.kind ()
        kind &= unwSelf.mName_property_selection.kind ()
        kind &= unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mMasterPads_property_selection, unwSelf.mRoot_property.mShowPackagePadNumbers_property_selection, unwSelf.mRoot_property.mShowPackages_property_selection, unwSelf.mRoot_property.mShowPackageFrontPads_property_selection, unwSelf.mRoot_property.mShowPackageBackPads_property_selection, unwSelf.mStrokeBezierPath_property_selection, g_Preferences!.packageColor_property_selection, g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection, unwSelf.frontSidePadFilledBezierPathArray_property_selection, g_Preferences!.frontSidePadColor_property_selection, unwSelf.backSidePadFilledBezierPathArray_property_selection, g_Preferences!.backSidePadColor_property_selection, unwSelf.mName_property_selection, unwSelf.mX_property_selection, unwSelf.mY_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11), .single (let v12), .single (let v13), .single (let v14)) :
            return .single (transient_PackageInDevice_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mMasterPads_property.addEBObserverOf_padNumberDisplay (self.objectDisplay_property)
    self.mRoot_property.addEBObserverOf_mShowPackagePadNumbers (self.objectDisplay_property)
    self.mRoot_property.addEBObserverOf_mShowPackages (self.objectDisplay_property)
    self.mRoot_property.addEBObserverOf_mShowPackageFrontPads (self.objectDisplay_property)
    self.mRoot_property.addEBObserverOf_mShowPackageBackPads (self.objectDisplay_property)
    self.mStrokeBezierPath_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.packageColor_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.addEBObserver (self.objectDisplay_property)
    self.frontSidePadFilledBezierPathArray_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSidePadColor_property.addEBObserver (self.objectDisplay_property)
    self.backSidePadFilledBezierPathArray_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.backSidePadColor_property.addEBObserver (self.objectDisplay_property)
    self.mName_property.addEBObserver (self.objectDisplay_property)
    self.mX_property.addEBObserver (self.objectDisplay_property)
    self.mY_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mMasterPads_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mShowPackagePadNumbers_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mShowPackages_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mShowPackageFrontPads_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mShowPackageBackPads_property_selection.kind ()
        kind &= unwSelf.mStrokeBezierPath_property_selection.kind ()
        kind &= g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection.kind ()
        kind &= unwSelf.frontSidePadFilledBezierPathArray_property_selection.kind ()
        kind &= unwSelf.backSidePadFilledBezierPathArray_property_selection.kind ()
        kind &= unwSelf.mName_property_selection.kind ()
        kind &= unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mMasterPads_property_selection, unwSelf.mRoot_property.mShowPackagePadNumbers_property_selection, unwSelf.mRoot_property.mShowPackages_property_selection, unwSelf.mRoot_property.mShowPackageFrontPads_property_selection, unwSelf.mRoot_property.mShowPackageBackPads_property_selection, unwSelf.mStrokeBezierPath_property_selection, g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection, unwSelf.frontSidePadFilledBezierPathArray_property_selection, unwSelf.backSidePadFilledBezierPathArray_property_selection, unwSelf.mName_property_selection, unwSelf.mX_property_selection, unwSelf.mY_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10), .single (let v11)) :
            return .single (transient_PackageInDevice_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mMasterPads_property.addEBObserverOf_padNumberDisplay (self.selectionDisplay_property)
    self.mRoot_property.addEBObserverOf_mShowPackagePadNumbers (self.selectionDisplay_property)
    self.mRoot_property.addEBObserverOf_mShowPackages (self.selectionDisplay_property)
    self.mRoot_property.addEBObserverOf_mShowPackageFrontPads (self.selectionDisplay_property)
    self.mRoot_property.addEBObserverOf_mShowPackageBackPads (self.selectionDisplay_property)
    self.mStrokeBezierPath_property.addEBObserver (self.selectionDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.addEBObserver (self.selectionDisplay_property)
    self.frontSidePadFilledBezierPathArray_property.addEBObserver (self.selectionDisplay_property)
    self.backSidePadFilledBezierPathArray_property.addEBObserver (self.selectionDisplay_property)
    self.mName_property.addEBObserver (self.selectionDisplay_property)
    self.mX_property.addEBObserver (self.selectionDisplay_property)
    self.mY_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: padNameSet
    self.padNameSet_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mMasterPads_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mMasterPads_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackageInDevice_padNameSet (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mMasterPads_property.addEBObserverOf_mName (self.padNameSet_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.mFileData_property.setSignatureObserver (observer: self)
    self.mMasterPads_property.setSignatureObserver (observer: self)
    self.mName_property.setSignatureObserver (observer: self)
    self.mStrokeBezierPath_property.setSignatureObserver (observer: self)
    self.mVersion_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mVersion_property.removeEBObserver (self.versionString_property)
    self.mFileData_property.removeEBObserver (self.documentSizeString_property)
    self.mMasterPads_property.removeEBObserverOf_frontSideFilledBezierPathArray (self.frontSidePadFilledBezierPathArray_property)
    self.mMasterPads_property.removeEBObserverOf_backSideFilledBezierPathArray (self.backSidePadFilledBezierPathArray_property)
    self.mMasterPads_property.removeEBObserverOf_padNumberDisplay (self.objectDisplay_property)
    self.mRoot_property.removeEBObserverOf_mShowPackagePadNumbers (self.objectDisplay_property)
    self.mRoot_property.removeEBObserverOf_mShowPackages (self.objectDisplay_property)
    self.mRoot_property.removeEBObserverOf_mShowPackageFrontPads (self.objectDisplay_property)
    self.mRoot_property.removeEBObserverOf_mShowPackageBackPads (self.objectDisplay_property)
    self.mStrokeBezierPath_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.removeEBObserver (self.objectDisplay_property)
    self.frontSidePadFilledBezierPathArray_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSidePadColor_property.removeEBObserver (self.objectDisplay_property)
    self.backSidePadFilledBezierPathArray_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.backSidePadColor_property.removeEBObserver (self.objectDisplay_property)
    self.mName_property.removeEBObserver (self.objectDisplay_property)
    self.mX_property.removeEBObserver (self.objectDisplay_property)
    self.mY_property.removeEBObserver (self.objectDisplay_property)
    self.mMasterPads_property.removeEBObserverOf_padNumberDisplay (self.selectionDisplay_property)
    self.mRoot_property.removeEBObserverOf_mShowPackagePadNumbers (self.selectionDisplay_property)
    self.mRoot_property.removeEBObserverOf_mShowPackages (self.selectionDisplay_property)
    self.mRoot_property.removeEBObserverOf_mShowPackageFrontPads (self.selectionDisplay_property)
    self.mRoot_property.removeEBObserverOf_mShowPackageBackPads (self.selectionDisplay_property)
    self.mStrokeBezierPath_property.removeEBObserver (self.selectionDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.removeEBObserver (self.selectionDisplay_property)
    self.frontSidePadFilledBezierPathArray_property.removeEBObserver (self.selectionDisplay_property)
    self.backSidePadFilledBezierPathArray_property.removeEBObserver (self.selectionDisplay_property)
    self.mName_property.removeEBObserver (self.selectionDisplay_property)
    self.mX_property.removeEBObserver (self.selectionDisplay_property)
    self.mY_property.removeEBObserver (self.selectionDisplay_property)
    self.mMasterPads_property.removeEBObserverOf_mName (self.padNameSet_property)
  //--- Unregister properties for handling signature
    self.mFileData_property.setSignatureObserver (observer: nil)
    self.mMasterPads_property.setSignatureObserver (observer: nil)
    self.mName_property.setSignatureObserver (observer: nil)
    self.mStrokeBezierPath_property.setSignatureObserver (observer: nil)
    self.mVersion_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mFileData",
      idx: self.mFileData_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mFileData_property.mObserverExplorer,
      valueExplorer: &self.mFileData_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mName",
      idx: self.mName_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mName_property.mObserverExplorer,
      valueExplorer: &self.mName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mVersion",
      idx: self.mVersion_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mVersion_property.mObserverExplorer,
      valueExplorer: &self.mVersion_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mStrokeBezierPath",
      idx: self.mStrokeBezierPath_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mStrokeBezierPath_property.mObserverExplorer,
      valueExplorer: &self.mStrokeBezierPath_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mX",
      idx: self.mX_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mX_property.mObserverExplorer,
      valueExplorer: &self.mX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mY",
      idx: self.mY_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mY_property.mObserverExplorer,
      valueExplorer: &self.mY_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "versionString",
      idx: self.versionString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.versionString_property.mObserverExplorer,
      valueExplorer: &self.versionString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "documentSizeString",
      idx: self.documentSizeString_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.documentSizeString_property.mObserverExplorer,
      valueExplorer: &self.documentSizeString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "frontSidePadFilledBezierPathArray",
      idx: self.frontSidePadFilledBezierPathArray_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.frontSidePadFilledBezierPathArray_property.mObserverExplorer,
      valueExplorer: &self.frontSidePadFilledBezierPathArray_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "backSidePadFilledBezierPathArray",
      idx: self.backSidePadFilledBezierPathArray_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.backSidePadFilledBezierPathArray_property.mObserverExplorer,
      valueExplorer: &self.backSidePadFilledBezierPathArray_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx: self.objectDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.objectDisplay_property.mObserverExplorer,
      valueExplorer: &self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx: self.selectionDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
      valueExplorer: &self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padNameSet",
      idx: self.padNameSet_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.padNameSet_property.mObserverExplorer,
      valueExplorer: &self.padNameSet_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "mMasterPads",
      idx:mMasterPads_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mMasterPads_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "mRoot",
      idx:self.mRoot_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mRoot_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mFileData
    self.mFileData_property.mObserverExplorer = nil
    self.mFileData_property.mValueExplorer = nil
  //--- Atomic property: mName
    self.mName_property.mObserverExplorer = nil
    self.mName_property.mValueExplorer = nil
  //--- Atomic property: mVersion
    self.mVersion_property.mObserverExplorer = nil
    self.mVersion_property.mValueExplorer = nil
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.mObserverExplorer = nil
    self.mStrokeBezierPath_property.mValueExplorer = nil
  //--- Atomic property: mX
    self.mX_property.mObserverExplorer = nil
    self.mX_property.mValueExplorer = nil
  //--- Atomic property: mY
    self.mY_property.mObserverExplorer = nil
    self.mY_property.mValueExplorer = nil
  //--- To many property: mMasterPads
    self.mMasterPads_property.mValueExplorer = nil
  //--- To one property: mRoot
    self.mRoot_property.mObserverExplorer = nil
    self.mRoot_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mMasterPads = []
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mRoot = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mFileData
    self.mFileData_property.storeIn (dictionary: ioDictionary, forKey: "mFileData")
  //--- Atomic property: mName
    self.mName_property.storeIn (dictionary: ioDictionary, forKey: "mName")
  //--- Atomic property: mVersion
    self.mVersion_property.storeIn (dictionary: ioDictionary, forKey: "mVersion")
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.storeIn (dictionary: ioDictionary, forKey: "mStrokeBezierPath")
  //--- Atomic property: mX
    self.mX_property.storeIn (dictionary: ioDictionary, forKey: "mX")
  //--- Atomic property: mY
    self.mY_property.storeIn (dictionary: ioDictionary, forKey: "mY")
  //--- To many property: mMasterPads
    self.store (
      managedObjectArray: self.mMasterPads_property.propval,
      relationshipName: "mMasterPads",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  //--- To many property: mMasterPads
    self.mMasterPads_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mMasterPads",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [MasterPadInDevice])
  //--- To one property: mRoot
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mRoot",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? DeviceRoot {
        self.mRoot_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mFileData
    self.mFileData_property.readFrom (dictionary: inDictionary, forKey: "mFileData")
  //--- Atomic property: mName
    self.mName_property.readFrom (dictionary: inDictionary, forKey: "mName")
  //--- Atomic property: mVersion
    self.mVersion_property.readFrom (dictionary: inDictionary, forKey: "mVersion")
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.readFrom (dictionary: inDictionary, forKey: "mStrokeBezierPath")
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey: "mX")
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey: "mY")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mFileData\n"
    ioString += "mName\n"
    ioString += "mVersion\n"
    ioString += "mStrokeBezierPath\n"
    ioString += "mX\n"
    ioString += "mY\n"
  //--- To one relationships
    ioString += "mRoot\n"
  //--- To many relationships
    ioString += "mMasterPads\n"
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mFileData.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mName.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mVersion.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mStrokeBezierPath.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.mRoot {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
    do{
      var optionalFirstIndex : Int? = nil
      var rangeCount = 0
      for object in self.mMasterPads {
        if let firstIndex = optionalFirstIndex {
          if object.savingIndex == (firstIndex + 1) {
            rangeCount += 1
            optionalFirstIndex = object.savingIndex
          }else if rangeCount > 0 {
            ioData.append (ascii: .colon)
            ioData.append (base62Encoded: rangeCount)
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            rangeCount = 0
            optionalFirstIndex = object.savingIndex
          }else{
            ioData.append (ascii: .space)
            ioData.append (base62Encoded: object.savingIndex)
            optionalFirstIndex = object.savingIndex
          }
        }else{
          ioData.append (base62Encoded: object.savingIndex)
          optionalFirstIndex = object.savingIndex
        }
      }
      if optionalFirstIndex != nil, rangeCount > 0 {
        ioData.append (ascii: .colon)
        ioData.append (base62Encoded: rangeCount)
      }
      ioData.append (ascii: .lineFeed)
    }
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.mOperationQueue.addOperation {
    //  var operations = [() -> Void] ()
    //--- Atomic properties
      if let range = inDictionary ["mFileData"], let value = Data.unarchiveFromDataRange (inData, range) {
        //operations.append ({ self.mFileData = value })
        self.mFileData = value
      }
      if let range = inDictionary ["mName"], let value = String.unarchiveFromDataRange (inData, range) {
        //operations.append ({ self.mName = value })
        self.mName = value
      }
      if let range = inDictionary ["mVersion"], let value = Int.unarchiveFromDataRange (inData, range) {
        //operations.append ({ self.mVersion = value })
        self.mVersion = value
      }
      if let range = inDictionary ["mStrokeBezierPath"], let value = NSBezierPath.unarchiveFromDataRange (inData, range) {
        //operations.append ({ self.mStrokeBezierPath = value })
        self.mStrokeBezierPath = value
      }
      if let range = inDictionary ["mX"], let value = Int.unarchiveFromDataRange (inData, range) {
        //operations.append ({ self.mX = value })
        self.mX = value
      }
      if let range = inDictionary ["mY"], let value = Int.unarchiveFromDataRange (inData, range) {
        //operations.append ({ self.mY = value })
        self.mY = value
      }
    //--- To many relationships
      if let range = inDictionary ["mMasterPads"], range.length > 0 {
        var relationshipArray = [MasterPadInDevice] ()
        let indexArray = inData.base62EncodedIntArray (fromRange: range)
        // Swift.print ("TOMANY '\(s)', \(a)")
        for idx in indexArray {
          relationshipArray.append (inObjectArray [idx] as! MasterPadInDevice)
        }
        inParallelObjectSetupContext.mMutex.wait ()
        inParallelObjectSetupContext.mToManySetUpOperationList.append ({ self.mMasterPads = relationshipArray })
        inParallelObjectSetupContext.mMutex.signal ()
      }
    //--- To one relationships
      if let range = inDictionary ["mRoot"], let objectIndex = inData.base62EncodedInt (range: range) {
        inParallelObjectSetupContext.mMutex.wait ()
        inParallelObjectSetupContext.mToOneSetUpOperationList.append ({ self.mRoot = inObjectArray [objectIndex] as? DeviceRoot })
        inParallelObjectSetupContext.mMutex.signal ()
      }
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mMasterPads
    for managedObject in self.mMasterPads {
      objects.append (managedObject)
    }
  //--- To one property: mRoot
    if let object = self.mRoot {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mMasterPads
    for managedObject in self.mMasterPads {
      objects.append (managedObject)
    }
  //--- To one property: mRoot
    if let object = self.mRoot {
      objects.append (object)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.mFileData_property.signature ())
    crc.accumulateUInt32 (self.mMasterPads_property.signature ())
    crc.accumulateUInt32 (self.mName_property.signature ())
    crc.accumulateUInt32 (self.mStrokeBezierPath_property.signature ())
    crc.accumulateUInt32 (self.mVersion_property.signature ())
    return crc
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------

