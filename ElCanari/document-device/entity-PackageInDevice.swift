//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mFileData : class {
  var mFileData : Data { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mName : class {
  var mName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mVersion : class {
  var mVersion : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mPadTopSideFilledBezierPath : class {
  var mPadTopSideFilledBezierPath : NSBezierPath { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mPadBackSideFilledBezierPath : class {
  var mPadBackSideFilledBezierPath : NSBezierPath { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_mStrokeBezierPath : class {
  var mStrokeBezierPath : NSBezierPath { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageInDevice_versionString : class {
  var versionString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class PackageInDevice : EBManagedObject,
         PackageInDevice_mFileData,
         PackageInDevice_mName,
         PackageInDevice_mVersion,
         PackageInDevice_mPadTopSideFilledBezierPath,
         PackageInDevice_mPadBackSideFilledBezierPath,
         PackageInDevice_mStrokeBezierPath,
         PackageInDevice_versionString {

  //····················································································································
  //   Atomic property: mFileData
  //····················································································································

  var mFileData_property = EBStoredProperty_Data (defaultValue: Data ())

  //····················································································································

  var mFileData : Data {
    get {
      return self.mFileData_property.propval
    }
    set {
      self.mFileData_property.setProp (newValue)
    }
  }

  //····················································································································

  var mFileData_property_selection : EBSelection <Data> {
    return self.mFileData_property.prop
  }

  //····················································································································
  //   Atomic property: mName
  //····················································································································

  var mName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mName : String {
    get {
      return self.mName_property.propval
    }
    set {
      self.mName_property.setProp (newValue)
    }
  }

  //····················································································································

  var mName_property_selection : EBSelection <String> {
    return self.mName_property.prop
  }

  //····················································································································
  //   Atomic property: mVersion
  //····················································································································

  var mVersion_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mVersion : Int {
    get {
      return self.mVersion_property.propval
    }
    set {
      self.mVersion_property.setProp (newValue)
    }
  }

  //····················································································································

  var mVersion_property_selection : EBSelection <Int> {
    return self.mVersion_property.prop
  }

  //····················································································································
  //   Atomic property: mPadTopSideFilledBezierPath
  //····················································································································

  var mPadTopSideFilledBezierPath_property = EBStoredProperty_NSBezierPath (defaultValue: NSBezierPath ())

  //····················································································································

  var mPadTopSideFilledBezierPath : NSBezierPath {
    get {
      return self.mPadTopSideFilledBezierPath_property.propval
    }
    set {
      self.mPadTopSideFilledBezierPath_property.setProp (newValue)
    }
  }

  //····················································································································

  var mPadTopSideFilledBezierPath_property_selection : EBSelection <NSBezierPath> {
    return self.mPadTopSideFilledBezierPath_property.prop
  }

  //····················································································································
  //   Atomic property: mPadBackSideFilledBezierPath
  //····················································································································

  var mPadBackSideFilledBezierPath_property = EBStoredProperty_NSBezierPath (defaultValue: NSBezierPath ())

  //····················································································································

  var mPadBackSideFilledBezierPath : NSBezierPath {
    get {
      return self.mPadBackSideFilledBezierPath_property.propval
    }
    set {
      self.mPadBackSideFilledBezierPath_property.setProp (newValue)
    }
  }

  //····················································································································

  var mPadBackSideFilledBezierPath_property_selection : EBSelection <NSBezierPath> {
    return self.mPadBackSideFilledBezierPath_property.prop
  }

  //····················································································································
  //   Atomic property: mStrokeBezierPath
  //····················································································································

  var mStrokeBezierPath_property = EBStoredProperty_NSBezierPath (defaultValue: NSBezierPath ())

  //····················································································································

  var mStrokeBezierPath : NSBezierPath {
    get {
      return self.mStrokeBezierPath_property.propval
    }
    set {
      self.mStrokeBezierPath_property.setProp (newValue)
    }
  }

  //····················································································································

  var mStrokeBezierPath_property_selection : EBSelection <NSBezierPath> {
    return self.mStrokeBezierPath_property.prop
  }

  //····················································································································
  //   Transient property: versionString
  //····················································································································

  var versionString_property = EBTransientProperty_String ()

  //····················································································································

  var versionString_property_selection : EBSelection <String> {
    return self.versionString_property.prop
  }

  //····················································································································

  var versionString : String? {
    switch self.versionString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ undoManager : EBUndoManager?, file: String, _ line : Int) {
    super.init (undoManager, file: file, line)
  //--- Atomic property: mFileData
    self.mFileData_property.undoManager = self.undoManager
  //--- Atomic property: mName
    self.mName_property.undoManager = self.undoManager
  //--- Atomic property: mVersion
    self.mVersion_property.undoManager = self.undoManager
  //--- Atomic property: mPadTopSideFilledBezierPath
    self.mPadTopSideFilledBezierPath_property.undoManager = self.undoManager
  //--- Atomic property: mPadBackSideFilledBezierPath
    self.mPadBackSideFilledBezierPath_property.undoManager = self.undoManager
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.undoManager = self.undoManager
  //--- Atomic property: versionString
    self.versionString_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mVersion_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mVersion_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackageInDevice_versionString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mVersion_property.addEBObserver (self.versionString_property)
  //--- Install undoers and opposite setter for relationships
  //--- register properties for handling signature
    self.mFileData_property.setSignatureObserver (observer:self)
    self.mName_property.setSignatureObserver (observer:self)
    self.mPadBackSideFilledBezierPath_property.setSignatureObserver (observer:self)
    self.mPadTopSideFilledBezierPath_property.setSignatureObserver (observer:self)
    self.mStrokeBezierPath_property.setSignatureObserver (observer:self)
    self.mVersion_property.setSignatureObserver (observer:self)
  //--- Extern delegates
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.mVersion_property.removeEBObserver (self.versionString_property)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mFileData",
      idx:self.mFileData_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mFileData_property.mObserverExplorer,
      valueExplorer:&self.mFileData_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mName",
      idx:self.mName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mName_property.mObserverExplorer,
      valueExplorer:&self.mName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mVersion",
      idx:self.mVersion_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mVersion_property.mObserverExplorer,
      valueExplorer:&self.mVersion_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPadTopSideFilledBezierPath",
      idx:self.mPadTopSideFilledBezierPath_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mPadTopSideFilledBezierPath_property.mObserverExplorer,
      valueExplorer:&self.mPadTopSideFilledBezierPath_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPadBackSideFilledBezierPath",
      idx:self.mPadBackSideFilledBezierPath_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mPadBackSideFilledBezierPath_property.mObserverExplorer,
      valueExplorer:&self.mPadBackSideFilledBezierPath_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mStrokeBezierPath",
      idx:self.mStrokeBezierPath_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mStrokeBezierPath_property.mObserverExplorer,
      valueExplorer:&self.mStrokeBezierPath_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "versionString",
      idx:self.versionString_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.versionString_property.mObserverExplorer,
      valueExplorer:&self.versionString_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mFileData
    self.mFileData_property.mObserverExplorer = nil
    self.mFileData_property.mValueExplorer = nil
  //--- Atomic property: mName
    self.mName_property.mObserverExplorer = nil
    self.mName_property.mValueExplorer = nil
  //--- Atomic property: mVersion
    self.mVersion_property.mObserverExplorer = nil
    self.mVersion_property.mValueExplorer = nil
  //--- Atomic property: mPadTopSideFilledBezierPath
    self.mPadTopSideFilledBezierPath_property.mObserverExplorer = nil
    self.mPadTopSideFilledBezierPath_property.mValueExplorer = nil
  //--- Atomic property: mPadBackSideFilledBezierPath
    self.mPadBackSideFilledBezierPath_property.mObserverExplorer = nil
    self.mPadBackSideFilledBezierPath_property.mValueExplorer = nil
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.mObserverExplorer = nil
    self.mStrokeBezierPath_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mFileData
    self.mFileData_property.storeIn (dictionary: ioDictionary, forKey:"mFileData")
  //--- Atomic property: mName
    self.mName_property.storeIn (dictionary: ioDictionary, forKey:"mName")
  //--- Atomic property: mVersion
    self.mVersion_property.storeIn (dictionary: ioDictionary, forKey:"mVersion")
  //--- Atomic property: mPadTopSideFilledBezierPath
    self.mPadTopSideFilledBezierPath_property.storeIn (dictionary: ioDictionary, forKey:"mPadTopSideFilledBezierPath")
  //--- Atomic property: mPadBackSideFilledBezierPath
    self.mPadBackSideFilledBezierPath_property.storeIn (dictionary: ioDictionary, forKey:"mPadBackSideFilledBezierPath")
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.storeIn (dictionary: ioDictionary, forKey:"mStrokeBezierPath")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mFileData
    self.mFileData_property.readFrom (dictionary: inDictionary, forKey:"mFileData")
  //--- Atomic property: mName
    self.mName_property.readFrom (dictionary: inDictionary, forKey:"mName")
  //--- Atomic property: mVersion
    self.mVersion_property.readFrom (dictionary: inDictionary, forKey:"mVersion")
  //--- Atomic property: mPadTopSideFilledBezierPath
    self.mPadTopSideFilledBezierPath_property.readFrom (dictionary: inDictionary, forKey:"mPadTopSideFilledBezierPath")
  //--- Atomic property: mPadBackSideFilledBezierPath
    self.mPadBackSideFilledBezierPath_property.readFrom (dictionary: inDictionary, forKey:"mPadBackSideFilledBezierPath")
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.readFrom (dictionary: inDictionary, forKey:"mStrokeBezierPath")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.mFileData_property.signature ())
    crc.accumulateUInt32 (self.mName_property.signature ())
    crc.accumulateUInt32 (self.mPadBackSideFilledBezierPath_property.signature ())
    crc.accumulateUInt32 (self.mPadTopSideFilledBezierPath_property.signature ())
    crc.accumulateUInt32 (self.mStrokeBezierPath_property.signature ())
    crc.accumulateUInt32 (self.mVersion_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageInDevice : ReadOnlyAbstractArrayProperty <PackageInDevice> {

  //····················································································································
  //   Observers of 'mFileData' stored property
  //····················································································································

  private var mObserversOf_mFileData = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mFileData (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mFileData.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mFileData_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mFileData (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mFileData.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mFileData_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mFileData_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mFileData.apply ( {(_ observer : EBEvent) in
        managedObject.mFileData_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mFileData_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mFileData.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mFileData_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mName' stored property
  //····················································································································

  private var mObserversOf_mName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mName_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mName.apply ( {(_ observer : EBEvent) in
        managedObject.mName_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mName_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mName.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mName_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mVersion' stored property
  //····················································································································

  private var mObserversOf_mVersion = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mVersion (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mVersion.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mVersion_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mVersion (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mVersion.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mVersion_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mVersion_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mVersion.apply ( {(_ observer : EBEvent) in
        managedObject.mVersion_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mVersion_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mVersion.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mVersion_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mPadTopSideFilledBezierPath' stored property
  //····················································································································

  private var mObserversOf_mPadTopSideFilledBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPadTopSideFilledBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPadTopSideFilledBezierPath.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPadTopSideFilledBezierPath_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPadTopSideFilledBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPadTopSideFilledBezierPath.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPadTopSideFilledBezierPath_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPadTopSideFilledBezierPath_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mPadTopSideFilledBezierPath.apply ( {(_ observer : EBEvent) in
        managedObject.mPadTopSideFilledBezierPath_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPadTopSideFilledBezierPath_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mPadTopSideFilledBezierPath.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPadTopSideFilledBezierPath_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mPadBackSideFilledBezierPath' stored property
  //····················································································································

  private var mObserversOf_mPadBackSideFilledBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPadBackSideFilledBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPadBackSideFilledBezierPath.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPadBackSideFilledBezierPath_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPadBackSideFilledBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPadBackSideFilledBezierPath.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPadBackSideFilledBezierPath_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPadBackSideFilledBezierPath_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mPadBackSideFilledBezierPath.apply ( {(_ observer : EBEvent) in
        managedObject.mPadBackSideFilledBezierPath_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPadBackSideFilledBezierPath_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mPadBackSideFilledBezierPath.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPadBackSideFilledBezierPath_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mStrokeBezierPath' stored property
  //····················································································································

  private var mObserversOf_mStrokeBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mStrokeBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mStrokeBezierPath.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mStrokeBezierPath_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mStrokeBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mStrokeBezierPath.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mStrokeBezierPath_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mStrokeBezierPath_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mStrokeBezierPath.apply ( {(_ observer : EBEvent) in
        managedObject.mStrokeBezierPath_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mStrokeBezierPath_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    self.mObserversOf_mStrokeBezierPath.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mStrokeBezierPath_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'versionString' transient property
  //····················································································································

  private var mObserversOf_versionString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_versionString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.versionString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_versionString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.versionString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_versionString_toElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_versionString.apply ( {(_ observer : EBEvent) in
        managedObject.versionString_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_versionString_fromElementsOfSet (_ inSet : Set<PackageInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_versionString.apply ( {(_ observer : EBEvent) in
        managedObject.versionString_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_PackageInDevice : ReadOnlyArrayOf_PackageInDevice {

  //····················································································································

  var readModelFunction : Optional < () -> EBSelection < [PackageInDevice] > > = nil

  //····················································································································

  override var propset : Set <PackageInDevice> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [PackageInDevice] > {
    self.computeArrayAndSet ()
    return self.prop_cache!  
  }
 
  //····················································································································

  override var propval : [PackageInDevice] {
    self.computeArrayAndSet ()
    if let value = self.prop_cache {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <PackageInDevice> ()

  //····················································································································

  private var prop_cache : EBSelection < [PackageInDevice] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.readModelFunction, self.prop_cache == nil {
      self.prop_cache = unwrappedComputeFunction ()
      let newSet : Set <PackageInDevice>
      switch self.prop_cache! {
      case .multiple, .empty :
        newSet = Set <PackageInDevice> ()
      case .single (let array) :
       newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_mFileData_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mVersion_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mPadTopSideFilledBezierPath_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mPadBackSideFilledBezierPath_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mStrokeBezierPath_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_versionString_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_mFileData_toElementsOfSet (addedSet)
      self.addEBObserversOf_mName_toElementsOfSet (addedSet)
      self.addEBObserversOf_mVersion_toElementsOfSet (addedSet)
      self.addEBObserversOf_mPadTopSideFilledBezierPath_toElementsOfSet (addedSet)
      self.addEBObserversOf_mPadBackSideFilledBezierPath_toElementsOfSet (addedSet)
      self.addEBObserversOf_mStrokeBezierPath_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_versionString_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.prop_cache == nil {
      self.prop_cache = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.prop_cache != nil {
      self.prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackageInDevice : ReadOnlyArrayOf_PackageInDevice {

  //····················································································································
 
  func setProp (_ value :  [PackageInDevice]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: PackageInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_PackageInDevice : ReadWriteArrayOf_PackageInDevice, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : PackageInDevice?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [PackageInDevice] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.undoManager, "PackageInDevice") as? PackageInDevice {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <PackageInDevice> ()
  private var mValue = [PackageInDevice] () {
    didSet {
      self.postEvent ()
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.undoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          self.setOppositeRelationship? (nil)
          managedObject.mFileData_property.mSetterDelegate = nil
          managedObject.mName_property.mSetterDelegate = nil
          managedObject.mVersion_property.mSetterDelegate = nil
          managedObject.mPadTopSideFilledBezierPath_property.mSetterDelegate = nil
          managedObject.mPadBackSideFilledBezierPath_property.mSetterDelegate = nil
          managedObject.mStrokeBezierPath_property.mSetterDelegate = nil
        }
        self.removeEBObserversOf_mFileData_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mName_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mVersion_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mPadTopSideFilledBezierPath_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mPadBackSideFilledBezierPath_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mStrokeBezierPath_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_versionString_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        for managedObject : PackageInDevice in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          self.setOppositeRelationship? (managedObject)
          managedObject.mFileData_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mName_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mVersion_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mPadTopSideFilledBezierPath_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mPadBackSideFilledBezierPath_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mStrokeBezierPath_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
        }
        self.addEBObserversOf_mFileData_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mName_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mVersion_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mPadTopSideFilledBezierPath_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mPadBackSideFilledBezierPath_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mStrokeBezierPath_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_versionString_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [kEntityKey] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [PackageInDevice] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [PackageInDevice]) { self.mValue = inValue }

  //····················································································································

  override var propval : [PackageInDevice] { return self.mValue }

  //····················································································································

  override var propset : Set <PackageInDevice> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [PackageInDevice]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : PackageInDevice) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : PackageInDevice) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
