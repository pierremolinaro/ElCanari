//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mSelectedPageIndex : class {
  var mSelectedPageIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mTitle : class {
  var mTitle : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mPrefix : class {
  var mPrefix : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mComments : class {
  var mComments : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mPackageDisplayZoom : class {
  var mPackageDisplayZoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mPackageDisplayHorizontalFlip : class {
  var mPackageDisplayHorizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mPackageDisplayVerticalFlip : class {
  var mPackageDisplayVerticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mShowPackages : class {
  var mShowPackages : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mShowPackagePadNumbers : class {
  var mShowPackagePadNumbers : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mShowPackageFrontPads : class {
  var mShowPackageFrontPads : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mShowPackageBackPads : class {
  var mShowPackageBackPads : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mSymbolDisplayZoom : class {
  var mSymbolDisplayZoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mSymbolDisplayHorizontalFlip : class {
  var mSymbolDisplayHorizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mSymbolDisplayVerticalFlip : class {
  var mSymbolDisplayVerticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mImageData : class {
  var mImageData : Data { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_inconsistentPackagePadNameSetsMessage : class {
  var inconsistentPackagePadNameSetsMessage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_inconsistentSymbolNameSetMessage : class {
  var inconsistentSymbolNameSetMessage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_unconnectedPins : class {
  var unconnectedPins : UnconnectedSymbolPinsInDevice? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_imageIsValid : class {
  var imageIsValid : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_packagePadNameSetsAreConsistent : class {
  var packagePadNameSetsAreConsistent : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_symbolNameAreConsistent : class {
  var symbolNameAreConsistent : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_symbolTypeNames : class {
  var symbolTypeNames : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_unconnectedPads : class {
  var unconnectedPads : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_assignedPadProxies : class {
  var assignedPadProxies : AssignedPadProxiesInDevice? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class DeviceRoot : EBGraphicManagedObject,
         DeviceRoot_mSelectedPageIndex,
         DeviceRoot_mTitle,
         DeviceRoot_mPrefix,
         DeviceRoot_mComments,
         DeviceRoot_mPackageDisplayZoom,
         DeviceRoot_mPackageDisplayHorizontalFlip,
         DeviceRoot_mPackageDisplayVerticalFlip,
         DeviceRoot_mShowPackages,
         DeviceRoot_mShowPackagePadNumbers,
         DeviceRoot_mShowPackageFrontPads,
         DeviceRoot_mShowPackageBackPads,
         DeviceRoot_mSymbolDisplayZoom,
         DeviceRoot_mSymbolDisplayHorizontalFlip,
         DeviceRoot_mSymbolDisplayVerticalFlip,
         DeviceRoot_mImageData,
         DeviceRoot_inconsistentPackagePadNameSetsMessage,
         DeviceRoot_inconsistentSymbolNameSetMessage,
         DeviceRoot_unconnectedPins,
         DeviceRoot_imageIsValid,
         DeviceRoot_packagePadNameSetsAreConsistent,
         DeviceRoot_symbolNameAreConsistent,
         DeviceRoot_symbolTypeNames,
         DeviceRoot_unconnectedPads,
         DeviceRoot_assignedPadProxies,
         DeviceRoot_issues {

  //····················································································································
  //   Atomic property: mSelectedPageIndex
  //····················································································································

  let mSelectedPageIndex_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mSelectedPageIndex : Int {
    get { return self.mSelectedPageIndex_property.propval }
    set { self.mSelectedPageIndex_property.setProp (newValue) }
  }

  //····················································································································

  var mSelectedPageIndex_property_selection : EBSelection <Int> { return self.mSelectedPageIndex_property.prop }

  //····················································································································
  //   Atomic property: mTitle
  //····················································································································

  let mTitle_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mTitle : String {
    get { return self.mTitle_property.propval }
    set { self.mTitle_property.setProp (newValue) }
  }

  //····················································································································

  var mTitle_property_selection : EBSelection <String> { return self.mTitle_property.prop }

  //····················································································································
  //   Atomic property: mPrefix
  //····················································································································

  let mPrefix_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mPrefix : String {
    get { return self.mPrefix_property.propval }
    set { self.mPrefix_property.setProp (newValue) }
  }

  //····················································································································

  var mPrefix_property_selection : EBSelection <String> { return self.mPrefix_property.prop }

  //····················································································································
  //   Atomic property: mComments
  //····················································································································

  let mComments_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mComments : String {
    get { return self.mComments_property.propval }
    set { self.mComments_property.setProp (newValue) }
  }

  //····················································································································

  var mComments_property_selection : EBSelection <String> { return self.mComments_property.prop }

  //····················································································································
  //   Atomic property: mPackageDisplayZoom
  //····················································································································

  let mPackageDisplayZoom_property = EBStoredProperty_Int (defaultValue: 400)

  //····················································································································

  var mPackageDisplayZoom : Int {
    get { return self.mPackageDisplayZoom_property.propval }
    set { self.mPackageDisplayZoom_property.setProp (newValue) }
  }

  //····················································································································

  var mPackageDisplayZoom_property_selection : EBSelection <Int> { return self.mPackageDisplayZoom_property.prop }

  //····················································································································
  //   Atomic property: mPackageDisplayHorizontalFlip
  //····················································································································

  let mPackageDisplayHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mPackageDisplayHorizontalFlip : Bool {
    get { return self.mPackageDisplayHorizontalFlip_property.propval }
    set { self.mPackageDisplayHorizontalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var mPackageDisplayHorizontalFlip_property_selection : EBSelection <Bool> { return self.mPackageDisplayHorizontalFlip_property.prop }

  //····················································································································
  //   Atomic property: mPackageDisplayVerticalFlip
  //····················································································································

  let mPackageDisplayVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mPackageDisplayVerticalFlip : Bool {
    get { return self.mPackageDisplayVerticalFlip_property.propval }
    set { self.mPackageDisplayVerticalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var mPackageDisplayVerticalFlip_property_selection : EBSelection <Bool> { return self.mPackageDisplayVerticalFlip_property.prop }

  //····················································································································
  //   Atomic property: mShowPackages
  //····················································································································

  let mShowPackages_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var mShowPackages : Bool {
    get { return self.mShowPackages_property.propval }
    set { self.mShowPackages_property.setProp (newValue) }
  }

  //····················································································································

  var mShowPackages_property_selection : EBSelection <Bool> { return self.mShowPackages_property.prop }

  //····················································································································
  //   Atomic property: mShowPackagePadNumbers
  //····················································································································

  let mShowPackagePadNumbers_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var mShowPackagePadNumbers : Bool {
    get { return self.mShowPackagePadNumbers_property.propval }
    set { self.mShowPackagePadNumbers_property.setProp (newValue) }
  }

  //····················································································································

  var mShowPackagePadNumbers_property_selection : EBSelection <Bool> { return self.mShowPackagePadNumbers_property.prop }

  //····················································································································
  //   Atomic property: mShowPackageFrontPads
  //····················································································································

  let mShowPackageFrontPads_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var mShowPackageFrontPads : Bool {
    get { return self.mShowPackageFrontPads_property.propval }
    set { self.mShowPackageFrontPads_property.setProp (newValue) }
  }

  //····················································································································

  var mShowPackageFrontPads_property_selection : EBSelection <Bool> { return self.mShowPackageFrontPads_property.prop }

  //····················································································································
  //   Atomic property: mShowPackageBackPads
  //····················································································································

  let mShowPackageBackPads_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var mShowPackageBackPads : Bool {
    get { return self.mShowPackageBackPads_property.propval }
    set { self.mShowPackageBackPads_property.setProp (newValue) }
  }

  //····················································································································

  var mShowPackageBackPads_property_selection : EBSelection <Bool> { return self.mShowPackageBackPads_property.prop }

  //····················································································································
  //   Atomic property: mSymbolDisplayZoom
  //····················································································································

  let mSymbolDisplayZoom_property = EBStoredProperty_Int (defaultValue: 400)

  //····················································································································

  var mSymbolDisplayZoom : Int {
    get { return self.mSymbolDisplayZoom_property.propval }
    set { self.mSymbolDisplayZoom_property.setProp (newValue) }
  }

  //····················································································································

  var mSymbolDisplayZoom_property_selection : EBSelection <Int> { return self.mSymbolDisplayZoom_property.prop }

  //····················································································································
  //   Atomic property: mSymbolDisplayHorizontalFlip
  //····················································································································

  let mSymbolDisplayHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mSymbolDisplayHorizontalFlip : Bool {
    get { return self.mSymbolDisplayHorizontalFlip_property.propval }
    set { self.mSymbolDisplayHorizontalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var mSymbolDisplayHorizontalFlip_property_selection : EBSelection <Bool> { return self.mSymbolDisplayHorizontalFlip_property.prop }

  //····················································································································
  //   Atomic property: mSymbolDisplayVerticalFlip
  //····················································································································

  let mSymbolDisplayVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mSymbolDisplayVerticalFlip : Bool {
    get { return self.mSymbolDisplayVerticalFlip_property.propval }
    set { self.mSymbolDisplayVerticalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var mSymbolDisplayVerticalFlip_property_selection : EBSelection <Bool> { return self.mSymbolDisplayVerticalFlip_property.prop }

  //····················································································································
  //   To many property: mDocs
  //····················································································································

  let mDocs_property = StoredArrayOf_DeviceDocumentation (usedForSignature: true)

  //····················································································································

  var mDocs_property_selection : EBSelection < [DeviceDocumentation] > {
    return self.mDocs_property.prop
  }

  //····················································································································

  var mDocs : [DeviceDocumentation] {
    get { return self.mDocs_property.propval }
    set { self.mDocs_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mSymbolInstances
  //····················································································································

  let mSymbolInstances_property = StoredArrayOf_SymbolInstanceInDevice (usedForSignature: true)

  //····················································································································

  var mSymbolInstances_property_selection : EBSelection < [SymbolInstanceInDevice] > {
    return self.mSymbolInstances_property.prop
  }

  //····················································································································

  var mSymbolInstances : [SymbolInstanceInDevice] {
    get { return self.mSymbolInstances_property.propval }
    set { self.mSymbolInstances_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mPackages
  //····················································································································

  let mPackages_property = StoredArrayOf_PackageInDevice (usedForSignature: true)

  //····················································································································

  var mPackages_property_selection : EBSelection < [PackageInDevice] > {
    return self.mPackages_property.prop
  }

  //····················································································································

  var mPackages : [PackageInDevice] {
    get { return self.mPackages_property.propval }
    set { self.mPackages_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mSymbolTypes
  //····················································································································

  let mSymbolTypes_property = StoredArrayOf_SymbolTypeInDevice (usedForSignature: true)

  //····················································································································

  var mSymbolTypes_property_selection : EBSelection < [SymbolTypeInDevice] > {
    return self.mSymbolTypes_property.prop
  }

  //····················································································································

  var mSymbolTypes : [SymbolTypeInDevice] {
    get { return self.mSymbolTypes_property.propval }
    set { self.mSymbolTypes_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mImageData
  //····················································································································

  let mImageData_property = EBStoredProperty_Data (defaultValue: Data ())

  //····················································································································

  var mImageData : Data {
    get { return self.mImageData_property.propval }
    set { self.mImageData_property.setProp (newValue) }
  }

  //····················································································································

  var mImageData_property_selection : EBSelection <Data> { return self.mImageData_property.prop }

  //····················································································································
  //   To many property: mPadProxies
  //····················································································································

  let mPadProxies_property = StoredArrayOf_PadProxyInDevice (usedForSignature: true)

  //····················································································································

  var mPadProxies_property_selection : EBSelection < [PadProxyInDevice] > {
    return self.mPadProxies_property.prop
  }

  //····················································································································

  var mPadProxies : [PadProxyInDevice] {
    get { return self.mPadProxies_property.propval }
    set { self.mPadProxies_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: inconsistentPackagePadNameSetsMessage
  //····················································································································

  let inconsistentPackagePadNameSetsMessage_property = EBTransientProperty_String ()

  //····················································································································

  var inconsistentPackagePadNameSetsMessage_property_selection : EBSelection <String> {
    return self.inconsistentPackagePadNameSetsMessage_property.prop
  }

  //····················································································································

  var inconsistentPackagePadNameSetsMessage : String? {
    switch self.inconsistentPackagePadNameSetsMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: inconsistentSymbolNameSetMessage
  //····················································································································

  let inconsistentSymbolNameSetMessage_property = EBTransientProperty_String ()

  //····················································································································

  var inconsistentSymbolNameSetMessage_property_selection : EBSelection <String> {
    return self.inconsistentSymbolNameSetMessage_property.prop
  }

  //····················································································································

  var inconsistentSymbolNameSetMessage : String? {
    switch self.inconsistentSymbolNameSetMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unconnectedPins
  //····················································································································

  let unconnectedPins_property = EBTransientProperty_UnconnectedSymbolPinsInDevice ()

  //····················································································································

  var unconnectedPins_property_selection : EBSelection <UnconnectedSymbolPinsInDevice> {
    return self.unconnectedPins_property.prop
  }

  //····················································································································

  var unconnectedPins : UnconnectedSymbolPinsInDevice? {
    switch self.unconnectedPins_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: imageIsValid
  //····················································································································

  let imageIsValid_property = EBTransientProperty_Bool ()

  //····················································································································

  var imageIsValid_property_selection : EBSelection <Bool> {
    return self.imageIsValid_property.prop
  }

  //····················································································································

  var imageIsValid : Bool? {
    switch self.imageIsValid_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: packagePadNameSetsAreConsistent
  //····················································································································

  let packagePadNameSetsAreConsistent_property = EBTransientProperty_Bool ()

  //····················································································································

  var packagePadNameSetsAreConsistent_property_selection : EBSelection <Bool> {
    return self.packagePadNameSetsAreConsistent_property.prop
  }

  //····················································································································

  var packagePadNameSetsAreConsistent : Bool? {
    switch self.packagePadNameSetsAreConsistent_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolNameAreConsistent
  //····················································································································

  let symbolNameAreConsistent_property = EBTransientProperty_Bool ()

  //····················································································································

  var symbolNameAreConsistent_property_selection : EBSelection <Bool> {
    return self.symbolNameAreConsistent_property.prop
  }

  //····················································································································

  var symbolNameAreConsistent : Bool? {
    switch self.symbolNameAreConsistent_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolTypeNames
  //····················································································································

  let symbolTypeNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  var symbolTypeNames_property_selection : EBSelection <StringArray> {
    return self.symbolTypeNames_property.prop
  }

  //····················································································································

  var symbolTypeNames : StringArray? {
    switch self.symbolTypeNames_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unconnectedPads
  //····················································································································

  let unconnectedPads_property = EBTransientProperty_StringArray ()

  //····················································································································

  var unconnectedPads_property_selection : EBSelection <StringArray> {
    return self.unconnectedPads_property.prop
  }

  //····················································································································

  var unconnectedPads : StringArray? {
    switch self.unconnectedPads_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: assignedPadProxies
  //····················································································································

  let assignedPadProxies_property = EBTransientProperty_AssignedPadProxiesInDevice ()

  //····················································································································

  var assignedPadProxies_property_selection : EBSelection <AssignedPadProxiesInDevice> {
    return self.assignedPadProxies_property.prop
  }

  //····················································································································

  var assignedPadProxies : AssignedPadProxiesInDevice? {
    switch self.assignedPadProxies_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: issues
  //····················································································································

  let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray> {
    return self.issues_property.prop
  }

  //····················································································································

  var issues : CanariIssueArray? {
    switch self.issues_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
    let operationQueue = OperationQueue ()
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mTitle
    self.mTitle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mPrefix
    self.mPrefix_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mComments
    self.mComments_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mPackageDisplayZoom
    self.mPackageDisplayZoom_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mPackageDisplayHorizontalFlip
    self.mPackageDisplayHorizontalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mPackageDisplayVerticalFlip
    self.mPackageDisplayVerticalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mShowPackages
    self.mShowPackages_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mShowPackagePadNumbers
    self.mShowPackagePadNumbers_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mShowPackageFrontPads
    self.mShowPackageFrontPads_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mShowPackageBackPads
    self.mShowPackageBackPads_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSymbolDisplayZoom
    self.mSymbolDisplayZoom_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSymbolDisplayHorizontalFlip
    self.mSymbolDisplayHorizontalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSymbolDisplayVerticalFlip
    self.mSymbolDisplayVerticalFlip_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mDocs (no option)
    self.mDocs_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mSymbolInstances (no option)
    self.mSymbolInstances_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mPackages (has opposite relationship)
    self.mPackages_property.ebUndoManager = self.ebUndoManager
    self.mPackages_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- To many property: mSymbolTypes (no option)
    self.mSymbolTypes_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mImageData
    self.mImageData_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mPadProxies (no option)
    self.mPadProxies_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: inconsistentPackagePadNameSetsMessage
    self.inconsistentPackagePadNameSetsMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mPackages_property_selection.kind ()
        kind &= unwSelf.mPackages_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mPackages_property_selection, unwSelf.mPackages_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_DeviceRoot_inconsistentPackagePadNameSetsMessage (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPackages_property.addEBObserverOf_padNameSet (self.inconsistentPackagePadNameSetsMessage_property, postEvent: false)
    self.mPackages_property.addEBObserverOf_mName (self.inconsistentPackagePadNameSetsMessage_property, postEvent: false)
    self.inconsistentPackagePadNameSetsMessage_property.postEvent ()
  //--- Atomic property: inconsistentSymbolNameSetMessage
    self.inconsistentSymbolNameSetMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSymbolInstances_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSymbolInstances_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceRoot_inconsistentSymbolNameSetMessage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbolInstances_property.addEBObserverOf_symbolQualifiedName (self.inconsistentSymbolNameSetMessage_property, postEvent: false)
    self.inconsistentSymbolNameSetMessage_property.postEvent ()
  //--- Atomic property: unconnectedPins
    self.unconnectedPins_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSymbolInstances_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSymbolInstances_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceRoot_unconnectedPins (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbolInstances_property.addEBObserverOf_unconnectedPins (self.unconnectedPins_property, postEvent: false)
    self.unconnectedPins_property.postEvent ()
  //--- Atomic property: imageIsValid
    self.imageIsValid_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mImageData_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mImageData_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceRoot_imageIsValid (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mImageData_property.addEBObserver (self.imageIsValid_property, postEvent: false)
    self.imageIsValid_property.postEvent ()
  //--- Atomic property: packagePadNameSetsAreConsistent
    self.packagePadNameSetsAreConsistent_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mPackages_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mPackages_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceRoot_packagePadNameSetsAreConsistent (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPackages_property.addEBObserverOf_padNameSet (self.packagePadNameSetsAreConsistent_property, postEvent: false)
    self.packagePadNameSetsAreConsistent_property.postEvent ()
  //--- Atomic property: symbolNameAreConsistent
    self.symbolNameAreConsistent_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.inconsistentSymbolNameSetMessage_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.inconsistentSymbolNameSetMessage_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceRoot_symbolNameAreConsistent (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.inconsistentSymbolNameSetMessage_property.addEBObserver (self.symbolNameAreConsistent_property, postEvent: false)
    self.symbolNameAreConsistent_property.postEvent ()
  //--- Atomic property: symbolTypeNames
    self.symbolTypeNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSymbolTypes_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSymbolTypes_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceRoot_symbolTypeNames (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbolTypes_property.addEBObserverOf_mTypeName (self.symbolTypeNames_property, postEvent: false)
    self.symbolTypeNames_property.postEvent ()
  //--- Atomic property: unconnectedPads
    self.unconnectedPads_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mPadProxies_property_selection.kind ()
        kind &= unwSelf.mPadProxies_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mPadProxies_property_selection, unwSelf.mPadProxies_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_DeviceRoot_unconnectedPads (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPadProxies_property.addEBObserverOf_mPadName (self.unconnectedPads_property, postEvent: false)
    self.mPadProxies_property.addEBObserverOf_isConnected (self.unconnectedPads_property, postEvent: false)
    self.unconnectedPads_property.postEvent ()
  //--- Atomic property: assignedPadProxies
    self.assignedPadProxies_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mPadProxies_property_selection.kind ()
        kind &= unwSelf.mPadProxies_property_selection.kind ()
        kind &= unwSelf.mPadProxies_property_selection.kind ()
        kind &= unwSelf.mPadProxies_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mPadProxies_property_selection, unwSelf.mPadProxies_property_selection, unwSelf.mPadProxies_property_selection, unwSelf.mPadProxies_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_DeviceRoot_assignedPadProxies (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPadProxies_property.addEBObserverOf_mPadName (self.assignedPadProxies_property, postEvent: false)
    self.mPadProxies_property.addEBObserverOf_symbolName (self.assignedPadProxies_property, postEvent: false)
    self.mPadProxies_property.addEBObserverOf_mPinInstanceName (self.assignedPadProxies_property, postEvent: false)
    self.mPadProxies_property.addEBObserverOf_isConnected (self.assignedPadProxies_property, postEvent: false)
    self.assignedPadProxies_property.postEvent ()
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mTitle_property_selection.kind ()
        kind &= unwSelf.mPrefix_property_selection.kind ()
        kind &= unwSelf.inconsistentPackagePadNameSetsMessage_property_selection.kind ()
        kind &= unwSelf.inconsistentSymbolNameSetMessage_property_selection.kind ()
        kind &= unwSelf.unconnectedPins_property_selection.kind ()
        kind &= unwSelf.unconnectedPads_property_selection.kind ()
        kind &= unwSelf.mPackages_property_selection.kind ()
        kind &= unwSelf.mPackages_property_selection.kind ()
        kind &= unwSelf.mSymbolTypes_property_selection.kind ()
        kind &= unwSelf.mSymbolTypes_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mTitle_property_selection, unwSelf.mPrefix_property_selection, unwSelf.inconsistentPackagePadNameSetsMessage_property_selection, unwSelf.inconsistentSymbolNameSetMessage_property_selection, unwSelf.unconnectedPins_property_selection, unwSelf.unconnectedPads_property_selection, unwSelf.mPackages_property_selection, unwSelf.mPackages_property_selection, unwSelf.mSymbolTypes_property_selection, unwSelf.mSymbolTypes_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9)) :
            return .single (transient_DeviceRoot_issues (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mTitle_property.addEBObserver (self.issues_property, postEvent: false)
    self.mPrefix_property.addEBObserver (self.issues_property, postEvent: false)
    self.inconsistentPackagePadNameSetsMessage_property.addEBObserver (self.issues_property, postEvent: false)
    self.inconsistentSymbolNameSetMessage_property.addEBObserver (self.issues_property, postEvent: false)
    self.unconnectedPins_property.addEBObserver (self.issues_property, postEvent: false)
    self.unconnectedPads_property.addEBObserver (self.issues_property, postEvent: false)
    self.mPackages_property.addEBObserverOf_mVersion (self.issues_property, postEvent: false)
    self.mPackages_property.addEBObserverOf_mName (self.issues_property, postEvent: false)
    self.mSymbolTypes_property.addEBObserverOf_mVersion (self.issues_property, postEvent: false)
    self.mSymbolTypes_property.addEBObserverOf_mTypeName (self.issues_property, postEvent: false)
    self.issues_property.postEvent ()
  //--- Install undoers and opposite setter for relationships
    self.mPackages_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- Register properties for handling signature
    self.mComments_property.setSignatureObserver (observer: self)
    self.mDocs_property.setSignatureObserver (observer: self)
    self.mImageData_property.setSignatureObserver (observer: self)
    self.mPackages_property.setSignatureObserver (observer: self)
    self.mPadProxies_property.setSignatureObserver (observer: self)
    self.mPrefix_property.setSignatureObserver (observer: self)
    self.mSymbolInstances_property.setSignatureObserver (observer: self)
    self.mSymbolTypes_property.setSignatureObserver (observer: self)
    self.mTitle_property.setSignatureObserver (observer: self)
  //--- Extern delegates
    operationQueue.waitUntilAllOperationsAreFinished ()
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mPackages_property.removeEBObserverOf_padNameSet (self.inconsistentPackagePadNameSetsMessage_property)
    self.mPackages_property.removeEBObserverOf_mName (self.inconsistentPackagePadNameSetsMessage_property)
    self.mSymbolInstances_property.removeEBObserverOf_symbolQualifiedName (self.inconsistentSymbolNameSetMessage_property)
    self.mSymbolInstances_property.removeEBObserverOf_unconnectedPins (self.unconnectedPins_property)
    self.mImageData_property.removeEBObserver (self.imageIsValid_property)
    self.mPackages_property.removeEBObserverOf_padNameSet (self.packagePadNameSetsAreConsistent_property)
    self.inconsistentSymbolNameSetMessage_property.removeEBObserver (self.symbolNameAreConsistent_property)
    self.mSymbolTypes_property.removeEBObserverOf_mTypeName (self.symbolTypeNames_property)
    self.mPadProxies_property.removeEBObserverOf_mPadName (self.unconnectedPads_property)
    self.mPadProxies_property.removeEBObserverOf_isConnected (self.unconnectedPads_property)
    self.mPadProxies_property.removeEBObserverOf_mPadName (self.assignedPadProxies_property)
    self.mPadProxies_property.removeEBObserverOf_symbolName (self.assignedPadProxies_property)
    self.mPadProxies_property.removeEBObserverOf_mPinInstanceName (self.assignedPadProxies_property)
    self.mPadProxies_property.removeEBObserverOf_isConnected (self.assignedPadProxies_property)
    self.mTitle_property.removeEBObserver (self.issues_property)
    self.mPrefix_property.removeEBObserver (self.issues_property)
    self.inconsistentPackagePadNameSetsMessage_property.removeEBObserver (self.issues_property)
    self.inconsistentSymbolNameSetMessage_property.removeEBObserver (self.issues_property)
    self.unconnectedPins_property.removeEBObserver (self.issues_property)
    self.unconnectedPads_property.removeEBObserver (self.issues_property)
    self.mPackages_property.removeEBObserverOf_mVersion (self.issues_property)
    self.mPackages_property.removeEBObserverOf_mName (self.issues_property)
    self.mSymbolTypes_property.removeEBObserverOf_mVersion (self.issues_property)
    self.mSymbolTypes_property.removeEBObserverOf_mTypeName (self.issues_property)
  //--- Unregister properties for handling signature
    self.mComments_property.setSignatureObserver (observer: nil)
    self.mDocs_property.setSignatureObserver (observer: nil)
    self.mImageData_property.setSignatureObserver (observer: nil)
    self.mPackages_property.setSignatureObserver (observer: nil)
    self.mPadProxies_property.setSignatureObserver (observer: nil)
    self.mPrefix_property.setSignatureObserver (observer: nil)
    self.mSymbolInstances_property.setSignatureObserver (observer: nil)
    self.mSymbolTypes_property.setSignatureObserver (observer: nil)
    self.mTitle_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mSelectedPageIndex",
      idx: self.mSelectedPageIndex_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSelectedPageIndex_property.mObserverExplorer,
      valueExplorer: &self.mSelectedPageIndex_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mTitle",
      idx: self.mTitle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mTitle_property.mObserverExplorer,
      valueExplorer: &self.mTitle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPrefix",
      idx: self.mPrefix_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mPrefix_property.mObserverExplorer,
      valueExplorer: &self.mPrefix_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mComments",
      idx: self.mComments_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mComments_property.mObserverExplorer,
      valueExplorer: &self.mComments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPackageDisplayZoom",
      idx: self.mPackageDisplayZoom_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mPackageDisplayZoom_property.mObserverExplorer,
      valueExplorer: &self.mPackageDisplayZoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPackageDisplayHorizontalFlip",
      idx: self.mPackageDisplayHorizontalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mPackageDisplayHorizontalFlip_property.mObserverExplorer,
      valueExplorer: &self.mPackageDisplayHorizontalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPackageDisplayVerticalFlip",
      idx: self.mPackageDisplayVerticalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mPackageDisplayVerticalFlip_property.mObserverExplorer,
      valueExplorer: &self.mPackageDisplayVerticalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mShowPackages",
      idx: self.mShowPackages_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mShowPackages_property.mObserverExplorer,
      valueExplorer: &self.mShowPackages_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mShowPackagePadNumbers",
      idx: self.mShowPackagePadNumbers_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mShowPackagePadNumbers_property.mObserverExplorer,
      valueExplorer: &self.mShowPackagePadNumbers_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mShowPackageFrontPads",
      idx: self.mShowPackageFrontPads_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mShowPackageFrontPads_property.mObserverExplorer,
      valueExplorer: &self.mShowPackageFrontPads_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mShowPackageBackPads",
      idx: self.mShowPackageBackPads_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mShowPackageBackPads_property.mObserverExplorer,
      valueExplorer: &self.mShowPackageBackPads_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSymbolDisplayZoom",
      idx: self.mSymbolDisplayZoom_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSymbolDisplayZoom_property.mObserverExplorer,
      valueExplorer: &self.mSymbolDisplayZoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSymbolDisplayHorizontalFlip",
      idx: self.mSymbolDisplayHorizontalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSymbolDisplayHorizontalFlip_property.mObserverExplorer,
      valueExplorer: &self.mSymbolDisplayHorizontalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSymbolDisplayVerticalFlip",
      idx: self.mSymbolDisplayVerticalFlip_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mSymbolDisplayVerticalFlip_property.mObserverExplorer,
      valueExplorer: &self.mSymbolDisplayVerticalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mImageData",
      idx: self.mImageData_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mImageData_property.mObserverExplorer,
      valueExplorer: &self.mImageData_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "inconsistentPackagePadNameSetsMessage",
      idx: self.inconsistentPackagePadNameSetsMessage_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.inconsistentPackagePadNameSetsMessage_property.mObserverExplorer,
      valueExplorer: &self.inconsistentPackagePadNameSetsMessage_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "inconsistentSymbolNameSetMessage",
      idx: self.inconsistentSymbolNameSetMessage_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.inconsistentSymbolNameSetMessage_property.mObserverExplorer,
      valueExplorer: &self.inconsistentSymbolNameSetMessage_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "unconnectedPins",
      idx: self.unconnectedPins_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.unconnectedPins_property.mObserverExplorer,
      valueExplorer: &self.unconnectedPins_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "imageIsValid",
      idx: self.imageIsValid_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.imageIsValid_property.mObserverExplorer,
      valueExplorer: &self.imageIsValid_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "packagePadNameSetsAreConsistent",
      idx: self.packagePadNameSetsAreConsistent_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.packagePadNameSetsAreConsistent_property.mObserverExplorer,
      valueExplorer: &self.packagePadNameSetsAreConsistent_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "symbolNameAreConsistent",
      idx: self.symbolNameAreConsistent_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.symbolNameAreConsistent_property.mObserverExplorer,
      valueExplorer: &self.symbolNameAreConsistent_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "symbolTypeNames",
      idx: self.symbolTypeNames_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.symbolTypeNames_property.mObserverExplorer,
      valueExplorer: &self.symbolTypeNames_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "unconnectedPads",
      idx: self.unconnectedPads_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.unconnectedPads_property.mObserverExplorer,
      valueExplorer: &self.unconnectedPads_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "assignedPadProxies",
      idx: self.assignedPadProxies_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.assignedPadProxies_property.mObserverExplorer,
      valueExplorer: &self.assignedPadProxies_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx: self.issues_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.issues_property.mObserverExplorer,
      valueExplorer: &self.issues_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForToManyRelationshipNamed (
      "mDocs",
      idx:mDocs_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mDocs_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mSymbolInstances",
      idx:mSymbolInstances_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mSymbolInstances_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mPackages",
      idx:mPackages_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mPackages_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mSymbolTypes",
      idx:mSymbolTypes_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mSymbolTypes_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mPadProxies",
      idx:mPadProxies_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mPadProxies_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.mObserverExplorer = nil
    self.mSelectedPageIndex_property.mValueExplorer = nil
  //--- Atomic property: mTitle
    self.mTitle_property.mObserverExplorer = nil
    self.mTitle_property.mValueExplorer = nil
  //--- Atomic property: mPrefix
    self.mPrefix_property.mObserverExplorer = nil
    self.mPrefix_property.mValueExplorer = nil
  //--- Atomic property: mComments
    self.mComments_property.mObserverExplorer = nil
    self.mComments_property.mValueExplorer = nil
  //--- Atomic property: mPackageDisplayZoom
    self.mPackageDisplayZoom_property.mObserverExplorer = nil
    self.mPackageDisplayZoom_property.mValueExplorer = nil
  //--- Atomic property: mPackageDisplayHorizontalFlip
    self.mPackageDisplayHorizontalFlip_property.mObserverExplorer = nil
    self.mPackageDisplayHorizontalFlip_property.mValueExplorer = nil
  //--- Atomic property: mPackageDisplayVerticalFlip
    self.mPackageDisplayVerticalFlip_property.mObserverExplorer = nil
    self.mPackageDisplayVerticalFlip_property.mValueExplorer = nil
  //--- Atomic property: mShowPackages
    self.mShowPackages_property.mObserverExplorer = nil
    self.mShowPackages_property.mValueExplorer = nil
  //--- Atomic property: mShowPackagePadNumbers
    self.mShowPackagePadNumbers_property.mObserverExplorer = nil
    self.mShowPackagePadNumbers_property.mValueExplorer = nil
  //--- Atomic property: mShowPackageFrontPads
    self.mShowPackageFrontPads_property.mObserverExplorer = nil
    self.mShowPackageFrontPads_property.mValueExplorer = nil
  //--- Atomic property: mShowPackageBackPads
    self.mShowPackageBackPads_property.mObserverExplorer = nil
    self.mShowPackageBackPads_property.mValueExplorer = nil
  //--- Atomic property: mSymbolDisplayZoom
    self.mSymbolDisplayZoom_property.mObserverExplorer = nil
    self.mSymbolDisplayZoom_property.mValueExplorer = nil
  //--- Atomic property: mSymbolDisplayHorizontalFlip
    self.mSymbolDisplayHorizontalFlip_property.mObserverExplorer = nil
    self.mSymbolDisplayHorizontalFlip_property.mValueExplorer = nil
  //--- Atomic property: mSymbolDisplayVerticalFlip
    self.mSymbolDisplayVerticalFlip_property.mObserverExplorer = nil
    self.mSymbolDisplayVerticalFlip_property.mValueExplorer = nil
  //--- To many property: mDocs
    self.mDocs_property.mValueExplorer = nil
  //--- To many property: mSymbolInstances
    self.mSymbolInstances_property.mValueExplorer = nil
  //--- To many property: mPackages
    self.mPackages_property.mValueExplorer = nil
  //--- To many property: mSymbolTypes
    self.mSymbolTypes_property.mValueExplorer = nil
  //--- Atomic property: mImageData
    self.mImageData_property.mObserverExplorer = nil
    self.mImageData_property.mValueExplorer = nil
  //--- To many property: mPadProxies
    self.mPadProxies_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mDocs = []
    self.mSymbolInstances = []
    self.mPackages = []
    self.mSymbolTypes = []
    self.mPadProxies = []
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.storeIn (dictionary: ioDictionary, forKey:"mSelectedPageIndex")
  //--- Atomic property: mTitle
    self.mTitle_property.storeIn (dictionary: ioDictionary, forKey:"mTitle")
  //--- Atomic property: mPrefix
    self.mPrefix_property.storeIn (dictionary: ioDictionary, forKey:"mPrefix")
  //--- Atomic property: mComments
    self.mComments_property.storeIn (dictionary: ioDictionary, forKey:"mComments")
  //--- Atomic property: mPackageDisplayZoom
    self.mPackageDisplayZoom_property.storeIn (dictionary: ioDictionary, forKey:"mPackageDisplayZoom")
  //--- Atomic property: mPackageDisplayHorizontalFlip
    self.mPackageDisplayHorizontalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mPackageDisplayHorizontalFlip")
  //--- Atomic property: mPackageDisplayVerticalFlip
    self.mPackageDisplayVerticalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mPackageDisplayVerticalFlip")
  //--- Atomic property: mShowPackages
    self.mShowPackages_property.storeIn (dictionary: ioDictionary, forKey:"mShowPackages")
  //--- Atomic property: mShowPackagePadNumbers
    self.mShowPackagePadNumbers_property.storeIn (dictionary: ioDictionary, forKey:"mShowPackagePadNumbers")
  //--- Atomic property: mShowPackageFrontPads
    self.mShowPackageFrontPads_property.storeIn (dictionary: ioDictionary, forKey:"mShowPackageFrontPads")
  //--- Atomic property: mShowPackageBackPads
    self.mShowPackageBackPads_property.storeIn (dictionary: ioDictionary, forKey:"mShowPackageBackPads")
  //--- Atomic property: mSymbolDisplayZoom
    self.mSymbolDisplayZoom_property.storeIn (dictionary: ioDictionary, forKey:"mSymbolDisplayZoom")
  //--- Atomic property: mSymbolDisplayHorizontalFlip
    self.mSymbolDisplayHorizontalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mSymbolDisplayHorizontalFlip")
  //--- Atomic property: mSymbolDisplayVerticalFlip
    self.mSymbolDisplayVerticalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mSymbolDisplayVerticalFlip")
  //--- To many property: mDocs
    self.store (
      managedObjectArray: self.mDocs_property.propval,
      relationshipName: "mDocs",
      intoDictionary: ioDictionary
    )
  //--- To many property: mSymbolInstances
    self.store (
      managedObjectArray: self.mSymbolInstances_property.propval,
      relationshipName: "mSymbolInstances",
      intoDictionary: ioDictionary
    )
  //--- To many property: mPackages
    self.store (
      managedObjectArray: self.mPackages_property.propval,
      relationshipName: "mPackages",
      intoDictionary: ioDictionary
    )
  //--- To many property: mSymbolTypes
    self.store (
      managedObjectArray: self.mSymbolTypes_property.propval,
      relationshipName: "mSymbolTypes",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: mImageData
    self.mImageData_property.storeIn (dictionary: ioDictionary, forKey:"mImageData")
  //--- To many property: mPadProxies
    self.store (
      managedObjectArray: self.mPadProxies_property.propval,
      relationshipName: "mPadProxies",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mDocs
    self.mDocs_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mDocs",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [DeviceDocumentation])
  //--- To many property: mSymbolInstances
    self.mSymbolInstances_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mSymbolInstances",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SymbolInstanceInDevice])
  //--- To many property: mPackages
    self.mPackages_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mPackages",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [PackageInDevice])
  //--- To many property: mSymbolTypes
    self.mSymbolTypes_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mSymbolTypes",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SymbolTypeInDevice])
  //--- To many property: mPadProxies
    self.mPadProxies_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mPadProxies",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [PadProxyInDevice])
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.readFrom (dictionary: inDictionary, forKey:"mSelectedPageIndex")
  //--- Atomic property: mTitle
    self.mTitle_property.readFrom (dictionary: inDictionary, forKey:"mTitle")
  //--- Atomic property: mPrefix
    self.mPrefix_property.readFrom (dictionary: inDictionary, forKey:"mPrefix")
  //--- Atomic property: mComments
    self.mComments_property.readFrom (dictionary: inDictionary, forKey:"mComments")
  //--- Atomic property: mPackageDisplayZoom
    self.mPackageDisplayZoom_property.readFrom (dictionary: inDictionary, forKey:"mPackageDisplayZoom")
  //--- Atomic property: mPackageDisplayHorizontalFlip
    self.mPackageDisplayHorizontalFlip_property.readFrom (dictionary: inDictionary, forKey:"mPackageDisplayHorizontalFlip")
  //--- Atomic property: mPackageDisplayVerticalFlip
    self.mPackageDisplayVerticalFlip_property.readFrom (dictionary: inDictionary, forKey:"mPackageDisplayVerticalFlip")
  //--- Atomic property: mShowPackages
    self.mShowPackages_property.readFrom (dictionary: inDictionary, forKey:"mShowPackages")
  //--- Atomic property: mShowPackagePadNumbers
    self.mShowPackagePadNumbers_property.readFrom (dictionary: inDictionary, forKey:"mShowPackagePadNumbers")
  //--- Atomic property: mShowPackageFrontPads
    self.mShowPackageFrontPads_property.readFrom (dictionary: inDictionary, forKey:"mShowPackageFrontPads")
  //--- Atomic property: mShowPackageBackPads
    self.mShowPackageBackPads_property.readFrom (dictionary: inDictionary, forKey:"mShowPackageBackPads")
  //--- Atomic property: mSymbolDisplayZoom
    self.mSymbolDisplayZoom_property.readFrom (dictionary: inDictionary, forKey:"mSymbolDisplayZoom")
  //--- Atomic property: mSymbolDisplayHorizontalFlip
    self.mSymbolDisplayHorizontalFlip_property.readFrom (dictionary: inDictionary, forKey:"mSymbolDisplayHorizontalFlip")
  //--- Atomic property: mSymbolDisplayVerticalFlip
    self.mSymbolDisplayVerticalFlip_property.readFrom (dictionary: inDictionary, forKey:"mSymbolDisplayVerticalFlip")
  //--- Atomic property: mImageData
    self.mImageData_property.readFrom (dictionary: inDictionary, forKey:"mImageData")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mDocs
    for managedObject in self.mDocs {
      objects.append (managedObject)
    }
  //--- To many property: mSymbolInstances
    for managedObject in self.mSymbolInstances {
      objects.append (managedObject)
    }
  //--- To many property: mPackages
    for managedObject in self.mPackages {
      objects.append (managedObject)
    }
  //--- To many property: mSymbolTypes
    for managedObject in self.mSymbolTypes {
      objects.append (managedObject)
    }
  //--- To many property: mPadProxies
    for managedObject in self.mPadProxies {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mDocs
    for managedObject in self.mDocs {
      objects.append (managedObject)
    }
  //--- To many property: mSymbolInstances
    for managedObject in self.mSymbolInstances {
      objects.append (managedObject)
    }
  //--- To many property: mPackages
    for managedObject in self.mPackages {
      objects.append (managedObject)
    }
  //--- To many property: mSymbolTypes
    for managedObject in self.mSymbolTypes {
      objects.append (managedObject)
    }
  //--- To many property: mPadProxies
    for managedObject in self.mPadProxies {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.mComments_property.signature ())
    crc.accumulateUInt32 (self.mDocs_property.signature ())
    crc.accumulateUInt32 (self.mImageData_property.signature ())
    crc.accumulateUInt32 (self.mPackages_property.signature ())
    crc.accumulateUInt32 (self.mPadProxies_property.signature ())
    crc.accumulateUInt32 (self.mPrefix_property.signature ())
    crc.accumulateUInt32 (self.mSymbolInstances_property.signature ())
    crc.accumulateUInt32 (self.mSymbolTypes_property.signature ())
    crc.accumulateUInt32 (self.mTitle_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

