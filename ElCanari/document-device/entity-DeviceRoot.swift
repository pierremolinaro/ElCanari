//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_selectedPageIndex : class {
  var selectedPageIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_title : class {
  var title : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_prefix : class {
  var prefix : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_comments : class {
  var comments : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mPackageDisplayZoom : class {
  var mPackageDisplayZoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mPackageDisplayHorizontalFlip : class {
  var mPackageDisplayHorizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mPackageDisplayVerticalFlip : class {
  var mPackageDisplayVerticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mShowPackages : class {
  var mShowPackages : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mShowPackagePadNumbers : class {
  var mShowPackagePadNumbers : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mShowPackageFrontPads : class {
  var mShowPackageFrontPads : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mShowPackageBackPads : class {
  var mShowPackageBackPads : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_representationImageData : class {
  var representationImageData : Data { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_imageIsValid : class {
  var imageIsValid : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_inconsistentPackagePadNameSetsMessage : class {
  var inconsistentPackagePadNameSetsMessage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_packagePadNameSetsAreConsistent : class {
  var packagePadNameSetsAreConsistent : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class DeviceRoot : EBGraphicManagedObject,
         DeviceRoot_selectedPageIndex,
         DeviceRoot_title,
         DeviceRoot_prefix,
         DeviceRoot_comments,
         DeviceRoot_mPackageDisplayZoom,
         DeviceRoot_mPackageDisplayHorizontalFlip,
         DeviceRoot_mPackageDisplayVerticalFlip,
         DeviceRoot_mShowPackages,
         DeviceRoot_mShowPackagePadNumbers,
         DeviceRoot_mShowPackageFrontPads,
         DeviceRoot_mShowPackageBackPads,
         DeviceRoot_representationImageData,
         DeviceRoot_imageIsValid,
         DeviceRoot_inconsistentPackagePadNameSetsMessage,
         DeviceRoot_packagePadNameSetsAreConsistent,
         DeviceRoot_issues {

  //····················································································································
  //   Atomic property: selectedPageIndex
  //····················································································································

  var selectedPageIndex_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var selectedPageIndex : Int {
    get {
      return self.selectedPageIndex_property.propval
    }
    set {
      self.selectedPageIndex_property.setProp (newValue)
    }
  }

  //····················································································································

  var selectedPageIndex_property_selection : EBSelection <Int> {
    return self.selectedPageIndex_property.prop
  }

  //····················································································································
  //   Atomic property: title
  //····················································································································

  var title_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var title : String {
    get {
      return self.title_property.propval
    }
    set {
      self.title_property.setProp (newValue)
    }
  }

  //····················································································································

  var title_property_selection : EBSelection <String> {
    return self.title_property.prop
  }

  //····················································································································
  //   Atomic property: prefix
  //····················································································································

  var prefix_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var prefix : String {
    get {
      return self.prefix_property.propval
    }
    set {
      self.prefix_property.setProp (newValue)
    }
  }

  //····················································································································

  var prefix_property_selection : EBSelection <String> {
    return self.prefix_property.prop
  }

  //····················································································································
  //   Atomic property: comments
  //····················································································································

  var comments_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var comments : String {
    get {
      return self.comments_property.propval
    }
    set {
      self.comments_property.setProp (newValue)
    }
  }

  //····················································································································

  var comments_property_selection : EBSelection <String> {
    return self.comments_property.prop
  }

  //····················································································································
  //   Atomic property: mPackageDisplayZoom
  //····················································································································

  var mPackageDisplayZoom_property = EBStoredProperty_Int (defaultValue: 100)

  //····················································································································

  var mPackageDisplayZoom : Int {
    get {
      return self.mPackageDisplayZoom_property.propval
    }
    set {
      self.mPackageDisplayZoom_property.setProp (newValue)
    }
  }

  //····················································································································

  var mPackageDisplayZoom_property_selection : EBSelection <Int> {
    return self.mPackageDisplayZoom_property.prop
  }

  //····················································································································
  //   Atomic property: mPackageDisplayHorizontalFlip
  //····················································································································

  var mPackageDisplayHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mPackageDisplayHorizontalFlip : Bool {
    get {
      return self.mPackageDisplayHorizontalFlip_property.propval
    }
    set {
      self.mPackageDisplayHorizontalFlip_property.setProp (newValue)
    }
  }

  //····················································································································

  var mPackageDisplayHorizontalFlip_property_selection : EBSelection <Bool> {
    return self.mPackageDisplayHorizontalFlip_property.prop
  }

  //····················································································································
  //   Atomic property: mPackageDisplayVerticalFlip
  //····················································································································

  var mPackageDisplayVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mPackageDisplayVerticalFlip : Bool {
    get {
      return self.mPackageDisplayVerticalFlip_property.propval
    }
    set {
      self.mPackageDisplayVerticalFlip_property.setProp (newValue)
    }
  }

  //····················································································································

  var mPackageDisplayVerticalFlip_property_selection : EBSelection <Bool> {
    return self.mPackageDisplayVerticalFlip_property.prop
  }

  //····················································································································
  //   Atomic property: mShowPackages
  //····················································································································

  var mShowPackages_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var mShowPackages : Bool {
    get {
      return self.mShowPackages_property.propval
    }
    set {
      self.mShowPackages_property.setProp (newValue)
    }
  }

  //····················································································································

  var mShowPackages_property_selection : EBSelection <Bool> {
    return self.mShowPackages_property.prop
  }

  //····················································································································
  //   Atomic property: mShowPackagePadNumbers
  //····················································································································

  var mShowPackagePadNumbers_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var mShowPackagePadNumbers : Bool {
    get {
      return self.mShowPackagePadNumbers_property.propval
    }
    set {
      self.mShowPackagePadNumbers_property.setProp (newValue)
    }
  }

  //····················································································································

  var mShowPackagePadNumbers_property_selection : EBSelection <Bool> {
    return self.mShowPackagePadNumbers_property.prop
  }

  //····················································································································
  //   Atomic property: mShowPackageFrontPads
  //····················································································································

  var mShowPackageFrontPads_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var mShowPackageFrontPads : Bool {
    get {
      return self.mShowPackageFrontPads_property.propval
    }
    set {
      self.mShowPackageFrontPads_property.setProp (newValue)
    }
  }

  //····················································································································

  var mShowPackageFrontPads_property_selection : EBSelection <Bool> {
    return self.mShowPackageFrontPads_property.prop
  }

  //····················································································································
  //   Atomic property: mShowPackageBackPads
  //····················································································································

  var mShowPackageBackPads_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var mShowPackageBackPads : Bool {
    get {
      return self.mShowPackageBackPads_property.propval
    }
    set {
      self.mShowPackageBackPads_property.setProp (newValue)
    }
  }

  //····················································································································

  var mShowPackageBackPads_property_selection : EBSelection <Bool> {
    return self.mShowPackageBackPads_property.prop
  }

  //····················································································································
  //   To many property: mDocs
  //····················································································································

  var mDocs_property = StoredArrayOf_DeviceDocumentation ()

  //····················································································································

  var mDocs_property_selection : EBSelection < [DeviceDocumentation] > {
      return self.mDocs_property.prop
  }

  //····················································································································
  //   To many property: packages
  //····················································································································

  var packages_property = StoredArrayOf_PackageInDevice ()

  //····················································································································

  var packages_property_selection : EBSelection < [PackageInDevice] > {
      return self.packages_property.prop
  }

  //····················································································································
  //   Atomic property: representationImageData
  //····················································································································

  var representationImageData_property = EBStoredProperty_Data (defaultValue: Data ())

  //····················································································································

  var representationImageData : Data {
    get {
      return self.representationImageData_property.propval
    }
    set {
      self.representationImageData_property.setProp (newValue)
    }
  }

  //····················································································································

  var representationImageData_property_selection : EBSelection <Data> {
    return self.representationImageData_property.prop
  }

  //····················································································································
  //   Transient property: imageIsValid
  //····················································································································

  var imageIsValid_property = EBTransientProperty_Bool ()

  //····················································································································

  var imageIsValid_property_selection : EBSelection <Bool> {
    return self.imageIsValid_property.prop
  }

  //····················································································································

  var imageIsValid : Bool? {
    switch self.imageIsValid_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: inconsistentPackagePadNameSetsMessage
  //····················································································································

  var inconsistentPackagePadNameSetsMessage_property = EBTransientProperty_String ()

  //····················································································································

  var inconsistentPackagePadNameSetsMessage_property_selection : EBSelection <String> {
    return self.inconsistentPackagePadNameSetsMessage_property.prop
  }

  //····················································································································

  var inconsistentPackagePadNameSetsMessage : String? {
    switch self.inconsistentPackagePadNameSetsMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: packagePadNameSetsAreConsistent
  //····················································································································

  var packagePadNameSetsAreConsistent_property = EBTransientProperty_Bool ()

  //····················································································································

  var packagePadNameSetsAreConsistent_property_selection : EBSelection <Bool> {
    return self.packagePadNameSetsAreConsistent_property.prop
  }

  //····················································································································

  var packagePadNameSetsAreConsistent : Bool? {
    switch self.packagePadNameSetsAreConsistent_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: issues
  //····················································································································

  var issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray> {
    return self.issues_property.prop
  }

  //····················································································································

  var issues : CanariIssueArray? {
    switch self.issues_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ undoManager : EBUndoManager?, file: String, _ line : Int) {
    super.init (undoManager, file: file, line)
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.undoManager = self.undoManager
  //--- Atomic property: title
    self.title_property.undoManager = self.undoManager
  //--- Atomic property: prefix
    self.prefix_property.undoManager = self.undoManager
  //--- Atomic property: comments
    self.comments_property.undoManager = self.undoManager
  //--- Atomic property: mPackageDisplayZoom
    self.mPackageDisplayZoom_property.undoManager = self.undoManager
  //--- Atomic property: mPackageDisplayHorizontalFlip
    self.mPackageDisplayHorizontalFlip_property.undoManager = self.undoManager
  //--- Atomic property: mPackageDisplayVerticalFlip
    self.mPackageDisplayVerticalFlip_property.undoManager = self.undoManager
  //--- Atomic property: mShowPackages
    self.mShowPackages_property.undoManager = self.undoManager
  //--- Atomic property: mShowPackagePadNumbers
    self.mShowPackagePadNumbers_property.undoManager = self.undoManager
  //--- Atomic property: mShowPackageFrontPads
    self.mShowPackageFrontPads_property.undoManager = self.undoManager
  //--- Atomic property: mShowPackageBackPads
    self.mShowPackageBackPads_property.undoManager = self.undoManager
  //--- To many property: mDocs (no option)
    self.mDocs_property.undoManager = self.undoManager
  //--- To many property: packages (has opposite relationship)
    self.packages_property.undoManager = self.undoManager
    self.packages_property.setOppositeRelationship = { [weak self] (_ inManagedObject :PackageInDevice?) in
      inManagedObject?.mRoot_property.setProp (self)
    }
  //--- Atomic property: representationImageData
    self.representationImageData_property.undoManager = self.undoManager
  //--- Atomic property: imageIsValid
    self.imageIsValid_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.representationImageData_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.representationImageData_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceRoot_imageIsValid (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.representationImageData_property.addEBObserver (self.imageIsValid_property)
  //--- Atomic property: inconsistentPackagePadNameSetsMessage
    self.inconsistentPackagePadNameSetsMessage_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.packages_property_selection.kind ()
        kind &= unwSelf.packages_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.packages_property_selection, unwSelf.packages_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_DeviceRoot_inconsistentPackagePadNameSetsMessage (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.packages_property.addEBObserverOf_padNameSet (self.inconsistentPackagePadNameSetsMessage_property)
    self.packages_property.addEBObserverOf_mName (self.inconsistentPackagePadNameSetsMessage_property)
  //--- Atomic property: packagePadNameSetsAreConsistent
    self.packagePadNameSetsAreConsistent_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.packages_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.packages_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceRoot_packagePadNameSetsAreConsistent (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.packages_property.addEBObserverOf_padNameSet (self.packagePadNameSetsAreConsistent_property)
  //--- Atomic property: issues
    self.issues_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.title_property_selection.kind ()
        kind &= unwSelf.prefix_property_selection.kind ()
        kind &= unwSelf.inconsistentPackagePadNameSetsMessage_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.title_property_selection, unwSelf.prefix_property_selection, unwSelf.inconsistentPackagePadNameSetsMessage_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_DeviceRoot_issues (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.title_property.addEBObserver (self.issues_property)
    self.prefix_property.addEBObserver (self.issues_property)
    self.inconsistentPackagePadNameSetsMessage_property.addEBObserver (self.issues_property)
  //--- Install undoers and opposite setter for relationships
    self.packages_property.setOppositeRelationship = { [weak self] (_ inManagedObject : PackageInDevice?) in
      inManagedObject?.mRoot_property.setProp (self)
    }
  //--- register properties for handling signature
    self.comments_property.setSignatureObserver (observer:self)
    self.mDocs_property.setSignatureObserver (observer:self)
    self.mPackageDisplayHorizontalFlip_property.setSignatureObserver (observer:self)
    self.mPackageDisplayVerticalFlip_property.setSignatureObserver (observer:self)
    self.mPackageDisplayZoom_property.setSignatureObserver (observer:self)
    self.mShowPackageBackPads_property.setSignatureObserver (observer:self)
    self.mShowPackageFrontPads_property.setSignatureObserver (observer:self)
    self.mShowPackagePadNumbers_property.setSignatureObserver (observer:self)
    self.mShowPackages_property.setSignatureObserver (observer:self)
    self.packages_property.setSignatureObserver (observer:self)
    self.prefix_property.setSignatureObserver (observer:self)
    self.title_property.setSignatureObserver (observer:self)
  //--- Extern delegates
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.representationImageData_property.removeEBObserver (self.imageIsValid_property)
    self.packages_property.removeEBObserverOf_padNameSet (self.inconsistentPackagePadNameSetsMessage_property)
    self.packages_property.removeEBObserverOf_mName (self.inconsistentPackagePadNameSetsMessage_property)
    self.packages_property.removeEBObserverOf_padNameSet (self.packagePadNameSetsAreConsistent_property)
    self.title_property.removeEBObserver (self.issues_property)
    self.prefix_property.removeEBObserver (self.issues_property)
    self.inconsistentPackagePadNameSetsMessage_property.removeEBObserver (self.issues_property)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "selectedPageIndex",
      idx:self.selectedPageIndex_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectedPageIndex_property.mObserverExplorer,
      valueExplorer:&self.selectedPageIndex_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "title",
      idx:self.title_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.title_property.mObserverExplorer,
      valueExplorer:&self.title_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "prefix",
      idx:self.prefix_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.prefix_property.mObserverExplorer,
      valueExplorer:&self.prefix_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "comments",
      idx:self.comments_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.comments_property.mObserverExplorer,
      valueExplorer:&self.comments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPackageDisplayZoom",
      idx:self.mPackageDisplayZoom_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mPackageDisplayZoom_property.mObserverExplorer,
      valueExplorer:&self.mPackageDisplayZoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPackageDisplayHorizontalFlip",
      idx:self.mPackageDisplayHorizontalFlip_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mPackageDisplayHorizontalFlip_property.mObserverExplorer,
      valueExplorer:&self.mPackageDisplayHorizontalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPackageDisplayVerticalFlip",
      idx:self.mPackageDisplayVerticalFlip_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mPackageDisplayVerticalFlip_property.mObserverExplorer,
      valueExplorer:&self.mPackageDisplayVerticalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mShowPackages",
      idx:self.mShowPackages_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mShowPackages_property.mObserverExplorer,
      valueExplorer:&self.mShowPackages_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mShowPackagePadNumbers",
      idx:self.mShowPackagePadNumbers_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mShowPackagePadNumbers_property.mObserverExplorer,
      valueExplorer:&self.mShowPackagePadNumbers_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mShowPackageFrontPads",
      idx:self.mShowPackageFrontPads_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mShowPackageFrontPads_property.mObserverExplorer,
      valueExplorer:&self.mShowPackageFrontPads_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mShowPackageBackPads",
      idx:self.mShowPackageBackPads_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mShowPackageBackPads_property.mObserverExplorer,
      valueExplorer:&self.mShowPackageBackPads_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "representationImageData",
      idx:self.representationImageData_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.representationImageData_property.mObserverExplorer,
      valueExplorer:&self.representationImageData_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "imageIsValid",
      idx:self.imageIsValid_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.imageIsValid_property.mObserverExplorer,
      valueExplorer:&self.imageIsValid_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "inconsistentPackagePadNameSetsMessage",
      idx:self.inconsistentPackagePadNameSetsMessage_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.inconsistentPackagePadNameSetsMessage_property.mObserverExplorer,
      valueExplorer:&self.inconsistentPackagePadNameSetsMessage_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "packagePadNameSetsAreConsistent",
      idx:self.packagePadNameSetsAreConsistent_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.packagePadNameSetsAreConsistent_property.mObserverExplorer,
      valueExplorer:&self.packagePadNameSetsAreConsistent_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx:self.issues_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.issues_property.mObserverExplorer,
      valueExplorer:&self.issues_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "mDocs",
      idx:mDocs_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mDocs_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "packages",
      idx:packages_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&packages_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.mObserverExplorer = nil
    self.selectedPageIndex_property.mValueExplorer = nil
  //--- Atomic property: title
    self.title_property.mObserverExplorer = nil
    self.title_property.mValueExplorer = nil
  //--- Atomic property: prefix
    self.prefix_property.mObserverExplorer = nil
    self.prefix_property.mValueExplorer = nil
  //--- Atomic property: comments
    self.comments_property.mObserverExplorer = nil
    self.comments_property.mValueExplorer = nil
  //--- Atomic property: mPackageDisplayZoom
    self.mPackageDisplayZoom_property.mObserverExplorer = nil
    self.mPackageDisplayZoom_property.mValueExplorer = nil
  //--- Atomic property: mPackageDisplayHorizontalFlip
    self.mPackageDisplayHorizontalFlip_property.mObserverExplorer = nil
    self.mPackageDisplayHorizontalFlip_property.mValueExplorer = nil
  //--- Atomic property: mPackageDisplayVerticalFlip
    self.mPackageDisplayVerticalFlip_property.mObserverExplorer = nil
    self.mPackageDisplayVerticalFlip_property.mValueExplorer = nil
  //--- Atomic property: mShowPackages
    self.mShowPackages_property.mObserverExplorer = nil
    self.mShowPackages_property.mValueExplorer = nil
  //--- Atomic property: mShowPackagePadNumbers
    self.mShowPackagePadNumbers_property.mObserverExplorer = nil
    self.mShowPackagePadNumbers_property.mValueExplorer = nil
  //--- Atomic property: mShowPackageFrontPads
    self.mShowPackageFrontPads_property.mObserverExplorer = nil
    self.mShowPackageFrontPads_property.mValueExplorer = nil
  //--- Atomic property: mShowPackageBackPads
    self.mShowPackageBackPads_property.mObserverExplorer = nil
    self.mShowPackageBackPads_property.mValueExplorer = nil
  //--- To many property: mDocs
    self.mDocs_property.mValueExplorer = nil
  //--- To many property: packages
    self.packages_property.mValueExplorer = nil
  //--- Atomic property: representationImageData
    self.representationImageData_property.mObserverExplorer = nil
    self.representationImageData_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override func cleanUpToManyRelationships () {
    self.mDocs_property.setProp ([])
    self.packages_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.storeIn (dictionary: ioDictionary, forKey:"selectedPageIndex")
  //--- Atomic property: title
    self.title_property.storeIn (dictionary: ioDictionary, forKey:"title")
  //--- Atomic property: prefix
    self.prefix_property.storeIn (dictionary: ioDictionary, forKey:"prefix")
  //--- Atomic property: comments
    self.comments_property.storeIn (dictionary: ioDictionary, forKey:"comments")
  //--- Atomic property: mPackageDisplayZoom
    self.mPackageDisplayZoom_property.storeIn (dictionary: ioDictionary, forKey:"mPackageDisplayZoom")
  //--- Atomic property: mPackageDisplayHorizontalFlip
    self.mPackageDisplayHorizontalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mPackageDisplayHorizontalFlip")
  //--- Atomic property: mPackageDisplayVerticalFlip
    self.mPackageDisplayVerticalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mPackageDisplayVerticalFlip")
  //--- Atomic property: mShowPackages
    self.mShowPackages_property.storeIn (dictionary: ioDictionary, forKey:"mShowPackages")
  //--- Atomic property: mShowPackagePadNumbers
    self.mShowPackagePadNumbers_property.storeIn (dictionary: ioDictionary, forKey:"mShowPackagePadNumbers")
  //--- Atomic property: mShowPackageFrontPads
    self.mShowPackageFrontPads_property.storeIn (dictionary: ioDictionary, forKey:"mShowPackageFrontPads")
  //--- Atomic property: mShowPackageBackPads
    self.mShowPackageBackPads_property.storeIn (dictionary: ioDictionary, forKey:"mShowPackageBackPads")
  //--- To many property: mDocs
    self.store (
      managedObjectArray: mDocs_property.propval as NSArray,
      relationshipName: "mDocs",
      intoDictionary: ioDictionary
    )
  //--- To many property: packages
    self.store (
      managedObjectArray: packages_property.propval as NSArray,
      relationshipName: "packages",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: representationImageData
    self.representationImageData_property.storeIn (dictionary: ioDictionary, forKey:"representationImageData")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mDocs
    self.mDocs_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mDocs",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [DeviceDocumentation])
  //--- To many property: packages
    self.packages_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "packages",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [PackageInDevice])
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: selectedPageIndex
    self.selectedPageIndex_property.readFrom (dictionary: inDictionary, forKey:"selectedPageIndex")
  //--- Atomic property: title
    self.title_property.readFrom (dictionary: inDictionary, forKey:"title")
  //--- Atomic property: prefix
    self.prefix_property.readFrom (dictionary: inDictionary, forKey:"prefix")
  //--- Atomic property: comments
    self.comments_property.readFrom (dictionary: inDictionary, forKey:"comments")
  //--- Atomic property: mPackageDisplayZoom
    self.mPackageDisplayZoom_property.readFrom (dictionary: inDictionary, forKey:"mPackageDisplayZoom")
  //--- Atomic property: mPackageDisplayHorizontalFlip
    self.mPackageDisplayHorizontalFlip_property.readFrom (dictionary: inDictionary, forKey:"mPackageDisplayHorizontalFlip")
  //--- Atomic property: mPackageDisplayVerticalFlip
    self.mPackageDisplayVerticalFlip_property.readFrom (dictionary: inDictionary, forKey:"mPackageDisplayVerticalFlip")
  //--- Atomic property: mShowPackages
    self.mShowPackages_property.readFrom (dictionary: inDictionary, forKey:"mShowPackages")
  //--- Atomic property: mShowPackagePadNumbers
    self.mShowPackagePadNumbers_property.readFrom (dictionary: inDictionary, forKey:"mShowPackagePadNumbers")
  //--- Atomic property: mShowPackageFrontPads
    self.mShowPackageFrontPads_property.readFrom (dictionary: inDictionary, forKey:"mShowPackageFrontPads")
  //--- Atomic property: mShowPackageBackPads
    self.mShowPackageBackPads_property.readFrom (dictionary: inDictionary, forKey:"mShowPackageBackPads")
  //--- Atomic property: representationImageData
    self.representationImageData_property.readFrom (dictionary: inDictionary, forKey:"representationImageData")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mDocs
    for managedObject : EBManagedObject in self.mDocs_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: packages
    for managedObject : EBManagedObject in self.packages_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.comments_property.signature ())
    crc.accumulateUInt32 (self.mDocs_property.signature ())
    crc.accumulateUInt32 (self.mPackageDisplayHorizontalFlip_property.signature ())
    crc.accumulateUInt32 (self.mPackageDisplayVerticalFlip_property.signature ())
    crc.accumulateUInt32 (self.mPackageDisplayZoom_property.signature ())
    crc.accumulateUInt32 (self.mShowPackageBackPads_property.signature ())
    crc.accumulateUInt32 (self.mShowPackageFrontPads_property.signature ())
    crc.accumulateUInt32 (self.mShowPackagePadNumbers_property.signature ())
    crc.accumulateUInt32 (self.mShowPackages_property.signature ())
    crc.accumulateUInt32 (self.packages_property.signature ())
    crc.accumulateUInt32 (self.prefix_property.signature ())
    crc.accumulateUInt32 (self.title_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_DeviceRoot : ReadOnlyAbstractArrayProperty <DeviceRoot> {

  //····················································································································
  //   Observers of 'selectedPageIndex' stored property
  //····················································································································

  private var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPageIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPageIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedPageIndex_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedPageIndex.apply ( {(_ observer : EBEvent) in
        managedObject.selectedPageIndex_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedPageIndex_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_selectedPageIndex.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedPageIndex_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'title' stored property
  //····················································································································

  private var mObserversOf_title = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_title (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_title.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.title_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_title (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_title.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.title_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_title_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_title.apply ( {(_ observer : EBEvent) in
        managedObject.title_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_title_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_title.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.title_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'prefix' stored property
  //····················································································································

  private var mObserversOf_prefix = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_prefix (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_prefix.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.prefix_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_prefix (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_prefix.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.prefix_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_prefix_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_prefix.apply ( {(_ observer : EBEvent) in
        managedObject.prefix_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_prefix_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_prefix.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.prefix_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'comments' stored property
  //····················································································································

  private var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_comments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.comments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_comments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.comments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_comments_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_comments.apply ( {(_ observer : EBEvent) in
        managedObject.comments_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_comments_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_comments.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.comments_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mPackageDisplayZoom' stored property
  //····················································································································

  private var mObserversOf_mPackageDisplayZoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPackageDisplayZoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayZoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPackageDisplayZoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayZoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayZoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPackageDisplayZoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPackageDisplayZoom_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mPackageDisplayZoom.apply ( {(_ observer : EBEvent) in
        managedObject.mPackageDisplayZoom_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPackageDisplayZoom_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mPackageDisplayZoom.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPackageDisplayZoom_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mPackageDisplayHorizontalFlip' stored property
  //····················································································································

  private var mObserversOf_mPackageDisplayHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPackageDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayHorizontalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPackageDisplayHorizontalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayHorizontalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPackageDisplayHorizontalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPackageDisplayHorizontalFlip_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mPackageDisplayHorizontalFlip.apply ( {(_ observer : EBEvent) in
        managedObject.mPackageDisplayHorizontalFlip_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPackageDisplayHorizontalFlip_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mPackageDisplayHorizontalFlip.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPackageDisplayHorizontalFlip_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mPackageDisplayVerticalFlip' stored property
  //····················································································································

  private var mObserversOf_mPackageDisplayVerticalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPackageDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayVerticalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPackageDisplayVerticalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayVerticalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPackageDisplayVerticalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPackageDisplayVerticalFlip_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mPackageDisplayVerticalFlip.apply ( {(_ observer : EBEvent) in
        managedObject.mPackageDisplayVerticalFlip_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPackageDisplayVerticalFlip_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mPackageDisplayVerticalFlip.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPackageDisplayVerticalFlip_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mShowPackages' stored property
  //····················································································································

  private var mObserversOf_mShowPackages = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mShowPackages (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mShowPackages.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackages_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackages (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mShowPackages.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackages_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mShowPackages_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mShowPackages.apply ( {(_ observer : EBEvent) in
        managedObject.mShowPackages_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mShowPackages_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mShowPackages.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mShowPackages_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mShowPackagePadNumbers' stored property
  //····················································································································

  private var mObserversOf_mShowPackagePadNumbers = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mShowPackagePadNumbers (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mShowPackagePadNumbers.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackagePadNumbers_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackagePadNumbers (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mShowPackagePadNumbers.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackagePadNumbers_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mShowPackagePadNumbers_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mShowPackagePadNumbers.apply ( {(_ observer : EBEvent) in
        managedObject.mShowPackagePadNumbers_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mShowPackagePadNumbers_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mShowPackagePadNumbers.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mShowPackagePadNumbers_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mShowPackageFrontPads' stored property
  //····················································································································

  private var mObserversOf_mShowPackageFrontPads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mShowPackageFrontPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mShowPackageFrontPads.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackageFrontPads_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackageFrontPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mShowPackageFrontPads.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackageFrontPads_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mShowPackageFrontPads_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mShowPackageFrontPads.apply ( {(_ observer : EBEvent) in
        managedObject.mShowPackageFrontPads_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mShowPackageFrontPads_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mShowPackageFrontPads.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mShowPackageFrontPads_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mShowPackageBackPads' stored property
  //····················································································································

  private var mObserversOf_mShowPackageBackPads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mShowPackageBackPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mShowPackageBackPads.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackageBackPads_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackageBackPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mShowPackageBackPads.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackageBackPads_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mShowPackageBackPads_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mShowPackageBackPads.apply ( {(_ observer : EBEvent) in
        managedObject.mShowPackageBackPads_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mShowPackageBackPads_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mShowPackageBackPads.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mShowPackageBackPads_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'representationImageData' stored property
  //····················································································································

  private var mObserversOf_representationImageData = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_representationImageData (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_representationImageData.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.representationImageData_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_representationImageData (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_representationImageData.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.representationImageData_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_representationImageData_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_representationImageData.apply ( {(_ observer : EBEvent) in
        managedObject.representationImageData_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_representationImageData_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_representationImageData.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.representationImageData_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'imageIsValid' transient property
  //····················································································································

  private var mObserversOf_imageIsValid = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_imageIsValid (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_imageIsValid.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.imageIsValid_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_imageIsValid (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_imageIsValid.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.imageIsValid_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_imageIsValid_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_imageIsValid.apply ( {(_ observer : EBEvent) in
        managedObject.imageIsValid_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_imageIsValid_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_imageIsValid.apply ( {(_ observer : EBEvent) in
        managedObject.imageIsValid_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································
  //   Observers of 'inconsistentPackagePadNameSetsMessage' transient property
  //····················································································································

  private var mObserversOf_inconsistentPackagePadNameSetsMessage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_inconsistentPackagePadNameSetsMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_inconsistentPackagePadNameSetsMessage.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.inconsistentPackagePadNameSetsMessage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_inconsistentPackagePadNameSetsMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_inconsistentPackagePadNameSetsMessage.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.inconsistentPackagePadNameSetsMessage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_inconsistentPackagePadNameSetsMessage_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_inconsistentPackagePadNameSetsMessage.apply ( {(_ observer : EBEvent) in
        managedObject.inconsistentPackagePadNameSetsMessage_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_inconsistentPackagePadNameSetsMessage_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_inconsistentPackagePadNameSetsMessage.apply ( {(_ observer : EBEvent) in
        managedObject.inconsistentPackagePadNameSetsMessage_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································
  //   Observers of 'packagePadNameSetsAreConsistent' transient property
  //····················································································································

  private var mObserversOf_packagePadNameSetsAreConsistent = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_packagePadNameSetsAreConsistent (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_packagePadNameSetsAreConsistent.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.packagePadNameSetsAreConsistent_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_packagePadNameSetsAreConsistent (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_packagePadNameSetsAreConsistent.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.packagePadNameSetsAreConsistent_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_packagePadNameSetsAreConsistent_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_packagePadNameSetsAreConsistent.apply ( {(_ observer : EBEvent) in
        managedObject.packagePadNameSetsAreConsistent_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_packagePadNameSetsAreConsistent_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_packagePadNameSetsAreConsistent.apply ( {(_ observer : EBEvent) in
        managedObject.packagePadNameSetsAreConsistent_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply ( {(_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply ( {(_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_DeviceRoot : ReadOnlyArrayOf_DeviceRoot {

  //····················································································································

  var readModelFunction : Optional < () -> EBSelection < [DeviceRoot] > > = nil

  //····················································································································

  override var propset : Set <DeviceRoot> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [DeviceRoot] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [DeviceRoot] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <DeviceRoot> ()

  //····················································································································

  private var mCachedValue : EBSelection < [DeviceRoot] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.readModelFunction, self.mCachedValue == nil {
      self.mCachedValue = unwrappedComputeFunction ()
      let newSet : Set <DeviceRoot>
      switch self.mCachedValue! {
      case .multiple, .empty :
        newSet = Set <DeviceRoot> ()
      case .single (let array) :
       newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_selectedPageIndex_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_title_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_prefix_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_comments_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mPackageDisplayZoom_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mPackageDisplayHorizontalFlip_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mPackageDisplayVerticalFlip_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mShowPackages_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mShowPackagePadNumbers_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mShowPackageFrontPads_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mShowPackageBackPads_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_representationImageData_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_imageIsValid_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_inconsistentPackagePadNameSetsMessage_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_packagePadNameSetsAreConsistent_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_issues_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_selectedPageIndex_toElementsOfSet (addedSet)
      self.addEBObserversOf_title_toElementsOfSet (addedSet)
      self.addEBObserversOf_prefix_toElementsOfSet (addedSet)
      self.addEBObserversOf_comments_toElementsOfSet (addedSet)
      self.addEBObserversOf_mPackageDisplayZoom_toElementsOfSet (addedSet)
      self.addEBObserversOf_mPackageDisplayHorizontalFlip_toElementsOfSet (addedSet)
      self.addEBObserversOf_mPackageDisplayVerticalFlip_toElementsOfSet (addedSet)
      self.addEBObserversOf_mShowPackages_toElementsOfSet (addedSet)
      self.addEBObserversOf_mShowPackagePadNumbers_toElementsOfSet (addedSet)
      self.addEBObserversOf_mShowPackageFrontPads_toElementsOfSet (addedSet)
      self.addEBObserversOf_mShowPackageBackPads_toElementsOfSet (addedSet)
      self.addEBObserversOf_representationImageData_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_imageIsValid_toElementsOfSet (addedSet)
      self.addEBObserversOf_inconsistentPackagePadNameSetsMessage_toElementsOfSet (addedSet)
      self.addEBObserversOf_packagePadNameSetsAreConsistent_toElementsOfSet (addedSet)
      self.addEBObserversOf_issues_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_DeviceRoot : ReadOnlyArrayOf_DeviceRoot {

  //····················································································································
 
  func setProp (_ value :  [DeviceRoot]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_DeviceRoot : ReadWriteArrayOf_DeviceRoot, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : DeviceRoot?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [DeviceRoot] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.undoManager, "DeviceRoot") as? DeviceRoot {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <DeviceRoot> ()
  private var mValue = [DeviceRoot] () {
    didSet {
      self.postEvent ()
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.undoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          self.setOppositeRelationship? (nil)
          managedObject.selectedPageIndex_property.mSetterDelegate = nil
          managedObject.title_property.mSetterDelegate = nil
          managedObject.prefix_property.mSetterDelegate = nil
          managedObject.comments_property.mSetterDelegate = nil
          managedObject.mPackageDisplayZoom_property.mSetterDelegate = nil
          managedObject.mPackageDisplayHorizontalFlip_property.mSetterDelegate = nil
          managedObject.mPackageDisplayVerticalFlip_property.mSetterDelegate = nil
          managedObject.mShowPackages_property.mSetterDelegate = nil
          managedObject.mShowPackagePadNumbers_property.mSetterDelegate = nil
          managedObject.mShowPackageFrontPads_property.mSetterDelegate = nil
          managedObject.mShowPackageBackPads_property.mSetterDelegate = nil
          managedObject.representationImageData_property.mSetterDelegate = nil
        }
        self.removeEBObserversOf_selectedPageIndex_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_title_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_prefix_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_comments_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mPackageDisplayZoom_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mPackageDisplayHorizontalFlip_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mPackageDisplayVerticalFlip_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mShowPackages_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mShowPackagePadNumbers_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mShowPackageFrontPads_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_mShowPackageBackPads_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_representationImageData_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_imageIsValid_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_inconsistentPackagePadNameSetsMessage_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_packagePadNameSetsAreConsistent_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_issues_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        for managedObject : DeviceRoot in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          self.setOppositeRelationship? (managedObject)
          managedObject.selectedPageIndex_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.title_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.prefix_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.comments_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mPackageDisplayZoom_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mPackageDisplayHorizontalFlip_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mPackageDisplayVerticalFlip_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mShowPackages_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mShowPackagePadNumbers_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mShowPackageFrontPads_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.mShowPackageBackPads_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          managedObject.representationImageData_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
        }
        self.addEBObserversOf_selectedPageIndex_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_title_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_prefix_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_comments_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mPackageDisplayZoom_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mPackageDisplayHorizontalFlip_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mPackageDisplayVerticalFlip_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mShowPackages_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mShowPackagePadNumbers_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mShowPackageFrontPads_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_mShowPackageBackPads_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_representationImageData_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_imageIsValid_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_inconsistentPackagePadNameSetsMessage_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_packagePadNameSetsAreConsistent_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_issues_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [kEntityKey] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [DeviceRoot] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [DeviceRoot]) { self.mValue = inValue }

  //····················································································································

  override var propval : [DeviceRoot] { return self.mValue }

  //····················································································································

  override var propset : Set <DeviceRoot> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [DeviceRoot]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : DeviceRoot) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : DeviceRoot) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
