//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mSelectedPageIndex : class {
  var mSelectedPageIndex : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mTitle : class {
  var mTitle : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mPrefix : class {
  var mPrefix : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mComments : class {
  var mComments : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mPackageDisplayZoom : class {
  var mPackageDisplayZoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mPackageDisplayHorizontalFlip : class {
  var mPackageDisplayHorizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mPackageDisplayVerticalFlip : class {
  var mPackageDisplayVerticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mShowPackages : class {
  var mShowPackages : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mShowPackagePadNumbers : class {
  var mShowPackagePadNumbers : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mShowPackageFrontPads : class {
  var mShowPackageFrontPads : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mShowPackageBackPads : class {
  var mShowPackageBackPads : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mSymbolDisplayZoom : class {
  var mSymbolDisplayZoom : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mSymbolDisplayHorizontalFlip : class {
  var mSymbolDisplayHorizontalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mSymbolDisplayVerticalFlip : class {
  var mSymbolDisplayVerticalFlip : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_mImageData : class {
  var mImageData : Data { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_inconsistentPackagePadNameSetsMessage : class {
  var inconsistentPackagePadNameSetsMessage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_inconsistentSymbolNameSetMessage : class {
  var inconsistentSymbolNameSetMessage : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_unconnectedPins : class {
  var unconnectedPins : UnconnectedSymbolPinsInDevice? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_imageIsValid : class {
  var imageIsValid : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_packagePadNameSetsAreConsistent : class {
  var packagePadNameSetsAreConsistent : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_symbolNameAreConsistent : class {
  var symbolNameAreConsistent : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_symbolTypeNames : class {
  var symbolTypeNames : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_unconnectedPads : class {
  var unconnectedPads : StringArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_assignedPadProxies : class {
  var assignedPadProxies : AssignedPadProxiesInDevice? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol DeviceRoot_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class DeviceRoot : EBGraphicManagedObject,
         DeviceRoot_mSelectedPageIndex,
         DeviceRoot_mTitle,
         DeviceRoot_mPrefix,
         DeviceRoot_mComments,
         DeviceRoot_mPackageDisplayZoom,
         DeviceRoot_mPackageDisplayHorizontalFlip,
         DeviceRoot_mPackageDisplayVerticalFlip,
         DeviceRoot_mShowPackages,
         DeviceRoot_mShowPackagePadNumbers,
         DeviceRoot_mShowPackageFrontPads,
         DeviceRoot_mShowPackageBackPads,
         DeviceRoot_mSymbolDisplayZoom,
         DeviceRoot_mSymbolDisplayHorizontalFlip,
         DeviceRoot_mSymbolDisplayVerticalFlip,
         DeviceRoot_mImageData,
         DeviceRoot_inconsistentPackagePadNameSetsMessage,
         DeviceRoot_inconsistentSymbolNameSetMessage,
         DeviceRoot_unconnectedPins,
         DeviceRoot_imageIsValid,
         DeviceRoot_packagePadNameSetsAreConsistent,
         DeviceRoot_symbolNameAreConsistent,
         DeviceRoot_symbolTypeNames,
         DeviceRoot_unconnectedPads,
         DeviceRoot_assignedPadProxies,
         DeviceRoot_issues {

  //····················································································································
  //   Atomic property: mSelectedPageIndex
  //····················································································································

  let mSelectedPageIndex_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mSelectedPageIndex : Int {
    get { return self.mSelectedPageIndex_property.propval }
    set { self.mSelectedPageIndex_property.setProp (newValue) }
  }

  //····················································································································

  var mSelectedPageIndex_property_selection : EBSelection <Int> { return self.mSelectedPageIndex_property.prop }

  //····················································································································
  //   Atomic property: mTitle
  //····················································································································

  let mTitle_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mTitle : String {
    get { return self.mTitle_property.propval }
    set { self.mTitle_property.setProp (newValue) }
  }

  //····················································································································

  var mTitle_property_selection : EBSelection <String> { return self.mTitle_property.prop }

  //····················································································································
  //   Atomic property: mPrefix
  //····················································································································

  let mPrefix_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mPrefix : String {
    get { return self.mPrefix_property.propval }
    set { self.mPrefix_property.setProp (newValue) }
  }

  //····················································································································

  var mPrefix_property_selection : EBSelection <String> { return self.mPrefix_property.prop }

  //····················································································································
  //   Atomic property: mComments
  //····················································································································

  let mComments_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mComments : String {
    get { return self.mComments_property.propval }
    set { self.mComments_property.setProp (newValue) }
  }

  //····················································································································

  var mComments_property_selection : EBSelection <String> { return self.mComments_property.prop }

  //····················································································································
  //   Atomic property: mPackageDisplayZoom
  //····················································································································

  let mPackageDisplayZoom_property = EBStoredProperty_Int (defaultValue: 100)

  //····················································································································

  var mPackageDisplayZoom : Int {
    get { return self.mPackageDisplayZoom_property.propval }
    set { self.mPackageDisplayZoom_property.setProp (newValue) }
  }

  //····················································································································

  var mPackageDisplayZoom_property_selection : EBSelection <Int> { return self.mPackageDisplayZoom_property.prop }

  //····················································································································
  //   Atomic property: mPackageDisplayHorizontalFlip
  //····················································································································

  let mPackageDisplayHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mPackageDisplayHorizontalFlip : Bool {
    get { return self.mPackageDisplayHorizontalFlip_property.propval }
    set { self.mPackageDisplayHorizontalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var mPackageDisplayHorizontalFlip_property_selection : EBSelection <Bool> { return self.mPackageDisplayHorizontalFlip_property.prop }

  //····················································································································
  //   Atomic property: mPackageDisplayVerticalFlip
  //····················································································································

  let mPackageDisplayVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mPackageDisplayVerticalFlip : Bool {
    get { return self.mPackageDisplayVerticalFlip_property.propval }
    set { self.mPackageDisplayVerticalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var mPackageDisplayVerticalFlip_property_selection : EBSelection <Bool> { return self.mPackageDisplayVerticalFlip_property.prop }

  //····················································································································
  //   Atomic property: mShowPackages
  //····················································································································

  let mShowPackages_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var mShowPackages : Bool {
    get { return self.mShowPackages_property.propval }
    set { self.mShowPackages_property.setProp (newValue) }
  }

  //····················································································································

  var mShowPackages_property_selection : EBSelection <Bool> { return self.mShowPackages_property.prop }

  //····················································································································
  //   Atomic property: mShowPackagePadNumbers
  //····················································································································

  let mShowPackagePadNumbers_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var mShowPackagePadNumbers : Bool {
    get { return self.mShowPackagePadNumbers_property.propval }
    set { self.mShowPackagePadNumbers_property.setProp (newValue) }
  }

  //····················································································································

  var mShowPackagePadNumbers_property_selection : EBSelection <Bool> { return self.mShowPackagePadNumbers_property.prop }

  //····················································································································
  //   Atomic property: mShowPackageFrontPads
  //····················································································································

  let mShowPackageFrontPads_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var mShowPackageFrontPads : Bool {
    get { return self.mShowPackageFrontPads_property.propval }
    set { self.mShowPackageFrontPads_property.setProp (newValue) }
  }

  //····················································································································

  var mShowPackageFrontPads_property_selection : EBSelection <Bool> { return self.mShowPackageFrontPads_property.prop }

  //····················································································································
  //   Atomic property: mShowPackageBackPads
  //····················································································································

  let mShowPackageBackPads_property = EBStoredProperty_Bool (defaultValue: true)

  //····················································································································

  var mShowPackageBackPads : Bool {
    get { return self.mShowPackageBackPads_property.propval }
    set { self.mShowPackageBackPads_property.setProp (newValue) }
  }

  //····················································································································

  var mShowPackageBackPads_property_selection : EBSelection <Bool> { return self.mShowPackageBackPads_property.prop }

  //····················································································································
  //   Atomic property: mSymbolDisplayZoom
  //····················································································································

  let mSymbolDisplayZoom_property = EBStoredProperty_Int (defaultValue: 100)

  //····················································································································

  var mSymbolDisplayZoom : Int {
    get { return self.mSymbolDisplayZoom_property.propval }
    set { self.mSymbolDisplayZoom_property.setProp (newValue) }
  }

  //····················································································································

  var mSymbolDisplayZoom_property_selection : EBSelection <Int> { return self.mSymbolDisplayZoom_property.prop }

  //····················································································································
  //   Atomic property: mSymbolDisplayHorizontalFlip
  //····················································································································

  let mSymbolDisplayHorizontalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mSymbolDisplayHorizontalFlip : Bool {
    get { return self.mSymbolDisplayHorizontalFlip_property.propval }
    set { self.mSymbolDisplayHorizontalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var mSymbolDisplayHorizontalFlip_property_selection : EBSelection <Bool> { return self.mSymbolDisplayHorizontalFlip_property.prop }

  //····················································································································
  //   Atomic property: mSymbolDisplayVerticalFlip
  //····················································································································

  let mSymbolDisplayVerticalFlip_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var mSymbolDisplayVerticalFlip : Bool {
    get { return self.mSymbolDisplayVerticalFlip_property.propval }
    set { self.mSymbolDisplayVerticalFlip_property.setProp (newValue) }
  }

  //····················································································································

  var mSymbolDisplayVerticalFlip_property_selection : EBSelection <Bool> { return self.mSymbolDisplayVerticalFlip_property.prop }

  //····················································································································
  //   To many property: mDocs
  //····················································································································

  let mDocs_property = StoredArrayOf_DeviceDocumentation ()

  //····················································································································

  var mDocs_property_selection : EBSelection < [DeviceDocumentation] > {
    return self.mDocs_property.prop
  }

  //····················································································································

  var mDocs : [DeviceDocumentation] {
    get { return self.mDocs_property.propval }
    set { self.mDocs_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mSymbolInstances
  //····················································································································

  let mSymbolInstances_property = StoredArrayOf_SymbolInstanceInDevice ()

  //····················································································································

  var mSymbolInstances_property_selection : EBSelection < [SymbolInstanceInDevice] > {
    return self.mSymbolInstances_property.prop
  }

  //····················································································································

  var mSymbolInstances : [SymbolInstanceInDevice] {
    get { return self.mSymbolInstances_property.propval }
    set { self.mSymbolInstances_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mPackages
  //····················································································································

  let mPackages_property = StoredArrayOf_PackageInDevice ()

  //····················································································································

  var mPackages_property_selection : EBSelection < [PackageInDevice] > {
    return self.mPackages_property.prop
  }

  //····················································································································

  var mPackages : [PackageInDevice] {
    get { return self.mPackages_property.propval }
    set { self.mPackages_property.setProp (newValue) }
  }

  //····················································································································
  //   To many property: mSymbolTypes
  //····················································································································

  let mSymbolTypes_property = StoredArrayOf_SymbolTypeInDevice ()

  //····················································································································

  var mSymbolTypes_property_selection : EBSelection < [SymbolTypeInDevice] > {
    return self.mSymbolTypes_property.prop
  }

  //····················································································································

  var mSymbolTypes : [SymbolTypeInDevice] {
    get { return self.mSymbolTypes_property.propval }
    set { self.mSymbolTypes_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mImageData
  //····················································································································

  let mImageData_property = EBStoredProperty_Data (defaultValue: Data ())

  //····················································································································

  var mImageData : Data {
    get { return self.mImageData_property.propval }
    set { self.mImageData_property.setProp (newValue) }
  }

  //····················································································································

  var mImageData_property_selection : EBSelection <Data> { return self.mImageData_property.prop }

  //····················································································································
  //   To many property: mPadProxies
  //····················································································································

  let mPadProxies_property = StoredArrayOf_PadProxyInDevice ()

  //····················································································································

  var mPadProxies_property_selection : EBSelection < [PadProxyInDevice] > {
    return self.mPadProxies_property.prop
  }

  //····················································································································

  var mPadProxies : [PadProxyInDevice] {
    get { return self.mPadProxies_property.propval }
    set { self.mPadProxies_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: inconsistentPackagePadNameSetsMessage
  //····················································································································

  let inconsistentPackagePadNameSetsMessage_property = EBTransientProperty_String ()

  //····················································································································

  var inconsistentPackagePadNameSetsMessage_property_selection : EBSelection <String> {
    return self.inconsistentPackagePadNameSetsMessage_property.prop
  }

  //····················································································································

  var inconsistentPackagePadNameSetsMessage : String? {
    switch self.inconsistentPackagePadNameSetsMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: inconsistentSymbolNameSetMessage
  //····················································································································

  let inconsistentSymbolNameSetMessage_property = EBTransientProperty_String ()

  //····················································································································

  var inconsistentSymbolNameSetMessage_property_selection : EBSelection <String> {
    return self.inconsistentSymbolNameSetMessage_property.prop
  }

  //····················································································································

  var inconsistentSymbolNameSetMessage : String? {
    switch self.inconsistentSymbolNameSetMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unconnectedPins
  //····················································································································

  let unconnectedPins_property = EBTransientProperty_UnconnectedSymbolPinsInDevice ()

  //····················································································································

  var unconnectedPins_property_selection : EBSelection <UnconnectedSymbolPinsInDevice> {
    return self.unconnectedPins_property.prop
  }

  //····················································································································

  var unconnectedPins : UnconnectedSymbolPinsInDevice? {
    switch self.unconnectedPins_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: imageIsValid
  //····················································································································

  let imageIsValid_property = EBTransientProperty_Bool ()

  //····················································································································

  var imageIsValid_property_selection : EBSelection <Bool> {
    return self.imageIsValid_property.prop
  }

  //····················································································································

  var imageIsValid : Bool? {
    switch self.imageIsValid_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: packagePadNameSetsAreConsistent
  //····················································································································

  let packagePadNameSetsAreConsistent_property = EBTransientProperty_Bool ()

  //····················································································································

  var packagePadNameSetsAreConsistent_property_selection : EBSelection <Bool> {
    return self.packagePadNameSetsAreConsistent_property.prop
  }

  //····················································································································

  var packagePadNameSetsAreConsistent : Bool? {
    switch self.packagePadNameSetsAreConsistent_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolNameAreConsistent
  //····················································································································

  let symbolNameAreConsistent_property = EBTransientProperty_Bool ()

  //····················································································································

  var symbolNameAreConsistent_property_selection : EBSelection <Bool> {
    return self.symbolNameAreConsistent_property.prop
  }

  //····················································································································

  var symbolNameAreConsistent : Bool? {
    switch self.symbolNameAreConsistent_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: symbolTypeNames
  //····················································································································

  let symbolTypeNames_property = EBTransientProperty_StringArray ()

  //····················································································································

  var symbolTypeNames_property_selection : EBSelection <StringArray> {
    return self.symbolTypeNames_property.prop
  }

  //····················································································································

  var symbolTypeNames : StringArray? {
    switch self.symbolTypeNames_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: unconnectedPads
  //····················································································································

  let unconnectedPads_property = EBTransientProperty_StringArray ()

  //····················································································································

  var unconnectedPads_property_selection : EBSelection <StringArray> {
    return self.unconnectedPads_property.prop
  }

  //····················································································································

  var unconnectedPads : StringArray? {
    switch self.unconnectedPads_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: assignedPadProxies
  //····················································································································

  let assignedPadProxies_property = EBTransientProperty_AssignedPadProxiesInDevice ()

  //····················································································································

  var assignedPadProxies_property_selection : EBSelection <AssignedPadProxiesInDevice> {
    return self.assignedPadProxies_property.prop
  }

  //····················································································································

  var assignedPadProxies : AssignedPadProxiesInDevice? {
    switch self.assignedPadProxies_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: issues
  //····················································································································

  let issues_property = EBTransientProperty_CanariIssueArray ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray> {
    return self.issues_property.prop
  }

  //····················································································································

  var issues : CanariIssueArray? {
    switch self.issues_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mTitle
    self.mTitle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mPrefix
    self.mPrefix_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mComments
    self.mComments_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mPackageDisplayZoom
    self.mPackageDisplayZoom_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mPackageDisplayHorizontalFlip
    self.mPackageDisplayHorizontalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mPackageDisplayVerticalFlip
    self.mPackageDisplayVerticalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mShowPackages
    self.mShowPackages_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mShowPackagePadNumbers
    self.mShowPackagePadNumbers_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mShowPackageFrontPads
    self.mShowPackageFrontPads_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mShowPackageBackPads
    self.mShowPackageBackPads_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSymbolDisplayZoom
    self.mSymbolDisplayZoom_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSymbolDisplayHorizontalFlip
    self.mSymbolDisplayHorizontalFlip_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mSymbolDisplayVerticalFlip
    self.mSymbolDisplayVerticalFlip_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mDocs (no option)
    self.mDocs_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mSymbolInstances (no option)
    self.mSymbolInstances_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mPackages (has opposite relationship)
    self.mPackages_property.ebUndoManager = self.ebUndoManager
    self.mPackages_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- To many property: mSymbolTypes (no option)
    self.mSymbolTypes_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mImageData
    self.mImageData_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mPadProxies (no option)
    self.mPadProxies_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: inconsistentPackagePadNameSetsMessage
    self.inconsistentPackagePadNameSetsMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mPackages_property_selection.kind ()
        kind &= unwSelf.mPackages_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mPackages_property_selection, unwSelf.mPackages_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_DeviceRoot_inconsistentPackagePadNameSetsMessage (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPackages_property.addEBObserverOf_padNameSet (self.inconsistentPackagePadNameSetsMessage_property)
    self.mPackages_property.addEBObserverOf_mName (self.inconsistentPackagePadNameSetsMessage_property)
  //--- Atomic property: inconsistentSymbolNameSetMessage
    self.inconsistentSymbolNameSetMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSymbolInstances_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSymbolInstances_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceRoot_inconsistentSymbolNameSetMessage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbolInstances_property.addEBObserverOf_symbolQualifiedName (self.inconsistentSymbolNameSetMessage_property)
  //--- Atomic property: unconnectedPins
    self.unconnectedPins_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSymbolInstances_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSymbolInstances_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceRoot_unconnectedPins (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbolInstances_property.addEBObserverOf_unconnectedPins (self.unconnectedPins_property)
  //--- Atomic property: imageIsValid
    self.imageIsValid_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mImageData_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mImageData_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceRoot_imageIsValid (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mImageData_property.addEBObserver (self.imageIsValid_property)
  //--- Atomic property: packagePadNameSetsAreConsistent
    self.packagePadNameSetsAreConsistent_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mPackages_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mPackages_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceRoot_packagePadNameSetsAreConsistent (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPackages_property.addEBObserverOf_padNameSet (self.packagePadNameSetsAreConsistent_property)
  //--- Atomic property: symbolNameAreConsistent
    self.symbolNameAreConsistent_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.inconsistentSymbolNameSetMessage_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.inconsistentSymbolNameSetMessage_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceRoot_symbolNameAreConsistent (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.inconsistentSymbolNameSetMessage_property.addEBObserver (self.symbolNameAreConsistent_property)
  //--- Atomic property: symbolTypeNames
    self.symbolTypeNames_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mSymbolTypes_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mSymbolTypes_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceRoot_symbolTypeNames (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mSymbolTypes_property.addEBObserverOf_mTypeName (self.symbolTypeNames_property)
  //--- Atomic property: unconnectedPads
    self.unconnectedPads_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mPadProxies_property_selection.kind ()
        kind &= unwSelf.mPadProxies_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mPadProxies_property_selection, unwSelf.mPadProxies_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_DeviceRoot_unconnectedPads (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPadProxies_property.addEBObserverOf_mPadName (self.unconnectedPads_property)
    self.mPadProxies_property.addEBObserverOf_isConnected (self.unconnectedPads_property)
  //--- Atomic property: assignedPadProxies
    self.assignedPadProxies_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mPadProxies_property_selection.kind ()
        kind &= unwSelf.mPadProxies_property_selection.kind ()
        kind &= unwSelf.mPadProxies_property_selection.kind ()
        kind &= unwSelf.mPadProxies_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mPadProxies_property_selection, unwSelf.mPadProxies_property_selection, unwSelf.mPadProxies_property_selection, unwSelf.mPadProxies_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_DeviceRoot_assignedPadProxies (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPadProxies_property.addEBObserverOf_mPadName (self.assignedPadProxies_property)
    self.mPadProxies_property.addEBObserverOf_symbolName (self.assignedPadProxies_property)
    self.mPadProxies_property.addEBObserverOf_pinInstanceName (self.assignedPadProxies_property)
    self.mPadProxies_property.addEBObserverOf_isConnected (self.assignedPadProxies_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mTitle_property_selection.kind ()
        kind &= unwSelf.mPrefix_property_selection.kind ()
        kind &= unwSelf.inconsistentPackagePadNameSetsMessage_property_selection.kind ()
        kind &= unwSelf.inconsistentSymbolNameSetMessage_property_selection.kind ()
        kind &= unwSelf.unconnectedPins_property_selection.kind ()
        kind &= unwSelf.unconnectedPads_property_selection.kind ()
        kind &= unwSelf.mPackages_property_selection.kind ()
        kind &= unwSelf.mPackages_property_selection.kind ()
        kind &= unwSelf.mSymbolTypes_property_selection.kind ()
        kind &= unwSelf.mSymbolTypes_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mTitle_property_selection, unwSelf.mPrefix_property_selection, unwSelf.inconsistentPackagePadNameSetsMessage_property_selection, unwSelf.inconsistentSymbolNameSetMessage_property_selection, unwSelf.unconnectedPins_property_selection, unwSelf.unconnectedPads_property_selection, unwSelf.mPackages_property_selection, unwSelf.mPackages_property_selection, unwSelf.mSymbolTypes_property_selection, unwSelf.mSymbolTypes_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9)) :
            return .single (transient_DeviceRoot_issues (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mTitle_property.addEBObserver (self.issues_property)
    self.mPrefix_property.addEBObserver (self.issues_property)
    self.inconsistentPackagePadNameSetsMessage_property.addEBObserver (self.issues_property)
    self.inconsistentSymbolNameSetMessage_property.addEBObserver (self.issues_property)
    self.unconnectedPins_property.addEBObserver (self.issues_property)
    self.unconnectedPads_property.addEBObserver (self.issues_property)
    self.mPackages_property.addEBObserverOf_mVersion (self.issues_property)
    self.mPackages_property.addEBObserverOf_mName (self.issues_property)
    self.mSymbolTypes_property.addEBObserverOf_mVersion (self.issues_property)
    self.mSymbolTypes_property.addEBObserverOf_mTypeName (self.issues_property)
  //--- Install undoers and opposite setter for relationships
    self.mPackages_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mRoot_property.setProp (me) } },
      resetter: { inObject in inObject.mRoot_property.setProp (nil) }
    )
  //--- Register properties for handling signature
    self.mComments_property.setSignatureObserver (observer: self)
    self.mDocs_property.setSignatureObserver (observer: self)
    self.mImageData_property.setSignatureObserver (observer: self)
    self.mPackageDisplayHorizontalFlip_property.setSignatureObserver (observer: self)
    self.mPackageDisplayVerticalFlip_property.setSignatureObserver (observer: self)
    self.mPackageDisplayZoom_property.setSignatureObserver (observer: self)
    self.mPackages_property.setSignatureObserver (observer: self)
    self.mPadProxies_property.setSignatureObserver (observer: self)
    self.mPrefix_property.setSignatureObserver (observer: self)
    self.mShowPackageBackPads_property.setSignatureObserver (observer: self)
    self.mShowPackageFrontPads_property.setSignatureObserver (observer: self)
    self.mShowPackagePadNumbers_property.setSignatureObserver (observer: self)
    self.mShowPackages_property.setSignatureObserver (observer: self)
    self.mSymbolDisplayHorizontalFlip_property.setSignatureObserver (observer: self)
    self.mSymbolDisplayVerticalFlip_property.setSignatureObserver (observer: self)
    self.mSymbolDisplayZoom_property.setSignatureObserver (observer: self)
    self.mSymbolInstances_property.setSignatureObserver (observer: self)
    self.mSymbolTypes_property.setSignatureObserver (observer: self)
    self.mTitle_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mPackages_property.removeEBObserverOf_padNameSet (self.inconsistentPackagePadNameSetsMessage_property)
    self.mPackages_property.removeEBObserverOf_mName (self.inconsistentPackagePadNameSetsMessage_property)
    self.mSymbolInstances_property.removeEBObserverOf_symbolQualifiedName (self.inconsistentSymbolNameSetMessage_property)
    self.mSymbolInstances_property.removeEBObserverOf_unconnectedPins (self.unconnectedPins_property)
    self.mImageData_property.removeEBObserver (self.imageIsValid_property)
    self.mPackages_property.removeEBObserverOf_padNameSet (self.packagePadNameSetsAreConsistent_property)
    self.inconsistentSymbolNameSetMessage_property.removeEBObserver (self.symbolNameAreConsistent_property)
    self.mSymbolTypes_property.removeEBObserverOf_mTypeName (self.symbolTypeNames_property)
    self.mPadProxies_property.removeEBObserverOf_mPadName (self.unconnectedPads_property)
    self.mPadProxies_property.removeEBObserverOf_isConnected (self.unconnectedPads_property)
    self.mPadProxies_property.removeEBObserverOf_mPadName (self.assignedPadProxies_property)
    self.mPadProxies_property.removeEBObserverOf_symbolName (self.assignedPadProxies_property)
    self.mPadProxies_property.removeEBObserverOf_pinInstanceName (self.assignedPadProxies_property)
    self.mPadProxies_property.removeEBObserverOf_isConnected (self.assignedPadProxies_property)
    self.mTitle_property.removeEBObserver (self.issues_property)
    self.mPrefix_property.removeEBObserver (self.issues_property)
    self.inconsistentPackagePadNameSetsMessage_property.removeEBObserver (self.issues_property)
    self.inconsistentSymbolNameSetMessage_property.removeEBObserver (self.issues_property)
    self.unconnectedPins_property.removeEBObserver (self.issues_property)
    self.unconnectedPads_property.removeEBObserver (self.issues_property)
    self.mPackages_property.removeEBObserverOf_mVersion (self.issues_property)
    self.mPackages_property.removeEBObserverOf_mName (self.issues_property)
    self.mSymbolTypes_property.removeEBObserverOf_mVersion (self.issues_property)
    self.mSymbolTypes_property.removeEBObserverOf_mTypeName (self.issues_property)
 //   self.mPackages_property.setOppositeRelationship = nil
  //--- Unregister properties for handling signature
    self.mComments_property.setSignatureObserver (observer: nil)
    self.mDocs_property.setSignatureObserver (observer: nil)
    self.mImageData_property.setSignatureObserver (observer: nil)
    self.mPackageDisplayHorizontalFlip_property.setSignatureObserver (observer: nil)
    self.mPackageDisplayVerticalFlip_property.setSignatureObserver (observer: nil)
    self.mPackageDisplayZoom_property.setSignatureObserver (observer: nil)
    self.mPackages_property.setSignatureObserver (observer: nil)
    self.mPadProxies_property.setSignatureObserver (observer: nil)
    self.mPrefix_property.setSignatureObserver (observer: nil)
    self.mShowPackageBackPads_property.setSignatureObserver (observer: nil)
    self.mShowPackageFrontPads_property.setSignatureObserver (observer: nil)
    self.mShowPackagePadNumbers_property.setSignatureObserver (observer: nil)
    self.mShowPackages_property.setSignatureObserver (observer: nil)
    self.mSymbolDisplayHorizontalFlip_property.setSignatureObserver (observer: nil)
    self.mSymbolDisplayVerticalFlip_property.setSignatureObserver (observer: nil)
    self.mSymbolDisplayZoom_property.setSignatureObserver (observer: nil)
    self.mSymbolInstances_property.setSignatureObserver (observer: nil)
    self.mSymbolTypes_property.setSignatureObserver (observer: nil)
    self.mTitle_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mSelectedPageIndex",
      idx:self.mSelectedPageIndex_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mSelectedPageIndex_property.mObserverExplorer,
      valueExplorer:&self.mSelectedPageIndex_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mTitle",
      idx:self.mTitle_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mTitle_property.mObserverExplorer,
      valueExplorer:&self.mTitle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPrefix",
      idx:self.mPrefix_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mPrefix_property.mObserverExplorer,
      valueExplorer:&self.mPrefix_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mComments",
      idx:self.mComments_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mComments_property.mObserverExplorer,
      valueExplorer:&self.mComments_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPackageDisplayZoom",
      idx:self.mPackageDisplayZoom_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mPackageDisplayZoom_property.mObserverExplorer,
      valueExplorer:&self.mPackageDisplayZoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPackageDisplayHorizontalFlip",
      idx:self.mPackageDisplayHorizontalFlip_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mPackageDisplayHorizontalFlip_property.mObserverExplorer,
      valueExplorer:&self.mPackageDisplayHorizontalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mPackageDisplayVerticalFlip",
      idx:self.mPackageDisplayVerticalFlip_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mPackageDisplayVerticalFlip_property.mObserverExplorer,
      valueExplorer:&self.mPackageDisplayVerticalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mShowPackages",
      idx:self.mShowPackages_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mShowPackages_property.mObserverExplorer,
      valueExplorer:&self.mShowPackages_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mShowPackagePadNumbers",
      idx:self.mShowPackagePadNumbers_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mShowPackagePadNumbers_property.mObserverExplorer,
      valueExplorer:&self.mShowPackagePadNumbers_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mShowPackageFrontPads",
      idx:self.mShowPackageFrontPads_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mShowPackageFrontPads_property.mObserverExplorer,
      valueExplorer:&self.mShowPackageFrontPads_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mShowPackageBackPads",
      idx:self.mShowPackageBackPads_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mShowPackageBackPads_property.mObserverExplorer,
      valueExplorer:&self.mShowPackageBackPads_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSymbolDisplayZoom",
      idx:self.mSymbolDisplayZoom_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mSymbolDisplayZoom_property.mObserverExplorer,
      valueExplorer:&self.mSymbolDisplayZoom_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSymbolDisplayHorizontalFlip",
      idx:self.mSymbolDisplayHorizontalFlip_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mSymbolDisplayHorizontalFlip_property.mObserverExplorer,
      valueExplorer:&self.mSymbolDisplayHorizontalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mSymbolDisplayVerticalFlip",
      idx:self.mSymbolDisplayVerticalFlip_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mSymbolDisplayVerticalFlip_property.mObserverExplorer,
      valueExplorer:&self.mSymbolDisplayVerticalFlip_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mImageData",
      idx:self.mImageData_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mImageData_property.mObserverExplorer,
      valueExplorer:&self.mImageData_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "inconsistentPackagePadNameSetsMessage",
      idx:self.inconsistentPackagePadNameSetsMessage_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.inconsistentPackagePadNameSetsMessage_property.mObserverExplorer,
      valueExplorer:&self.inconsistentPackagePadNameSetsMessage_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "inconsistentSymbolNameSetMessage",
      idx:self.inconsistentSymbolNameSetMessage_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.inconsistentSymbolNameSetMessage_property.mObserverExplorer,
      valueExplorer:&self.inconsistentSymbolNameSetMessage_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "unconnectedPins",
      idx:self.unconnectedPins_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.unconnectedPins_property.mObserverExplorer,
      valueExplorer:&self.unconnectedPins_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "imageIsValid",
      idx:self.imageIsValid_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.imageIsValid_property.mObserverExplorer,
      valueExplorer:&self.imageIsValid_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "packagePadNameSetsAreConsistent",
      idx:self.packagePadNameSetsAreConsistent_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.packagePadNameSetsAreConsistent_property.mObserverExplorer,
      valueExplorer:&self.packagePadNameSetsAreConsistent_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "symbolNameAreConsistent",
      idx:self.symbolNameAreConsistent_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.symbolNameAreConsistent_property.mObserverExplorer,
      valueExplorer:&self.symbolNameAreConsistent_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "symbolTypeNames",
      idx:self.symbolTypeNames_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.symbolTypeNames_property.mObserverExplorer,
      valueExplorer:&self.symbolTypeNames_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "unconnectedPads",
      idx:self.unconnectedPads_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.unconnectedPads_property.mObserverExplorer,
      valueExplorer:&self.unconnectedPads_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "assignedPadProxies",
      idx:self.assignedPadProxies_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.assignedPadProxies_property.mObserverExplorer,
      valueExplorer:&self.assignedPadProxies_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx:self.issues_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.issues_property.mObserverExplorer,
      valueExplorer:&self.issues_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "mDocs",
      idx:mDocs_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mDocs_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mSymbolInstances",
      idx:mSymbolInstances_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mSymbolInstances_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mPackages",
      idx:mPackages_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mPackages_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mSymbolTypes",
      idx:mSymbolTypes_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mSymbolTypes_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mPadProxies",
      idx:mPadProxies_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mPadProxies_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.mObserverExplorer = nil
    self.mSelectedPageIndex_property.mValueExplorer = nil
  //--- Atomic property: mTitle
    self.mTitle_property.mObserverExplorer = nil
    self.mTitle_property.mValueExplorer = nil
  //--- Atomic property: mPrefix
    self.mPrefix_property.mObserverExplorer = nil
    self.mPrefix_property.mValueExplorer = nil
  //--- Atomic property: mComments
    self.mComments_property.mObserverExplorer = nil
    self.mComments_property.mValueExplorer = nil
  //--- Atomic property: mPackageDisplayZoom
    self.mPackageDisplayZoom_property.mObserverExplorer = nil
    self.mPackageDisplayZoom_property.mValueExplorer = nil
  //--- Atomic property: mPackageDisplayHorizontalFlip
    self.mPackageDisplayHorizontalFlip_property.mObserverExplorer = nil
    self.mPackageDisplayHorizontalFlip_property.mValueExplorer = nil
  //--- Atomic property: mPackageDisplayVerticalFlip
    self.mPackageDisplayVerticalFlip_property.mObserverExplorer = nil
    self.mPackageDisplayVerticalFlip_property.mValueExplorer = nil
  //--- Atomic property: mShowPackages
    self.mShowPackages_property.mObserverExplorer = nil
    self.mShowPackages_property.mValueExplorer = nil
  //--- Atomic property: mShowPackagePadNumbers
    self.mShowPackagePadNumbers_property.mObserverExplorer = nil
    self.mShowPackagePadNumbers_property.mValueExplorer = nil
  //--- Atomic property: mShowPackageFrontPads
    self.mShowPackageFrontPads_property.mObserverExplorer = nil
    self.mShowPackageFrontPads_property.mValueExplorer = nil
  //--- Atomic property: mShowPackageBackPads
    self.mShowPackageBackPads_property.mObserverExplorer = nil
    self.mShowPackageBackPads_property.mValueExplorer = nil
  //--- Atomic property: mSymbolDisplayZoom
    self.mSymbolDisplayZoom_property.mObserverExplorer = nil
    self.mSymbolDisplayZoom_property.mValueExplorer = nil
  //--- Atomic property: mSymbolDisplayHorizontalFlip
    self.mSymbolDisplayHorizontalFlip_property.mObserverExplorer = nil
    self.mSymbolDisplayHorizontalFlip_property.mValueExplorer = nil
  //--- Atomic property: mSymbolDisplayVerticalFlip
    self.mSymbolDisplayVerticalFlip_property.mObserverExplorer = nil
    self.mSymbolDisplayVerticalFlip_property.mValueExplorer = nil
  //--- To many property: mDocs
    self.mDocs_property.mValueExplorer = nil
  //--- To many property: mSymbolInstances
    self.mSymbolInstances_property.mValueExplorer = nil
  //--- To many property: mPackages
    self.mPackages_property.mValueExplorer = nil
  //--- To many property: mSymbolTypes
    self.mSymbolTypes_property.mValueExplorer = nil
  //--- Atomic property: mImageData
    self.mImageData_property.mObserverExplorer = nil
    self.mImageData_property.mValueExplorer = nil
  //--- To many property: mPadProxies
    self.mPadProxies_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mDocs_property.setProp ([])
    self.mSymbolInstances_property.setProp ([])
    self.mPackages_property.setProp ([])
    self.mSymbolTypes_property.setProp ([])
    self.mPadProxies_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.storeIn (dictionary: ioDictionary, forKey:"mSelectedPageIndex")
  //--- Atomic property: mTitle
    self.mTitle_property.storeIn (dictionary: ioDictionary, forKey:"mTitle")
  //--- Atomic property: mPrefix
    self.mPrefix_property.storeIn (dictionary: ioDictionary, forKey:"mPrefix")
  //--- Atomic property: mComments
    self.mComments_property.storeIn (dictionary: ioDictionary, forKey:"mComments")
  //--- Atomic property: mPackageDisplayZoom
    self.mPackageDisplayZoom_property.storeIn (dictionary: ioDictionary, forKey:"mPackageDisplayZoom")
  //--- Atomic property: mPackageDisplayHorizontalFlip
    self.mPackageDisplayHorizontalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mPackageDisplayHorizontalFlip")
  //--- Atomic property: mPackageDisplayVerticalFlip
    self.mPackageDisplayVerticalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mPackageDisplayVerticalFlip")
  //--- Atomic property: mShowPackages
    self.mShowPackages_property.storeIn (dictionary: ioDictionary, forKey:"mShowPackages")
  //--- Atomic property: mShowPackagePadNumbers
    self.mShowPackagePadNumbers_property.storeIn (dictionary: ioDictionary, forKey:"mShowPackagePadNumbers")
  //--- Atomic property: mShowPackageFrontPads
    self.mShowPackageFrontPads_property.storeIn (dictionary: ioDictionary, forKey:"mShowPackageFrontPads")
  //--- Atomic property: mShowPackageBackPads
    self.mShowPackageBackPads_property.storeIn (dictionary: ioDictionary, forKey:"mShowPackageBackPads")
  //--- Atomic property: mSymbolDisplayZoom
    self.mSymbolDisplayZoom_property.storeIn (dictionary: ioDictionary, forKey:"mSymbolDisplayZoom")
  //--- Atomic property: mSymbolDisplayHorizontalFlip
    self.mSymbolDisplayHorizontalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mSymbolDisplayHorizontalFlip")
  //--- Atomic property: mSymbolDisplayVerticalFlip
    self.mSymbolDisplayVerticalFlip_property.storeIn (dictionary: ioDictionary, forKey:"mSymbolDisplayVerticalFlip")
  //--- To many property: mDocs
    self.store (
      managedObjectArray: self.mDocs_property.propval,
      relationshipName: "mDocs",
      intoDictionary: ioDictionary
    )
  //--- To many property: mSymbolInstances
    self.store (
      managedObjectArray: self.mSymbolInstances_property.propval,
      relationshipName: "mSymbolInstances",
      intoDictionary: ioDictionary
    )
  //--- To many property: mPackages
    self.store (
      managedObjectArray: self.mPackages_property.propval,
      relationshipName: "mPackages",
      intoDictionary: ioDictionary
    )
  //--- To many property: mSymbolTypes
    self.store (
      managedObjectArray: self.mSymbolTypes_property.propval,
      relationshipName: "mSymbolTypes",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: mImageData
    self.mImageData_property.storeIn (dictionary: ioDictionary, forKey:"mImageData")
  //--- To many property: mPadProxies
    self.store (
      managedObjectArray: self.mPadProxies_property.propval,
      relationshipName: "mPadProxies",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mDocs
    self.mDocs_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mDocs",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [DeviceDocumentation])
  //--- To many property: mSymbolInstances
    self.mSymbolInstances_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mSymbolInstances",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SymbolInstanceInDevice])
  //--- To many property: mPackages
    self.mPackages_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mPackages",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [PackageInDevice])
  //--- To many property: mSymbolTypes
    self.mSymbolTypes_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mSymbolTypes",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SymbolTypeInDevice])
  //--- To many property: mPadProxies
    self.mPadProxies_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mPadProxies",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [PadProxyInDevice])
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mSelectedPageIndex
    self.mSelectedPageIndex_property.readFrom (dictionary: inDictionary, forKey:"mSelectedPageIndex")
  //--- Atomic property: mTitle
    self.mTitle_property.readFrom (dictionary: inDictionary, forKey:"mTitle")
  //--- Atomic property: mPrefix
    self.mPrefix_property.readFrom (dictionary: inDictionary, forKey:"mPrefix")
  //--- Atomic property: mComments
    self.mComments_property.readFrom (dictionary: inDictionary, forKey:"mComments")
  //--- Atomic property: mPackageDisplayZoom
    self.mPackageDisplayZoom_property.readFrom (dictionary: inDictionary, forKey:"mPackageDisplayZoom")
  //--- Atomic property: mPackageDisplayHorizontalFlip
    self.mPackageDisplayHorizontalFlip_property.readFrom (dictionary: inDictionary, forKey:"mPackageDisplayHorizontalFlip")
  //--- Atomic property: mPackageDisplayVerticalFlip
    self.mPackageDisplayVerticalFlip_property.readFrom (dictionary: inDictionary, forKey:"mPackageDisplayVerticalFlip")
  //--- Atomic property: mShowPackages
    self.mShowPackages_property.readFrom (dictionary: inDictionary, forKey:"mShowPackages")
  //--- Atomic property: mShowPackagePadNumbers
    self.mShowPackagePadNumbers_property.readFrom (dictionary: inDictionary, forKey:"mShowPackagePadNumbers")
  //--- Atomic property: mShowPackageFrontPads
    self.mShowPackageFrontPads_property.readFrom (dictionary: inDictionary, forKey:"mShowPackageFrontPads")
  //--- Atomic property: mShowPackageBackPads
    self.mShowPackageBackPads_property.readFrom (dictionary: inDictionary, forKey:"mShowPackageBackPads")
  //--- Atomic property: mSymbolDisplayZoom
    self.mSymbolDisplayZoom_property.readFrom (dictionary: inDictionary, forKey:"mSymbolDisplayZoom")
  //--- Atomic property: mSymbolDisplayHorizontalFlip
    self.mSymbolDisplayHorizontalFlip_property.readFrom (dictionary: inDictionary, forKey:"mSymbolDisplayHorizontalFlip")
  //--- Atomic property: mSymbolDisplayVerticalFlip
    self.mSymbolDisplayVerticalFlip_property.readFrom (dictionary: inDictionary, forKey:"mSymbolDisplayVerticalFlip")
  //--- Atomic property: mImageData
    self.mImageData_property.readFrom (dictionary: inDictionary, forKey:"mImageData")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mDocs
    for managedObject in self.mDocs_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mSymbolInstances
    for managedObject in self.mSymbolInstances_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mPackages
    for managedObject in self.mPackages_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mSymbolTypes
    for managedObject in self.mSymbolTypes_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mPadProxies
    for managedObject in self.mPadProxies_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mDocs
    for managedObject in self.mDocs_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mSymbolInstances
    for managedObject in self.mSymbolInstances_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mPackages
    for managedObject in self.mPackages_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mSymbolTypes
    for managedObject in self.mSymbolTypes_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mPadProxies
    for managedObject in self.mPadProxies_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.mComments_property.signature ())
    crc.accumulateUInt32 (self.mDocs_property.signature ())
    crc.accumulateUInt32 (self.mImageData_property.signature ())
    crc.accumulateUInt32 (self.mPackageDisplayHorizontalFlip_property.signature ())
    crc.accumulateUInt32 (self.mPackageDisplayVerticalFlip_property.signature ())
    crc.accumulateUInt32 (self.mPackageDisplayZoom_property.signature ())
    crc.accumulateUInt32 (self.mPackages_property.signature ())
    crc.accumulateUInt32 (self.mPadProxies_property.signature ())
    crc.accumulateUInt32 (self.mPrefix_property.signature ())
    crc.accumulateUInt32 (self.mShowPackageBackPads_property.signature ())
    crc.accumulateUInt32 (self.mShowPackageFrontPads_property.signature ())
    crc.accumulateUInt32 (self.mShowPackagePadNumbers_property.signature ())
    crc.accumulateUInt32 (self.mShowPackages_property.signature ())
    crc.accumulateUInt32 (self.mSymbolDisplayHorizontalFlip_property.signature ())
    crc.accumulateUInt32 (self.mSymbolDisplayVerticalFlip_property.signature ())
    crc.accumulateUInt32 (self.mSymbolDisplayZoom_property.signature ())
    crc.accumulateUInt32 (self.mSymbolInstances_property.signature ())
    crc.accumulateUInt32 (self.mSymbolTypes_property.signature ())
    crc.accumulateUInt32 (self.mTitle_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_DeviceRoot : ReadOnlyAbstractArrayProperty <DeviceRoot> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <DeviceRoot>, addedSet inAddedSet : Set <DeviceRoot>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_mSelectedPageIndex_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mTitle_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mPrefix_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mComments_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mPackageDisplayZoom_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mPackageDisplayHorizontalFlip_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mPackageDisplayVerticalFlip_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mShowPackages_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mShowPackagePadNumbers_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mShowPackageFrontPads_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mShowPackageBackPads_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSymbolDisplayZoom_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSymbolDisplayHorizontalFlip_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mSymbolDisplayVerticalFlip_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_mImageData_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_inconsistentPackagePadNameSetsMessage_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_inconsistentSymbolNameSetMessage_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_unconnectedPins_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_imageIsValid_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_packagePadNameSetsAreConsistent_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_symbolNameAreConsistent_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_symbolTypeNames_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_unconnectedPads_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_assignedPadProxies_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_issues_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_mSelectedPageIndex_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mTitle_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mPrefix_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mComments_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mPackageDisplayZoom_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mPackageDisplayHorizontalFlip_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mPackageDisplayVerticalFlip_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mShowPackages_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mShowPackagePadNumbers_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mShowPackageFrontPads_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mShowPackageBackPads_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSymbolDisplayZoom_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSymbolDisplayHorizontalFlip_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mSymbolDisplayVerticalFlip_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_mImageData_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_inconsistentPackagePadNameSetsMessage_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_inconsistentSymbolNameSetMessage_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_unconnectedPins_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_imageIsValid_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_packagePadNameSetsAreConsistent_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_symbolNameAreConsistent_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_symbolTypeNames_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_unconnectedPads_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_assignedPadProxies_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_issues_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'mSelectedPageIndex' stored property
  //····················································································································

  private var mObserversOf_mSelectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSelectedPageIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedPageIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSelectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSelectedPageIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSelectedPageIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSelectedPageIndex_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSelectedPageIndex.apply { (_ observer : EBEvent) in
        managedObject.mSelectedPageIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSelectedPageIndex_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mSelectedPageIndex.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSelectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mTitle' stored property
  //····················································································································

  private var mObserversOf_mTitle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mTitle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mTitle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mTitle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mTitle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mTitle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mTitle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mTitle_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mTitle.apply { (_ observer : EBEvent) in
        managedObject.mTitle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mTitle_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mTitle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mTitle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPrefix' stored property
  //····················································································································

  private var mObserversOf_mPrefix = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPrefix (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPrefix.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPrefix_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPrefix (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPrefix.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPrefix_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPrefix_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mPrefix.apply { (_ observer : EBEvent) in
        managedObject.mPrefix_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPrefix_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mPrefix.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPrefix_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mComments' stored property
  //····················································································································

  private var mObserversOf_mComments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mComments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mComments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mComments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mComments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mComments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mComments_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mComments.apply { (_ observer : EBEvent) in
        managedObject.mComments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mComments_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mComments.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mComments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPackageDisplayZoom' stored property
  //····················································································································

  private var mObserversOf_mPackageDisplayZoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPackageDisplayZoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayZoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPackageDisplayZoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayZoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayZoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPackageDisplayZoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPackageDisplayZoom_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mPackageDisplayZoom.apply { (_ observer : EBEvent) in
        managedObject.mPackageDisplayZoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPackageDisplayZoom_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mPackageDisplayZoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPackageDisplayZoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPackageDisplayHorizontalFlip' stored property
  //····················································································································

  private var mObserversOf_mPackageDisplayHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPackageDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayHorizontalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPackageDisplayHorizontalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayHorizontalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPackageDisplayHorizontalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPackageDisplayHorizontalFlip_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mPackageDisplayHorizontalFlip.apply { (_ observer : EBEvent) in
        managedObject.mPackageDisplayHorizontalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPackageDisplayHorizontalFlip_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mPackageDisplayHorizontalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPackageDisplayHorizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mPackageDisplayVerticalFlip' stored property
  //····················································································································

  private var mObserversOf_mPackageDisplayVerticalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mPackageDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayVerticalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPackageDisplayVerticalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mPackageDisplayVerticalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mPackageDisplayVerticalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mPackageDisplayVerticalFlip_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mPackageDisplayVerticalFlip.apply { (_ observer : EBEvent) in
        managedObject.mPackageDisplayVerticalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mPackageDisplayVerticalFlip_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mPackageDisplayVerticalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mPackageDisplayVerticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mShowPackages' stored property
  //····················································································································

  private var mObserversOf_mShowPackages = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mShowPackages (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mShowPackages.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackages_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackages (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mShowPackages.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackages_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mShowPackages_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mShowPackages.apply { (_ observer : EBEvent) in
        managedObject.mShowPackages_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mShowPackages_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mShowPackages.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mShowPackages_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mShowPackagePadNumbers' stored property
  //····················································································································

  private var mObserversOf_mShowPackagePadNumbers = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mShowPackagePadNumbers (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mShowPackagePadNumbers.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackagePadNumbers_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackagePadNumbers (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mShowPackagePadNumbers.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackagePadNumbers_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mShowPackagePadNumbers_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mShowPackagePadNumbers.apply { (_ observer : EBEvent) in
        managedObject.mShowPackagePadNumbers_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mShowPackagePadNumbers_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mShowPackagePadNumbers.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mShowPackagePadNumbers_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mShowPackageFrontPads' stored property
  //····················································································································

  private var mObserversOf_mShowPackageFrontPads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mShowPackageFrontPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mShowPackageFrontPads.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackageFrontPads_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackageFrontPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mShowPackageFrontPads.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackageFrontPads_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mShowPackageFrontPads_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mShowPackageFrontPads.apply { (_ observer : EBEvent) in
        managedObject.mShowPackageFrontPads_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mShowPackageFrontPads_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mShowPackageFrontPads.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mShowPackageFrontPads_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mShowPackageBackPads' stored property
  //····················································································································

  private var mObserversOf_mShowPackageBackPads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mShowPackageBackPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mShowPackageBackPads.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackageBackPads_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackageBackPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mShowPackageBackPads.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mShowPackageBackPads_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mShowPackageBackPads_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mShowPackageBackPads.apply { (_ observer : EBEvent) in
        managedObject.mShowPackageBackPads_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mShowPackageBackPads_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mShowPackageBackPads.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mShowPackageBackPads_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSymbolDisplayZoom' stored property
  //····················································································································

  private var mObserversOf_mSymbolDisplayZoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSymbolDisplayZoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolDisplayZoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolDisplayZoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolDisplayZoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolDisplayZoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolDisplayZoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolDisplayZoom_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSymbolDisplayZoom.apply { (_ observer : EBEvent) in
        managedObject.mSymbolDisplayZoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolDisplayZoom_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mSymbolDisplayZoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSymbolDisplayZoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSymbolDisplayHorizontalFlip' stored property
  //····················································································································

  private var mObserversOf_mSymbolDisplayHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSymbolDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolDisplayHorizontalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolDisplayHorizontalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolDisplayHorizontalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolDisplayHorizontalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolDisplayHorizontalFlip_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSymbolDisplayHorizontalFlip.apply { (_ observer : EBEvent) in
        managedObject.mSymbolDisplayHorizontalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolDisplayHorizontalFlip_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mSymbolDisplayHorizontalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSymbolDisplayHorizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mSymbolDisplayVerticalFlip' stored property
  //····················································································································

  private var mObserversOf_mSymbolDisplayVerticalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mSymbolDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mSymbolDisplayVerticalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolDisplayVerticalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mSymbolDisplayVerticalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mSymbolDisplayVerticalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mSymbolDisplayVerticalFlip_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mSymbolDisplayVerticalFlip.apply { (_ observer : EBEvent) in
        managedObject.mSymbolDisplayVerticalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mSymbolDisplayVerticalFlip_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mSymbolDisplayVerticalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mSymbolDisplayVerticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mImageData' stored property
  //····················································································································

  private var mObserversOf_mImageData = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mImageData (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mImageData.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mImageData_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mImageData (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mImageData.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mImageData_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mImageData_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_mImageData.apply { (_ observer : EBEvent) in
        managedObject.mImageData_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mImageData_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    self.mObserversOf_mImageData.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mImageData_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'inconsistentPackagePadNameSetsMessage' transient property
  //····················································································································

  private var mObserversOf_inconsistentPackagePadNameSetsMessage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_inconsistentPackagePadNameSetsMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_inconsistentPackagePadNameSetsMessage.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.inconsistentPackagePadNameSetsMessage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_inconsistentPackagePadNameSetsMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_inconsistentPackagePadNameSetsMessage.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.inconsistentPackagePadNameSetsMessage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_inconsistentPackagePadNameSetsMessage_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_inconsistentPackagePadNameSetsMessage.apply { (_ observer : EBEvent) in
        managedObject.inconsistentPackagePadNameSetsMessage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_inconsistentPackagePadNameSetsMessage_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_inconsistentPackagePadNameSetsMessage.apply { (_ observer : EBEvent) in
        managedObject.inconsistentPackagePadNameSetsMessage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'inconsistentSymbolNameSetMessage' transient property
  //····················································································································

  private var mObserversOf_inconsistentSymbolNameSetMessage = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_inconsistentSymbolNameSetMessage (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_inconsistentSymbolNameSetMessage.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.inconsistentSymbolNameSetMessage_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_inconsistentSymbolNameSetMessage (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_inconsistentSymbolNameSetMessage.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.inconsistentSymbolNameSetMessage_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_inconsistentSymbolNameSetMessage_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_inconsistentSymbolNameSetMessage.apply { (_ observer : EBEvent) in
        managedObject.inconsistentSymbolNameSetMessage_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_inconsistentSymbolNameSetMessage_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_inconsistentSymbolNameSetMessage.apply { (_ observer : EBEvent) in
        managedObject.inconsistentSymbolNameSetMessage_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'unconnectedPins' transient property
  //····················································································································

  private var mObserversOf_unconnectedPins = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_unconnectedPins (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unconnectedPins.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unconnectedPins_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_unconnectedPins (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unconnectedPins.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unconnectedPins_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_unconnectedPins_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_unconnectedPins.apply { (_ observer : EBEvent) in
        managedObject.unconnectedPins_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_unconnectedPins_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_unconnectedPins.apply { (_ observer : EBEvent) in
        managedObject.unconnectedPins_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'imageIsValid' transient property
  //····················································································································

  private var mObserversOf_imageIsValid = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_imageIsValid (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_imageIsValid.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.imageIsValid_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_imageIsValid (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_imageIsValid.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.imageIsValid_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_imageIsValid_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_imageIsValid.apply { (_ observer : EBEvent) in
        managedObject.imageIsValid_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_imageIsValid_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_imageIsValid.apply { (_ observer : EBEvent) in
        managedObject.imageIsValid_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'packagePadNameSetsAreConsistent' transient property
  //····················································································································

  private var mObserversOf_packagePadNameSetsAreConsistent = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_packagePadNameSetsAreConsistent (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_packagePadNameSetsAreConsistent.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.packagePadNameSetsAreConsistent_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_packagePadNameSetsAreConsistent (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_packagePadNameSetsAreConsistent.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.packagePadNameSetsAreConsistent_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_packagePadNameSetsAreConsistent_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_packagePadNameSetsAreConsistent.apply { (_ observer : EBEvent) in
        managedObject.packagePadNameSetsAreConsistent_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_packagePadNameSetsAreConsistent_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_packagePadNameSetsAreConsistent.apply { (_ observer : EBEvent) in
        managedObject.packagePadNameSetsAreConsistent_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'symbolNameAreConsistent' transient property
  //····················································································································

  private var mObserversOf_symbolNameAreConsistent = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_symbolNameAreConsistent (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolNameAreConsistent.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolNameAreConsistent_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolNameAreConsistent (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolNameAreConsistent.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolNameAreConsistent_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_symbolNameAreConsistent_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_symbolNameAreConsistent.apply { (_ observer : EBEvent) in
        managedObject.symbolNameAreConsistent_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_symbolNameAreConsistent_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_symbolNameAreConsistent.apply { (_ observer : EBEvent) in
        managedObject.symbolNameAreConsistent_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'symbolTypeNames' transient property
  //····················································································································

  private var mObserversOf_symbolTypeNames = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_symbolTypeNames (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_symbolTypeNames.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolTypeNames_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolTypeNames (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_symbolTypeNames.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.symbolTypeNames_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_symbolTypeNames_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_symbolTypeNames.apply { (_ observer : EBEvent) in
        managedObject.symbolTypeNames_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_symbolTypeNames_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_symbolTypeNames.apply { (_ observer : EBEvent) in
        managedObject.symbolTypeNames_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'unconnectedPads' transient property
  //····················································································································

  private var mObserversOf_unconnectedPads = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_unconnectedPads (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_unconnectedPads.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unconnectedPads_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_unconnectedPads (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_unconnectedPads.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.unconnectedPads_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_unconnectedPads_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_unconnectedPads.apply { (_ observer : EBEvent) in
        managedObject.unconnectedPads_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_unconnectedPads_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_unconnectedPads.apply { (_ observer : EBEvent) in
        managedObject.unconnectedPads_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'assignedPadProxies' transient property
  //····················································································································

  private var mObserversOf_assignedPadProxies = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_assignedPadProxies (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_assignedPadProxies.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.assignedPadProxies_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_assignedPadProxies (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_assignedPadProxies.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.assignedPadProxies_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_assignedPadProxies_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_assignedPadProxies.apply { (_ observer : EBEvent) in
        managedObject.assignedPadProxies_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_assignedPadProxies_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_assignedPadProxies.apply { (_ observer : EBEvent) in
        managedObject.assignedPadProxies_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<DeviceRoot>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_DeviceRoot : ReadOnlyArrayOf_DeviceRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_DeviceRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_DeviceRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newArray : [DeviceRoot] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newArray = v
        self.mTransientKind = .single
       case .multiple :
        newArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newArray = []
      self.mTransientKind = .empty
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [DeviceRoot] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [DeviceRoot] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_DeviceRoot <SUPER : EBManagedObject> : ReadOnlyArrayOf_DeviceRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    var newModelArray : [SUPER] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newModelArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newModelArray = v
        self.mTransientKind = .single
       case .multiple :
        newModelArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newModelArray = []
      self.mTransientKind = .empty
    }
    var newArray = [DeviceRoot] ()
    for superObject in newModelArray {
      if let object = superObject as? DeviceRoot {
        newArray.append (object)
      }
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [DeviceRoot] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [DeviceRoot] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_DeviceRoot : ReadOnlyArrayOf_DeviceRoot {

  //····················································································································
 
  func setProp (_ value :  [DeviceRoot]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_DeviceRoot : ReadWriteArrayOf_DeviceRoot {

  //····················································································································

  private var mModel : ReadWriteArrayOf_DeviceRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_DeviceRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [DeviceRoot]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [DeviceRoot]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [DeviceRoot] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : [DeviceRoot] {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: DeviceRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_DeviceRoot : ReadWriteArrayOf_DeviceRoot, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : DeviceRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : DeviceRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : DeviceRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : DeviceRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  //  Init
  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [DeviceRoot] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "DeviceRoot") as? DeviceRoot {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [DeviceRoot]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [DeviceRoot]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //--- Write in preferences ?
    self.writeInPreferences ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <DeviceRoot>, addedSet inAddedSet : Set <DeviceRoot>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //---
    for managedObject in inRemovedSet {
      managedObject.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (managedObject)
    }
  //---
    for managedObject in inAddedSet {
      managedObject.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (managedObject)
    }
  }
 
  //····················································································································

  override var prop : EBSelection < [DeviceRoot] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [DeviceRoot]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [DeviceRoot] { return self.mInternalArrayValue }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mInternalArrayValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  func remove (_ object : DeviceRoot) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : DeviceRoot) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mInternalArrayValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
