//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_DeviceInProject 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_DeviceInProject : ReadOnlyAbstractObjectProperty <DeviceInProject> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : DeviceInProject?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.mDeviceName_property.removeEBObserver (self.mDeviceName_property) // Stored property
    inOldValue?.mPrefix_property.removeEBObserver (self.mPrefix_property) // Stored property
    inOldValue?.mDeviceVersion_property.removeEBObserver (self.mDeviceVersion_property) // Stored property
    inOldValue?.mDeviceFileData_property.removeEBObserver (self.mDeviceFileData_property) // Stored property
    inOldValue?.versionString_property.removeEBObserver (self.versionString_property) // Transient property
    inOldValue?.sizeString_property.removeEBObserver (self.sizeString_property) // Transient property
    inOldValue?.canExport_property.removeEBObserver (self.canExport_property) // Transient property
    inOldValue?.packageNames_property.removeEBObserver (self.packageNames_property) // Transient property
    inOldValue?.deviceComponentCountString_property.removeEBObserver (self.deviceComponentCountString_property) // Transient property
    inOldValue?.canRemove_property.removeEBObserver (self.canRemove_property) // Transient property
    inOldValue?.symbolAndTypesNames_property.removeEBObserver (self.symbolAndTypesNames_property) // Transient property
    inOldValue?.pinPadAssignments_property.removeEBObserver (self.pinPadAssignments_property) // Transient property
    inOldValue?.deviceSymbolDictionary_property.removeEBObserver (self.deviceSymbolDictionary_property) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.mDeviceName_property.addEBObserver (self.mDeviceName_property) // Stored property
    self.mInternalValue?.mPrefix_property.addEBObserver (self.mPrefix_property) // Stored property
    self.mInternalValue?.mDeviceVersion_property.addEBObserver (self.mDeviceVersion_property) // Stored property
    self.mInternalValue?.mDeviceFileData_property.addEBObserver (self.mDeviceFileData_property) // Stored property
    self.mInternalValue?.versionString_property.addEBObserver (self.versionString_property) // Transient property
    self.mInternalValue?.sizeString_property.addEBObserver (self.sizeString_property) // Transient property
    self.mInternalValue?.canExport_property.addEBObserver (self.canExport_property) // Transient property
    self.mInternalValue?.packageNames_property.addEBObserver (self.packageNames_property) // Transient property
    self.mInternalValue?.deviceComponentCountString_property.addEBObserver (self.deviceComponentCountString_property) // Transient property
    self.mInternalValue?.canRemove_property.addEBObserver (self.canRemove_property) // Transient property
    self.mInternalValue?.symbolAndTypesNames_property.addEBObserver (self.symbolAndTypesNames_property) // Transient property
    self.mInternalValue?.pinPadAssignments_property.addEBObserver (self.pinPadAssignments_property) // Transient property
    self.mInternalValue?.deviceSymbolDictionary_property.addEBObserver (self.deviceSymbolDictionary_property) // Transient property
  }

  //····················································································································
  //   init
  //····················································································································

  override init () {
    super.init ()
    self.mDeviceName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mDeviceName_property.prop ?? .empty }
    self.mDeviceName_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.mDeviceName_property.setProp (inValue) }
    self.mPrefix_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mPrefix_property.prop ?? .empty }
    self.mPrefix_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.mPrefix_property.setProp (inValue) }
    self.mDeviceVersion_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mDeviceVersion_property.prop ?? .empty }
    self.mDeviceVersion_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.mDeviceVersion_property.setProp (inValue) }
    self.mDeviceFileData_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.mDeviceFileData_property.prop ?? .empty }
    self.mDeviceFileData_property.mWriteModelFunction = { [weak self] (inValue : Data) in self?.mInternalValue?.mDeviceFileData_property.setProp (inValue) }
    self.versionString_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.versionString_property.prop ?? .empty }
    self.sizeString_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.sizeString_property.prop ?? .empty }
    self.canExport_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.canExport_property.prop ?? .empty }
    self.packageNames_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.packageNames_property.prop ?? .empty }
    self.deviceComponentCountString_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.deviceComponentCountString_property.prop ?? .empty }
    self.canRemove_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.canRemove_property.prop ?? .empty }
    self.symbolAndTypesNames_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.symbolAndTypesNames_property.prop ?? .empty }
    self.pinPadAssignments_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.pinPadAssignments_property.prop ?? .empty }
    self.deviceSymbolDictionary_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.deviceSymbolDictionary_property.prop ?? .empty }
  }

  //····················································································································
  //   Proxy of 'mDeviceName' stored property
  //····················································································································

  let mDeviceName_property = EBPropertyProxy_String ()

  var mDeviceName_property_selection : EBSelection <String> {
    switch (self.mDeviceName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mPrefix' stored property
  //····················································································································

  let mPrefix_property = EBPropertyProxy_String ()

  var mPrefix_property_selection : EBSelection <String> {
    switch (self.mPrefix_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mDeviceVersion' stored property
  //····················································································································

  let mDeviceVersion_property = EBPropertyProxy_Int ()

  var mDeviceVersion_property_selection : EBSelection <Int> {
    switch (self.mDeviceVersion_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'mDeviceFileData' stored property
  //····················································································································

  let mDeviceFileData_property = EBPropertyProxy_Data ()

  var mDeviceFileData_property_selection : EBSelection <Data> {
    switch (self.mDeviceFileData_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'versionString' transient property
  //····················································································································

  let versionString_property = EBTransientProperty_String ()

  var versionString_property_selection : EBSelection <String> {
    switch (self.versionString_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'sizeString' transient property
  //····················································································································

  let sizeString_property = EBTransientProperty_String ()

  var sizeString_property_selection : EBSelection <String> {
    switch (self.sizeString_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'canExport' transient property
  //····················································································································

  let canExport_property = EBTransientProperty_Bool ()

  var canExport_property_selection : EBSelection <Bool> {
    switch (self.canExport_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'packageNames' transient property
  //····················································································································

  let packageNames_property = EBTransientProperty_StringArray ()

  var packageNames_property_selection : EBSelection <StringArray> {
    switch (self.packageNames_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'deviceComponentCountString' transient property
  //····················································································································

  let deviceComponentCountString_property = EBTransientProperty_String ()

  var deviceComponentCountString_property_selection : EBSelection <String> {
    switch (self.deviceComponentCountString_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'canRemove' transient property
  //····················································································································

  let canRemove_property = EBTransientProperty_Bool ()

  var canRemove_property_selection : EBSelection <Bool> {
    switch (self.canRemove_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'symbolAndTypesNames' transient property
  //····················································································································

  let symbolAndTypesNames_property = EBTransientProperty_SymbolInProjectIdentifierArray ()

  var symbolAndTypesNames_property_selection : EBSelection <SymbolInProjectIdentifierArray> {
    switch (self.symbolAndTypesNames_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'pinPadAssignments' transient property
  //····················································································································

  let pinPadAssignments_property = EBTransientProperty_ThreeStringArray ()

  var pinPadAssignments_property_selection : EBSelection <ThreeStringArray> {
    switch (self.pinPadAssignments_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'deviceSymbolDictionary' transient property
  //····················································································································

  let deviceSymbolDictionary_property = EBTransientProperty_DeviceSymbolDictionary ()

  var deviceSymbolDictionary_property_selection : EBSelection <DeviceSymbolDictionary> {
    switch (self.deviceSymbolDictionary_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observable toMany property: mPackages
  //····················································································································

  private var mObserversOf_mPackages = EBWeakEventSet ()

  //····················································································································

  var mPackages_property_selection : EBSelection <[DevicePackageInProject]> {
    if let model = self.propval {
      switch (model.mPackages_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mPackages (_ inObserver : EBEvent) {
    self.mObserversOf_mPackages.insert (inObserver)
    if let object = self.propval {
      object.mPackages_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackages (_ inObserver : EBEvent) {
    self.mObserversOf_mPackages.remove (inObserver)
    if let object = self.propval {
      object.mPackages_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mSymbols
  //····················································································································

  private var mObserversOf_mSymbols = EBWeakEventSet ()

  //····················································································································

  var mSymbols_property_selection : EBSelection <[DeviceSymbolInstanceInProject]> {
    if let model = self.propval {
      switch (model.mSymbols_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbols (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbols.insert (inObserver)
    if let object = self.propval {
      object.mSymbols_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbols (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbols.remove (inObserver)
    if let object = self.propval {
      object.mSymbols_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mComponents
  //····················································································································

  private var mObserversOf_mComponents = EBWeakEventSet ()

  //····················································································································

  var mComponents_property_selection : EBSelection <[ComponentInProject]> {
    if let model = self.propval {
      switch (model.mComponents_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mComponents (_ inObserver : EBEvent) {
    self.mObserversOf_mComponents.insert (inObserver)
    if let object = self.propval {
      object.mComponents_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mComponents (_ inObserver : EBEvent) {
    self.mObserversOf_mComponents.remove (inObserver)
    if let object = self.propval {
      object.mComponents_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: mPadAssignments
  //····················································································································

  private var mObserversOf_mPadAssignments = EBWeakEventSet ()

  //····················································································································

  var mPadAssignments_property_selection : EBSelection <[DevicePadAssignmentInProject]> {
    if let model = self.propval {
      switch (model.mPadAssignments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_mPadAssignments (_ inObserver : EBEvent) {
    self.mObserversOf_mPadAssignments.insert (inObserver)
    if let object = self.propval {
      object.mPadAssignments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPadAssignments (_ inObserver : EBEvent) {
    self.mObserversOf_mPadAssignments.remove (inObserver)
    if let object = self.propval {
      object.mPadAssignments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    TransientObject DeviceInProject
//----------------------------------------------------------------------------------------------------------------------

class TransientObject_DeviceInProject : ReadOnlyObject_DeviceInProject {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_DeviceInProject? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_DeviceInProject?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : DeviceInProject? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < DeviceInProject? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : DeviceInProject? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_DeviceInProject
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_DeviceInProject : ReadOnlyObject_DeviceInProject {

  //····················································································································
 
  func setProp (_ inValue : DeviceInProject?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_DeviceInProject
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_DeviceInProject : ReadWriteObject_DeviceInProject {

  //····················································································································

  private var mModel : ReadWriteObject_DeviceInProject? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_DeviceInProject?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : DeviceInProject?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : DeviceInProject?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < DeviceInProject? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : DeviceInProject? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_DeviceInProject 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_DeviceInProject : ReadWriteObject_DeviceInProject, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : DeviceInProject) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : DeviceInProject) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : DeviceInProject) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : DeviceInProject) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : DeviceInProject?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < DeviceInProject? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : DeviceInProject?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : DeviceInProject? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

