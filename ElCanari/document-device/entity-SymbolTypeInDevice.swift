//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolTypeInDevice_mTypeName : class {
  var mTypeName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolTypeInDevice_mVersion : class {
  var mVersion : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolTypeInDevice_mFileData : class {
  var mFileData : Data { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolTypeInDevice_mStrokeBezierPath : class {
  var mStrokeBezierPath : NSBezierPath { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolTypeInDevice_mFilledBezierPath : class {
  var mFilledBezierPath : NSBezierPath { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolTypeInDevice_versionString : class {
  var versionString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolTypeInDevice_instanceCount : class {
  var instanceCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolTypeInDevice_pinNameShape : class {
  var pinNameShape : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: SymbolTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class SymbolTypeInDevice : EBManagedObject,
         SymbolTypeInDevice_mTypeName,
         SymbolTypeInDevice_mVersion,
         SymbolTypeInDevice_mFileData,
         SymbolTypeInDevice_mStrokeBezierPath,
         SymbolTypeInDevice_mFilledBezierPath,
         SymbolTypeInDevice_versionString,
         SymbolTypeInDevice_instanceCount,
         SymbolTypeInDevice_pinNameShape {

  //····················································································································
  //   To many property: mInstances
  //····················································································································

  let mInstances_property = StoredArrayOf_SymbolInstanceInDevice ()

  //····················································································································

  var mInstances_property_selection : EBSelection < [SymbolInstanceInDevice] > {
    return self.mInstances_property.prop
  }

  //····················································································································

  var mInstances : [SymbolInstanceInDevice] {
    get { return self.mInstances_property.propval }
    set { self.mInstances_property.setProp (newValue) }
  }

  //····················································································································
  //   Atomic property: mTypeName
  //····················································································································

  var mTypeName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mTypeName : String {
    get { return self.mTypeName_property.propval }
    set { self.mTypeName_property.setProp (newValue) }
  }

  //····················································································································

  var mTypeName_property_selection : EBSelection <String> { return self.mTypeName_property.prop }

  //····················································································································
  //   Atomic property: mVersion
  //····················································································································

  var mVersion_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mVersion : Int {
    get { return self.mVersion_property.propval }
    set { self.mVersion_property.setProp (newValue) }
  }

  //····················································································································

  var mVersion_property_selection : EBSelection <Int> { return self.mVersion_property.prop }

  //····················································································································
  //   Atomic property: mFileData
  //····················································································································

  var mFileData_property = EBStoredProperty_Data (defaultValue: Data ())

  //····················································································································

  var mFileData : Data {
    get { return self.mFileData_property.propval }
    set { self.mFileData_property.setProp (newValue) }
  }

  //····················································································································

  var mFileData_property_selection : EBSelection <Data> { return self.mFileData_property.prop }

  //····················································································································
  //   Atomic property: mStrokeBezierPath
  //····················································································································

  var mStrokeBezierPath_property = EBStoredProperty_NSBezierPath (defaultValue: NSBezierPath ())

  //····················································································································

  var mStrokeBezierPath : NSBezierPath {
    get { return self.mStrokeBezierPath_property.propval }
    set { self.mStrokeBezierPath_property.setProp (newValue) }
  }

  //····················································································································

  var mStrokeBezierPath_property_selection : EBSelection <NSBezierPath> { return self.mStrokeBezierPath_property.prop }

  //····················································································································
  //   Atomic property: mFilledBezierPath
  //····················································································································

  var mFilledBezierPath_property = EBStoredProperty_NSBezierPath (defaultValue: NSBezierPath ())

  //····················································································································

  var mFilledBezierPath : NSBezierPath {
    get { return self.mFilledBezierPath_property.propval }
    set { self.mFilledBezierPath_property.setProp (newValue) }
  }

  //····················································································································

  var mFilledBezierPath_property_selection : EBSelection <NSBezierPath> { return self.mFilledBezierPath_property.prop }

  //····················································································································
  //   To many property: mPinTypes
  //····················································································································

  let mPinTypes_property = StoredArrayOf_SymbolPinTypeInDevice ()

  //····················································································································

  var mPinTypes_property_selection : EBSelection < [SymbolPinTypeInDevice] > {
    return self.mPinTypes_property.prop
  }

  //····················································································································

  var mPinTypes : [SymbolPinTypeInDevice] {
    get { return self.mPinTypes_property.propval }
    set { self.mPinTypes_property.setProp (newValue) }
  }

  //····················································································································
  //   Transient property: versionString
  //····················································································································

  var versionString_property = EBTransientProperty_String ()

  //····················································································································

  var versionString_property_selection : EBSelection <String> {
    return self.versionString_property.prop
  }

  //····················································································································

  var versionString : String? {
    switch self.versionString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: instanceCount
  //····················································································································

  var instanceCount_property = EBTransientProperty_Int ()

  //····················································································································

  var instanceCount_property_selection : EBSelection <Int> {
    return self.instanceCount_property.prop
  }

  //····················································································································

  var instanceCount : Int? {
    switch self.instanceCount_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: pinNameShape
  //····················································································································

  var pinNameShape_property = EBTransientProperty_EBShape ()

  //····················································································································

  var pinNameShape_property_selection : EBSelection <EBShape> {
    return self.pinNameShape_property.prop
  }

  //····················································································································

  var pinNameShape : EBShape? {
    switch self.pinNameShape_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- To many property: mInstances (has opposite relationship)
    self.mInstances_property.ebUndoManager = self.ebUndoManager
    self.mInstances_property.setOppositeRelationship = { [weak self] (_ inManagedObject :SymbolInstanceInDevice?) in
      inManagedObject?.mType_property.setProp (self)
    }
  //--- Atomic property: mTypeName
    self.mTypeName_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mVersion
    self.mVersion_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mFileData
    self.mFileData_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mFilledBezierPath
    self.mFilledBezierPath_property.ebUndoManager = self.ebUndoManager
  //--- To many property: mPinTypes (no option)
    self.mPinTypes_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: versionString
    self.versionString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mVersion_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mVersion_property_selection) {
          case (.single (let v0)) :
            return .single (transient_SymbolTypeInDevice_versionString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mVersion_property.addEBObserver (self.versionString_property)
  //--- Atomic property: instanceCount
    self.instanceCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mInstances_property.count_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mInstances_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (transient_SymbolTypeInDevice_instanceCount (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mInstances_property.addEBObserver (self.instanceCount_property)
  //--- Atomic property: pinNameShape
    self.pinNameShape_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mPinTypes_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mPinTypes_property_selection) {
          case (.single (let v0)) :
            return .single (transient_SymbolTypeInDevice_pinNameShape (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mPinTypes_property.addEBObserverOf_nameShape (self.pinNameShape_property)
  //--- Install undoers and opposite setter for relationships
    self.mInstances_property.setOppositeRelationship = { [weak self] (_ inManagedObject : SymbolInstanceInDevice?) in
      inManagedObject?.mType_property.setProp (self)
    }
  //--- Register properties for handling signature
    self.mFileData_property.setSignatureObserver (observer: self)
    self.mFilledBezierPath_property.setSignatureObserver (observer: self)
    self.mInstances_property.setSignatureObserver (observer: self)
    self.mPinTypes_property.setSignatureObserver (observer: self)
    self.mStrokeBezierPath_property.setSignatureObserver (observer: self)
    self.mTypeName_property.setSignatureObserver (observer: self)
    self.mVersion_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mVersion_property.removeEBObserver (self.versionString_property)
    self.mInstances_property.removeEBObserver (self.instanceCount_property)
    self.mPinTypes_property.removeEBObserverOf_nameShape (self.pinNameShape_property)
 //   self.mInstances_property.setOppositeRelationship = nil
  //--- Unregister properties for handling signature
    self.mFileData_property.setSignatureObserver (observer: nil)
    self.mFilledBezierPath_property.setSignatureObserver (observer: nil)
    self.mInstances_property.setSignatureObserver (observer: nil)
    self.mPinTypes_property.setSignatureObserver (observer: nil)
    self.mStrokeBezierPath_property.setSignatureObserver (observer: nil)
    self.mTypeName_property.setSignatureObserver (observer: nil)
    self.mVersion_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mTypeName",
      idx:self.mTypeName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mTypeName_property.mObserverExplorer,
      valueExplorer:&self.mTypeName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mVersion",
      idx:self.mVersion_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mVersion_property.mObserverExplorer,
      valueExplorer:&self.mVersion_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mFileData",
      idx:self.mFileData_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mFileData_property.mObserverExplorer,
      valueExplorer:&self.mFileData_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mStrokeBezierPath",
      idx:self.mStrokeBezierPath_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mStrokeBezierPath_property.mObserverExplorer,
      valueExplorer:&self.mStrokeBezierPath_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mFilledBezierPath",
      idx:self.mFilledBezierPath_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mFilledBezierPath_property.mObserverExplorer,
      valueExplorer:&self.mFilledBezierPath_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "versionString",
      idx:self.versionString_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.versionString_property.mObserverExplorer,
      valueExplorer:&self.versionString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "instanceCount",
      idx:self.instanceCount_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.instanceCount_property.mObserverExplorer,
      valueExplorer:&self.instanceCount_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "pinNameShape",
      idx:self.pinNameShape_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.pinNameShape_property.mObserverExplorer,
      valueExplorer:&self.pinNameShape_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "mInstances",
      idx:mInstances_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mInstances_property.mValueExplorer
    )
    createEntryForToManyRelationshipNamed (
      "mPinTypes",
      idx:mPinTypes_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mPinTypes_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- To many property: mInstances
    self.mInstances_property.mValueExplorer = nil
  //--- Atomic property: mTypeName
    self.mTypeName_property.mObserverExplorer = nil
    self.mTypeName_property.mValueExplorer = nil
  //--- Atomic property: mVersion
    self.mVersion_property.mObserverExplorer = nil
    self.mVersion_property.mValueExplorer = nil
  //--- Atomic property: mFileData
    self.mFileData_property.mObserverExplorer = nil
    self.mFileData_property.mValueExplorer = nil
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.mObserverExplorer = nil
    self.mStrokeBezierPath_property.mValueExplorer = nil
  //--- Atomic property: mFilledBezierPath
    self.mFilledBezierPath_property.mObserverExplorer = nil
    self.mFilledBezierPath_property.mValueExplorer = nil
  //--- To many property: mPinTypes
    self.mPinTypes_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mInstances_property.setProp ([])
    self.mPinTypes_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- To many property: mInstances
    self.store (
      managedObjectArray: self.mInstances_property.propval,
      relationshipName: "mInstances",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: mTypeName
    self.mTypeName_property.storeIn (dictionary: ioDictionary, forKey:"mTypeName")
  //--- Atomic property: mVersion
    self.mVersion_property.storeIn (dictionary: ioDictionary, forKey:"mVersion")
  //--- Atomic property: mFileData
    self.mFileData_property.storeIn (dictionary: ioDictionary, forKey:"mFileData")
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.storeIn (dictionary: ioDictionary, forKey:"mStrokeBezierPath")
  //--- Atomic property: mFilledBezierPath
    self.mFilledBezierPath_property.storeIn (dictionary: ioDictionary, forKey:"mFilledBezierPath")
  //--- To many property: mPinTypes
    self.store (
      managedObjectArray: self.mPinTypes_property.propval,
      relationshipName: "mPinTypes",
      intoDictionary: ioDictionary
    )
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mInstances
    self.mInstances_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mInstances",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SymbolInstanceInDevice])
  //--- To many property: mPinTypes
    self.mPinTypes_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mPinTypes",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SymbolPinTypeInDevice])
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mTypeName
    self.mTypeName_property.readFrom (dictionary: inDictionary, forKey:"mTypeName")
  //--- Atomic property: mVersion
    self.mVersion_property.readFrom (dictionary: inDictionary, forKey:"mVersion")
  //--- Atomic property: mFileData
    self.mFileData_property.readFrom (dictionary: inDictionary, forKey:"mFileData")
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.readFrom (dictionary: inDictionary, forKey:"mStrokeBezierPath")
  //--- Atomic property: mFilledBezierPath
    self.mFilledBezierPath_property.readFrom (dictionary: inDictionary, forKey:"mFilledBezierPath")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mInstances
    for managedObject in self.mInstances_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mPinTypes
    for managedObject in self.mPinTypes_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To many property: mInstances
    for managedObject in self.mInstances_property.propval {
      objects.append (managedObject)
    }
  //--- To many property: mPinTypes
    for managedObject in self.mPinTypes_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.mFileData_property.signature ())
    crc.accumulateUInt32 (self.mFilledBezierPath_property.signature ())
    crc.accumulateUInt32 (self.mInstances_property.signature ())
    crc.accumulateUInt32 (self.mPinTypes_property.signature ())
    crc.accumulateUInt32 (self.mStrokeBezierPath_property.signature ())
    crc.accumulateUInt32 (self.mTypeName_property.signature ())
    crc.accumulateUInt32 (self.mVersion_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_SymbolTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_SymbolTypeInDevice : ReadOnlyAbstractArrayProperty <SymbolTypeInDevice> {

  //····················································································································
  //   Observers of 'mTypeName' stored property
  //····················································································································

  private var mObserversOf_mTypeName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mTypeName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mTypeName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mTypeName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mTypeName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mTypeName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mTypeName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mTypeName_toElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mTypeName.apply { (_ observer : EBEvent) in
        managedObject.mTypeName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mTypeName_fromElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    self.mObserversOf_mTypeName.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mTypeName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mVersion' stored property
  //····················································································································

  private var mObserversOf_mVersion = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mVersion (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mVersion.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mVersion_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mVersion (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mVersion.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mVersion_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mVersion_toElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mVersion.apply { (_ observer : EBEvent) in
        managedObject.mVersion_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mVersion_fromElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    self.mObserversOf_mVersion.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mVersion_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mFileData' stored property
  //····················································································································

  private var mObserversOf_mFileData = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mFileData (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mFileData.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mFileData_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mFileData (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mFileData.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mFileData_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mFileData_toElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mFileData.apply { (_ observer : EBEvent) in
        managedObject.mFileData_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mFileData_fromElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    self.mObserversOf_mFileData.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mFileData_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mStrokeBezierPath' stored property
  //····················································································································

  private var mObserversOf_mStrokeBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mStrokeBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mStrokeBezierPath.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mStrokeBezierPath_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mStrokeBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mStrokeBezierPath.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mStrokeBezierPath_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mStrokeBezierPath_toElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mStrokeBezierPath.apply { (_ observer : EBEvent) in
        managedObject.mStrokeBezierPath_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mStrokeBezierPath_fromElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    self.mObserversOf_mStrokeBezierPath.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mStrokeBezierPath_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'mFilledBezierPath' stored property
  //····················································································································

  private var mObserversOf_mFilledBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mFilledBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mFilledBezierPath.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mFilledBezierPath_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mFilledBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mFilledBezierPath.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mFilledBezierPath_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mFilledBezierPath_toElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mFilledBezierPath.apply { (_ observer : EBEvent) in
        managedObject.mFilledBezierPath_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_mFilledBezierPath_fromElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    self.mObserversOf_mFilledBezierPath.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mFilledBezierPath_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'versionString' transient property
  //····················································································································

  private var mObserversOf_versionString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_versionString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.versionString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_versionString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.versionString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_versionString_toElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_versionString.apply { (_ observer : EBEvent) in
        managedObject.versionString_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_versionString_fromElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_versionString.apply { (_ observer : EBEvent) in
        managedObject.versionString_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'instanceCount' transient property
  //····················································································································

  private var mObserversOf_instanceCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_instanceCount.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceCount_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_instanceCount.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceCount_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_instanceCount_toElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_instanceCount.apply { (_ observer : EBEvent) in
        managedObject.instanceCount_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_instanceCount_fromElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_instanceCount.apply { (_ observer : EBEvent) in
        managedObject.instanceCount_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'pinNameShape' transient property
  //····················································································································

  private var mObserversOf_pinNameShape = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_pinNameShape (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_pinNameShape.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinNameShape_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_pinNameShape (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_pinNameShape.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pinNameShape_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_pinNameShape_toElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_pinNameShape.apply { (_ observer : EBEvent) in
        managedObject.pinNameShape_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_pinNameShape_fromElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_pinNameShape.apply { (_ observer : EBEvent) in
        managedObject.pinNameShape_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_SymbolTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_SymbolTypeInDevice : ReadOnlyArrayOf_SymbolTypeInDevice {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [SymbolTypeInDevice] > > = nil

  //····················································································································

  override var propset : Set <SymbolTypeInDevice> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [SymbolTypeInDevice] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [SymbolTypeInDevice] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  private var mSet = Set <SymbolTypeInDevice> ()

  //····················································································································

  private var mCachedValue : EBSelection < [SymbolTypeInDevice] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      let cachedValue = unwrappedComputeFunction ()
      self.mCachedValue = cachedValue
      let newSet : Set <SymbolTypeInDevice>
      switch cachedValue {
      case .multiple, .empty :
        newSet = Set <SymbolTypeInDevice> ()
      case .single (let array) :
        newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_mTypeName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mVersion_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mFileData_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mStrokeBezierPath_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mFilledBezierPath_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_versionString_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_instanceCount_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_pinNameShape_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_mTypeName_toElementsOfSet (addedSet)
      self.addEBObserversOf_mVersion_toElementsOfSet (addedSet)
      self.addEBObserversOf_mFileData_toElementsOfSet (addedSet)
      self.addEBObserversOf_mStrokeBezierPath_toElementsOfSet (addedSet)
      self.addEBObserversOf_mFilledBezierPath_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_versionString_toElementsOfSet (addedSet)
      self.addEBObserversOf_instanceCount_toElementsOfSet (addedSet)
      self.addEBObserversOf_pinNameShape_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: SymbolTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_SymbolTypeInDevice : ReadOnlyArrayOf_SymbolTypeInDevice {

  //····················································································································
 
  func setProp (_ value :  [SymbolTypeInDevice]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: SymbolTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_SymbolTypeInDevice : ReadWriteArrayOf_SymbolTypeInDevice, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : SymbolTypeInDevice?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [SymbolTypeInDevice] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "SymbolTypeInDevice") as? SymbolTypeInDevice {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <SymbolTypeInDevice> ()
  private var mValue = [SymbolTypeInDevice] () {
    didSet {
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.setOppositeRelationship? (nil)
            managedObject.mTypeName_property.mSetterDelegate = nil
            managedObject.mVersion_property.mSetterDelegate = nil
            managedObject.mFileData_property.mSetterDelegate = nil
            managedObject.mStrokeBezierPath_property.mSetterDelegate = nil
            managedObject.mFilledBezierPath_property.mSetterDelegate = nil
          }
        //--- Remove observers of stored properties
          self.removeEBObserversOf_mTypeName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mVersion_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mFileData_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mStrokeBezierPath_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mFilledBezierPath_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of transient properties
          self.removeEBObserversOf_versionString_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_instanceCount_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_pinNameShape_fromElementsOfSet (removedObjectSet)
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : SymbolTypeInDevice in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
            managedObject.mTypeName_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mVersion_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mFileData_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mStrokeBezierPath_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mFilledBezierPath_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
        //--- Add observers of stored properties
          self.addEBObserversOf_mTypeName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mVersion_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mFileData_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mStrokeBezierPath_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mFilledBezierPath_toElementsOfSet (addedObjectSet)
        //--- Add observers of transient properties
          self.addEBObserversOf_versionString_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_instanceCount_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_pinNameShape_toElementsOfSet (addedObjectSet)
        }
      //--- Notify observers
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [SymbolTypeInDevice] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [SymbolTypeInDevice]) { self.mValue = inValue }

  //····················································································································

  override var propval : [SymbolTypeInDevice] { return self.mValue }

  //····················································································································

  override var propset : Set <SymbolTypeInDevice> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [SymbolTypeInDevice]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : SymbolTypeInDevice) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : SymbolTypeInDevice) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
