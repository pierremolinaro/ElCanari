//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolTypeInDevice_mTypeName : class {
  var mTypeName : String { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolTypeInDevice_mVersion : class {
  var mVersion : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolTypeInDevice_mFileData : class {
  var mFileData : Data { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolTypeInDevice_mStrokeBezierPath : class {
  var mStrokeBezierPath : NSBezierPath { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolTypeInDevice_mFilledBezierPath : class {
  var mFilledBezierPath : NSBezierPath { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolTypeInDevice_versionString : class {
  var versionString : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol SymbolTypeInDevice_instanceCount : class {
  var instanceCount : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: SymbolTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class SymbolTypeInDevice : EBManagedObject,
         SymbolTypeInDevice_mTypeName,
         SymbolTypeInDevice_mVersion,
         SymbolTypeInDevice_mFileData,
         SymbolTypeInDevice_mStrokeBezierPath,
         SymbolTypeInDevice_mFilledBezierPath,
         SymbolTypeInDevice_versionString,
         SymbolTypeInDevice_instanceCount {

  //····················································································································
  //   To many property: mInstances
  //····················································································································

  var mInstances_property = StoredArrayOf_SymbolInstanceInDevice ()

  //····················································································································

  var mInstances_property_selection : EBSelection < [SymbolInstanceInDevice] > {
      return self.mInstances_property.prop
  }

  //····················································································································
  //   Atomic property: mTypeName
  //····················································································································

  var mTypeName_property = EBStoredProperty_String (defaultValue: "")

  //····················································································································

  var mTypeName : String {
    get {
      return self.mTypeName_property.propval
    }
    set {
      self.mTypeName_property.setProp (newValue)
    }
  }

  //····················································································································

  var mTypeName_property_selection : EBSelection <String> {
    return self.mTypeName_property.prop
  }

  //····················································································································
  //   Atomic property: mVersion
  //····················································································································

  var mVersion_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mVersion : Int {
    get {
      return self.mVersion_property.propval
    }
    set {
      self.mVersion_property.setProp (newValue)
    }
  }

  //····················································································································

  var mVersion_property_selection : EBSelection <Int> {
    return self.mVersion_property.prop
  }

  //····················································································································
  //   Atomic property: mFileData
  //····················································································································

  var mFileData_property = EBStoredProperty_Data (defaultValue: Data ())

  //····················································································································

  var mFileData : Data {
    get {
      return self.mFileData_property.propval
    }
    set {
      self.mFileData_property.setProp (newValue)
    }
  }

  //····················································································································

  var mFileData_property_selection : EBSelection <Data> {
    return self.mFileData_property.prop
  }

  //····················································································································
  //   Atomic property: mStrokeBezierPath
  //····················································································································

  var mStrokeBezierPath_property = EBStoredProperty_NSBezierPath (defaultValue: NSBezierPath ())

  //····················································································································

  var mStrokeBezierPath : NSBezierPath {
    get {
      return self.mStrokeBezierPath_property.propval
    }
    set {
      self.mStrokeBezierPath_property.setProp (newValue)
    }
  }

  //····················································································································

  var mStrokeBezierPath_property_selection : EBSelection <NSBezierPath> {
    return self.mStrokeBezierPath_property.prop
  }

  //····················································································································
  //   Atomic property: mFilledBezierPath
  //····················································································································

  var mFilledBezierPath_property = EBStoredProperty_NSBezierPath (defaultValue: NSBezierPath ())

  //····················································································································

  var mFilledBezierPath : NSBezierPath {
    get {
      return self.mFilledBezierPath_property.propval
    }
    set {
      self.mFilledBezierPath_property.setProp (newValue)
    }
  }

  //····················································································································

  var mFilledBezierPath_property_selection : EBSelection <NSBezierPath> {
    return self.mFilledBezierPath_property.prop
  }

  //····················································································································
  //   To one property: mRoot
  //····················································································································

  var mRoot_property = ToOneRelationship_SymbolTypeInDevice_mRoot ()

  //····················································································································

  var mRoot_property_selection : EBSelection <Bool> {
    return .single (self.mRoot_property.propval == nil)
  }

  //····················································································································
  //   Transient property: versionString
  //····················································································································

  var versionString_property = EBTransientProperty_String ()

  //····················································································································

  var versionString_property_selection : EBSelection <String> {
    return self.versionString_property.prop
  }

  //····················································································································

  var versionString : String? {
    switch self.versionString_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: instanceCount
  //····················································································································

  var instanceCount_property = EBTransientProperty_Int ()

  //····················································································································

  var instanceCount_property_selection : EBSelection <Int> {
    return self.instanceCount_property.prop
  }

  //····················································································································

  var instanceCount : Int? {
    switch self.instanceCount_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ undoManager : EBUndoManager?, file: String, _ line : Int) {
    super.init (undoManager, file: file, line)
  //--- To many property: mInstances (has opposite relationship)
    self.mInstances_property.undoManager = self.undoManager
    self.mInstances_property.setOppositeRelationship = { [weak self] (_ inManagedObject :SymbolInstanceInDevice?) in
      inManagedObject?.mType_property.setProp (self)
    }
  //--- Atomic property: mTypeName
    self.mTypeName_property.undoManager = self.undoManager
  //--- Atomic property: mVersion
    self.mVersion_property.undoManager = self.undoManager
  //--- Atomic property: mFileData
    self.mFileData_property.undoManager = self.undoManager
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.undoManager = self.undoManager
  //--- Atomic property: mFilledBezierPath
    self.mFilledBezierPath_property.undoManager = self.undoManager
  //--- To one property: mRoot
    self.mRoot_property.owner = self
  //--- Atomic property: versionString
    self.versionString_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mVersion_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mVersion_property_selection) {
          case (.single (let v0)) :
            return .single (transient_SymbolTypeInDevice_versionString (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mVersion_property.addEBObserver (self.versionString_property)
  //--- Atomic property: instanceCount
    self.instanceCount_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.mInstances_property.count_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.mInstances_property.count_property_selection) {
          case (.single (let v0)) :
            return .single (transient_SymbolTypeInDevice_instanceCount (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mInstances_property.addEBObserver (self.instanceCount_property)
  //--- Install undoers and opposite setter for relationships
    self.mInstances_property.setOppositeRelationship = { [weak self] (_ inManagedObject : SymbolInstanceInDevice?) in
      inManagedObject?.mType_property.setProp (self)
    }
  //--- register properties for handling signature
    self.mFileData_property.setSignatureObserver (observer: self)
    self.mFilledBezierPath_property.setSignatureObserver (observer: self)
    self.mStrokeBezierPath_property.setSignatureObserver (observer: self)
    self.mTypeName_property.setSignatureObserver (observer: self)
    self.mVersion_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mVersion_property.removeEBObserver (self.versionString_property)
    self.mInstances_property.removeEBObserver (self.instanceCount_property)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mTypeName",
      idx:self.mTypeName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mTypeName_property.mObserverExplorer,
      valueExplorer:&self.mTypeName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mVersion",
      idx:self.mVersion_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mVersion_property.mObserverExplorer,
      valueExplorer:&self.mVersion_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mFileData",
      idx:self.mFileData_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mFileData_property.mObserverExplorer,
      valueExplorer:&self.mFileData_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mStrokeBezierPath",
      idx:self.mStrokeBezierPath_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mStrokeBezierPath_property.mObserverExplorer,
      valueExplorer:&self.mStrokeBezierPath_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mFilledBezierPath",
      idx:self.mFilledBezierPath_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.mFilledBezierPath_property.mObserverExplorer,
      valueExplorer:&self.mFilledBezierPath_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "versionString",
      idx:self.versionString_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.versionString_property.mObserverExplorer,
      valueExplorer:&self.versionString_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "instanceCount",
      idx:self.instanceCount_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.instanceCount_property.mObserverExplorer,
      valueExplorer:&self.instanceCount_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForToManyRelationshipNamed (
      "mInstances",
      idx:mInstances_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&mInstances_property.mValueExplorer
    )
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "mRoot",
      idx:self.mRoot_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mRoot_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- To many property: mInstances
    self.mInstances_property.mValueExplorer = nil
  //--- Atomic property: mTypeName
    self.mTypeName_property.mObserverExplorer = nil
    self.mTypeName_property.mValueExplorer = nil
  //--- Atomic property: mVersion
    self.mVersion_property.mObserverExplorer = nil
    self.mVersion_property.mValueExplorer = nil
  //--- Atomic property: mFileData
    self.mFileData_property.mObserverExplorer = nil
    self.mFileData_property.mValueExplorer = nil
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.mObserverExplorer = nil
    self.mStrokeBezierPath_property.mValueExplorer = nil
  //--- Atomic property: mFilledBezierPath
    self.mFilledBezierPath_property.mObserverExplorer = nil
    self.mFilledBezierPath_property.mValueExplorer = nil
  //--- To one property: mRoot
    self.mRoot_property.mObserverExplorer = nil
    self.mRoot_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
    self.mInstances_property.setProp ([])
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mRoot_property.setProp (nil)
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- To many property: mInstances
    self.store (
      managedObjectArray: mInstances_property.propval as NSArray,
      relationshipName: "mInstances",
      intoDictionary: ioDictionary
    )
  //--- Atomic property: mTypeName
    self.mTypeName_property.storeIn (dictionary: ioDictionary, forKey:"mTypeName")
  //--- Atomic property: mVersion
    self.mVersion_property.storeIn (dictionary: ioDictionary, forKey:"mVersion")
  //--- Atomic property: mFileData
    self.mFileData_property.storeIn (dictionary: ioDictionary, forKey:"mFileData")
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.storeIn (dictionary: ioDictionary, forKey:"mStrokeBezierPath")
  //--- Atomic property: mFilledBezierPath
    self.mFilledBezierPath_property.storeIn (dictionary: ioDictionary, forKey:"mFilledBezierPath")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To many property: mInstances
    self.mInstances_property.setProp (readEntityArrayFromDictionary (
      inRelationshipName: "mInstances",
      inDictionary: inDictionary,
      managedObjectArray: &managedObjectArray
    ) as! [SymbolInstanceInDevice])
  //--- To one property: mRoot
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mRoot",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? DeviceRoot {
        self.mRoot_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mTypeName
    self.mTypeName_property.readFrom (dictionary: inDictionary, forKey:"mTypeName")
  //--- Atomic property: mVersion
    self.mVersion_property.readFrom (dictionary: inDictionary, forKey:"mVersion")
  //--- Atomic property: mFileData
    self.mFileData_property.readFrom (dictionary: inDictionary, forKey:"mFileData")
  //--- Atomic property: mStrokeBezierPath
    self.mStrokeBezierPath_property.readFrom (dictionary: inDictionary, forKey:"mStrokeBezierPath")
  //--- Atomic property: mFilledBezierPath
    self.mFilledBezierPath_property.readFrom (dictionary: inDictionary, forKey:"mFilledBezierPath")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To many property: mInstances
    for managedObject : EBManagedObject in self.mInstances_property.propval {
      objects.append (managedObject)
    }
  //--- To one property: mRoot
    if let managedObject = self.mRoot_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.mFileData_property.signature ())
    crc.accumulateUInt32 (self.mFilledBezierPath_property.signature ())
    crc.accumulateUInt32 (self.mStrokeBezierPath_property.signature ())
    crc.accumulateUInt32 (self.mTypeName_property.signature ())
    crc.accumulateUInt32 (self.mVersion_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_SymbolTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_SymbolTypeInDevice : ReadOnlyAbstractArrayProperty <SymbolTypeInDevice> {

  //····················································································································
  //   Observers of 'mTypeName' stored property
  //····················································································································

  private var mObserversOf_mTypeName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mTypeName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mTypeName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mTypeName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mTypeName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mTypeName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mTypeName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mTypeName_toElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mTypeName.apply ( {(_ observer : EBEvent) in
        managedObject.mTypeName_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mTypeName_fromElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    self.mObserversOf_mTypeName.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mTypeName_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mVersion' stored property
  //····················································································································

  private var mObserversOf_mVersion = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mVersion (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mVersion.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mVersion_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mVersion (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mVersion.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mVersion_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mVersion_toElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mVersion.apply ( {(_ observer : EBEvent) in
        managedObject.mVersion_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mVersion_fromElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    self.mObserversOf_mVersion.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mVersion_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mFileData' stored property
  //····················································································································

  private var mObserversOf_mFileData = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mFileData (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mFileData.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mFileData_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mFileData (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mFileData.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mFileData_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mFileData_toElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mFileData.apply ( {(_ observer : EBEvent) in
        managedObject.mFileData_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mFileData_fromElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    self.mObserversOf_mFileData.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mFileData_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mStrokeBezierPath' stored property
  //····················································································································

  private var mObserversOf_mStrokeBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mStrokeBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mStrokeBezierPath.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mStrokeBezierPath_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mStrokeBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mStrokeBezierPath.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mStrokeBezierPath_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mStrokeBezierPath_toElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mStrokeBezierPath.apply ( {(_ observer : EBEvent) in
        managedObject.mStrokeBezierPath_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mStrokeBezierPath_fromElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    self.mObserversOf_mStrokeBezierPath.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mStrokeBezierPath_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'mFilledBezierPath' stored property
  //····················································································································

  private var mObserversOf_mFilledBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_mFilledBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_mFilledBezierPath.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mFilledBezierPath_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_mFilledBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_mFilledBezierPath.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.mFilledBezierPath_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_mFilledBezierPath_toElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_mFilledBezierPath.apply ( {(_ observer : EBEvent) in
        managedObject.mFilledBezierPath_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_mFilledBezierPath_fromElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    self.mObserversOf_mFilledBezierPath.apply ( {(_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.mFilledBezierPath_property.removeEBObserver (observer)
      }
    })
  }

  //····················································································································
  //   Observers of 'versionString' transient property
  //····················································································································

  private var mObserversOf_versionString = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_versionString.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.versionString_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_versionString (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_versionString.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.versionString_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_versionString_toElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_versionString.apply ( {(_ observer : EBEvent) in
        managedObject.versionString_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_versionString_fromElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_versionString.apply ( {(_ observer : EBEvent) in
        managedObject.versionString_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································
  //   Observers of 'instanceCount' transient property
  //····················································································································

  private var mObserversOf_instanceCount = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_instanceCount.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceCount_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_instanceCount (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_instanceCount.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.instanceCount_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_instanceCount_toElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_instanceCount.apply ( {(_ observer : EBEvent) in
        managedObject.instanceCount_property.addEBObserver (observer)
      })
    }
  }

  //····················································································································

  final func removeEBObserversOf_instanceCount_fromElementsOfSet (_ inSet : Set<SymbolTypeInDevice>) {
    for managedObject in inSet {
      self.mObserversOf_instanceCount.apply ( {(_ observer : EBEvent) in
        managedObject.instanceCount_property.removeEBObserver (observer)
      })
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_SymbolTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_SymbolTypeInDevice : ReadOnlyArrayOf_SymbolTypeInDevice {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [SymbolTypeInDevice] > > = nil

  //····················································································································

  override var propset : Set <SymbolTypeInDevice> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [SymbolTypeInDevice] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [SymbolTypeInDevice] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <SymbolTypeInDevice> ()

  //····················································································································

  private var mCachedValue : EBSelection < [SymbolTypeInDevice] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      self.mCachedValue = unwrappedComputeFunction ()
      let newSet : Set <SymbolTypeInDevice>
      switch self.mCachedValue! {
      case .multiple, .empty :
        newSet = Set <SymbolTypeInDevice> ()
      case .single (let array) :
       newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_mTypeName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mVersion_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mFileData_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mStrokeBezierPath_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_mFilledBezierPath_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_versionString_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_instanceCount_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_mTypeName_toElementsOfSet (addedSet)
      self.addEBObserversOf_mVersion_toElementsOfSet (addedSet)
      self.addEBObserversOf_mFileData_toElementsOfSet (addedSet)
      self.addEBObserversOf_mStrokeBezierPath_toElementsOfSet (addedSet)
      self.addEBObserversOf_mFilledBezierPath_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_versionString_toElementsOfSet (addedSet)
      self.addEBObserversOf_instanceCount_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: SymbolTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_SymbolTypeInDevice : ReadOnlyArrayOf_SymbolTypeInDevice {

  //····················································································································
 
  func setProp (_ value :  [SymbolTypeInDevice]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: SymbolTypeInDevice
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_SymbolTypeInDevice : ReadWriteArrayOf_SymbolTypeInDevice, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : SymbolTypeInDevice?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [SymbolTypeInDevice] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.undoManager, "SymbolTypeInDevice") as? SymbolTypeInDevice {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <SymbolTypeInDevice> ()
  private var mValue = [SymbolTypeInDevice] () {
    didSet {
     // self.postEvent ()
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.undoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.setOppositeRelationship? (nil)
            managedObject.mTypeName_property.mSetterDelegate = nil
            managedObject.mVersion_property.mSetterDelegate = nil
            managedObject.mFileData_property.mSetterDelegate = nil
            managedObject.mStrokeBezierPath_property.mSetterDelegate = nil
            managedObject.mFilledBezierPath_property.mSetterDelegate = nil
          }
          self.removeEBObserversOf_mTypeName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mVersion_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mFileData_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mStrokeBezierPath_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_mFilledBezierPath_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_versionString_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_instanceCount_fromElementsOfSet (removedObjectSet)
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : SymbolTypeInDevice in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.setOppositeRelationship? (managedObject)
            managedObject.mTypeName_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mVersion_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mFileData_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mStrokeBezierPath_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.mFilledBezierPath_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
          self.addEBObserversOf_mTypeName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mVersion_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mFileData_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mStrokeBezierPath_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_mFilledBezierPath_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_versionString_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_instanceCount_toElementsOfSet (addedObjectSet)
        }
      //--- Notify observers
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [kEntityKey] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [SymbolTypeInDevice] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [SymbolTypeInDevice]) { self.mValue = inValue }

  //····················································································································

  override var propval : [SymbolTypeInDevice] { return self.mValue }

  //····················································································································

  override var propset : Set <SymbolTypeInDevice> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [SymbolTypeInDevice]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : SymbolTypeInDevice) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : SymbolTypeInDevice) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: mRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_SymbolTypeInDevice_mRoot : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : SymbolTypeInDevice? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  private var mValue : DeviceRoot? {
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.undoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        oldValue?.mSymbolTypes_property.remove (unwrappedOwner)
      //--- Set new opposite relation ship
        self.mValue?.mSymbolTypes_property.add (unwrappedOwner)
      //--- Remove property observers of old object
        oldValue?.comments_property.removeEBObserversFrom (&self.mObserversOf_comments)
        oldValue?.imageIsValid_property.removeEBObserversFrom (&self.mObserversOf_imageIsValid)
        oldValue?.inconsistentPackagePadNameSetsMessage_property.removeEBObserversFrom (&self.mObserversOf_inconsistentPackagePadNameSetsMessage)
        oldValue?.inconsistentSymbolNameSetMessage_property.removeEBObserversFrom (&self.mObserversOf_inconsistentSymbolNameSetMessage)
        oldValue?.issues_property.removeEBObserversFrom (&self.mObserversOf_issues)
        oldValue?.mPackageDisplayHorizontalFlip_property.removeEBObserversFrom (&self.mObserversOf_mPackageDisplayHorizontalFlip)
        oldValue?.mPackageDisplayVerticalFlip_property.removeEBObserversFrom (&self.mObserversOf_mPackageDisplayVerticalFlip)
        oldValue?.mPackageDisplayZoom_property.removeEBObserversFrom (&self.mObserversOf_mPackageDisplayZoom)
        oldValue?.mShowPackageBackPads_property.removeEBObserversFrom (&self.mObserversOf_mShowPackageBackPads)
        oldValue?.mShowPackageFrontPads_property.removeEBObserversFrom (&self.mObserversOf_mShowPackageFrontPads)
        oldValue?.mShowPackagePadNumbers_property.removeEBObserversFrom (&self.mObserversOf_mShowPackagePadNumbers)
        oldValue?.mShowPackages_property.removeEBObserversFrom (&self.mObserversOf_mShowPackages)
        oldValue?.mSymbolDisplayHorizontalFlip_property.removeEBObserversFrom (&self.mObserversOf_mSymbolDisplayHorizontalFlip)
        oldValue?.mSymbolDisplayVerticalFlip_property.removeEBObserversFrom (&self.mObserversOf_mSymbolDisplayVerticalFlip)
        oldValue?.mSymbolDisplayZoom_property.removeEBObserversFrom (&self.mObserversOf_mSymbolDisplayZoom)
        oldValue?.packagePadNameSetsAreConsistent_property.removeEBObserversFrom (&self.mObserversOf_packagePadNameSetsAreConsistent)
        oldValue?.prefix_property.removeEBObserversFrom (&self.mObserversOf_prefix)
        oldValue?.representationImageData_property.removeEBObserversFrom (&self.mObserversOf_representationImageData)
        oldValue?.selectedPageIndex_property.removeEBObserversFrom (&self.mObserversOf_selectedPageIndex)
        oldValue?.symbolNameAreConsistent_property.removeEBObserversFrom (&self.mObserversOf_symbolNameAreConsistent)
        oldValue?.symbolTypeNames_property.removeEBObserversFrom (&self.mObserversOf_symbolTypeNames)
        oldValue?.title_property.removeEBObserversFrom (&self.mObserversOf_title)
      //--- Add property observers to new object
        self.mValue?.comments_property.addEBObserversFrom (&self.mObserversOf_comments)
        self.mValue?.imageIsValid_property.addEBObserversFrom (&self.mObserversOf_imageIsValid)
        self.mValue?.inconsistentPackagePadNameSetsMessage_property.addEBObserversFrom (&self.mObserversOf_inconsistentPackagePadNameSetsMessage)
        self.mValue?.inconsistentSymbolNameSetMessage_property.addEBObserversFrom (&self.mObserversOf_inconsistentSymbolNameSetMessage)
        self.mValue?.issues_property.addEBObserversFrom (&self.mObserversOf_issues)
        self.mValue?.mPackageDisplayHorizontalFlip_property.addEBObserversFrom (&self.mObserversOf_mPackageDisplayHorizontalFlip)
        self.mValue?.mPackageDisplayVerticalFlip_property.addEBObserversFrom (&self.mObserversOf_mPackageDisplayVerticalFlip)
        self.mValue?.mPackageDisplayZoom_property.addEBObserversFrom (&self.mObserversOf_mPackageDisplayZoom)
        self.mValue?.mShowPackageBackPads_property.addEBObserversFrom (&self.mObserversOf_mShowPackageBackPads)
        self.mValue?.mShowPackageFrontPads_property.addEBObserversFrom (&self.mObserversOf_mShowPackageFrontPads)
        self.mValue?.mShowPackagePadNumbers_property.addEBObserversFrom (&self.mObserversOf_mShowPackagePadNumbers)
        self.mValue?.mShowPackages_property.addEBObserversFrom (&self.mObserversOf_mShowPackages)
        self.mValue?.mSymbolDisplayHorizontalFlip_property.addEBObserversFrom (&self.mObserversOf_mSymbolDisplayHorizontalFlip)
        self.mValue?.mSymbolDisplayVerticalFlip_property.addEBObserversFrom (&self.mObserversOf_mSymbolDisplayVerticalFlip)
        self.mValue?.mSymbolDisplayZoom_property.addEBObserversFrom (&self.mObserversOf_mSymbolDisplayZoom)
        self.mValue?.packagePadNameSetsAreConsistent_property.addEBObserversFrom (&self.mObserversOf_packagePadNameSetsAreConsistent)
        self.mValue?.prefix_property.addEBObserversFrom (&self.mObserversOf_prefix)
        self.mValue?.representationImageData_property.addEBObserversFrom (&self.mObserversOf_representationImageData)
        self.mValue?.selectedPageIndex_property.addEBObserversFrom (&self.mObserversOf_selectedPageIndex)
        self.mValue?.symbolNameAreConsistent_property.addEBObserversFrom (&self.mObserversOf_symbolNameAreConsistent)
        self.mValue?.symbolTypeNames_property.addEBObserversFrom (&self.mObserversOf_symbolTypeNames)
        self.mValue?.title_property.addEBObserversFrom (&self.mObserversOf_title)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : DeviceRoot? { return self.mValue }

  var prop : EBSelection <DeviceRoot?> { return .single (self.mValue) }

  func setProp (_ value : DeviceRoot?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : DeviceRoot?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : DeviceRoot) {
    if self.mValue === object {
      self.mValue = nil
    }
  }

  //····················································································································
  //   Observable property: comments
  //····················································································································

  private var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  var comments_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.comments_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    self.mObserversOf_comments.insert (inObserver)
    if let object = self.propval {
      object.comments_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    self.mObserversOf_comments.remove (inObserver)
    if let object = self.propval {
      object.comments_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: imageIsValid
  //····················································································································

  private var mObserversOf_imageIsValid = EBWeakEventSet ()

  //····················································································································

  var imageIsValid_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.imageIsValid_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_imageIsValid (_ inObserver : EBEvent) {
    self.mObserversOf_imageIsValid.insert (inObserver)
    if let object = self.propval {
      object.imageIsValid_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_imageIsValid (_ inObserver : EBEvent) {
    self.mObserversOf_imageIsValid.remove (inObserver)
    if let object = self.propval {
      object.imageIsValid_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: inconsistentPackagePadNameSetsMessage
  //····················································································································

  private var mObserversOf_inconsistentPackagePadNameSetsMessage = EBWeakEventSet ()

  //····················································································································

  var inconsistentPackagePadNameSetsMessage_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.inconsistentPackagePadNameSetsMessage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_inconsistentPackagePadNameSetsMessage (_ inObserver : EBEvent) {
    self.mObserversOf_inconsistentPackagePadNameSetsMessage.insert (inObserver)
    if let object = self.propval {
      object.inconsistentPackagePadNameSetsMessage_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_inconsistentPackagePadNameSetsMessage (_ inObserver : EBEvent) {
    self.mObserversOf_inconsistentPackagePadNameSetsMessage.remove (inObserver)
    if let object = self.propval {
      object.inconsistentPackagePadNameSetsMessage_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: inconsistentSymbolNameSetMessage
  //····················································································································

  private var mObserversOf_inconsistentSymbolNameSetMessage = EBWeakEventSet ()

  //····················································································································

  var inconsistentSymbolNameSetMessage_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.inconsistentSymbolNameSetMessage_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_inconsistentSymbolNameSetMessage (_ inObserver : EBEvent) {
    self.mObserversOf_inconsistentSymbolNameSetMessage.insert (inObserver)
    if let object = self.propval {
      object.inconsistentSymbolNameSetMessage_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_inconsistentSymbolNameSetMessage (_ inObserver : EBEvent) {
    self.mObserversOf_inconsistentSymbolNameSetMessage.remove (inObserver)
    if let object = self.propval {
      object.inconsistentSymbolNameSetMessage_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: issues
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.issues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.mObserversOf_issues.insert (inObserver)
    if let object = self.propval {
      object.issues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.mObserversOf_issues.remove (inObserver)
    if let object = self.propval {
      object.issues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mPackageDisplayHorizontalFlip
  //····················································································································

  private var mObserversOf_mPackageDisplayHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  var mPackageDisplayHorizontalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mPackageDisplayHorizontalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPackageDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.mObserversOf_mPackageDisplayHorizontalFlip.insert (inObserver)
    if let object = self.propval {
      object.mPackageDisplayHorizontalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.mObserversOf_mPackageDisplayHorizontalFlip.remove (inObserver)
    if let object = self.propval {
      object.mPackageDisplayHorizontalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mPackageDisplayVerticalFlip
  //····················································································································

  private var mObserversOf_mPackageDisplayVerticalFlip = EBWeakEventSet ()

  //····················································································································

  var mPackageDisplayVerticalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mPackageDisplayVerticalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPackageDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.mObserversOf_mPackageDisplayVerticalFlip.insert (inObserver)
    if let object = self.propval {
      object.mPackageDisplayVerticalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.mObserversOf_mPackageDisplayVerticalFlip.remove (inObserver)
    if let object = self.propval {
      object.mPackageDisplayVerticalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mPackageDisplayZoom
  //····················································································································

  private var mObserversOf_mPackageDisplayZoom = EBWeakEventSet ()

  //····················································································································

  var mPackageDisplayZoom_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mPackageDisplayZoom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mPackageDisplayZoom (_ inObserver : EBEvent) {
    self.mObserversOf_mPackageDisplayZoom.insert (inObserver)
    if let object = self.propval {
      object.mPackageDisplayZoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mPackageDisplayZoom (_ inObserver : EBEvent) {
    self.mObserversOf_mPackageDisplayZoom.remove (inObserver)
    if let object = self.propval {
      object.mPackageDisplayZoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mShowPackageBackPads
  //····················································································································

  private var mObserversOf_mShowPackageBackPads = EBWeakEventSet ()

  //····················································································································

  var mShowPackageBackPads_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mShowPackageBackPads_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mShowPackageBackPads (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackageBackPads.insert (inObserver)
    if let object = self.propval {
      object.mShowPackageBackPads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackageBackPads (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackageBackPads.remove (inObserver)
    if let object = self.propval {
      object.mShowPackageBackPads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mShowPackageFrontPads
  //····················································································································

  private var mObserversOf_mShowPackageFrontPads = EBWeakEventSet ()

  //····················································································································

  var mShowPackageFrontPads_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mShowPackageFrontPads_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mShowPackageFrontPads (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackageFrontPads.insert (inObserver)
    if let object = self.propval {
      object.mShowPackageFrontPads_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackageFrontPads (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackageFrontPads.remove (inObserver)
    if let object = self.propval {
      object.mShowPackageFrontPads_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mShowPackagePadNumbers
  //····················································································································

  private var mObserversOf_mShowPackagePadNumbers = EBWeakEventSet ()

  //····················································································································

  var mShowPackagePadNumbers_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mShowPackagePadNumbers_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mShowPackagePadNumbers (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackagePadNumbers.insert (inObserver)
    if let object = self.propval {
      object.mShowPackagePadNumbers_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackagePadNumbers (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackagePadNumbers.remove (inObserver)
    if let object = self.propval {
      object.mShowPackagePadNumbers_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mShowPackages
  //····················································································································

  private var mObserversOf_mShowPackages = EBWeakEventSet ()

  //····················································································································

  var mShowPackages_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mShowPackages_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mShowPackages (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackages.insert (inObserver)
    if let object = self.propval {
      object.mShowPackages_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mShowPackages (_ inObserver : EBEvent) {
    self.mObserversOf_mShowPackages.remove (inObserver)
    if let object = self.propval {
      object.mShowPackages_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mSymbolDisplayHorizontalFlip
  //····················································································································

  private var mObserversOf_mSymbolDisplayHorizontalFlip = EBWeakEventSet ()

  //····················································································································

  var mSymbolDisplayHorizontalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mSymbolDisplayHorizontalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolDisplayHorizontalFlip.insert (inObserver)
    if let object = self.propval {
      object.mSymbolDisplayHorizontalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolDisplayHorizontalFlip (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolDisplayHorizontalFlip.remove (inObserver)
    if let object = self.propval {
      object.mSymbolDisplayHorizontalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mSymbolDisplayVerticalFlip
  //····················································································································

  private var mObserversOf_mSymbolDisplayVerticalFlip = EBWeakEventSet ()

  //····················································································································

  var mSymbolDisplayVerticalFlip_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.mSymbolDisplayVerticalFlip_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolDisplayVerticalFlip.insert (inObserver)
    if let object = self.propval {
      object.mSymbolDisplayVerticalFlip_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolDisplayVerticalFlip (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolDisplayVerticalFlip.remove (inObserver)
    if let object = self.propval {
      object.mSymbolDisplayVerticalFlip_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: mSymbolDisplayZoom
  //····················································································································

  private var mObserversOf_mSymbolDisplayZoom = EBWeakEventSet ()

  //····················································································································

  var mSymbolDisplayZoom_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.mSymbolDisplayZoom_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_mSymbolDisplayZoom (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolDisplayZoom.insert (inObserver)
    if let object = self.propval {
      object.mSymbolDisplayZoom_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_mSymbolDisplayZoom (_ inObserver : EBEvent) {
    self.mObserversOf_mSymbolDisplayZoom.remove (inObserver)
    if let object = self.propval {
      object.mSymbolDisplayZoom_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: packagePadNameSetsAreConsistent
  //····················································································································

  private var mObserversOf_packagePadNameSetsAreConsistent = EBWeakEventSet ()

  //····················································································································

  var packagePadNameSetsAreConsistent_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.packagePadNameSetsAreConsistent_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_packagePadNameSetsAreConsistent (_ inObserver : EBEvent) {
    self.mObserversOf_packagePadNameSetsAreConsistent.insert (inObserver)
    if let object = self.propval {
      object.packagePadNameSetsAreConsistent_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_packagePadNameSetsAreConsistent (_ inObserver : EBEvent) {
    self.mObserversOf_packagePadNameSetsAreConsistent.remove (inObserver)
    if let object = self.propval {
      object.packagePadNameSetsAreConsistent_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: prefix
  //····················································································································

  private var mObserversOf_prefix = EBWeakEventSet ()

  //····················································································································

  var prefix_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.prefix_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_prefix (_ inObserver : EBEvent) {
    self.mObserversOf_prefix.insert (inObserver)
    if let object = self.propval {
      object.prefix_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_prefix (_ inObserver : EBEvent) {
    self.mObserversOf_prefix.remove (inObserver)
    if let object = self.propval {
      object.prefix_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: representationImageData
  //····················································································································

  private var mObserversOf_representationImageData = EBWeakEventSet ()

  //····················································································································

  var representationImageData_property_selection : EBSelection <Data?> {
    if let model = self.propval {
      switch (model.representationImageData_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_representationImageData (_ inObserver : EBEvent) {
    self.mObserversOf_representationImageData.insert (inObserver)
    if let object = self.propval {
      object.representationImageData_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_representationImageData (_ inObserver : EBEvent) {
    self.mObserversOf_representationImageData.remove (inObserver)
    if let object = self.propval {
      object.representationImageData_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: selectedPageIndex
  //····················································································································

  private var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  var selectedPageIndex_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.selectedPageIndex_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.mObserversOf_selectedPageIndex.insert (inObserver)
    if let object = self.propval {
      object.selectedPageIndex_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.mObserversOf_selectedPageIndex.remove (inObserver)
    if let object = self.propval {
      object.selectedPageIndex_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: symbolNameAreConsistent
  //····················································································································

  private var mObserversOf_symbolNameAreConsistent = EBWeakEventSet ()

  //····················································································································

  var symbolNameAreConsistent_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.symbolNameAreConsistent_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_symbolNameAreConsistent (_ inObserver : EBEvent) {
    self.mObserversOf_symbolNameAreConsistent.insert (inObserver)
    if let object = self.propval {
      object.symbolNameAreConsistent_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolNameAreConsistent (_ inObserver : EBEvent) {
    self.mObserversOf_symbolNameAreConsistent.remove (inObserver)
    if let object = self.propval {
      object.symbolNameAreConsistent_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: symbolTypeNames
  //····················································································································

  private var mObserversOf_symbolTypeNames = EBWeakEventSet ()

  //····················································································································

  var symbolTypeNames_property_selection : EBSelection <StringArray?> {
    if let model = self.propval {
      switch (model.symbolTypeNames_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_symbolTypeNames (_ inObserver : EBEvent) {
    self.mObserversOf_symbolTypeNames.insert (inObserver)
    if let object = self.propval {
      object.symbolTypeNames_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_symbolTypeNames (_ inObserver : EBEvent) {
    self.mObserversOf_symbolTypeNames.remove (inObserver)
    if let object = self.propval {
      object.symbolTypeNames_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable property: title
  //····················································································································

  private var mObserversOf_title = EBWeakEventSet ()

  //····················································································································

  var title_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.title_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_title (_ inObserver : EBEvent) {
    self.mObserversOf_title.insert (inObserver)
    if let object = self.propval {
      object.title_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_title (_ inObserver : EBEvent) {
    self.mObserversOf_title.remove (inObserver)
    if let object = self.propval {
      object.title_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
