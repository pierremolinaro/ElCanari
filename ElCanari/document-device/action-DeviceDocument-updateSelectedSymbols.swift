//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS REGENERATED BY EASY BINDINGS, ONLY MODIFY IT WITHIN USER ZONES
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extension DeviceDocument {
  @objc func updateSelectedSymbols (_ sender : NSObject?) {
//--- START OF USER ZONE 2
    let selectedSymbols = self.mSymbolController.selectedArray_property.propval
    let fm = FileManager ()
    var messages = [String] ()
    for symbolType in selectedSymbols {
      let pathes = symbolFilePathInLibraries (symbolType.mTypeName)
      if pathes.count == 0 {
        messages.append ("No file in Library for \(symbolType.mTypeName) symbol")
      }else if pathes.count == 1 {
        if let data = fm.contents (atPath: pathes [0]),
           let (_, metadataDictionary, rootObject) = try? loadEasyBindingFile (nil, from: data),
           let symbolRoot = rootObject as? SymbolRoot,
           let version = metadataDictionary [PMSymbolVersion] as? Int {
          if version <= symbolType.mVersion {
            messages.append ("Symbol \(symbolType.mTypeName) is up-to-date.")
          }else{
            let strokeBezierPathes = NSBezierPath ()
            let filledBezierPathes = NSBezierPath ()
            var symbolPins = [SymbolPinTypeInDevice] ()
            symbolRoot.accumulate (
              withUndoManager: self.ebUndoManager,
              strokeBezierPathes: strokeBezierPathes,
              filledBezierPathes: filledBezierPathes,
              symbolPins: &symbolPins
            )
            symbolRoot.removeRecursivelyAllRelationsShips ()
          //-- Set properties
            symbolType.mVersion = version
            symbolType.mFileData = data
//            symbolType.mStrokeBezierPath = strokeBezierPathes
//            symbolType.mFilledBezierPath = filledBezierPathes
          //---
            messages.append ("Symbol \(symbolType.mTypeName) has been updated to version \(version).")
          }
        }else{
          messages.append ("Invalid file at path \(pathes [0])")
        }
      }else{ // pathes.count > 1
        messages.append ("Cannot update, several files in Library for \(symbolType.mTypeName) symbol:")
        for path in pathes {
          messages.append ("  - \(path)")
        }
      }
    }
    if messages.count > 0 {
      let alert = NSAlert ()
      alert.messageText = "Done."
      alert.informativeText = messages.joined (separator: "\n")
      alert.beginSheetModal (for: self.windowForSheet!)
    }
//--- END OF USER ZONE 2
  }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
