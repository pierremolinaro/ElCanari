//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_SymbolPinInstanceInDevice 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_SymbolPinInstanceInDevice : ReadOnlyAbstractObjectProperty <SymbolPinInstanceInDevice> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : SymbolPinInstanceInDevice?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
 //     oldValue.pinName_property.removeEBObserversFrom (&self.mObserversOf_pinName) // Transient property
      oldValue.pinName_property.removeEBObserver (self.pinName_property) // Transient property
 //     oldValue.symbolName_property.removeEBObserversFrom (&self.mObserversOf_symbolName) // Transient property
      oldValue.symbolName_property.removeEBObserver (self.symbolName_property) // Transient property
 //     oldValue.pinQualifiedName_property.removeEBObserversFrom (&self.mObserversOf_pinQualifiedName) // Transient property
      oldValue.pinQualifiedName_property.removeEBObserver (self.pinQualifiedName_property) // Transient property
 //     oldValue.isConnected_property.removeEBObserversFrom (&self.mObserversOf_isConnected) // Transient property
      oldValue.isConnected_property.removeEBObserver (self.isConnected_property) // Transient property
 //     oldValue.numberShape_property.removeEBObserversFrom (&self.mObserversOf_numberShape) // Transient property
      oldValue.numberShape_property.removeEBObserver (self.numberShape_property) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
  //    newValue.pinName_property.addEBObserversFrom (&self.mObserversOf_pinName) // Transient property
      newValue.pinName_property.addEBObserver (self.pinName_property) // Transient property
  //    newValue.symbolName_property.addEBObserversFrom (&self.mObserversOf_symbolName) // Transient property
      newValue.symbolName_property.addEBObserver (self.symbolName_property) // Transient property
  //    newValue.pinQualifiedName_property.addEBObserversFrom (&self.mObserversOf_pinQualifiedName) // Transient property
      newValue.pinQualifiedName_property.addEBObserver (self.pinQualifiedName_property) // Transient property
  //    newValue.isConnected_property.addEBObserversFrom (&self.mObserversOf_isConnected) // Transient property
      newValue.isConnected_property.addEBObserver (self.isConnected_property) // Transient property
  //    newValue.numberShape_property.addEBObserversFrom (&self.mObserversOf_numberShape) // Transient property
      newValue.numberShape_property.addEBObserver (self.numberShape_property) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'pinName' transient property
  //····················································································································

  final let pinName_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_pinName = EBWeakEventSet ()

  //····················································································································

  final var pinName_property_selection : EBSelection <String?> {
    return self.pinName_property.selection
  }

  //····················································································································

  final func addEBObserverOf_pinName (_ inObserver : EBEvent) {
    self.pinName_property.addEBObserver (inObserver)
/*    self.mObserversOf_pinName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.pinName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_pinName (_ inObserver : EBEvent) {
    self.pinName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_pinName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.pinName_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'symbolName' transient property
  //····················································································································

  final let symbolName_property = EBGenericTransientProperty <String?> ()
//  private final var mObserversOf_symbolName = EBWeakEventSet ()

  //····················································································································

  final var symbolName_property_selection : EBSelection <String?> {
    return self.symbolName_property.selection
  }

  //····················································································································

  final func addEBObserverOf_symbolName (_ inObserver : EBEvent) {
    self.symbolName_property.addEBObserver (inObserver)
/*    self.mObserversOf_symbolName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.symbolName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_symbolName (_ inObserver : EBEvent) {
    self.symbolName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_symbolName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.symbolName_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'pinQualifiedName' transient property
  //····················································································································

  final let pinQualifiedName_property = EBGenericTransientProperty <PinQualifiedNameStruct?> ()
//  private final var mObserversOf_pinQualifiedName = EBWeakEventSet ()

  //····················································································································

  final var pinQualifiedName_property_selection : EBSelection <PinQualifiedNameStruct?> {
    return self.pinQualifiedName_property.selection
  }

  //····················································································································

  final func addEBObserverOf_pinQualifiedName (_ inObserver : EBEvent) {
    self.pinQualifiedName_property.addEBObserver (inObserver)
/*    self.mObserversOf_pinQualifiedName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.pinQualifiedName_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_pinQualifiedName (_ inObserver : EBEvent) {
    self.pinQualifiedName_property.removeEBObserver (inObserver)
/*    self.mObserversOf_pinQualifiedName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.pinQualifiedName_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'isConnected' transient property
  //····················································································································

  final let isConnected_property = EBGenericTransientProperty <Bool?> ()
//  private final var mObserversOf_isConnected = EBWeakEventSet ()

  //····················································································································

  final var isConnected_property_selection : EBSelection <Bool?> {
    return self.isConnected_property.selection
  }

  //····················································································································

  final func addEBObserverOf_isConnected (_ inObserver : EBEvent) {
    self.isConnected_property.addEBObserver (inObserver)
/*    self.mObserversOf_isConnected.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.isConnected_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_isConnected (_ inObserver : EBEvent) {
    self.isConnected_property.removeEBObserver (inObserver)
/*    self.mObserversOf_isConnected.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.isConnected_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   Observers of 'numberShape' transient property
  //····················································································································

  final let numberShape_property = EBGenericTransientProperty <EBShape?> ()
//  private final var mObserversOf_numberShape = EBWeakEventSet ()

  //····················································································································

  final var numberShape_property_selection : EBSelection <EBShape?> {
    return self.numberShape_property.selection
  }

  //····················································································································

  final func addEBObserverOf_numberShape (_ inObserver : EBEvent) {
    self.numberShape_property.addEBObserver (inObserver)
/*    self.mObserversOf_numberShape.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.numberShape_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_numberShape (_ inObserver : EBEvent) {
    self.numberShape_property.removeEBObserver (inObserver)
/*    self.mObserversOf_numberShape.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.numberShape_property.removeEBObserver (inObserver)
    }*/
  }

  //····················································································································
  //   INIT 
  //····················································································································

  override init () {
    super.init ()
  //--- Configure pinName transient property
    self.pinName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.pinName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure symbolName transient property
    self.symbolName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.symbolName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure pinQualifiedName transient property
    self.pinQualifiedName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.pinQualifiedName_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure isConnected transient property
    self.isConnected_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.isConnected_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  //--- Configure numberShape transient property
    self.numberShape_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.numberShape_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject SymbolPinInstanceInDevice
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_SymbolPinInstanceInDevice : ReadOnlyObject_SymbolPinInstanceInDevice {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_SymbolPinInstanceInDevice? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_SymbolPinInstanceInDevice?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : SymbolPinInstanceInDevice? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < SymbolPinInstanceInDevice? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : SymbolPinInstanceInDevice? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_SymbolPinInstanceInDevice
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_SymbolPinInstanceInDevice : ReadOnlyObject_SymbolPinInstanceInDevice {

  //····················································································································
 
  func setProp (_ inValue : SymbolPinInstanceInDevice?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_SymbolPinInstanceInDevice
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_SymbolPinInstanceInDevice : ReadWriteObject_SymbolPinInstanceInDevice {

  //····················································································································

  private var mModel : ReadWriteObject_SymbolPinInstanceInDevice? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_SymbolPinInstanceInDevice?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : SymbolPinInstanceInDevice?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : SymbolPinInstanceInDevice?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < SymbolPinInstanceInDevice? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : SymbolPinInstanceInDevice? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_SymbolPinInstanceInDevice 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_SymbolPinInstanceInDevice : ReadWriteObject_SymbolPinInstanceInDevice, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : SymbolPinInstanceInDevice) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : SymbolPinInstanceInDevice) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : SymbolPinInstanceInDevice) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : SymbolPinInstanceInDevice) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : SymbolPinInstanceInDevice?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < SymbolPinInstanceInDevice? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : SymbolPinInstanceInDevice?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : SymbolPinInstanceInDevice? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

