//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(DeviceDocument) class DeviceDocument : EBManagedDocument {

  //····················································································································
  //   Array controller: mPackageController
  //····················································································································

  var mPackageController = ArrayController_DeviceDocument_mPackageController ()

  //····················································································································
  //   Array controller: mDocumentationController
  //····················································································································

  var mDocumentationController = ArrayController_DeviceDocument_mDocumentationController ()

  //····················································································································
  //   Array controller: mSymbolDisplayController
  //····················································································································

  var mSymbolDisplayController = ArrayController_DeviceDocument_mSymbolDisplayController ()

  //····················································································································
  //   Selection controller: mSymbolInstanceSelection
  //····················································································································

  var mSymbolInstanceSelection = SelectionController_DeviceDocument_mSymbolInstanceSelection ()

  //····················································································································
  //   Array controller: mPackageDisplayController
  //····················································································································

  var mPackageDisplayController = ArrayController_DeviceDocument_mPackageDisplayController ()

  //····················································································································
  //   Array controller: mSymbolController
  //····················································································································

  var mSymbolController = ArrayController_DeviceDocument_mSymbolController ()

  //····················································································································
  //   Transient property: documentFilePath
  //····················································································································

  var documentFilePath_property = EBTransientProperty_String ()

  //····················································································································

  var documentFilePath_property_selection : EBSelection <String> {
    return self.documentFilePath_property.prop
  }

  //····················································································································

  var documentFilePath : String? {
    switch self.documentFilePath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mStatusMessage
  //····················································································································

  var mStatusMessage_property = EBTransientProperty_String ()

  //····················································································································

  var mStatusMessage_property_selection : EBSelection <String> {
    return self.mStatusMessage_property.prop
  }

  //····················································································································

  var mStatusMessage : String? {
    switch self.mStatusMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mMetadataStatus
  //····················································································································

  var mMetadataStatus_property = EBTransientProperty_MetadataStatus ()

  //····················································································································

  var mMetadataStatus_property_selection : EBSelection <MetadataStatus> {
    return self.mMetadataStatus_property.prop
  }

  //····················································································································

  var mMetadataStatus : MetadataStatus? {
    switch self.mMetadataStatus_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: assignmentInhibitionMessage
  //····················································································································

  var assignmentInhibitionMessage_property = EBTransientProperty_String ()

  //····················································································································

  var assignmentInhibitionMessage_property_selection : EBSelection <String> {
    return self.assignmentInhibitionMessage_property.prop
  }

  //····················································································································

  var assignmentInhibitionMessage : String? {
    switch self.assignmentInhibitionMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mStatusImage
  //····················································································································

  var mStatusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  var mStatusImage_property_selection : EBSelection <NSImage> {
    return self.mStatusImage_property.prop
  }

  //····················································································································

  var mStatusImage : NSImage? {
    switch self.mStatusImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }


  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var mAddPackageFromLibraryButton : EBButton?
  @IBOutlet var mAddSymbolFromLibraryButton : EBButton?
  @IBOutlet var mAddSymbolInstancePullDownButton : AddSymbolInstancePullDownButton?
  @IBOutlet var mAssignmentPageView : CanariViewWithKeyView?
  @IBOutlet var mAssignmentSplitView : NSSplitView?
  @IBOutlet var mCommentTextView : EBTextView?
  @IBOutlet var mComposedPackageView : EBView?
  @IBOutlet var mComposedSymbolView : EBView?
  @IBOutlet var mCopyImageButton : EBButton?
  @IBOutlet var mDescriptionPageView : CanariViewWithKeyView?
  @IBOutlet var mDocumentationTableView : DeviceDocumentationTableView?
  @IBOutlet var mEditSelectedPackagesButton : EBButton?
  @IBOutlet var mEditSelectedSymbolsButton : EBButton?
  @IBOutlet var mExportSelectedPackagesButton : EBButton?
  @IBOutlet var mExportSelectedSymbolsButton : EBButton?
  @IBOutlet var mInconsistentPackagePadNameSetsMessageScrollView : NSScrollView?
  @IBOutlet var mInconsistentPackagePadNameSetsMessageTextView : EBTextObserverView?
  @IBOutlet var mInconsistentPadNameSetTextField : EBTextObserverField?
  @IBOutlet var mInconsistentSymbolNameMessageScrollView : NSScrollView?
  @IBOutlet var mInconsistentSymbolNameMessageTextView : EBTextObserverView?
  @IBOutlet var mInfosPageView : CanariViewWithKeyView?
  @IBOutlet var mIssueTextView : EBTextObserverView?
  @IBOutlet var mLibraryPageView : CanariViewWithKeyView?
  @IBOutlet var mMasterView : NSView?
  @IBOutlet var mPackageBackPadsColorWell : EBColorWell?
  @IBOutlet var mPackageDisplayHorizontalFlipSwitch : EBSwitch?
  @IBOutlet var mPackageDisplayVerticalFlipSwitch : EBSwitch?
  @IBOutlet var mPackageFrontPadsColorWell : EBColorWell?
  @IBOutlet var mPackageNumbersColorWell : EBColorWell?
  @IBOutlet var mPackagePageView : CanariViewWithKeyView?
  @IBOutlet var mPackageTableView : EBTableView?
  @IBOutlet var mPackagesColorWell : EBColorWell?
  @IBOutlet var mPageSegmentedControl : CanariSegmentedControl?
  @IBOutlet var mPasteImageButton : EBButton?
  @IBOutlet var mPrefixTextField : EBTextField?
  @IBOutlet var mRemoveImageButton : EBButton?
  @IBOutlet var mRemoveSelectedDocButton : EBButton?
  @IBOutlet var mRepresentationImageView : DeviceDroppableImageView?
  @IBOutlet var mResetSelectedPackageVersionButton : EBButton?
  @IBOutlet var mResetSelectedSymbolVersionButton : EBButton?
  @IBOutlet var mResetSymbolAndPackagesVersionButton : EBButton?
  @IBOutlet var mResetVersionButton : EBButton?
  @IBOutlet var mSaveDocButton : EBButton?
  @IBOutlet var mShowDocButton : EBButton?
  @IBOutlet var mShowPackageBackPadsSwitch : EBSwitch?
  @IBOutlet var mShowPackageFrontPadsSwitch : EBSwitch?
  @IBOutlet var mShowPackagePadNumbersSwitch : EBSwitch?
  @IBOutlet var mShowPackagesSwitch : EBSwitch?
  @IBOutlet var mSignatureTextField : CanariSignatureField?
  @IBOutlet var mStatusImageViewInToolbar : EBImageObserverView?
  @IBOutlet var mSymbolDisplayHorizontalFlipSwitch : EBSwitch?
  @IBOutlet var mSymbolDisplayVerticalFlipSwitch : EBSwitch?
  @IBOutlet var mSymbolErrorMessageTitleTextField : NSTextField?
  @IBOutlet var mSymbolNameTextField : EBTextField?
  @IBOutlet var mSymbolPageView : CanariViewWithKeyView?
  @IBOutlet var mSymbolTableView : EBTableView?
  @IBOutlet var mSymbolTypeTextField : EBTextObserverField?
  @IBOutlet var mTitleTextField : EBTextField?
  @IBOutlet var mUpdateSelectedPackagesButton : EBButton?
  @IBOutlet var mUpdateSelectedSymbolsButton : EBButton?
  @IBOutlet var mUpdateSymbolAndPackagesButton : EBButton?
  @IBOutlet var mVersionField : CanariVersionField?

  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

  var mController_mCopyImageButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mRemoveImageButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mRemoveSelectedDocButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mShowDocButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mSaveDocButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mAddSymbolInstancePullDownButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mInconsistentSymbolNameMessageScrollView_hidden : MultipleBindingController_hidden? = nil
  var mController_mSymbolErrorMessageTitleTextField_hidden : MultipleBindingController_hidden? = nil
  var mController_mInconsistentPackagePadNameSetsMessageScrollView_hidden : MultipleBindingController_hidden? = nil
  var mController_mResetSymbolAndPackagesVersionButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mUpdateSymbolAndPackagesButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mResetSelectedSymbolVersionButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mEditSelectedSymbolsButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mExportSelectedSymbolsButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mUpdateSelectedSymbolsButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mResetSelectedPackageVersionButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mEditSelectedPackagesButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mExportSelectedPackagesButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mUpdateSelectedPackagesButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mInconsistentPadNameSetTextField_hidden : MultipleBindingController_hidden? = nil
  var mController_mAssignmentSplitView_hidden : MultipleBindingController_hidden? = nil

  //····················································································································
  //    Document file path
  //····················································································································
  // Cette méthode est appelée après tout enregistrement, qu'il y ait changement de nom ou pas.

  override var fileModificationDate : Date? {
    get {
      return super.fileModificationDate
    }
    set{
      super.fileModificationDate = newValue
      self.documentFilePath_property.postEvent ()
    }
  }

  //····················································································································

  func computeTransient_documentFilePath () -> String {
    var documentFilePath = ""
    if let url = self.fileURL {
      documentFilePath = url.path
    }
    return documentFilePath
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
  //--- Array controller property: mPackageController
    self.mPackageController.addExplorer (name: "mPackageController", y:&y, view:view)
  //--- Array controller property: mDocumentationController
    self.mDocumentationController.addExplorer (name: "mDocumentationController", y:&y, view:view)
  //--- Array controller property: mSymbolDisplayController
    self.mSymbolDisplayController.addExplorer (name: "mSymbolDisplayController", y:&y, view:view)
  //--- Selection controller property: mSymbolInstanceSelection
    self.mSymbolInstanceSelection.addExplorer (name: "mSymbolInstanceSelection", y:&y, view:view)
  //--- Array controller property: mPackageDisplayController
    self.mPackageDisplayController.addExplorer (name: "mPackageDisplayController", y:&y, view:view)
  //--- Array controller property: mSymbolController
    self.mSymbolController.addExplorer (name: "mSymbolController", y:&y, view:view)
  //---
    super.populateExplorerWindow (&y, view:view)
  }

  //····················································································································
  //    windowNibName
  //····················································································································

  override var windowNibName : NSNib.Name {
    return NSNib.Name ("DeviceDocument")
  }
  
  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override func rootEntityClassName () -> String {
    return "DeviceRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  var rootObject : DeviceRoot { return mRootObject as! DeviceRoot }

  //····················································································································
  //    windowControllerDidLoadNib
  //····················································································································

  override func windowControllerDidLoadNib (_ aController: NSWindowController) {
    super.windowControllerDidLoadNib (aController)
  //--------------------------- Outlet checking
    if let outlet : Any = self.mAddPackageFromLibraryButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mAddPackageFromLibraryButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mAddPackageFromLibraryButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mAddSymbolFromLibraryButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mAddSymbolFromLibraryButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mAddSymbolFromLibraryButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mAddSymbolInstancePullDownButton {
      if !(outlet is AddSymbolInstancePullDownButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mAddSymbolInstancePullDownButton' outlet is not an instance of 'AddSymbolInstancePullDownButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mAddSymbolInstancePullDownButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mAssignmentPageView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mAssignmentPageView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mAssignmentPageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mAssignmentSplitView {
      if !(outlet is NSSplitView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mAssignmentSplitView' outlet is not an instance of 'NSSplitView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mAssignmentSplitView' outlet is nil"
      )
    }
    if let outlet : Any = self.mCommentTextView {
      if !(outlet is EBTextView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mCommentTextView' outlet is not an instance of 'EBTextView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mCommentTextView' outlet is nil"
      )
    }
    if let outlet : Any = self.mComposedPackageView {
      if !(outlet is EBView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mComposedPackageView' outlet is not an instance of 'EBView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mComposedPackageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mComposedSymbolView {
      if !(outlet is EBView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mComposedSymbolView' outlet is not an instance of 'EBView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mComposedSymbolView' outlet is nil"
      )
    }
    if let outlet : Any = self.mCopyImageButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mCopyImageButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mCopyImageButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mDescriptionPageView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mDescriptionPageView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mDescriptionPageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mDocumentationTableView {
      if !(outlet is DeviceDocumentationTableView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mDocumentationTableView' outlet is not an instance of 'DeviceDocumentationTableView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mDocumentationTableView' outlet is nil"
      )
    }
    if let outlet : Any = self.mEditSelectedPackagesButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mEditSelectedPackagesButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mEditSelectedPackagesButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mEditSelectedSymbolsButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mEditSelectedSymbolsButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mEditSelectedSymbolsButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mExportSelectedPackagesButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mExportSelectedPackagesButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mExportSelectedPackagesButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mExportSelectedSymbolsButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mExportSelectedSymbolsButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mExportSelectedSymbolsButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mInconsistentPackagePadNameSetsMessageScrollView {
      if !(outlet is NSScrollView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mInconsistentPackagePadNameSetsMessageScrollView' outlet is not an instance of 'NSScrollView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mInconsistentPackagePadNameSetsMessageScrollView' outlet is nil"
      )
    }
    if let outlet : Any = self.mInconsistentPackagePadNameSetsMessageTextView {
      if !(outlet is EBTextObserverView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mInconsistentPackagePadNameSetsMessageTextView' outlet is not an instance of 'EBTextObserverView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mInconsistentPackagePadNameSetsMessageTextView' outlet is nil"
      )
    }
    if let outlet : Any = self.mInconsistentPadNameSetTextField {
      if !(outlet is EBTextObserverField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mInconsistentPadNameSetTextField' outlet is not an instance of 'EBTextObserverField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mInconsistentPadNameSetTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mInconsistentSymbolNameMessageScrollView {
      if !(outlet is NSScrollView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mInconsistentSymbolNameMessageScrollView' outlet is not an instance of 'NSScrollView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mInconsistentSymbolNameMessageScrollView' outlet is nil"
      )
    }
    if let outlet : Any = self.mInconsistentSymbolNameMessageTextView {
      if !(outlet is EBTextObserverView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mInconsistentSymbolNameMessageTextView' outlet is not an instance of 'EBTextObserverView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mInconsistentSymbolNameMessageTextView' outlet is nil"
      )
    }
    if let outlet : Any = self.mInfosPageView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mInfosPageView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mInfosPageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mIssueTextView {
      if !(outlet is EBTextObserverView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mIssueTextView' outlet is not an instance of 'EBTextObserverView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mIssueTextView' outlet is nil"
      )
    }
    if let outlet : Any = self.mLibraryPageView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mLibraryPageView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mLibraryPageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mMasterView {
      if !(outlet is NSView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mMasterView' outlet is not an instance of 'NSView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mMasterView' outlet is nil"
      )
    }
    if let outlet : Any = self.mPackageBackPadsColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPackageBackPadsColorWell' outlet is not an instance of 'EBColorWell'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPackageBackPadsColorWell' outlet is nil"
      )
    }
    if let outlet : Any = self.mPackageDisplayHorizontalFlipSwitch {
      if !(outlet is EBSwitch) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPackageDisplayHorizontalFlipSwitch' outlet is not an instance of 'EBSwitch'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPackageDisplayHorizontalFlipSwitch' outlet is nil"
      )
    }
    if let outlet : Any = self.mPackageDisplayVerticalFlipSwitch {
      if !(outlet is EBSwitch) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPackageDisplayVerticalFlipSwitch' outlet is not an instance of 'EBSwitch'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPackageDisplayVerticalFlipSwitch' outlet is nil"
      )
    }
    if let outlet : Any = self.mPackageFrontPadsColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPackageFrontPadsColorWell' outlet is not an instance of 'EBColorWell'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPackageFrontPadsColorWell' outlet is nil"
      )
    }
    if let outlet : Any = self.mPackageNumbersColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPackageNumbersColorWell' outlet is not an instance of 'EBColorWell'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPackageNumbersColorWell' outlet is nil"
      )
    }
    if let outlet : Any = self.mPackagePageView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPackagePageView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPackagePageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mPackageTableView {
      if !(outlet is EBTableView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPackageTableView' outlet is not an instance of 'EBTableView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPackageTableView' outlet is nil"
      )
    }
    if let outlet : Any = self.mPackagesColorWell {
      if !(outlet is EBColorWell) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPackagesColorWell' outlet is not an instance of 'EBColorWell'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPackagesColorWell' outlet is nil"
      )
    }
    if let outlet : Any = self.mPageSegmentedControl {
      if !(outlet is CanariSegmentedControl) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPageSegmentedControl' outlet is not an instance of 'CanariSegmentedControl'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPageSegmentedControl' outlet is nil"
      )
    }
    if let outlet : Any = self.mPasteImageButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPasteImageButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPasteImageButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mPrefixTextField {
      if !(outlet is EBTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPrefixTextField' outlet is not an instance of 'EBTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPrefixTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mRemoveImageButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mRemoveImageButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mRemoveImageButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mRemoveSelectedDocButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mRemoveSelectedDocButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mRemoveSelectedDocButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mRepresentationImageView {
      if !(outlet is DeviceDroppableImageView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mRepresentationImageView' outlet is not an instance of 'DeviceDroppableImageView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mRepresentationImageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mResetSelectedPackageVersionButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mResetSelectedPackageVersionButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mResetSelectedPackageVersionButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mResetSelectedSymbolVersionButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mResetSelectedSymbolVersionButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mResetSelectedSymbolVersionButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mResetSymbolAndPackagesVersionButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mResetSymbolAndPackagesVersionButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mResetSymbolAndPackagesVersionButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mResetVersionButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mResetVersionButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mResetVersionButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mSaveDocButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSaveDocButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSaveDocButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mShowDocButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mShowDocButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mShowDocButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mShowPackageBackPadsSwitch {
      if !(outlet is EBSwitch) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mShowPackageBackPadsSwitch' outlet is not an instance of 'EBSwitch'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mShowPackageBackPadsSwitch' outlet is nil"
      )
    }
    if let outlet : Any = self.mShowPackageFrontPadsSwitch {
      if !(outlet is EBSwitch) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mShowPackageFrontPadsSwitch' outlet is not an instance of 'EBSwitch'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mShowPackageFrontPadsSwitch' outlet is nil"
      )
    }
    if let outlet : Any = self.mShowPackagePadNumbersSwitch {
      if !(outlet is EBSwitch) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mShowPackagePadNumbersSwitch' outlet is not an instance of 'EBSwitch'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mShowPackagePadNumbersSwitch' outlet is nil"
      )
    }
    if let outlet : Any = self.mShowPackagesSwitch {
      if !(outlet is EBSwitch) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mShowPackagesSwitch' outlet is not an instance of 'EBSwitch'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mShowPackagesSwitch' outlet is nil"
      )
    }
    if let outlet : Any = self.mSignatureTextField {
      if !(outlet is CanariSignatureField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSignatureTextField' outlet is not an instance of 'CanariSignatureField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSignatureTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mStatusImageViewInToolbar {
      if !(outlet is EBImageObserverView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mStatusImageViewInToolbar' outlet is not an instance of 'EBImageObserverView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mStatusImageViewInToolbar' outlet is nil"
      )
    }
    if let outlet : Any = self.mSymbolDisplayHorizontalFlipSwitch {
      if !(outlet is EBSwitch) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSymbolDisplayHorizontalFlipSwitch' outlet is not an instance of 'EBSwitch'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSymbolDisplayHorizontalFlipSwitch' outlet is nil"
      )
    }
    if let outlet : Any = self.mSymbolDisplayVerticalFlipSwitch {
      if !(outlet is EBSwitch) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSymbolDisplayVerticalFlipSwitch' outlet is not an instance of 'EBSwitch'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSymbolDisplayVerticalFlipSwitch' outlet is nil"
      )
    }
    if let outlet : Any = self.mSymbolErrorMessageTitleTextField {
      if !(outlet is NSTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSymbolErrorMessageTitleTextField' outlet is not an instance of 'NSTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSymbolErrorMessageTitleTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mSymbolNameTextField {
      if !(outlet is EBTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSymbolNameTextField' outlet is not an instance of 'EBTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSymbolNameTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mSymbolPageView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSymbolPageView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSymbolPageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mSymbolTableView {
      if !(outlet is EBTableView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSymbolTableView' outlet is not an instance of 'EBTableView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSymbolTableView' outlet is nil"
      )
    }
    if let outlet : Any = self.mSymbolTypeTextField {
      if !(outlet is EBTextObserverField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSymbolTypeTextField' outlet is not an instance of 'EBTextObserverField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSymbolTypeTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mTitleTextField {
      if !(outlet is EBTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mTitleTextField' outlet is not an instance of 'EBTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mTitleTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mUpdateSelectedPackagesButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mUpdateSelectedPackagesButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mUpdateSelectedPackagesButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mUpdateSelectedSymbolsButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mUpdateSelectedSymbolsButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mUpdateSelectedSymbolsButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mUpdateSymbolAndPackagesButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mUpdateSymbolAndPackagesButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mUpdateSymbolAndPackagesButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mVersionField {
      if !(outlet is CanariVersionField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mVersionField' outlet is not an instance of 'CanariVersionField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mVersionField' outlet is nil"
      )
    }
  //--- Array controller property: mPackageController
    self.mPackageController.bind_model (self.rootObject.mPackages_property)
  //--- Array controller property: mDocumentationController
    self.mDocumentationController.bind_model (self.rootObject.mDocs_property)
  //--- Array controller property: mSymbolDisplayController
    self.mSymbolDisplayController.bind_model (self.rootObject.mSymbolInstances_property)
  //--- Selection controller property: mSymbolInstanceSelection
    self.mSymbolInstanceSelection.bind_selection (model: self.mSymbolDisplayController.selectedArray_property, file: #file, line: #line)
  //--- Array controller property: mPackageDisplayController
    self.mPackageDisplayController.bind_model (self.rootObject.mPackages_property)
  //--- Array controller property: mSymbolController
    self.mSymbolController.bind_model (self.rootObject.mSymbolTypes_property)
  //--- Atomic property: mStatusMessage
    self.mStatusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceDocument_mStatusMessage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.mStatusMessage_property)
  //--- Atomic property: mMetadataStatus
    self.mMetadataStatus_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceDocument_mMetadataStatus (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.mMetadataStatus_property)
  //--- Atomic property: assignmentInhibitionMessage
    self.assignmentInhibitionMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.rootObject.inconsistentPackagePadNameSetsMessage_property_selection.kind ()
        kind &= unwSelf.rootObject.inconsistentSymbolNameSetMessage_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.rootObject.inconsistentPackagePadNameSetsMessage_property_selection, unwSelf.rootObject.inconsistentSymbolNameSetMessage_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_DeviceDocument_assignmentInhibitionMessage (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.inconsistentPackagePadNameSetsMessage_property.addEBObserver (self.assignmentInhibitionMessage_property)
    self.rootObject.inconsistentSymbolNameSetMessage_property.addEBObserver (self.assignmentInhibitionMessage_property)
  //--- Atomic property: mStatusImage
    self.mStatusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceDocument_mStatusImage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.mStatusImage_property)
    self.mDocumentationController.bind_tableView (self.mDocumentationTableView, file: #file, line: #line)
    self.mSymbolController.bind_tableView (self.mSymbolTableView, file: #file, line: #line)
    self.mPackageController.bind_tableView (self.mPackageTableView, file: #file, line: #line)
    self.mSymbolDisplayController.bind_ebView (self.mComposedSymbolView)
    self.mPackageDisplayController.bind_ebView (self.mComposedPackageView)
  //--------------------------- Install regular bindings
    self.mPageSegmentedControl?.bind_selectedPage (self.rootObject.selectedPageIndex_property, file: #file, line: #line)
    self.mSignatureTextField?.bind_signature (self.signatureObserver_property, file: #file, line: #line)
    self.mVersionField?.bind_version (self.versionObserver_property, file: #file, line: #line)
    self.mVersionField?.bind_versionShouldChange (self.versionShouldChangeObserver_property, file: #file, line: #line)
    self.mStatusImageViewInToolbar?.bind_image (self.mStatusImage_property, file: #file, line: #line)
    self.mStatusImageViewInToolbar?.bind_tooltip (self.mStatusMessage_property, file: #file, line: #line)
    self.mIssueTextView?.bind_valueObserver (self.mStatusMessage_property, file: #file, line: #line)
    self.mTitleTextField?.bind_value (self.rootObject.title_property, file: #file, line: #line, sendContinously:true)
    self.mRepresentationImageView?.bind_imageData (self.rootObject.representationImageData_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_horizontalFlip (self.rootObject.mSymbolDisplayHorizontalFlip_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_verticalFlip (self.rootObject.mSymbolDisplayVerticalFlip_property, file: #file, line: #line)
    self.mComposedSymbolView?.bind_zoom (self.rootObject.mSymbolDisplayZoom_property, file: #file, line: #line)
    self.mSymbolDisplayHorizontalFlipSwitch?.bind_value (self.rootObject.mSymbolDisplayHorizontalFlip_property, file: #file, line: #line)
    self.mSymbolDisplayVerticalFlipSwitch?.bind_value (self.rootObject.mSymbolDisplayVerticalFlip_property, file: #file, line: #line)
    self.mAddSymbolInstancePullDownButton?.bind_symbolTypeNames (self.rootObject.symbolTypeNames_property, file: #file, line: #line)
    self.mInconsistentSymbolNameMessageTextView?.bind_valueObserver (self.rootObject.inconsistentSymbolNameSetMessage_property, file: #file, line: #line)
    self.mSymbolTypeTextField?.bind_valueObserver (self.mSymbolInstanceSelection.symbolTypeName_property, file: #file, line: #line)
    self.mSymbolNameTextField?.bind_value (self.mSymbolInstanceSelection.mInstanceName_property, file: #file, line: #line, sendContinously:true)
    self.mComposedPackageView?.bind_horizontalFlip (self.rootObject.mPackageDisplayHorizontalFlip_property, file: #file, line: #line)
    self.mComposedPackageView?.bind_verticalFlip (self.rootObject.mPackageDisplayVerticalFlip_property, file: #file, line: #line)
    self.mComposedPackageView?.bind_zoom (self.rootObject.mPackageDisplayZoom_property, file: #file, line: #line)
    self.mPackageDisplayHorizontalFlipSwitch?.bind_value (self.rootObject.mPackageDisplayHorizontalFlip_property, file: #file, line: #line)
    self.mPackageDisplayVerticalFlipSwitch?.bind_value (self.rootObject.mPackageDisplayVerticalFlip_property, file: #file, line: #line)
    self.mShowPackagesSwitch?.bind_value (self.rootObject.mShowPackages_property, file: #file, line: #line)
    self.mPackagesColorWell?.bind_color (g_Preferences!.packageColor_property, file: #file, line: #line, sendContinously:false)
    self.mShowPackagePadNumbersSwitch?.bind_value (self.rootObject.mShowPackagePadNumbers_property, file: #file, line: #line)
    self.mPackageNumbersColorWell?.bind_color (g_Preferences!.padNumberColor_property, file: #file, line: #line, sendContinously:false)
    self.mShowPackageFrontPadsSwitch?.bind_value (self.rootObject.mShowPackageFrontPads_property, file: #file, line: #line)
    self.mPackageFrontPadsColorWell?.bind_color (g_Preferences!.frontSidePadColor_property, file: #file, line: #line, sendContinously:false)
    self.mShowPackageBackPadsSwitch?.bind_value (self.rootObject.mShowPackageBackPads_property, file: #file, line: #line)
    self.mPackageBackPadsColorWell?.bind_color (g_Preferences!.backSidePadColor_property, file: #file, line: #line, sendContinously:false)
    self.mInconsistentPackagePadNameSetsMessageTextView?.bind_valueObserver (self.rootObject.inconsistentPackagePadNameSetsMessage_property, file: #file, line: #line)
    self.mInconsistentPadNameSetTextField?.bind_valueObserver (self.assignmentInhibitionMessage_property, file: #file, line: #line)
    self.mPrefixTextField?.bind_value (self.rootObject.prefix_property, file: #file, line: #line, sendContinously:true)
    self.mCommentTextView?.bind_value (self.rootObject.comments_property, file: #file, line: #line)
  //--------------------------- Install multiple bindings
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return self.rootObject.imageIsValid_property_selection
        },
        outlet: self.mCopyImageButton
      )
      self.rootObject.imageIsValid_property.addEBObserver (controller)
      self.mController_mCopyImageButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return self.rootObject.imageIsValid_property_selection
        },
        outlet: self.mRemoveImageButton
      )
      self.rootObject.imageIsValid_property.addEBObserver (controller)
      self.mController_mRemoveImageButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mDocumentationController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mRemoveSelectedDocButton
      )
      self.mDocumentationController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mRemoveSelectedDocButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mDocumentationController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mShowDocButton
      )
      self.mDocumentationController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mShowDocButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mDocumentationController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mSaveDocButton
      )
      self.mDocumentationController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mSaveDocButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.rootObject.mSymbolTypes_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mAddSymbolInstancePullDownButton
      )
      self.rootObject.mSymbolTypes_property.count_property.addEBObserver (controller)
      self.mController_mAddSymbolInstancePullDownButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return self.rootObject.symbolNameAreConsistent_property_selection
        },
        outlet: self.mInconsistentSymbolNameMessageScrollView
      )
      self.rootObject.symbolNameAreConsistent_property.addEBObserver (controller)
      self.mController_mInconsistentSymbolNameMessageScrollView_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return self.rootObject.symbolNameAreConsistent_property_selection
        },
        outlet: self.mSymbolErrorMessageTitleTextField
      )
      self.rootObject.symbolNameAreConsistent_property.addEBObserver (controller)
      self.mController_mSymbolErrorMessageTitleTextField_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return self.rootObject.packagePadNameSetsAreConsistent_property_selection
        },
        outlet: self.mInconsistentPackagePadNameSetsMessageScrollView
      )
      self.rootObject.packagePadNameSetsAreConsistent_property.addEBObserver (controller)
      self.mController_mInconsistentPackagePadNameSetsMessageScrollView_hidden = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return ((self.rootObject.mPackages_property.count_property_selection > EBSelection.single (0)) && (self.rootObject.mSymbolTypes_property.count_property_selection > EBSelection.single (0)))
        },
        outlet: self.mResetSymbolAndPackagesVersionButton
      )
      self.rootObject.mPackages_property.count_property.addEBObserver (controller)
      self.rootObject.mSymbolTypes_property.count_property.addEBObserver (controller)
      self.mController_mResetSymbolAndPackagesVersionButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return ((self.rootObject.mPackages_property.count_property_selection > EBSelection.single (0)) && (self.rootObject.mSymbolTypes_property.count_property_selection > EBSelection.single (0)))
        },
        outlet: self.mUpdateSymbolAndPackagesButton
      )
      self.rootObject.mPackages_property.count_property.addEBObserver (controller)
      self.rootObject.mSymbolTypes_property.count_property.addEBObserver (controller)
      self.mController_mUpdateSymbolAndPackagesButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mSymbolController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mResetSelectedSymbolVersionButton
      )
      self.mSymbolController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mResetSelectedSymbolVersionButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mSymbolController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mEditSelectedSymbolsButton
      )
      self.mSymbolController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mEditSelectedSymbolsButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mSymbolController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mExportSelectedSymbolsButton
      )
      self.mSymbolController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mExportSelectedSymbolsButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mSymbolController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mUpdateSelectedSymbolsButton
      )
      self.mSymbolController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mUpdateSelectedSymbolsButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mPackageController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mResetSelectedPackageVersionButton
      )
      self.mPackageController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mResetSelectedPackageVersionButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mPackageController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mEditSelectedPackagesButton
      )
      self.mPackageController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mEditSelectedPackagesButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mPackageController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mExportSelectedPackagesButton
      )
      self.mPackageController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mExportSelectedPackagesButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mPackageController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mUpdateSelectedPackagesButton
      )
      self.mPackageController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mUpdateSelectedPackagesButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return (self.rootObject.packagePadNameSetsAreConsistent_property_selection && self.rootObject.symbolNameAreConsistent_property_selection)
        },
        outlet: self.mInconsistentPadNameSetTextField
      )
      self.rootObject.packagePadNameSetsAreConsistent_property.addEBObserver (controller)
      self.rootObject.symbolNameAreConsistent_property.addEBObserver (controller)
      self.mController_mInconsistentPadNameSetTextField_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return (!self.rootObject.packagePadNameSetsAreConsistent_property_selection || !self.rootObject.symbolNameAreConsistent_property_selection)
        },
        outlet: self.mAssignmentSplitView
      )
      self.rootObject.packagePadNameSetsAreConsistent_property.addEBObserver (controller)
      self.rootObject.symbolNameAreConsistent_property.addEBObserver (controller)
      self.mController_mAssignmentSplitView_hidden = controller
    }
  //--------------------------- Set targets / actions
    self.mPasteImageButton?.target = self
    self.mPasteImageButton?.action = #selector (DeviceDocument.pasteImageAction (_:))
    self.mCopyImageButton?.target = self
    self.mCopyImageButton?.action = #selector (DeviceDocument.copyImageAction (_:))
    self.mRemoveImageButton?.target = self
    self.mRemoveImageButton?.action = #selector (DeviceDocument.removeImageAction (_:))
    self.mRemoveSelectedDocButton?.target = mDocumentationController
    self.mRemoveSelectedDocButton?.action = #selector (ArrayController_DeviceDocument_mDocumentationController.remove (_:))
    self.mShowDocButton?.target = self
    self.mShowDocButton?.action = #selector (DeviceDocument.showDocAction (_:))
    self.mSaveDocButton?.target = self
    self.mSaveDocButton?.action = #selector (DeviceDocument.saveDocAction (_:))
    self.mAddSymbolFromLibraryButton?.target = self
    self.mAddSymbolFromLibraryButton?.action = #selector (DeviceDocument.addSymbolFromLibraryAction (_:))
    self.mAddPackageFromLibraryButton?.target = self
    self.mAddPackageFromLibraryButton?.action = #selector (DeviceDocument.addPackageFromLibraryAction (_:))
    self.mResetSymbolAndPackagesVersionButton?.target = self
    self.mResetSymbolAndPackagesVersionButton?.action = #selector (DeviceDocument.resetSymbolsAndPackagesVersion (_:))
    self.mUpdateSymbolAndPackagesButton?.target = self
    self.mUpdateSymbolAndPackagesButton?.action = #selector (DeviceDocument.updateSymbolsAndPackagesAction (_:))
    self.mResetSelectedSymbolVersionButton?.target = self
    self.mResetSelectedSymbolVersionButton?.action = #selector (DeviceDocument.resetSelectedSymbolVersion (_:))
    self.mEditSelectedSymbolsButton?.target = self
    self.mEditSelectedSymbolsButton?.action = #selector (DeviceDocument.editSelectedSymbols (_:))
    self.mExportSelectedSymbolsButton?.target = self
    self.mExportSelectedSymbolsButton?.action = #selector (DeviceDocument.exportSelectedSymbols (_:))
    self.mUpdateSelectedSymbolsButton?.target = self
    self.mUpdateSelectedSymbolsButton?.action = #selector (DeviceDocument.updateSelectedSymbols (_:))
    self.mResetSelectedPackageVersionButton?.target = self
    self.mResetSelectedPackageVersionButton?.action = #selector (DeviceDocument.resetSelectedPackageVersion (_:))
    self.mEditSelectedPackagesButton?.target = self
    self.mEditSelectedPackagesButton?.action = #selector (DeviceDocument.editSelectedPackages (_:))
    self.mExportSelectedPackagesButton?.target = self
    self.mExportSelectedPackagesButton?.action = #selector (DeviceDocument.exportSelectedPackages (_:))
    self.mUpdateSelectedPackagesButton?.target = self
    self.mUpdateSelectedPackagesButton?.action = #selector (DeviceDocument.updateSelectedPackages (_:))
    self.mResetVersionButton?.target = self
    self.mResetVersionButton?.action = #selector (DeviceDocument.resetVersionAction (_:))
  //--------------------------- Read documentFilePath model 
    self.documentFilePath_property.mReadModelFunction = { [weak self] in
      if let r = self?.computeTransient_documentFilePath () {
        return .single (r)
      }else{
        return .empty
      }
    }

  }

  //····················································································································
  //   removeUserInterface
  //····················································································································

  override func removeUserInterface () {
    super.removeUserInterface ()
  //--------------------------- Unbind regular bindings
    self.mPageSegmentedControl?.unbind_selectedPage ()
    self.mSignatureTextField?.unbind_signature ()
    self.mVersionField?.unbind_version ()
    self.mVersionField?.unbind_versionShouldChange ()
    self.mStatusImageViewInToolbar?.unbind_image ()
    self.mStatusImageViewInToolbar?.unbind_tooltip ()
    self.mIssueTextView?.unbind_valueObserver ()
    self.mTitleTextField?.unbind_value ()
    self.mRepresentationImageView?.unbind_imageData ()
    self.mComposedSymbolView?.unbind_horizontalFlip ()
    self.mComposedSymbolView?.unbind_verticalFlip ()
    self.mComposedSymbolView?.unbind_zoom ()
    self.mSymbolDisplayHorizontalFlipSwitch?.unbind_value ()
    self.mSymbolDisplayVerticalFlipSwitch?.unbind_value ()
    self.mAddSymbolInstancePullDownButton?.unbind_symbolTypeNames ()
    self.mInconsistentSymbolNameMessageTextView?.unbind_valueObserver ()
    self.mSymbolTypeTextField?.unbind_valueObserver ()
    self.mSymbolNameTextField?.unbind_value ()
    self.mComposedPackageView?.unbind_horizontalFlip ()
    self.mComposedPackageView?.unbind_verticalFlip ()
    self.mComposedPackageView?.unbind_zoom ()
    self.mPackageDisplayHorizontalFlipSwitch?.unbind_value ()
    self.mPackageDisplayVerticalFlipSwitch?.unbind_value ()
    self.mShowPackagesSwitch?.unbind_value ()
    self.mPackagesColorWell?.unbind_color ()
    self.mShowPackagePadNumbersSwitch?.unbind_value ()
    self.mPackageNumbersColorWell?.unbind_color ()
    self.mShowPackageFrontPadsSwitch?.unbind_value ()
    self.mPackageFrontPadsColorWell?.unbind_color ()
    self.mShowPackageBackPadsSwitch?.unbind_value ()
    self.mPackageBackPadsColorWell?.unbind_color ()
    self.mInconsistentPackagePadNameSetsMessageTextView?.unbind_valueObserver ()
    self.mInconsistentPadNameSetTextField?.unbind_valueObserver ()
    self.mPrefixTextField?.unbind_value ()
    self.mCommentTextView?.unbind_value ()
  //--------------------------- Unbind multiple bindings
    self.rootObject.imageIsValid_property.removeEBObserver (self.mController_mCopyImageButton_enabled!)
    self.mController_mCopyImageButton_enabled = nil
    self.rootObject.imageIsValid_property.removeEBObserver (self.mController_mRemoveImageButton_enabled!)
    self.mController_mRemoveImageButton_enabled = nil
    self.mDocumentationController.selectedArray_property.count_property.removeEBObserver (self.mController_mRemoveSelectedDocButton_enabled!)
    self.mController_mRemoveSelectedDocButton_enabled = nil
    self.mDocumentationController.selectedArray_property.count_property.removeEBObserver (self.mController_mShowDocButton_enabled!)
    self.mController_mShowDocButton_enabled = nil
    self.mDocumentationController.selectedArray_property.count_property.removeEBObserver (self.mController_mSaveDocButton_enabled!)
    self.mController_mSaveDocButton_enabled = nil
    self.rootObject.mSymbolTypes_property.count_property.removeEBObserver (self.mController_mAddSymbolInstancePullDownButton_enabled!)
    self.mController_mAddSymbolInstancePullDownButton_enabled = nil
    self.rootObject.symbolNameAreConsistent_property.removeEBObserver (self.mController_mInconsistentSymbolNameMessageScrollView_hidden!)
    self.mController_mInconsistentSymbolNameMessageScrollView_hidden = nil
    self.rootObject.symbolNameAreConsistent_property.removeEBObserver (self.mController_mSymbolErrorMessageTitleTextField_hidden!)
    self.mController_mSymbolErrorMessageTitleTextField_hidden = nil
    self.rootObject.packagePadNameSetsAreConsistent_property.removeEBObserver (self.mController_mInconsistentPackagePadNameSetsMessageScrollView_hidden!)
    self.mController_mInconsistentPackagePadNameSetsMessageScrollView_hidden = nil
    self.rootObject.mPackages_property.count_property.removeEBObserver (self.mController_mResetSymbolAndPackagesVersionButton_enabled!)
    self.rootObject.mSymbolTypes_property.count_property.removeEBObserver (self.mController_mResetSymbolAndPackagesVersionButton_enabled!)
    self.mController_mResetSymbolAndPackagesVersionButton_enabled = nil
    self.rootObject.mPackages_property.count_property.removeEBObserver (self.mController_mUpdateSymbolAndPackagesButton_enabled!)
    self.rootObject.mSymbolTypes_property.count_property.removeEBObserver (self.mController_mUpdateSymbolAndPackagesButton_enabled!)
    self.mController_mUpdateSymbolAndPackagesButton_enabled = nil
    self.mSymbolController.selectedArray_property.count_property.removeEBObserver (self.mController_mResetSelectedSymbolVersionButton_enabled!)
    self.mController_mResetSelectedSymbolVersionButton_enabled = nil
    self.mSymbolController.selectedArray_property.count_property.removeEBObserver (self.mController_mEditSelectedSymbolsButton_enabled!)
    self.mController_mEditSelectedSymbolsButton_enabled = nil
    self.mSymbolController.selectedArray_property.count_property.removeEBObserver (self.mController_mExportSelectedSymbolsButton_enabled!)
    self.mController_mExportSelectedSymbolsButton_enabled = nil
    self.mSymbolController.selectedArray_property.count_property.removeEBObserver (self.mController_mUpdateSelectedSymbolsButton_enabled!)
    self.mController_mUpdateSelectedSymbolsButton_enabled = nil
    self.mPackageController.selectedArray_property.count_property.removeEBObserver (self.mController_mResetSelectedPackageVersionButton_enabled!)
    self.mController_mResetSelectedPackageVersionButton_enabled = nil
    self.mPackageController.selectedArray_property.count_property.removeEBObserver (self.mController_mEditSelectedPackagesButton_enabled!)
    self.mController_mEditSelectedPackagesButton_enabled = nil
    self.mPackageController.selectedArray_property.count_property.removeEBObserver (self.mController_mExportSelectedPackagesButton_enabled!)
    self.mController_mExportSelectedPackagesButton_enabled = nil
    self.mPackageController.selectedArray_property.count_property.removeEBObserver (self.mController_mUpdateSelectedPackagesButton_enabled!)
    self.mController_mUpdateSelectedPackagesButton_enabled = nil
    self.rootObject.packagePadNameSetsAreConsistent_property.removeEBObserver (self.mController_mInconsistentPadNameSetTextField_hidden!)
    self.rootObject.symbolNameAreConsistent_property.removeEBObserver (self.mController_mInconsistentPadNameSetTextField_hidden!)
    self.mController_mInconsistentPadNameSetTextField_hidden = nil
    self.rootObject.packagePadNameSetsAreConsistent_property.removeEBObserver (self.mController_mAssignmentSplitView_hidden!)
    self.rootObject.symbolNameAreConsistent_property.removeEBObserver (self.mController_mAssignmentSplitView_hidden!)
    self.mController_mAssignmentSplitView_hidden = nil
  //--------------------------- Unbind array controllers
    self.mDocumentationController.unbind_tableView (self.mDocumentationTableView)
    self.mSymbolController.unbind_tableView (self.mSymbolTableView)
    self.mPackageController.unbind_tableView (self.mPackageTableView)
    self.mSymbolDisplayController.unbind_ebView (self.mComposedSymbolView)
    self.mPackageDisplayController.unbind_ebView (self.mComposedPackageView)
  //--- Array controller property: mPackageController
    self.mPackageController.unbind_model ()
  //--- Array controller property: mDocumentationController
    self.mDocumentationController.unbind_model ()
  //--- Array controller property: mSymbolDisplayController
    self.mSymbolDisplayController.unbind_model ()
  //--- Selection controller property: mSymbolInstanceSelection
    self.mSymbolInstanceSelection.unbind_selection ()
  //--- Array controller property: mPackageDisplayController
    self.mPackageDisplayController.unbind_model ()
  //--- Array controller property: mSymbolController
    self.mSymbolController.unbind_model ()
    self.rootObject.issues_property.removeEBObserver (self.mStatusMessage_property)
    self.rootObject.issues_property.removeEBObserver (self.mMetadataStatus_property)
    self.rootObject.inconsistentPackagePadNameSetsMessage_property.removeEBObserver (self.assignmentInhibitionMessage_property)
    self.rootObject.inconsistentSymbolNameSetMessage_property.removeEBObserver (self.assignmentInhibitionMessage_property)
    self.rootObject.issues_property.removeEBObserver (self.mStatusImage_property)
  //--------------------------- Remove targets / actions
    self.mPasteImageButton?.target = nil
    self.mCopyImageButton?.target = nil
    self.mRemoveImageButton?.target = nil
    self.mRemoveSelectedDocButton?.target = nil
    self.mShowDocButton?.target = nil
    self.mSaveDocButton?.target = nil
    self.mAddSymbolFromLibraryButton?.target = nil
    self.mAddPackageFromLibraryButton?.target = nil
    self.mResetSymbolAndPackagesVersionButton?.target = nil
    self.mUpdateSymbolAndPackagesButton?.target = nil
    self.mResetSelectedSymbolVersionButton?.target = nil
    self.mEditSelectedSymbolsButton?.target = nil
    self.mExportSelectedSymbolsButton?.target = nil
    self.mUpdateSelectedSymbolsButton?.target = nil
    self.mResetSelectedPackageVersionButton?.target = nil
    self.mEditSelectedPackagesButton?.target = nil
    self.mExportSelectedPackagesButton?.target = nil
    self.mUpdateSelectedPackagesButton?.target = nil
    self.mResetVersionButton?.target = nil
  //--------------------------- Clean up outlets
    self.mAddPackageFromLibraryButton?.ebCleanUp ()
    self.mAddSymbolFromLibraryButton?.ebCleanUp ()
    self.mAddSymbolInstancePullDownButton?.ebCleanUp ()
    self.mAssignmentPageView?.ebCleanUp ()
    self.mAssignmentSplitView?.ebCleanUp ()
    self.mCommentTextView?.ebCleanUp ()
    self.mComposedPackageView?.ebCleanUp ()
    self.mComposedSymbolView?.ebCleanUp ()
    self.mCopyImageButton?.ebCleanUp ()
    self.mDescriptionPageView?.ebCleanUp ()
    self.mDocumentationTableView?.ebCleanUp ()
    self.mEditSelectedPackagesButton?.ebCleanUp ()
    self.mEditSelectedSymbolsButton?.ebCleanUp ()
    self.mExportSelectedPackagesButton?.ebCleanUp ()
    self.mExportSelectedSymbolsButton?.ebCleanUp ()
    self.mInconsistentPackagePadNameSetsMessageScrollView?.ebCleanUp ()
    self.mInconsistentPackagePadNameSetsMessageTextView?.ebCleanUp ()
    self.mInconsistentPadNameSetTextField?.ebCleanUp ()
    self.mInconsistentSymbolNameMessageScrollView?.ebCleanUp ()
    self.mInconsistentSymbolNameMessageTextView?.ebCleanUp ()
    self.mInfosPageView?.ebCleanUp ()
    self.mIssueTextView?.ebCleanUp ()
    self.mLibraryPageView?.ebCleanUp ()
    self.mMasterView?.ebCleanUp ()
    self.mPackageBackPadsColorWell?.ebCleanUp ()
    self.mPackageDisplayHorizontalFlipSwitch?.ebCleanUp ()
    self.mPackageDisplayVerticalFlipSwitch?.ebCleanUp ()
    self.mPackageFrontPadsColorWell?.ebCleanUp ()
    self.mPackageNumbersColorWell?.ebCleanUp ()
    self.mPackagePageView?.ebCleanUp ()
    self.mPackageTableView?.ebCleanUp ()
    self.mPackagesColorWell?.ebCleanUp ()
    self.mPageSegmentedControl?.ebCleanUp ()
    self.mPasteImageButton?.ebCleanUp ()
    self.mPrefixTextField?.ebCleanUp ()
    self.mRemoveImageButton?.ebCleanUp ()
    self.mRemoveSelectedDocButton?.ebCleanUp ()
    self.mRepresentationImageView?.ebCleanUp ()
    self.mResetSelectedPackageVersionButton?.ebCleanUp ()
    self.mResetSelectedSymbolVersionButton?.ebCleanUp ()
    self.mResetSymbolAndPackagesVersionButton?.ebCleanUp ()
    self.mResetVersionButton?.ebCleanUp ()
    self.mSaveDocButton?.ebCleanUp ()
    self.mShowDocButton?.ebCleanUp ()
    self.mShowPackageBackPadsSwitch?.ebCleanUp ()
    self.mShowPackageFrontPadsSwitch?.ebCleanUp ()
    self.mShowPackagePadNumbersSwitch?.ebCleanUp ()
    self.mShowPackagesSwitch?.ebCleanUp ()
    self.mSignatureTextField?.ebCleanUp ()
    self.mStatusImageViewInToolbar?.ebCleanUp ()
    self.mSymbolDisplayHorizontalFlipSwitch?.ebCleanUp ()
    self.mSymbolDisplayVerticalFlipSwitch?.ebCleanUp ()
    self.mSymbolErrorMessageTitleTextField?.ebCleanUp ()
    self.mSymbolNameTextField?.ebCleanUp ()
    self.mSymbolPageView?.ebCleanUp ()
    self.mSymbolTableView?.ebCleanUp ()
    self.mSymbolTypeTextField?.ebCleanUp ()
    self.mTitleTextField?.ebCleanUp ()
    self.mUpdateSelectedPackagesButton?.ebCleanUp ()
    self.mUpdateSelectedSymbolsButton?.ebCleanUp ()
    self.mUpdateSymbolAndPackagesButton?.ebCleanUp ()
    self.mVersionField?.ebCleanUp ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

