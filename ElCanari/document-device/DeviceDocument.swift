//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

@objc(DeviceDocument) class DeviceDocument : EBManagedXibDocument {

  //····················································································································
  //   Array controller: packageController
  //····················································································································

  var packageController = Controller_DeviceDocument_packageController ()

  //····················································································································
  //   Array controller: documentationController
  //····················································································································

  var documentationController = Controller_DeviceDocument_documentationController ()

  //····················································································································
  //   Array controller: symbolDisplayController
  //····················································································································

  var symbolDisplayController = Controller_DeviceDocument_symbolDisplayController ()

  //····················································································································
  //   Selection controller: symbolInstanceSelection
  //····················································································································

  var symbolInstanceSelection = SelectionController_DeviceDocument_symbolInstanceSelection ()

  //····················································································································
  //   Array controller: packageDisplayController
  //····················································································································

  var packageDisplayController = Controller_DeviceDocument_packageDisplayController ()

  //····················································································································
  //   Array controller: symbolTypeController
  //····················································································································

  var symbolTypeController = Controller_DeviceDocument_symbolTypeController ()

  //····················································································································
  //   Selection controller: symbolTypeSelection
  //····················································································································

  var symbolTypeSelection = SelectionController_DeviceDocument_symbolTypeSelection ()

  //····················································································································
  //   Transient property: documentFilePath
  //····················································································································

  final let documentFilePath_property = EBTransientProperty_String ()

  //····················································································································

  final var documentFilePath_property_selection : EBSelection <String> {
    return self.documentFilePath_property.selection
  }

  //····················································································································

  final var documentFilePath : String? {
    switch self.documentFilePath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: assignmentInhibitionMessage
  //····················································································································

  final let assignmentInhibitionMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var assignmentInhibitionMessage_property_selection : EBSelection <String> {
    return self.assignmentInhibitionMessage_property.selection
  }

  //····················································································································

  final var assignmentInhibitionMessage : String? {
    switch self.assignmentInhibitionMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: hasUnconnectedPin
  //····················································································································

  final let hasUnconnectedPin_property = EBTransientProperty_Bool ()

  //····················································································································

  final var hasUnconnectedPin_property_selection : EBSelection <Bool> {
    return self.hasUnconnectedPin_property.selection
  }

  //····················································································································

  final var hasUnconnectedPin : Bool? {
    switch self.hasUnconnectedPin_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mStatusMessage
  //····················································································································

  final let mStatusMessage_property = EBTransientProperty_String ()

  //····················································································································

  final var mStatusMessage_property_selection : EBSelection <String> {
    return self.mStatusMessage_property.selection
  }

  //····················································································································

  final var mStatusMessage : String? {
    switch self.mStatusMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mMetadataStatus
  //····················································································································

  final let mMetadataStatus_property = EBTransientProperty_MetadataStatus ()

  //····················································································································

  final var mMetadataStatus_property_selection : EBSelection <MetadataStatus> {
    return self.mMetadataStatus_property.selection
  }

  //····················································································································

  final var mMetadataStatus : MetadataStatus? {
    switch self.mMetadataStatus_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: hasUnconnectedPad
  //····················································································································

  final let hasUnconnectedPad_property = EBTransientProperty_Bool ()

  //····················································································································

  final var hasUnconnectedPad_property_selection : EBSelection <Bool> {
    return self.hasUnconnectedPad_property.selection
  }

  //····················································································································

  final var hasUnconnectedPad : Bool? {
    switch self.hasUnconnectedPad_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: hasAssignedPadProxies
  //····················································································································

  final let hasAssignedPadProxies_property = EBTransientProperty_Bool ()

  //····················································································································

  final var hasAssignedPadProxies_property_selection : EBSelection <Bool> {
    return self.hasAssignedPadProxies_property.selection
  }

  //····················································································································

  final var hasAssignedPadProxies : Bool? {
    switch self.hasAssignedPadProxies_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mStatusImage
  //····················································································································

  final let mStatusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  final var mStatusImage_property_selection : EBSelection <NSImage> {
    return self.mStatusImage_property.selection
  }

  //····················································································································

  final var mStatusImage : NSImage? {
    switch self.mStatusImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }


  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var mAddPackageFromLibraryButton : EBButton? = nil
  @IBOutlet var mAddSymbolFromLibraryButton : EBButton? = nil
  @IBOutlet var mAddSymbolInstancePullDownButton : AddSymbolInstancePullDownButton? = nil
  @IBOutlet var mAssignedPadProxyTableView : AssignedPadProxysInDeviceTableView? = nil
  @IBOutlet var mAssignmentPageView : CanariViewWithKeyView? = nil
  @IBOutlet var mAssignmentSplitView : NSSplitView? = nil
  @IBOutlet var mBindButton : EBButton? = nil
  @IBOutlet var mCommentTextView : EBTextView? = nil
  @IBOutlet var mComposedPackageView : EBEnclosingGraphicView? = nil
  @IBOutlet var mComposedSymbolView : EBEnclosingGraphicView? = nil
  @IBOutlet var mCopyImageButton : EBButton? = nil
  @IBOutlet var mDescriptionPageView : CanariViewWithKeyView? = nil
  @IBOutlet var mDocumentationTableView : DeviceDocumentationTableView? = nil
  @IBOutlet var mEditSelectedPackagesButton : EBButton? = nil
  @IBOutlet var mEditSelectedSymbolsButton : EBButton? = nil
  @IBOutlet var mExportSelectedPackagesButton : EBButton? = nil
  @IBOutlet var mExportSelectedSymbolsButton : EBButton? = nil
  @IBOutlet var mInconsistentPackagePadNameSetsMessageScrollView : NSScrollView? = nil
  @IBOutlet var mInconsistentPackagePadNameSetsMessageTextView : EBTextObserverView? = nil
  @IBOutlet var mInconsistentPadNameSetTextField : EBTextObserverField? = nil
  @IBOutlet var mInconsistentSymbolNameMessageScrollView : NSScrollView? = nil
  @IBOutlet var mInconsistentSymbolNameMessageTextView : EBTextObserverView? = nil
  @IBOutlet var mInfosPageView : CanariViewWithKeyView? = nil
  @IBOutlet var mIssueTextView : EBTextObserverView? = nil
  @IBOutlet var mLibraryPageView : CanariViewWithKeyView? = nil
  @IBOutlet var mMasterView : NSView? = nil
  @IBOutlet var mNCButton : EBButton? = nil
  @IBOutlet var mPackageBackPadsColorWell : EBColorWell? = nil
  @IBOutlet var mPackageDisplayHorizontalFlipSwitch : EBSwitch? = nil
  @IBOutlet var mPackageDisplayVerticalFlipSwitch : EBSwitch? = nil
  @IBOutlet var mPackageFrontPadsColorWell : EBColorWell? = nil
  @IBOutlet var mPackageNumbersColorWell : EBColorWell? = nil
  @IBOutlet var mPackagePageView : CanariViewWithKeyView? = nil
  @IBOutlet var mPackageTableView : EBTableView? = nil
  @IBOutlet var mPackagesColorWell : EBColorWell? = nil
  @IBOutlet var mPageSegmentedControl : CanariSegmentedControl? = nil
  @IBOutlet var mPasteImageButton : EBButton? = nil
  @IBOutlet var mPrefixTextField : EBTextField? = nil
  @IBOutlet var mRemoveImageButton : EBButton? = nil
  @IBOutlet var mRemoveSelectedDocButton : EBButton? = nil
  @IBOutlet var mRemoveUselessSymbolTypeButton : EBButton? = nil
  @IBOutlet var mRepresentationImageView : DeviceDroppableImageView? = nil
  @IBOutlet var mResetSelectedPackageVersionButton : EBButton? = nil
  @IBOutlet var mResetSelectedSymbolVersionButton : EBButton? = nil
  @IBOutlet var mResetSymbolAndPackagesVersionButton : EBButton? = nil
  @IBOutlet var mResetVersionButton : EBButton? = nil
  @IBOutlet var mSaveDocButton : EBButton? = nil
  @IBOutlet var mShowDocButton : EBButton? = nil
  @IBOutlet var mShowPackageBackPadsSwitch : EBSwitch? = nil
  @IBOutlet var mShowPackageFrontPadsSwitch : EBSwitch? = nil
  @IBOutlet var mShowPackagePadNumbersSwitch : EBSwitch? = nil
  @IBOutlet var mShowPackagesSwitch : EBSwitch? = nil
  @IBOutlet var mSignatureTextField : CanariSignatureField? = nil
  @IBOutlet var mStatusImageViewInToolbar : EBImageObserverView? = nil
  @IBOutlet var mSymbolDisplayHorizontalFlipSwitch : EBSwitch? = nil
  @IBOutlet var mSymbolDisplayVerticalFlipSwitch : EBSwitch? = nil
  @IBOutlet var mSymbolErrorMessageTitleTextField : NSTextField? = nil
  @IBOutlet var mSymbolNameTextField : EBTextField? = nil
  @IBOutlet var mSymbolPageView : CanariViewWithKeyView? = nil
  @IBOutlet var mSymbolTableView : EBTableView? = nil
  @IBOutlet var mSymbolTypeTextField : EBTextObserverField? = nil
  @IBOutlet var mTitleTextField : EBTextField? = nil
  @IBOutlet var mUnbindAllButton : EBButton? = nil
  @IBOutlet var mUnbindButton : EBButton? = nil
  @IBOutlet var mUnconnectedPadsInDeviceTableView : UnconnectedPadsInDeviceTableView? = nil
  @IBOutlet var mUnconnectedSymbolPinsInDeviceTableView : UnconnectedSymbolPinsInDeviceTableView? = nil
  @IBOutlet var mUpdateSelectedPackagesButton : EBButton? = nil
  @IBOutlet var mUpdateSelectedSymbolsButton : EBButton? = nil
  @IBOutlet var mUpdateSymbolAndPackagesButton : EBButton? = nil
  @IBOutlet var mVersionField : CanariVersionField? = nil

  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

  var mController_mCopyImageButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mRemoveImageButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mRemoveSelectedDocButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mShowDocButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mSaveDocButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mAddSymbolInstancePullDownButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mInconsistentSymbolNameMessageScrollView_hidden : MultipleBindingController_hidden? = nil
  var mController_mSymbolErrorMessageTitleTextField_hidden : MultipleBindingController_hidden? = nil
  var mController_mInconsistentPackagePadNameSetsMessageScrollView_hidden : MultipleBindingController_hidden? = nil
  var mController_mResetSymbolAndPackagesVersionButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mUpdateSymbolAndPackagesButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mResetSelectedSymbolVersionButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mEditSelectedSymbolsButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mExportSelectedSymbolsButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mUpdateSelectedSymbolsButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mRemoveUselessSymbolTypeButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mResetSelectedPackageVersionButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mEditSelectedPackagesButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mExportSelectedPackagesButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mUpdateSelectedPackagesButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mInconsistentPadNameSetTextField_hidden : MultipleBindingController_hidden? = nil
  var mController_mAssignmentSplitView_hidden : MultipleBindingController_hidden? = nil
  var mController_mBindButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mNCButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mUnbindButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mUnbindAllButton_enabled : MultipleBindingController_enabled? = nil

  //····················································································································
  //    Document file path
  //····················································································································
  // Cette méthode est appelée après tout enregistrement, qu'il y ait changement de nom ou pas.

  override var fileModificationDate : Date? {
    get {
      return super.fileModificationDate
    }
    set{
      super.fileModificationDate = newValue
      self.documentFilePath_property.postEvent ()
    }
  }

  //····················································································································

  func computeTransient_documentFilePath () -> String {
    var documentFilePath = ""
    if let url = self.fileURL {
      documentFilePath = url.path
    }
    return documentFilePath
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
  //--- Array controller property: packageController
    self.packageController.addExplorer (name: "packageController", y:&y, view:view)
  //--- Array controller property: documentationController
    self.documentationController.addExplorer (name: "documentationController", y:&y, view:view)
  //--- Array controller property: symbolDisplayController
    self.symbolDisplayController.addExplorer (name: "symbolDisplayController", y:&y, view:view)
  //--- Selection controller property: symbolInstanceSelection
    self.symbolInstanceSelection.addExplorer (name: "symbolInstanceSelection", y:&y, view:view)
  //--- Array controller property: packageDisplayController
    self.packageDisplayController.addExplorer (name: "packageDisplayController", y:&y, view:view)
  //--- Array controller property: symbolTypeController
    self.symbolTypeController.addExplorer (name: "symbolTypeController", y:&y, view:view)
  //--- Selection controller property: symbolTypeSelection
    self.symbolTypeSelection.addExplorer (name: "symbolTypeSelection", y:&y, view:view)
  //---
    super.populateExplorerWindow (&y, view:view)
  }

  //····················································································································
  //    windowNibName
  //····················································································································

  override var windowNibName : NSNib.Name? {
    return NSNib.Name ("DeviceDocument")
  }
  
  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override func rootEntityClassName () -> String {
    return "DeviceRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  var rootObject : DeviceRoot { return self.mRootObject as! DeviceRoot }

  //····················································································································
  //    check outlet connections
  //····················································································································

  private func checkOutletConnections () {
    let start = Date ()
    checkOutletConnection (self.mAddPackageFromLibraryButton, "mAddPackageFromLibraryButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mAddSymbolFromLibraryButton, "mAddSymbolFromLibraryButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mAddSymbolInstancePullDownButton, "mAddSymbolInstancePullDownButton", AddSymbolInstancePullDownButton.self, #file, #line)
    checkOutletConnection (self.mAssignedPadProxyTableView, "mAssignedPadProxyTableView", AssignedPadProxysInDeviceTableView.self, #file, #line)
    checkOutletConnection (self.mAssignmentPageView, "mAssignmentPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mAssignmentSplitView, "mAssignmentSplitView", NSSplitView.self, #file, #line)
    checkOutletConnection (self.mBindButton, "mBindButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mCommentTextView, "mCommentTextView", EBTextView.self, #file, #line)
    checkOutletConnection (self.mComposedPackageView, "mComposedPackageView", EBEnclosingGraphicView.self, #file, #line)
    checkOutletConnection (self.mComposedSymbolView, "mComposedSymbolView", EBEnclosingGraphicView.self, #file, #line)
    checkOutletConnection (self.mCopyImageButton, "mCopyImageButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mDescriptionPageView, "mDescriptionPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mDocumentationTableView, "mDocumentationTableView", DeviceDocumentationTableView.self, #file, #line)
    checkOutletConnection (self.mEditSelectedPackagesButton, "mEditSelectedPackagesButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mEditSelectedSymbolsButton, "mEditSelectedSymbolsButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mExportSelectedPackagesButton, "mExportSelectedPackagesButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mExportSelectedSymbolsButton, "mExportSelectedSymbolsButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mInconsistentPackagePadNameSetsMessageScrollView, "mInconsistentPackagePadNameSetsMessageScrollView", NSScrollView.self, #file, #line)
    checkOutletConnection (self.mInconsistentPackagePadNameSetsMessageTextView, "mInconsistentPackagePadNameSetsMessageTextView", EBTextObserverView.self, #file, #line)
    checkOutletConnection (self.mInconsistentPadNameSetTextField, "mInconsistentPadNameSetTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mInconsistentSymbolNameMessageScrollView, "mInconsistentSymbolNameMessageScrollView", NSScrollView.self, #file, #line)
    checkOutletConnection (self.mInconsistentSymbolNameMessageTextView, "mInconsistentSymbolNameMessageTextView", EBTextObserverView.self, #file, #line)
    checkOutletConnection (self.mInfosPageView, "mInfosPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mIssueTextView, "mIssueTextView", EBTextObserverView.self, #file, #line)
    checkOutletConnection (self.mLibraryPageView, "mLibraryPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mMasterView, "mMasterView", NSView.self, #file, #line)
    checkOutletConnection (self.mNCButton, "mNCButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mPackageBackPadsColorWell, "mPackageBackPadsColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPackageDisplayHorizontalFlipSwitch, "mPackageDisplayHorizontalFlipSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mPackageDisplayVerticalFlipSwitch, "mPackageDisplayVerticalFlipSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mPackageFrontPadsColorWell, "mPackageFrontPadsColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPackageNumbersColorWell, "mPackageNumbersColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPackagePageView, "mPackagePageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mPackageTableView, "mPackageTableView", EBTableView.self, #file, #line)
    checkOutletConnection (self.mPackagesColorWell, "mPackagesColorWell", EBColorWell.self, #file, #line)
    checkOutletConnection (self.mPageSegmentedControl, "mPageSegmentedControl", CanariSegmentedControl.self, #file, #line)
    checkOutletConnection (self.mPasteImageButton, "mPasteImageButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mPrefixTextField, "mPrefixTextField", EBTextField.self, #file, #line)
    checkOutletConnection (self.mRemoveImageButton, "mRemoveImageButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mRemoveSelectedDocButton, "mRemoveSelectedDocButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mRemoveUselessSymbolTypeButton, "mRemoveUselessSymbolTypeButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mRepresentationImageView, "mRepresentationImageView", DeviceDroppableImageView.self, #file, #line)
    checkOutletConnection (self.mResetSelectedPackageVersionButton, "mResetSelectedPackageVersionButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mResetSelectedSymbolVersionButton, "mResetSelectedSymbolVersionButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mResetSymbolAndPackagesVersionButton, "mResetSymbolAndPackagesVersionButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mResetVersionButton, "mResetVersionButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mSaveDocButton, "mSaveDocButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mShowDocButton, "mShowDocButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mShowPackageBackPadsSwitch, "mShowPackageBackPadsSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mShowPackageFrontPadsSwitch, "mShowPackageFrontPadsSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mShowPackagePadNumbersSwitch, "mShowPackagePadNumbersSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mShowPackagesSwitch, "mShowPackagesSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mSignatureTextField, "mSignatureTextField", CanariSignatureField.self, #file, #line)
    checkOutletConnection (self.mStatusImageViewInToolbar, "mStatusImageViewInToolbar", EBImageObserverView.self, #file, #line)
    checkOutletConnection (self.mSymbolDisplayHorizontalFlipSwitch, "mSymbolDisplayHorizontalFlipSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mSymbolDisplayVerticalFlipSwitch, "mSymbolDisplayVerticalFlipSwitch", EBSwitch.self, #file, #line)
    checkOutletConnection (self.mSymbolErrorMessageTitleTextField, "mSymbolErrorMessageTitleTextField", NSTextField.self, #file, #line)
    checkOutletConnection (self.mSymbolNameTextField, "mSymbolNameTextField", EBTextField.self, #file, #line)
    checkOutletConnection (self.mSymbolPageView, "mSymbolPageView", CanariViewWithKeyView.self, #file, #line)
    checkOutletConnection (self.mSymbolTableView, "mSymbolTableView", EBTableView.self, #file, #line)
    checkOutletConnection (self.mSymbolTypeTextField, "mSymbolTypeTextField", EBTextObserverField.self, #file, #line)
    checkOutletConnection (self.mTitleTextField, "mTitleTextField", EBTextField.self, #file, #line)
    checkOutletConnection (self.mUnbindAllButton, "mUnbindAllButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mUnbindButton, "mUnbindButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mUnconnectedPadsInDeviceTableView, "mUnconnectedPadsInDeviceTableView", UnconnectedPadsInDeviceTableView.self, #file, #line)
    checkOutletConnection (self.mUnconnectedSymbolPinsInDeviceTableView, "mUnconnectedSymbolPinsInDeviceTableView", UnconnectedSymbolPinsInDeviceTableView.self, #file, #line)
    checkOutletConnection (self.mUpdateSelectedPackagesButton, "mUpdateSelectedPackagesButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mUpdateSelectedSymbolsButton, "mUpdateSelectedSymbolsButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mUpdateSymbolAndPackagesButton, "mUpdateSymbolAndPackagesButton", EBButton.self, #file, #line)
    checkOutletConnection (self.mVersionField, "mVersionField", CanariVersionField.self, #file, #line)
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Check outlet connections \(durationMS) ms")
    }
  }
  
  //····················································································································
  
  final private func configureProperties () {
    let start = Date ()
    var opIdx = 0
  //--- Array controller property: packageController
    self.packageController.bind_model (self.rootObject.mPackages_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: documentationController
    self.documentationController.bind_model (self.rootObject.mDocs_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: symbolDisplayController
    self.symbolDisplayController.bind_model (self.rootObject.mSymbolInstances_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: symbolInstanceSelection
    self.symbolInstanceSelection.bind_selection (model: self.symbolDisplayController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: packageDisplayController
    self.packageDisplayController.bind_model (self.rootObject.mPackages_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Array controller property: symbolTypeController
    self.symbolTypeController.bind_model (self.rootObject.mSymbolTypes_property, self.ebUndoManager)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Selection controller property: symbolTypeSelection
    self.symbolTypeSelection.bind_selection (model: self.symbolTypeController.selectedArray_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: assignmentInhibitionMessage
    self.assignmentInhibitionMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.rootObject.inconsistentPackagePadNameSetsMessage_property_selection.kind ()
        kind &= unwSelf.rootObject.inconsistentSymbolNameSetMessage_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.inconsistentPackagePadNameSetsMessage_property_selection, unwSelf.rootObject.inconsistentSymbolNameSetMessage_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_DeviceDocument_assignmentInhibitionMessage (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.inconsistentPackagePadNameSetsMessage_property.addEBObserver (self.assignmentInhibitionMessage_property)
    self.rootObject.inconsistentSymbolNameSetMessage_property.addEBObserver (self.assignmentInhibitionMessage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: hasUnconnectedPin
    self.hasUnconnectedPin_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.unconnectedPins_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.unconnectedPins_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceDocument_hasUnconnectedPin (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.unconnectedPins_property.addEBObserver (self.hasUnconnectedPin_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: mStatusMessage
    self.mStatusMessage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceDocument_mStatusMessage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.mStatusMessage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: mMetadataStatus
    self.mMetadataStatus_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceDocument_mMetadataStatus (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.mMetadataStatus_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: hasUnconnectedPad
    self.hasUnconnectedPad_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.unconnectedPads_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.unconnectedPads_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceDocument_hasUnconnectedPad (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.unconnectedPads_property.addEBObserver (self.hasUnconnectedPad_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: hasAssignedPadProxies
    self.hasAssignedPadProxies_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.assignedPadProxies_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.assignedPadProxies_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceDocument_hasAssignedPadProxies (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.assignedPadProxies_property.addEBObserver (self.hasAssignedPadProxies_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
  //--- Atomic property: mStatusImage
    self.mStatusImage_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceDocument_mStatusImage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.mStatusImage_property)
    if LOG_OPERATION_DURATION {
      Swift.print ("  op\(opIdx) \(Int (Date ().timeIntervalSince (start) * 1000.0)) ms")
      opIdx += 1
    }
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Configure properties \(durationMS) ms")
    }
  }

  //····················································································································
  
  final private func installBindings () {
    let start = Date ()
  //--------------------------- Install table view bindings
    self.documentationController.bind_tableView (self.mDocumentationTableView)
    self.symbolTypeController.bind_tableView (self.mSymbolTableView)
    self.packageController.bind_tableView (self.mPackageTableView)
  //--------------------------- Install ebView bindings
    self.symbolDisplayController.bind_ebView (self.mComposedSymbolView)
    self.packageDisplayController.bind_ebView (self.mComposedPackageView)
  //--------------------------- Install regular bindings
    self.mPageSegmentedControl?.bind_selectedPage (self.rootObject.mSelectedPageIndex_property)
    self.mSignatureTextField?.bind_signature (self.signatureObserver_property)
    self.mVersionField?.bind_version (self.versionObserver_property)
    self.mVersionField?.bind_versionShouldChange (self.versionShouldChangeObserver_property)
    self.mStatusImageViewInToolbar?.bind_image (self.mStatusImage_property)
    self.mStatusImageViewInToolbar?.bind_tooltip (self.mStatusMessage_property)
    self.mIssueTextView?.bind_valueObserver (self.mStatusMessage_property)
    self.mTitleTextField?.bind_value (self.rootObject.mTitle_property, sendContinously:true)
    self.mRepresentationImageView?.bind_imageData (self.rootObject.mImageData_property)
    self.mComposedSymbolView?.bind_horizontalFlip (self.rootObject.mSymbolDisplayHorizontalFlip_property)
    self.mComposedSymbolView?.bind_verticalFlip (self.rootObject.mSymbolDisplayVerticalFlip_property)
    self.mComposedSymbolView?.bind_zoom (self.rootObject.mSymbolDisplayZoom_property)
    self.mSymbolDisplayHorizontalFlipSwitch?.bind_value (self.rootObject.mSymbolDisplayHorizontalFlip_property)
    self.mSymbolDisplayVerticalFlipSwitch?.bind_value (self.rootObject.mSymbolDisplayVerticalFlip_property)
    self.mAddSymbolInstancePullDownButton?.bind_symbolTypeNames (self.rootObject.symbolTypeNames_property)
    self.mInconsistentSymbolNameMessageTextView?.bind_valueObserver (self.rootObject.inconsistentSymbolNameSetMessage_property)
    self.mSymbolTypeTextField?.bind_valueObserver (self.symbolInstanceSelection.symbolTypeName_property)
    self.mSymbolNameTextField?.bind_value (self.symbolInstanceSelection.mInstanceName_property, sendContinously:true)
    self.mComposedPackageView?.bind_horizontalFlip (self.rootObject.mPackageDisplayHorizontalFlip_property)
    self.mComposedPackageView?.bind_verticalFlip (self.rootObject.mPackageDisplayVerticalFlip_property)
    self.mComposedPackageView?.bind_zoom (self.rootObject.mPackageDisplayZoom_property)
    self.mPackageDisplayHorizontalFlipSwitch?.bind_value (self.rootObject.mPackageDisplayHorizontalFlip_property)
    self.mPackageDisplayVerticalFlipSwitch?.bind_value (self.rootObject.mPackageDisplayVerticalFlip_property)
    self.mShowPackagesSwitch?.bind_value (self.rootObject.mShowPackages_property)
    self.mPackagesColorWell?.bind_color (prefs_packageColor_property, sendContinously:false)
    self.mShowPackagePadNumbersSwitch?.bind_value (self.rootObject.mShowPackagePadNumbers_property)
    self.mPackageNumbersColorWell?.bind_color (prefs_padNumberColor_property, sendContinously:false)
    self.mShowPackageFrontPadsSwitch?.bind_value (self.rootObject.mShowPackageFrontPads_property)
    self.mPackageFrontPadsColorWell?.bind_color (prefs_frontSidePadColor_property, sendContinously:false)
    self.mShowPackageBackPadsSwitch?.bind_value (self.rootObject.mShowPackageBackPads_property)
    self.mPackageBackPadsColorWell?.bind_color (prefs_backSidePadColor_property, sendContinously:false)
    self.mInconsistentPackagePadNameSetsMessageTextView?.bind_valueObserver (self.rootObject.inconsistentPackagePadNameSetsMessage_property)
    self.mInconsistentPadNameSetTextField?.bind_valueObserver (self.assignmentInhibitionMessage_property)
    self.mUnconnectedPadsInDeviceTableView?.bind_unconnectedPads (self.rootObject.unconnectedPads_property)
    self.mUnconnectedSymbolPinsInDeviceTableView?.bind_unconnectedPins (self.rootObject.unconnectedPins_property)
    self.mAssignedPadProxyTableView?.bind_assignedPadProxies (self.rootObject.assignedPadProxies_property)
    self.mPrefixTextField?.bind_value (self.rootObject.mPrefix_property, sendContinously:true)
    self.mCommentTextView?.bind_value (self.rootObject.mComments_property)
  //--------------------------- Install multiple bindings
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return self.rootObject.imageIsValid_property_selection
        },
        outlet: self.mCopyImageButton
      )
      self.rootObject.imageIsValid_property.addEBObserver (controller)
      self.mController_mCopyImageButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return self.rootObject.imageIsValid_property_selection
        },
        outlet: self.mRemoveImageButton
      )
      self.rootObject.imageIsValid_property.addEBObserver (controller)
      self.mController_mRemoveImageButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.documentationController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mRemoveSelectedDocButton
      )
      self.documentationController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mRemoveSelectedDocButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.documentationController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mShowDocButton
      )
      self.documentationController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mShowDocButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.documentationController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mSaveDocButton
      )
      self.documentationController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mSaveDocButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.rootObject.mSymbolTypes_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mAddSymbolInstancePullDownButton
      )
      self.rootObject.mSymbolTypes_property.count_property.addEBObserver (controller)
      self.mController_mAddSymbolInstancePullDownButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return self.rootObject.symbolNameAreConsistent_property_selection
        },
        outlet: self.mInconsistentSymbolNameMessageScrollView
      )
      self.rootObject.symbolNameAreConsistent_property.addEBObserver (controller)
      self.mController_mInconsistentSymbolNameMessageScrollView_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return self.rootObject.symbolNameAreConsistent_property_selection
        },
        outlet: self.mSymbolErrorMessageTitleTextField
      )
      self.rootObject.symbolNameAreConsistent_property.addEBObserver (controller)
      self.mController_mSymbolErrorMessageTitleTextField_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return self.rootObject.packagePadNameSetsAreConsistent_property_selection
        },
        outlet: self.mInconsistentPackagePadNameSetsMessageScrollView
      )
      self.rootObject.packagePadNameSetsAreConsistent_property.addEBObserver (controller)
      self.mController_mInconsistentPackagePadNameSetsMessageScrollView_hidden = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return ((self.rootObject.mPackages_property.count_property_selection > EBSelection.single (0)) && (self.rootObject.mSymbolTypes_property.count_property_selection > EBSelection.single (0)))
        },
        outlet: self.mResetSymbolAndPackagesVersionButton
      )
      self.rootObject.mPackages_property.count_property.addEBObserver (controller)
      self.rootObject.mSymbolTypes_property.count_property.addEBObserver (controller)
      self.mController_mResetSymbolAndPackagesVersionButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return ((self.rootObject.mPackages_property.count_property_selection > EBSelection.single (0)) && (self.rootObject.mSymbolTypes_property.count_property_selection > EBSelection.single (0)))
        },
        outlet: self.mUpdateSymbolAndPackagesButton
      )
      self.rootObject.mPackages_property.count_property.addEBObserver (controller)
      self.rootObject.mSymbolTypes_property.count_property.addEBObserver (controller)
      self.mController_mUpdateSymbolAndPackagesButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.symbolTypeController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mResetSelectedSymbolVersionButton
      )
      self.symbolTypeController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mResetSelectedSymbolVersionButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.symbolTypeController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mEditSelectedSymbolsButton
      )
      self.symbolTypeController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mEditSelectedSymbolsButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.symbolTypeController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mExportSelectedSymbolsButton
      )
      self.symbolTypeController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mExportSelectedSymbolsButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.symbolTypeController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mUpdateSelectedSymbolsButton
      )
      self.symbolTypeController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mUpdateSelectedSymbolsButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return ((self.symbolTypeController.selectedArray_property.count_property_selection == EBSelection.single (1)) && (self.symbolTypeSelection.instanceCount_property_selection == EBSelection.single (0)))
        },
        outlet: self.mRemoveUselessSymbolTypeButton
      )
      self.symbolTypeController.selectedArray_property.count_property.addEBObserver (controller)
      self.symbolTypeSelection.instanceCount_property.addEBObserver (controller)
      self.mController_mRemoveUselessSymbolTypeButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.packageController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mResetSelectedPackageVersionButton
      )
      self.packageController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mResetSelectedPackageVersionButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.packageController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mEditSelectedPackagesButton
      )
      self.packageController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mEditSelectedPackagesButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.packageController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mExportSelectedPackagesButton
      )
      self.packageController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mExportSelectedPackagesButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.packageController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mUpdateSelectedPackagesButton
      )
      self.packageController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mUpdateSelectedPackagesButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return (self.rootObject.packagePadNameSetsAreConsistent_property_selection && self.rootObject.symbolNameAreConsistent_property_selection)
        },
        outlet: self.mInconsistentPadNameSetTextField
      )
      self.rootObject.packagePadNameSetsAreConsistent_property.addEBObserver (controller)
      self.rootObject.symbolNameAreConsistent_property.addEBObserver (controller)
      self.mController_mInconsistentPadNameSetTextField_hidden = controller
    }
    do{
      let controller = MultipleBindingController_hidden (
        computeFunction: {
          return (!self.rootObject.packagePadNameSetsAreConsistent_property_selection || !self.rootObject.symbolNameAreConsistent_property_selection)
        },
        outlet: self.mAssignmentSplitView
      )
      self.rootObject.packagePadNameSetsAreConsistent_property.addEBObserver (controller)
      self.rootObject.symbolNameAreConsistent_property.addEBObserver (controller)
      self.mController_mAssignmentSplitView_hidden = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.hasUnconnectedPad_property_selection && self.hasUnconnectedPin_property_selection)
        },
        outlet: self.mBindButton
      )
      self.hasUnconnectedPad_property.addEBObserver (controller)
      self.hasUnconnectedPin_property.addEBObserver (controller)
      self.mController_mBindButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return self.hasUnconnectedPad_property_selection
        },
        outlet: self.mNCButton
      )
      self.hasUnconnectedPad_property.addEBObserver (controller)
      self.mController_mNCButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return self.hasAssignedPadProxies_property_selection
        },
        outlet: self.mUnbindButton
      )
      self.hasAssignedPadProxies_property.addEBObserver (controller)
      self.mController_mUnbindButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return self.hasAssignedPadProxies_property_selection
        },
        outlet: self.mUnbindAllButton
      )
      self.hasAssignedPadProxies_property.addEBObserver (controller)
      self.mController_mUnbindAllButton_enabled = controller
    }
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Install bindings \(durationMS) ms")
    }
  }

  //····················································································································
  
  final private func setTargetsAndActions () {
     let start = Date ()
   //--------------------------- Set targets / actions
    self.mPasteImageButton?.target = self
    self.mPasteImageButton?.action = #selector (DeviceDocument.pasteImageAction (_:))
    self.mCopyImageButton?.target = self
    self.mCopyImageButton?.action = #selector (DeviceDocument.copyImageAction (_:))
    self.mRemoveImageButton?.target = self
    self.mRemoveImageButton?.action = #selector (DeviceDocument.removeImageAction (_:))
    self.mRemoveSelectedDocButton?.target = documentationController
    self.mRemoveSelectedDocButton?.action = #selector (Controller_DeviceDocument_documentationController.remove (_:))
    self.mShowDocButton?.target = self
    self.mShowDocButton?.action = #selector (DeviceDocument.showDocAction (_:))
    self.mSaveDocButton?.target = self
    self.mSaveDocButton?.action = #selector (DeviceDocument.saveDocAction (_:))
    self.mAddSymbolFromLibraryButton?.target = self
    self.mAddSymbolFromLibraryButton?.action = #selector (DeviceDocument.addSymbolFromLibraryAction (_:))
    self.mAddPackageFromLibraryButton?.target = self
    self.mAddPackageFromLibraryButton?.action = #selector (DeviceDocument.addPackageFromLibraryAction (_:))
    self.mResetSymbolAndPackagesVersionButton?.target = self
    self.mResetSymbolAndPackagesVersionButton?.action = #selector (DeviceDocument.resetSymbolsAndPackagesVersion (_:))
    self.mUpdateSymbolAndPackagesButton?.target = self
    self.mUpdateSymbolAndPackagesButton?.action = #selector (DeviceDocument.updateSymbolsAndPackagesAction (_:))
    self.mResetSelectedSymbolVersionButton?.target = self
    self.mResetSelectedSymbolVersionButton?.action = #selector (DeviceDocument.resetSelectedSymbolVersion (_:))
    self.mEditSelectedSymbolsButton?.target = self
    self.mEditSelectedSymbolsButton?.action = #selector (DeviceDocument.editSelectedSymbols (_:))
    self.mExportSelectedSymbolsButton?.target = self
    self.mExportSelectedSymbolsButton?.action = #selector (DeviceDocument.exportSelectedSymbols (_:))
    self.mUpdateSelectedSymbolsButton?.target = self
    self.mUpdateSelectedSymbolsButton?.action = #selector (DeviceDocument.updateSelectedSymbols (_:))
    self.mRemoveUselessSymbolTypeButton?.target = self
    self.mRemoveUselessSymbolTypeButton?.action = #selector (DeviceDocument.removeUselessSymbolTypeAction (_:))
    self.mResetSelectedPackageVersionButton?.target = self
    self.mResetSelectedPackageVersionButton?.action = #selector (DeviceDocument.resetSelectedPackageVersion (_:))
    self.mEditSelectedPackagesButton?.target = self
    self.mEditSelectedPackagesButton?.action = #selector (DeviceDocument.editSelectedPackages (_:))
    self.mExportSelectedPackagesButton?.target = self
    self.mExportSelectedPackagesButton?.action = #selector (DeviceDocument.exportSelectedPackages (_:))
    self.mUpdateSelectedPackagesButton?.target = self
    self.mUpdateSelectedPackagesButton?.action = #selector (DeviceDocument.updateSelectedPackages (_:))
    self.mBindButton?.target = self
    self.mBindButton?.action = #selector (DeviceDocument.performBindAction (_:))
    self.mNCButton?.target = self
    self.mNCButton?.action = #selector (DeviceDocument.performNCAction (_:))
    self.mUnbindButton?.target = self
    self.mUnbindButton?.action = #selector (DeviceDocument.performUnbindAction (_:))
    self.mUnbindAllButton?.target = self
    self.mUnbindAllButton?.action = #selector (DeviceDocument.performUnbindAllAction (_:))
    self.mResetVersionButton?.target = self
    self.mResetVersionButton?.action = #selector (DeviceDocument.resetVersionAction (_:))
    if LOG_OPERATION_DURATION {
      let durationMS = Int (Date ().timeIntervalSince (start) * 1000.0)
      Swift.print ("Set target and actions \(durationMS) ms")
    }
  }

  //····················································································································
  //    windowControllerDidLoadNib
  //····················································································································

  override func windowControllerDidLoadNib (_ aController: NSWindowController) {
    super.windowControllerDidLoadNib (aController)
    self.checkOutletConnections ()
    self.configureProperties ()
    self.installBindings ()
    self.setTargetsAndActions ()
  //--------------------------- Read documentFilePath model 
    self.documentFilePath_property.mReadModelFunction = { [weak self] in
      if let r = self?.computeTransient_documentFilePath () {
        return .single (r)
      }else{
        return .empty
      }
    }
  }

  //····················································································································
  //   removeUserInterface
  //····················································································································

  override func removeUserInterface () {
    super.removeUserInterface ()
  //--------------------------- Unbind regular bindings
    self.mPageSegmentedControl?.unbind_selectedPage ()
    self.mSignatureTextField?.unbind_signature ()
    self.mVersionField?.unbind_version ()
    self.mVersionField?.unbind_versionShouldChange ()
    self.mStatusImageViewInToolbar?.unbind_image ()
    self.mStatusImageViewInToolbar?.unbind_tooltip ()
    self.mIssueTextView?.unbind_valueObserver ()
    self.mTitleTextField?.unbind_value ()
    self.mRepresentationImageView?.unbind_imageData ()
    self.mComposedSymbolView?.unbind_horizontalFlip ()
    self.mComposedSymbolView?.unbind_verticalFlip ()
    self.mComposedSymbolView?.unbind_zoom ()
    self.mSymbolDisplayHorizontalFlipSwitch?.unbind_value ()
    self.mSymbolDisplayVerticalFlipSwitch?.unbind_value ()
    self.mAddSymbolInstancePullDownButton?.unbind_symbolTypeNames ()
    self.mInconsistentSymbolNameMessageTextView?.unbind_valueObserver ()
    self.mSymbolTypeTextField?.unbind_valueObserver ()
    self.mSymbolNameTextField?.unbind_value ()
    self.mComposedPackageView?.unbind_horizontalFlip ()
    self.mComposedPackageView?.unbind_verticalFlip ()
    self.mComposedPackageView?.unbind_zoom ()
    self.mPackageDisplayHorizontalFlipSwitch?.unbind_value ()
    self.mPackageDisplayVerticalFlipSwitch?.unbind_value ()
    self.mShowPackagesSwitch?.unbind_value ()
    self.mPackagesColorWell?.unbind_color ()
    self.mShowPackagePadNumbersSwitch?.unbind_value ()
    self.mPackageNumbersColorWell?.unbind_color ()
    self.mShowPackageFrontPadsSwitch?.unbind_value ()
    self.mPackageFrontPadsColorWell?.unbind_color ()
    self.mShowPackageBackPadsSwitch?.unbind_value ()
    self.mPackageBackPadsColorWell?.unbind_color ()
    self.mInconsistentPackagePadNameSetsMessageTextView?.unbind_valueObserver ()
    self.mInconsistentPadNameSetTextField?.unbind_valueObserver ()
    self.mUnconnectedPadsInDeviceTableView?.unbind_unconnectedPads ()
    self.mUnconnectedSymbolPinsInDeviceTableView?.unbind_unconnectedPins ()
    self.mAssignedPadProxyTableView?.unbind_assignedPadProxies ()
    self.mPrefixTextField?.unbind_value ()
    self.mCommentTextView?.unbind_value ()
  //--------------------------- Unbind multiple bindings
    self.rootObject.imageIsValid_property.removeEBObserver (self.mController_mCopyImageButton_enabled!)
    self.mController_mCopyImageButton_enabled = nil
    self.rootObject.imageIsValid_property.removeEBObserver (self.mController_mRemoveImageButton_enabled!)
    self.mController_mRemoveImageButton_enabled = nil
    self.documentationController.selectedArray_property.count_property.removeEBObserver (self.mController_mRemoveSelectedDocButton_enabled!)
    self.mController_mRemoveSelectedDocButton_enabled = nil
    self.documentationController.selectedArray_property.count_property.removeEBObserver (self.mController_mShowDocButton_enabled!)
    self.mController_mShowDocButton_enabled = nil
    self.documentationController.selectedArray_property.count_property.removeEBObserver (self.mController_mSaveDocButton_enabled!)
    self.mController_mSaveDocButton_enabled = nil
    self.rootObject.mSymbolTypes_property.count_property.removeEBObserver (self.mController_mAddSymbolInstancePullDownButton_enabled!)
    self.mController_mAddSymbolInstancePullDownButton_enabled = nil
    self.rootObject.symbolNameAreConsistent_property.removeEBObserver (self.mController_mInconsistentSymbolNameMessageScrollView_hidden!)
    self.mController_mInconsistentSymbolNameMessageScrollView_hidden = nil
    self.rootObject.symbolNameAreConsistent_property.removeEBObserver (self.mController_mSymbolErrorMessageTitleTextField_hidden!)
    self.mController_mSymbolErrorMessageTitleTextField_hidden = nil
    self.rootObject.packagePadNameSetsAreConsistent_property.removeEBObserver (self.mController_mInconsistentPackagePadNameSetsMessageScrollView_hidden!)
    self.mController_mInconsistentPackagePadNameSetsMessageScrollView_hidden = nil
    self.rootObject.mPackages_property.count_property.removeEBObserver (self.mController_mResetSymbolAndPackagesVersionButton_enabled!)
    self.rootObject.mSymbolTypes_property.count_property.removeEBObserver (self.mController_mResetSymbolAndPackagesVersionButton_enabled!)
    self.mController_mResetSymbolAndPackagesVersionButton_enabled = nil
    self.rootObject.mPackages_property.count_property.removeEBObserver (self.mController_mUpdateSymbolAndPackagesButton_enabled!)
    self.rootObject.mSymbolTypes_property.count_property.removeEBObserver (self.mController_mUpdateSymbolAndPackagesButton_enabled!)
    self.mController_mUpdateSymbolAndPackagesButton_enabled = nil
    self.symbolTypeController.selectedArray_property.count_property.removeEBObserver (self.mController_mResetSelectedSymbolVersionButton_enabled!)
    self.mController_mResetSelectedSymbolVersionButton_enabled = nil
    self.symbolTypeController.selectedArray_property.count_property.removeEBObserver (self.mController_mEditSelectedSymbolsButton_enabled!)
    self.mController_mEditSelectedSymbolsButton_enabled = nil
    self.symbolTypeController.selectedArray_property.count_property.removeEBObserver (self.mController_mExportSelectedSymbolsButton_enabled!)
    self.mController_mExportSelectedSymbolsButton_enabled = nil
    self.symbolTypeController.selectedArray_property.count_property.removeEBObserver (self.mController_mUpdateSelectedSymbolsButton_enabled!)
    self.mController_mUpdateSelectedSymbolsButton_enabled = nil
    self.symbolTypeController.selectedArray_property.count_property.removeEBObserver (self.mController_mRemoveUselessSymbolTypeButton_enabled!)
    self.symbolTypeSelection.instanceCount_property.removeEBObserver (self.mController_mRemoveUselessSymbolTypeButton_enabled!)
    self.mController_mRemoveUselessSymbolTypeButton_enabled = nil
    self.packageController.selectedArray_property.count_property.removeEBObserver (self.mController_mResetSelectedPackageVersionButton_enabled!)
    self.mController_mResetSelectedPackageVersionButton_enabled = nil
    self.packageController.selectedArray_property.count_property.removeEBObserver (self.mController_mEditSelectedPackagesButton_enabled!)
    self.mController_mEditSelectedPackagesButton_enabled = nil
    self.packageController.selectedArray_property.count_property.removeEBObserver (self.mController_mExportSelectedPackagesButton_enabled!)
    self.mController_mExportSelectedPackagesButton_enabled = nil
    self.packageController.selectedArray_property.count_property.removeEBObserver (self.mController_mUpdateSelectedPackagesButton_enabled!)
    self.mController_mUpdateSelectedPackagesButton_enabled = nil
    self.rootObject.packagePadNameSetsAreConsistent_property.removeEBObserver (self.mController_mInconsistentPadNameSetTextField_hidden!)
    self.rootObject.symbolNameAreConsistent_property.removeEBObserver (self.mController_mInconsistentPadNameSetTextField_hidden!)
    self.mController_mInconsistentPadNameSetTextField_hidden = nil
    self.rootObject.packagePadNameSetsAreConsistent_property.removeEBObserver (self.mController_mAssignmentSplitView_hidden!)
    self.rootObject.symbolNameAreConsistent_property.removeEBObserver (self.mController_mAssignmentSplitView_hidden!)
    self.mController_mAssignmentSplitView_hidden = nil
    self.hasUnconnectedPad_property.removeEBObserver (self.mController_mBindButton_enabled!)
    self.hasUnconnectedPin_property.removeEBObserver (self.mController_mBindButton_enabled!)
    self.mController_mBindButton_enabled = nil
    self.hasUnconnectedPad_property.removeEBObserver (self.mController_mNCButton_enabled!)
    self.mController_mNCButton_enabled = nil
    self.hasAssignedPadProxies_property.removeEBObserver (self.mController_mUnbindButton_enabled!)
    self.mController_mUnbindButton_enabled = nil
    self.hasAssignedPadProxies_property.removeEBObserver (self.mController_mUnbindAllButton_enabled!)
    self.mController_mUnbindAllButton_enabled = nil
  //--------------------------- Unbind array controllers
    self.documentationController.unbind_tableView (self.mDocumentationTableView)
    self.symbolTypeController.unbind_tableView (self.mSymbolTableView)
    self.packageController.unbind_tableView (self.mPackageTableView)
    self.symbolDisplayController.unbind_ebView (self.mComposedSymbolView)
    self.packageDisplayController.unbind_ebView (self.mComposedPackageView)
  //--- Array controller property: packageController
    self.packageController.unbind_model ()
  //--- Array controller property: documentationController
    self.documentationController.unbind_model ()
  //--- Array controller property: symbolDisplayController
    self.symbolDisplayController.unbind_model ()
  //--- Selection controller property: symbolInstanceSelection
    self.symbolInstanceSelection.unbind_selection ()
  //--- Array controller property: packageDisplayController
    self.packageDisplayController.unbind_model ()
  //--- Array controller property: symbolTypeController
    self.symbolTypeController.unbind_model ()
  //--- Selection controller property: symbolTypeSelection
    self.symbolTypeSelection.unbind_selection ()
    // self.rootObject.inconsistentPackagePadNameSetsMessage_property.removeEBObserver (self.assignmentInhibitionMessage_property)
    // self.rootObject.inconsistentSymbolNameSetMessage_property.removeEBObserver (self.assignmentInhibitionMessage_property)
    // self.rootObject.unconnectedPins_property.removeEBObserver (self.hasUnconnectedPin_property)
    // self.rootObject.issues_property.removeEBObserver (self.mStatusMessage_property)
    // self.rootObject.issues_property.removeEBObserver (self.mMetadataStatus_property)
    // self.rootObject.unconnectedPads_property.removeEBObserver (self.hasUnconnectedPad_property)
    // self.rootObject.assignedPadProxies_property.removeEBObserver (self.hasAssignedPadProxies_property)
    // self.rootObject.issues_property.removeEBObserver (self.mStatusImage_property)
  //--------------------------- Remove targets / actions
    self.mPasteImageButton?.target = nil
    self.mCopyImageButton?.target = nil
    self.mRemoveImageButton?.target = nil
    self.mRemoveSelectedDocButton?.target = nil
    self.mShowDocButton?.target = nil
    self.mSaveDocButton?.target = nil
    self.mAddSymbolFromLibraryButton?.target = nil
    self.mAddPackageFromLibraryButton?.target = nil
    self.mResetSymbolAndPackagesVersionButton?.target = nil
    self.mUpdateSymbolAndPackagesButton?.target = nil
    self.mResetSelectedSymbolVersionButton?.target = nil
    self.mEditSelectedSymbolsButton?.target = nil
    self.mExportSelectedSymbolsButton?.target = nil
    self.mUpdateSelectedSymbolsButton?.target = nil
    self.mRemoveUselessSymbolTypeButton?.target = nil
    self.mResetSelectedPackageVersionButton?.target = nil
    self.mEditSelectedPackagesButton?.target = nil
    self.mExportSelectedPackagesButton?.target = nil
    self.mUpdateSelectedPackagesButton?.target = nil
    self.mBindButton?.target = nil
    self.mNCButton?.target = nil
    self.mUnbindButton?.target = nil
    self.mUnbindAllButton?.target = nil
    self.mResetVersionButton?.target = nil
  //--------------------------- Clean up outlets
    self.mAddPackageFromLibraryButton?.ebCleanUp ()
    self.mAddSymbolFromLibraryButton?.ebCleanUp ()
    self.mAddSymbolInstancePullDownButton?.ebCleanUp ()
    self.mAssignedPadProxyTableView?.ebCleanUp ()
    self.mAssignmentPageView?.ebCleanUp ()
    self.mAssignmentSplitView?.ebCleanUp ()
    self.mBindButton?.ebCleanUp ()
    self.mCommentTextView?.ebCleanUp ()
    self.mComposedPackageView?.ebCleanUp ()
    self.mComposedSymbolView?.ebCleanUp ()
    self.mCopyImageButton?.ebCleanUp ()
    self.mDescriptionPageView?.ebCleanUp ()
    self.mDocumentationTableView?.ebCleanUp ()
    self.mEditSelectedPackagesButton?.ebCleanUp ()
    self.mEditSelectedSymbolsButton?.ebCleanUp ()
    self.mExportSelectedPackagesButton?.ebCleanUp ()
    self.mExportSelectedSymbolsButton?.ebCleanUp ()
    self.mInconsistentPackagePadNameSetsMessageScrollView?.ebCleanUp ()
    self.mInconsistentPackagePadNameSetsMessageTextView?.ebCleanUp ()
    self.mInconsistentPadNameSetTextField?.ebCleanUp ()
    self.mInconsistentSymbolNameMessageScrollView?.ebCleanUp ()
    self.mInconsistentSymbolNameMessageTextView?.ebCleanUp ()
    self.mInfosPageView?.ebCleanUp ()
    self.mIssueTextView?.ebCleanUp ()
    self.mLibraryPageView?.ebCleanUp ()
    self.mMasterView?.ebCleanUp ()
    self.mNCButton?.ebCleanUp ()
    self.mPackageBackPadsColorWell?.ebCleanUp ()
    self.mPackageDisplayHorizontalFlipSwitch?.ebCleanUp ()
    self.mPackageDisplayVerticalFlipSwitch?.ebCleanUp ()
    self.mPackageFrontPadsColorWell?.ebCleanUp ()
    self.mPackageNumbersColorWell?.ebCleanUp ()
    self.mPackagePageView?.ebCleanUp ()
    self.mPackageTableView?.ebCleanUp ()
    self.mPackagesColorWell?.ebCleanUp ()
    self.mPageSegmentedControl?.ebCleanUp ()
    self.mPasteImageButton?.ebCleanUp ()
    self.mPrefixTextField?.ebCleanUp ()
    self.mRemoveImageButton?.ebCleanUp ()
    self.mRemoveSelectedDocButton?.ebCleanUp ()
    self.mRemoveUselessSymbolTypeButton?.ebCleanUp ()
    self.mRepresentationImageView?.ebCleanUp ()
    self.mResetSelectedPackageVersionButton?.ebCleanUp ()
    self.mResetSelectedSymbolVersionButton?.ebCleanUp ()
    self.mResetSymbolAndPackagesVersionButton?.ebCleanUp ()
    self.mResetVersionButton?.ebCleanUp ()
    self.mSaveDocButton?.ebCleanUp ()
    self.mShowDocButton?.ebCleanUp ()
    self.mShowPackageBackPadsSwitch?.ebCleanUp ()
    self.mShowPackageFrontPadsSwitch?.ebCleanUp ()
    self.mShowPackagePadNumbersSwitch?.ebCleanUp ()
    self.mShowPackagesSwitch?.ebCleanUp ()
    self.mSignatureTextField?.ebCleanUp ()
    self.mStatusImageViewInToolbar?.ebCleanUp ()
    self.mSymbolDisplayHorizontalFlipSwitch?.ebCleanUp ()
    self.mSymbolDisplayVerticalFlipSwitch?.ebCleanUp ()
    self.mSymbolErrorMessageTitleTextField?.ebCleanUp ()
    self.mSymbolNameTextField?.ebCleanUp ()
    self.mSymbolPageView?.ebCleanUp ()
    self.mSymbolTableView?.ebCleanUp ()
    self.mSymbolTypeTextField?.ebCleanUp ()
    self.mTitleTextField?.ebCleanUp ()
    self.mUnbindAllButton?.ebCleanUp ()
    self.mUnbindButton?.ebCleanUp ()
    self.mUnconnectedPadsInDeviceTableView?.ebCleanUp ()
    self.mUnconnectedSymbolPinsInDeviceTableView?.ebCleanUp ()
    self.mUpdateSelectedPackagesButton?.ebCleanUp ()
    self.mUpdateSelectedSymbolsButton?.ebCleanUp ()
    self.mUpdateSymbolAndPackagesButton?.ebCleanUp ()
    self.mVersionField?.ebCleanUp ()
  //--------------------------- Detach outlets
    self.mAddPackageFromLibraryButton = nil
    self.mAddSymbolFromLibraryButton = nil
    self.mAddSymbolInstancePullDownButton = nil
    self.mAssignedPadProxyTableView = nil
    self.mAssignmentPageView = nil
    self.mAssignmentSplitView = nil
    self.mBindButton = nil
    self.mCommentTextView = nil
    self.mComposedPackageView = nil
    self.mComposedSymbolView = nil
    self.mCopyImageButton = nil
    self.mDescriptionPageView = nil
    self.mDocumentationTableView = nil
    self.mEditSelectedPackagesButton = nil
    self.mEditSelectedSymbolsButton = nil
    self.mExportSelectedPackagesButton = nil
    self.mExportSelectedSymbolsButton = nil
    self.mInconsistentPackagePadNameSetsMessageScrollView = nil
    self.mInconsistentPackagePadNameSetsMessageTextView = nil
    self.mInconsistentPadNameSetTextField = nil
    self.mInconsistentSymbolNameMessageScrollView = nil
    self.mInconsistentSymbolNameMessageTextView = nil
    self.mInfosPageView = nil
    self.mIssueTextView = nil
    self.mLibraryPageView = nil
    self.mMasterView = nil
    self.mNCButton = nil
    self.mPackageBackPadsColorWell = nil
    self.mPackageDisplayHorizontalFlipSwitch = nil
    self.mPackageDisplayVerticalFlipSwitch = nil
    self.mPackageFrontPadsColorWell = nil
    self.mPackageNumbersColorWell = nil
    self.mPackagePageView = nil
    self.mPackageTableView = nil
    self.mPackagesColorWell = nil
    self.mPageSegmentedControl = nil
    self.mPasteImageButton = nil
    self.mPrefixTextField = nil
    self.mRemoveImageButton = nil
    self.mRemoveSelectedDocButton = nil
    self.mRemoveUselessSymbolTypeButton = nil
    self.mRepresentationImageView = nil
    self.mResetSelectedPackageVersionButton = nil
    self.mResetSelectedSymbolVersionButton = nil
    self.mResetSymbolAndPackagesVersionButton = nil
    self.mResetVersionButton = nil
    self.mSaveDocButton = nil
    self.mShowDocButton = nil
    self.mShowPackageBackPadsSwitch = nil
    self.mShowPackageFrontPadsSwitch = nil
    self.mShowPackagePadNumbersSwitch = nil
    self.mShowPackagesSwitch = nil
    self.mSignatureTextField = nil
    self.mStatusImageViewInToolbar = nil
    self.mSymbolDisplayHorizontalFlipSwitch = nil
    self.mSymbolDisplayVerticalFlipSwitch = nil
    self.mSymbolErrorMessageTitleTextField = nil
    self.mSymbolNameTextField = nil
    self.mSymbolPageView = nil
    self.mSymbolTableView = nil
    self.mSymbolTypeTextField = nil
    self.mTitleTextField = nil
    self.mUnbindAllButton = nil
    self.mUnbindButton = nil
    self.mUnconnectedPadsInDeviceTableView = nil
    self.mUnconnectedSymbolPinsInDeviceTableView = nil
    self.mUpdateSelectedPackagesButton = nil
    self.mUpdateSelectedSymbolsButton = nil
    self.mUpdateSymbolAndPackagesButton = nil
    self.mVersionField = nil
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------

