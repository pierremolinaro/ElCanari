//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(DeviceDocument) class DeviceDocument : EBManagedDocument {

  //····················································································································
  //   Array controller: mPackageController
  //····················································································································

  var mPackageController = ArrayController_DeviceDocument_mPackageController ()

  //····················································································································
  //   Array controller: mDocumentationController
  //····················································································································

  var mDocumentationController = ArrayController_DeviceDocument_mDocumentationController ()

  //····················································································································
  //   Array controller: mPackageDisplayController
  //····················································································································

  var mPackageDisplayController = ArrayController_DeviceDocument_mPackageDisplayController ()

  //····················································································································
  //   Transient property: mStatusMessage
  //····················································································································

  var mStatusMessage_property = EBTransientProperty_String ()

  //····················································································································

  var mStatusMessage_property_selection : EBSelection <String> {
    return self.mStatusMessage_property.prop
  }

  //····················································································································

  var mStatusMessage : String? {
    switch self.mStatusMessage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mMetadataStatus
  //····················································································································

  var mMetadataStatus_property = EBTransientProperty_MetadataStatus ()

  //····················································································································

  var mMetadataStatus_property_selection : EBSelection <MetadataStatus> {
    return self.mMetadataStatus_property.prop
  }

  //····················································································································

  var mMetadataStatus : MetadataStatus? {
    switch self.mMetadataStatus_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: documentFilePath
  //····················································································································

  var documentFilePath_property = EBTransientProperty_String ()

  //····················································································································

  var documentFilePath_property_selection : EBSelection <String> {
    return self.documentFilePath_property.prop
  }

  //····················································································································

  var documentFilePath : String? {
    switch self.documentFilePath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: mStatusImage
  //····················································································································

  var mStatusImage_property = EBTransientProperty_NSImage ()

  //····················································································································

  var mStatusImage_property_selection : EBSelection <NSImage> {
    return self.mStatusImage_property.prop
  }

  //····················································································································

  var mStatusImage : NSImage? {
    switch self.mStatusImage_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }


  //····················································································································
  //    Outlets
  //····················································································································

  @IBOutlet var mAddPackageFromLibraryButton : EBButton?
  @IBOutlet var mAssignmentPageView : CanariViewWithKeyView?
  @IBOutlet var mCommentTextView : EBTextView?
  @IBOutlet var mComposedPackageView : EBView?
  @IBOutlet var mCopyImageButton : EBButton?
  @IBOutlet var mDescriptionPageView : CanariViewWithKeyView?
  @IBOutlet var mDocumentationTableView : DeviceDocumentationTableView?
  @IBOutlet var mEditSelectedPackagesButton : EBButton?
  @IBOutlet var mExportSelectedPackagesButton : EBButton?
  @IBOutlet var mInfosPageView : CanariViewWithKeyView?
  @IBOutlet var mIssueTextView : EBTextObserverView?
  @IBOutlet var mLibraryPageView : CanariViewWithKeyView?
  @IBOutlet var mMasterView : NSView?
  @IBOutlet var mPackageDisplayHorizontalFlipSwitch : EBSwitch?
  @IBOutlet var mPackageDisplayVerticalFlipSwitch : EBSwitch?
  @IBOutlet var mPackagePageView : CanariViewWithKeyView?
  @IBOutlet var mPackageTableView : EBTableView?
  @IBOutlet var mPageSegmentedControl : CanariSegmentedControl?
  @IBOutlet var mPasteImageButton : EBButton?
  @IBOutlet var mPrefixTextField : EBTextField?
  @IBOutlet var mRemoveImageButton : EBButton?
  @IBOutlet var mRemoveSelectedDocButton : EBButton?
  @IBOutlet var mRepresentationImageView : DeviceDroppableImageView?
  @IBOutlet var mResetSelectedPackageVersionButton : EBButton?
  @IBOutlet var mResetVersionButton : EBButton?
  @IBOutlet var mSaveDocButton : EBButton?
  @IBOutlet var mShowDocButton : EBButton?
  @IBOutlet var mShowPackageBackPadsSwitch : EBSwitch?
  @IBOutlet var mShowPackageFrontPadsSwitch : EBSwitch?
  @IBOutlet var mShowPackagePadNumbersSwitch : EBSwitch?
  @IBOutlet var mShowPackagesSwitch : EBSwitch?
  @IBOutlet var mSignatureTextField : CanariSignatureField?
  @IBOutlet var mStatusImageViewInToolbar : EBImageObserverView?
  @IBOutlet var mSymbolPageView : CanariViewWithKeyView?
  @IBOutlet var mTitleTextField : EBTextField?
  @IBOutlet var mUpdateSelectedPackagesButton : EBButton?
  @IBOutlet var mVersionField : CanariVersionField?

  //····················································································································
  //    Multiple bindings controllers
  //····················································································································

  var mController_mCopyImageButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mRemoveImageButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mRemoveSelectedDocButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mShowDocButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mSaveDocButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mResetSelectedPackageVersionButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mEditSelectedPackagesButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mExportSelectedPackagesButton_enabled : MultipleBindingController_enabled? = nil
  var mController_mUpdateSelectedPackagesButton_enabled : MultipleBindingController_enabled? = nil

  //····················································································································
  //    Document file path
  //····················································································································
  // Cette méthode est appelée après tout enregistrement, qu'il y ait changement de nom ou pas.

  override var fileModificationDate : Date? {
    get {
      return super.fileModificationDate
    }
    set{
      super.fileModificationDate = newValue
      self.documentFilePath_property.postEvent ()
    }
  }

  //····················································································································

  func computeTransient_documentFilePath () -> String {
    var documentFilePath = ""
    if let url = self.fileURL {
      documentFilePath = url.path
    }
    return documentFilePath
  }

  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
  //--- Array controller property: mPackageController
    self.mPackageController.addExplorer (name: "mPackageController", y:&y, view:view)
  //--- Array controller property: mDocumentationController
    self.mDocumentationController.addExplorer (name: "mDocumentationController", y:&y, view:view)
  //--- Array controller property: mPackageDisplayController
    self.mPackageDisplayController.addExplorer (name: "mPackageDisplayController", y:&y, view:view)
  //---
    super.populateExplorerWindow (&y, view:view)
  }

  //····················································································································
  //    windowNibName
  //····················································································································

  override var windowNibName : NSNib.Name {
    return NSNib.Name ("DeviceDocument")
  }
  
  //····················································································································
  //    rootEntityClassName
  //····················································································································

  override func rootEntityClassName () -> String {
    return "DeviceRoot"
  }

  //····················································································································
  //    rootObject
  //····················································································································

  var rootObject : DeviceRoot { get { return mRootObject as! DeviceRoot } }

  //····················································································································
  //    windowControllerDidLoadNib
  //····················································································································

  override func windowControllerDidLoadNib (_ aController: NSWindowController) {
    super.windowControllerDidLoadNib (aController)
  //--------------------------- Outlet checking
    if let outlet : Any = self.mAddPackageFromLibraryButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mAddPackageFromLibraryButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mAddPackageFromLibraryButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mAssignmentPageView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mAssignmentPageView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mAssignmentPageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mCommentTextView {
      if !(outlet is EBTextView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mCommentTextView' outlet is not an instance of 'EBTextView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mCommentTextView' outlet is nil"
      )
    }
    if let outlet : Any = self.mComposedPackageView {
      if !(outlet is EBView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mComposedPackageView' outlet is not an instance of 'EBView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mComposedPackageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mCopyImageButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mCopyImageButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mCopyImageButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mDescriptionPageView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mDescriptionPageView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mDescriptionPageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mDocumentationTableView {
      if !(outlet is DeviceDocumentationTableView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mDocumentationTableView' outlet is not an instance of 'DeviceDocumentationTableView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mDocumentationTableView' outlet is nil"
      )
    }
    if let outlet : Any = self.mEditSelectedPackagesButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mEditSelectedPackagesButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mEditSelectedPackagesButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mExportSelectedPackagesButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mExportSelectedPackagesButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mExportSelectedPackagesButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mInfosPageView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mInfosPageView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mInfosPageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mIssueTextView {
      if !(outlet is EBTextObserverView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mIssueTextView' outlet is not an instance of 'EBTextObserverView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mIssueTextView' outlet is nil"
      )
    }
    if let outlet : Any = self.mLibraryPageView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mLibraryPageView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mLibraryPageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mMasterView {
      if !(outlet is NSView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mMasterView' outlet is not an instance of 'NSView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mMasterView' outlet is nil"
      )
    }
    if let outlet : Any = self.mPackageDisplayHorizontalFlipSwitch {
      if !(outlet is EBSwitch) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPackageDisplayHorizontalFlipSwitch' outlet is not an instance of 'EBSwitch'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPackageDisplayHorizontalFlipSwitch' outlet is nil"
      )
    }
    if let outlet : Any = self.mPackageDisplayVerticalFlipSwitch {
      if !(outlet is EBSwitch) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPackageDisplayVerticalFlipSwitch' outlet is not an instance of 'EBSwitch'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPackageDisplayVerticalFlipSwitch' outlet is nil"
      )
    }
    if let outlet : Any = self.mPackagePageView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPackagePageView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPackagePageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mPackageTableView {
      if !(outlet is EBTableView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPackageTableView' outlet is not an instance of 'EBTableView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPackageTableView' outlet is nil"
      )
    }
    if let outlet : Any = self.mPageSegmentedControl {
      if !(outlet is CanariSegmentedControl) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPageSegmentedControl' outlet is not an instance of 'CanariSegmentedControl'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPageSegmentedControl' outlet is nil"
      )
    }
    if let outlet : Any = self.mPasteImageButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPasteImageButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPasteImageButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mPrefixTextField {
      if !(outlet is EBTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mPrefixTextField' outlet is not an instance of 'EBTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mPrefixTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mRemoveImageButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mRemoveImageButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mRemoveImageButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mRemoveSelectedDocButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mRemoveSelectedDocButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mRemoveSelectedDocButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mRepresentationImageView {
      if !(outlet is DeviceDroppableImageView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mRepresentationImageView' outlet is not an instance of 'DeviceDroppableImageView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mRepresentationImageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mResetSelectedPackageVersionButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mResetSelectedPackageVersionButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mResetSelectedPackageVersionButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mResetVersionButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mResetVersionButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mResetVersionButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mSaveDocButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSaveDocButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSaveDocButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mShowDocButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mShowDocButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mShowDocButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mShowPackageBackPadsSwitch {
      if !(outlet is EBSwitch) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mShowPackageBackPadsSwitch' outlet is not an instance of 'EBSwitch'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mShowPackageBackPadsSwitch' outlet is nil"
      )
    }
    if let outlet : Any = self.mShowPackageFrontPadsSwitch {
      if !(outlet is EBSwitch) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mShowPackageFrontPadsSwitch' outlet is not an instance of 'EBSwitch'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mShowPackageFrontPadsSwitch' outlet is nil"
      )
    }
    if let outlet : Any = self.mShowPackagePadNumbersSwitch {
      if !(outlet is EBSwitch) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mShowPackagePadNumbersSwitch' outlet is not an instance of 'EBSwitch'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mShowPackagePadNumbersSwitch' outlet is nil"
      )
    }
    if let outlet : Any = self.mShowPackagesSwitch {
      if !(outlet is EBSwitch) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mShowPackagesSwitch' outlet is not an instance of 'EBSwitch'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mShowPackagesSwitch' outlet is nil"
      )
    }
    if let outlet : Any = self.mSignatureTextField {
      if !(outlet is CanariSignatureField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSignatureTextField' outlet is not an instance of 'CanariSignatureField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSignatureTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mStatusImageViewInToolbar {
      if !(outlet is EBImageObserverView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mStatusImageViewInToolbar' outlet is not an instance of 'EBImageObserverView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mStatusImageViewInToolbar' outlet is nil"
      )
    }
    if let outlet : Any = self.mSymbolPageView {
      if !(outlet is CanariViewWithKeyView) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mSymbolPageView' outlet is not an instance of 'CanariViewWithKeyView'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mSymbolPageView' outlet is nil"
      )
    }
    if let outlet : Any = self.mTitleTextField {
      if !(outlet is EBTextField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mTitleTextField' outlet is not an instance of 'EBTextField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mTitleTextField' outlet is nil"
      )
    }
    if let outlet : Any = self.mUpdateSelectedPackagesButton {
      if !(outlet is EBButton) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mUpdateSelectedPackagesButton' outlet is not an instance of 'EBButton'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mUpdateSelectedPackagesButton' outlet is nil"
      )
    }
    if let outlet : Any = self.mVersionField {
      if !(outlet is CanariVersionField) {
        presentErrorWindow (
          file: #file,
          line: #line,
          errorMessage: "the 'mVersionField' outlet is not an instance of 'CanariVersionField'"
        )
      }
    }else{
      presentErrorWindow (
        file: #file,
        line: #line,
        errorMessage: "the 'mVersionField' outlet is nil"
      )
    }
  //--- Array controller property: mPackageController
    self.mPackageController.bind_model (self.rootObject.packages_property)
  //--- Array controller property: mDocumentationController
    self.mDocumentationController.bind_model (self.rootObject.mDocs_property)
  //--- Array controller property: mPackageDisplayController
    self.mPackageDisplayController.bind_model (self.rootObject.packages_property)
  //--- Atomic property: mStatusMessage
    self.mStatusMessage_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceDocument_mStatusMessage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.mStatusMessage_property)
  //--- Atomic property: mMetadataStatus
    self.mMetadataStatus_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceDocument_mMetadataStatus (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.mMetadataStatus_property)
  //--- Atomic property: mStatusImage
    self.mStatusImage_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.rootObject.issues_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.rootObject.issues_property_selection) {
          case (.single (let v0)) :
            return .single (transient_DeviceDocument_mStatusImage (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.rootObject.issues_property.addEBObserver (self.mStatusImage_property)
    self.mDocumentationController.bind_tableView (self.mDocumentationTableView, file: #file, line: #line)
    self.mPackageController.bind_tableView (self.mPackageTableView, file: #file, line: #line)
    self.mPackageDisplayController.bind_ebView (self.mComposedPackageView)
  //--------------------------- Install regular bindings
    self.mPageSegmentedControl?.bind_selectedPage (self.rootObject.selectedPageIndex_property, file: #file, line: #line)
    self.mSignatureTextField?.bind_signature (self.signatureObserver_property, file: #file, line: #line)
    self.mVersionField?.bind_version (self.versionObserver_property, file: #file, line: #line)
    self.mVersionField?.bind_versionShouldChange (self.versionShouldChangeObserver_property, file: #file, line: #line)
    self.mStatusImageViewInToolbar?.bind_image (self.mStatusImage_property, file: #file, line: #line)
    self.mStatusImageViewInToolbar?.bind_tooltip (self.mStatusMessage_property, file: #file, line: #line)
    self.mIssueTextView?.bind_valueObserver (self.mStatusMessage_property, file: #file, line: #line)
    self.mTitleTextField?.bind_value (self.rootObject.title_property, file: #file, line: #line, sendContinously:true)
    self.mRepresentationImageView?.bind_imageData (self.rootObject.representationImageData_property, file: #file, line: #line)
    self.mComposedPackageView?.bind_horizontalFlip (self.rootObject.mPackageDisplayHorizontalFlip_property, file: #file, line: #line)
    self.mComposedPackageView?.bind_verticalFlip (self.rootObject.mPackageDisplayVerticalFlip_property, file: #file, line: #line)
    self.mComposedPackageView?.bind_zoom (self.rootObject.mPackageDisplayZoom_property, file: #file, line: #line)
    self.mPackageDisplayHorizontalFlipSwitch?.bind_value (self.rootObject.mPackageDisplayHorizontalFlip_property, file: #file, line: #line)
    self.mPackageDisplayVerticalFlipSwitch?.bind_value (self.rootObject.mPackageDisplayVerticalFlip_property, file: #file, line: #line)
    self.mShowPackagesSwitch?.bind_value (self.rootObject.mShowPackages_property, file: #file, line: #line)
    self.mShowPackagePadNumbersSwitch?.bind_value (self.rootObject.mShowPackagePadNumbers_property, file: #file, line: #line)
    self.mShowPackageFrontPadsSwitch?.bind_value (self.rootObject.mShowPackageFrontPads_property, file: #file, line: #line)
    self.mShowPackageBackPadsSwitch?.bind_value (self.rootObject.mShowPackageBackPads_property, file: #file, line: #line)
    self.mPrefixTextField?.bind_value (self.rootObject.prefix_property, file: #file, line: #line, sendContinously:true)
    self.mCommentTextView?.bind_value (self.rootObject.comments_property, file: #file, line: #line)
  //--------------------------- Install multiple bindings
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return self.rootObject.imageIsValid_property_selection
        },
        outlet: self.mCopyImageButton
      )
      self.rootObject.imageIsValid_property.addEBObserver (controller)
      self.mController_mCopyImageButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return self.rootObject.imageIsValid_property_selection
        },
        outlet: self.mRemoveImageButton
      )
      self.rootObject.imageIsValid_property.addEBObserver (controller)
      self.mController_mRemoveImageButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mDocumentationController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mRemoveSelectedDocButton
      )
      self.mDocumentationController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mRemoveSelectedDocButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mDocumentationController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mShowDocButton
      )
      self.mDocumentationController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mShowDocButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mDocumentationController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mSaveDocButton
      )
      self.mDocumentationController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mSaveDocButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mPackageController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mResetSelectedPackageVersionButton
      )
      self.mPackageController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mResetSelectedPackageVersionButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mPackageController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mEditSelectedPackagesButton
      )
      self.mPackageController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mEditSelectedPackagesButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mPackageController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mExportSelectedPackagesButton
      )
      self.mPackageController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mExportSelectedPackagesButton_enabled = controller
    }
    do{
      let controller = MultipleBindingController_enabled (
        computeFunction: {
          return (self.mPackageController.selectedArray_property.count_property_selection > EBSelection.single (0))
        },
        outlet: self.mUpdateSelectedPackagesButton
      )
      self.mPackageController.selectedArray_property.count_property.addEBObserver (controller)
      self.mController_mUpdateSelectedPackagesButton_enabled = controller
    }
  //--------------------------- Set targets / actions
    self.mPasteImageButton?.target = self
    self.mPasteImageButton?.action = #selector (DeviceDocument.pasteImageAction (_:))
    self.mCopyImageButton?.target = self
    self.mCopyImageButton?.action = #selector (DeviceDocument.copyImageAction (_:))
    self.mRemoveImageButton?.target = self
    self.mRemoveImageButton?.action = #selector (DeviceDocument.removeImageAction (_:))
    self.mRemoveSelectedDocButton?.target = mDocumentationController
    self.mRemoveSelectedDocButton?.action = #selector (ArrayController_DeviceDocument_mDocumentationController.remove (_:))
    self.mShowDocButton?.target = self
    self.mShowDocButton?.action = #selector (DeviceDocument.showDocAction (_:))
    self.mSaveDocButton?.target = self
    self.mSaveDocButton?.action = #selector (DeviceDocument.saveDocAction (_:))
    self.mAddPackageFromLibraryButton?.target = self
    self.mAddPackageFromLibraryButton?.action = #selector (DeviceDocument.addPackageFromLibraryAction (_:))
    self.mResetSelectedPackageVersionButton?.target = self
    self.mResetSelectedPackageVersionButton?.action = #selector (DeviceDocument.resetSelectedPackageVersion (_:))
    self.mEditSelectedPackagesButton?.target = self
    self.mEditSelectedPackagesButton?.action = #selector (DeviceDocument.editSelectedPackages (_:))
    self.mExportSelectedPackagesButton?.target = self
    self.mExportSelectedPackagesButton?.action = #selector (DeviceDocument.exportSelectedPackages (_:))
    self.mUpdateSelectedPackagesButton?.target = self
    self.mUpdateSelectedPackagesButton?.action = #selector (DeviceDocument.updateSelectedPackages (_:))
    self.mResetVersionButton?.target = self
    self.mResetVersionButton?.action = #selector (DeviceDocument.resetVersionAction (_:))
  //--------------------------- Read documentFilePath model 
    self.documentFilePath_property.readModelFunction = { [weak self] in
      if let r = self?.computeTransient_documentFilePath () {
        return .single (r)
      }else{
        return .empty
      }
    }

  }

  //····················································································································
  //   removeWindowController
  //····················································································································

  override func removeUserInterface () {
  //--------------------------- Unbind regular bindings
    self.mPageSegmentedControl?.unbind_selectedPage ()
    self.mSignatureTextField?.unbind_signature ()
    self.mVersionField?.unbind_version ()
    self.mVersionField?.unbind_versionShouldChange ()
    self.mStatusImageViewInToolbar?.unbind_image ()
    self.mStatusImageViewInToolbar?.unbind_tooltip ()
    self.mIssueTextView?.unbind_valueObserver ()
    self.mTitleTextField?.unbind_value ()
    self.mRepresentationImageView?.unbind_imageData ()
    self.mComposedPackageView?.unbind_horizontalFlip ()
    self.mComposedPackageView?.unbind_verticalFlip ()
    self.mComposedPackageView?.unbind_zoom ()
    self.mPackageDisplayHorizontalFlipSwitch?.unbind_value ()
    self.mPackageDisplayVerticalFlipSwitch?.unbind_value ()
    self.mShowPackagesSwitch?.unbind_value ()
    self.mShowPackagePadNumbersSwitch?.unbind_value ()
    self.mShowPackageFrontPadsSwitch?.unbind_value ()
    self.mShowPackageBackPadsSwitch?.unbind_value ()
    self.mPrefixTextField?.unbind_value ()
    self.mCommentTextView?.unbind_value ()
  //--------------------------- Unbind multiple bindings
    self.self.rootObject.imageIsValid_property.removeEBObserver (self.mController_mCopyImageButton_enabled!)
    self.mController_mCopyImageButton_enabled = nil
    self.self.rootObject.imageIsValid_property.removeEBObserver (self.mController_mRemoveImageButton_enabled!)
    self.mController_mRemoveImageButton_enabled = nil
    self.self.mDocumentationController.selectedArray_property.count_property.removeEBObserver (self.mController_mRemoveSelectedDocButton_enabled!)
    self.mController_mRemoveSelectedDocButton_enabled = nil
    self.self.mDocumentationController.selectedArray_property.count_property.removeEBObserver (self.mController_mShowDocButton_enabled!)
    self.mController_mShowDocButton_enabled = nil
    self.self.mDocumentationController.selectedArray_property.count_property.removeEBObserver (self.mController_mSaveDocButton_enabled!)
    self.mController_mSaveDocButton_enabled = nil
    self.self.mPackageController.selectedArray_property.count_property.removeEBObserver (self.mController_mResetSelectedPackageVersionButton_enabled!)
    self.mController_mResetSelectedPackageVersionButton_enabled = nil
    self.self.mPackageController.selectedArray_property.count_property.removeEBObserver (self.mController_mEditSelectedPackagesButton_enabled!)
    self.mController_mEditSelectedPackagesButton_enabled = nil
    self.self.mPackageController.selectedArray_property.count_property.removeEBObserver (self.mController_mExportSelectedPackagesButton_enabled!)
    self.mController_mExportSelectedPackagesButton_enabled = nil
    self.self.mPackageController.selectedArray_property.count_property.removeEBObserver (self.mController_mUpdateSelectedPackagesButton_enabled!)
    self.mController_mUpdateSelectedPackagesButton_enabled = nil
  //--------------------------- Unbind array controllers
    self.mDocumentationController.unbind_tableView (self.mDocumentationTableView)
    self.mPackageController.unbind_tableView (self.mPackageTableView)
    self.mPackageDisplayController.unbind_ebView (self.mComposedPackageView)
  //--- Array controller property: mPackageController
    self.mPackageController.unbind_model ()
  //--- Array controller property: mDocumentationController
    self.mDocumentationController.unbind_model ()
  //--- Array controller property: mPackageDisplayController
    self.mPackageDisplayController.unbind_model ()
    self.rootObject.issues_property.removeEBObserver (self.mStatusMessage_property)
    self.rootObject.issues_property.removeEBObserver (self.mMetadataStatus_property)
    self.rootObject.issues_property.removeEBObserver (self.mStatusImage_property)
  //--------------------------- Remove targets / actions
    self.mPasteImageButton?.target = nil
    self.mCopyImageButton?.target = nil
    self.mRemoveImageButton?.target = nil
    self.mRemoveSelectedDocButton?.target = nil
    self.mShowDocButton?.target = nil
    self.mSaveDocButton?.target = nil
    self.mAddPackageFromLibraryButton?.target = nil
    self.mResetSelectedPackageVersionButton?.target = nil
    self.mEditSelectedPackagesButton?.target = nil
    self.mExportSelectedPackagesButton?.target = nil
    self.mUpdateSelectedPackagesButton?.target = nil
    self.mResetVersionButton?.target = nil
  //--------------------------- Clean up outlets
    self.mAddPackageFromLibraryButton?.ebCleanUp ()
    self.mAssignmentPageView?.ebCleanUp ()
    self.mCommentTextView?.ebCleanUp ()
    self.mComposedPackageView?.ebCleanUp ()
    self.mCopyImageButton?.ebCleanUp ()
    self.mDescriptionPageView?.ebCleanUp ()
    self.mDocumentationTableView?.ebCleanUp ()
    self.mEditSelectedPackagesButton?.ebCleanUp ()
    self.mExportSelectedPackagesButton?.ebCleanUp ()
    self.mInfosPageView?.ebCleanUp ()
    self.mIssueTextView?.ebCleanUp ()
    self.mLibraryPageView?.ebCleanUp ()
    self.mMasterView?.ebCleanUp ()
    self.mPackageDisplayHorizontalFlipSwitch?.ebCleanUp ()
    self.mPackageDisplayVerticalFlipSwitch?.ebCleanUp ()
    self.mPackagePageView?.ebCleanUp ()
    self.mPackageTableView?.ebCleanUp ()
    self.mPageSegmentedControl?.ebCleanUp ()
    self.mPasteImageButton?.ebCleanUp ()
    self.mPrefixTextField?.ebCleanUp ()
    self.mRemoveImageButton?.ebCleanUp ()
    self.mRemoveSelectedDocButton?.ebCleanUp ()
    self.mRepresentationImageView?.ebCleanUp ()
    self.mResetSelectedPackageVersionButton?.ebCleanUp ()
    self.mResetVersionButton?.ebCleanUp ()
    self.mSaveDocButton?.ebCleanUp ()
    self.mShowDocButton?.ebCleanUp ()
    self.mShowPackageBackPadsSwitch?.ebCleanUp ()
    self.mShowPackageFrontPadsSwitch?.ebCleanUp ()
    self.mShowPackagePadNumbersSwitch?.ebCleanUp ()
    self.mShowPackagesSwitch?.ebCleanUp ()
    self.mSignatureTextField?.ebCleanUp ()
    self.mStatusImageViewInToolbar?.ebCleanUp ()
    self.mSymbolPageView?.ebCleanUp ()
    self.mTitleTextField?.ebCleanUp ()
    self.mUpdateSelectedPackagesButton?.ebCleanUp ()
    self.mVersionField?.ebCleanUp ()
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

