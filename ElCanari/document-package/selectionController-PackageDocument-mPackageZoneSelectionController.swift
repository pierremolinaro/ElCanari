//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    SelectionController_PackageDocument_mPackageZoneSelectionController                                              *
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SelectionController_PackageDocument_mPackageZoneSelectionController : EBObject {

  //····················································································································
  //   Selection observable property: x
  //····················································································································

  let x_property = EBPropertyProxy_Int ()

  var x_property_selection : EBSelection <Int> {
    return self.x_property.prop
  }

  //····················································································································
  //   Selection observable property: y
  //····················································································································

  let y_property = EBPropertyProxy_Int ()

  var y_property_selection : EBSelection <Int> {
    return self.y_property.prop
  }

  //····················································································································
  //   Selection observable property: width
  //····················································································································

  let width_property = EBPropertyProxy_Int ()

  var width_property_selection : EBSelection <Int> {
    return self.width_property.prop
  }

  //····················································································································
  //   Selection observable property: height
  //····················································································································

  let height_property = EBPropertyProxy_Int ()

  var height_property_selection : EBSelection <Int> {
    return self.height_property.prop
  }

  //····················································································································
  //   Selection observable property: xUnit
  //····················································································································

  let xUnit_property = EBPropertyProxy_Int ()

  var xUnit_property_selection : EBSelection <Int> {
    return self.xUnit_property.prop
  }

  //····················································································································
  //   Selection observable property: yUnit
  //····················································································································

  let yUnit_property = EBPropertyProxy_Int ()

  var yUnit_property_selection : EBSelection <Int> {
    return self.yUnit_property.prop
  }

  //····················································································································
  //   Selection observable property: widthUnit
  //····················································································································

  let widthUnit_property = EBPropertyProxy_Int ()

  var widthUnit_property_selection : EBSelection <Int> {
    return self.widthUnit_property.prop
  }

  //····················································································································
  //   Selection observable property: heightUnit
  //····················································································································

  let heightUnit_property = EBPropertyProxy_Int ()

  var heightUnit_property_selection : EBSelection <Int> {
    return self.heightUnit_property.prop
  }

  //····················································································································
  //   Selection observable property: zoneName
  //····················································································································

  let zoneName_property = EBPropertyProxy_String ()

  var zoneName_property_selection : EBSelection <String> {
    return self.zoneName_property.prop
  }

  //····················································································································
  //   Selection observable property: xName
  //····················································································································

  let xName_property = EBPropertyProxy_Int ()

  var xName_property_selection : EBSelection <Int> {
    return self.xName_property.prop
  }

  //····················································································································
  //   Selection observable property: yName
  //····················································································································

  let yName_property = EBPropertyProxy_Int ()

  var yName_property_selection : EBSelection <Int> {
    return self.yName_property.prop
  }

  //····················································································································
  //   Selection observable property: xNameUnit
  //····················································································································

  let xNameUnit_property = EBPropertyProxy_Int ()

  var xNameUnit_property_selection : EBSelection <Int> {
    return self.xNameUnit_property.prop
  }

  //····················································································································
  //   Selection observable property: yNameUnit
  //····················································································································

  let yNameUnit_property = EBPropertyProxy_Int ()

  var yNameUnit_property_selection : EBSelection <Int> {
    return self.yNameUnit_property.prop
  }

  //····················································································································
  //   Selection observable property: zoneNumbering
  //····················································································································

  let zoneNumbering_property = EBPropertyProxy_PadNumbering ()

  var zoneNumbering_property_selection : EBSelection <PadNumbering> {
    return self.zoneNumbering_property.prop
  }

  //····················································································································
  //   Selection observable property: objectDisplay
  //····················································································································

  let objectDisplay_property = EBTransientProperty_EBShape ()

  var objectDisplay_property_selection : EBSelection <EBShape> {
    return self.objectDisplay_property.prop
  }

  //····················································································································
  //   Selection observable property: selectionDisplay
  //····················································································································

  let selectionDisplay_property = EBTransientProperty_EBShape ()

  var selectionDisplay_property_selection : EBSelection <EBShape> {
    return self.selectionDisplay_property.prop
  }

  //····················································································································
  //   Selection observable property: issues
  //····················································································································

  let issues_property = EBTransientProperty_CanariIssueArray ()

  var issues_property_selection : EBSelection <CanariIssueArray> {
    return self.issues_property.prop
  }

  //····················································································································
  //   Selection observable property: rect
  //····················································································································

  let rect_property = EBTransientProperty_CanariRect ()

  var rect_property_selection : EBSelection <CanariRect> {
    return self.rect_property.prop
  }

  //····················································································································
  //   Selected array (not observable)
  //····················································································································

  var selectedArray : [PackageZone] { return self.mActualModel.propval }

  //····················································································································
  //   BIND SELECTION
  //····················································································································

   private var mModel : TransientArrayOf_PackageObject? = nil
   private let mActualModel = TransientArrayOf_PackageZone ()

  //····················································································································

  func bind_selection (model : TransientArrayOf_PackageObject, file : String, line : Int) {
    self.mModel = model
    self.mActualModel.mReadModelFunction = { [weak self] () -> EBSelection < [PackageZone] > in
      if let model = self?.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = [PackageZone] ()
          for baseObject in v {
            if let object = baseObject as? PackageZone {
              s.append (object)
            }
          }
          return .single (s)
        }
      }else{
        return .empty
      }
    }
    model.addEBObserver (self.mActualModel)
    self.bind_property_x (model: self.mActualModel)
    self.bind_property_y (model: self.mActualModel)
    self.bind_property_width (model: self.mActualModel)
    self.bind_property_height (model: self.mActualModel)
    self.bind_property_xUnit (model: self.mActualModel)
    self.bind_property_yUnit (model: self.mActualModel)
    self.bind_property_widthUnit (model: self.mActualModel)
    self.bind_property_heightUnit (model: self.mActualModel)
    self.bind_property_zoneName (model: self.mActualModel)
    self.bind_property_xName (model: self.mActualModel)
    self.bind_property_yName (model: self.mActualModel)
    self.bind_property_xNameUnit (model: self.mActualModel)
    self.bind_property_yNameUnit (model: self.mActualModel)
    self.bind_property_zoneNumbering (model: self.mActualModel)
    self.bind_property_objectDisplay (model: self.mActualModel)
    self.bind_property_selectionDisplay (model: self.mActualModel)
    self.bind_property_issues (model: self.mActualModel)
    self.bind_property_rect (model: self.mActualModel)
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  func unbind_selection () {
    self.mModel?.removeEBObserver (self.mActualModel)
    self.mActualModel.mReadModelFunction = nil
  //--- x
    self.x_property.mReadModelFunction = nil 
    self.x_property.mWriteModelFunction = nil 
    self.x_property.mValidateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_x (self.x_property)
  //--- y
    self.y_property.mReadModelFunction = nil 
    self.y_property.mWriteModelFunction = nil 
    self.y_property.mValidateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_y (self.y_property)
  //--- width
    self.width_property.mReadModelFunction = nil 
    self.width_property.mWriteModelFunction = nil 
    self.width_property.mValidateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_width (self.width_property)
  //--- height
    self.height_property.mReadModelFunction = nil 
    self.height_property.mWriteModelFunction = nil 
    self.height_property.mValidateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_height (self.height_property)
  //--- xUnit
    self.xUnit_property.mReadModelFunction = nil 
    self.xUnit_property.mWriteModelFunction = nil 
    self.xUnit_property.mValidateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_xUnit (self.xUnit_property)
  //--- yUnit
    self.yUnit_property.mReadModelFunction = nil 
    self.yUnit_property.mWriteModelFunction = nil 
    self.yUnit_property.mValidateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_yUnit (self.yUnit_property)
  //--- widthUnit
    self.widthUnit_property.mReadModelFunction = nil 
    self.widthUnit_property.mWriteModelFunction = nil 
    self.widthUnit_property.mValidateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_widthUnit (self.widthUnit_property)
  //--- heightUnit
    self.heightUnit_property.mReadModelFunction = nil 
    self.heightUnit_property.mWriteModelFunction = nil 
    self.heightUnit_property.mValidateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_heightUnit (self.heightUnit_property)
  //--- zoneName
    self.zoneName_property.mReadModelFunction = nil 
    self.zoneName_property.mWriteModelFunction = nil 
    self.zoneName_property.mValidateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_zoneName (self.zoneName_property)
  //--- xName
    self.xName_property.mReadModelFunction = nil 
    self.xName_property.mWriteModelFunction = nil 
    self.xName_property.mValidateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_xName (self.xName_property)
  //--- yName
    self.yName_property.mReadModelFunction = nil 
    self.yName_property.mWriteModelFunction = nil 
    self.yName_property.mValidateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_yName (self.yName_property)
  //--- xNameUnit
    self.xNameUnit_property.mReadModelFunction = nil 
    self.xNameUnit_property.mWriteModelFunction = nil 
    self.xNameUnit_property.mValidateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_xNameUnit (self.xNameUnit_property)
  //--- yNameUnit
    self.yNameUnit_property.mReadModelFunction = nil 
    self.yNameUnit_property.mWriteModelFunction = nil 
    self.yNameUnit_property.mValidateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_yNameUnit (self.yNameUnit_property)
  //--- zoneNumbering
    self.zoneNumbering_property.mReadModelFunction = nil 
    self.zoneNumbering_property.mWriteModelFunction = nil 
    self.zoneNumbering_property.mValidateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_zoneNumbering (self.zoneNumbering_property)
  //--- objectDisplay
    self.objectDisplay_property.mReadModelFunction = nil 
    self.mActualModel.removeEBObserverOf_objectDisplay (self.objectDisplay_property)
  //--- selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = nil 
    self.mActualModel.removeEBObserverOf_selectionDisplay (self.selectionDisplay_property)
  //--- issues
    self.issues_property.mReadModelFunction = nil 
    self.mActualModel.removeEBObserverOf_issues (self.issues_property)
  //--- rect
    self.rect_property.mReadModelFunction = nil 
    self.mActualModel.removeEBObserverOf_rect (self.rect_property)
  //---
    self.mModel = nil    
  }

  //····················································································································
  //    Explorer
  //····················································································································

  private var mValueExplorer : NSButton?
  private var mExplorerWindow : NSWindow?

  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
    let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
    let tf = NSTextField (frame:secondColumn (y))
    tf.isEnabled = true
    tf.isEditable = false
    tf.stringValue = name
    tf.font = font
    view.addSubview (tf)
    let valueExplorer = NSButton (frame:thirdColumn (y))
    valueExplorer.font = font
    valueExplorer.title = explorerIndexString (ebObjectIndex) + className
    valueExplorer.target = self
    valueExplorer.action = #selector(SelectionController_PackageDocument_mPackageZoneSelectionController.showObjectWindowFromExplorerButton(_:))
    view.addSubview (valueExplorer)
    self.mValueExplorer = valueExplorer
    y += EXPLORER_ROW_HEIGHT
  }
  
  //····················································································································

  func buildExplorerWindow () {
  //-------------------------------------------------- Create Window
    let r = NSRect (x:20.0, y:20.0, width:10.0, height:10.0)
    self.mExplorerWindow = NSWindow (contentRect: r, styleMask: [.titled, .closable], backing: .buffered, defer: true, screen: nil)
  //-------------------------------------------------- Adding properties
    let view = NSView (frame:r)
    var y : CGFloat = 0.0
    createEntryForPropertyNamed (
      "x",
      idx:self.x_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x_property.mObserverExplorer,
      valueExplorer:&self.x_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y",
      idx:self.y_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y_property.mObserverExplorer,
      valueExplorer:&self.y_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "width",
      idx:self.width_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.width_property.mObserverExplorer,
      valueExplorer:&self.width_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "height",
      idx:self.height_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.height_property.mObserverExplorer,
      valueExplorer:&self.height_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xUnit",
      idx:self.xUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xUnit_property.mObserverExplorer,
      valueExplorer:&self.xUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yUnit",
      idx:self.yUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yUnit_property.mObserverExplorer,
      valueExplorer:&self.yUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "widthUnit",
      idx:self.widthUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.widthUnit_property.mObserverExplorer,
      valueExplorer:&self.widthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "heightUnit",
      idx:self.heightUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.heightUnit_property.mObserverExplorer,
      valueExplorer:&self.heightUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoneName",
      idx:self.zoneName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.zoneName_property.mObserverExplorer,
      valueExplorer:&self.zoneName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xName",
      idx:self.xName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xName_property.mObserverExplorer,
      valueExplorer:&self.xName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yName",
      idx:self.yName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yName_property.mObserverExplorer,
      valueExplorer:&self.yName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xNameUnit",
      idx:self.xNameUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xNameUnit_property.mObserverExplorer,
      valueExplorer:&self.xNameUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yNameUnit",
      idx:self.yNameUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yNameUnit_property.mObserverExplorer,
      valueExplorer:&self.yNameUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "zoneNumbering",
      idx:self.zoneNumbering_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.zoneNumbering_property.mObserverExplorer,
      valueExplorer:&self.zoneNumbering_property.mValueExplorer
    )
  //-------------------------------------------------- Finish Window construction
  //--- Resize View
    let viewFrame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    view.frame = viewFrame
  //--- Set content size
    self.mExplorerWindow?.setContentSize (NSSize (width:EXPLORER_ROW_WIDTH + 16.0, height:fmin (600.0, y)))
  //--- Set close button as 'remove window' button
    let closeButton : NSButton? = self.mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton?.target = self
    closeButton?.action = #selector(SelectionController_PackageDocument_mPackageZoneSelectionController.deleteSelectionControllerWindowAction(_:))
  //--- Set window title
    let windowTitle = explorerIndexString (ebObjectIndex) + className
    self.mExplorerWindow!.title = windowTitle
  //--- Add Scroll view
    let frame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    let sw = NSScrollView (frame:frame)
    sw.hasVerticalScroller = true
    sw.documentView = view
    self.mExplorerWindow!.contentView = sw
  }

  //····················································································································
  //   showObjectWindowFromExplorerButton
  //····················································································································

  @objc func showObjectWindowFromExplorerButton (_ : Any) {
    if self.mExplorerWindow == nil {
      self.buildExplorerWindow ()
    }
    self.mExplorerWindow?.makeKeyAndOrderFront(nil)
  }
  
  //····················································································································
  //   deleteSelectionControllerWindowAction
  //····················································································································

  @objc func deleteSelectionControllerWindowAction (_ : Any) {
    self.clearObjectExplorer ()
  }

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  func clearObjectExplorer () {
    if let closeButton = self.mExplorerWindow?.standardWindowButton (.closeButton) {
      closeButton.target = nil
    }
    self.mExplorerWindow?.orderOut (nil)
    self.mExplorerWindow = nil
  }

  //····················································································································

  private final func bind_property_x (model : TransientArrayOf_PackageZone) {
    model.addEBObserverOf_x (self.x_property)
    self.x_property.mReadModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.x_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.x_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.x_property.setProp (inValue)
          }
        }
      }
    }
    self.x_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.x_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_y (model : TransientArrayOf_PackageZone) {
    model.addEBObserverOf_y (self.y_property)
    self.y_property.mReadModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.y_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.y_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.y_property.setProp (inValue)
          }
        }
      }
    }
    self.y_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.y_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_width (model : TransientArrayOf_PackageZone) {
    model.addEBObserverOf_width (self.width_property)
    self.width_property.mReadModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.width_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.width_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.width_property.setProp (inValue)
          }
        }
      }
    }
    self.width_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.width_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_height (model : TransientArrayOf_PackageZone) {
    model.addEBObserverOf_height (self.height_property)
    self.height_property.mReadModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.height_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.height_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.height_property.setProp (inValue)
          }
        }
      }
    }
    self.height_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.height_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_xUnit (model : TransientArrayOf_PackageZone) {
    model.addEBObserverOf_xUnit (self.xUnit_property)
    self.xUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xUnit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.xUnit_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.xUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_yUnit (model : TransientArrayOf_PackageZone) {
    model.addEBObserverOf_yUnit (self.yUnit_property)
    self.yUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yUnit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.yUnit_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.yUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_widthUnit (model : TransientArrayOf_PackageZone) {
    model.addEBObserverOf_widthUnit (self.widthUnit_property)
    self.widthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.widthUnit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.widthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.widthUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.widthUnit_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.widthUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_heightUnit (model : TransientArrayOf_PackageZone) {
    model.addEBObserverOf_heightUnit (self.heightUnit_property)
    self.heightUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.heightUnit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.heightUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.heightUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.heightUnit_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.heightUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_zoneName (model : TransientArrayOf_PackageZone) {
    model.addEBObserverOf_zoneName (self.zoneName_property)
    self.zoneName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.zoneName_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.zoneName_property.mWriteModelFunction = { [weak self] (inValue : String) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.zoneName_property.setProp (inValue)
          }
        }
      }
    }
    self.zoneName_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : String, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.zoneName_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_xName (model : TransientArrayOf_PackageZone) {
    model.addEBObserverOf_xName (self.xName_property)
    self.xName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xName_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xName_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xName_property.setProp (inValue)
          }
        }
      }
    }
    self.xName_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.xName_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_yName (model : TransientArrayOf_PackageZone) {
    model.addEBObserverOf_yName (self.yName_property)
    self.yName_property.mReadModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yName_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yName_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yName_property.setProp (inValue)
          }
        }
      }
    }
    self.yName_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.yName_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_xNameUnit (model : TransientArrayOf_PackageZone) {
    model.addEBObserverOf_xNameUnit (self.xNameUnit_property)
    self.xNameUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xNameUnit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xNameUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xNameUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.xNameUnit_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.xNameUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_yNameUnit (model : TransientArrayOf_PackageZone) {
    model.addEBObserverOf_yNameUnit (self.yNameUnit_property)
    self.yNameUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yNameUnit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yNameUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yNameUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.yNameUnit_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.yNameUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_zoneNumbering (model : TransientArrayOf_PackageZone) {
    model.addEBObserverOf_zoneNumbering (self.zoneNumbering_property)
    self.zoneNumbering_property.mReadModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <PadNumbering> ()
          var isMultipleSelection = false
          for object in v {
            switch object.zoneNumbering_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.zoneNumbering_property.mWriteModelFunction = { [weak self] (inValue : PadNumbering) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.zoneNumbering_property.setProp (inValue)
          }
        }
      }
    }
    self.zoneNumbering_property.mValidateAndWriteModelFunction = { [weak self] (candidateValue : PadNumbering, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.zoneNumbering_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }
  //····················································································································

  private final func bind_property_objectDisplay (model : TransientArrayOf_PackageZone) {
    model.addEBObserverOf_objectDisplay (self.objectDisplay_property)
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_selectionDisplay (model : TransientArrayOf_PackageZone) {
    model.addEBObserverOf_selectionDisplay (self.selectionDisplay_property)
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_issues (model : TransientArrayOf_PackageZone) {
    model.addEBObserverOf_issues (self.issues_property)
    self.issues_property.mReadModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CanariIssueArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.issues_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }
  //····················································································································

  private final func bind_property_rect (model : TransientArrayOf_PackageZone) {
    model.addEBObserverOf_rect (self.rect_property)
    self.rect_property.mReadModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CanariRect> ()
          var isMultipleSelection = false
          for object in v {
            switch object.rect_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }


  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

