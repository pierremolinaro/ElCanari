//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageRoot : ReadOnlyAbstractArrayProperty <PackageRoot> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <PackageRoot>, addedSet inAddedSet : Set <PackageRoot>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_selectedPageIndex_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_selectedInspector_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_comments_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_program_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_horizontalFlip_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_verticalFlip_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_gridStyle_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_gridStep_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_gridStepUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_gridDisplayFactor_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_zoom_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_padNumbering_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_xPlacardUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_yPlacardUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_freePadNumbering_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_gridStepMultipliedByDisplayFactor_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_padNumberDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_issues_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_noIssue_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_selectedPageIndex_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_selectedInspector_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_comments_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_program_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_horizontalFlip_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_verticalFlip_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_gridStyle_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_gridStep_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_gridStepUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_gridDisplayFactor_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_zoom_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_padNumbering_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_xPlacardUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_yPlacardUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_freePadNumbering_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_gridStepMultipliedByDisplayFactor_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_padNumberDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_issues_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_noIssue_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'selectedPageIndex' stored property
  //····················································································································

  private var mObserversOf_selectedPageIndex = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPageIndex_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedPageIndex (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedPageIndex.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedPageIndex_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedPageIndex_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedPageIndex.apply { (_ observer : EBEvent) in
        managedObject.selectedPageIndex_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedPageIndex_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_selectedPageIndex.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedPageIndex_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectedInspector' stored property
  //····················································································································

  private var mObserversOf_selectedInspector = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectedInspector.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedInspector_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectedInspector (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectedInspector.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectedInspector_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectedInspector_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_selectedInspector.apply { (_ observer : EBEvent) in
        managedObject.selectedInspector_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectedInspector_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_selectedInspector.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.selectedInspector_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'comments' stored property
  //····················································································································

  private var mObserversOf_comments = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_comments (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_comments.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.comments_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_comments (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_comments.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.comments_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_comments_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_comments.apply { (_ observer : EBEvent) in
        managedObject.comments_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_comments_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_comments.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.comments_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'program' stored property
  //····················································································································

  private var mObserversOf_program = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_program (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_program.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.program_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_program (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_program.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.program_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_program_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_program.apply { (_ observer : EBEvent) in
        managedObject.program_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_program_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_program.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.program_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'horizontalFlip' stored property
  //····················································································································

  private var mObserversOf_horizontalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_horizontalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_horizontalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.horizontalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_horizontalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_horizontalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.horizontalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_horizontalFlip_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_horizontalFlip.apply { (_ observer : EBEvent) in
        managedObject.horizontalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_horizontalFlip_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_horizontalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.horizontalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'verticalFlip' stored property
  //····················································································································

  private var mObserversOf_verticalFlip = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_verticalFlip (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_verticalFlip.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.verticalFlip_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_verticalFlip (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_verticalFlip.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.verticalFlip_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_verticalFlip_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_verticalFlip.apply { (_ observer : EBEvent) in
        managedObject.verticalFlip_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_verticalFlip_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_verticalFlip.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.verticalFlip_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridStyle' stored property
  //····················································································································

  private var mObserversOf_gridStyle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gridStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridStyle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStyle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridStyle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStyle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gridStyle_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_gridStyle.apply { (_ observer : EBEvent) in
        managedObject.gridStyle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridStyle_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_gridStyle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.gridStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridStep' stored property
  //····················································································································

  private var mObserversOf_gridStep = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gridStep (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridStep.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStep_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridStep (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridStep.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStep_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gridStep_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_gridStep.apply { (_ observer : EBEvent) in
        managedObject.gridStep_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridStep_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_gridStep.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.gridStep_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridStepUnit' stored property
  //····················································································································

  private var mObserversOf_gridStepUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gridStepUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridStepUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStepUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridStepUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridStepUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStepUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gridStepUnit_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_gridStepUnit.apply { (_ observer : EBEvent) in
        managedObject.gridStepUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridStepUnit_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_gridStepUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.gridStepUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridDisplayFactor' stored property
  //····················································································································

  private var mObserversOf_gridDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gridDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridDisplayFactor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridDisplayFactor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridDisplayFactor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridDisplayFactor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gridDisplayFactor_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_gridDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.gridDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridDisplayFactor_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_gridDisplayFactor.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.gridDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'zoom' stored property
  //····················································································································

  private var mObserversOf_zoom = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_zoom.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoom (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_zoom.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.zoom_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_zoom_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_zoom.apply { (_ observer : EBEvent) in
        managedObject.zoom_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_zoom_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_zoom.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.zoom_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padNumbering' stored property
  //····················································································································

  private var mObserversOf_padNumbering = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padNumbering (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNumbering.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumbering_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNumbering (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNumbering.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumbering_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padNumbering_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_padNumbering.apply { (_ observer : EBEvent) in
        managedObject.padNumbering_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNumbering_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_padNumbering.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.padNumbering_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xPlacardUnit' stored property
  //····················································································································

  private var mObserversOf_xPlacardUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xPlacardUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xPlacardUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xPlacardUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xPlacardUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xPlacardUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xPlacardUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xPlacardUnit_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_xPlacardUnit.apply { (_ observer : EBEvent) in
        managedObject.xPlacardUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xPlacardUnit_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_xPlacardUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xPlacardUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yPlacardUnit' stored property
  //····················································································································

  private var mObserversOf_yPlacardUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yPlacardUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yPlacardUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yPlacardUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yPlacardUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yPlacardUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yPlacardUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yPlacardUnit_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_yPlacardUnit.apply { (_ observer : EBEvent) in
        managedObject.yPlacardUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yPlacardUnit_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    self.mObserversOf_yPlacardUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yPlacardUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'freePadNumbering' transient property
  //····················································································································

  private var mObserversOf_freePadNumbering = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_freePadNumbering (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_freePadNumbering.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.freePadNumbering_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_freePadNumbering (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_freePadNumbering.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.freePadNumbering_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_freePadNumbering_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_freePadNumbering.apply { (_ observer : EBEvent) in
        managedObject.freePadNumbering_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_freePadNumbering_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_freePadNumbering.apply { (_ observer : EBEvent) in
        managedObject.freePadNumbering_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'gridStepMultipliedByDisplayFactor' transient property
  //····················································································································

  private var mObserversOf_gridStepMultipliedByDisplayFactor = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_gridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_gridStepMultipliedByDisplayFactor.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStepMultipliedByDisplayFactor_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_gridStepMultipliedByDisplayFactor (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_gridStepMultipliedByDisplayFactor.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.gridStepMultipliedByDisplayFactor_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_gridStepMultipliedByDisplayFactor_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_gridStepMultipliedByDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.gridStepMultipliedByDisplayFactor_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_gridStepMultipliedByDisplayFactor_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_gridStepMultipliedByDisplayFactor.apply { (_ observer : EBEvent) in
        managedObject.gridStepMultipliedByDisplayFactor_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padNumberDisplay' transient property
  //····················································································································

  private var mObserversOf_padNumberDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumberDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumberDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padNumberDisplay_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_padNumberDisplay.apply { (_ observer : EBEvent) in
        managedObject.padNumberDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNumberDisplay_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_padNumberDisplay.apply { (_ observer : EBEvent) in
        managedObject.padNumberDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'noIssue' transient property
  //····················································································································

  private var mObserversOf_noIssue = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_noIssue (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_noIssue.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.noIssue_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_noIssue (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_noIssue.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.noIssue_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_noIssue_toElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_noIssue.apply { (_ observer : EBEvent) in
        managedObject.noIssue_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_noIssue_fromElementsOfSet (_ inSet : Set<PackageRoot>) {
    for managedObject in inSet {
      self.mObserversOf_noIssue.apply { (_ observer : EBEvent) in
        managedObject.noIssue_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_PackageRoot : ReadOnlyArrayOf_PackageRoot {

  //····················································································································
  //   Sort
  //····················································································································

  private var mIsOrderedBefore : Optional < (_ left : PackageRoot, _ right : PackageRoot) -> Bool > = nil 

  //····················································································································

  func setSortCallback (_ inCallBack : Optional < (_ left : PackageRoot, _ right : PackageRoot) -> Bool >) {
    self.mIsOrderedBefore = inCallBack
  }

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_PackageRoot? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_PackageRoot?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
      if inProvider == nil {
        self.mInternalArrayValue = []
      }
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newArray : [PackageRoot] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        if let sortFunction = self.mIsOrderedBefore {
          newArray = v.sorted { sortFunction ($0, $1) }
        }else{
          newArray = v
        }
        self.mTransientKind = .single
       case .multiple :
        newArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newArray = []
      self.mTransientKind = .empty
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [PackageRoot] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [PackageRoot] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_PackageRoot <SUPER : EBManagedObject> : ReadOnlyArrayOf_PackageRoot {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    var newModelArray : [SUPER] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newModelArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newModelArray = v
        self.mTransientKind = .single
       case .multiple :
        newModelArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newModelArray = []
      self.mTransientKind = .empty
    }
    var newArray = [PackageRoot] ()
    for superObject in newModelArray {
      if let object = superObject as? PackageRoot {
        newArray.append (object)
      }
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [PackageRoot] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [PackageRoot] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackageRoot : ReadOnlyArrayOf_PackageRoot {

  //····················································································································
 
  func setProp (_ value :  [PackageRoot]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_PackageRoot : ReadWriteArrayOf_PackageRoot {

  //····················································································································

  private var mModel : ReadWriteArrayOf_PackageRoot? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_PackageRoot?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [PackageRoot]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [PackageRoot]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [PackageRoot] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : [PackageRoot] {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: PackageRoot
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_PackageRoot : ReadWriteArrayOf_PackageRoot, EBSignatureObserverProtocol {

  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PackageRoot) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PackageRoot) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackageRoot) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PackageRoot) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  //  Init
  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [PackageRoot] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "PackageRoot") as? PackageRoot {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [PackageRoot]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [PackageRoot]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //--- Write in preferences ?
    self.writeInPreferences ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <PackageRoot>, addedSet inAddedSet : Set <PackageRoot>) {
    for managedObject in inRemovedSet {
      managedObject.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (managedObject)
    }
  //---
    for managedObject in inAddedSet {
      managedObject.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }
 
  //····················································································································

  override var prop : EBSelection < [PackageRoot] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [PackageRoot]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [PackageRoot] { return self.mInternalArrayValue }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mInternalArrayValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  func remove (_ object : PackageRoot) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : PackageRoot) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mInternalArrayValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

