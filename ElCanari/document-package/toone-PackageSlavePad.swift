//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_PackageSlavePad 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_PackageSlavePad : ReadOnlyAbstractObjectProperty <PackageSlavePad> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : PackageSlavePad?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
 //     oldValue.xCenter_property.removeEBObserversFrom (&self.mObserversOf_xCenter) // Stored property
 //     oldValue.yCenter_property.removeEBObserversFrom (&self.mObserversOf_yCenter) // Stored property
 //     oldValue.width_property.removeEBObserversFrom (&self.mObserversOf_width) // Stored property
 //     oldValue.height_property.removeEBObserversFrom (&self.mObserversOf_height) // Stored property
 //     oldValue.holeWidth_property.removeEBObserversFrom (&self.mObserversOf_holeWidth) // Stored property
 //     oldValue.holeHeight_property.removeEBObserversFrom (&self.mObserversOf_holeHeight) // Stored property
 //     oldValue.padShape_property.removeEBObserversFrom (&self.mObserversOf_padShape) // Stored property
 //     oldValue.padStyle_property.removeEBObserversFrom (&self.mObserversOf_padStyle) // Stored property
 //     oldValue.xCenterUnit_property.removeEBObserversFrom (&self.mObserversOf_xCenterUnit) // Stored property
 //     oldValue.yCenterUnit_property.removeEBObserversFrom (&self.mObserversOf_yCenterUnit) // Stored property
 //     oldValue.widthUnit_property.removeEBObserversFrom (&self.mObserversOf_widthUnit) // Stored property
 //     oldValue.heightUnit_property.removeEBObserversFrom (&self.mObserversOf_heightUnit) // Stored property
 //     oldValue.holeWidthUnit_property.removeEBObserversFrom (&self.mObserversOf_holeWidthUnit) // Stored property
 //     oldValue.holeHeightUnit_property.removeEBObserversFrom (&self.mObserversOf_holeHeightUnit) // Stored property
 //     oldValue.annularRingUnit_property.removeEBObserversFrom (&self.mObserversOf_annularRingUnit) // Stored property
      oldValue.objectDisplay_property.removeEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
      oldValue.selectionDisplay_property.removeEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
      oldValue.issues_property.removeEBObserversFrom (&self.mObserversOf_issues) // Transient property
      oldValue.padIsTraversing_property.removeEBObserversFrom (&self.mObserversOf_padIsTraversing) // Transient property
      oldValue.annularRing_property.removeEBObserversFrom (&self.mObserversOf_annularRing) // Transient property
      oldValue.padNameWithZoneName_property.removeEBObserversFrom (&self.mObserversOf_padNameWithZoneName) // Transient property
      oldValue.masterPadNameWithZoneName_property.removeEBObserversFrom (&self.mObserversOf_masterPadNameWithZoneName) // Transient property
      oldValue.padNameForDisplay_property.removeEBObserversFrom (&self.mObserversOf_padNameForDisplay) // Transient property
      oldValue.padNumberDisplay_property.removeEBObserversFrom (&self.mObserversOf_padNumberDisplay) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
 //     newValue.xCenter_property.addEBObserversFrom (&self.mObserversOf_xCenter) // Stored property
 //     newValue.yCenter_property.addEBObserversFrom (&self.mObserversOf_yCenter) // Stored property
 //     newValue.width_property.addEBObserversFrom (&self.mObserversOf_width) // Stored property
 //     newValue.height_property.addEBObserversFrom (&self.mObserversOf_height) // Stored property
 //     newValue.holeWidth_property.addEBObserversFrom (&self.mObserversOf_holeWidth) // Stored property
 //     newValue.holeHeight_property.addEBObserversFrom (&self.mObserversOf_holeHeight) // Stored property
 //     newValue.padShape_property.addEBObserversFrom (&self.mObserversOf_padShape) // Stored property
 //     newValue.padStyle_property.addEBObserversFrom (&self.mObserversOf_padStyle) // Stored property
 //     newValue.xCenterUnit_property.addEBObserversFrom (&self.mObserversOf_xCenterUnit) // Stored property
 //     newValue.yCenterUnit_property.addEBObserversFrom (&self.mObserversOf_yCenterUnit) // Stored property
 //     newValue.widthUnit_property.addEBObserversFrom (&self.mObserversOf_widthUnit) // Stored property
 //     newValue.heightUnit_property.addEBObserversFrom (&self.mObserversOf_heightUnit) // Stored property
 //     newValue.holeWidthUnit_property.addEBObserversFrom (&self.mObserversOf_holeWidthUnit) // Stored property
 //     newValue.holeHeightUnit_property.addEBObserversFrom (&self.mObserversOf_holeHeightUnit) // Stored property
 //     newValue.annularRingUnit_property.addEBObserversFrom (&self.mObserversOf_annularRingUnit) // Stored property
      newValue.objectDisplay_property.addEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
      newValue.selectionDisplay_property.addEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
      newValue.issues_property.addEBObserversFrom (&self.mObserversOf_issues) // Transient property
      newValue.padIsTraversing_property.addEBObserversFrom (&self.mObserversOf_padIsTraversing) // Transient property
      newValue.annularRing_property.addEBObserversFrom (&self.mObserversOf_annularRing) // Transient property
      newValue.padNameWithZoneName_property.addEBObserversFrom (&self.mObserversOf_padNameWithZoneName) // Transient property
      newValue.masterPadNameWithZoneName_property.addEBObserversFrom (&self.mObserversOf_masterPadNameWithZoneName) // Transient property
      newValue.padNameForDisplay_property.addEBObserversFrom (&self.mObserversOf_padNameForDisplay) // Transient property
      newValue.padNumberDisplay_property.addEBObserversFrom (&self.mObserversOf_padNumberDisplay) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'xCenter' stored property
  //····················································································································

  private final var xCenter_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_xCenter = EBWeakEventSet ()

  //····················································································································

  final var xCenter_property_selection : EBSelection <Int?> { // §
    return self.xCenter_property.selection
/*    if let model = self.propval {
      switch (model.xCenter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.xCenter_property.addEBObserver (inObserver)
/*    self.mObserversOf_xCenter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.xCenter_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.xCenter_property.removeEBObserver (inObserver)
/*    self.mObserversOf_xCenter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.xCenter_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'yCenter' stored property
  //····················································································································

  private final var yCenter_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_yCenter = EBWeakEventSet ()

  //····················································································································

  final var yCenter_property_selection : EBSelection <Int?> { // §
    return self.yCenter_property.selection
/*    if let model = self.propval {
      switch (model.yCenter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.yCenter_property.addEBObserver (inObserver)
/*    self.mObserversOf_yCenter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.yCenter_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.yCenter_property.removeEBObserver (inObserver)
/*    self.mObserversOf_yCenter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.yCenter_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'width' stored property
  //····················································································································

  private final var width_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_width = EBWeakEventSet ()

  //····················································································································

  final var width_property_selection : EBSelection <Int?> { // §
    return self.width_property.selection
/*    if let model = self.propval {
      switch (model.width_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_width (_ inObserver : EBEvent) {
    self.width_property.addEBObserver (inObserver)
/*    self.mObserversOf_width.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.width_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_width (_ inObserver : EBEvent) {
    self.width_property.removeEBObserver (inObserver)
/*    self.mObserversOf_width.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.width_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'height' stored property
  //····················································································································

  private final var height_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_height = EBWeakEventSet ()

  //····················································································································

  final var height_property_selection : EBSelection <Int?> { // §
    return self.height_property.selection
/*    if let model = self.propval {
      switch (model.height_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_height (_ inObserver : EBEvent) {
    self.height_property.addEBObserver (inObserver)
/*    self.mObserversOf_height.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.height_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_height (_ inObserver : EBEvent) {
    self.height_property.removeEBObserver (inObserver)
/*    self.mObserversOf_height.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.height_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'holeWidth' stored property
  //····················································································································

  private final var holeWidth_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_holeWidth = EBWeakEventSet ()

  //····················································································································

  final var holeWidth_property_selection : EBSelection <Int?> { // §
    return self.holeWidth_property.selection
/*    if let model = self.propval {
      switch (model.holeWidth_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_holeWidth (_ inObserver : EBEvent) {
    self.holeWidth_property.addEBObserver (inObserver)
/*    self.mObserversOf_holeWidth.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.holeWidth_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_holeWidth (_ inObserver : EBEvent) {
    self.holeWidth_property.removeEBObserver (inObserver)
/*    self.mObserversOf_holeWidth.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.holeWidth_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'holeHeight' stored property
  //····················································································································

  private final var holeHeight_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_holeHeight = EBWeakEventSet ()

  //····················································································································

  final var holeHeight_property_selection : EBSelection <Int?> { // §
    return self.holeHeight_property.selection
/*    if let model = self.propval {
      switch (model.holeHeight_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_holeHeight (_ inObserver : EBEvent) {
    self.holeHeight_property.addEBObserver (inObserver)
/*    self.mObserversOf_holeHeight.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.holeHeight_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_holeHeight (_ inObserver : EBEvent) {
    self.holeHeight_property.removeEBObserver (inObserver)
/*    self.mObserversOf_holeHeight.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.holeHeight_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'padShape' stored property
  //····················································································································

  private final var padShape_property = EBGenericTransientProperty <PadShape?> ()
//  private final var mObserversOf_padShape = EBWeakEventSet ()

  //····················································································································

  final var padShape_property_selection : EBSelection <PadShape?> { // §
    return self.padShape_property.selection
/*    if let model = self.propval {
      switch (model.padShape_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_padShape (_ inObserver : EBEvent) {
    self.padShape_property.addEBObserver (inObserver)
/*    self.mObserversOf_padShape.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.padShape_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_padShape (_ inObserver : EBEvent) {
    self.padShape_property.removeEBObserver (inObserver)
/*    self.mObserversOf_padShape.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padShape_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'padStyle' stored property
  //····················································································································

  private final var padStyle_property = EBGenericTransientProperty <SlavePadStyle?> ()
//  private final var mObserversOf_padStyle = EBWeakEventSet ()

  //····················································································································

  final var padStyle_property_selection : EBSelection <SlavePadStyle?> { // §
    return self.padStyle_property.selection
/*    if let model = self.propval {
      switch (model.padStyle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_padStyle (_ inObserver : EBEvent) {
    self.padStyle_property.addEBObserver (inObserver)
/*    self.mObserversOf_padStyle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.padStyle_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_padStyle (_ inObserver : EBEvent) {
    self.padStyle_property.removeEBObserver (inObserver)
/*    self.mObserversOf_padStyle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padStyle_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'xCenterUnit' stored property
  //····················································································································

  private final var xCenterUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_xCenterUnit = EBWeakEventSet ()

  //····················································································································

  final var xCenterUnit_property_selection : EBSelection <Int?> { // §
    return self.xCenterUnit_property.selection
/*    if let model = self.propval {
      switch (model.xCenterUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_xCenterUnit (_ inObserver : EBEvent) {
    self.xCenterUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_xCenterUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.xCenterUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_xCenterUnit (_ inObserver : EBEvent) {
    self.xCenterUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_xCenterUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.xCenterUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'yCenterUnit' stored property
  //····················································································································

  private final var yCenterUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_yCenterUnit = EBWeakEventSet ()

  //····················································································································

  final var yCenterUnit_property_selection : EBSelection <Int?> { // §
    return self.yCenterUnit_property.selection
/*    if let model = self.propval {
      switch (model.yCenterUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_yCenterUnit (_ inObserver : EBEvent) {
    self.yCenterUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_yCenterUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.yCenterUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_yCenterUnit (_ inObserver : EBEvent) {
    self.yCenterUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_yCenterUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.yCenterUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'widthUnit' stored property
  //····················································································································

  private final var widthUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_widthUnit = EBWeakEventSet ()

  //····················································································································

  final var widthUnit_property_selection : EBSelection <Int?> { // §
    return self.widthUnit_property.selection
/*    if let model = self.propval {
      switch (model.widthUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_widthUnit (_ inObserver : EBEvent) {
    self.widthUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_widthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.widthUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_widthUnit (_ inObserver : EBEvent) {
    self.widthUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_widthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.widthUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'heightUnit' stored property
  //····················································································································

  private final var heightUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_heightUnit = EBWeakEventSet ()

  //····················································································································

  final var heightUnit_property_selection : EBSelection <Int?> { // §
    return self.heightUnit_property.selection
/*    if let model = self.propval {
      switch (model.heightUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_heightUnit (_ inObserver : EBEvent) {
    self.heightUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_heightUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.heightUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_heightUnit (_ inObserver : EBEvent) {
    self.heightUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_heightUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.heightUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'holeWidthUnit' stored property
  //····················································································································

  private final var holeWidthUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_holeWidthUnit = EBWeakEventSet ()

  //····················································································································

  final var holeWidthUnit_property_selection : EBSelection <Int?> { // §
    return self.holeWidthUnit_property.selection
/*    if let model = self.propval {
      switch (model.holeWidthUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_holeWidthUnit (_ inObserver : EBEvent) {
    self.holeWidthUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_holeWidthUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.holeWidthUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_holeWidthUnit (_ inObserver : EBEvent) {
    self.holeWidthUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_holeWidthUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.holeWidthUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'holeHeightUnit' stored property
  //····················································································································

  private final var holeHeightUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_holeHeightUnit = EBWeakEventSet ()

  //····················································································································

  final var holeHeightUnit_property_selection : EBSelection <Int?> { // §
    return self.holeHeightUnit_property.selection
/*    if let model = self.propval {
      switch (model.holeHeightUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_holeHeightUnit (_ inObserver : EBEvent) {
    self.holeHeightUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_holeHeightUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.holeHeightUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_holeHeightUnit (_ inObserver : EBEvent) {
    self.holeHeightUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_holeHeightUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.holeHeightUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'annularRingUnit' stored property
  //····················································································································

  private final var annularRingUnit_property = EBGenericTransientProperty <Int?> ()
//  private final var mObserversOf_annularRingUnit = EBWeakEventSet ()

  //····················································································································

  final var annularRingUnit_property_selection : EBSelection <Int?> { // §
    return self.annularRingUnit_property.selection
/*    if let model = self.propval {
      switch (model.annularRingUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    } */
  }

  //····················································································································

  final func addEBObserverOf_annularRingUnit (_ inObserver : EBEvent) {
    self.annularRingUnit_property.addEBObserver (inObserver)
/*    self.mObserversOf_annularRingUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.annularRingUnit_property.addEBObserver (inObserver)
    } */
  }

  //····················································································································

  final func removeEBObserverOf_annularRingUnit (_ inObserver : EBEvent) {
    self.annularRingUnit_property.removeEBObserver (inObserver)
/*    self.mObserversOf_annularRingUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.annularRingUnit_property.removeEBObserver (inObserver)
    } */
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final var objectDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.objectDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final var selectionDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.selectionDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final var issues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.issues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'padIsTraversing' transient property
  //····················································································································

  private final var mObserversOf_padIsTraversing = EBWeakEventSet ()

  //····················································································································

  final var padIsTraversing_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.padIsTraversing_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_padIsTraversing (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padIsTraversing.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padIsTraversing_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padIsTraversing (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padIsTraversing.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padIsTraversing_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'annularRing' transient property
  //····················································································································

  private final var mObserversOf_annularRing = EBWeakEventSet ()

  //····················································································································

  final var annularRing_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.annularRing_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_annularRing (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_annularRing.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.annularRing_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_annularRing (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_annularRing.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.annularRing_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'padNameWithZoneName' transient property
  //····················································································································

  private final var mObserversOf_padNameWithZoneName = EBWeakEventSet ()

  //····················································································································

  final var padNameWithZoneName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.padNameWithZoneName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_padNameWithZoneName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNameWithZoneName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padNameWithZoneName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNameWithZoneName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNameWithZoneName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padNameWithZoneName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'masterPadNameWithZoneName' transient property
  //····················································································································

  private final var mObserversOf_masterPadNameWithZoneName = EBWeakEventSet ()

  //····················································································································

  final var masterPadNameWithZoneName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.masterPadNameWithZoneName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_masterPadNameWithZoneName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_masterPadNameWithZoneName.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.masterPadNameWithZoneName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_masterPadNameWithZoneName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_masterPadNameWithZoneName.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.masterPadNameWithZoneName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'padNameForDisplay' transient property
  //····················································································································

  private final var mObserversOf_padNameForDisplay = EBWeakEventSet ()

  //····················································································································

  final var padNameForDisplay_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.padNameForDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_padNameForDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNameForDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padNameForDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNameForDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNameForDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padNameForDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'padNumberDisplay' transient property
  //····················································································································

  private final var mObserversOf_padNumberDisplay = EBWeakEventSet ()

  //····················································································································

  final var padNumberDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.padNumberDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padNumberDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.padNumberDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   INIT 
  //····················································································································

  override init () {
    super.init ()
  //--- Configure xCenter simple stored property
    self.xCenter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.xCenter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.xCenter_property)
  //--- Configure yCenter simple stored property
    self.yCenter_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.yCenter_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.yCenter_property)
  //--- Configure width simple stored property
    self.width_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.width_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.width_property)
  //--- Configure height simple stored property
    self.height_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.height_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.height_property)
  //--- Configure holeWidth simple stored property
    self.holeWidth_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.holeWidth_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.holeWidth_property)
  //--- Configure holeHeight simple stored property
    self.holeHeight_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.holeHeight_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.holeHeight_property)
  //--- Configure padShape simple stored property
    self.padShape_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.padShape_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.padShape_property)
  //--- Configure padStyle simple stored property
    self.padStyle_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.padStyle_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.padStyle_property)
  //--- Configure xCenterUnit simple stored property
    self.xCenterUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.xCenterUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.xCenterUnit_property)
  //--- Configure yCenterUnit simple stored property
    self.yCenterUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.yCenterUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.yCenterUnit_property)
  //--- Configure widthUnit simple stored property
    self.widthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.widthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.widthUnit_property)
  //--- Configure heightUnit simple stored property
    self.heightUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.heightUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.heightUnit_property)
  //--- Configure holeWidthUnit simple stored property
    self.holeWidthUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.holeWidthUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.holeWidthUnit_property)
  //--- Configure holeHeightUnit simple stored property
    self.holeHeightUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.holeHeightUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.holeHeightUnit_property)
  //--- Configure annularRingUnit simple stored property
    self.annularRingUnit_property.mReadModelFunction = { [weak self] in
      if let model = self?.mInternalValue {
        switch model.annularRingUnit_property.selection {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v)
        }
      }else{
        return .single (nil)
      }
    }
    self.none_property.addEBObserver (self.annularRingUnit_property)
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject PackageSlavePad
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_PackageSlavePad : ReadOnlyObject_PackageSlavePad {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_PackageSlavePad? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_PackageSlavePad?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : PackageSlavePad? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < PackageSlavePad? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : PackageSlavePad? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_PackageSlavePad
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_PackageSlavePad : ReadOnlyObject_PackageSlavePad {

  //····················································································································
 
  func setProp (_ inValue : PackageSlavePad?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_PackageSlavePad
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_PackageSlavePad : ReadWriteObject_PackageSlavePad {

  //····················································································································

  private var mModel : ReadWriteObject_PackageSlavePad? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_PackageSlavePad?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : PackageSlavePad?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : PackageSlavePad?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < PackageSlavePad? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : PackageSlavePad? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_PackageSlavePad 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_PackageSlavePad : ReadWriteObject_PackageSlavePad, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PackageSlavePad) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PackageSlavePad) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackageSlavePad) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PackageSlavePad) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : PackageSlavePad?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < PackageSlavePad? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : PackageSlavePad?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : PackageSlavePad? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

