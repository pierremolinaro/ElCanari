//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_PackageZone 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_PackageZone : ReadOnlyAbstractObjectProperty <PackageZone> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : PackageZone?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.x_property.removeEBObserver (self.x_property) // Stored property
    inOldValue?.y_property.removeEBObserver (self.y_property) // Stored property
    inOldValue?.width_property.removeEBObserver (self.width_property) // Stored property
    inOldValue?.height_property.removeEBObserver (self.height_property) // Stored property
    inOldValue?.xUnit_property.removeEBObserver (self.xUnit_property) // Stored property
    inOldValue?.yUnit_property.removeEBObserver (self.yUnit_property) // Stored property
    inOldValue?.widthUnit_property.removeEBObserver (self.widthUnit_property) // Stored property
    inOldValue?.heightUnit_property.removeEBObserver (self.heightUnit_property) // Stored property
    inOldValue?.zoneName_property.removeEBObserver (self.zoneName_property) // Stored property
    inOldValue?.displayZoneName_property.removeEBObserver (self.displayZoneName_property) // Stored property
    inOldValue?.xName_property.removeEBObserver (self.xName_property) // Stored property
    inOldValue?.yName_property.removeEBObserver (self.yName_property) // Stored property
    inOldValue?.xNameUnit_property.removeEBObserver (self.xNameUnit_property) // Stored property
    inOldValue?.yNameUnit_property.removeEBObserver (self.yNameUnit_property) // Stored property
    inOldValue?.zoneNumbering_property.removeEBObserver (self.zoneNumbering_property) // Stored property
    inOldValue?.objectDisplay_property.removeEBObserver (self.objectDisplay_property) // Transient property
    inOldValue?.issues_property.removeEBObserver (self.issues_property) // Transient property
    inOldValue?.rect_property.removeEBObserver (self.rect_property) // Transient property
    inOldValue?.selectionDisplay_property.removeEBObserver (self.selectionDisplay_property) // Transient property
    inOldValue?.forbiddenPadArray_property.removeEBObserver (self.forbiddenPadArray_property) // Transient property
    inOldValue?.emptyForbiddenPadArray_property.removeEBObserver (self.emptyForbiddenPadArray_property) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.x_property.addEBObserver (self.x_property) // Stored property
    self.mInternalValue?.y_property.addEBObserver (self.y_property) // Stored property
    self.mInternalValue?.width_property.addEBObserver (self.width_property) // Stored property
    self.mInternalValue?.height_property.addEBObserver (self.height_property) // Stored property
    self.mInternalValue?.xUnit_property.addEBObserver (self.xUnit_property) // Stored property
    self.mInternalValue?.yUnit_property.addEBObserver (self.yUnit_property) // Stored property
    self.mInternalValue?.widthUnit_property.addEBObserver (self.widthUnit_property) // Stored property
    self.mInternalValue?.heightUnit_property.addEBObserver (self.heightUnit_property) // Stored property
    self.mInternalValue?.zoneName_property.addEBObserver (self.zoneName_property) // Stored property
    self.mInternalValue?.displayZoneName_property.addEBObserver (self.displayZoneName_property) // Stored property
    self.mInternalValue?.xName_property.addEBObserver (self.xName_property) // Stored property
    self.mInternalValue?.yName_property.addEBObserver (self.yName_property) // Stored property
    self.mInternalValue?.xNameUnit_property.addEBObserver (self.xNameUnit_property) // Stored property
    self.mInternalValue?.yNameUnit_property.addEBObserver (self.yNameUnit_property) // Stored property
    self.mInternalValue?.zoneNumbering_property.addEBObserver (self.zoneNumbering_property) // Stored property
    self.mInternalValue?.objectDisplay_property.addEBObserver (self.objectDisplay_property) // Transient property
    self.mInternalValue?.issues_property.addEBObserver (self.issues_property) // Transient property
    self.mInternalValue?.rect_property.addEBObserver (self.rect_property) // Transient property
    self.mInternalValue?.selectionDisplay_property.addEBObserver (self.selectionDisplay_property) // Transient property
    self.mInternalValue?.forbiddenPadArray_property.addEBObserver (self.forbiddenPadArray_property) // Transient property
    self.mInternalValue?.emptyForbiddenPadArray_property.addEBObserver (self.emptyForbiddenPadArray_property) // Transient property
  }

  //····················································································································
  //   init
  //····················································································································

  override init () {
    super.init ()
    self.x_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.x_property.prop ?? .empty }
    self.x_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.x_property.setProp (inValue) }
    self.y_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.y_property.prop ?? .empty }
    self.y_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.y_property.setProp (inValue) }
    self.width_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.width_property.prop ?? .empty }
    self.width_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.width_property.setProp (inValue) }
    self.height_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.height_property.prop ?? .empty }
    self.height_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.height_property.setProp (inValue) }
    self.xUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.xUnit_property.prop ?? .empty }
    self.xUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.xUnit_property.setProp (inValue) }
    self.yUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.yUnit_property.prop ?? .empty }
    self.yUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.yUnit_property.setProp (inValue) }
    self.widthUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.widthUnit_property.prop ?? .empty }
    self.widthUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.widthUnit_property.setProp (inValue) }
    self.heightUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.heightUnit_property.prop ?? .empty }
    self.heightUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.heightUnit_property.setProp (inValue) }
    self.zoneName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.zoneName_property.prop ?? .empty }
    self.zoneName_property.mWriteModelFunction = { [weak self] (inValue : String) in self?.mInternalValue?.zoneName_property.setProp (inValue) }
    self.displayZoneName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.displayZoneName_property.prop ?? .empty }
    self.displayZoneName_property.mWriteModelFunction = { [weak self] (inValue : Bool) in self?.mInternalValue?.displayZoneName_property.setProp (inValue) }
    self.xName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.xName_property.prop ?? .empty }
    self.xName_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.xName_property.setProp (inValue) }
    self.yName_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.yName_property.prop ?? .empty }
    self.yName_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.yName_property.setProp (inValue) }
    self.xNameUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.xNameUnit_property.prop ?? .empty }
    self.xNameUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.xNameUnit_property.setProp (inValue) }
    self.yNameUnit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.yNameUnit_property.prop ?? .empty }
    self.yNameUnit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.yNameUnit_property.setProp (inValue) }
    self.zoneNumbering_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.zoneNumbering_property.prop ?? .empty }
    self.zoneNumbering_property.mWriteModelFunction = { [weak self] (inValue : PadNumbering) in self?.mInternalValue?.zoneNumbering_property.setProp (inValue) }
    self.objectDisplay_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.objectDisplay_property.prop ?? .empty }
    self.issues_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.issues_property.prop ?? .empty }
    self.rect_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.rect_property.prop ?? .empty }
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.selectionDisplay_property.prop ?? .empty }
    self.forbiddenPadArray_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.forbiddenPadArray_property.prop ?? .empty }
    self.emptyForbiddenPadArray_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.emptyForbiddenPadArray_property.prop ?? .empty }
  }

  //····················································································································
  //   Proxy of 'x' stored property
  //····················································································································

  let x_property = EBPropertyProxy_Int ()

  var x_property_selection : EBSelection <Int> {
    switch (self.x_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'y' stored property
  //····················································································································

  let y_property = EBPropertyProxy_Int ()

  var y_property_selection : EBSelection <Int> {
    switch (self.y_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'width' stored property
  //····················································································································

  let width_property = EBPropertyProxy_Int ()

  var width_property_selection : EBSelection <Int> {
    switch (self.width_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'height' stored property
  //····················································································································

  let height_property = EBPropertyProxy_Int ()

  var height_property_selection : EBSelection <Int> {
    switch (self.height_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'xUnit' stored property
  //····················································································································

  let xUnit_property = EBPropertyProxy_Int ()

  var xUnit_property_selection : EBSelection <Int> {
    switch (self.xUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'yUnit' stored property
  //····················································································································

  let yUnit_property = EBPropertyProxy_Int ()

  var yUnit_property_selection : EBSelection <Int> {
    switch (self.yUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'widthUnit' stored property
  //····················································································································

  let widthUnit_property = EBPropertyProxy_Int ()

  var widthUnit_property_selection : EBSelection <Int> {
    switch (self.widthUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'heightUnit' stored property
  //····················································································································

  let heightUnit_property = EBPropertyProxy_Int ()

  var heightUnit_property_selection : EBSelection <Int> {
    switch (self.heightUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'zoneName' stored property
  //····················································································································

  let zoneName_property = EBPropertyProxy_String ()

  var zoneName_property_selection : EBSelection <String> {
    switch (self.zoneName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'displayZoneName' stored property
  //····················································································································

  let displayZoneName_property = EBPropertyProxy_Bool ()

  var displayZoneName_property_selection : EBSelection <Bool> {
    switch (self.displayZoneName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'xName' stored property
  //····················································································································

  let xName_property = EBPropertyProxy_Int ()

  var xName_property_selection : EBSelection <Int> {
    switch (self.xName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'yName' stored property
  //····················································································································

  let yName_property = EBPropertyProxy_Int ()

  var yName_property_selection : EBSelection <Int> {
    switch (self.yName_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'xNameUnit' stored property
  //····················································································································

  let xNameUnit_property = EBPropertyProxy_Int ()

  var xNameUnit_property_selection : EBSelection <Int> {
    switch (self.xNameUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'yNameUnit' stored property
  //····················································································································

  let yNameUnit_property = EBPropertyProxy_Int ()

  var yNameUnit_property_selection : EBSelection <Int> {
    switch (self.yNameUnit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'zoneNumbering' stored property
  //····················································································································

  let zoneNumbering_property = EBPropertyProxy_PadNumbering ()

  var zoneNumbering_property_selection : EBSelection <PadNumbering> {
    switch (self.zoneNumbering_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'objectDisplay' transient property
  //····················································································································

  let objectDisplay_property = EBTransientProperty_EBShape ()

  var objectDisplay_property_selection : EBSelection <EBShape> {
    switch (self.objectDisplay_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'issues' transient property
  //····················································································································

  let issues_property = EBTransientProperty_CanariIssueArray ()

  var issues_property_selection : EBSelection <CanariIssueArray> {
    switch (self.issues_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'rect' transient property
  //····················································································································

  let rect_property = EBTransientProperty_CanariRect ()

  var rect_property_selection : EBSelection <CanariRect> {
    switch (self.rect_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'selectionDisplay' transient property
  //····················································································································

  let selectionDisplay_property = EBTransientProperty_EBShape ()

  var selectionDisplay_property_selection : EBSelection <EBShape> {
    switch (self.selectionDisplay_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'forbiddenPadArray' transient property
  //····················································································································

  let forbiddenPadArray_property = EBTransientProperty_StringArray ()

  var forbiddenPadArray_property_selection : EBSelection <StringArray> {
    switch (self.forbiddenPadArray_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'emptyForbiddenPadArray' transient property
  //····················································································································

  let emptyForbiddenPadArray_property = EBTransientProperty_Bool ()

  var emptyForbiddenPadArray_property_selection : EBSelection <Bool> {
    switch (self.emptyForbiddenPadArray_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observable toMany property: forbiddenPadNumbers
  //····················································································································

  private var mObserversOf_forbiddenPadNumbers = EBWeakEventSet ()

  //····················································································································

  var forbiddenPadNumbers_property_selection : EBSelection <[ForbiddenPadNumber]> {
    if let model = self.propval {
      switch (model.forbiddenPadNumbers_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_forbiddenPadNumbers (_ inObserver : EBEvent) {
    self.mObserversOf_forbiddenPadNumbers.insert (inObserver)
    if let object = self.propval {
      object.forbiddenPadNumbers_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_forbiddenPadNumbers (_ inObserver : EBEvent) {
    self.mObserversOf_forbiddenPadNumbers.remove (inObserver)
    if let object = self.propval {
      object.forbiddenPadNumbers_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    TransientObject PackageZone
//----------------------------------------------------------------------------------------------------------------------

class TransientObject_PackageZone : ReadOnlyObject_PackageZone {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_PackageZone? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_PackageZone?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : PackageZone? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < PackageZone? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : PackageZone? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_PackageZone
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_PackageZone : ReadOnlyObject_PackageZone {

  //····················································································································
 
  func setProp (_ inValue : PackageZone?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_PackageZone
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_PackageZone : ReadWriteObject_PackageZone {

  //····················································································································

  private var mModel : ReadWriteObject_PackageZone? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_PackageZone?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : PackageZone?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : PackageZone?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < PackageZone? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : PackageZone? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_PackageZone 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_PackageZone : ReadWriteObject_PackageZone, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PackageZone) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PackageZone) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackageZone) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PackageZone) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : PackageZone?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < PackageZone? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : PackageZone?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : PackageZone? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

