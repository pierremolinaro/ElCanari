//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_xCenter : class {
  var xCenter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_yCenter : class {
  var yCenter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_width : class {
  var width : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_height : class {
  var height : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_holeDiameter : class {
  var holeDiameter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_padShape : class {
  var padShape : PadShape { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_padStyle : class {
  var padStyle : SlavePadStyle { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_xCenterUnit : class {
  var xCenterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_yCenterUnit : class {
  var yCenterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_widthUnit : class {
  var widthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_heightUnit : class {
  var heightUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_holeDiameterUnit : class {
  var holeDiameterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_annularRingUnit : class {
  var annularRingUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_padIsTraversing : class {
  var padIsTraversing : Bool? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_annularRing : class {
  var annularRing : Int? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_padName : class {
  var padName : String? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_padNumberDisplay : class {
  var padNumberDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageSlavePad_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class PackageSlavePad : PackageObject,
         PackageSlavePad_xCenter,
         PackageSlavePad_yCenter,
         PackageSlavePad_width,
         PackageSlavePad_height,
         PackageSlavePad_holeDiameter,
         PackageSlavePad_padShape,
         PackageSlavePad_padStyle,
         PackageSlavePad_xCenterUnit,
         PackageSlavePad_yCenterUnit,
         PackageSlavePad_widthUnit,
         PackageSlavePad_heightUnit,
         PackageSlavePad_holeDiameterUnit,
         PackageSlavePad_annularRingUnit,
         PackageSlavePad_selectionDisplay,
         PackageSlavePad_issues,
         PackageSlavePad_padIsTraversing,
         PackageSlavePad_annularRing,
         PackageSlavePad_padName,
         PackageSlavePad_padNumberDisplay,
         PackageSlavePad_objectDisplay {

  //····················································································································
  //   Atomic property: xCenter
  //····················································································································

  let xCenter_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var xCenter : Int {
    get { return self.xCenter_property.propval }
    set { self.xCenter_property.setProp (newValue) }
  }

  //····················································································································

  var xCenter_property_selection : EBSelection <Int> { return self.xCenter_property.prop }

  //····················································································································
  //   Atomic property: yCenter
  //····················································································································

  let yCenter_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var yCenter : Int {
    get { return self.yCenter_property.propval }
    set { self.yCenter_property.setProp (newValue) }
  }

  //····················································································································

  var yCenter_property_selection : EBSelection <Int> { return self.yCenter_property.prop }

  //····················································································································
  //   Atomic property: width
  //····················································································································

  let width_property = EBStoredProperty_Int (defaultValue: 114300)

  //····················································································································

  var width : Int {
    get { return self.width_property.propval }
    set { self.width_property.setProp (newValue) }
  }

  //····················································································································

  var width_property_selection : EBSelection <Int> { return self.width_property.prop }

  //····················································································································
  //   Atomic property: height
  //····················································································································

  let height_property = EBStoredProperty_Int (defaultValue: 228600)

  //····················································································································

  var height : Int {
    get { return self.height_property.propval }
    set { self.height_property.setProp (newValue) }
  }

  //····················································································································

  var height_property_selection : EBSelection <Int> { return self.height_property.prop }

  //····················································································································
  //   Atomic property: holeDiameter
  //····················································································································

  let holeDiameter_property = EBStoredProperty_Int (defaultValue: 57150)

  //····················································································································

  var holeDiameter : Int {
    get { return self.holeDiameter_property.propval }
    set { self.holeDiameter_property.setProp (newValue) }
  }

  //····················································································································

  var holeDiameter_property_selection : EBSelection <Int> { return self.holeDiameter_property.prop }

  //····················································································································
  //   Atomic property: padShape
  //····················································································································

  let padShape_property = EBStoredProperty_PadShape (defaultValue: PadShape.octo)

  //····················································································································

  var padShape : PadShape {
    get { return self.padShape_property.propval }
    set { self.padShape_property.setProp (newValue) }
  }

  //····················································································································

  var padShape_property_selection : EBSelection <PadShape> { return self.padShape_property.prop }

  //····················································································································
  //   Atomic property: padStyle
  //····················································································································

  let padStyle_property = EBStoredProperty_SlavePadStyle (defaultValue: SlavePadStyle.traversing)

  //····················································································································

  var padStyle : SlavePadStyle {
    get { return self.padStyle_property.propval }
    set { self.padStyle_property.setProp (newValue) }
  }

  //····················································································································

  var padStyle_property_selection : EBSelection <SlavePadStyle> { return self.padStyle_property.prop }

  //····················································································································
  //   Atomic property: xCenterUnit
  //····················································································································

  let xCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var xCenterUnit : Int {
    get { return self.xCenterUnit_property.propval }
    set { self.xCenterUnit_property.setProp (newValue) }
  }

  //····················································································································

  var xCenterUnit_property_selection : EBSelection <Int> { return self.xCenterUnit_property.prop }

  //····················································································································
  //   Atomic property: yCenterUnit
  //····················································································································

  let yCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var yCenterUnit : Int {
    get { return self.yCenterUnit_property.propval }
    set { self.yCenterUnit_property.setProp (newValue) }
  }

  //····················································································································

  var yCenterUnit_property_selection : EBSelection <Int> { return self.yCenterUnit_property.prop }

  //····················································································································
  //   Atomic property: widthUnit
  //····················································································································

  let widthUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var widthUnit : Int {
    get { return self.widthUnit_property.propval }
    set { self.widthUnit_property.setProp (newValue) }
  }

  //····················································································································

  var widthUnit_property_selection : EBSelection <Int> { return self.widthUnit_property.prop }

  //····················································································································
  //   Atomic property: heightUnit
  //····················································································································

  let heightUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var heightUnit : Int {
    get { return self.heightUnit_property.propval }
    set { self.heightUnit_property.setProp (newValue) }
  }

  //····················································································································

  var heightUnit_property_selection : EBSelection <Int> { return self.heightUnit_property.prop }

  //····················································································································
  //   Atomic property: holeDiameterUnit
  //····················································································································

  let holeDiameterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var holeDiameterUnit : Int {
    get { return self.holeDiameterUnit_property.propval }
    set { self.holeDiameterUnit_property.setProp (newValue) }
  }

  //····················································································································

  var holeDiameterUnit_property_selection : EBSelection <Int> { return self.holeDiameterUnit_property.prop }

  //····················································································································
  //   Atomic property: annularRingUnit
  //····················································································································

  let annularRingUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var annularRingUnit : Int {
    get { return self.annularRingUnit_property.propval }
    set { self.annularRingUnit_property.setProp (newValue) }
  }

  //····················································································································

  var annularRingUnit_property_selection : EBSelection <Int> { return self.annularRingUnit_property.prop }

  //····················································································································
  //   To one property: master
  //····················································································································

  let master_property = ToOneRelationship_PackageSlavePad_master ()

  //····················································································································

  var master_property_selection : EBSelection <PackagePad?> {
    return .single (self.master_property.propval)
  }

  //····················································································································

  var master : PackagePad? {
    get { return self.master_property.propval }
    set { self.master_property.setProp (newValue) }
  }

  //····················································································································

  var master_none : ToOneRelationship_PackageSlavePad_master { return self.master_property }

  //····················································································································

  var master_none_selection : EBSelection <Bool> {
    return .single (self.master_property.propval == nil)
  }

  //····················································································································
  //   Transient property: padIsTraversing
  //····················································································································

  let padIsTraversing_property = EBTransientProperty_Bool ()

  //····················································································································

  var padIsTraversing_property_selection : EBSelection <Bool> {
    return self.padIsTraversing_property.prop
  }

  //····················································································································

  var padIsTraversing : Bool? {
    switch self.padIsTraversing_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: annularRing
  //····················································································································

  let annularRing_property = EBTransientProperty_Int ()

  //····················································································································

  var annularRing_property_selection : EBSelection <Int> {
    return self.annularRing_property.prop
  }

  //····················································································································

  var annularRing : Int? {
    switch self.annularRing_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padName
  //····················································································································

  let padName_property = EBTransientProperty_String ()

  //····················································································································

  var padName_property_selection : EBSelection <String> {
    return self.padName_property.prop
  }

  //····················································································································

  var padName : String? {
    switch self.padName_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //   Transient property: padNumberDisplay
  //····················································································································

  let padNumberDisplay_property = EBTransientProperty_EBShape ()

  //····················································································································

  var padNumberDisplay_property_selection : EBSelection <EBShape> {
    return self.padNumberDisplay_property.prop
  }

  //····················································································································

  var padNumberDisplay : EBShape? {
    switch self.padNumberDisplay_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: xCenter
    self.xCenter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: yCenter
    self.yCenter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: width
    self.width_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: height
    self.height_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: holeDiameter
    self.holeDiameter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: padShape
    self.padShape_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: padStyle
    self.padStyle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: widthUnit
    self.widthUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: heightUnit
    self.heightUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: holeDiameterUnit
    self.holeDiameterUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: annularRingUnit
    self.annularRingUnit_property.ebUndoManager = self.ebUndoManager
  //--- To one property: master
    self.master_property.owner = self
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.padShape_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.padShape_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_PackageSlavePad_selectionDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.selectionDisplay_property)
    self.yCenter_property.addEBObserver (self.selectionDisplay_property)
    self.width_property.addEBObserver (self.selectionDisplay_property)
    self.height_property.addEBObserver (self.selectionDisplay_property)
    self.padShape_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.holeDiameter_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.holeDiameter_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_PackageSlavePad_issues (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.issues_property)
    self.yCenter_property.addEBObserver (self.issues_property)
    self.width_property.addEBObserver (self.issues_property)
    self.height_property.addEBObserver (self.issues_property)
    self.holeDiameter_property.addEBObserver (self.issues_property)
  //--- Atomic property: padIsTraversing
    self.padIsTraversing_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.padStyle_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.padStyle_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackageSlavePad_padIsTraversing (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.padStyle_property.addEBObserver (self.padIsTraversing_property)
  //--- Atomic property: annularRing
    self.annularRing_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.holeDiameter_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.holeDiameter_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_PackageSlavePad_annularRing (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.width_property.addEBObserver (self.annularRing_property)
    self.height_property.addEBObserver (self.annularRing_property)
    self.holeDiameter_property.addEBObserver (self.annularRing_property)
  //--- Atomic property: padName
    self.padName_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        let kind = unwSelf.master_property.padName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.master_property.padName_property_selection) {
          case (.single (let v0)) :
            return .single (transient_PackageSlavePad_padName (v0))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.master_property.addEBObserverOf_padName (self.padName_property)
  //--- Atomic property: padNumberDisplay
    self.padNumberDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= g_Preferences!.padNumberFont_property_selection.kind ()
        kind &= g_Preferences!.padNumberColor_property_selection.kind ()
        kind &= unwSelf.padName_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, g_Preferences!.padNumberFont_property_selection, g_Preferences!.padNumberColor_property_selection, unwSelf.padName_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4)) :
            return .single (transient_PackageSlavePad_padNumberDisplay (v0, v1, v2, v3, v4))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.padNumberDisplay_property)
    self.yCenter_property.addEBObserver (self.padNumberDisplay_property)
    g_Preferences?.padNumberFont_property.addEBObserver (self.padNumberDisplay_property)
    g_Preferences?.padNumberColor_property.addEBObserver (self.padNumberDisplay_property)
    self.padName_property.addEBObserver (self.padNumberDisplay_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.width_property_selection.kind ()
        kind &= unwSelf.height_property_selection.kind ()
        kind &= unwSelf.holeDiameter_property_selection.kind ()
        kind &= unwSelf.padShape_property_selection.kind ()
        kind &= unwSelf.padStyle_property_selection.kind ()
        kind &= g_Preferences!.frontSidePadColor_property_selection.kind ()
        kind &= g_Preferences!.displayPackageFrontSidePads_property_selection.kind ()
        kind &= g_Preferences!.backSidePadColor_property_selection.kind ()
        kind &= g_Preferences!.displayPackageBackSidePads_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.width_property_selection, unwSelf.height_property_selection, unwSelf.holeDiameter_property_selection, unwSelf.padShape_property_selection, unwSelf.padStyle_property_selection, g_Preferences!.frontSidePadColor_property_selection, g_Preferences!.displayPackageFrontSidePads_property_selection, g_Preferences!.backSidePadColor_property_selection, g_Preferences!.displayPackageBackSidePads_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9), .single (let v10)) :
            return .single (transient_PackageSlavePad_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.objectDisplay_property)
    self.yCenter_property.addEBObserver (self.objectDisplay_property)
    self.width_property.addEBObserver (self.objectDisplay_property)
    self.height_property.addEBObserver (self.objectDisplay_property)
    self.holeDiameter_property.addEBObserver (self.objectDisplay_property)
    self.padShape_property.addEBObserver (self.objectDisplay_property)
    self.padStyle_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSidePadColor_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.displayPackageFrontSidePads_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.backSidePadColor_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.displayPackageBackSidePads_property.addEBObserver (self.objectDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.annularRingUnit_property.setSignatureObserver (observer: self)
    self.height_property.setSignatureObserver (observer: self)
    self.heightUnit_property.setSignatureObserver (observer: self)
    self.holeDiameter_property.setSignatureObserver (observer: self)
    self.holeDiameterUnit_property.setSignatureObserver (observer: self)
    self.padShape_property.setSignatureObserver (observer: self)
    self.padStyle_property.setSignatureObserver (observer: self)
    self.width_property.setSignatureObserver (observer: self)
    self.widthUnit_property.setSignatureObserver (observer: self)
    self.xCenter_property.setSignatureObserver (observer: self)
    self.xCenterUnit_property.setSignatureObserver (observer: self)
    self.yCenter_property.setSignatureObserver (observer: self)
    self.yCenterUnit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.xCenter_property.removeEBObserver (self.selectionDisplay_property)
    self.yCenter_property.removeEBObserver (self.selectionDisplay_property)
    self.width_property.removeEBObserver (self.selectionDisplay_property)
    self.height_property.removeEBObserver (self.selectionDisplay_property)
    self.padShape_property.removeEBObserver (self.selectionDisplay_property)
    self.xCenter_property.removeEBObserver (self.issues_property)
    self.yCenter_property.removeEBObserver (self.issues_property)
    self.width_property.removeEBObserver (self.issues_property)
    self.height_property.removeEBObserver (self.issues_property)
    self.holeDiameter_property.removeEBObserver (self.issues_property)
    self.padStyle_property.removeEBObserver (self.padIsTraversing_property)
    self.width_property.removeEBObserver (self.annularRing_property)
    self.height_property.removeEBObserver (self.annularRing_property)
    self.holeDiameter_property.removeEBObserver (self.annularRing_property)
    self.master_property.removeEBObserverOf_padName (self.padName_property)
    self.xCenter_property.removeEBObserver (self.padNumberDisplay_property)
    self.yCenter_property.removeEBObserver (self.padNumberDisplay_property)
    g_Preferences?.padNumberFont_property.removeEBObserver (self.padNumberDisplay_property)
    g_Preferences?.padNumberColor_property.removeEBObserver (self.padNumberDisplay_property)
    self.padName_property.removeEBObserver (self.padNumberDisplay_property)
    self.xCenter_property.removeEBObserver (self.objectDisplay_property)
    self.yCenter_property.removeEBObserver (self.objectDisplay_property)
    self.width_property.removeEBObserver (self.objectDisplay_property)
    self.height_property.removeEBObserver (self.objectDisplay_property)
    self.holeDiameter_property.removeEBObserver (self.objectDisplay_property)
    self.padShape_property.removeEBObserver (self.objectDisplay_property)
    self.padStyle_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.frontSidePadColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.displayPackageFrontSidePads_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.backSidePadColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.displayPackageBackSidePads_property.removeEBObserver (self.objectDisplay_property)
  //--- Unregister properties for handling signature
    self.annularRingUnit_property.setSignatureObserver (observer: nil)
    self.height_property.setSignatureObserver (observer: nil)
    self.heightUnit_property.setSignatureObserver (observer: nil)
    self.holeDiameter_property.setSignatureObserver (observer: nil)
    self.holeDiameterUnit_property.setSignatureObserver (observer: nil)
    self.padShape_property.setSignatureObserver (observer: nil)
    self.padStyle_property.setSignatureObserver (observer: nil)
    self.width_property.setSignatureObserver (observer: nil)
    self.widthUnit_property.setSignatureObserver (observer: nil)
    self.xCenter_property.setSignatureObserver (observer: nil)
    self.xCenterUnit_property.setSignatureObserver (observer: nil)
    self.yCenter_property.setSignatureObserver (observer: nil)
    self.yCenterUnit_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "xCenter",
      idx:self.xCenter_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xCenter_property.mObserverExplorer,
      valueExplorer:&self.xCenter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yCenter",
      idx:self.yCenter_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yCenter_property.mObserverExplorer,
      valueExplorer:&self.yCenter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "width",
      idx:self.width_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.width_property.mObserverExplorer,
      valueExplorer:&self.width_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "height",
      idx:self.height_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.height_property.mObserverExplorer,
      valueExplorer:&self.height_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holeDiameter",
      idx:self.holeDiameter_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.holeDiameter_property.mObserverExplorer,
      valueExplorer:&self.holeDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padShape",
      idx:self.padShape_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padShape_property.mObserverExplorer,
      valueExplorer:&self.padShape_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padStyle",
      idx:self.padStyle_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padStyle_property.mObserverExplorer,
      valueExplorer:&self.padStyle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xCenterUnit",
      idx:self.xCenterUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xCenterUnit_property.mObserverExplorer,
      valueExplorer:&self.xCenterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yCenterUnit",
      idx:self.yCenterUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yCenterUnit_property.mObserverExplorer,
      valueExplorer:&self.yCenterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "widthUnit",
      idx:self.widthUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.widthUnit_property.mObserverExplorer,
      valueExplorer:&self.widthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "heightUnit",
      idx:self.heightUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.heightUnit_property.mObserverExplorer,
      valueExplorer:&self.heightUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holeDiameterUnit",
      idx:self.holeDiameterUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.holeDiameterUnit_property.mObserverExplorer,
      valueExplorer:&self.holeDiameterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "annularRingUnit",
      idx:self.annularRingUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.annularRingUnit_property.mObserverExplorer,
      valueExplorer:&self.annularRingUnit_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx:self.selectionDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectionDisplay_property.mObserverExplorer,
      valueExplorer:&self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx:self.issues_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.issues_property.mObserverExplorer,
      valueExplorer:&self.issues_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padIsTraversing",
      idx:self.padIsTraversing_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padIsTraversing_property.mObserverExplorer,
      valueExplorer:&self.padIsTraversing_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "annularRing",
      idx:self.annularRing_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.annularRing_property.mObserverExplorer,
      valueExplorer:&self.annularRing_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padName",
      idx:self.padName_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padName_property.mObserverExplorer,
      valueExplorer:&self.padName_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padNumberDisplay",
      idx:self.padNumberDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padNumberDisplay_property.mObserverExplorer,
      valueExplorer:&self.padNumberDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx:self.objectDisplay_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.objectDisplay_property.mObserverExplorer,
      valueExplorer:&self.objectDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForToOneRelationshipNamed (
      "master",
      idx:self.master_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.master_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: xCenter
    self.xCenter_property.mObserverExplorer = nil
    self.xCenter_property.mValueExplorer = nil
  //--- Atomic property: yCenter
    self.yCenter_property.mObserverExplorer = nil
    self.yCenter_property.mValueExplorer = nil
  //--- Atomic property: width
    self.width_property.mObserverExplorer = nil
    self.width_property.mValueExplorer = nil
  //--- Atomic property: height
    self.height_property.mObserverExplorer = nil
    self.height_property.mValueExplorer = nil
  //--- Atomic property: holeDiameter
    self.holeDiameter_property.mObserverExplorer = nil
    self.holeDiameter_property.mValueExplorer = nil
  //--- Atomic property: padShape
    self.padShape_property.mObserverExplorer = nil
    self.padShape_property.mValueExplorer = nil
  //--- Atomic property: padStyle
    self.padStyle_property.mObserverExplorer = nil
    self.padStyle_property.mValueExplorer = nil
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.mObserverExplorer = nil
    self.xCenterUnit_property.mValueExplorer = nil
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.mObserverExplorer = nil
    self.yCenterUnit_property.mValueExplorer = nil
  //--- Atomic property: widthUnit
    self.widthUnit_property.mObserverExplorer = nil
    self.widthUnit_property.mValueExplorer = nil
  //--- Atomic property: heightUnit
    self.heightUnit_property.mObserverExplorer = nil
    self.heightUnit_property.mValueExplorer = nil
  //--- Atomic property: holeDiameterUnit
    self.holeDiameterUnit_property.mObserverExplorer = nil
    self.holeDiameterUnit_property.mValueExplorer = nil
  //--- Atomic property: annularRingUnit
    self.annularRingUnit_property.mObserverExplorer = nil
    self.annularRingUnit_property.mValueExplorer = nil
  //--- To one property: master
    self.master_property.mObserverExplorer = nil
    self.master_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.master_property.setProp (nil)
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: xCenter
    self.xCenter_property.storeIn (dictionary: ioDictionary, forKey:"xCenter")
  //--- Atomic property: yCenter
    self.yCenter_property.storeIn (dictionary: ioDictionary, forKey:"yCenter")
  //--- Atomic property: width
    self.width_property.storeIn (dictionary: ioDictionary, forKey:"width")
  //--- Atomic property: height
    self.height_property.storeIn (dictionary: ioDictionary, forKey:"height")
  //--- Atomic property: holeDiameter
    self.holeDiameter_property.storeIn (dictionary: ioDictionary, forKey:"holeDiameter")
  //--- Atomic property: padShape
    self.padShape_property.storeIn (dictionary: ioDictionary, forKey:"padShape")
  //--- Atomic property: padStyle
    self.padStyle_property.storeIn (dictionary: ioDictionary, forKey:"padStyle")
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.storeIn (dictionary: ioDictionary, forKey:"xCenterUnit")
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.storeIn (dictionary: ioDictionary, forKey:"yCenterUnit")
  //--- Atomic property: widthUnit
    self.widthUnit_property.storeIn (dictionary: ioDictionary, forKey:"widthUnit")
  //--- Atomic property: heightUnit
    self.heightUnit_property.storeIn (dictionary: ioDictionary, forKey:"heightUnit")
  //--- Atomic property: holeDiameterUnit
    self.holeDiameterUnit_property.storeIn (dictionary: ioDictionary, forKey:"holeDiameterUnit")
  //--- Atomic property: annularRingUnit
    self.annularRingUnit_property.storeIn (dictionary: ioDictionary, forKey:"annularRingUnit")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To one property: master
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "master",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? PackagePad {
        self.master_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: xCenter
    self.xCenter_property.readFrom (dictionary: inDictionary, forKey:"xCenter")
  //--- Atomic property: yCenter
    self.yCenter_property.readFrom (dictionary: inDictionary, forKey:"yCenter")
  //--- Atomic property: width
    self.width_property.readFrom (dictionary: inDictionary, forKey:"width")
  //--- Atomic property: height
    self.height_property.readFrom (dictionary: inDictionary, forKey:"height")
  //--- Atomic property: holeDiameter
    self.holeDiameter_property.readFrom (dictionary: inDictionary, forKey:"holeDiameter")
  //--- Atomic property: padShape
    self.padShape_property.readFrom (dictionary: inDictionary, forKey:"padShape")
  //--- Atomic property: padStyle
    self.padStyle_property.readFrom (dictionary: inDictionary, forKey:"padStyle")
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.readFrom (dictionary: inDictionary, forKey:"xCenterUnit")
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.readFrom (dictionary: inDictionary, forKey:"yCenterUnit")
  //--- Atomic property: widthUnit
    self.widthUnit_property.readFrom (dictionary: inDictionary, forKey:"widthUnit")
  //--- Atomic property: heightUnit
    self.heightUnit_property.readFrom (dictionary: inDictionary, forKey:"heightUnit")
  //--- Atomic property: holeDiameterUnit
    self.holeDiameterUnit_property.readFrom (dictionary: inDictionary, forKey:"holeDiameterUnit")
  //--- Atomic property: annularRingUnit
    self.annularRingUnit_property.readFrom (dictionary: inDictionary, forKey:"annularRingUnit")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To one property: master
    if let managedObject = self.master_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To one property: master
    if let managedObject = self.master_property.propval {
      objects.append (managedObject)
    }
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.annularRingUnit_property.signature ())
    crc.accumulateUInt32 (self.height_property.signature ())
    crc.accumulateUInt32 (self.heightUnit_property.signature ())
    crc.accumulateUInt32 (self.holeDiameter_property.signature ())
    crc.accumulateUInt32 (self.holeDiameterUnit_property.signature ())
    crc.accumulateUInt32 (self.padShape_property.signature ())
    crc.accumulateUInt32 (self.padStyle_property.signature ())
    crc.accumulateUInt32 (self.width_property.signature ())
    crc.accumulateUInt32 (self.widthUnit_property.signature ())
    crc.accumulateUInt32 (self.xCenter_property.signature ())
    crc.accumulateUInt32 (self.xCenterUnit_property.signature ())
    crc.accumulateUInt32 (self.yCenter_property.signature ())
    crc.accumulateUInt32 (self.yCenterUnit_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageSlavePad : ReadOnlyAbstractArrayProperty <PackageSlavePad> {

  //····················································································································
  //   Observers of 'xCenter' stored property
  //····················································································································

  private var mObserversOf_xCenter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xCenter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xCenter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xCenter_toElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_xCenter.apply { (_ observer : EBEvent) in
        managedObject.xCenter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xCenter_fromElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    self.mObserversOf_xCenter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xCenter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yCenter' stored property
  //····················································································································

  private var mObserversOf_yCenter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yCenter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yCenter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yCenter_toElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_yCenter.apply { (_ observer : EBEvent) in
        managedObject.yCenter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yCenter_fromElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    self.mObserversOf_yCenter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yCenter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'width' stored property
  //····················································································································

  private var mObserversOf_width = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_width (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_width.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.width_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_width (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_width.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.width_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_width_toElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_width.apply { (_ observer : EBEvent) in
        managedObject.width_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_width_fromElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    self.mObserversOf_width.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.width_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'height' stored property
  //····················································································································

  private var mObserversOf_height = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_height (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_height.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.height_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_height (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_height.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.height_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_height_toElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_height.apply { (_ observer : EBEvent) in
        managedObject.height_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_height_fromElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    self.mObserversOf_height.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.height_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holeDiameter' stored property
  //····················································································································

  private var mObserversOf_holeDiameter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holeDiameter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_holeDiameter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeDiameter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holeDiameter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_holeDiameter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeDiameter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holeDiameter_toElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_holeDiameter.apply { (_ observer : EBEvent) in
        managedObject.holeDiameter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holeDiameter_fromElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    self.mObserversOf_holeDiameter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.holeDiameter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padShape' stored property
  //····················································································································

  private var mObserversOf_padShape = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padShape (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padShape.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padShape_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padShape (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padShape.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padShape_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padShape_toElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_padShape.apply { (_ observer : EBEvent) in
        managedObject.padShape_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padShape_fromElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    self.mObserversOf_padShape.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.padShape_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padStyle' stored property
  //····················································································································

  private var mObserversOf_padStyle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padStyle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padStyle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padStyle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padStyle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padStyle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padStyle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padStyle_toElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_padStyle.apply { (_ observer : EBEvent) in
        managedObject.padStyle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padStyle_fromElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    self.mObserversOf_padStyle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.padStyle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xCenterUnit' stored property
  //····················································································································

  private var mObserversOf_xCenterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xCenterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xCenterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xCenterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xCenterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xCenterUnit_toElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_xCenterUnit.apply { (_ observer : EBEvent) in
        managedObject.xCenterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xCenterUnit_fromElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    self.mObserversOf_xCenterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xCenterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yCenterUnit' stored property
  //····················································································································

  private var mObserversOf_yCenterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yCenterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yCenterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yCenterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yCenterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yCenterUnit_toElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_yCenterUnit.apply { (_ observer : EBEvent) in
        managedObject.yCenterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yCenterUnit_fromElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    self.mObserversOf_yCenterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yCenterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'widthUnit' stored property
  //····················································································································

  private var mObserversOf_widthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_widthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_widthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.widthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_widthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_widthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.widthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_widthUnit_toElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_widthUnit.apply { (_ observer : EBEvent) in
        managedObject.widthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_widthUnit_fromElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    self.mObserversOf_widthUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.widthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'heightUnit' stored property
  //····················································································································

  private var mObserversOf_heightUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_heightUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_heightUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.heightUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_heightUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_heightUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.heightUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_heightUnit_toElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_heightUnit.apply { (_ observer : EBEvent) in
        managedObject.heightUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_heightUnit_fromElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    self.mObserversOf_heightUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.heightUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'holeDiameterUnit' stored property
  //····················································································································

  private var mObserversOf_holeDiameterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_holeDiameterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_holeDiameterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeDiameterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_holeDiameterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_holeDiameterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.holeDiameterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_holeDiameterUnit_toElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_holeDiameterUnit.apply { (_ observer : EBEvent) in
        managedObject.holeDiameterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_holeDiameterUnit_fromElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    self.mObserversOf_holeDiameterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.holeDiameterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'annularRingUnit' stored property
  //····················································································································

  private var mObserversOf_annularRingUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_annularRingUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_annularRingUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.annularRingUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_annularRingUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_annularRingUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.annularRingUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_annularRingUnit_toElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_annularRingUnit.apply { (_ observer : EBEvent) in
        managedObject.annularRingUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_annularRingUnit_fromElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    self.mObserversOf_annularRingUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.annularRingUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padIsTraversing' transient property
  //····················································································································

  private var mObserversOf_padIsTraversing = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padIsTraversing (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padIsTraversing.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padIsTraversing_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padIsTraversing (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padIsTraversing.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padIsTraversing_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padIsTraversing_toElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_padIsTraversing.apply { (_ observer : EBEvent) in
        managedObject.padIsTraversing_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padIsTraversing_fromElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_padIsTraversing.apply { (_ observer : EBEvent) in
        managedObject.padIsTraversing_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'annularRing' transient property
  //····················································································································

  private var mObserversOf_annularRing = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_annularRing (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_annularRing.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.annularRing_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_annularRing (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_annularRing.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.annularRing_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_annularRing_toElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_annularRing.apply { (_ observer : EBEvent) in
        managedObject.annularRing_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_annularRing_fromElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_annularRing.apply { (_ observer : EBEvent) in
        managedObject.annularRing_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padName' transient property
  //····················································································································

  private var mObserversOf_padName = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padName (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padName.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padName_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padName (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padName.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padName_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padName_toElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_padName.apply { (_ observer : EBEvent) in
        managedObject.padName_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padName_fromElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_padName.apply { (_ observer : EBEvent) in
        managedObject.padName_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'padNumberDisplay' transient property
  //····················································································································

  private var mObserversOf_padNumberDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumberDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_padNumberDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.padNumberDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_padNumberDisplay_toElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_padNumberDisplay.apply { (_ observer : EBEvent) in
        managedObject.padNumberDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_padNumberDisplay_fromElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_padNumberDisplay.apply { (_ observer : EBEvent) in
        managedObject.padNumberDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<PackageSlavePad>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_PackageSlavePad : ReadOnlyArrayOf_PackageSlavePad {

  //····················································································································

  var mReadModelFunction : Optional < () -> EBSelection < [PackageSlavePad] > > = nil

  //····················································································································

  override var propset : Set <PackageSlavePad> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [PackageSlavePad] > {
    self.computeArrayAndSet ()
    return self.mCachedValue!  
  }
 
  //····················································································································

  override var propval : [PackageSlavePad] {
    self.computeArrayAndSet ()
    if let value = self.mCachedValue {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  private var mSet = Set <PackageSlavePad> ()

  //····················································································································

  private var mCachedValue : EBSelection < [PackageSlavePad] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.mReadModelFunction, self.mCachedValue == nil {
      let cachedValue = unwrappedComputeFunction ()
      self.mCachedValue = cachedValue
      let newSet : Set <PackageSlavePad>
      switch cachedValue {
      case .multiple, .empty :
        newSet = Set <PackageSlavePad> ()
      case .single (let array) :
        newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_xCenter_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_yCenter_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_width_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_height_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_holeDiameter_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_padShape_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_padStyle_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_xCenterUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_yCenterUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_widthUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_heightUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_holeDiameterUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_annularRingUnit_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_issues_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_padIsTraversing_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_annularRing_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_padName_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_padNumberDisplay_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_xCenter_toElementsOfSet (addedSet)
      self.addEBObserversOf_yCenter_toElementsOfSet (addedSet)
      self.addEBObserversOf_width_toElementsOfSet (addedSet)
      self.addEBObserversOf_height_toElementsOfSet (addedSet)
      self.addEBObserversOf_holeDiameter_toElementsOfSet (addedSet)
      self.addEBObserversOf_padShape_toElementsOfSet (addedSet)
      self.addEBObserversOf_padStyle_toElementsOfSet (addedSet)
      self.addEBObserversOf_xCenterUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_yCenterUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_widthUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_heightUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_holeDiameterUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_annularRingUnit_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedSet)
      self.addEBObserversOf_issues_toElementsOfSet (addedSet)
      self.addEBObserversOf_padIsTraversing_toElementsOfSet (addedSet)
      self.addEBObserversOf_annularRing_toElementsOfSet (addedSet)
      self.addEBObserversOf_padName_toElementsOfSet (addedSet)
      self.addEBObserversOf_padNumberDisplay_toElementsOfSet (addedSet)
      self.addEBObserversOf_objectDisplay_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.mCachedValue == nil {
      self.mCachedValue = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.mCachedValue != nil {
      self.mCachedValue = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.ebObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackageSlavePad : ReadOnlyArrayOf_PackageSlavePad {

  //····················································································································
 
  func setProp (_ value :  [PackageSlavePad]) { } // Abstract method
  
 //····················································································································

  private var mProxyArray = [ProxyArrayOf_PackageSlavePad] ()

  //····················································································································

  func attachProxy (_ inProxy : ProxyArrayOf_PackageSlavePad) {
    self.mProxyArray.append (inProxy)
    inProxy.updateProxy ()
    self.postEvent ()
  }

  //····················································································································

  func detachProxy (_ inProxy : ProxyArrayOf_PackageSlavePad) {
    if let idx = self.mProxyArray.firstIndex(of: inProxy) {
      self.mProxyArray.remove (at: idx)
      self.postEvent ()
    }
  }

  //····················································································································

  internal func propagateProxyUpdate () {
    for proxy in self.mProxyArray {
      proxy.updateProxy ()
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_PackageSlavePad : ReadWriteArrayOf_PackageSlavePad {

   //····················································································································

  private var mModel : ReadWriteArrayOf_PackageSlavePad? = nil

  //····················································································································

  private var mInternalValue : EBSelection < [PackageSlavePad] > = .empty {
    didSet {
      if self.mInternalValue != oldValue {
        switch self.mInternalValue {
        case .empty, .multiple :
          self.mCurrentObjectSet = []
        case .single (let v) :
          self.mCurrentObjectSet = Set (v)
        }
        self.propagateProxyUpdate ()
        self.postEvent ()
      }
    }
  }

  //····················································································································

  private var mCurrentObjectSet = Set <PackageSlavePad> () {
    didSet {
      if self.mCurrentObjectSet != oldValue {
      //--- Add observers from removed objects
        let removedObjectSet = oldValue.subtracting (self.mCurrentObjectSet)
        self.removeEBObserversOf_xCenter_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_yCenter_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_width_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_height_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_holeDiameter_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_padShape_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_padStyle_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_xCenterUnit_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_yCenterUnit_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_widthUnit_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_heightUnit_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_holeDiameterUnit_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_annularRingUnit_fromElementsOfSet (removedObjectSet) // Stored property
        self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedObjectSet) // Transient property
        self.removeEBObserversOf_issues_fromElementsOfSet (removedObjectSet) // Transient property
        self.removeEBObserversOf_padIsTraversing_fromElementsOfSet (removedObjectSet) // Transient property
        self.removeEBObserversOf_annularRing_fromElementsOfSet (removedObjectSet) // Transient property
        self.removeEBObserversOf_padName_fromElementsOfSet (removedObjectSet) // Transient property
        self.removeEBObserversOf_padNumberDisplay_fromElementsOfSet (removedObjectSet) // Transient property
        self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedObjectSet) // Transient property
      //--- Add observers to added objects
        let addedObjectSet = self.mCurrentObjectSet.subtracting (oldValue)
        self.addEBObserversOf_xCenter_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_yCenter_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_width_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_height_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_holeDiameter_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_padShape_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_padStyle_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_xCenterUnit_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_yCenterUnit_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_widthUnit_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_heightUnit_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_holeDiameterUnit_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_annularRingUnit_toElementsOfSet (addedObjectSet) // Stored property
        self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedObjectSet) // Transient property
        self.addEBObserversOf_issues_toElementsOfSet (addedObjectSet) // Transient property
        self.addEBObserversOf_padIsTraversing_toElementsOfSet (addedObjectSet) // Transient property
        self.addEBObserversOf_annularRing_toElementsOfSet (addedObjectSet) // Transient property
        self.addEBObserversOf_padName_toElementsOfSet (addedObjectSet) // Transient property
        self.addEBObserversOf_padNumberDisplay_toElementsOfSet (addedObjectSet) // Transient property
        self.addEBObserversOf_objectDisplay_toElementsOfSet (addedObjectSet) // Transient property
      }
    }
  }

  //····················································································································

  func bind (_ inModel : ReadWriteArrayOf_PackageSlavePad) {
    self.unbind ()
    self.mModel = inModel
    inModel.attachProxy (self)
  }

  //····················································································································

  func unbind () {
    if let model = self.mModel {
      model.detachProxy (self)
      self.mModel = nil
    }
  }

  //····················································································································

  func updateProxy () {
    if let model = self.mModel {
      self.mInternalValue = model.prop
    }else{
      self.mInternalValue = .empty
    }
  }

  //····················································································································

  override func setProp (_ inArrayValue :  [PackageSlavePad]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [PackageSlavePad] > {
    return self.mInternalValue
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: PackageSlavePad
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_PackageSlavePad : ReadWriteArrayOf_PackageSlavePad, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PackageSlavePad) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PackageSlavePad) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackageSlavePad) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PackageSlavePad) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [PackageSlavePad] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "PackageSlavePad") as? PackageSlavePad {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <PackageSlavePad> ()
  private var mValue = [PackageSlavePad] () {
    didSet {
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        if removedObjectSet.count > 0 {
          for managedObject in removedObjectSet {
            managedObject.setSignatureObserver (observer: nil)
            self.mResetOppositeRelationship? (managedObject)
            managedObject.xCenter_property.mSetterDelegate = nil
            managedObject.yCenter_property.mSetterDelegate = nil
            managedObject.width_property.mSetterDelegate = nil
            managedObject.height_property.mSetterDelegate = nil
            managedObject.holeDiameter_property.mSetterDelegate = nil
            managedObject.padShape_property.mSetterDelegate = nil
            managedObject.padStyle_property.mSetterDelegate = nil
            managedObject.xCenterUnit_property.mSetterDelegate = nil
            managedObject.yCenterUnit_property.mSetterDelegate = nil
            managedObject.widthUnit_property.mSetterDelegate = nil
            managedObject.heightUnit_property.mSetterDelegate = nil
            managedObject.holeDiameterUnit_property.mSetterDelegate = nil
            managedObject.annularRingUnit_property.mSetterDelegate = nil
          }
        //--- Remove observers of stored properties
          self.removeEBObserversOf_xCenter_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_yCenter_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_width_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_height_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_holeDiameter_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_padShape_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_padStyle_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_xCenterUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_yCenterUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_widthUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_heightUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_holeDiameterUnit_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_annularRingUnit_fromElementsOfSet (removedObjectSet)
        //--- Remove observers of transient properties
          self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_issues_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_padIsTraversing_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_annularRing_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_padName_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_padNumberDisplay_fromElementsOfSet (removedObjectSet)
          self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedObjectSet)
        }
       //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        if addedObjectSet.count > 0 {
          for managedObject : PackageSlavePad in addedObjectSet {
            managedObject.setSignatureObserver (observer: self)
            self.mSetOppositeRelationship? (managedObject)
            managedObject.xCenter_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.yCenter_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.width_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.height_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.holeDiameter_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.padShape_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.padStyle_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.xCenterUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.yCenterUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.widthUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.heightUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.holeDiameterUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
            managedObject.annularRingUnit_property.mSetterDelegate = { [weak self] inValue in self?.writeInPreferences () }
          }
        //--- Add observers of stored properties
          self.addEBObserversOf_xCenter_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_yCenter_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_width_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_height_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_holeDiameter_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_padShape_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_padStyle_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_xCenterUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_yCenterUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_widthUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_heightUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_holeDiameterUnit_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_annularRingUnit_toElementsOfSet (addedObjectSet)
        //--- Add observers of transient properties
          self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_issues_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_padIsTraversing_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_annularRing_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_padName_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_padNumberDisplay_toElementsOfSet (addedObjectSet)
          self.addEBObserversOf_objectDisplay_toElementsOfSet (addedObjectSet)
        }
      //--- Notify observers
        self.propagateProxyUpdate ()
        self.postEvent ()
        self.clearSignatureCache ()
      //--- Write in preferences ?
        self.writeInPreferences ()
      }
    }
  }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  override var prop : EBSelection < [PackageSlavePad] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [PackageSlavePad]) { self.mValue = inValue }

  //····················································································································

  override var propval : [PackageSlavePad] { return self.mValue }

  //····················································································································

  override var propset : Set <PackageSlavePad> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [PackageSlavePad]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : PackageSlavePad) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.firstIndex (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : PackageSlavePad) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To one relationship: master
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ToOneRelationship_PackageSlavePad_master : EBAbstractProperty {

  //····················································································································
  //   Value explorer
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button:unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  weak var owner : PackageSlavePad? { // SOULD BE WEAK
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        updateManagedObjectToOneRelationshipDisplay (object: propval, button:unwrappedExplorer)
      }
    }
  }
 
  //····················································································································

  private var mValue : PackagePad? {
    didSet {
      if let unwrappedOwner = self.owner, oldValue !== self.mValue {
      //--- Register old value in undo manager
        unwrappedOwner.ebUndoManager?.registerUndo (withTarget:self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let unwrappedExplorer = self.mValueExplorer {
          updateManagedObjectToOneRelationshipDisplay (object: self.mValue, button:unwrappedExplorer)
        }
      //--- Reset old opposite relation ship
        oldValue?.slaves_property.remove (unwrappedOwner)
      //--- Set new opposite relation ship
        self.mValue?.slaves_property.add (unwrappedOwner)
      //--- Remove property observers of old object
        oldValue?.annularRing_property.removeEBObserversFrom (&self.mObserversOf_annularRing)
        oldValue?.annularRingUnit_property.removeEBObserversFrom (&self.mObserversOf_annularRingUnit)
        oldValue?.height_property.removeEBObserversFrom (&self.mObserversOf_height)
        oldValue?.heightUnit_property.removeEBObserversFrom (&self.mObserversOf_heightUnit)
        oldValue?.holeDiameter_property.removeEBObserversFrom (&self.mObserversOf_holeDiameter)
        oldValue?.holeDiameterUnit_property.removeEBObserversFrom (&self.mObserversOf_holeDiameterUnit)
        oldValue?.issues_property.removeEBObserversFrom (&self.mObserversOf_issues)
        oldValue?.noZone_property.removeEBObserversFrom (&self.mObserversOf_noZone)
        oldValue?.objectDisplay_property.removeEBObserversFrom (&self.mObserversOf_objectDisplay)
        oldValue?.padIsTraversing_property.removeEBObserversFrom (&self.mObserversOf_padIsTraversing)
        oldValue?.padName_property.removeEBObserversFrom (&self.mObserversOf_padName)
        oldValue?.padNumber_property.removeEBObserversFrom (&self.mObserversOf_padNumber)
        oldValue?.padNumberDisplay_property.removeEBObserversFrom (&self.mObserversOf_padNumberDisplay)
        oldValue?.padShape_property.removeEBObserversFrom (&self.mObserversOf_padShape)
        oldValue?.padStyle_property.removeEBObserversFrom (&self.mObserversOf_padStyle)
        oldValue?.selectionDisplay_property.removeEBObserversFrom (&self.mObserversOf_selectionDisplay)
        oldValue?.slavePadCount_property.removeEBObserversFrom (&self.mObserversOf_slavePadCount)
        oldValue?.slaves_property.removeEBObserversFrom (&self.mObserversOf_slaves)
        oldValue?.width_property.removeEBObserversFrom (&self.mObserversOf_width)
        oldValue?.widthUnit_property.removeEBObserversFrom (&self.mObserversOf_widthUnit)
        oldValue?.xCenter_property.removeEBObserversFrom (&self.mObserversOf_xCenter)
        oldValue?.xCenterUnit_property.removeEBObserversFrom (&self.mObserversOf_xCenterUnit)
        oldValue?.yCenter_property.removeEBObserversFrom (&self.mObserversOf_yCenter)
        oldValue?.yCenterUnit_property.removeEBObserversFrom (&self.mObserversOf_yCenterUnit)
        oldValue?.zoneAllowsManualRenumbering_property.removeEBObserversFrom (&self.mObserversOf_zoneAllowsManualRenumbering)
        oldValue?.zoneName_property.removeEBObserversFrom (&self.mObserversOf_zoneName)
      //--- Add property observers to new object
        self.mValue?.annularRing_property.addEBObserversFrom (&self.mObserversOf_annularRing)
        self.mValue?.annularRingUnit_property.addEBObserversFrom (&self.mObserversOf_annularRingUnit)
        self.mValue?.height_property.addEBObserversFrom (&self.mObserversOf_height)
        self.mValue?.heightUnit_property.addEBObserversFrom (&self.mObserversOf_heightUnit)
        self.mValue?.holeDiameter_property.addEBObserversFrom (&self.mObserversOf_holeDiameter)
        self.mValue?.holeDiameterUnit_property.addEBObserversFrom (&self.mObserversOf_holeDiameterUnit)
        self.mValue?.issues_property.addEBObserversFrom (&self.mObserversOf_issues)
        self.mValue?.noZone_property.addEBObserversFrom (&self.mObserversOf_noZone)
        self.mValue?.objectDisplay_property.addEBObserversFrom (&self.mObserversOf_objectDisplay)
        self.mValue?.padIsTraversing_property.addEBObserversFrom (&self.mObserversOf_padIsTraversing)
        self.mValue?.padName_property.addEBObserversFrom (&self.mObserversOf_padName)
        self.mValue?.padNumber_property.addEBObserversFrom (&self.mObserversOf_padNumber)
        self.mValue?.padNumberDisplay_property.addEBObserversFrom (&self.mObserversOf_padNumberDisplay)
        self.mValue?.padShape_property.addEBObserversFrom (&self.mObserversOf_padShape)
        self.mValue?.padStyle_property.addEBObserversFrom (&self.mObserversOf_padStyle)
        self.mValue?.selectionDisplay_property.addEBObserversFrom (&self.mObserversOf_selectionDisplay)
        self.mValue?.slavePadCount_property.addEBObserversFrom (&self.mObserversOf_slavePadCount)
        self.mValue?.slaves_property.addEBObserversFrom (&self.mObserversOf_slaves)
        self.mValue?.width_property.addEBObserversFrom (&self.mObserversOf_width)
        self.mValue?.widthUnit_property.addEBObserversFrom (&self.mObserversOf_widthUnit)
        self.mValue?.xCenter_property.addEBObserversFrom (&self.mObserversOf_xCenter)
        self.mValue?.xCenterUnit_property.addEBObserversFrom (&self.mObserversOf_xCenterUnit)
        self.mValue?.yCenter_property.addEBObserversFrom (&self.mObserversOf_yCenter)
        self.mValue?.yCenterUnit_property.addEBObserversFrom (&self.mObserversOf_yCenterUnit)
        self.mValue?.zoneAllowsManualRenumbering_property.addEBObserversFrom (&self.mObserversOf_zoneAllowsManualRenumbering)
        self.mValue?.zoneName_property.addEBObserversFrom (&self.mObserversOf_zoneName)
       //--- Notify observers
        self.postEvent ()
      }
    }
  }

  //····················································································································

  var propval : PackagePad? { return self.mValue }

  var prop : EBSelection <PackagePad?> { return .single (self.mValue) }

  func setProp (_ value : PackagePad?) { self.mValue = value }

  //····················································································································

  @objc func performUndo (_ oldValue : PackagePad?) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : PackagePad) {
    if self.mValue === object {
      self.mValue = nil
    }
  }

  //····················································································································
  //   Observable atomic property: annularRing
  //····················································································································

  private var mObserversOf_annularRing = EBWeakEventSet ()

  //····················································································································

  var annularRing_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.annularRing_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_annularRing (_ inObserver : EBEvent) {
    self.mObserversOf_annularRing.insert (inObserver)
    if let object = self.propval {
      object.annularRing_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_annularRing (_ inObserver : EBEvent) {
    self.mObserversOf_annularRing.remove (inObserver)
    if let object = self.propval {
      object.annularRing_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: annularRingUnit
  //····················································································································

  private var mObserversOf_annularRingUnit = EBWeakEventSet ()

  //····················································································································

  var annularRingUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.annularRingUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_annularRingUnit (_ inObserver : EBEvent) {
    self.mObserversOf_annularRingUnit.insert (inObserver)
    if let object = self.propval {
      object.annularRingUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_annularRingUnit (_ inObserver : EBEvent) {
    self.mObserversOf_annularRingUnit.remove (inObserver)
    if let object = self.propval {
      object.annularRingUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: height
  //····················································································································

  private var mObserversOf_height = EBWeakEventSet ()

  //····················································································································

  var height_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.height_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_height (_ inObserver : EBEvent) {
    self.mObserversOf_height.insert (inObserver)
    if let object = self.propval {
      object.height_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_height (_ inObserver : EBEvent) {
    self.mObserversOf_height.remove (inObserver)
    if let object = self.propval {
      object.height_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: heightUnit
  //····················································································································

  private var mObserversOf_heightUnit = EBWeakEventSet ()

  //····················································································································

  var heightUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.heightUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_heightUnit (_ inObserver : EBEvent) {
    self.mObserversOf_heightUnit.insert (inObserver)
    if let object = self.propval {
      object.heightUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_heightUnit (_ inObserver : EBEvent) {
    self.mObserversOf_heightUnit.remove (inObserver)
    if let object = self.propval {
      object.heightUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: holeDiameter
  //····················································································································

  private var mObserversOf_holeDiameter = EBWeakEventSet ()

  //····················································································································

  var holeDiameter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.holeDiameter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_holeDiameter (_ inObserver : EBEvent) {
    self.mObserversOf_holeDiameter.insert (inObserver)
    if let object = self.propval {
      object.holeDiameter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_holeDiameter (_ inObserver : EBEvent) {
    self.mObserversOf_holeDiameter.remove (inObserver)
    if let object = self.propval {
      object.holeDiameter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: holeDiameterUnit
  //····················································································································

  private var mObserversOf_holeDiameterUnit = EBWeakEventSet ()

  //····················································································································

  var holeDiameterUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.holeDiameterUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_holeDiameterUnit (_ inObserver : EBEvent) {
    self.mObserversOf_holeDiameterUnit.insert (inObserver)
    if let object = self.propval {
      object.holeDiameterUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_holeDiameterUnit (_ inObserver : EBEvent) {
    self.mObserversOf_holeDiameterUnit.remove (inObserver)
    if let object = self.propval {
      object.holeDiameterUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: issues
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.issues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.mObserversOf_issues.insert (inObserver)
    if let object = self.propval {
      object.issues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.mObserversOf_issues.remove (inObserver)
    if let object = self.propval {
      object.issues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: noZone
  //····················································································································

  private var mObserversOf_noZone = EBWeakEventSet ()

  //····················································································································

  var noZone_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.noZone_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_noZone (_ inObserver : EBEvent) {
    self.mObserversOf_noZone.insert (inObserver)
    if let object = self.propval {
      object.noZone_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_noZone (_ inObserver : EBEvent) {
    self.mObserversOf_noZone.remove (inObserver)
    if let object = self.propval {
      object.noZone_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: objectDisplay
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  var objectDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.objectDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.mObserversOf_objectDisplay.insert (inObserver)
    if let object = self.propval {
      object.objectDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.mObserversOf_objectDisplay.remove (inObserver)
    if let object = self.propval {
      object.objectDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: padIsTraversing
  //····················································································································

  private var mObserversOf_padIsTraversing = EBWeakEventSet ()

  //····················································································································

  var padIsTraversing_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.padIsTraversing_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_padIsTraversing (_ inObserver : EBEvent) {
    self.mObserversOf_padIsTraversing.insert (inObserver)
    if let object = self.propval {
      object.padIsTraversing_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padIsTraversing (_ inObserver : EBEvent) {
    self.mObserversOf_padIsTraversing.remove (inObserver)
    if let object = self.propval {
      object.padIsTraversing_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: padName
  //····················································································································

  private var mObserversOf_padName = EBWeakEventSet ()

  //····················································································································

  var padName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.padName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_padName (_ inObserver : EBEvent) {
    self.mObserversOf_padName.insert (inObserver)
    if let object = self.propval {
      object.padName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padName (_ inObserver : EBEvent) {
    self.mObserversOf_padName.remove (inObserver)
    if let object = self.propval {
      object.padName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: padNumber
  //····················································································································

  private var mObserversOf_padNumber = EBWeakEventSet ()

  //····················································································································

  var padNumber_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.padNumber_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_padNumber (_ inObserver : EBEvent) {
    self.mObserversOf_padNumber.insert (inObserver)
    if let object = self.propval {
      object.padNumber_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNumber (_ inObserver : EBEvent) {
    self.mObserversOf_padNumber.remove (inObserver)
    if let object = self.propval {
      object.padNumber_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: padNumberDisplay
  //····················································································································

  private var mObserversOf_padNumberDisplay = EBWeakEventSet ()

  //····················································································································

  var padNumberDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.padNumberDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.mObserversOf_padNumberDisplay.insert (inObserver)
    if let object = self.propval {
      object.padNumberDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padNumberDisplay (_ inObserver : EBEvent) {
    self.mObserversOf_padNumberDisplay.remove (inObserver)
    if let object = self.propval {
      object.padNumberDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: padShape
  //····················································································································

  private var mObserversOf_padShape = EBWeakEventSet ()

  //····················································································································

  var padShape_property_selection : EBSelection <PadShape?> {
    if let model = self.propval {
      switch (model.padShape_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_padShape (_ inObserver : EBEvent) {
    self.mObserversOf_padShape.insert (inObserver)
    if let object = self.propval {
      object.padShape_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padShape (_ inObserver : EBEvent) {
    self.mObserversOf_padShape.remove (inObserver)
    if let object = self.propval {
      object.padShape_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: padStyle
  //····················································································································

  private var mObserversOf_padStyle = EBWeakEventSet ()

  //····················································································································

  var padStyle_property_selection : EBSelection <PadStyle?> {
    if let model = self.propval {
      switch (model.padStyle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_padStyle (_ inObserver : EBEvent) {
    self.mObserversOf_padStyle.insert (inObserver)
    if let object = self.propval {
      object.padStyle_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_padStyle (_ inObserver : EBEvent) {
    self.mObserversOf_padStyle.remove (inObserver)
    if let object = self.propval {
      object.padStyle_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: selectionDisplay
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  var selectionDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.selectionDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.mObserversOf_selectionDisplay.insert (inObserver)
    if let object = self.propval {
      object.selectionDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.mObserversOf_selectionDisplay.remove (inObserver)
    if let object = self.propval {
      object.selectionDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: slavePadCount
  //····················································································································

  private var mObserversOf_slavePadCount = EBWeakEventSet ()

  //····················································································································

  var slavePadCount_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.slavePadCount_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_slavePadCount (_ inObserver : EBEvent) {
    self.mObserversOf_slavePadCount.insert (inObserver)
    if let object = self.propval {
      object.slavePadCount_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_slavePadCount (_ inObserver : EBEvent) {
    self.mObserversOf_slavePadCount.remove (inObserver)
    if let object = self.propval {
      object.slavePadCount_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable toMany property: slaves
  //····················································································································

  private var mObserversOf_slaves = EBWeakEventSet ()

  //····················································································································

  var slaves_property_selection : EBSelection <[PackageSlavePad]> {
    if let model = self.propval {
      switch (model.slaves_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .empty
    }
  }

  //····················································································································

  final func addEBObserverOf_slaves (_ inObserver : EBEvent) {
    self.mObserversOf_slaves.insert (inObserver)
    if let object = self.propval {
      object.slaves_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_slaves (_ inObserver : EBEvent) {
    self.mObserversOf_slaves.remove (inObserver)
    if let object = self.propval {
      object.slaves_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: width
  //····················································································································

  private var mObserversOf_width = EBWeakEventSet ()

  //····················································································································

  var width_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.width_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_width (_ inObserver : EBEvent) {
    self.mObserversOf_width.insert (inObserver)
    if let object = self.propval {
      object.width_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_width (_ inObserver : EBEvent) {
    self.mObserversOf_width.remove (inObserver)
    if let object = self.propval {
      object.width_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: widthUnit
  //····················································································································

  private var mObserversOf_widthUnit = EBWeakEventSet ()

  //····················································································································

  var widthUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.widthUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_widthUnit (_ inObserver : EBEvent) {
    self.mObserversOf_widthUnit.insert (inObserver)
    if let object = self.propval {
      object.widthUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_widthUnit (_ inObserver : EBEvent) {
    self.mObserversOf_widthUnit.remove (inObserver)
    if let object = self.propval {
      object.widthUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: xCenter
  //····················································································································

  private var mObserversOf_xCenter = EBWeakEventSet ()

  //····················································································································

  var xCenter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.xCenter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.mObserversOf_xCenter.insert (inObserver)
    if let object = self.propval {
      object.xCenter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.mObserversOf_xCenter.remove (inObserver)
    if let object = self.propval {
      object.xCenter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: xCenterUnit
  //····················································································································

  private var mObserversOf_xCenterUnit = EBWeakEventSet ()

  //····················································································································

  var xCenterUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.xCenterUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_xCenterUnit (_ inObserver : EBEvent) {
    self.mObserversOf_xCenterUnit.insert (inObserver)
    if let object = self.propval {
      object.xCenterUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_xCenterUnit (_ inObserver : EBEvent) {
    self.mObserversOf_xCenterUnit.remove (inObserver)
    if let object = self.propval {
      object.xCenterUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: yCenter
  //····················································································································

  private var mObserversOf_yCenter = EBWeakEventSet ()

  //····················································································································

  var yCenter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.yCenter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.mObserversOf_yCenter.insert (inObserver)
    if let object = self.propval {
      object.yCenter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.mObserversOf_yCenter.remove (inObserver)
    if let object = self.propval {
      object.yCenter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: yCenterUnit
  //····················································································································

  private var mObserversOf_yCenterUnit = EBWeakEventSet ()

  //····················································································································

  var yCenterUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.yCenterUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_yCenterUnit (_ inObserver : EBEvent) {
    self.mObserversOf_yCenterUnit.insert (inObserver)
    if let object = self.propval {
      object.yCenterUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_yCenterUnit (_ inObserver : EBEvent) {
    self.mObserversOf_yCenterUnit.remove (inObserver)
    if let object = self.propval {
      object.yCenterUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: zoneAllowsManualRenumbering
  //····················································································································

  private var mObserversOf_zoneAllowsManualRenumbering = EBWeakEventSet ()

  //····················································································································

  var zoneAllowsManualRenumbering_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.zoneAllowsManualRenumbering_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_zoneAllowsManualRenumbering (_ inObserver : EBEvent) {
    self.mObserversOf_zoneAllowsManualRenumbering.insert (inObserver)
    if let object = self.propval {
      object.zoneAllowsManualRenumbering_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoneAllowsManualRenumbering (_ inObserver : EBEvent) {
    self.mObserversOf_zoneAllowsManualRenumbering.remove (inObserver)
    if let object = self.propval {
      object.zoneAllowsManualRenumbering_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observable atomic property: zoneName
  //····················································································································

  private var mObserversOf_zoneName = EBWeakEventSet ()

  //····················································································································

  var zoneName_property_selection : EBSelection <String?> {
    if let model = self.propval {
      switch (model.zoneName_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_zoneName (_ inObserver : EBEvent) {
    self.mObserversOf_zoneName.insert (inObserver)
    if let object = self.propval {
      object.zoneName_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_zoneName (_ inObserver : EBEvent) {
    self.mObserversOf_zoneName.remove (inObserver)
    if let object = self.propval {
      object.zoneName_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
