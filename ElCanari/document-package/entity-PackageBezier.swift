//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_y1 : class {
  var y1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_x2 : class {
  var x2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_y2 : class {
  var y2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_cpx1 : class {
  var cpx1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_cpy1 : class {
  var cpy1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_cpx2 : class {
  var cpx2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_cpy2 : class {
  var cpy2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_x1Unit : class {
  var x1Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_y1Unit : class {
  var y1Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_x2Unit : class {
  var x2Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_y2Unit : class {
  var y2Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_cpx1Unit : class {
  var cpx1Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_cpy1Unit : class {
  var cpy1Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_cpx2Unit : class {
  var cpx2Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_cpy2Unit : class {
  var cpy2Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_x1 : class {
  var x1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_strokeBezierPath : class {
  var strokeBezierPath : NSBezierPath? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageBezier
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class PackageBezier : PackageObject,
         PackageBezier_y1,
         PackageBezier_x2,
         PackageBezier_y2,
         PackageBezier_cpx1,
         PackageBezier_cpy1,
         PackageBezier_cpx2,
         PackageBezier_cpy2,
         PackageBezier_x1Unit,
         PackageBezier_y1Unit,
         PackageBezier_x2Unit,
         PackageBezier_y2Unit,
         PackageBezier_cpx1Unit,
         PackageBezier_cpy1Unit,
         PackageBezier_cpx2Unit,
         PackageBezier_cpy2Unit,
         PackageBezier_x1,
         PackageBezier_strokeBezierPath,
         PackageBezier_objectDisplay,
         PackageBezier_selectionDisplay,
         PackageBezier_issues {

  //····················································································································
  //   Atomic property: y1
  //····················································································································

  let y1_property = EBStoredProperty_Int (defaultValue: 685800)

  //····················································································································

  var y1 : Int {
    get { return self.y1_property.propval }
    set { self.y1_property.setProp (newValue) }
  }

  //····················································································································

  var y1_property_selection : EBSelection <Int> { return self.y1_property.prop }

  //····················································································································
  //   Atomic property: x2
  //····················································································································

  let x2_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var x2 : Int {
    get { return self.x2_property.propval }
    set { self.x2_property.setProp (newValue) }
  }

  //····················································································································

  var x2_property_selection : EBSelection <Int> { return self.x2_property.prop }

  //····················································································································
  //   Atomic property: y2
  //····················································································································

  let y2_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var y2 : Int {
    get { return self.y2_property.propval }
    set { self.y2_property.setProp (newValue) }
  }

  //····················································································································

  var y2_property_selection : EBSelection <Int> { return self.y2_property.prop }

  //····················································································································
  //   Atomic property: cpx1
  //····················································································································

  let cpx1_property = EBStoredProperty_Int (defaultValue: 685800)

  //····················································································································

  var cpx1 : Int {
    get { return self.cpx1_property.propval }
    set { self.cpx1_property.setProp (newValue) }
  }

  //····················································································································

  var cpx1_property_selection : EBSelection <Int> { return self.cpx1_property.prop }

  //····················································································································
  //   Atomic property: cpy1
  //····················································································································

  let cpy1_property = EBStoredProperty_Int (defaultValue: 685800)

  //····················································································································

  var cpy1 : Int {
    get { return self.cpy1_property.propval }
    set { self.cpy1_property.setProp (newValue) }
  }

  //····················································································································

  var cpy1_property_selection : EBSelection <Int> { return self.cpy1_property.prop }

  //····················································································································
  //   Atomic property: cpx2
  //····················································································································

  let cpx2_property = EBStoredProperty_Int (defaultValue: 685800)

  //····················································································································

  var cpx2 : Int {
    get { return self.cpx2_property.propval }
    set { self.cpx2_property.setProp (newValue) }
  }

  //····················································································································

  var cpx2_property_selection : EBSelection <Int> { return self.cpx2_property.prop }

  //····················································································································
  //   Atomic property: cpy2
  //····················································································································

  let cpy2_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var cpy2 : Int {
    get { return self.cpy2_property.propval }
    set { self.cpy2_property.setProp (newValue) }
  }

  //····················································································································

  var cpy2_property_selection : EBSelection <Int> { return self.cpy2_property.prop }

  //····················································································································
  //   Atomic property: x1Unit
  //····················································································································

  let x1Unit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var x1Unit : Int {
    get { return self.x1Unit_property.propval }
    set { self.x1Unit_property.setProp (newValue) }
  }

  //····················································································································

  var x1Unit_property_selection : EBSelection <Int> { return self.x1Unit_property.prop }

  //····················································································································
  //   Atomic property: y1Unit
  //····················································································································

  let y1Unit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var y1Unit : Int {
    get { return self.y1Unit_property.propval }
    set { self.y1Unit_property.setProp (newValue) }
  }

  //····················································································································

  var y1Unit_property_selection : EBSelection <Int> { return self.y1Unit_property.prop }

  //····················································································································
  //   Atomic property: x2Unit
  //····················································································································

  let x2Unit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var x2Unit : Int {
    get { return self.x2Unit_property.propval }
    set { self.x2Unit_property.setProp (newValue) }
  }

  //····················································································································

  var x2Unit_property_selection : EBSelection <Int> { return self.x2Unit_property.prop }

  //····················································································································
  //   Atomic property: y2Unit
  //····················································································································

  let y2Unit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var y2Unit : Int {
    get { return self.y2Unit_property.propval }
    set { self.y2Unit_property.setProp (newValue) }
  }

  //····················································································································

  var y2Unit_property_selection : EBSelection <Int> { return self.y2Unit_property.prop }

  //····················································································································
  //   Atomic property: cpx1Unit
  //····················································································································

  let cpx1Unit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var cpx1Unit : Int {
    get { return self.cpx1Unit_property.propval }
    set { self.cpx1Unit_property.setProp (newValue) }
  }

  //····················································································································

  var cpx1Unit_property_selection : EBSelection <Int> { return self.cpx1Unit_property.prop }

  //····················································································································
  //   Atomic property: cpy1Unit
  //····················································································································

  let cpy1Unit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var cpy1Unit : Int {
    get { return self.cpy1Unit_property.propval }
    set { self.cpy1Unit_property.setProp (newValue) }
  }

  //····················································································································

  var cpy1Unit_property_selection : EBSelection <Int> { return self.cpy1Unit_property.prop }

  //····················································································································
  //   Atomic property: cpx2Unit
  //····················································································································

  let cpx2Unit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var cpx2Unit : Int {
    get { return self.cpx2Unit_property.propval }
    set { self.cpx2Unit_property.setProp (newValue) }
  }

  //····················································································································

  var cpx2Unit_property_selection : EBSelection <Int> { return self.cpx2Unit_property.prop }

  //····················································································································
  //   Atomic property: cpy2Unit
  //····················································································································

  let cpy2Unit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var cpy2Unit : Int {
    get { return self.cpy2Unit_property.propval }
    set { self.cpy2Unit_property.setProp (newValue) }
  }

  //····················································································································

  var cpy2Unit_property_selection : EBSelection <Int> { return self.cpy2Unit_property.prop }

  //····················································································································
  //   Atomic property: x1
  //····················································································································

  let x1_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var x1 : Int {
    get { return self.x1_property.propval }
    set { self.x1_property.setProp (newValue) }
  }

  //····················································································································

  var x1_property_selection : EBSelection <Int> { return self.x1_property.prop }

  //····················································································································
  //   Transient property: strokeBezierPath
  //····················································································································

  let strokeBezierPath_property = EBTransientProperty_NSBezierPath ()

  //····················································································································

  var strokeBezierPath_property_selection : EBSelection <NSBezierPath> {
    return self.strokeBezierPath_property.prop
  }

  //····················································································································

  var strokeBezierPath : NSBezierPath? {
    switch self.strokeBezierPath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
    let operationQueue = OperationQueue ()
  //--- Atomic property: y1
    self.y1_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: x2
    self.x2_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: y2
    self.y2_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: cpx1
    self.cpx1_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: cpy1
    self.cpy1_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: cpx2
    self.cpx2_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: cpy2
    self.cpy2_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: x1Unit
    self.x1Unit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: y1Unit
    self.y1Unit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: x2Unit
    self.x2Unit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: y2Unit
    self.y2Unit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: cpx1Unit
    self.cpx1Unit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: cpy1Unit
    self.cpy1Unit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: cpx2Unit
    self.cpx2Unit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: cpy2Unit
    self.cpy2Unit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: x1
    self.x1_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: strokeBezierPath
    self.strokeBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        kind &= unwSelf.cpx1_property_selection.kind ()
        kind &= unwSelf.cpy1_property_selection.kind ()
        kind &= unwSelf.cpx2_property_selection.kind ()
        kind &= unwSelf.cpy2_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection, unwSelf.cpx1_property_selection, unwSelf.cpy1_property_selection, unwSelf.cpx2_property_selection, unwSelf.cpy2_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (transient_PackageBezier_strokeBezierPath (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.strokeBezierPath_property, postEvent: false)
    self.y1_property.addEBObserver (self.strokeBezierPath_property, postEvent: false)
    self.x2_property.addEBObserver (self.strokeBezierPath_property, postEvent: false)
    self.y2_property.addEBObserver (self.strokeBezierPath_property, postEvent: false)
    self.cpx1_property.addEBObserver (self.strokeBezierPath_property, postEvent: false)
    self.cpy1_property.addEBObserver (self.strokeBezierPath_property, postEvent: false)
    self.cpx2_property.addEBObserver (self.strokeBezierPath_property, postEvent: false)
    self.cpy2_property.addEBObserver (self.strokeBezierPath_property, postEvent: false)
    self.strokeBezierPath_property.postEvent ()
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.strokeBezierPath_property_selection.kind ()
        kind &= g_Preferences!.packageColor_property_selection.kind ()
        kind &= g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.strokeBezierPath_property_selection, g_Preferences!.packageColor_property_selection, g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_PackageBezier_objectDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.strokeBezierPath_property.addEBObserver (self.objectDisplay_property, postEvent: false)
    g_Preferences?.packageColor_property.addEBObserver (self.objectDisplay_property, postEvent: false)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.addEBObserver (self.objectDisplay_property, postEvent: false)
    self.objectDisplay_property.postEvent ()
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        kind &= unwSelf.cpx1_property_selection.kind ()
        kind &= unwSelf.cpy1_property_selection.kind ()
        kind &= unwSelf.cpx2_property_selection.kind ()
        kind &= unwSelf.cpy2_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection, unwSelf.cpx1_property_selection, unwSelf.cpy1_property_selection, unwSelf.cpx2_property_selection, unwSelf.cpy2_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (transient_PackageBezier_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.selectionDisplay_property, postEvent: false)
    self.y1_property.addEBObserver (self.selectionDisplay_property, postEvent: false)
    self.x2_property.addEBObserver (self.selectionDisplay_property, postEvent: false)
    self.y2_property.addEBObserver (self.selectionDisplay_property, postEvent: false)
    self.cpx1_property.addEBObserver (self.selectionDisplay_property, postEvent: false)
    self.cpy1_property.addEBObserver (self.selectionDisplay_property, postEvent: false)
    self.cpx2_property.addEBObserver (self.selectionDisplay_property, postEvent: false)
    self.cpy2_property.addEBObserver (self.selectionDisplay_property, postEvent: false)
    self.selectionDisplay_property.postEvent ()
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        kind &= unwSelf.cpx1_property_selection.kind ()
        kind &= unwSelf.cpy1_property_selection.kind ()
        kind &= unwSelf.cpx2_property_selection.kind ()
        kind &= unwSelf.cpy2_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection, unwSelf.cpx1_property_selection, unwSelf.cpy1_property_selection, unwSelf.cpx2_property_selection, unwSelf.cpy2_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (transient_PackageBezier_issues (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.issues_property, postEvent: false)
    self.y1_property.addEBObserver (self.issues_property, postEvent: false)
    self.x2_property.addEBObserver (self.issues_property, postEvent: false)
    self.y2_property.addEBObserver (self.issues_property, postEvent: false)
    self.cpx1_property.addEBObserver (self.issues_property, postEvent: false)
    self.cpy1_property.addEBObserver (self.issues_property, postEvent: false)
    self.cpx2_property.addEBObserver (self.issues_property, postEvent: false)
    self.cpy2_property.addEBObserver (self.issues_property, postEvent: false)
    self.issues_property.postEvent ()
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.cpx1_property.setSignatureObserver (observer: self)
    self.cpx1Unit_property.setSignatureObserver (observer: self)
    self.cpx2_property.setSignatureObserver (observer: self)
    self.cpx2Unit_property.setSignatureObserver (observer: self)
    self.cpy1_property.setSignatureObserver (observer: self)
    self.cpy1Unit_property.setSignatureObserver (observer: self)
    self.cpy2_property.setSignatureObserver (observer: self)
    self.cpy2Unit_property.setSignatureObserver (observer: self)
    self.x1_property.setSignatureObserver (observer: self)
    self.x1Unit_property.setSignatureObserver (observer: self)
    self.x2_property.setSignatureObserver (observer: self)
    self.x2Unit_property.setSignatureObserver (observer: self)
    self.y1_property.setSignatureObserver (observer: self)
    self.y1Unit_property.setSignatureObserver (observer: self)
    self.y2_property.setSignatureObserver (observer: self)
    self.y2Unit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
    operationQueue.waitUntilAllOperationsAreFinished ()
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.x1_property.removeEBObserver (self.strokeBezierPath_property)
    self.y1_property.removeEBObserver (self.strokeBezierPath_property)
    self.x2_property.removeEBObserver (self.strokeBezierPath_property)
    self.y2_property.removeEBObserver (self.strokeBezierPath_property)
    self.cpx1_property.removeEBObserver (self.strokeBezierPath_property)
    self.cpy1_property.removeEBObserver (self.strokeBezierPath_property)
    self.cpx2_property.removeEBObserver (self.strokeBezierPath_property)
    self.cpy2_property.removeEBObserver (self.strokeBezierPath_property)
    self.strokeBezierPath_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.removeEBObserver (self.objectDisplay_property)
    self.x1_property.removeEBObserver (self.selectionDisplay_property)
    self.y1_property.removeEBObserver (self.selectionDisplay_property)
    self.x2_property.removeEBObserver (self.selectionDisplay_property)
    self.y2_property.removeEBObserver (self.selectionDisplay_property)
    self.cpx1_property.removeEBObserver (self.selectionDisplay_property)
    self.cpy1_property.removeEBObserver (self.selectionDisplay_property)
    self.cpx2_property.removeEBObserver (self.selectionDisplay_property)
    self.cpy2_property.removeEBObserver (self.selectionDisplay_property)
    self.x1_property.removeEBObserver (self.issues_property)
    self.y1_property.removeEBObserver (self.issues_property)
    self.x2_property.removeEBObserver (self.issues_property)
    self.y2_property.removeEBObserver (self.issues_property)
    self.cpx1_property.removeEBObserver (self.issues_property)
    self.cpy1_property.removeEBObserver (self.issues_property)
    self.cpx2_property.removeEBObserver (self.issues_property)
    self.cpy2_property.removeEBObserver (self.issues_property)
  //--- Unregister properties for handling signature
    self.cpx1_property.setSignatureObserver (observer: nil)
    self.cpx1Unit_property.setSignatureObserver (observer: nil)
    self.cpx2_property.setSignatureObserver (observer: nil)
    self.cpx2Unit_property.setSignatureObserver (observer: nil)
    self.cpy1_property.setSignatureObserver (observer: nil)
    self.cpy1Unit_property.setSignatureObserver (observer: nil)
    self.cpy2_property.setSignatureObserver (observer: nil)
    self.cpy2Unit_property.setSignatureObserver (observer: nil)
    self.x1_property.setSignatureObserver (observer: nil)
    self.x1Unit_property.setSignatureObserver (observer: nil)
    self.x2_property.setSignatureObserver (observer: nil)
    self.x2Unit_property.setSignatureObserver (observer: nil)
    self.y1_property.setSignatureObserver (observer: nil)
    self.y1Unit_property.setSignatureObserver (observer: nil)
    self.y2_property.setSignatureObserver (observer: nil)
    self.y2Unit_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "y1",
      idx: self.y1_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.y1_property.mObserverExplorer,
      valueExplorer: &self.y1_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x2",
      idx: self.x2_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.x2_property.mObserverExplorer,
      valueExplorer: &self.x2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y2",
      idx: self.y2_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.y2_property.mObserverExplorer,
      valueExplorer: &self.y2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpx1",
      idx: self.cpx1_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.cpx1_property.mObserverExplorer,
      valueExplorer: &self.cpx1_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpy1",
      idx: self.cpy1_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.cpy1_property.mObserverExplorer,
      valueExplorer: &self.cpy1_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpx2",
      idx: self.cpx2_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.cpx2_property.mObserverExplorer,
      valueExplorer: &self.cpx2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpy2",
      idx: self.cpy2_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.cpy2_property.mObserverExplorer,
      valueExplorer: &self.cpy2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x1Unit",
      idx: self.x1Unit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.x1Unit_property.mObserverExplorer,
      valueExplorer: &self.x1Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y1Unit",
      idx: self.y1Unit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.y1Unit_property.mObserverExplorer,
      valueExplorer: &self.y1Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x2Unit",
      idx: self.x2Unit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.x2Unit_property.mObserverExplorer,
      valueExplorer: &self.x2Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y2Unit",
      idx: self.y2Unit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.y2Unit_property.mObserverExplorer,
      valueExplorer: &self.y2Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpx1Unit",
      idx: self.cpx1Unit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.cpx1Unit_property.mObserverExplorer,
      valueExplorer: &self.cpx1Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpy1Unit",
      idx: self.cpy1Unit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.cpy1Unit_property.mObserverExplorer,
      valueExplorer: &self.cpy1Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpx2Unit",
      idx: self.cpx2Unit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.cpx2Unit_property.mObserverExplorer,
      valueExplorer: &self.cpx2Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpy2Unit",
      idx: self.cpy2Unit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.cpy2Unit_property.mObserverExplorer,
      valueExplorer: &self.cpy2Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x1",
      idx: self.x1_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.x1_property.mObserverExplorer,
      valueExplorer: &self.x1_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "strokeBezierPath",
      idx: self.strokeBezierPath_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.strokeBezierPath_property.mObserverExplorer,
      valueExplorer: &self.strokeBezierPath_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx: self.objectDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.objectDisplay_property.mObserverExplorer,
      valueExplorer: &self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx: self.selectionDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
      valueExplorer: &self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx: self.issues_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.issues_property.mObserverExplorer,
      valueExplorer: &self.issues_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: y1
    self.y1_property.mObserverExplorer = nil
    self.y1_property.mValueExplorer = nil
  //--- Atomic property: x2
    self.x2_property.mObserverExplorer = nil
    self.x2_property.mValueExplorer = nil
  //--- Atomic property: y2
    self.y2_property.mObserverExplorer = nil
    self.y2_property.mValueExplorer = nil
  //--- Atomic property: cpx1
    self.cpx1_property.mObserverExplorer = nil
    self.cpx1_property.mValueExplorer = nil
  //--- Atomic property: cpy1
    self.cpy1_property.mObserverExplorer = nil
    self.cpy1_property.mValueExplorer = nil
  //--- Atomic property: cpx2
    self.cpx2_property.mObserverExplorer = nil
    self.cpx2_property.mValueExplorer = nil
  //--- Atomic property: cpy2
    self.cpy2_property.mObserverExplorer = nil
    self.cpy2_property.mValueExplorer = nil
  //--- Atomic property: x1Unit
    self.x1Unit_property.mObserverExplorer = nil
    self.x1Unit_property.mValueExplorer = nil
  //--- Atomic property: y1Unit
    self.y1Unit_property.mObserverExplorer = nil
    self.y1Unit_property.mValueExplorer = nil
  //--- Atomic property: x2Unit
    self.x2Unit_property.mObserverExplorer = nil
    self.x2Unit_property.mValueExplorer = nil
  //--- Atomic property: y2Unit
    self.y2Unit_property.mObserverExplorer = nil
    self.y2Unit_property.mValueExplorer = nil
  //--- Atomic property: cpx1Unit
    self.cpx1Unit_property.mObserverExplorer = nil
    self.cpx1Unit_property.mValueExplorer = nil
  //--- Atomic property: cpy1Unit
    self.cpy1Unit_property.mObserverExplorer = nil
    self.cpy1Unit_property.mValueExplorer = nil
  //--- Atomic property: cpx2Unit
    self.cpx2Unit_property.mObserverExplorer = nil
    self.cpx2Unit_property.mValueExplorer = nil
  //--- Atomic property: cpy2Unit
    self.cpy2Unit_property.mObserverExplorer = nil
    self.cpy2Unit_property.mValueExplorer = nil
  //--- Atomic property: x1
    self.x1_property.mObserverExplorer = nil
    self.x1_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: y1
    self.y1_property.storeIn (dictionary: ioDictionary, forKey:"y1")
  //--- Atomic property: x2
    self.x2_property.storeIn (dictionary: ioDictionary, forKey:"x2")
  //--- Atomic property: y2
    self.y2_property.storeIn (dictionary: ioDictionary, forKey:"y2")
  //--- Atomic property: cpx1
    self.cpx1_property.storeIn (dictionary: ioDictionary, forKey:"cpx1")
  //--- Atomic property: cpy1
    self.cpy1_property.storeIn (dictionary: ioDictionary, forKey:"cpy1")
  //--- Atomic property: cpx2
    self.cpx2_property.storeIn (dictionary: ioDictionary, forKey:"cpx2")
  //--- Atomic property: cpy2
    self.cpy2_property.storeIn (dictionary: ioDictionary, forKey:"cpy2")
  //--- Atomic property: x1Unit
    self.x1Unit_property.storeIn (dictionary: ioDictionary, forKey:"x1Unit")
  //--- Atomic property: y1Unit
    self.y1Unit_property.storeIn (dictionary: ioDictionary, forKey:"y1Unit")
  //--- Atomic property: x2Unit
    self.x2Unit_property.storeIn (dictionary: ioDictionary, forKey:"x2Unit")
  //--- Atomic property: y2Unit
    self.y2Unit_property.storeIn (dictionary: ioDictionary, forKey:"y2Unit")
  //--- Atomic property: cpx1Unit
    self.cpx1Unit_property.storeIn (dictionary: ioDictionary, forKey:"cpx1Unit")
  //--- Atomic property: cpy1Unit
    self.cpy1Unit_property.storeIn (dictionary: ioDictionary, forKey:"cpy1Unit")
  //--- Atomic property: cpx2Unit
    self.cpx2Unit_property.storeIn (dictionary: ioDictionary, forKey:"cpx2Unit")
  //--- Atomic property: cpy2Unit
    self.cpy2Unit_property.storeIn (dictionary: ioDictionary, forKey:"cpy2Unit")
  //--- Atomic property: x1
    self.x1_property.storeIn (dictionary: ioDictionary, forKey:"x1")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: y1
    self.y1_property.readFrom (dictionary: inDictionary, forKey:"y1")
  //--- Atomic property: x2
    self.x2_property.readFrom (dictionary: inDictionary, forKey:"x2")
  //--- Atomic property: y2
    self.y2_property.readFrom (dictionary: inDictionary, forKey:"y2")
  //--- Atomic property: cpx1
    self.cpx1_property.readFrom (dictionary: inDictionary, forKey:"cpx1")
  //--- Atomic property: cpy1
    self.cpy1_property.readFrom (dictionary: inDictionary, forKey:"cpy1")
  //--- Atomic property: cpx2
    self.cpx2_property.readFrom (dictionary: inDictionary, forKey:"cpx2")
  //--- Atomic property: cpy2
    self.cpy2_property.readFrom (dictionary: inDictionary, forKey:"cpy2")
  //--- Atomic property: x1Unit
    self.x1Unit_property.readFrom (dictionary: inDictionary, forKey:"x1Unit")
  //--- Atomic property: y1Unit
    self.y1Unit_property.readFrom (dictionary: inDictionary, forKey:"y1Unit")
  //--- Atomic property: x2Unit
    self.x2Unit_property.readFrom (dictionary: inDictionary, forKey:"x2Unit")
  //--- Atomic property: y2Unit
    self.y2Unit_property.readFrom (dictionary: inDictionary, forKey:"y2Unit")
  //--- Atomic property: cpx1Unit
    self.cpx1Unit_property.readFrom (dictionary: inDictionary, forKey:"cpx1Unit")
  //--- Atomic property: cpy1Unit
    self.cpy1Unit_property.readFrom (dictionary: inDictionary, forKey:"cpy1Unit")
  //--- Atomic property: cpx2Unit
    self.cpx2Unit_property.readFrom (dictionary: inDictionary, forKey:"cpx2Unit")
  //--- Atomic property: cpy2Unit
    self.cpy2Unit_property.readFrom (dictionary: inDictionary, forKey:"cpy2Unit")
  //--- Atomic property: x1
    self.x1_property.readFrom (dictionary: inDictionary, forKey:"x1")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.cpx1_property.signature ())
    crc.accumulateUInt32 (self.cpx1Unit_property.signature ())
    crc.accumulateUInt32 (self.cpx2_property.signature ())
    crc.accumulateUInt32 (self.cpx2Unit_property.signature ())
    crc.accumulateUInt32 (self.cpy1_property.signature ())
    crc.accumulateUInt32 (self.cpy1Unit_property.signature ())
    crc.accumulateUInt32 (self.cpy2_property.signature ())
    crc.accumulateUInt32 (self.cpy2Unit_property.signature ())
    crc.accumulateUInt32 (self.x1_property.signature ())
    crc.accumulateUInt32 (self.x1Unit_property.signature ())
    crc.accumulateUInt32 (self.x2_property.signature ())
    crc.accumulateUInt32 (self.x2Unit_property.signature ())
    crc.accumulateUInt32 (self.y1_property.signature ())
    crc.accumulateUInt32 (self.y1Unit_property.signature ())
    crc.accumulateUInt32 (self.y2_property.signature ())
    crc.accumulateUInt32 (self.y2Unit_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

