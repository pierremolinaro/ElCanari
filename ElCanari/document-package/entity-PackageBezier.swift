//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_y1 : class {
  var y1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_x2 : class {
  var x2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_y2 : class {
  var y2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_cpx1 : class {
  var cpx1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_cpy1 : class {
  var cpy1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_cpx2 : class {
  var cpx2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_cpy2 : class {
  var cpy2 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_x1Unit : class {
  var x1Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_y1Unit : class {
  var y1Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_x2Unit : class {
  var x2Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_y2Unit : class {
  var y2Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_cpx1Unit : class {
  var cpx1Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_cpy1Unit : class {
  var cpy1Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_cpx2Unit : class {
  var cpx2Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_cpy2Unit : class {
  var cpy2Unit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_x1 : class {
  var x1 : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageBezier_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageBezier
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class PackageBezier : PackageObject,
         PackageBezier_y1,
         PackageBezier_x2,
         PackageBezier_y2,
         PackageBezier_cpx1,
         PackageBezier_cpy1,
         PackageBezier_cpx2,
         PackageBezier_cpy2,
         PackageBezier_x1Unit,
         PackageBezier_y1Unit,
         PackageBezier_x2Unit,
         PackageBezier_y2Unit,
         PackageBezier_cpx1Unit,
         PackageBezier_cpy1Unit,
         PackageBezier_cpx2Unit,
         PackageBezier_cpy2Unit,
         PackageBezier_x1,
         PackageBezier_objectDisplay,
         PackageBezier_selectionDisplay,
         PackageBezier_issues {

  //····················································································································
  //   Atomic property: y1
  //····················································································································

  var y1_property = EBStoredProperty_Int (685800)

  //····················································································································

  var y1 : Int {
    get {
      return self.y1_property.propval
    }
    set {
      self.y1_property.setProp (newValue)
    }
  }

  //····················································································································

  var y1_property_selection : EBSelection <Int> {
    return self.y1_property.prop
  }

  //····················································································································
  //   Atomic property: x2
  //····················································································································

  var x2_property = EBStoredProperty_Int (0)

  //····················································································································

  var x2 : Int {
    get {
      return self.x2_property.propval
    }
    set {
      self.x2_property.setProp (newValue)
    }
  }

  //····················································································································

  var x2_property_selection : EBSelection <Int> {
    return self.x2_property.prop
  }

  //····················································································································
  //   Atomic property: y2
  //····················································································································

  var y2_property = EBStoredProperty_Int (0)

  //····················································································································

  var y2 : Int {
    get {
      return self.y2_property.propval
    }
    set {
      self.y2_property.setProp (newValue)
    }
  }

  //····················································································································

  var y2_property_selection : EBSelection <Int> {
    return self.y2_property.prop
  }

  //····················································································································
  //   Atomic property: cpx1
  //····················································································································

  var cpx1_property = EBStoredProperty_Int (685800)

  //····················································································································

  var cpx1 : Int {
    get {
      return self.cpx1_property.propval
    }
    set {
      self.cpx1_property.setProp (newValue)
    }
  }

  //····················································································································

  var cpx1_property_selection : EBSelection <Int> {
    return self.cpx1_property.prop
  }

  //····················································································································
  //   Atomic property: cpy1
  //····················································································································

  var cpy1_property = EBStoredProperty_Int (685800)

  //····················································································································

  var cpy1 : Int {
    get {
      return self.cpy1_property.propval
    }
    set {
      self.cpy1_property.setProp (newValue)
    }
  }

  //····················································································································

  var cpy1_property_selection : EBSelection <Int> {
    return self.cpy1_property.prop
  }

  //····················································································································
  //   Atomic property: cpx2
  //····················································································································

  var cpx2_property = EBStoredProperty_Int (685800)

  //····················································································································

  var cpx2 : Int {
    get {
      return self.cpx2_property.propval
    }
    set {
      self.cpx2_property.setProp (newValue)
    }
  }

  //····················································································································

  var cpx2_property_selection : EBSelection <Int> {
    return self.cpx2_property.prop
  }

  //····················································································································
  //   Atomic property: cpy2
  //····················································································································

  var cpy2_property = EBStoredProperty_Int (0)

  //····················································································································

  var cpy2 : Int {
    get {
      return self.cpy2_property.propval
    }
    set {
      self.cpy2_property.setProp (newValue)
    }
  }

  //····················································································································

  var cpy2_property_selection : EBSelection <Int> {
    return self.cpy2_property.prop
  }

  //····················································································································
  //   Atomic property: x1Unit
  //····················································································································

  var x1Unit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var x1Unit : Int {
    get {
      return self.x1Unit_property.propval
    }
    set {
      self.x1Unit_property.setProp (newValue)
    }
  }

  //····················································································································

  var x1Unit_property_selection : EBSelection <Int> {
    return self.x1Unit_property.prop
  }

  //····················································································································
  //   Atomic property: y1Unit
  //····················································································································

  var y1Unit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var y1Unit : Int {
    get {
      return self.y1Unit_property.propval
    }
    set {
      self.y1Unit_property.setProp (newValue)
    }
  }

  //····················································································································

  var y1Unit_property_selection : EBSelection <Int> {
    return self.y1Unit_property.prop
  }

  //····················································································································
  //   Atomic property: x2Unit
  //····················································································································

  var x2Unit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var x2Unit : Int {
    get {
      return self.x2Unit_property.propval
    }
    set {
      self.x2Unit_property.setProp (newValue)
    }
  }

  //····················································································································

  var x2Unit_property_selection : EBSelection <Int> {
    return self.x2Unit_property.prop
  }

  //····················································································································
  //   Atomic property: y2Unit
  //····················································································································

  var y2Unit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var y2Unit : Int {
    get {
      return self.y2Unit_property.propval
    }
    set {
      self.y2Unit_property.setProp (newValue)
    }
  }

  //····················································································································

  var y2Unit_property_selection : EBSelection <Int> {
    return self.y2Unit_property.prop
  }

  //····················································································································
  //   Atomic property: cpx1Unit
  //····················································································································

  var cpx1Unit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var cpx1Unit : Int {
    get {
      return self.cpx1Unit_property.propval
    }
    set {
      self.cpx1Unit_property.setProp (newValue)
    }
  }

  //····················································································································

  var cpx1Unit_property_selection : EBSelection <Int> {
    return self.cpx1Unit_property.prop
  }

  //····················································································································
  //   Atomic property: cpy1Unit
  //····················································································································

  var cpy1Unit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var cpy1Unit : Int {
    get {
      return self.cpy1Unit_property.propval
    }
    set {
      self.cpy1Unit_property.setProp (newValue)
    }
  }

  //····················································································································

  var cpy1Unit_property_selection : EBSelection <Int> {
    return self.cpy1Unit_property.prop
  }

  //····················································································································
  //   Atomic property: cpx2Unit
  //····················································································································

  var cpx2Unit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var cpx2Unit : Int {
    get {
      return self.cpx2Unit_property.propval
    }
    set {
      self.cpx2Unit_property.setProp (newValue)
    }
  }

  //····················································································································

  var cpx2Unit_property_selection : EBSelection <Int> {
    return self.cpx2Unit_property.prop
  }

  //····················································································································
  //   Atomic property: cpy2Unit
  //····················································································································

  var cpy2Unit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var cpy2Unit : Int {
    get {
      return self.cpy2Unit_property.propval
    }
    set {
      self.cpy2Unit_property.setProp (newValue)
    }
  }

  //····················································································································

  var cpy2Unit_property_selection : EBSelection <Int> {
    return self.cpy2Unit_property.prop
  }

  //····················································································································
  //   Atomic property: x1
  //····················································································································

  var x1_property = EBStoredProperty_Int (0)

  //····················································································································

  var x1 : Int {
    get {
      return self.x1_property.propval
    }
    set {
      self.x1_property.setProp (newValue)
    }
  }

  //····················································································································

  var x1_property_selection : EBSelection <Int> {
    return self.x1_property.prop
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ undoManager : EBUndoManager?, file: String, _ line : Int) {
    super.init (undoManager, file: file, line)
  //--- Atomic property: y1
    self.y1_property.undoManager = self.undoManager
  //--- Atomic property: x2
    self.x2_property.undoManager = self.undoManager
  //--- Atomic property: y2
    self.y2_property.undoManager = self.undoManager
  //--- Atomic property: cpx1
    self.cpx1_property.undoManager = self.undoManager
  //--- Atomic property: cpy1
    self.cpy1_property.undoManager = self.undoManager
  //--- Atomic property: cpx2
    self.cpx2_property.undoManager = self.undoManager
  //--- Atomic property: cpy2
    self.cpy2_property.undoManager = self.undoManager
  //--- Atomic property: x1Unit
    self.x1Unit_property.undoManager = self.undoManager
  //--- Atomic property: y1Unit
    self.y1Unit_property.undoManager = self.undoManager
  //--- Atomic property: x2Unit
    self.x2Unit_property.undoManager = self.undoManager
  //--- Atomic property: y2Unit
    self.y2Unit_property.undoManager = self.undoManager
  //--- Atomic property: cpx1Unit
    self.cpx1Unit_property.undoManager = self.undoManager
  //--- Atomic property: cpy1Unit
    self.cpy1Unit_property.undoManager = self.undoManager
  //--- Atomic property: cpx2Unit
    self.cpx2Unit_property.undoManager = self.undoManager
  //--- Atomic property: cpy2Unit
    self.cpy2Unit_property.undoManager = self.undoManager
  //--- Atomic property: x1
    self.x1_property.undoManager = self.undoManager
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        kind &= unwSelf.cpx1_property_selection.kind ()
        kind &= unwSelf.cpy1_property_selection.kind ()
        kind &= unwSelf.cpx2_property_selection.kind ()
        kind &= unwSelf.cpy2_property_selection.kind ()
        kind &= g_Preferences!.packageColor_property_selection.kind ()
        kind &= g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection, unwSelf.cpx1_property_selection, unwSelf.cpy1_property_selection, unwSelf.cpx2_property_selection, unwSelf.cpy2_property_selection, g_Preferences!.packageColor_property_selection, g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9)) :
            return .single (transient_PackageBezier_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.objectDisplay_property)
    self.y1_property.addEBObserver (self.objectDisplay_property)
    self.x2_property.addEBObserver (self.objectDisplay_property)
    self.y2_property.addEBObserver (self.objectDisplay_property)
    self.cpx1_property.addEBObserver (self.objectDisplay_property)
    self.cpy1_property.addEBObserver (self.objectDisplay_property)
    self.cpx2_property.addEBObserver (self.objectDisplay_property)
    self.cpy2_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.packageColor_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        kind &= unwSelf.cpx1_property_selection.kind ()
        kind &= unwSelf.cpy1_property_selection.kind ()
        kind &= unwSelf.cpx2_property_selection.kind ()
        kind &= unwSelf.cpy2_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection, unwSelf.cpx1_property_selection, unwSelf.cpy1_property_selection, unwSelf.cpx2_property_selection, unwSelf.cpy2_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (transient_PackageBezier_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.selectionDisplay_property)
    self.y1_property.addEBObserver (self.selectionDisplay_property)
    self.x2_property.addEBObserver (self.selectionDisplay_property)
    self.y2_property.addEBObserver (self.selectionDisplay_property)
    self.cpx1_property.addEBObserver (self.selectionDisplay_property)
    self.cpy1_property.addEBObserver (self.selectionDisplay_property)
    self.cpx2_property.addEBObserver (self.selectionDisplay_property)
    self.cpy2_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: issues
    self.issues_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.x1_property_selection.kind ()
        kind &= unwSelf.y1_property_selection.kind ()
        kind &= unwSelf.x2_property_selection.kind ()
        kind &= unwSelf.y2_property_selection.kind ()
        kind &= unwSelf.cpx1_property_selection.kind ()
        kind &= unwSelf.cpy1_property_selection.kind ()
        kind &= unwSelf.cpx2_property_selection.kind ()
        kind &= unwSelf.cpy2_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.x1_property_selection, unwSelf.y1_property_selection, unwSelf.x2_property_selection, unwSelf.y2_property_selection, unwSelf.cpx1_property_selection, unwSelf.cpy1_property_selection, unwSelf.cpx2_property_selection, unwSelf.cpy2_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (transient_PackageBezier_issues (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.addEBObserver (self.issues_property)
    self.y1_property.addEBObserver (self.issues_property)
    self.x2_property.addEBObserver (self.issues_property)
    self.y2_property.addEBObserver (self.issues_property)
    self.cpx1_property.addEBObserver (self.issues_property)
    self.cpy1_property.addEBObserver (self.issues_property)
    self.cpx2_property.addEBObserver (self.issues_property)
    self.cpy2_property.addEBObserver (self.issues_property)
  //--- Install undoers and opposite setter for relationships
  //--- register properties for handling signature
    self.cpx1_property.setSignatureObserver (observer:self)
    self.cpx1Unit_property.setSignatureObserver (observer:self)
    self.cpx2_property.setSignatureObserver (observer:self)
    self.cpx2Unit_property.setSignatureObserver (observer:self)
    self.cpy1_property.setSignatureObserver (observer:self)
    self.cpy1Unit_property.setSignatureObserver (observer:self)
    self.cpy2_property.setSignatureObserver (observer:self)
    self.cpy2Unit_property.setSignatureObserver (observer:self)
    self.x1_property.setSignatureObserver (observer:self)
    self.x1Unit_property.setSignatureObserver (observer:self)
    self.x2_property.setSignatureObserver (observer:self)
    self.x2Unit_property.setSignatureObserver (observer:self)
    self.y1_property.setSignatureObserver (observer:self)
    self.y1Unit_property.setSignatureObserver (observer:self)
    self.y2_property.setSignatureObserver (observer:self)
    self.y2Unit_property.setSignatureObserver (observer:self)
  //--- Extern delegates
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.x1_property.removeEBObserver (self.objectDisplay_property)
    self.y1_property.removeEBObserver (self.objectDisplay_property)
    self.x2_property.removeEBObserver (self.objectDisplay_property)
    self.y2_property.removeEBObserver (self.objectDisplay_property)
    self.cpx1_property.removeEBObserver (self.objectDisplay_property)
    self.cpy1_property.removeEBObserver (self.objectDisplay_property)
    self.cpx2_property.removeEBObserver (self.objectDisplay_property)
    self.cpy2_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.removeEBObserver (self.objectDisplay_property)
    self.x1_property.removeEBObserver (self.selectionDisplay_property)
    self.y1_property.removeEBObserver (self.selectionDisplay_property)
    self.x2_property.removeEBObserver (self.selectionDisplay_property)
    self.y2_property.removeEBObserver (self.selectionDisplay_property)
    self.cpx1_property.removeEBObserver (self.selectionDisplay_property)
    self.cpy1_property.removeEBObserver (self.selectionDisplay_property)
    self.cpx2_property.removeEBObserver (self.selectionDisplay_property)
    self.cpy2_property.removeEBObserver (self.selectionDisplay_property)
    self.x1_property.removeEBObserver (self.issues_property)
    self.y1_property.removeEBObserver (self.issues_property)
    self.x2_property.removeEBObserver (self.issues_property)
    self.y2_property.removeEBObserver (self.issues_property)
    self.cpx1_property.removeEBObserver (self.issues_property)
    self.cpy1_property.removeEBObserver (self.issues_property)
    self.cpx2_property.removeEBObserver (self.issues_property)
    self.cpy2_property.removeEBObserver (self.issues_property)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "y1",
      idx:self.y1_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y1_property.mObserverExplorer,
      valueExplorer:&self.y1_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x2",
      idx:self.x2_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x2_property.mObserverExplorer,
      valueExplorer:&self.x2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y2",
      idx:self.y2_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y2_property.mObserverExplorer,
      valueExplorer:&self.y2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpx1",
      idx:self.cpx1_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.cpx1_property.mObserverExplorer,
      valueExplorer:&self.cpx1_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpy1",
      idx:self.cpy1_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.cpy1_property.mObserverExplorer,
      valueExplorer:&self.cpy1_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpx2",
      idx:self.cpx2_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.cpx2_property.mObserverExplorer,
      valueExplorer:&self.cpx2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpy2",
      idx:self.cpy2_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.cpy2_property.mObserverExplorer,
      valueExplorer:&self.cpy2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x1Unit",
      idx:self.x1Unit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x1Unit_property.mObserverExplorer,
      valueExplorer:&self.x1Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y1Unit",
      idx:self.y1Unit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y1Unit_property.mObserverExplorer,
      valueExplorer:&self.y1Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x2Unit",
      idx:self.x2Unit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x2Unit_property.mObserverExplorer,
      valueExplorer:&self.x2Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y2Unit",
      idx:self.y2Unit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y2Unit_property.mObserverExplorer,
      valueExplorer:&self.y2Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpx1Unit",
      idx:self.cpx1Unit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.cpx1Unit_property.mObserverExplorer,
      valueExplorer:&self.cpx1Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpy1Unit",
      idx:self.cpy1Unit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.cpy1Unit_property.mObserverExplorer,
      valueExplorer:&self.cpy1Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpx2Unit",
      idx:self.cpx2Unit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.cpx2Unit_property.mObserverExplorer,
      valueExplorer:&self.cpx2Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "cpy2Unit",
      idx:self.cpy2Unit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.cpy2Unit_property.mObserverExplorer,
      valueExplorer:&self.cpy2Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x1",
      idx:self.x1_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x1_property.mObserverExplorer,
      valueExplorer:&self.x1_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "objectDisplay",
      idx:self.objectDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.objectDisplay_property.mObserverExplorer,
      valueExplorer:&self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx:self.selectionDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectionDisplay_property.mObserverExplorer,
      valueExplorer:&self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx:self.issues_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.issues_property.mObserverExplorer,
      valueExplorer:&self.issues_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: y1
    self.y1_property.mObserverExplorer = nil
    self.y1_property.mValueExplorer = nil
  //--- Atomic property: x2
    self.x2_property.mObserverExplorer = nil
    self.x2_property.mValueExplorer = nil
  //--- Atomic property: y2
    self.y2_property.mObserverExplorer = nil
    self.y2_property.mValueExplorer = nil
  //--- Atomic property: cpx1
    self.cpx1_property.mObserverExplorer = nil
    self.cpx1_property.mValueExplorer = nil
  //--- Atomic property: cpy1
    self.cpy1_property.mObserverExplorer = nil
    self.cpy1_property.mValueExplorer = nil
  //--- Atomic property: cpx2
    self.cpx2_property.mObserverExplorer = nil
    self.cpx2_property.mValueExplorer = nil
  //--- Atomic property: cpy2
    self.cpy2_property.mObserverExplorer = nil
    self.cpy2_property.mValueExplorer = nil
  //--- Atomic property: x1Unit
    self.x1Unit_property.mObserverExplorer = nil
    self.x1Unit_property.mValueExplorer = nil
  //--- Atomic property: y1Unit
    self.y1Unit_property.mObserverExplorer = nil
    self.y1Unit_property.mValueExplorer = nil
  //--- Atomic property: x2Unit
    self.x2Unit_property.mObserverExplorer = nil
    self.x2Unit_property.mValueExplorer = nil
  //--- Atomic property: y2Unit
    self.y2Unit_property.mObserverExplorer = nil
    self.y2Unit_property.mValueExplorer = nil
  //--- Atomic property: cpx1Unit
    self.cpx1Unit_property.mObserverExplorer = nil
    self.cpx1Unit_property.mValueExplorer = nil
  //--- Atomic property: cpy1Unit
    self.cpy1Unit_property.mObserverExplorer = nil
    self.cpy1Unit_property.mValueExplorer = nil
  //--- Atomic property: cpx2Unit
    self.cpx2Unit_property.mObserverExplorer = nil
    self.cpx2Unit_property.mValueExplorer = nil
  //--- Atomic property: cpy2Unit
    self.cpy2Unit_property.mObserverExplorer = nil
    self.cpy2Unit_property.mValueExplorer = nil
  //--- Atomic property: x1
    self.x1_property.mObserverExplorer = nil
    self.x1_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: y1
    self.y1_property.storeIn (dictionary: ioDictionary, forKey:"y1")
  //--- Atomic property: x2
    self.x2_property.storeIn (dictionary: ioDictionary, forKey:"x2")
  //--- Atomic property: y2
    self.y2_property.storeIn (dictionary: ioDictionary, forKey:"y2")
  //--- Atomic property: cpx1
    self.cpx1_property.storeIn (dictionary: ioDictionary, forKey:"cpx1")
  //--- Atomic property: cpy1
    self.cpy1_property.storeIn (dictionary: ioDictionary, forKey:"cpy1")
  //--- Atomic property: cpx2
    self.cpx2_property.storeIn (dictionary: ioDictionary, forKey:"cpx2")
  //--- Atomic property: cpy2
    self.cpy2_property.storeIn (dictionary: ioDictionary, forKey:"cpy2")
  //--- Atomic property: x1Unit
    self.x1Unit_property.storeIn (dictionary: ioDictionary, forKey:"x1Unit")
  //--- Atomic property: y1Unit
    self.y1Unit_property.storeIn (dictionary: ioDictionary, forKey:"y1Unit")
  //--- Atomic property: x2Unit
    self.x2Unit_property.storeIn (dictionary: ioDictionary, forKey:"x2Unit")
  //--- Atomic property: y2Unit
    self.y2Unit_property.storeIn (dictionary: ioDictionary, forKey:"y2Unit")
  //--- Atomic property: cpx1Unit
    self.cpx1Unit_property.storeIn (dictionary: ioDictionary, forKey:"cpx1Unit")
  //--- Atomic property: cpy1Unit
    self.cpy1Unit_property.storeIn (dictionary: ioDictionary, forKey:"cpy1Unit")
  //--- Atomic property: cpx2Unit
    self.cpx2Unit_property.storeIn (dictionary: ioDictionary, forKey:"cpx2Unit")
  //--- Atomic property: cpy2Unit
    self.cpy2Unit_property.storeIn (dictionary: ioDictionary, forKey:"cpy2Unit")
  //--- Atomic property: x1
    self.x1_property.storeIn (dictionary: ioDictionary, forKey:"x1")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: y1
    self.y1_property.readFrom (dictionary: inDictionary, forKey:"y1")
  //--- Atomic property: x2
    self.x2_property.readFrom (dictionary: inDictionary, forKey:"x2")
  //--- Atomic property: y2
    self.y2_property.readFrom (dictionary: inDictionary, forKey:"y2")
  //--- Atomic property: cpx1
    self.cpx1_property.readFrom (dictionary: inDictionary, forKey:"cpx1")
  //--- Atomic property: cpy1
    self.cpy1_property.readFrom (dictionary: inDictionary, forKey:"cpy1")
  //--- Atomic property: cpx2
    self.cpx2_property.readFrom (dictionary: inDictionary, forKey:"cpx2")
  //--- Atomic property: cpy2
    self.cpy2_property.readFrom (dictionary: inDictionary, forKey:"cpy2")
  //--- Atomic property: x1Unit
    self.x1Unit_property.readFrom (dictionary: inDictionary, forKey:"x1Unit")
  //--- Atomic property: y1Unit
    self.y1Unit_property.readFrom (dictionary: inDictionary, forKey:"y1Unit")
  //--- Atomic property: x2Unit
    self.x2Unit_property.readFrom (dictionary: inDictionary, forKey:"x2Unit")
  //--- Atomic property: y2Unit
    self.y2Unit_property.readFrom (dictionary: inDictionary, forKey:"y2Unit")
  //--- Atomic property: cpx1Unit
    self.cpx1Unit_property.readFrom (dictionary: inDictionary, forKey:"cpx1Unit")
  //--- Atomic property: cpy1Unit
    self.cpy1Unit_property.readFrom (dictionary: inDictionary, forKey:"cpy1Unit")
  //--- Atomic property: cpx2Unit
    self.cpx2Unit_property.readFrom (dictionary: inDictionary, forKey:"cpx2Unit")
  //--- Atomic property: cpy2Unit
    self.cpy2Unit_property.readFrom (dictionary: inDictionary, forKey:"cpy2Unit")
  //--- Atomic property: x1
    self.x1_property.readFrom (dictionary: inDictionary, forKey:"x1")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.cpx1_property.signature ())
    crc.accumulateUInt32 (self.cpx1Unit_property.signature ())
    crc.accumulateUInt32 (self.cpx2_property.signature ())
    crc.accumulateUInt32 (self.cpx2Unit_property.signature ())
    crc.accumulateUInt32 (self.cpy1_property.signature ())
    crc.accumulateUInt32 (self.cpy1Unit_property.signature ())
    crc.accumulateUInt32 (self.cpy2_property.signature ())
    crc.accumulateUInt32 (self.cpy2Unit_property.signature ())
    crc.accumulateUInt32 (self.x1_property.signature ())
    crc.accumulateUInt32 (self.x1Unit_property.signature ())
    crc.accumulateUInt32 (self.x2_property.signature ())
    crc.accumulateUInt32 (self.x2Unit_property.signature ())
    crc.accumulateUInt32 (self.y1_property.signature ())
    crc.accumulateUInt32 (self.y1Unit_property.signature ())
    crc.accumulateUInt32 (self.y2_property.signature ())
    crc.accumulateUInt32 (self.y2Unit_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageBezier
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageBezier : ReadOnlyAbstractArrayProperty <PackageBezier> {

  //····················································································································
  //   Observers of 'y1' stored property
  //····················································································································

  private var mObserversOf_y1 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y1 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_y1.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y1_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_y1 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_y1.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y1_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_y1_toElementsOfSet (_ inSet : Set<PackageBezier>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_y1 {
        managedObject.y1_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_y1_fromElementsOfSet (_ inSet : Set<PackageBezier>) {
    for observer in self.mObserversOf_y1 {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y1_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'x2' stored property
  //····················································································································

  private var mObserversOf_x2 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x2 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_x2.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x2_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_x2 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_x2.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x2_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_x2_toElementsOfSet (_ inSet : Set<PackageBezier>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_x2 {
        managedObject.x2_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_x2_fromElementsOfSet (_ inSet : Set<PackageBezier>) {
    for observer in self.mObserversOf_x2 {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x2_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'y2' stored property
  //····················································································································

  private var mObserversOf_y2 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y2 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_y2.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y2_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_y2 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_y2.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y2_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_y2_toElementsOfSet (_ inSet : Set<PackageBezier>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_y2 {
        managedObject.y2_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_y2_fromElementsOfSet (_ inSet : Set<PackageBezier>) {
    for observer in self.mObserversOf_y2 {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y2_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'cpx1' stored property
  //····················································································································

  private var mObserversOf_cpx1 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_cpx1 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_cpx1.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpx1_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_cpx1 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_cpx1.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpx1_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_cpx1_toElementsOfSet (_ inSet : Set<PackageBezier>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_cpx1 {
        managedObject.cpx1_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_cpx1_fromElementsOfSet (_ inSet : Set<PackageBezier>) {
    for observer in self.mObserversOf_cpx1 {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.cpx1_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'cpy1' stored property
  //····················································································································

  private var mObserversOf_cpy1 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_cpy1 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_cpy1.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpy1_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_cpy1 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_cpy1.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpy1_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_cpy1_toElementsOfSet (_ inSet : Set<PackageBezier>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_cpy1 {
        managedObject.cpy1_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_cpy1_fromElementsOfSet (_ inSet : Set<PackageBezier>) {
    for observer in self.mObserversOf_cpy1 {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.cpy1_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'cpx2' stored property
  //····················································································································

  private var mObserversOf_cpx2 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_cpx2 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_cpx2.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpx2_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_cpx2 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_cpx2.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpx2_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_cpx2_toElementsOfSet (_ inSet : Set<PackageBezier>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_cpx2 {
        managedObject.cpx2_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_cpx2_fromElementsOfSet (_ inSet : Set<PackageBezier>) {
    for observer in self.mObserversOf_cpx2 {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.cpx2_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'cpy2' stored property
  //····················································································································

  private var mObserversOf_cpy2 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_cpy2 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_cpy2.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpy2_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_cpy2 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_cpy2.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpy2_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_cpy2_toElementsOfSet (_ inSet : Set<PackageBezier>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_cpy2 {
        managedObject.cpy2_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_cpy2_fromElementsOfSet (_ inSet : Set<PackageBezier>) {
    for observer in self.mObserversOf_cpy2 {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.cpy2_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'x1Unit' stored property
  //····················································································································

  private var mObserversOf_x1Unit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x1Unit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_x1Unit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x1Unit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_x1Unit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_x1Unit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x1Unit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_x1Unit_toElementsOfSet (_ inSet : Set<PackageBezier>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_x1Unit {
        managedObject.x1Unit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_x1Unit_fromElementsOfSet (_ inSet : Set<PackageBezier>) {
    for observer in self.mObserversOf_x1Unit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x1Unit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'y1Unit' stored property
  //····················································································································

  private var mObserversOf_y1Unit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y1Unit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_y1Unit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y1Unit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_y1Unit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_y1Unit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y1Unit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_y1Unit_toElementsOfSet (_ inSet : Set<PackageBezier>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_y1Unit {
        managedObject.y1Unit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_y1Unit_fromElementsOfSet (_ inSet : Set<PackageBezier>) {
    for observer in self.mObserversOf_y1Unit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y1Unit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'x2Unit' stored property
  //····················································································································

  private var mObserversOf_x2Unit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x2Unit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_x2Unit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x2Unit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_x2Unit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_x2Unit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x2Unit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_x2Unit_toElementsOfSet (_ inSet : Set<PackageBezier>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_x2Unit {
        managedObject.x2Unit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_x2Unit_fromElementsOfSet (_ inSet : Set<PackageBezier>) {
    for observer in self.mObserversOf_x2Unit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x2Unit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'y2Unit' stored property
  //····················································································································

  private var mObserversOf_y2Unit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_y2Unit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_y2Unit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y2Unit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_y2Unit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_y2Unit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.y2Unit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_y2Unit_toElementsOfSet (_ inSet : Set<PackageBezier>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_y2Unit {
        managedObject.y2Unit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_y2Unit_fromElementsOfSet (_ inSet : Set<PackageBezier>) {
    for observer in self.mObserversOf_y2Unit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.y2Unit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'cpx1Unit' stored property
  //····················································································································

  private var mObserversOf_cpx1Unit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_cpx1Unit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_cpx1Unit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpx1Unit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_cpx1Unit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_cpx1Unit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpx1Unit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_cpx1Unit_toElementsOfSet (_ inSet : Set<PackageBezier>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_cpx1Unit {
        managedObject.cpx1Unit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_cpx1Unit_fromElementsOfSet (_ inSet : Set<PackageBezier>) {
    for observer in self.mObserversOf_cpx1Unit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.cpx1Unit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'cpy1Unit' stored property
  //····················································································································

  private var mObserversOf_cpy1Unit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_cpy1Unit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_cpy1Unit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpy1Unit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_cpy1Unit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_cpy1Unit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpy1Unit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_cpy1Unit_toElementsOfSet (_ inSet : Set<PackageBezier>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_cpy1Unit {
        managedObject.cpy1Unit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_cpy1Unit_fromElementsOfSet (_ inSet : Set<PackageBezier>) {
    for observer in self.mObserversOf_cpy1Unit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.cpy1Unit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'cpx2Unit' stored property
  //····················································································································

  private var mObserversOf_cpx2Unit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_cpx2Unit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_cpx2Unit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpx2Unit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_cpx2Unit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_cpx2Unit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpx2Unit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_cpx2Unit_toElementsOfSet (_ inSet : Set<PackageBezier>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_cpx2Unit {
        managedObject.cpx2Unit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_cpx2Unit_fromElementsOfSet (_ inSet : Set<PackageBezier>) {
    for observer in self.mObserversOf_cpx2Unit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.cpx2Unit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'cpy2Unit' stored property
  //····················································································································

  private var mObserversOf_cpy2Unit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_cpy2Unit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_cpy2Unit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpy2Unit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_cpy2Unit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_cpy2Unit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.cpy2Unit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_cpy2Unit_toElementsOfSet (_ inSet : Set<PackageBezier>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_cpy2Unit {
        managedObject.cpy2Unit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_cpy2Unit_fromElementsOfSet (_ inSet : Set<PackageBezier>) {
    for observer in self.mObserversOf_cpy2Unit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.cpy2Unit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'x1' stored property
  //····················································································································

  private var mObserversOf_x1 = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_x1 (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_x1.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x1_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_x1 (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_x1.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.x1_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_x1_toElementsOfSet (_ inSet : Set<PackageBezier>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_x1 {
        managedObject.x1_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_x1_fromElementsOfSet (_ inSet : Set<PackageBezier>) {
    for observer in self.mObserversOf_x1 {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.x1_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<PackageBezier>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_objectDisplay {
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<PackageBezier>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_objectDisplay {
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<PackageBezier>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_selectionDisplay {
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<PackageBezier>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_selectionDisplay {
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<PackageBezier>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_issues {
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<PackageBezier>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_issues {
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_PackageBezier
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_PackageBezier : ReadOnlyArrayOf_PackageBezier {

  //····················································································································

  var readModelFunction : Optional < () -> EBSelection < [PackageBezier] > >

  //····················································································································

  override var propset : Set <PackageBezier> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [PackageBezier] > {
    self.computeArrayAndSet ()
    return self.prop_cache!  
  }
 
  //····················································································································

  override var propval : [PackageBezier] {
    self.computeArrayAndSet ()
    if let value = self.prop_cache {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <PackageBezier> ()

  //····················································································································

  private var prop_cache : EBSelection < [PackageBezier] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.readModelFunction, self.prop_cache == nil {
      self.prop_cache = unwrappedComputeFunction ()
      let newSet : Set <PackageBezier>
      switch self.prop_cache! {
      case .multiple, .empty :
        newSet = Set <PackageBezier> ()
      case .single (let array) :
       newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_y1_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_x2_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_y2_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_cpx1_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_cpy1_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_cpx2_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_cpy2_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_x1Unit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_y1Unit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_x2Unit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_y2Unit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_cpx1Unit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_cpy1Unit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_cpx2Unit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_cpy2Unit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_x1_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_issues_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_y1_toElementsOfSet (addedSet)
      self.addEBObserversOf_x2_toElementsOfSet (addedSet)
      self.addEBObserversOf_y2_toElementsOfSet (addedSet)
      self.addEBObserversOf_cpx1_toElementsOfSet (addedSet)
      self.addEBObserversOf_cpy1_toElementsOfSet (addedSet)
      self.addEBObserversOf_cpx2_toElementsOfSet (addedSet)
      self.addEBObserversOf_cpy2_toElementsOfSet (addedSet)
      self.addEBObserversOf_x1Unit_toElementsOfSet (addedSet)
      self.addEBObserversOf_y1Unit_toElementsOfSet (addedSet)
      self.addEBObserversOf_x2Unit_toElementsOfSet (addedSet)
      self.addEBObserversOf_y2Unit_toElementsOfSet (addedSet)
      self.addEBObserversOf_cpx1Unit_toElementsOfSet (addedSet)
      self.addEBObserversOf_cpy1Unit_toElementsOfSet (addedSet)
      self.addEBObserversOf_cpx2Unit_toElementsOfSet (addedSet)
      self.addEBObserversOf_cpy2Unit_toElementsOfSet (addedSet)
      self.addEBObserversOf_x1_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_objectDisplay_toElementsOfSet (addedSet)
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedSet)
      self.addEBObserversOf_issues_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.prop_cache == nil {
      self.prop_cache = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.prop_cache != nil {
      self.prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageBezier
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackageBezier : ReadOnlyArrayOf_PackageBezier {

  //····················································································································
 
  func setProp (_ value :  [PackageBezier]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: PackageBezier
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_PackageBezier : ReadWriteArrayOf_PackageBezier, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : PackageBezier?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [PackageBezier] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.undoManager, "PackageBezier") as? PackageBezier {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <PackageBezier> ()
  private var mValue = [PackageBezier] () {
    didSet {
      self.postEvent ()
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.undoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          self.setOppositeRelationship? (nil)
        }
        self.removeEBObserversOf_y1_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_x2_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_y2_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_cpx1_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_cpy1_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_cpx2_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_cpy2_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_x1Unit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_y1Unit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_x2Unit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_y2Unit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_cpx1Unit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_cpy1Unit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_cpx2Unit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_cpy2Unit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_x1_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_issues_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        for managedObject : PackageBezier in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          self.setOppositeRelationship? (managedObject)
        }
        self.addEBObserversOf_y1_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_x2_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_y2_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_cpx1_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_cpy1_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_cpx2_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_cpy2_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_x1Unit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_y1Unit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_x2Unit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_y2Unit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_cpx1Unit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_cpy1Unit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_cpx2Unit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_cpy2Unit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_x1_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_objectDisplay_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_issues_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        self.clearSignatureCache ()
      //--- Write in preferences ?
        if let prefKey = self.mPrefKey {
          var dictionaryArray = [NSDictionary] ()
          for object in self.mValue {
            let d = NSMutableDictionary ()
            object.saveIntoDictionary (d)
            d [kEntityKey] = nil // Remove entity key, not used in preferences
            dictionaryArray.append (d)
          }
          UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
        }
      }
    }
  }

  //····················································································································

  override var prop : EBSelection < [PackageBezier] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [PackageBezier]) { self.mValue = inValue }

  //····················································································································

  override var propval : [PackageBezier] { return self.mValue }

  //····················································································································

  override var propset : Set <PackageBezier> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [PackageBezier]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : PackageBezier) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : PackageBezier) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
