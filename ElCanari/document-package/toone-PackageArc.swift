//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_PackageArc 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_PackageArc : ReadOnlyAbstractObjectProperty <PackageArc> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : PackageArc?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    if let oldValue = inOldValue {
      oldValue.yCenter_property.removeEBObserversFrom (&self.mObserversOf_yCenter) // Stored property
      oldValue.radius_property.removeEBObserversFrom (&self.mObserversOf_radius) // Stored property
      oldValue.startAngle_property.removeEBObserversFrom (&self.mObserversOf_startAngle) // Stored property
      oldValue.arcAngle_property.removeEBObserversFrom (&self.mObserversOf_arcAngle) // Stored property
      oldValue.startTangent_property.removeEBObserversFrom (&self.mObserversOf_startTangent) // Stored property
      oldValue.endTangent_property.removeEBObserversFrom (&self.mObserversOf_endTangent) // Stored property
      oldValue.pathIsClosed_property.removeEBObserversFrom (&self.mObserversOf_pathIsClosed) // Stored property
      oldValue.xCenterUnit_property.removeEBObserversFrom (&self.mObserversOf_xCenterUnit) // Stored property
      oldValue.yCenterUnit_property.removeEBObserversFrom (&self.mObserversOf_yCenterUnit) // Stored property
      oldValue.radiusUnit_property.removeEBObserversFrom (&self.mObserversOf_radiusUnit) // Stored property
      oldValue.startTangentUnit_property.removeEBObserversFrom (&self.mObserversOf_startTangentUnit) // Stored property
      oldValue.endTangentUnit_property.removeEBObserversFrom (&self.mObserversOf_endTangentUnit) // Stored property
      oldValue.xCenter_property.removeEBObserversFrom (&self.mObserversOf_xCenter) // Stored property
      oldValue.strokeBezierPath_property.removeEBObserversFrom (&self.mObserversOf_strokeBezierPath) // Transient property
      oldValue.objectDisplay_property.removeEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
      oldValue.selectionDisplay_property.removeEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
      oldValue.issues_property.removeEBObserversFrom (&self.mObserversOf_issues) // Transient property
    }
  //--- Add observers to added objects
    if let newValue = self.mInternalValue {
      newValue.yCenter_property.addEBObserversFrom (&self.mObserversOf_yCenter) // Stored property
      newValue.radius_property.addEBObserversFrom (&self.mObserversOf_radius) // Stored property
      newValue.startAngle_property.addEBObserversFrom (&self.mObserversOf_startAngle) // Stored property
      newValue.arcAngle_property.addEBObserversFrom (&self.mObserversOf_arcAngle) // Stored property
      newValue.startTangent_property.addEBObserversFrom (&self.mObserversOf_startTangent) // Stored property
      newValue.endTangent_property.addEBObserversFrom (&self.mObserversOf_endTangent) // Stored property
      newValue.pathIsClosed_property.addEBObserversFrom (&self.mObserversOf_pathIsClosed) // Stored property
      newValue.xCenterUnit_property.addEBObserversFrom (&self.mObserversOf_xCenterUnit) // Stored property
      newValue.yCenterUnit_property.addEBObserversFrom (&self.mObserversOf_yCenterUnit) // Stored property
      newValue.radiusUnit_property.addEBObserversFrom (&self.mObserversOf_radiusUnit) // Stored property
      newValue.startTangentUnit_property.addEBObserversFrom (&self.mObserversOf_startTangentUnit) // Stored property
      newValue.endTangentUnit_property.addEBObserversFrom (&self.mObserversOf_endTangentUnit) // Stored property
      newValue.xCenter_property.addEBObserversFrom (&self.mObserversOf_xCenter) // Stored property
      newValue.strokeBezierPath_property.addEBObserversFrom (&self.mObserversOf_strokeBezierPath) // Transient property
      newValue.objectDisplay_property.addEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
      newValue.selectionDisplay_property.addEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
      newValue.issues_property.addEBObserversFrom (&self.mObserversOf_issues) // Transient property
    }
  }

  //····················································································································
  //   Observers of 'yCenter' stored property
  //····················································································································

  private final var mObserversOf_yCenter = EBWeakEventSet ()

  //····················································································································

  final var yCenter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.yCenter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yCenter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.yCenter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yCenter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.yCenter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'radius' stored property
  //····················································································································

  private final var mObserversOf_radius = EBWeakEventSet ()

  //····················································································································

  final var radius_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.radius_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_radius (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_radius.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.radius_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_radius (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_radius.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.radius_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'startAngle' stored property
  //····················································································································

  private final var mObserversOf_startAngle = EBWeakEventSet ()

  //····················································································································

  final var startAngle_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.startAngle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_startAngle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_startAngle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.startAngle_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_startAngle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_startAngle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.startAngle_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'arcAngle' stored property
  //····················································································································

  private final var mObserversOf_arcAngle = EBWeakEventSet ()

  //····················································································································

  final var arcAngle_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.arcAngle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_arcAngle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_arcAngle.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.arcAngle_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_arcAngle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_arcAngle.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.arcAngle_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'startTangent' stored property
  //····················································································································

  private final var mObserversOf_startTangent = EBWeakEventSet ()

  //····················································································································

  final var startTangent_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.startTangent_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_startTangent (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_startTangent.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.startTangent_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_startTangent (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_startTangent.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.startTangent_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'endTangent' stored property
  //····················································································································

  private final var mObserversOf_endTangent = EBWeakEventSet ()

  //····················································································································

  final var endTangent_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.endTangent_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_endTangent (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_endTangent.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.endTangent_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_endTangent (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_endTangent.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.endTangent_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'pathIsClosed' stored property
  //····················································································································

  private final var mObserversOf_pathIsClosed = EBWeakEventSet ()

  //····················································································································

  final var pathIsClosed_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.pathIsClosed_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_pathIsClosed (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_pathIsClosed.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.pathIsClosed_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_pathIsClosed (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_pathIsClosed.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.pathIsClosed_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'xCenterUnit' stored property
  //····················································································································

  private final var mObserversOf_xCenterUnit = EBWeakEventSet ()

  //····················································································································

  final var xCenterUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.xCenterUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_xCenterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xCenterUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.xCenterUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_xCenterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xCenterUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.xCenterUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'yCenterUnit' stored property
  //····················································································································

  private final var mObserversOf_yCenterUnit = EBWeakEventSet ()

  //····················································································································

  final var yCenterUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.yCenterUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_yCenterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yCenterUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.yCenterUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_yCenterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yCenterUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.yCenterUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'radiusUnit' stored property
  //····················································································································

  private final var mObserversOf_radiusUnit = EBWeakEventSet ()

  //····················································································································

  final var radiusUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.radiusUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_radiusUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_radiusUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.radiusUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_radiusUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_radiusUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.radiusUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'startTangentUnit' stored property
  //····················································································································

  private final var mObserversOf_startTangentUnit = EBWeakEventSet ()

  //····················································································································

  final var startTangentUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.startTangentUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_startTangentUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_startTangentUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.startTangentUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_startTangentUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_startTangentUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.startTangentUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'endTangentUnit' stored property
  //····················································································································

  private final var mObserversOf_endTangentUnit = EBWeakEventSet ()

  //····················································································································

  final var endTangentUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.endTangentUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_endTangentUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_endTangentUnit.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.endTangentUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_endTangentUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_endTangentUnit.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.endTangentUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'xCenter' stored property
  //····················································································································

  private final var mObserversOf_xCenter = EBWeakEventSet ()

  //····················································································································

  final var xCenter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.xCenter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xCenter.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.xCenter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xCenter.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.xCenter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································
  //   Observers of 'strokeBezierPath' transient property
  //····················································································································

  private final var mObserversOf_strokeBezierPath = EBWeakEventSet ()

  //····················································································································

  final var strokeBezierPath_property_selection : EBSelection <EBBezierPath?> {
    if let model = self.propval {
      switch (model.strokeBezierPath_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_strokeBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_strokeBezierPath.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.strokeBezierPath_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_strokeBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_strokeBezierPath.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.strokeBezierPath_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_strokeBezierPath_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_strokeBezierPath.apply { (_ observer : EBEvent) in
        managedObject.strokeBezierPath_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_strokeBezierPath_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_strokeBezierPath.apply { (_ observer : EBEvent) in
        managedObject.strokeBezierPath_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private final var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final var objectDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.objectDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private final var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final var selectionDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.selectionDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private final var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final var issues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.issues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch self.selection {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   INIT 
  //····················································································································

 // override init () {
//    super.init ()
  //--- Configure yCenter simple stored property
 /*   self.yCenter_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.yCenter_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.yCenter_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.yCenter_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.yCenter_property) */
  //--- Configure radius simple stored property
 /*   self.radius_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.radius_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.radius_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.radius_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.radius_property) */
  //--- Configure startAngle simple stored property
 /*   self.startAngle_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.startAngle_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.startAngle_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.startAngle_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.startAngle_property) */
  //--- Configure arcAngle simple stored property
 /*   self.arcAngle_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.arcAngle_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.arcAngle_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.arcAngle_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.arcAngle_property) */
  //--- Configure startTangent simple stored property
 /*   self.startTangent_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.startTangent_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.startTangent_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.startTangent_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.startTangent_property) */
  //--- Configure endTangent simple stored property
 /*   self.endTangent_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.endTangent_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.endTangent_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.endTangent_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.endTangent_property) */
  //--- Configure pathIsClosed simple stored property
 /*   self.pathIsClosed_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.pathIsClosed_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.pathIsClosed_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.pathIsClosed_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.pathIsClosed_property) */
  //--- Configure xCenterUnit simple stored property
 /*   self.xCenterUnit_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.xCenterUnit_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.xCenterUnit_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.xCenterUnit_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.xCenterUnit_property) */
  //--- Configure yCenterUnit simple stored property
 /*   self.yCenterUnit_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.yCenterUnit_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.yCenterUnit_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.yCenterUnit_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.yCenterUnit_property) */
  //--- Configure radiusUnit simple stored property
 /*   self.radiusUnit_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.radiusUnit_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.radiusUnit_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.radiusUnit_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.radiusUnit_property) */
  //--- Configure startTangentUnit simple stored property
 /*   self.startTangentUnit_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.startTangentUnit_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.startTangentUnit_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.startTangentUnit_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.startTangentUnit_property) */
  //--- Configure endTangentUnit simple stored property
 /*   self.endTangentUnit_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.endTangentUnit_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.endTangentUnit_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.endTangentUnit_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.endTangentUnit_property) */
  //--- Configure xCenter simple stored property
 /*   self.xCenter_property.mReadModelFunction = { [weak self] in
      if let selection = self?.mInternalValue?.xCenter_property.selection {
        return selection
      }else{
        return .empty
      }
    }
    self.xCenter_property.mWriteModelFunction = { [weak self] in
      self?.mInternalValue?.xCenter_property.setProp ($0)
    }
    self.none_property.addEBObserver (self.xCenter_property) */
 // }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//   TransientObject PackageArc
//----------------------------------------------------------------------------------------------------------------------

final class TransientObject_PackageArc : ReadOnlyObject_PackageArc {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_PackageArc? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_PackageArc?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : PackageArc? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.selection {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < PackageArc? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : PackageArc? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_PackageArc
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_PackageArc : ReadOnlyObject_PackageArc {

  //····················································································································
 
  func setProp (_ inValue : PackageArc?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_PackageArc
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_PackageArc : ReadWriteObject_PackageArc {

  //····················································································································

  private var mModel : ReadWriteObject_PackageArc? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_PackageArc?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : PackageArc?
    if let model = self.mModel {
      switch model.selection {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : PackageArc?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var selection : EBSelection < PackageArc? > {
    if let model = self.mModel {
      return model.selection
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : PackageArc? {
    if let model = self.mModel {
      switch model.selection {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_PackageArc 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_PackageArc : ReadWriteObject_PackageArc, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak final var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PackageArc) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PackageArc) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackageArc) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PackageArc) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.selection {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : PackageArc?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var selection : EBSelection < PackageArc? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : PackageArc?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : PackageArc? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

