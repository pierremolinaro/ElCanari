//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageModelImagePoint_mX : class {
  var mX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageModelImagePoint_mDimensionUnitX : class {
  var mDimensionUnitX : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageModelImagePoint_mY : class {
  var mY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageModelImagePoint_mDimensionUnitY : class {
  var mDimensionUnitY : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageModelImagePoint_mColor : class {
  var mColor : NSColor { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageModelImagePoint_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageModelImagePoint_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageModelImagePoint
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class PackageModelImagePoint : EBGraphicManagedObject,
         PackageModelImagePoint_mX,
         PackageModelImagePoint_mDimensionUnitX,
         PackageModelImagePoint_mY,
         PackageModelImagePoint_mDimensionUnitY,
         PackageModelImagePoint_mColor,
         PackageModelImagePoint_objectDisplay,
         PackageModelImagePoint_selectionDisplay {

  //····················································································································
  //   Atomic property: mX
  //····················································································································

  let mX_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mX : Int {
    get { return self.mX_property.propval }
    set { self.mX_property.setProp (newValue) }
  }

  //····················································································································

  var mX_property_selection : EBSelection <Int> { return self.mX_property.prop }

  //····················································································································
  //   Atomic property: mDimensionUnitX
  //····················································································································

  let mDimensionUnitX_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var mDimensionUnitX : Int {
    get { return self.mDimensionUnitX_property.propval }
    set { self.mDimensionUnitX_property.setProp (newValue) }
  }

  //····················································································································

  var mDimensionUnitX_property_selection : EBSelection <Int> { return self.mDimensionUnitX_property.prop }

  //····················································································································
  //   Atomic property: mY
  //····················································································································

  let mY_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var mY : Int {
    get { return self.mY_property.propval }
    set { self.mY_property.setProp (newValue) }
  }

  //····················································································································

  var mY_property_selection : EBSelection <Int> { return self.mY_property.prop }

  //····················································································································
  //   Atomic property: mDimensionUnitY
  //····················································································································

  let mDimensionUnitY_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var mDimensionUnitY : Int {
    get { return self.mDimensionUnitY_property.propval }
    set { self.mDimensionUnitY_property.setProp (newValue) }
  }

  //····················································································································

  var mDimensionUnitY_property_selection : EBSelection <Int> { return self.mDimensionUnitY_property.prop }

  //····················································································································
  //   Atomic property: mColor
  //····················································································································

  let mColor_property = EBStoredProperty_NSColor (defaultValue: NSColor.black)

  //····················································································································

  var mColor : NSColor {
    get { return self.mColor_property.propval }
    set { self.mColor_property.setProp (newValue) }
  }

  //····················································································································

  var mColor_property_selection : EBSelection <NSColor> { return self.mColor_property.prop }

  //····················································································································
  //   To one property: mRoot
  //····················································································································

   let mRoot_property = StoredObject_PackageRoot (usedForSignature: false)

  //····················································································································

  var mRoot_property_selection : EBSelection <PackageRoot?> {
    return .single (self.mRoot_property.propval)
  }

  //····················································································································

  var mRoot : PackageRoot? {
    get {
      return self.mRoot_property.propval
    }
    set {
      if self.mRoot_property.propval != nil {
        self.mRoot_property.setProp (nil)
      }
      if newValue != nil {
        self.mRoot_property.setProp (newValue)
      }
    }
  }

  //····················································································································

  var mRoot_none : StoredObject_PackageRoot { return self.mRoot_property }

  //····················································································································

  var mRoot_none_selection : EBSelection <Bool> {
    return .single (self.mRoot_property.propval == nil)
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
    self.configureObject ()
  }
  
  //····················································································································

  private final func configureObject () {
  //--- Atomic property: mX
    self.mX_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mDimensionUnitX
    self.mDimensionUnitX_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mY
    self.mY_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mDimensionUnitY
    self.mDimensionUnitY_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: mColor
    self.mColor_property.ebUndoManager = self.ebUndoManager
  //--- To one property: mRoot (has opposite to many relationship: mModelImageObjects)
    self.mRoot_property.ebUndoManager = self.ebUndoManager
    self.mRoot_property.setOppositeRelationShipFunctions (
      setter: { [weak self] inObject in if let me = self { inObject.mModelImageObjects_property.add (me) } },
      resetter: { [weak self] inObject in if let me = self { inObject.mModelImageObjects_property.remove (me) } }
    )
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        kind &= unwSelf.mColor_property_selection.kind ()
        kind &= unwSelf.mRoot_property.mPointsAreLocked_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mX_property_selection, unwSelf.mY_property_selection, unwSelf.mColor_property_selection, unwSelf.mRoot_property.mPointsAreLocked_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3)) :
            return .single (transient_PackageModelImagePoint_objectDisplay (v0, v1, v2, v3))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.objectDisplay_property)
    self.mY_property.addEBObserver (self.objectDisplay_property)
    self.mColor_property.addEBObserver (self.objectDisplay_property)
    self.mRoot_property.addEBObserverOf_mPointsAreLocked (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.mX_property_selection.kind ()
        kind &= unwSelf.mY_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.mX_property_selection, unwSelf.mY_property_selection) {
          case (.single (let v0), .single (let v1)) :
            return .single (transient_PackageModelImagePoint_selectionDisplay (v0, v1))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.mX_property.addEBObserver (self.selectionDisplay_property)
    self.mY_property.addEBObserver (self.selectionDisplay_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.mX_property.removeEBObserver (self.objectDisplay_property)
    self.mY_property.removeEBObserver (self.objectDisplay_property)
    self.mColor_property.removeEBObserver (self.objectDisplay_property)
    self.mRoot_property.removeEBObserverOf_mPointsAreLocked (self.objectDisplay_property)
    self.mX_property.removeEBObserver (self.selectionDisplay_property)
    self.mY_property.removeEBObserver (self.selectionDisplay_property)
  //--- Unregister properties for handling signature
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "mX",
      idx: self.mX_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mX_property.mObserverExplorer,
      valueExplorer: &self.mX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDimensionUnitX",
      idx: self.mDimensionUnitX_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDimensionUnitX_property.mObserverExplorer,
      valueExplorer: &self.mDimensionUnitX_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mY",
      idx: self.mY_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mY_property.mObserverExplorer,
      valueExplorer: &self.mY_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mDimensionUnitY",
      idx: self.mDimensionUnitY_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mDimensionUnitY_property.mObserverExplorer,
      valueExplorer: &self.mDimensionUnitY_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "mColor",
      idx: self.mColor_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.mColor_property.mObserverExplorer,
      valueExplorer: &self.mColor_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "objectDisplay",
      idx: self.objectDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.objectDisplay_property.mObserverExplorer,
      valueExplorer: &self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx: self.selectionDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
      valueExplorer: &self.selectionDisplay_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForToOneRelationshipNamed (
      "mRoot",
      idx:self.mRoot_property.ebObjectIndex,
      y: &y,
      view: view,
      valueExplorer:&self.mRoot_property.mValueExplorer
    )
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: mX
    self.mX_property.mObserverExplorer = nil
    self.mX_property.mValueExplorer = nil
  //--- Atomic property: mDimensionUnitX
    self.mDimensionUnitX_property.mObserverExplorer = nil
    self.mDimensionUnitX_property.mValueExplorer = nil
  //--- Atomic property: mY
    self.mY_property.mObserverExplorer = nil
    self.mY_property.mValueExplorer = nil
  //--- Atomic property: mDimensionUnitY
    self.mDimensionUnitY_property.mObserverExplorer = nil
    self.mDimensionUnitY_property.mValueExplorer = nil
  //--- Atomic property: mColor
    self.mColor_property.mObserverExplorer = nil
    self.mColor_property.mValueExplorer = nil
  //--- To one property: mRoot
    self.mRoot_property.mObserverExplorer = nil
    self.mRoot_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
    self.mRoot = nil
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: mX
    self.mX_property.storeIn (dictionary: ioDictionary, forKey:"mX")
  //--- Atomic property: mDimensionUnitX
    self.mDimensionUnitX_property.storeIn (dictionary: ioDictionary, forKey:"mDimensionUnitX")
  //--- Atomic property: mY
    self.mY_property.storeIn (dictionary: ioDictionary, forKey:"mY")
  //--- Atomic property: mDimensionUnitY
    self.mDimensionUnitY_property.storeIn (dictionary: ioDictionary, forKey:"mDimensionUnitY")
  //--- Atomic property: mColor
    self.mColor_property.storeIn (dictionary: ioDictionary, forKey:"mColor")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  //--- To one property: mRoot
    do{
      let possibleEntity = readEntityFromDictionary (
        inRelationshipName: "mRoot",
        inDictionary: inDictionary,
        managedObjectArray: &managedObjectArray
      )
      if let entity = possibleEntity as? PackageRoot {
        self.mRoot_property.setProp (entity)
      }
    }
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: mX
    self.mX_property.readFrom (dictionary: inDictionary, forKey:"mX")
  //--- Atomic property: mDimensionUnitX
    self.mDimensionUnitX_property.readFrom (dictionary: inDictionary, forKey:"mDimensionUnitX")
  //--- Atomic property: mY
    self.mY_property.readFrom (dictionary: inDictionary, forKey:"mY")
  //--- Atomic property: mDimensionUnitY
    self.mDimensionUnitY_property.readFrom (dictionary: inDictionary, forKey:"mDimensionUnitY")
  //--- Atomic property: mColor
    self.mColor_property.readFrom (dictionary: inDictionary, forKey:"mColor")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "mX\n"
    ioString += "mDimensionUnitX\n"
    ioString += "mY\n"
    ioString += "mDimensionUnitY\n"
    ioString += "mColor\n"
  //--- To one relationships
    ioString += "mRoot\n"
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.mX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDimensionUnitX.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mDimensionUnitY.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.mColor.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
    if let object = self.mRoot {
      ioData.append (base62Encoded: object.savingIndex)
    }
    ioData.append (ascii: .lineFeed)
  //--- To many relationships
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  //--- To one property: mRoot
    if let object = self.mRoot {
      objects.append (object)
    }
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  //--- To one property: mRoot
    if let object = self.mRoot {
      objects.append (object)
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

