//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------
//    ReadOnlyObject_PackageGuide 
//----------------------------------------------------------------------------------------------------------------------

class ReadOnlyObject_PackageGuide : ReadOnlyAbstractObjectProperty <PackageGuide> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : PackageGuide?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.y1_property.removeEBObserver (self.y1_property) // Stored property
    inOldValue?.x2_property.removeEBObserver (self.x2_property) // Stored property
    inOldValue?.y2_property.removeEBObserver (self.y2_property) // Stored property
    inOldValue?.x1Unit_property.removeEBObserver (self.x1Unit_property) // Stored property
    inOldValue?.y1Unit_property.removeEBObserver (self.y1Unit_property) // Stored property
    inOldValue?.x2Unit_property.removeEBObserver (self.x2Unit_property) // Stored property
    inOldValue?.y2Unit_property.removeEBObserver (self.y2Unit_property) // Stored property
    inOldValue?.x1_property.removeEBObserver (self.x1_property) // Stored property
    inOldValue?.objectDisplay_property.removeEBObserver (self.objectDisplay_property) // Transient property
    inOldValue?.selectionDisplay_property.removeEBObserver (self.selectionDisplay_property) // Transient property
    inOldValue?.issues_property.removeEBObserver (self.issues_property) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.y1_property.addEBObserver (self.y1_property) // Stored property
    self.mInternalValue?.x2_property.addEBObserver (self.x2_property) // Stored property
    self.mInternalValue?.y2_property.addEBObserver (self.y2_property) // Stored property
    self.mInternalValue?.x1Unit_property.addEBObserver (self.x1Unit_property) // Stored property
    self.mInternalValue?.y1Unit_property.addEBObserver (self.y1Unit_property) // Stored property
    self.mInternalValue?.x2Unit_property.addEBObserver (self.x2Unit_property) // Stored property
    self.mInternalValue?.y2Unit_property.addEBObserver (self.y2Unit_property) // Stored property
    self.mInternalValue?.x1_property.addEBObserver (self.x1_property) // Stored property
    self.mInternalValue?.objectDisplay_property.addEBObserver (self.objectDisplay_property) // Transient property
    self.mInternalValue?.selectionDisplay_property.addEBObserver (self.selectionDisplay_property) // Transient property
    self.mInternalValue?.issues_property.addEBObserver (self.issues_property) // Transient property
  }

  //····················································································································
  //   init
  //····················································································································

  override init () {
    super.init ()
    self.y1_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.y1_property.prop ?? .empty }
    self.y1_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.y1_property.setProp (inValue) }
    self.x2_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.x2_property.prop ?? .empty }
    self.x2_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.x2_property.setProp (inValue) }
    self.y2_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.y2_property.prop ?? .empty }
    self.y2_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.y2_property.setProp (inValue) }
    self.x1Unit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.x1Unit_property.prop ?? .empty }
    self.x1Unit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.x1Unit_property.setProp (inValue) }
    self.y1Unit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.y1Unit_property.prop ?? .empty }
    self.y1Unit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.y1Unit_property.setProp (inValue) }
    self.x2Unit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.x2Unit_property.prop ?? .empty }
    self.x2Unit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.x2Unit_property.setProp (inValue) }
    self.y2Unit_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.y2Unit_property.prop ?? .empty }
    self.y2Unit_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.y2Unit_property.setProp (inValue) }
    self.x1_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.x1_property.prop ?? .empty }
    self.x1_property.mWriteModelFunction = { [weak self] (inValue : Int) in self?.mInternalValue?.x1_property.setProp (inValue) }
    self.objectDisplay_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.objectDisplay_property.prop ?? .empty }
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.selectionDisplay_property.prop ?? .empty }
    self.issues_property.mReadModelFunction = { [weak self] in self?.mInternalValue?.issues_property.prop ?? .empty }
  }

  //····················································································································
  //   Proxy of 'y1' stored property
  //····················································································································

  let y1_property = EBPropertyProxy_Int ()

  var y1_property_selection : EBSelection <Int> {
    switch (self.y1_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'x2' stored property
  //····················································································································

  let x2_property = EBPropertyProxy_Int ()

  var x2_property_selection : EBSelection <Int> {
    switch (self.x2_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'y2' stored property
  //····················································································································

  let y2_property = EBPropertyProxy_Int ()

  var y2_property_selection : EBSelection <Int> {
    switch (self.y2_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'x1Unit' stored property
  //····················································································································

  let x1Unit_property = EBPropertyProxy_Int ()

  var x1Unit_property_selection : EBSelection <Int> {
    switch (self.x1Unit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'y1Unit' stored property
  //····················································································································

  let y1Unit_property = EBPropertyProxy_Int ()

  var y1Unit_property_selection : EBSelection <Int> {
    switch (self.y1Unit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'x2Unit' stored property
  //····················································································································

  let x2Unit_property = EBPropertyProxy_Int ()

  var x2Unit_property_selection : EBSelection <Int> {
    switch (self.x2Unit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'y2Unit' stored property
  //····················································································································

  let y2Unit_property = EBPropertyProxy_Int ()

  var y2Unit_property_selection : EBSelection <Int> {
    switch (self.y2Unit_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Proxy of 'x1' stored property
  //····················································································································

  let x1_property = EBPropertyProxy_Int ()

  var x1_property_selection : EBSelection <Int> {
    switch (self.x1_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'objectDisplay' transient property
  //····················································································································

  let objectDisplay_property = EBTransientProperty_EBShape ()

  var objectDisplay_property_selection : EBSelection <EBShape> {
    switch (self.objectDisplay_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'selectionDisplay' transient property
  //····················································································································

  let selectionDisplay_property = EBTransientProperty_EBShape ()

  var selectionDisplay_property_selection : EBSelection <EBShape> {
    switch (self.selectionDisplay_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································
  //   Observer of 'issues' transient property
  //····················································································································

  let issues_property = EBTransientProperty_CanariIssueArray ()

  var issues_property_selection : EBSelection <CanariIssueArray> {
    switch (self.issues_property.prop) {
    case .empty :
      return .empty
    case .multiple :
      return .multiple
    case .single (let v) :
      return .single (v)
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    TransientObject PackageGuide
//----------------------------------------------------------------------------------------------------------------------

class TransientObject_PackageGuide : ReadOnlyObject_PackageGuide {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_PackageGuide? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_PackageGuide?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : PackageGuide? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < PackageGuide? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : PackageGuide? { return self.mInternalValue }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    ReadWriteObject_PackageGuide
//----------------------------------------------------------------------------------------------------------------------

class ReadWriteObject_PackageGuide : ReadOnlyObject_PackageGuide {

  //····················································································································
 
  func setProp (_ inValue : PackageGuide?) { } // Abstract method
  
  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    Proxy: ProxyObject_PackageGuide
//----------------------------------------------------------------------------------------------------------------------

final class ProxyObject_PackageGuide : ReadWriteObject_PackageGuide {

  //····················································································································

  private var mModel : ReadWriteObject_PackageGuide? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_PackageGuide?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : PackageGuide?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : PackageGuide?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < PackageGuide? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : PackageGuide? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------
//    StoredObject_PackageGuide 
//----------------------------------------------------------------------------------------------------------------------

final class StoredObject_PackageGuide : ReadWriteObject_PackageGuide, EBSignatureObserverProtocol, EBObservableObjectProtocol {

 //····················································································································

  init (usedForSignature inUsedForSignature : Bool) {
    mUsedForSignature = inUsedForSignature
    super.init ()
  }

  //····················································································································
  //   Signature ?
  //····················································································································

  private let mUsedForSignature : Bool
  
  //····················································································································
  //   Undo manager
  //····················································································································

  weak var ebUndoManager : EBUndoManager? = nil // SOULD BE WEAK

 //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PackageGuide) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PackageGuide) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackageGuide) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PackageGuide) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : PackageGuide?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self) { $0.mInternalValue = inOldValue }
  //---
    if let object = inOldValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: nil)
      }
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      if self.mUsedForSignature {
        object.setSignatureObserver (observer: self)
      }
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < PackageGuide? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : PackageGuide?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : PackageGuide? { return self.mInternalValue }

  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer inObserver : EBSignatureObserverProtocol?) {
    self.mSignatureObserver?.clearSignatureCache ()
    self.mSignatureObserver = inObserver
    inObserver?.clearSignatureCache ()
    self.clearSignatureCache ()
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = self.computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final private func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//----------------------------------------------------------------------------------------------------------------------

