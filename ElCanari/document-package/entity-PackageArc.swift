//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_yCenter : class {
  var yCenter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_radius : class {
  var radius : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_startAngle : class {
  var startAngle : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_arcAngle : class {
  var arcAngle : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_startTangentLength : class {
  var startTangentLength : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_endTangentLength : class {
  var endTangentLength : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_pathIsClosed : class {
  var pathIsClosed : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_xCenterUnit : class {
  var xCenterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_yCenterUnit : class {
  var yCenterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_radiusUnit : class {
  var radiusUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_startTangentLengthUnit : class {
  var startTangentLengthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_endTangentLengthUnit : class {
  var endTangentLengthUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_xCenter : class {
  var xCenter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class PackageArc : PackageObject,
         PackageArc_yCenter,
         PackageArc_radius,
         PackageArc_startAngle,
         PackageArc_arcAngle,
         PackageArc_startTangentLength,
         PackageArc_endTangentLength,
         PackageArc_pathIsClosed,
         PackageArc_xCenterUnit,
         PackageArc_yCenterUnit,
         PackageArc_radiusUnit,
         PackageArc_startTangentLengthUnit,
         PackageArc_endTangentLengthUnit,
         PackageArc_xCenter,
         PackageArc_objectDisplay,
         PackageArc_selectionDisplay,
         PackageArc_issues {

  //····················································································································
  //   Atomic property: yCenter
  //····················································································································

  var yCenter_property = EBStoredProperty_Int (342900)

  //····················································································································

  var yCenter : Int {
    get {
      return self.yCenter_property.propval
    }
    set {
      self.yCenter_property.setProp (newValue)
    }
  }

  //····················································································································

  var yCenter_property_selection : EBSelection <Int> {
    return self.yCenter_property.prop
  }

  //····················································································································
  //   Atomic property: radius
  //····················································································································

  var radius_property = EBStoredProperty_Int (342900)

  //····················································································································

  var radius : Int {
    get {
      return self.radius_property.propval
    }
    set {
      self.radius_property.setProp (newValue)
    }
  }

  //····················································································································

  var radius_property_selection : EBSelection <Int> {
    return self.radius_property.prop
  }

  //····················································································································
  //   Atomic property: startAngle
  //····················································································································

  var startAngle_property = EBStoredProperty_Int (45000)

  //····················································································································

  var startAngle : Int {
    get {
      return self.startAngle_property.propval
    }
    set {
      self.startAngle_property.setProp (newValue)
    }
  }

  //····················································································································

  var startAngle_property_selection : EBSelection <Int> {
    return self.startAngle_property.prop
  }

  //····················································································································
  //   Atomic property: arcAngle
  //····················································································································

  var arcAngle_property = EBStoredProperty_Int (270000)

  //····················································································································

  var arcAngle : Int {
    get {
      return self.arcAngle_property.propval
    }
    set {
      self.arcAngle_property.setProp (newValue)
    }
  }

  //····················································································································

  var arcAngle_property_selection : EBSelection <Int> {
    return self.arcAngle_property.prop
  }

  //····················································································································
  //   Atomic property: startTangentLength
  //····················································································································

  var startTangentLength_property = EBStoredProperty_Int (0)

  //····················································································································

  var startTangentLength : Int {
    get {
      return self.startTangentLength_property.propval
    }
    set {
      self.startTangentLength_property.setProp (newValue)
    }
  }

  //····················································································································

  var startTangentLength_property_selection : EBSelection <Int> {
    return self.startTangentLength_property.prop
  }

  //····················································································································
  //   Atomic property: endTangentLength
  //····················································································································

  var endTangentLength_property = EBStoredProperty_Int (0)

  //····················································································································

  var endTangentLength : Int {
    get {
      return self.endTangentLength_property.propval
    }
    set {
      self.endTangentLength_property.setProp (newValue)
    }
  }

  //····················································································································

  var endTangentLength_property_selection : EBSelection <Int> {
    return self.endTangentLength_property.prop
  }

  //····················································································································
  //   Atomic property: pathIsClosed
  //····················································································································

  var pathIsClosed_property = EBStoredProperty_Bool (false)

  //····················································································································

  var pathIsClosed : Bool {
    get {
      return self.pathIsClosed_property.propval
    }
    set {
      self.pathIsClosed_property.setProp (newValue)
    }
  }

  //····················································································································

  var pathIsClosed_property_selection : EBSelection <Bool> {
    return self.pathIsClosed_property.prop
  }

  //····················································································································
  //   Atomic property: xCenterUnit
  //····················································································································

  var xCenterUnit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var xCenterUnit : Int {
    get {
      return self.xCenterUnit_property.propval
    }
    set {
      self.xCenterUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var xCenterUnit_property_selection : EBSelection <Int> {
    return self.xCenterUnit_property.prop
  }

  //····················································································································
  //   Atomic property: yCenterUnit
  //····················································································································

  var yCenterUnit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var yCenterUnit : Int {
    get {
      return self.yCenterUnit_property.propval
    }
    set {
      self.yCenterUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var yCenterUnit_property_selection : EBSelection <Int> {
    return self.yCenterUnit_property.prop
  }

  //····················································································································
  //   Atomic property: radiusUnit
  //····················································································································

  var radiusUnit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var radiusUnit : Int {
    get {
      return self.radiusUnit_property.propval
    }
    set {
      self.radiusUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var radiusUnit_property_selection : EBSelection <Int> {
    return self.radiusUnit_property.prop
  }

  //····················································································································
  //   Atomic property: startTangentLengthUnit
  //····················································································································

  var startTangentLengthUnit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var startTangentLengthUnit : Int {
    get {
      return self.startTangentLengthUnit_property.propval
    }
    set {
      self.startTangentLengthUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var startTangentLengthUnit_property_selection : EBSelection <Int> {
    return self.startTangentLengthUnit_property.prop
  }

  //····················································································································
  //   Atomic property: endTangentLengthUnit
  //····················································································································

  var endTangentLengthUnit_property = EBStoredProperty_Int (2286)

  //····················································································································

  var endTangentLengthUnit : Int {
    get {
      return self.endTangentLengthUnit_property.propval
    }
    set {
      self.endTangentLengthUnit_property.setProp (newValue)
    }
  }

  //····················································································································

  var endTangentLengthUnit_property_selection : EBSelection <Int> {
    return self.endTangentLengthUnit_property.prop
  }

  //····················································································································
  //   Atomic property: xCenter
  //····················································································································

  var xCenter_property = EBStoredProperty_Int (342900)

  //····················································································································

  var xCenter : Int {
    get {
      return self.xCenter_property.propval
    }
    set {
      self.xCenter_property.setProp (newValue)
    }
  }

  //····················································································································

  var xCenter_property_selection : EBSelection <Int> {
    return self.xCenter_property.prop
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ undoManager : EBUndoManager?, file: String, _ line : Int) {
    super.init (undoManager, file: file, line)
  //--- Atomic property: yCenter
    self.yCenter_property.undoManager = self.undoManager
  //--- Atomic property: radius
    self.radius_property.undoManager = self.undoManager
  //--- Atomic property: startAngle
    self.startAngle_property.undoManager = self.undoManager
  //--- Atomic property: arcAngle
    self.arcAngle_property.undoManager = self.undoManager
  //--- Atomic property: startTangentLength
    self.startTangentLength_property.undoManager = self.undoManager
  //--- Atomic property: endTangentLength
    self.endTangentLength_property.undoManager = self.undoManager
  //--- Atomic property: pathIsClosed
    self.pathIsClosed_property.undoManager = self.undoManager
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.undoManager = self.undoManager
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.undoManager = self.undoManager
  //--- Atomic property: radiusUnit
    self.radiusUnit_property.undoManager = self.undoManager
  //--- Atomic property: startTangentLengthUnit
    self.startTangentLengthUnit_property.undoManager = self.undoManager
  //--- Atomic property: endTangentLengthUnit
    self.endTangentLengthUnit_property.undoManager = self.undoManager
  //--- Atomic property: xCenter
    self.xCenter_property.undoManager = self.undoManager
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.radius_property_selection.kind ()
        kind &= unwSelf.startAngle_property_selection.kind ()
        kind &= unwSelf.arcAngle_property_selection.kind ()
        kind &= unwSelf.pathIsClosed_property_selection.kind ()
        kind &= unwSelf.startTangentLength_property_selection.kind ()
        kind &= unwSelf.endTangentLength_property_selection.kind ()
        kind &= g_Preferences!.packageColor_property_selection.kind ()
        kind &= g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.radius_property_selection, unwSelf.startAngle_property_selection, unwSelf.arcAngle_property_selection, unwSelf.pathIsClosed_property_selection, unwSelf.startTangentLength_property_selection, unwSelf.endTangentLength_property_selection, g_Preferences!.packageColor_property_selection, g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8), .single (let v9)) :
            return .single (transient_PackageArc_objectDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.objectDisplay_property)
    self.yCenter_property.addEBObserver (self.objectDisplay_property)
    self.radius_property.addEBObserver (self.objectDisplay_property)
    self.startAngle_property.addEBObserver (self.objectDisplay_property)
    self.arcAngle_property.addEBObserver (self.objectDisplay_property)
    self.pathIsClosed_property.addEBObserver (self.objectDisplay_property)
    self.startTangentLength_property.addEBObserver (self.objectDisplay_property)
    self.endTangentLength_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.packageColor_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.radius_property_selection.kind ()
        kind &= unwSelf.startAngle_property_selection.kind ()
        kind &= unwSelf.arcAngle_property_selection.kind ()
        kind &= unwSelf.startTangentLength_property_selection.kind ()
        kind &= unwSelf.endTangentLength_property_selection.kind ()
        kind &= unwSelf.pathIsClosed_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.radius_property_selection, unwSelf.startAngle_property_selection, unwSelf.arcAngle_property_selection, unwSelf.startTangentLength_property_selection, unwSelf.endTangentLength_property_selection, unwSelf.pathIsClosed_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (transient_PackageArc_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.selectionDisplay_property)
    self.yCenter_property.addEBObserver (self.selectionDisplay_property)
    self.radius_property.addEBObserver (self.selectionDisplay_property)
    self.startAngle_property.addEBObserver (self.selectionDisplay_property)
    self.arcAngle_property.addEBObserver (self.selectionDisplay_property)
    self.startTangentLength_property.addEBObserver (self.selectionDisplay_property)
    self.endTangentLength_property.addEBObserver (self.selectionDisplay_property)
    self.pathIsClosed_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: issues
    self.issues_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.radius_property_selection.kind ()
        kind &= unwSelf.startAngle_property_selection.kind ()
        kind &= unwSelf.arcAngle_property_selection.kind ()
        kind &= unwSelf.pathIsClosed_property_selection.kind ()
        switch kind {
        case .noSelectionKind :
          return .empty
        case .multipleSelectionKind :
          return .multiple
        case .singleSelectionKind :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.radius_property_selection, unwSelf.startAngle_property_selection, unwSelf.arcAngle_property_selection, unwSelf.pathIsClosed_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5)) :
            return .single (transient_PackageArc_issues (v0, v1, v2, v3, v4, v5))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.issues_property)
    self.yCenter_property.addEBObserver (self.issues_property)
    self.radius_property.addEBObserver (self.issues_property)
    self.startAngle_property.addEBObserver (self.issues_property)
    self.arcAngle_property.addEBObserver (self.issues_property)
    self.pathIsClosed_property.addEBObserver (self.issues_property)
  //--- Install undoers and opposite setter for relationships
  //--- register properties for handling signature
    self.arcAngle_property.setSignatureObserver (observer:self)
    self.endTangentLength_property.setSignatureObserver (observer:self)
    self.endTangentLengthUnit_property.setSignatureObserver (observer:self)
    self.pathIsClosed_property.setSignatureObserver (observer:self)
    self.radius_property.setSignatureObserver (observer:self)
    self.radiusUnit_property.setSignatureObserver (observer:self)
    self.startAngle_property.setSignatureObserver (observer:self)
    self.startTangentLength_property.setSignatureObserver (observer:self)
    self.startTangentLengthUnit_property.setSignatureObserver (observer:self)
    self.xCenter_property.setSignatureObserver (observer:self)
    self.xCenterUnit_property.setSignatureObserver (observer:self)
    self.yCenter_property.setSignatureObserver (observer:self)
    self.yCenterUnit_property.setSignatureObserver (observer:self)
  //--- Extern delegates
  }

  //····················································································································

  deinit {
  //--- Remove observers
    self.xCenter_property.removeEBObserver (self.objectDisplay_property)
    self.yCenter_property.removeEBObserver (self.objectDisplay_property)
    self.radius_property.removeEBObserver (self.objectDisplay_property)
    self.startAngle_property.removeEBObserver (self.objectDisplay_property)
    self.arcAngle_property.removeEBObserver (self.objectDisplay_property)
    self.pathIsClosed_property.removeEBObserver (self.objectDisplay_property)
    self.startTangentLength_property.removeEBObserver (self.objectDisplay_property)
    self.endTangentLength_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.removeEBObserver (self.objectDisplay_property)
    self.xCenter_property.removeEBObserver (self.selectionDisplay_property)
    self.yCenter_property.removeEBObserver (self.selectionDisplay_property)
    self.radius_property.removeEBObserver (self.selectionDisplay_property)
    self.startAngle_property.removeEBObserver (self.selectionDisplay_property)
    self.arcAngle_property.removeEBObserver (self.selectionDisplay_property)
    self.startTangentLength_property.removeEBObserver (self.selectionDisplay_property)
    self.endTangentLength_property.removeEBObserver (self.selectionDisplay_property)
    self.pathIsClosed_property.removeEBObserver (self.selectionDisplay_property)
    self.xCenter_property.removeEBObserver (self.issues_property)
    self.yCenter_property.removeEBObserver (self.issues_property)
    self.radius_property.removeEBObserver (self.issues_property)
    self.startAngle_property.removeEBObserver (self.issues_property)
    self.arcAngle_property.removeEBObserver (self.issues_property)
    self.pathIsClosed_property.removeEBObserver (self.issues_property)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "yCenter",
      idx:self.yCenter_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yCenter_property.mObserverExplorer,
      valueExplorer:&self.yCenter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "radius",
      idx:self.radius_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.radius_property.mObserverExplorer,
      valueExplorer:&self.radius_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "startAngle",
      idx:self.startAngle_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.startAngle_property.mObserverExplorer,
      valueExplorer:&self.startAngle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "arcAngle",
      idx:self.arcAngle_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.arcAngle_property.mObserverExplorer,
      valueExplorer:&self.arcAngle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "startTangentLength",
      idx:self.startTangentLength_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.startTangentLength_property.mObserverExplorer,
      valueExplorer:&self.startTangentLength_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "endTangentLength",
      idx:self.endTangentLength_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.endTangentLength_property.mObserverExplorer,
      valueExplorer:&self.endTangentLength_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "pathIsClosed",
      idx:self.pathIsClosed_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.pathIsClosed_property.mObserverExplorer,
      valueExplorer:&self.pathIsClosed_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xCenterUnit",
      idx:self.xCenterUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xCenterUnit_property.mObserverExplorer,
      valueExplorer:&self.xCenterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yCenterUnit",
      idx:self.yCenterUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yCenterUnit_property.mObserverExplorer,
      valueExplorer:&self.yCenterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "radiusUnit",
      idx:self.radiusUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.radiusUnit_property.mObserverExplorer,
      valueExplorer:&self.radiusUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "startTangentLengthUnit",
      idx:self.startTangentLengthUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.startTangentLengthUnit_property.mObserverExplorer,
      valueExplorer:&self.startTangentLengthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "endTangentLengthUnit",
      idx:self.endTangentLengthUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.endTangentLengthUnit_property.mObserverExplorer,
      valueExplorer:&self.endTangentLengthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xCenter",
      idx:self.xCenter_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xCenter_property.mObserverExplorer,
      valueExplorer:&self.xCenter_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y:&y, view:view)
    createEntryForPropertyNamed (
      "objectDisplay",
      idx:self.objectDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.objectDisplay_property.mObserverExplorer,
      valueExplorer:&self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx:self.selectionDisplay_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.selectionDisplay_property.mObserverExplorer,
      valueExplorer:&self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx:self.issues_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.issues_property.mObserverExplorer,
      valueExplorer:&self.issues_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y:&y, view:view)
    createEntryForTitle ("ToMany Relationships", y:&y, view:view)
    createEntryForTitle ("ToOne Relationships", y:&y, view:view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: yCenter
    self.yCenter_property.mObserverExplorer = nil
    self.yCenter_property.mValueExplorer = nil
  //--- Atomic property: radius
    self.radius_property.mObserverExplorer = nil
    self.radius_property.mValueExplorer = nil
  //--- Atomic property: startAngle
    self.startAngle_property.mObserverExplorer = nil
    self.startAngle_property.mValueExplorer = nil
  //--- Atomic property: arcAngle
    self.arcAngle_property.mObserverExplorer = nil
    self.arcAngle_property.mValueExplorer = nil
  //--- Atomic property: startTangentLength
    self.startTangentLength_property.mObserverExplorer = nil
    self.startTangentLength_property.mValueExplorer = nil
  //--- Atomic property: endTangentLength
    self.endTangentLength_property.mObserverExplorer = nil
    self.endTangentLength_property.mValueExplorer = nil
  //--- Atomic property: pathIsClosed
    self.pathIsClosed_property.mObserverExplorer = nil
    self.pathIsClosed_property.mValueExplorer = nil
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.mObserverExplorer = nil
    self.xCenterUnit_property.mValueExplorer = nil
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.mObserverExplorer = nil
    self.yCenterUnit_property.mValueExplorer = nil
  //--- Atomic property: radiusUnit
    self.radiusUnit_property.mObserverExplorer = nil
    self.radiusUnit_property.mValueExplorer = nil
  //--- Atomic property: startTangentLengthUnit
    self.startTangentLengthUnit_property.mObserverExplorer = nil
    self.startTangentLengthUnit_property.mValueExplorer = nil
  //--- Atomic property: endTangentLengthUnit
    self.endTangentLengthUnit_property.mObserverExplorer = nil
    self.endTangentLengthUnit_property.mValueExplorer = nil
  //--- Atomic property: xCenter
    self.xCenter_property.mObserverExplorer = nil
    self.xCenter_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: yCenter
    self.yCenter_property.storeIn (dictionary: ioDictionary, forKey:"yCenter")
  //--- Atomic property: radius
    self.radius_property.storeIn (dictionary: ioDictionary, forKey:"radius")
  //--- Atomic property: startAngle
    self.startAngle_property.storeIn (dictionary: ioDictionary, forKey:"startAngle")
  //--- Atomic property: arcAngle
    self.arcAngle_property.storeIn (dictionary: ioDictionary, forKey:"arcAngle")
  //--- Atomic property: startTangentLength
    self.startTangentLength_property.storeIn (dictionary: ioDictionary, forKey:"startTangentLength")
  //--- Atomic property: endTangentLength
    self.endTangentLength_property.storeIn (dictionary: ioDictionary, forKey:"endTangentLength")
  //--- Atomic property: pathIsClosed
    self.pathIsClosed_property.storeIn (dictionary: ioDictionary, forKey:"pathIsClosed")
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.storeIn (dictionary: ioDictionary, forKey:"xCenterUnit")
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.storeIn (dictionary: ioDictionary, forKey:"yCenterUnit")
  //--- Atomic property: radiusUnit
    self.radiusUnit_property.storeIn (dictionary: ioDictionary, forKey:"radiusUnit")
  //--- Atomic property: startTangentLengthUnit
    self.startTangentLengthUnit_property.storeIn (dictionary: ioDictionary, forKey:"startTangentLengthUnit")
  //--- Atomic property: endTangentLengthUnit
    self.endTangentLengthUnit_property.storeIn (dictionary: ioDictionary, forKey:"endTangentLengthUnit")
  //--- Atomic property: xCenter
    self.xCenter_property.storeIn (dictionary: ioDictionary, forKey:"xCenter")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: yCenter
    self.yCenter_property.readFrom (dictionary: inDictionary, forKey:"yCenter")
  //--- Atomic property: radius
    self.radius_property.readFrom (dictionary: inDictionary, forKey:"radius")
  //--- Atomic property: startAngle
    self.startAngle_property.readFrom (dictionary: inDictionary, forKey:"startAngle")
  //--- Atomic property: arcAngle
    self.arcAngle_property.readFrom (dictionary: inDictionary, forKey:"arcAngle")
  //--- Atomic property: startTangentLength
    self.startTangentLength_property.readFrom (dictionary: inDictionary, forKey:"startTangentLength")
  //--- Atomic property: endTangentLength
    self.endTangentLength_property.readFrom (dictionary: inDictionary, forKey:"endTangentLength")
  //--- Atomic property: pathIsClosed
    self.pathIsClosed_property.readFrom (dictionary: inDictionary, forKey:"pathIsClosed")
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.readFrom (dictionary: inDictionary, forKey:"xCenterUnit")
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.readFrom (dictionary: inDictionary, forKey:"yCenterUnit")
  //--- Atomic property: radiusUnit
    self.radiusUnit_property.readFrom (dictionary: inDictionary, forKey:"radiusUnit")
  //--- Atomic property: startTangentLengthUnit
    self.startTangentLengthUnit_property.readFrom (dictionary: inDictionary, forKey:"startTangentLengthUnit")
  //--- Atomic property: endTangentLengthUnit
    self.endTangentLengthUnit_property.readFrom (dictionary: inDictionary, forKey:"endTangentLengthUnit")
  //--- Atomic property: xCenter
    self.xCenter_property.readFrom (dictionary: inDictionary, forKey:"xCenter")
  }

  //····················································································································
  //   resetControllers
  //····················································································································

  override func resetControllers () {
    super.resetControllers ()
  }

  //····················································································································
  //   resetToManyRelationships
  //····················································································································

  override func resetToManyRelationships () {
    super.resetToManyRelationships ()
  }

  //····················································································································
  //   resetToOneRelationships
  //····················································································································

  override func resetToOneRelationships () {
    super.resetToOneRelationships ()
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.arcAngle_property.signature ())
    crc.accumulateUInt32 (self.endTangentLength_property.signature ())
    crc.accumulateUInt32 (self.endTangentLengthUnit_property.signature ())
    crc.accumulateUInt32 (self.pathIsClosed_property.signature ())
    crc.accumulateUInt32 (self.radius_property.signature ())
    crc.accumulateUInt32 (self.radiusUnit_property.signature ())
    crc.accumulateUInt32 (self.startAngle_property.signature ())
    crc.accumulateUInt32 (self.startTangentLength_property.signature ())
    crc.accumulateUInt32 (self.startTangentLengthUnit_property.signature ())
    crc.accumulateUInt32 (self.xCenter_property.signature ())
    crc.accumulateUInt32 (self.xCenterUnit_property.signature ())
    crc.accumulateUInt32 (self.yCenter_property.signature ())
    crc.accumulateUInt32 (self.yCenterUnit_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageArc : ReadOnlyAbstractArrayProperty <PackageArc> {

  //····················································································································
  //   Observers of 'yCenter' stored property
  //····················································································································

  private var mObserversOf_yCenter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yCenter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yCenter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yCenter_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_yCenter {
        managedObject.yCenter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yCenter_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for observer in self.mObserversOf_yCenter {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yCenter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'radius' stored property
  //····················································································································

  private var mObserversOf_radius = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_radius (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_radius.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.radius_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_radius (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_radius.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.radius_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_radius_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_radius {
        managedObject.radius_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_radius_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for observer in self.mObserversOf_radius {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.radius_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'startAngle' stored property
  //····················································································································

  private var mObserversOf_startAngle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_startAngle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_startAngle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.startAngle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_startAngle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_startAngle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.startAngle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_startAngle_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_startAngle {
        managedObject.startAngle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_startAngle_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for observer in self.mObserversOf_startAngle {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.startAngle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'arcAngle' stored property
  //····················································································································

  private var mObserversOf_arcAngle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_arcAngle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_arcAngle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.arcAngle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_arcAngle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_arcAngle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.arcAngle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_arcAngle_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_arcAngle {
        managedObject.arcAngle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_arcAngle_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for observer in self.mObserversOf_arcAngle {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.arcAngle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'startTangentLength' stored property
  //····················································································································

  private var mObserversOf_startTangentLength = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_startTangentLength (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_startTangentLength.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.startTangentLength_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_startTangentLength (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_startTangentLength.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.startTangentLength_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_startTangentLength_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_startTangentLength {
        managedObject.startTangentLength_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_startTangentLength_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for observer in self.mObserversOf_startTangentLength {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.startTangentLength_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'endTangentLength' stored property
  //····················································································································

  private var mObserversOf_endTangentLength = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_endTangentLength (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_endTangentLength.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.endTangentLength_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_endTangentLength (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_endTangentLength.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.endTangentLength_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_endTangentLength_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_endTangentLength {
        managedObject.endTangentLength_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_endTangentLength_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for observer in self.mObserversOf_endTangentLength {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.endTangentLength_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'pathIsClosed' stored property
  //····················································································································

  private var mObserversOf_pathIsClosed = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_pathIsClosed (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_pathIsClosed.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pathIsClosed_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_pathIsClosed (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_pathIsClosed.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pathIsClosed_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_pathIsClosed_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_pathIsClosed {
        managedObject.pathIsClosed_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_pathIsClosed_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for observer in self.mObserversOf_pathIsClosed {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.pathIsClosed_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xCenterUnit' stored property
  //····················································································································

  private var mObserversOf_xCenterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xCenterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xCenterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xCenterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xCenterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xCenterUnit_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_xCenterUnit {
        managedObject.xCenterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xCenterUnit_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for observer in self.mObserversOf_xCenterUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xCenterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yCenterUnit' stored property
  //····················································································································

  private var mObserversOf_yCenterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yCenterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yCenterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yCenterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yCenterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yCenterUnit_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_yCenterUnit {
        managedObject.yCenterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yCenterUnit_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for observer in self.mObserversOf_yCenterUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yCenterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'radiusUnit' stored property
  //····················································································································

  private var mObserversOf_radiusUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_radiusUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_radiusUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.radiusUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_radiusUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_radiusUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.radiusUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_radiusUnit_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_radiusUnit {
        managedObject.radiusUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_radiusUnit_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for observer in self.mObserversOf_radiusUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.radiusUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'startTangentLengthUnit' stored property
  //····················································································································

  private var mObserversOf_startTangentLengthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_startTangentLengthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_startTangentLengthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.startTangentLengthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_startTangentLengthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_startTangentLengthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.startTangentLengthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_startTangentLengthUnit_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_startTangentLengthUnit {
        managedObject.startTangentLengthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_startTangentLengthUnit_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for observer in self.mObserversOf_startTangentLengthUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.startTangentLengthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'endTangentLengthUnit' stored property
  //····················································································································

  private var mObserversOf_endTangentLengthUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_endTangentLengthUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_endTangentLengthUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.endTangentLengthUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_endTangentLengthUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_endTangentLengthUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.endTangentLengthUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_endTangentLengthUnit_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_endTangentLengthUnit {
        managedObject.endTangentLengthUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_endTangentLengthUnit_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for observer in self.mObserversOf_endTangentLengthUnit {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.endTangentLengthUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xCenter' stored property
  //····················································································································

  private var mObserversOf_xCenter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xCenter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xCenter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xCenter_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_xCenter {
        managedObject.xCenter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xCenter_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for observer in self.mObserversOf_xCenter {
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xCenter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_objectDisplay {
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_objectDisplay {
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_selectionDisplay {
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_selectionDisplay {
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_issues {
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      for observer in self.mObserversOf_issues {
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf_PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_PackageArc : ReadOnlyArrayOf_PackageArc {

  //····················································································································

  var readModelFunction : Optional < () -> EBSelection < [PackageArc] > >

  //····················································································································

  override var propset : Set <PackageArc> {
    self.computeArrayAndSet ()
    return self.mSet
  }

  //····················································································································

  override var prop : EBSelection < [PackageArc] > {
    self.computeArrayAndSet ()
    return self.prop_cache!  
  }
 
  //····················································································································

  override var propval : [PackageArc] {
    self.computeArrayAndSet ()
    if let value = self.prop_cache {
      switch value {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

  override init () {
    super.init ()
  }

  //····················································································································

  private var mSet = Set <PackageArc> ()

  //····················································································································

  private var prop_cache : EBSelection < [PackageArc] >? = nil

  //····················································································································

  private func computeArrayAndSet () {
    if let unwrappedComputeFunction = self.readModelFunction, self.prop_cache == nil {
      self.prop_cache = unwrappedComputeFunction ()
      let newSet : Set <PackageArc>
      switch self.prop_cache! {
      case .multiple, .empty :
        newSet = Set <PackageArc> ()
      case .single (let array) :
       newSet = Set (array)
      }
    //--- Removed object set
      let removedSet = self.mSet.subtracting (newSet)
    //--- Remove observers of stored properties
      self.removeEBObserversOf_yCenter_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_radius_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_startAngle_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_arcAngle_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_startTangentLength_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_endTangentLength_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_pathIsClosed_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_xCenterUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_yCenterUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_radiusUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_startTangentLengthUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_endTangentLengthUnit_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_xCenter_fromElementsOfSet (removedSet)
    //--- Remove observers of transient properties
      self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedSet)
      self.removeEBObserversOf_issues_fromElementsOfSet (removedSet)
    //--- Added object set
      let addedSet = newSet.subtracting (self.mSet)
     //--- Add observers of stored properties
      self.addEBObserversOf_yCenter_toElementsOfSet (addedSet)
      self.addEBObserversOf_radius_toElementsOfSet (addedSet)
      self.addEBObserversOf_startAngle_toElementsOfSet (addedSet)
      self.addEBObserversOf_arcAngle_toElementsOfSet (addedSet)
      self.addEBObserversOf_startTangentLength_toElementsOfSet (addedSet)
      self.addEBObserversOf_endTangentLength_toElementsOfSet (addedSet)
      self.addEBObserversOf_pathIsClosed_toElementsOfSet (addedSet)
      self.addEBObserversOf_xCenterUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_yCenterUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_radiusUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_startTangentLengthUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_endTangentLengthUnit_toElementsOfSet (addedSet)
      self.addEBObserversOf_xCenter_toElementsOfSet (addedSet)
     //--- Add observers of transient properties
      self.addEBObserversOf_objectDisplay_toElementsOfSet (addedSet)
      self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedSet)
      self.addEBObserversOf_issues_toElementsOfSet (addedSet)
    //--- Update object set
      self.mSet = newSet
    }
    if self.prop_cache == nil {
      self.prop_cache = .empty
    }
  }

  //····················································································································

  override func postEvent () {
    if self.prop_cache != nil {
      self.prop_cache = nil
      if logEvents () {
        appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) propagation\n")
      }
      super.postEvent ()
    }else if logEvents () {
      appendMessageString ("  \(explorerIndexString (self.mEasyBindingsObjectIndex)) nil\n")
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackageArc : ReadOnlyArrayOf_PackageArc {

  //····················································································································
 
  func setProp (_ value :  [PackageArc]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_PackageArc : ReadWriteArrayOf_PackageArc, EBSignatureObserverProtocol {

  //····················································································································

  var setOppositeRelationship : Optional < (_ inManagedObject : PackageArc?) -> Void > = nil

  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································

  override init () {
    super.init ()
    self.count_property.readModelFunction = { [weak self] in
      if let unwSelf = self {
        switch unwSelf.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          return .single (v.count)
        }
      }else{
        return .empty
      }
    }
  }

  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [PackageArc] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.undoManager, "PackageArc") as? PackageArc {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

 //····················································································································

  private var mSet = Set <PackageArc> ()
  private var mValue = [PackageArc] () {
    didSet {
      self.postEvent ()
      if oldValue != self.mValue {
        let oldSet = self.mSet
        self.mSet = Set (self.mValue)
      //--- Register old value in undo manager
        self.undoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object:oldValue)
      //--- Update explorer
        if let valueExplorer = self.mValueExplorer {
          updateManagedObjectToManyRelationshipDisplay (objectArray: self.mValue, popUpButton: valueExplorer)
        }
      //--- Removed object set
        let removedObjectSet = oldSet.subtracting (self.mSet)
        for managedObject in removedObjectSet {
          managedObject.setSignatureObserver (observer: nil)
          self.setOppositeRelationship? (nil)
        }
        self.removeEBObserversOf_yCenter_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_radius_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_startAngle_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_arcAngle_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_startTangentLength_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_endTangentLength_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_pathIsClosed_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_xCenterUnit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_yCenterUnit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_radiusUnit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_startTangentLengthUnit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_endTangentLengthUnit_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_xCenter_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_objectDisplay_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (removedObjectSet)
        self.removeEBObserversOf_issues_fromElementsOfSet (removedObjectSet)
      //--- Added object set
        let addedObjectSet = self.mSet.subtracting (oldSet)
        for managedObject : PackageArc in addedObjectSet {
          managedObject.setSignatureObserver (observer: self)
          self.setOppositeRelationship? (managedObject)
        }
        self.addEBObserversOf_yCenter_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_radius_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_startAngle_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_arcAngle_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_startTangentLength_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_endTangentLength_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_pathIsClosed_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_xCenterUnit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_yCenterUnit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_radiusUnit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_startTangentLengthUnit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_endTangentLengthUnit_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_xCenter_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_objectDisplay_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_selectionDisplay_toElementsOfSet (addedObjectSet)
        self.addEBObserversOf_issues_toElementsOfSet (addedObjectSet)
      //--- Notify observers
        self.clearSignatureCache ()
      //--- Write in preferences ?
        if let prefKey = self.mPrefKey {
          var dictionaryArray = [NSDictionary] ()
          for object in self.mValue {
            let d = NSMutableDictionary ()
            object.saveIntoDictionary (d)
            d [kEntityKey] = nil // Remove entity key, not used in preferences
            dictionaryArray.append (d)
          }
          UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
        }
      }
    }
  }

  //····················································································································

  override var prop : EBSelection < [PackageArc] > { return .single (self.mValue) }

  //····················································································································

  override func setProp (_ inValue : [PackageArc]) { self.mValue = inValue }

  //····················································································································

  override var propval : [PackageArc] { return self.mValue }

  //····················································································································

  override var propset : Set <PackageArc> { return self.mSet }

 //····················································································································

  @objc func performUndo (_ oldValue : [PackageArc]) {
    self.mValue = oldValue
  }

  //····················································································································

  func remove (_ object : PackageArc) {
    if self.mSet.contains (object) {
      var array = self.mValue
      let idx = array.index (of: object)
      array.remove (at: idx!)
      self.mValue = array
    }
  }
  
  //····················································································································

  func add (_ object : PackageArc) {
    if !self.mSet.contains (object) {
      var array = self.mValue
      array.append (object)
      self.mValue = array
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mValue {
      object.setSignatureObserver (observer: self)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
