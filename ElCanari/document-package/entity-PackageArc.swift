//----------------------------------------------------------------------------------------------------------------------
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//----------------------------------------------------------------------------------------------------------------------

import Cocoa

//----------------------------------------------------------------------------------------------------------------------

protocol PackageArc_yCenter : class {
  var yCenter : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageArc_radius : class {
  var radius : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageArc_startAngle : class {
  var startAngle : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageArc_arcAngle : class {
  var arcAngle : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageArc_startTangent : class {
  var startTangent : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageArc_endTangent : class {
  var endTangent : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageArc_pathIsClosed : class {
  var pathIsClosed : Bool { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageArc_xCenterUnit : class {
  var xCenterUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageArc_yCenterUnit : class {
  var yCenterUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageArc_radiusUnit : class {
  var radiusUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageArc_startTangentUnit : class {
  var startTangentUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageArc_endTangentUnit : class {
  var endTangentUnit : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageArc_xCenter : class {
  var xCenter : Int { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageArc_strokeBezierPath : class {
  var strokeBezierPath : EBBezierPath? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageArc_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageArc_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//----------------------------------------------------------------------------------------------------------------------

protocol PackageArc_issues : class {
  var issues : CanariIssueArray? { get }
}

//----------------------------------------------------------------------------------------------------------------------
//    Entity: PackageArc
//----------------------------------------------------------------------------------------------------------------------

class PackageArc : PackageObject,
         PackageArc_yCenter,
         PackageArc_radius,
         PackageArc_startAngle,
         PackageArc_arcAngle,
         PackageArc_startTangent,
         PackageArc_endTangent,
         PackageArc_pathIsClosed,
         PackageArc_xCenterUnit,
         PackageArc_yCenterUnit,
         PackageArc_radiusUnit,
         PackageArc_startTangentUnit,
         PackageArc_endTangentUnit,
         PackageArc_xCenter,
         PackageArc_strokeBezierPath,
         PackageArc_objectDisplay,
         PackageArc_selectionDisplay,
         PackageArc_issues {

  //····················································································································
  //   Atomic property: yCenter
  //····················································································································

  final let yCenter_property = EBStoredProperty_Int (defaultValue: 342900)

  //····················································································································

  final func reset_yCenter_toDefaultValue () {
    self.yCenter = 342900
  }

  //····················································································································

  final var yCenter : Int {
    get { return self.yCenter_property.propval }
    set { self.yCenter_property.setProp (newValue) }
  }

  //····················································································································

  final var yCenter_property_selection : EBSelection <Int> { return self.yCenter_property.prop }

  //····················································································································
  //   Atomic property: radius
  //····················································································································

  final let radius_property = EBStoredProperty_Int (defaultValue: 342900)

  //····················································································································

  final func reset_radius_toDefaultValue () {
    self.radius = 342900
  }

  //····················································································································

  final var radius : Int {
    get { return self.radius_property.propval }
    set { self.radius_property.setProp (newValue) }
  }

  //····················································································································

  final var radius_property_selection : EBSelection <Int> { return self.radius_property.prop }

  //····················································································································
  //   Atomic property: startAngle
  //····················································································································

  final let startAngle_property = EBStoredProperty_Int (defaultValue: 45000)

  //····················································································································

  final func reset_startAngle_toDefaultValue () {
    self.startAngle = 45000
  }

  //····················································································································

  final var startAngle : Int {
    get { return self.startAngle_property.propval }
    set { self.startAngle_property.setProp (newValue) }
  }

  //····················································································································

  final var startAngle_property_selection : EBSelection <Int> { return self.startAngle_property.prop }

  //····················································································································
  //   Atomic property: arcAngle
  //····················································································································

  final let arcAngle_property = EBStoredProperty_Int (defaultValue: 270000)

  //····················································································································

  final func reset_arcAngle_toDefaultValue () {
    self.arcAngle = 270000
  }

  //····················································································································

  final var arcAngle : Int {
    get { return self.arcAngle_property.propval }
    set { self.arcAngle_property.setProp (newValue) }
  }

  //····················································································································

  final var arcAngle_property_selection : EBSelection <Int> { return self.arcAngle_property.prop }

  //····················································································································
  //   Atomic property: startTangent
  //····················································································································

  final let startTangent_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  final func reset_startTangent_toDefaultValue () {
    self.startTangent = 0
  }

  //····················································································································

  final var startTangent : Int {
    get { return self.startTangent_property.propval }
    set { self.startTangent_property.setProp (newValue) }
  }

  //····················································································································

  final var startTangent_property_selection : EBSelection <Int> { return self.startTangent_property.prop }

  //····················································································································
  //   Atomic property: endTangent
  //····················································································································

  final let endTangent_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  final func reset_endTangent_toDefaultValue () {
    self.endTangent = 0
  }

  //····················································································································

  final var endTangent : Int {
    get { return self.endTangent_property.propval }
    set { self.endTangent_property.setProp (newValue) }
  }

  //····················································································································

  final var endTangent_property_selection : EBSelection <Int> { return self.endTangent_property.prop }

  //····················································································································
  //   Atomic property: pathIsClosed
  //····················································································································

  final let pathIsClosed_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  final func reset_pathIsClosed_toDefaultValue () {
    self.pathIsClosed = false
  }

  //····················································································································

  final var pathIsClosed : Bool {
    get { return self.pathIsClosed_property.propval }
    set { self.pathIsClosed_property.setProp (newValue) }
  }

  //····················································································································

  final var pathIsClosed_property_selection : EBSelection <Bool> { return self.pathIsClosed_property.prop }

  //····················································································································
  //   Atomic property: xCenterUnit
  //····················································································································

  final let xCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  final func reset_xCenterUnit_toDefaultValue () {
    self.xCenterUnit = 2286
  }

  //····················································································································

  final var xCenterUnit : Int {
    get { return self.xCenterUnit_property.propval }
    set { self.xCenterUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var xCenterUnit_property_selection : EBSelection <Int> { return self.xCenterUnit_property.prop }

  //····················································································································
  //   Atomic property: yCenterUnit
  //····················································································································

  final let yCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  final func reset_yCenterUnit_toDefaultValue () {
    self.yCenterUnit = 2286
  }

  //····················································································································

  final var yCenterUnit : Int {
    get { return self.yCenterUnit_property.propval }
    set { self.yCenterUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var yCenterUnit_property_selection : EBSelection <Int> { return self.yCenterUnit_property.prop }

  //····················································································································
  //   Atomic property: radiusUnit
  //····················································································································

  final let radiusUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  final func reset_radiusUnit_toDefaultValue () {
    self.radiusUnit = 2286
  }

  //····················································································································

  final var radiusUnit : Int {
    get { return self.radiusUnit_property.propval }
    set { self.radiusUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var radiusUnit_property_selection : EBSelection <Int> { return self.radiusUnit_property.prop }

  //····················································································································
  //   Atomic property: startTangentUnit
  //····················································································································

  final let startTangentUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  final func reset_startTangentUnit_toDefaultValue () {
    self.startTangentUnit = 2286
  }

  //····················································································································

  final var startTangentUnit : Int {
    get { return self.startTangentUnit_property.propval }
    set { self.startTangentUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var startTangentUnit_property_selection : EBSelection <Int> { return self.startTangentUnit_property.prop }

  //····················································································································
  //   Atomic property: endTangentUnit
  //····················································································································

  final let endTangentUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  final func reset_endTangentUnit_toDefaultValue () {
    self.endTangentUnit = 2286
  }

  //····················································································································

  final var endTangentUnit : Int {
    get { return self.endTangentUnit_property.propval }
    set { self.endTangentUnit_property.setProp (newValue) }
  }

  //····················································································································

  final var endTangentUnit_property_selection : EBSelection <Int> { return self.endTangentUnit_property.prop }

  //····················································································································
  //   Atomic property: xCenter
  //····················································································································

  final let xCenter_property = EBStoredProperty_Int (defaultValue: 342900)

  //····················································································································

  final func reset_xCenter_toDefaultValue () {
    self.xCenter = 342900
  }

  //····················································································································

  final var xCenter : Int {
    get { return self.xCenter_property.propval }
    set { self.xCenter_property.setProp (newValue) }
  }

  //····················································································································

  final var xCenter_property_selection : EBSelection <Int> { return self.xCenter_property.prop }

  //····················································································································
  //   Transient property: strokeBezierPath
  //····················································································································

  final let strokeBezierPath_property = EBTransientProperty_EBBezierPath ()

  //····················································································································

  final var strokeBezierPath_property_selection : EBSelection <EBBezierPath> {
    return self.strokeBezierPath_property.prop
  }

  //····················································································································

  final var strokeBezierPath : EBBezierPath? {
    switch self.strokeBezierPath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
    self.configureObject ()
  }
  
  //····················································································································

  private final func configureObject () {
  //--- Atomic property: yCenter
    self.yCenter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: radius
    self.radius_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: startAngle
    self.startAngle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: arcAngle
    self.arcAngle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: startTangent
    self.startTangent_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: endTangent
    self.endTangent_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: pathIsClosed
    self.pathIsClosed_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: radiusUnit
    self.radiusUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: startTangentUnit
    self.startTangentUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: endTangentUnit
    self.endTangentUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: xCenter
    self.xCenter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: strokeBezierPath
    self.strokeBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.radius_property_selection.kind ()
        kind &= unwSelf.startAngle_property_selection.kind ()
        kind &= unwSelf.arcAngle_property_selection.kind ()
        kind &= unwSelf.pathIsClosed_property_selection.kind ()
        kind &= unwSelf.startTangent_property_selection.kind ()
        kind &= unwSelf.endTangent_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.radius_property_selection, unwSelf.startAngle_property_selection, unwSelf.arcAngle_property_selection, unwSelf.pathIsClosed_property_selection, unwSelf.startTangent_property_selection, unwSelf.endTangent_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (transient_PackageArc_strokeBezierPath (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.strokeBezierPath_property)
    self.yCenter_property.addEBObserver (self.strokeBezierPath_property)
    self.radius_property.addEBObserver (self.strokeBezierPath_property)
    self.startAngle_property.addEBObserver (self.strokeBezierPath_property)
    self.arcAngle_property.addEBObserver (self.strokeBezierPath_property)
    self.pathIsClosed_property.addEBObserver (self.strokeBezierPath_property)
    self.startTangent_property.addEBObserver (self.strokeBezierPath_property)
    self.endTangent_property.addEBObserver (self.strokeBezierPath_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.strokeBezierPath_property_selection.kind ()
        kind &= g_Preferences!.packageColor_property_selection.kind ()
        kind &= g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.strokeBezierPath_property_selection, g_Preferences!.packageColor_property_selection, g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_PackageArc_objectDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.strokeBezierPath_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.packageColor_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.radius_property_selection.kind ()
        kind &= unwSelf.startAngle_property_selection.kind ()
        kind &= unwSelf.arcAngle_property_selection.kind ()
        kind &= unwSelf.startTangent_property_selection.kind ()
        kind &= unwSelf.endTangent_property_selection.kind ()
        kind &= unwSelf.pathIsClosed_property_selection.kind ()
        kind &= unwSelf.knobSize_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.radius_property_selection, unwSelf.startAngle_property_selection, unwSelf.arcAngle_property_selection, unwSelf.startTangent_property_selection, unwSelf.endTangent_property_selection, unwSelf.pathIsClosed_property_selection, unwSelf.knobSize_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7), .single (let v8)) :
            return .single (transient_PackageArc_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7, v8))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.selectionDisplay_property)
    self.yCenter_property.addEBObserver (self.selectionDisplay_property)
    self.radius_property.addEBObserver (self.selectionDisplay_property)
    self.startAngle_property.addEBObserver (self.selectionDisplay_property)
    self.arcAngle_property.addEBObserver (self.selectionDisplay_property)
    self.startTangent_property.addEBObserver (self.selectionDisplay_property)
    self.endTangent_property.addEBObserver (self.selectionDisplay_property)
    self.pathIsClosed_property.addEBObserver (self.selectionDisplay_property)
    self.knobSize_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.radius_property_selection.kind ()
        kind &= unwSelf.startAngle_property_selection.kind ()
        kind &= unwSelf.arcAngle_property_selection.kind ()
        kind &= unwSelf.pathIsClosed_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.radius_property_selection, unwSelf.startAngle_property_selection, unwSelf.arcAngle_property_selection, unwSelf.pathIsClosed_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5)) :
            return .single (transient_PackageArc_issues (v0, v1, v2, v3, v4, v5))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.issues_property)
    self.yCenter_property.addEBObserver (self.issues_property)
    self.radius_property.addEBObserver (self.issues_property)
    self.startAngle_property.addEBObserver (self.issues_property)
    self.arcAngle_property.addEBObserver (self.issues_property)
    self.pathIsClosed_property.addEBObserver (self.issues_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.arcAngle_property.setSignatureObserver (observer: self)
    self.endTangent_property.setSignatureObserver (observer: self)
    self.endTangentUnit_property.setSignatureObserver (observer: self)
    self.pathIsClosed_property.setSignatureObserver (observer: self)
    self.radius_property.setSignatureObserver (observer: self)
    self.radiusUnit_property.setSignatureObserver (observer: self)
    self.startAngle_property.setSignatureObserver (observer: self)
    self.startTangent_property.setSignatureObserver (observer: self)
    self.startTangentUnit_property.setSignatureObserver (observer: self)
    self.xCenter_property.setSignatureObserver (observer: self)
    self.xCenterUnit_property.setSignatureObserver (observer: self)
    self.yCenter_property.setSignatureObserver (observer: self)
    self.yCenterUnit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.xCenter_property.removeEBObserver (self.strokeBezierPath_property)
    self.yCenter_property.removeEBObserver (self.strokeBezierPath_property)
    self.radius_property.removeEBObserver (self.strokeBezierPath_property)
    self.startAngle_property.removeEBObserver (self.strokeBezierPath_property)
    self.arcAngle_property.removeEBObserver (self.strokeBezierPath_property)
    self.pathIsClosed_property.removeEBObserver (self.strokeBezierPath_property)
    self.startTangent_property.removeEBObserver (self.strokeBezierPath_property)
    self.endTangent_property.removeEBObserver (self.strokeBezierPath_property)
    self.strokeBezierPath_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.removeEBObserver (self.objectDisplay_property)
    self.xCenter_property.removeEBObserver (self.selectionDisplay_property)
    self.yCenter_property.removeEBObserver (self.selectionDisplay_property)
    self.radius_property.removeEBObserver (self.selectionDisplay_property)
    self.startAngle_property.removeEBObserver (self.selectionDisplay_property)
    self.arcAngle_property.removeEBObserver (self.selectionDisplay_property)
    self.startTangent_property.removeEBObserver (self.selectionDisplay_property)
    self.endTangent_property.removeEBObserver (self.selectionDisplay_property)
    self.pathIsClosed_property.removeEBObserver (self.selectionDisplay_property)
    self.knobSize_property.removeEBObserver (self.selectionDisplay_property)
    self.xCenter_property.removeEBObserver (self.issues_property)
    self.yCenter_property.removeEBObserver (self.issues_property)
    self.radius_property.removeEBObserver (self.issues_property)
    self.startAngle_property.removeEBObserver (self.issues_property)
    self.arcAngle_property.removeEBObserver (self.issues_property)
    self.pathIsClosed_property.removeEBObserver (self.issues_property)
  //--- Unregister properties for handling signature
    self.arcAngle_property.setSignatureObserver (observer: nil)
    self.endTangent_property.setSignatureObserver (observer: nil)
    self.endTangentUnit_property.setSignatureObserver (observer: nil)
    self.pathIsClosed_property.setSignatureObserver (observer: nil)
    self.radius_property.setSignatureObserver (observer: nil)
    self.radiusUnit_property.setSignatureObserver (observer: nil)
    self.startAngle_property.setSignatureObserver (observer: nil)
    self.startTangent_property.setSignatureObserver (observer: nil)
    self.startTangentUnit_property.setSignatureObserver (observer: nil)
    self.xCenter_property.setSignatureObserver (observer: nil)
    self.xCenterUnit_property.setSignatureObserver (observer: nil)
    self.yCenter_property.setSignatureObserver (observer: nil)
    self.yCenterUnit_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "yCenter",
      idx: self.yCenter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.yCenter_property.mObserverExplorer,
      valueExplorer: &self.yCenter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "radius",
      idx: self.radius_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.radius_property.mObserverExplorer,
      valueExplorer: &self.radius_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "startAngle",
      idx: self.startAngle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.startAngle_property.mObserverExplorer,
      valueExplorer: &self.startAngle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "arcAngle",
      idx: self.arcAngle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.arcAngle_property.mObserverExplorer,
      valueExplorer: &self.arcAngle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "startTangent",
      idx: self.startTangent_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.startTangent_property.mObserverExplorer,
      valueExplorer: &self.startTangent_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "endTangent",
      idx: self.endTangent_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.endTangent_property.mObserverExplorer,
      valueExplorer: &self.endTangent_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "pathIsClosed",
      idx: self.pathIsClosed_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.pathIsClosed_property.mObserverExplorer,
      valueExplorer: &self.pathIsClosed_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xCenterUnit",
      idx: self.xCenterUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.xCenterUnit_property.mObserverExplorer,
      valueExplorer: &self.xCenterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yCenterUnit",
      idx: self.yCenterUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.yCenterUnit_property.mObserverExplorer,
      valueExplorer: &self.yCenterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "radiusUnit",
      idx: self.radiusUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.radiusUnit_property.mObserverExplorer,
      valueExplorer: &self.radiusUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "startTangentUnit",
      idx: self.startTangentUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.startTangentUnit_property.mObserverExplorer,
      valueExplorer: &self.startTangentUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "endTangentUnit",
      idx: self.endTangentUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.endTangentUnit_property.mObserverExplorer,
      valueExplorer: &self.endTangentUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xCenter",
      idx: self.xCenter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.xCenter_property.mObserverExplorer,
      valueExplorer: &self.xCenter_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "strokeBezierPath",
      idx: self.strokeBezierPath_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.strokeBezierPath_property.mObserverExplorer,
      valueExplorer: &self.strokeBezierPath_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx: self.objectDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.objectDisplay_property.mObserverExplorer,
      valueExplorer: &self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx: self.selectionDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
      valueExplorer: &self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx: self.issues_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.issues_property.mObserverExplorer,
      valueExplorer: &self.issues_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: yCenter
    self.yCenter_property.mObserverExplorer = nil
    self.yCenter_property.mValueExplorer = nil
  //--- Atomic property: radius
    self.radius_property.mObserverExplorer = nil
    self.radius_property.mValueExplorer = nil
  //--- Atomic property: startAngle
    self.startAngle_property.mObserverExplorer = nil
    self.startAngle_property.mValueExplorer = nil
  //--- Atomic property: arcAngle
    self.arcAngle_property.mObserverExplorer = nil
    self.arcAngle_property.mValueExplorer = nil
  //--- Atomic property: startTangent
    self.startTangent_property.mObserverExplorer = nil
    self.startTangent_property.mValueExplorer = nil
  //--- Atomic property: endTangent
    self.endTangent_property.mObserverExplorer = nil
    self.endTangent_property.mValueExplorer = nil
  //--- Atomic property: pathIsClosed
    self.pathIsClosed_property.mObserverExplorer = nil
    self.pathIsClosed_property.mValueExplorer = nil
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.mObserverExplorer = nil
    self.xCenterUnit_property.mValueExplorer = nil
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.mObserverExplorer = nil
    self.yCenterUnit_property.mValueExplorer = nil
  //--- Atomic property: radiusUnit
    self.radiusUnit_property.mObserverExplorer = nil
    self.radiusUnit_property.mValueExplorer = nil
  //--- Atomic property: startTangentUnit
    self.startTangentUnit_property.mObserverExplorer = nil
    self.startTangentUnit_property.mValueExplorer = nil
  //--- Atomic property: endTangentUnit
    self.endTangentUnit_property.mObserverExplorer = nil
    self.endTangentUnit_property.mValueExplorer = nil
  //--- Atomic property: xCenter
    self.xCenter_property.mObserverExplorer = nil
    self.xCenter_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: yCenter
    self.yCenter_property.storeIn (dictionary: ioDictionary, forKey: "yCenter")
  //--- Atomic property: radius
    self.radius_property.storeIn (dictionary: ioDictionary, forKey: "radius")
  //--- Atomic property: startAngle
    self.startAngle_property.storeIn (dictionary: ioDictionary, forKey: "startAngle")
  //--- Atomic property: arcAngle
    self.arcAngle_property.storeIn (dictionary: ioDictionary, forKey: "arcAngle")
  //--- Atomic property: startTangent
    self.startTangent_property.storeIn (dictionary: ioDictionary, forKey: "startTangent")
  //--- Atomic property: endTangent
    self.endTangent_property.storeIn (dictionary: ioDictionary, forKey: "endTangent")
  //--- Atomic property: pathIsClosed
    self.pathIsClosed_property.storeIn (dictionary: ioDictionary, forKey: "pathIsClosed")
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.storeIn (dictionary: ioDictionary, forKey: "xCenterUnit")
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.storeIn (dictionary: ioDictionary, forKey: "yCenterUnit")
  //--- Atomic property: radiusUnit
    self.radiusUnit_property.storeIn (dictionary: ioDictionary, forKey: "radiusUnit")
  //--- Atomic property: startTangentUnit
    self.startTangentUnit_property.storeIn (dictionary: ioDictionary, forKey: "startTangentUnit")
  //--- Atomic property: endTangentUnit
    self.endTangentUnit_property.storeIn (dictionary: ioDictionary, forKey: "endTangentUnit")
  //--- Atomic property: xCenter
    self.xCenter_property.storeIn (dictionary: ioDictionary, forKey: "xCenter")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray: &managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: yCenter
    self.yCenter_property.readFrom (dictionary: inDictionary, forKey: "yCenter")
  //--- Atomic property: radius
    self.radius_property.readFrom (dictionary: inDictionary, forKey: "radius")
  //--- Atomic property: startAngle
    self.startAngle_property.readFrom (dictionary: inDictionary, forKey: "startAngle")
  //--- Atomic property: arcAngle
    self.arcAngle_property.readFrom (dictionary: inDictionary, forKey: "arcAngle")
  //--- Atomic property: startTangent
    self.startTangent_property.readFrom (dictionary: inDictionary, forKey: "startTangent")
  //--- Atomic property: endTangent
    self.endTangent_property.readFrom (dictionary: inDictionary, forKey: "endTangent")
  //--- Atomic property: pathIsClosed
    self.pathIsClosed_property.readFrom (dictionary: inDictionary, forKey: "pathIsClosed")
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.readFrom (dictionary: inDictionary, forKey: "xCenterUnit")
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.readFrom (dictionary: inDictionary, forKey: "yCenterUnit")
  //--- Atomic property: radiusUnit
    self.radiusUnit_property.readFrom (dictionary: inDictionary, forKey: "radiusUnit")
  //--- Atomic property: startTangentUnit
    self.startTangentUnit_property.readFrom (dictionary: inDictionary, forKey: "startTangentUnit")
  //--- Atomic property: endTangentUnit
    self.endTangentUnit_property.readFrom (dictionary: inDictionary, forKey: "endTangentUnit")
  //--- Atomic property: xCenter
    self.xCenter_property.readFrom (dictionary: inDictionary, forKey: "xCenter")
  }


  //····················································································································
  //   appendPropertyNamesTo
  //····················································································································

  override func appendPropertyNamesTo (_ ioString : inout String) {
    super.appendPropertyNamesTo (&ioString)
  //--- Atomic properties
    ioString += "yCenter\n"
    ioString += "radius\n"
    ioString += "startAngle\n"
    ioString += "arcAngle\n"
    ioString += "startTangent\n"
    ioString += "endTangent\n"
    ioString += "pathIsClosed\n"
    ioString += "xCenterUnit\n"
    ioString += "yCenterUnit\n"
    ioString += "radiusUnit\n"
    ioString += "startTangentUnit\n"
    ioString += "endTangentUnit\n"
    ioString += "xCenter\n"
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //   appendPropertyValuesTo
  //····················································································································

  override func appendPropertyValuesTo (_ ioData : inout Data) {
    super.appendPropertyValuesTo (&ioData)
  //--- Atomic properties
    self.yCenter.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.radius.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.startAngle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.arcAngle.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.startTangent.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.endTangent.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.pathIsClosed.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.xCenterUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.yCenterUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.radiusUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.startTangentUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.endTangentUnit.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
    self.xCenter.appendPropertyValueTo (&ioData)
    ioData.append (ascii: .lineFeed)
  //--- To one relationships
  //--- To many relationships
  }

  //····················································································································
  //    setUpWithTextDictionary
  //····················································································································

  override func setUpWithTextDictionary (_ inDictionary : [String : NSRange],
                                         _ inObjectArray : [EBManagedObject],
                                         _ inData : Data,
                                         _ inParallelObjectSetupContext : ParallelObjectSetupContext) {
    super.setUpWithTextDictionary (inDictionary, inObjectArray, inData, inParallelObjectSetupContext)
    inParallelObjectSetupContext.mOperationQueue.addOperation {
    //--- Atomic properties
      if let range = inDictionary ["yCenter"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.yCenter = value
      }
      if let range = inDictionary ["radius"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.radius = value
      }
      if let range = inDictionary ["startAngle"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.startAngle = value
      }
      if let range = inDictionary ["arcAngle"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.arcAngle = value
      }
      if let range = inDictionary ["startTangent"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.startTangent = value
      }
      if let range = inDictionary ["endTangent"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.endTangent = value
      }
      if let range = inDictionary ["pathIsClosed"], let value = Bool.unarchiveFromDataRange (inData, range) {
        self.pathIsClosed = value
      }
      if let range = inDictionary ["xCenterUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.xCenterUnit = value
      }
      if let range = inDictionary ["yCenterUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.yCenterUnit = value
      }
      if let range = inDictionary ["radiusUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.radiusUnit = value
      }
      if let range = inDictionary ["startTangentUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.startTangentUnit = value
      }
      if let range = inDictionary ["endTangentUnit"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.endTangentUnit = value
      }
      if let range = inDictionary ["xCenter"], let value = Int.unarchiveFromDataRange (inData, range) {
        self.xCenter = value
      }
    //--- To one relationships
    //--- To many relationships
    }
  //--- End of addOperation
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.arcAngle_property.signature ())
    crc.accumulateUInt32 (self.endTangent_property.signature ())
    crc.accumulateUInt32 (self.endTangentUnit_property.signature ())
    crc.accumulateUInt32 (self.pathIsClosed_property.signature ())
    crc.accumulateUInt32 (self.radius_property.signature ())
    crc.accumulateUInt32 (self.radiusUnit_property.signature ())
    crc.accumulateUInt32 (self.startAngle_property.signature ())
    crc.accumulateUInt32 (self.startTangent_property.signature ())
    crc.accumulateUInt32 (self.startTangentUnit_property.signature ())
    crc.accumulateUInt32 (self.xCenter_property.signature ())
    crc.accumulateUInt32 (self.xCenterUnit_property.signature ())
    crc.accumulateUInt32 (self.yCenter_property.signature ())
    crc.accumulateUInt32 (self.yCenterUnit_property.signature ())
    return crc
  }

  //····················································································································

}

//----------------------------------------------------------------------------------------------------------------------

