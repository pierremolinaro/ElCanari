//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_yCenter : class {
  var yCenter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_radius : class {
  var radius : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_startAngle : class {
  var startAngle : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_arcAngle : class {
  var arcAngle : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_startTangent : class {
  var startTangent : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_endTangent : class {
  var endTangent : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_pathIsClosed : class {
  var pathIsClosed : Bool { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_xCenterUnit : class {
  var xCenterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_yCenterUnit : class {
  var yCenterUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_radiusUnit : class {
  var radiusUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_startTangentUnit : class {
  var startTangentUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_endTangentUnit : class {
  var endTangentUnit : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_xCenter : class {
  var xCenter : Int { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_strokeBezierPath : class {
  var strokeBezierPath : NSBezierPath? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_objectDisplay : class {
  var objectDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_selectionDisplay : class {
  var selectionDisplay : EBShape? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

protocol PackageArc_issues : class {
  var issues : CanariIssueArray? { get }
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Entity: PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class PackageArc : PackageObject,
         PackageArc_yCenter,
         PackageArc_radius,
         PackageArc_startAngle,
         PackageArc_arcAngle,
         PackageArc_startTangent,
         PackageArc_endTangent,
         PackageArc_pathIsClosed,
         PackageArc_xCenterUnit,
         PackageArc_yCenterUnit,
         PackageArc_radiusUnit,
         PackageArc_startTangentUnit,
         PackageArc_endTangentUnit,
         PackageArc_xCenter,
         PackageArc_strokeBezierPath,
         PackageArc_objectDisplay,
         PackageArc_selectionDisplay,
         PackageArc_issues {

  //····················································································································
  //   Atomic property: yCenter
  //····················································································································

  let yCenter_property = EBStoredProperty_Int (defaultValue: 342900)

  //····················································································································

  var yCenter : Int {
    get { return self.yCenter_property.propval }
    set { self.yCenter_property.setProp (newValue) }
  }

  //····················································································································

  var yCenter_property_selection : EBSelection <Int> { return self.yCenter_property.prop }

  //····················································································································
  //   Atomic property: radius
  //····················································································································

  let radius_property = EBStoredProperty_Int (defaultValue: 342900)

  //····················································································································

  var radius : Int {
    get { return self.radius_property.propval }
    set { self.radius_property.setProp (newValue) }
  }

  //····················································································································

  var radius_property_selection : EBSelection <Int> { return self.radius_property.prop }

  //····················································································································
  //   Atomic property: startAngle
  //····················································································································

  let startAngle_property = EBStoredProperty_Int (defaultValue: 45000)

  //····················································································································

  var startAngle : Int {
    get { return self.startAngle_property.propval }
    set { self.startAngle_property.setProp (newValue) }
  }

  //····················································································································

  var startAngle_property_selection : EBSelection <Int> { return self.startAngle_property.prop }

  //····················································································································
  //   Atomic property: arcAngle
  //····················································································································

  let arcAngle_property = EBStoredProperty_Int (defaultValue: 270000)

  //····················································································································

  var arcAngle : Int {
    get { return self.arcAngle_property.propval }
    set { self.arcAngle_property.setProp (newValue) }
  }

  //····················································································································

  var arcAngle_property_selection : EBSelection <Int> { return self.arcAngle_property.prop }

  //····················································································································
  //   Atomic property: startTangent
  //····················································································································

  let startTangent_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var startTangent : Int {
    get { return self.startTangent_property.propval }
    set { self.startTangent_property.setProp (newValue) }
  }

  //····················································································································

  var startTangent_property_selection : EBSelection <Int> { return self.startTangent_property.prop }

  //····················································································································
  //   Atomic property: endTangent
  //····················································································································

  let endTangent_property = EBStoredProperty_Int (defaultValue: 0)

  //····················································································································

  var endTangent : Int {
    get { return self.endTangent_property.propval }
    set { self.endTangent_property.setProp (newValue) }
  }

  //····················································································································

  var endTangent_property_selection : EBSelection <Int> { return self.endTangent_property.prop }

  //····················································································································
  //   Atomic property: pathIsClosed
  //····················································································································

  let pathIsClosed_property = EBStoredProperty_Bool (defaultValue: false)

  //····················································································································

  var pathIsClosed : Bool {
    get { return self.pathIsClosed_property.propval }
    set { self.pathIsClosed_property.setProp (newValue) }
  }

  //····················································································································

  var pathIsClosed_property_selection : EBSelection <Bool> { return self.pathIsClosed_property.prop }

  //····················································································································
  //   Atomic property: xCenterUnit
  //····················································································································

  let xCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var xCenterUnit : Int {
    get { return self.xCenterUnit_property.propval }
    set { self.xCenterUnit_property.setProp (newValue) }
  }

  //····················································································································

  var xCenterUnit_property_selection : EBSelection <Int> { return self.xCenterUnit_property.prop }

  //····················································································································
  //   Atomic property: yCenterUnit
  //····················································································································

  let yCenterUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var yCenterUnit : Int {
    get { return self.yCenterUnit_property.propval }
    set { self.yCenterUnit_property.setProp (newValue) }
  }

  //····················································································································

  var yCenterUnit_property_selection : EBSelection <Int> { return self.yCenterUnit_property.prop }

  //····················································································································
  //   Atomic property: radiusUnit
  //····················································································································

  let radiusUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var radiusUnit : Int {
    get { return self.radiusUnit_property.propval }
    set { self.radiusUnit_property.setProp (newValue) }
  }

  //····················································································································

  var radiusUnit_property_selection : EBSelection <Int> { return self.radiusUnit_property.prop }

  //····················································································································
  //   Atomic property: startTangentUnit
  //····················································································································

  let startTangentUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var startTangentUnit : Int {
    get { return self.startTangentUnit_property.propval }
    set { self.startTangentUnit_property.setProp (newValue) }
  }

  //····················································································································

  var startTangentUnit_property_selection : EBSelection <Int> { return self.startTangentUnit_property.prop }

  //····················································································································
  //   Atomic property: endTangentUnit
  //····················································································································

  let endTangentUnit_property = EBStoredProperty_Int (defaultValue: 2286)

  //····················································································································

  var endTangentUnit : Int {
    get { return self.endTangentUnit_property.propval }
    set { self.endTangentUnit_property.setProp (newValue) }
  }

  //····················································································································

  var endTangentUnit_property_selection : EBSelection <Int> { return self.endTangentUnit_property.prop }

  //····················································································································
  //   Atomic property: xCenter
  //····················································································································

  let xCenter_property = EBStoredProperty_Int (defaultValue: 342900)

  //····················································································································

  var xCenter : Int {
    get { return self.xCenter_property.propval }
    set { self.xCenter_property.setProp (newValue) }
  }

  //····················································································································

  var xCenter_property_selection : EBSelection <Int> { return self.xCenter_property.prop }

  //····················································································································
  //   Transient property: strokeBezierPath
  //····················································································································

  let strokeBezierPath_property = EBTransientProperty_NSBezierPath ()

  //····················································································································

  var strokeBezierPath_property_selection : EBSelection <NSBezierPath> {
    return self.strokeBezierPath_property.prop
  }

  //····················································································································

  var strokeBezierPath : NSBezierPath? {
    switch self.strokeBezierPath_property_selection {
    case .empty, .multiple :
      return nil
    case .single (let v) :
      return v
    }
  }

  //····················································································································
  //    init
  //····················································································································

  required init (_ ebUndoManager : EBUndoManager?) {
    super.init (ebUndoManager)
  //--- Atomic property: yCenter
    self.yCenter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: radius
    self.radius_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: startAngle
    self.startAngle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: arcAngle
    self.arcAngle_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: startTangent
    self.startTangent_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: endTangent
    self.endTangent_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: pathIsClosed
    self.pathIsClosed_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: radiusUnit
    self.radiusUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: startTangentUnit
    self.startTangentUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: endTangentUnit
    self.endTangentUnit_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: xCenter
    self.xCenter_property.ebUndoManager = self.ebUndoManager
  //--- Atomic property: strokeBezierPath
    self.strokeBezierPath_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.radius_property_selection.kind ()
        kind &= unwSelf.startAngle_property_selection.kind ()
        kind &= unwSelf.arcAngle_property_selection.kind ()
        kind &= unwSelf.pathIsClosed_property_selection.kind ()
        kind &= unwSelf.startTangent_property_selection.kind ()
        kind &= unwSelf.endTangent_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.radius_property_selection, unwSelf.startAngle_property_selection, unwSelf.arcAngle_property_selection, unwSelf.pathIsClosed_property_selection, unwSelf.startTangent_property_selection, unwSelf.endTangent_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (transient_PackageArc_strokeBezierPath (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.strokeBezierPath_property)
    self.yCenter_property.addEBObserver (self.strokeBezierPath_property)
    self.radius_property.addEBObserver (self.strokeBezierPath_property)
    self.startAngle_property.addEBObserver (self.strokeBezierPath_property)
    self.arcAngle_property.addEBObserver (self.strokeBezierPath_property)
    self.pathIsClosed_property.addEBObserver (self.strokeBezierPath_property)
    self.startTangent_property.addEBObserver (self.strokeBezierPath_property)
    self.endTangent_property.addEBObserver (self.strokeBezierPath_property)
  //--- Atomic property: objectDisplay
    self.objectDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.strokeBezierPath_property_selection.kind ()
        kind &= g_Preferences!.packageColor_property_selection.kind ()
        kind &= g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.strokeBezierPath_property_selection, g_Preferences!.packageColor_property_selection, g_Preferences!.packageDrawingWidthMultipliedByTen_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2)) :
            return .single (transient_PackageArc_objectDisplay (v0, v1, v2))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.strokeBezierPath_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.packageColor_property.addEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.addEBObserver (self.objectDisplay_property)
  //--- Atomic property: selectionDisplay
    self.selectionDisplay_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.radius_property_selection.kind ()
        kind &= unwSelf.startAngle_property_selection.kind ()
        kind &= unwSelf.arcAngle_property_selection.kind ()
        kind &= unwSelf.startTangent_property_selection.kind ()
        kind &= unwSelf.endTangent_property_selection.kind ()
        kind &= unwSelf.pathIsClosed_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.radius_property_selection, unwSelf.startAngle_property_selection, unwSelf.arcAngle_property_selection, unwSelf.startTangent_property_selection, unwSelf.endTangent_property_selection, unwSelf.pathIsClosed_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5), .single (let v6), .single (let v7)) :
            return .single (transient_PackageArc_selectionDisplay (v0, v1, v2, v3, v4, v5, v6, v7))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.selectionDisplay_property)
    self.yCenter_property.addEBObserver (self.selectionDisplay_property)
    self.radius_property.addEBObserver (self.selectionDisplay_property)
    self.startAngle_property.addEBObserver (self.selectionDisplay_property)
    self.arcAngle_property.addEBObserver (self.selectionDisplay_property)
    self.startTangent_property.addEBObserver (self.selectionDisplay_property)
    self.endTangent_property.addEBObserver (self.selectionDisplay_property)
    self.pathIsClosed_property.addEBObserver (self.selectionDisplay_property)
  //--- Atomic property: issues
    self.issues_property.mReadModelFunction = { [weak self] in
      if let unwSelf = self {
        var kind = unwSelf.xCenter_property_selection.kind ()
        kind &= unwSelf.yCenter_property_selection.kind ()
        kind &= unwSelf.radius_property_selection.kind ()
        kind &= unwSelf.startAngle_property_selection.kind ()
        kind &= unwSelf.arcAngle_property_selection.kind ()
        kind &= unwSelf.pathIsClosed_property_selection.kind ()
        switch kind {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single :
          switch (unwSelf.xCenter_property_selection, unwSelf.yCenter_property_selection, unwSelf.radius_property_selection, unwSelf.startAngle_property_selection, unwSelf.arcAngle_property_selection, unwSelf.pathIsClosed_property_selection) {
          case (.single (let v0), .single (let v1), .single (let v2), .single (let v3), .single (let v4), .single (let v5)) :
            return .single (transient_PackageArc_issues (v0, v1, v2, v3, v4, v5))
          default :
            return .empty
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.addEBObserver (self.issues_property)
    self.yCenter_property.addEBObserver (self.issues_property)
    self.radius_property.addEBObserver (self.issues_property)
    self.startAngle_property.addEBObserver (self.issues_property)
    self.arcAngle_property.addEBObserver (self.issues_property)
    self.pathIsClosed_property.addEBObserver (self.issues_property)
  //--- Install undoers and opposite setter for relationships
  //--- Register properties for handling signature
    self.arcAngle_property.setSignatureObserver (observer: self)
    self.endTangent_property.setSignatureObserver (observer: self)
    self.endTangentUnit_property.setSignatureObserver (observer: self)
    self.pathIsClosed_property.setSignatureObserver (observer: self)
    self.radius_property.setSignatureObserver (observer: self)
    self.radiusUnit_property.setSignatureObserver (observer: self)
    self.startAngle_property.setSignatureObserver (observer: self)
    self.startTangent_property.setSignatureObserver (observer: self)
    self.startTangentUnit_property.setSignatureObserver (observer: self)
    self.xCenter_property.setSignatureObserver (observer: self)
    self.xCenterUnit_property.setSignatureObserver (observer: self)
    self.yCenter_property.setSignatureObserver (observer: self)
    self.yCenterUnit_property.setSignatureObserver (observer: self)
  //--- Extern delegates
  }

  //····················································································································

  override internal func removeAllObservers () {
    super.removeAllObservers ()
    self.xCenter_property.removeEBObserver (self.strokeBezierPath_property)
    self.yCenter_property.removeEBObserver (self.strokeBezierPath_property)
    self.radius_property.removeEBObserver (self.strokeBezierPath_property)
    self.startAngle_property.removeEBObserver (self.strokeBezierPath_property)
    self.arcAngle_property.removeEBObserver (self.strokeBezierPath_property)
    self.pathIsClosed_property.removeEBObserver (self.strokeBezierPath_property)
    self.startTangent_property.removeEBObserver (self.strokeBezierPath_property)
    self.endTangent_property.removeEBObserver (self.strokeBezierPath_property)
    self.strokeBezierPath_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageColor_property.removeEBObserver (self.objectDisplay_property)
    g_Preferences?.packageDrawingWidthMultipliedByTen_property.removeEBObserver (self.objectDisplay_property)
    self.xCenter_property.removeEBObserver (self.selectionDisplay_property)
    self.yCenter_property.removeEBObserver (self.selectionDisplay_property)
    self.radius_property.removeEBObserver (self.selectionDisplay_property)
    self.startAngle_property.removeEBObserver (self.selectionDisplay_property)
    self.arcAngle_property.removeEBObserver (self.selectionDisplay_property)
    self.startTangent_property.removeEBObserver (self.selectionDisplay_property)
    self.endTangent_property.removeEBObserver (self.selectionDisplay_property)
    self.pathIsClosed_property.removeEBObserver (self.selectionDisplay_property)
    self.xCenter_property.removeEBObserver (self.issues_property)
    self.yCenter_property.removeEBObserver (self.issues_property)
    self.radius_property.removeEBObserver (self.issues_property)
    self.startAngle_property.removeEBObserver (self.issues_property)
    self.arcAngle_property.removeEBObserver (self.issues_property)
    self.pathIsClosed_property.removeEBObserver (self.issues_property)
  //--- Unregister properties for handling signature
    self.arcAngle_property.setSignatureObserver (observer: nil)
    self.endTangent_property.setSignatureObserver (observer: nil)
    self.endTangentUnit_property.setSignatureObserver (observer: nil)
    self.pathIsClosed_property.setSignatureObserver (observer: nil)
    self.radius_property.setSignatureObserver (observer: nil)
    self.radiusUnit_property.setSignatureObserver (observer: nil)
    self.startAngle_property.setSignatureObserver (observer: nil)
    self.startTangent_property.setSignatureObserver (observer: nil)
    self.startTangentUnit_property.setSignatureObserver (observer: nil)
    self.xCenter_property.setSignatureObserver (observer: nil)
    self.xCenterUnit_property.setSignatureObserver (observer: nil)
    self.yCenter_property.setSignatureObserver (observer: nil)
    self.yCenterUnit_property.setSignatureObserver (observer: nil)
  }

  //····················································································································
  //    Extern delegates
  //····················································································································


  //····················································································································
  //    populateExplorerWindow
  //····················································································································

  override func populateExplorerWindow (_ y : inout CGFloat, view : NSView) {
    super.populateExplorerWindow (&y, view:view)
    createEntryForPropertyNamed (
      "yCenter",
      idx: self.yCenter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.yCenter_property.mObserverExplorer,
      valueExplorer: &self.yCenter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "radius",
      idx: self.radius_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.radius_property.mObserverExplorer,
      valueExplorer: &self.radius_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "startAngle",
      idx: self.startAngle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.startAngle_property.mObserverExplorer,
      valueExplorer: &self.startAngle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "arcAngle",
      idx: self.arcAngle_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.arcAngle_property.mObserverExplorer,
      valueExplorer: &self.arcAngle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "startTangent",
      idx: self.startTangent_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.startTangent_property.mObserverExplorer,
      valueExplorer: &self.startTangent_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "endTangent",
      idx: self.endTangent_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.endTangent_property.mObserverExplorer,
      valueExplorer: &self.endTangent_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "pathIsClosed",
      idx: self.pathIsClosed_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.pathIsClosed_property.mObserverExplorer,
      valueExplorer: &self.pathIsClosed_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xCenterUnit",
      idx: self.xCenterUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.xCenterUnit_property.mObserverExplorer,
      valueExplorer: &self.xCenterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yCenterUnit",
      idx: self.yCenterUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.yCenterUnit_property.mObserverExplorer,
      valueExplorer: &self.yCenterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "radiusUnit",
      idx: self.radiusUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.radiusUnit_property.mObserverExplorer,
      valueExplorer: &self.radiusUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "startTangentUnit",
      idx: self.startTangentUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.startTangentUnit_property.mObserverExplorer,
      valueExplorer: &self.startTangentUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "endTangentUnit",
      idx: self.endTangentUnit_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.endTangentUnit_property.mObserverExplorer,
      valueExplorer: &self.endTangentUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xCenter",
      idx: self.xCenter_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.xCenter_property.mObserverExplorer,
      valueExplorer: &self.xCenter_property.mValueExplorer
    )
    createEntryForTitle ("Properties", y: &y, view: view)
    createEntryForPropertyNamed (
      "strokeBezierPath",
      idx: self.strokeBezierPath_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.strokeBezierPath_property.mObserverExplorer,
      valueExplorer: &self.strokeBezierPath_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "objectDisplay",
      idx: self.objectDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.objectDisplay_property.mObserverExplorer,
      valueExplorer: &self.objectDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "selectionDisplay",
      idx: self.selectionDisplay_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.selectionDisplay_property.mObserverExplorer,
      valueExplorer: &self.selectionDisplay_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "issues",
      idx: self.issues_property.ebObjectIndex,
      y: &y,
      view: view,
      observerExplorer: &self.issues_property.mObserverExplorer,
      valueExplorer: &self.issues_property.mValueExplorer
    )
    createEntryForTitle ("Transients", y: &y, view: view)
    createEntryForTitle ("ToMany Relationships", y: &y, view: view)
    createEntryForTitle ("ToOne Relationships", y: &y, view: view)
  }

  //····················································································································
  //    clearObjectExplorer
  //····················································································································

  override func clearObjectExplorer () {
  //--- Atomic property: yCenter
    self.yCenter_property.mObserverExplorer = nil
    self.yCenter_property.mValueExplorer = nil
  //--- Atomic property: radius
    self.radius_property.mObserverExplorer = nil
    self.radius_property.mValueExplorer = nil
  //--- Atomic property: startAngle
    self.startAngle_property.mObserverExplorer = nil
    self.startAngle_property.mValueExplorer = nil
  //--- Atomic property: arcAngle
    self.arcAngle_property.mObserverExplorer = nil
    self.arcAngle_property.mValueExplorer = nil
  //--- Atomic property: startTangent
    self.startTangent_property.mObserverExplorer = nil
    self.startTangent_property.mValueExplorer = nil
  //--- Atomic property: endTangent
    self.endTangent_property.mObserverExplorer = nil
    self.endTangent_property.mValueExplorer = nil
  //--- Atomic property: pathIsClosed
    self.pathIsClosed_property.mObserverExplorer = nil
    self.pathIsClosed_property.mValueExplorer = nil
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.mObserverExplorer = nil
    self.xCenterUnit_property.mValueExplorer = nil
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.mObserverExplorer = nil
    self.yCenterUnit_property.mValueExplorer = nil
  //--- Atomic property: radiusUnit
    self.radiusUnit_property.mObserverExplorer = nil
    self.radiusUnit_property.mValueExplorer = nil
  //--- Atomic property: startTangentUnit
    self.startTangentUnit_property.mObserverExplorer = nil
    self.startTangentUnit_property.mValueExplorer = nil
  //--- Atomic property: endTangentUnit
    self.endTangentUnit_property.mObserverExplorer = nil
    self.endTangentUnit_property.mValueExplorer = nil
  //--- Atomic property: xCenter
    self.xCenter_property.mObserverExplorer = nil
    self.xCenter_property.mValueExplorer = nil
  //---
    super.clearObjectExplorer ()
  }

  //····················································································································
  //    cleanUpToManyRelationships
  //····················································································································

  override internal func cleanUpToManyRelationships () {
  //---
    super.cleanUpToManyRelationships ()
  }

  //····················································································································
  //    cleanUpToOneRelationships
  //····················································································································

  override internal func cleanUpToOneRelationships () {
  //---
    super.cleanUpToOneRelationships ()
  }

  //····················································································································
  //    saveIntoDictionary
  //····················································································································

  override func saveIntoDictionary (_ ioDictionary : NSMutableDictionary) {
    super.saveIntoDictionary (ioDictionary)
  //--- Atomic property: yCenter
    self.yCenter_property.storeIn (dictionary: ioDictionary, forKey:"yCenter")
  //--- Atomic property: radius
    self.radius_property.storeIn (dictionary: ioDictionary, forKey:"radius")
  //--- Atomic property: startAngle
    self.startAngle_property.storeIn (dictionary: ioDictionary, forKey:"startAngle")
  //--- Atomic property: arcAngle
    self.arcAngle_property.storeIn (dictionary: ioDictionary, forKey:"arcAngle")
  //--- Atomic property: startTangent
    self.startTangent_property.storeIn (dictionary: ioDictionary, forKey:"startTangent")
  //--- Atomic property: endTangent
    self.endTangent_property.storeIn (dictionary: ioDictionary, forKey:"endTangent")
  //--- Atomic property: pathIsClosed
    self.pathIsClosed_property.storeIn (dictionary: ioDictionary, forKey:"pathIsClosed")
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.storeIn (dictionary: ioDictionary, forKey:"xCenterUnit")
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.storeIn (dictionary: ioDictionary, forKey:"yCenterUnit")
  //--- Atomic property: radiusUnit
    self.radiusUnit_property.storeIn (dictionary: ioDictionary, forKey:"radiusUnit")
  //--- Atomic property: startTangentUnit
    self.startTangentUnit_property.storeIn (dictionary: ioDictionary, forKey:"startTangentUnit")
  //--- Atomic property: endTangentUnit
    self.endTangentUnit_property.storeIn (dictionary: ioDictionary, forKey:"endTangentUnit")
  //--- Atomic property: xCenter
    self.xCenter_property.storeIn (dictionary: ioDictionary, forKey:"xCenter")
  }

  //····················································································································
  //    setUpWithDictionary
  //····················································································································

  override func setUpWithDictionary (_ inDictionary : NSDictionary,
                                     managedObjectArray : inout [EBManagedObject]) {
    super.setUpWithDictionary (inDictionary, managedObjectArray:&managedObjectArray)
  }

  //····················································································································
  //    setUpAtomicPropertiesWithDictionary
  //····················································································································

  override func setUpAtomicPropertiesWithDictionary (_ inDictionary : NSDictionary) {
    super.setUpAtomicPropertiesWithDictionary (inDictionary)
  //--- Atomic property: yCenter
    self.yCenter_property.readFrom (dictionary: inDictionary, forKey:"yCenter")
  //--- Atomic property: radius
    self.radius_property.readFrom (dictionary: inDictionary, forKey:"radius")
  //--- Atomic property: startAngle
    self.startAngle_property.readFrom (dictionary: inDictionary, forKey:"startAngle")
  //--- Atomic property: arcAngle
    self.arcAngle_property.readFrom (dictionary: inDictionary, forKey:"arcAngle")
  //--- Atomic property: startTangent
    self.startTangent_property.readFrom (dictionary: inDictionary, forKey:"startTangent")
  //--- Atomic property: endTangent
    self.endTangent_property.readFrom (dictionary: inDictionary, forKey:"endTangent")
  //--- Atomic property: pathIsClosed
    self.pathIsClosed_property.readFrom (dictionary: inDictionary, forKey:"pathIsClosed")
  //--- Atomic property: xCenterUnit
    self.xCenterUnit_property.readFrom (dictionary: inDictionary, forKey:"xCenterUnit")
  //--- Atomic property: yCenterUnit
    self.yCenterUnit_property.readFrom (dictionary: inDictionary, forKey:"yCenterUnit")
  //--- Atomic property: radiusUnit
    self.radiusUnit_property.readFrom (dictionary: inDictionary, forKey:"radiusUnit")
  //--- Atomic property: startTangentUnit
    self.startTangentUnit_property.readFrom (dictionary: inDictionary, forKey:"startTangentUnit")
  //--- Atomic property: endTangentUnit
    self.endTangentUnit_property.readFrom (dictionary: inDictionary, forKey:"endTangentUnit")
  //--- Atomic property: xCenter
    self.xCenter_property.readFrom (dictionary: inDictionary, forKey:"xCenter")
  }

  //····················································································································
  //   accessibleObjects
  //····················································································································

  override func accessibleObjects (objects : inout [EBManagedObject]) {
    super.accessibleObjects (objects: &objects)
  }

  //····················································································································
  //   accessibleObjectsForSaveOperation
  //····················································································································

  override func accessibleObjectsForSaveOperation (objects : inout [EBManagedObject]) {
    super.accessibleObjectsForSaveOperation (objects: &objects)
  }

  //····················································································································
  //   computeSignature
  //····················································································································

  override func computeSignature () -> UInt32 {
    var crc = super.computeSignature ()
    crc.accumulateUInt32 (self.arcAngle_property.signature ())
    crc.accumulateUInt32 (self.endTangent_property.signature ())
    crc.accumulateUInt32 (self.endTangentUnit_property.signature ())
    crc.accumulateUInt32 (self.pathIsClosed_property.signature ())
    crc.accumulateUInt32 (self.radius_property.signature ())
    crc.accumulateUInt32 (self.radiusUnit_property.signature ())
    crc.accumulateUInt32 (self.startAngle_property.signature ())
    crc.accumulateUInt32 (self.startTangent_property.signature ())
    crc.accumulateUInt32 (self.startTangentUnit_property.signature ())
    crc.accumulateUInt32 (self.xCenter_property.signature ())
    crc.accumulateUInt32 (self.xCenterUnit_property.signature ())
    crc.accumulateUInt32 (self.yCenter_property.signature ())
    crc.accumulateUInt32 (self.yCenterUnit_property.signature ())
    return crc
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyArrayOf_PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyArrayOf_PackageArc : ReadOnlyAbstractArrayProperty <PackageArc> {

  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <PackageArc>, addedSet inAddedSet : Set <PackageArc>) {
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
  //--- Remove observers from removed objects
    self.removeEBObserversOf_yCenter_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_radius_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_startAngle_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_arcAngle_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_startTangent_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_endTangent_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_pathIsClosed_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_xCenterUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_yCenterUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_radiusUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_startTangentUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_endTangentUnit_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_xCenter_fromElementsOfSet (inRemovedSet) // Stored property
    self.removeEBObserversOf_strokeBezierPath_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_objectDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_selectionDisplay_fromElementsOfSet (inRemovedSet) // Transient property
    self.removeEBObserversOf_issues_fromElementsOfSet (inRemovedSet) // Transient property
  //--- Add observers to added objects
    self.addEBObserversOf_yCenter_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_radius_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_startAngle_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_arcAngle_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_startTangent_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_endTangent_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_pathIsClosed_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_xCenterUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_yCenterUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_radiusUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_startTangentUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_endTangentUnit_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_xCenter_toElementsOfSet (inAddedSet) // Stored property
    self.addEBObserversOf_strokeBezierPath_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_objectDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_selectionDisplay_toElementsOfSet (inAddedSet) // Transient property
    self.addEBObserversOf_issues_toElementsOfSet (inAddedSet) // Transient property
  }

  //····················································································································
  //   Observers of 'yCenter' stored property
  //····················································································································

  private var mObserversOf_yCenter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yCenter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yCenter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yCenter_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_yCenter.apply { (_ observer : EBEvent) in
        managedObject.yCenter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yCenter_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_yCenter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yCenter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'radius' stored property
  //····················································································································

  private var mObserversOf_radius = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_radius (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_radius.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.radius_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_radius (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_radius.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.radius_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_radius_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_radius.apply { (_ observer : EBEvent) in
        managedObject.radius_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_radius_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_radius.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.radius_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'startAngle' stored property
  //····················································································································

  private var mObserversOf_startAngle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_startAngle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_startAngle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.startAngle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_startAngle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_startAngle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.startAngle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_startAngle_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_startAngle.apply { (_ observer : EBEvent) in
        managedObject.startAngle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_startAngle_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_startAngle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.startAngle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'arcAngle' stored property
  //····················································································································

  private var mObserversOf_arcAngle = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_arcAngle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_arcAngle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.arcAngle_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_arcAngle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_arcAngle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.arcAngle_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_arcAngle_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_arcAngle.apply { (_ observer : EBEvent) in
        managedObject.arcAngle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_arcAngle_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_arcAngle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.arcAngle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'startTangent' stored property
  //····················································································································

  private var mObserversOf_startTangent = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_startTangent (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_startTangent.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.startTangent_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_startTangent (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_startTangent.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.startTangent_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_startTangent_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_startTangent.apply { (_ observer : EBEvent) in
        managedObject.startTangent_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_startTangent_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_startTangent.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.startTangent_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'endTangent' stored property
  //····················································································································

  private var mObserversOf_endTangent = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_endTangent (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_endTangent.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.endTangent_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_endTangent (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_endTangent.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.endTangent_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_endTangent_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_endTangent.apply { (_ observer : EBEvent) in
        managedObject.endTangent_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_endTangent_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_endTangent.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.endTangent_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'pathIsClosed' stored property
  //····················································································································

  private var mObserversOf_pathIsClosed = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_pathIsClosed (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_pathIsClosed.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pathIsClosed_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_pathIsClosed (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_pathIsClosed.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.pathIsClosed_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_pathIsClosed_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_pathIsClosed.apply { (_ observer : EBEvent) in
        managedObject.pathIsClosed_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_pathIsClosed_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_pathIsClosed.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.pathIsClosed_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xCenterUnit' stored property
  //····················································································································

  private var mObserversOf_xCenterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xCenterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xCenterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xCenterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xCenterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xCenterUnit_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_xCenterUnit.apply { (_ observer : EBEvent) in
        managedObject.xCenterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xCenterUnit_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_xCenterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xCenterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yCenterUnit' stored property
  //····················································································································

  private var mObserversOf_yCenterUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_yCenterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yCenterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenterUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_yCenterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yCenterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.yCenterUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_yCenterUnit_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_yCenterUnit.apply { (_ observer : EBEvent) in
        managedObject.yCenterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yCenterUnit_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_yCenterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yCenterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'radiusUnit' stored property
  //····················································································································

  private var mObserversOf_radiusUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_radiusUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_radiusUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.radiusUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_radiusUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_radiusUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.radiusUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_radiusUnit_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_radiusUnit.apply { (_ observer : EBEvent) in
        managedObject.radiusUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_radiusUnit_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_radiusUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.radiusUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'startTangentUnit' stored property
  //····················································································································

  private var mObserversOf_startTangentUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_startTangentUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_startTangentUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.startTangentUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_startTangentUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_startTangentUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.startTangentUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_startTangentUnit_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_startTangentUnit.apply { (_ observer : EBEvent) in
        managedObject.startTangentUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_startTangentUnit_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_startTangentUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.startTangentUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'endTangentUnit' stored property
  //····················································································································

  private var mObserversOf_endTangentUnit = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_endTangentUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_endTangentUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.endTangentUnit_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_endTangentUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_endTangentUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.endTangentUnit_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_endTangentUnit_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_endTangentUnit.apply { (_ observer : EBEvent) in
        managedObject.endTangentUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_endTangentUnit_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_endTangentUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.endTangentUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xCenter' stored property
  //····················································································································

  private var mObserversOf_xCenter = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xCenter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenter_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xCenter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.xCenter_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_xCenter_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_xCenter.apply { (_ observer : EBEvent) in
        managedObject.xCenter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xCenter_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_xCenter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xCenter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'strokeBezierPath' transient property
  //····················································································································

  private var mObserversOf_strokeBezierPath = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_strokeBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_strokeBezierPath.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.strokeBezierPath_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_strokeBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_strokeBezierPath.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.strokeBezierPath_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_strokeBezierPath_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_strokeBezierPath.apply { (_ observer : EBEvent) in
        managedObject.strokeBezierPath_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_strokeBezierPath_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_strokeBezierPath.apply { (_ observer : EBEvent) in
        managedObject.strokeBezierPath_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.objectDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.selectionDisplay_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.addEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      for managedObject in v {
        managedObject.issues_property.removeEBObserver (inObserver)
      }
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOf PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOf_PackageArc : ReadOnlyArrayOf_PackageArc {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyArrayOf_PackageArc? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyArrayOf_PackageArc?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newArray : [PackageArc] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newArray = v
        self.mTransientKind = .single
       case .multiple :
        newArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newArray = []
      self.mTransientKind = .empty
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [PackageArc] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [PackageArc] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientArrayOfSuperOf PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientArrayOfSuperOf_PackageArc <SUPER : EBManagedObject> : ReadOnlyArrayOf_PackageArc {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyAbstractArrayProperty <SUPER>? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyAbstractArrayProperty <SUPER>?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    var newModelArray : [SUPER] 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newModelArray = []
        self.mTransientKind = .empty
      case .single (let v) :
        newModelArray = v
        self.mTransientKind = .single
       case .multiple :
        newModelArray = []
        self.mTransientKind = .multiple
      }
    }else{
      newModelArray = []
      self.mTransientKind = .empty
    }
    var newArray = [PackageArc] ()
    for superObject in newModelArray {
      if let object = superObject as? PackageArc {
        newArray.append (object)
      }
    }
    self.mInternalArrayValue = newArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < [PackageArc] > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      return .single (self.mInternalArrayValue)
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : [PackageArc] { return self.mInternalArrayValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship read write: PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteArrayOf_PackageArc : ReadOnlyArrayOf_PackageArc {

  //····················································································································
 
  func setProp (_ value :  [PackageArc]) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyArrayOf_PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyArrayOf_PackageArc : ReadWriteArrayOf_PackageArc {

  //····················································································································

  private var mModel : ReadWriteArrayOf_PackageArc? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteArrayOf_PackageArc?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModelArray : [PackageArc]
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModelArray = []
      case .single (let v) :
        newModelArray = v
       case .multiple :
        newModelArray = []
      }
    }else{
      newModelArray = []
    }
    self.mInternalArrayValue = newModelArray
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inArrayValue : [PackageArc]) {
    self.mModel?.setProp (inArrayValue)
  }

  //····················································································································

  override var prop : EBSelection < [PackageArc] > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : [PackageArc] {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return []
      case .single (let v) :
        return v
      }
    }else{
      return []
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    To many relationship: PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredArrayOf_PackageArc : ReadWriteArrayOf_PackageArc, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PackageArc) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PackageArc) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackageArc) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PackageArc) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  private var mPrefKey : String? = nil

  //····················································································································

  var mValueExplorer : NSPopUpButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToManyRelationshipDisplay (objectArray: v, popUpButton: unwrappedExplorer)
        }
      }
    }
  }

  //····················································································································
  //  Init
  //····················································································································

  convenience init (prefKey : String) {
    self.init ()
    self.mPrefKey = prefKey
    if let array = UserDefaults.standard.array (forKey: prefKey) as? [NSDictionary] {
      var objectArray = [PackageArc] ()
      for dictionary in array {
        if let object = newInstanceOfEntityNamed (self.ebUndoManager, "PackageArc") as? PackageArc {
          object.setUpAtomicPropertiesWithDictionary (dictionary)
          objectArray.append (object)
        }
      }
      self.setProp (objectArray)
    }
  }

  //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : [PackageArc]) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : [PackageArc]) {
    self.mInternalArrayValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToManyRelationshipDisplay (objectArray: self.mInternalArrayValue, popUpButton: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //--- Write in preferences ?
    self.writeInPreferences ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································
  // Update observers 
  //····················································································································

  internal override func updateObservers (removedSet inRemovedSet : Set <PackageArc>, addedSet inAddedSet : Set <PackageArc>) {
    for managedObject in inRemovedSet {
      managedObject.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (managedObject)
    }
  //---
    for managedObject in inAddedSet {
      managedObject.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (managedObject)
    }
  //---
    super.updateObservers (removedSet: inRemovedSet, addedSet: inAddedSet)
 }
 
  //····················································································································

  override var prop : EBSelection < [PackageArc] > { return .single (self.mInternalArrayValue) }

  //····················································································································

  override func setProp (_ inValue : [PackageArc]) { self.mInternalArrayValue = inValue }

  //····················································································································

  override var propval : [PackageArc] { return self.mInternalArrayValue }

  //····················································································································

  private func writeInPreferences () {
    if let prefKey = self.mPrefKey {
      var dictionaryArray = [NSDictionary] ()
      for object in self.mInternalArrayValue {
        let d = NSMutableDictionary ()
        object.saveIntoDictionary (d)
        d [ENTITY_KEY] = nil // Remove entity key, not used in preferences
        dictionaryArray.append (d)
      }
      UserDefaults.standard.set (dictionaryArray, forKey: prefKey)
    }
  }

  //····················································································································

  func remove (_ object : PackageArc) {
    if let idx = self.mInternalArrayValue.firstIndex (of: object) {
      self.mInternalArrayValue.remove (at: idx)
    }
  }
  
  //····················································································································

  func add (_ object : PackageArc) {
    if !self.internalSetValue.contains (object) {
      self.mInternalArrayValue.append (object)
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    for object in self.mInternalArrayValue {
      object.setSignatureObserver (observer: observer)
    }
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    for object in self.mInternalArrayValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadOnlyObject_PackageArc 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadOnlyObject_PackageArc : ReadOnlyAbstractObjectProperty <PackageArc> {

  //····················································································································

  internal override func notifyModelDidChangeFrom (oldValue inOldValue : PackageArc?) {
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  //--- Remove observers from removed objects
    inOldValue?.yCenter_property.removeEBObserversFrom (&self.mObserversOf_yCenter) // Stored property
    inOldValue?.radius_property.removeEBObserversFrom (&self.mObserversOf_radius) // Stored property
    inOldValue?.startAngle_property.removeEBObserversFrom (&self.mObserversOf_startAngle) // Stored property
    inOldValue?.arcAngle_property.removeEBObserversFrom (&self.mObserversOf_arcAngle) // Stored property
    inOldValue?.startTangent_property.removeEBObserversFrom (&self.mObserversOf_startTangent) // Stored property
    inOldValue?.endTangent_property.removeEBObserversFrom (&self.mObserversOf_endTangent) // Stored property
    inOldValue?.pathIsClosed_property.removeEBObserversFrom (&self.mObserversOf_pathIsClosed) // Stored property
    inOldValue?.xCenterUnit_property.removeEBObserversFrom (&self.mObserversOf_xCenterUnit) // Stored property
    inOldValue?.yCenterUnit_property.removeEBObserversFrom (&self.mObserversOf_yCenterUnit) // Stored property
    inOldValue?.radiusUnit_property.removeEBObserversFrom (&self.mObserversOf_radiusUnit) // Stored property
    inOldValue?.startTangentUnit_property.removeEBObserversFrom (&self.mObserversOf_startTangentUnit) // Stored property
    inOldValue?.endTangentUnit_property.removeEBObserversFrom (&self.mObserversOf_endTangentUnit) // Stored property
    inOldValue?.xCenter_property.removeEBObserversFrom (&self.mObserversOf_xCenter) // Stored property
    inOldValue?.strokeBezierPath_property.removeEBObserversFrom (&self.mObserversOf_strokeBezierPath) // Transient property
    inOldValue?.objectDisplay_property.removeEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
    inOldValue?.selectionDisplay_property.removeEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
    inOldValue?.issues_property.removeEBObserversFrom (&self.mObserversOf_issues) // Transient property
  //--- Add observers to added objects
    self.mInternalValue?.yCenter_property.addEBObserversFrom (&self.mObserversOf_yCenter) // Stored property
    self.mInternalValue?.radius_property.addEBObserversFrom (&self.mObserversOf_radius) // Stored property
    self.mInternalValue?.startAngle_property.addEBObserversFrom (&self.mObserversOf_startAngle) // Stored property
    self.mInternalValue?.arcAngle_property.addEBObserversFrom (&self.mObserversOf_arcAngle) // Stored property
    self.mInternalValue?.startTangent_property.addEBObserversFrom (&self.mObserversOf_startTangent) // Stored property
    self.mInternalValue?.endTangent_property.addEBObserversFrom (&self.mObserversOf_endTangent) // Stored property
    self.mInternalValue?.pathIsClosed_property.addEBObserversFrom (&self.mObserversOf_pathIsClosed) // Stored property
    self.mInternalValue?.xCenterUnit_property.addEBObserversFrom (&self.mObserversOf_xCenterUnit) // Stored property
    self.mInternalValue?.yCenterUnit_property.addEBObserversFrom (&self.mObserversOf_yCenterUnit) // Stored property
    self.mInternalValue?.radiusUnit_property.addEBObserversFrom (&self.mObserversOf_radiusUnit) // Stored property
    self.mInternalValue?.startTangentUnit_property.addEBObserversFrom (&self.mObserversOf_startTangentUnit) // Stored property
    self.mInternalValue?.endTangentUnit_property.addEBObserversFrom (&self.mObserversOf_endTangentUnit) // Stored property
    self.mInternalValue?.xCenter_property.addEBObserversFrom (&self.mObserversOf_xCenter) // Stored property
    self.mInternalValue?.strokeBezierPath_property.addEBObserversFrom (&self.mObserversOf_strokeBezierPath) // Transient property
    self.mInternalValue?.objectDisplay_property.addEBObserversFrom (&self.mObserversOf_objectDisplay) // Transient property
    self.mInternalValue?.selectionDisplay_property.addEBObserversFrom (&self.mObserversOf_selectionDisplay) // Transient property
    self.mInternalValue?.issues_property.addEBObserversFrom (&self.mObserversOf_issues) // Transient property
  }

  //····················································································································
  //   Observers of 'yCenter' stored property
  //····················································································································

  private var mObserversOf_yCenter = EBWeakEventSet ()

  //····················································································································

  var yCenter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.yCenter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yCenter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.yCenter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_yCenter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yCenter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.yCenter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_yCenter_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_yCenter.apply { (_ observer : EBEvent) in
        managedObject.yCenter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yCenter_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_yCenter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yCenter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'radius' stored property
  //····················································································································

  private var mObserversOf_radius = EBWeakEventSet ()

  //····················································································································

  var radius_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.radius_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_radius (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_radius.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.radius_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_radius (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_radius.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.radius_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_radius_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_radius.apply { (_ observer : EBEvent) in
        managedObject.radius_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_radius_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_radius.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.radius_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'startAngle' stored property
  //····················································································································

  private var mObserversOf_startAngle = EBWeakEventSet ()

  //····················································································································

  var startAngle_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.startAngle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_startAngle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_startAngle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.startAngle_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_startAngle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_startAngle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.startAngle_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_startAngle_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_startAngle.apply { (_ observer : EBEvent) in
        managedObject.startAngle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_startAngle_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_startAngle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.startAngle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'arcAngle' stored property
  //····················································································································

  private var mObserversOf_arcAngle = EBWeakEventSet ()

  //····················································································································

  var arcAngle_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.arcAngle_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_arcAngle (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_arcAngle.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.arcAngle_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_arcAngle (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_arcAngle.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.arcAngle_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_arcAngle_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_arcAngle.apply { (_ observer : EBEvent) in
        managedObject.arcAngle_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_arcAngle_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_arcAngle.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.arcAngle_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'startTangent' stored property
  //····················································································································

  private var mObserversOf_startTangent = EBWeakEventSet ()

  //····················································································································

  var startTangent_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.startTangent_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_startTangent (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_startTangent.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.startTangent_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_startTangent (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_startTangent.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.startTangent_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_startTangent_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_startTangent.apply { (_ observer : EBEvent) in
        managedObject.startTangent_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_startTangent_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_startTangent.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.startTangent_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'endTangent' stored property
  //····················································································································

  private var mObserversOf_endTangent = EBWeakEventSet ()

  //····················································································································

  var endTangent_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.endTangent_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_endTangent (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_endTangent.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.endTangent_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_endTangent (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_endTangent.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.endTangent_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_endTangent_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_endTangent.apply { (_ observer : EBEvent) in
        managedObject.endTangent_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_endTangent_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_endTangent.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.endTangent_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'pathIsClosed' stored property
  //····················································································································

  private var mObserversOf_pathIsClosed = EBWeakEventSet ()

  //····················································································································

  var pathIsClosed_property_selection : EBSelection <Bool?> {
    if let model = self.propval {
      switch (model.pathIsClosed_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_pathIsClosed (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_pathIsClosed.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.pathIsClosed_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_pathIsClosed (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_pathIsClosed.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.pathIsClosed_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_pathIsClosed_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_pathIsClosed.apply { (_ observer : EBEvent) in
        managedObject.pathIsClosed_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_pathIsClosed_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_pathIsClosed.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.pathIsClosed_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xCenterUnit' stored property
  //····················································································································

  private var mObserversOf_xCenterUnit = EBWeakEventSet ()

  //····················································································································

  var xCenterUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.xCenterUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_xCenterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xCenterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.xCenterUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_xCenterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xCenterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.xCenterUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_xCenterUnit_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_xCenterUnit.apply { (_ observer : EBEvent) in
        managedObject.xCenterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xCenterUnit_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_xCenterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xCenterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'yCenterUnit' stored property
  //····················································································································

  private var mObserversOf_yCenterUnit = EBWeakEventSet ()

  //····················································································································

  var yCenterUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.yCenterUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_yCenterUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_yCenterUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.yCenterUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_yCenterUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_yCenterUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.yCenterUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_yCenterUnit_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_yCenterUnit.apply { (_ observer : EBEvent) in
        managedObject.yCenterUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_yCenterUnit_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_yCenterUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.yCenterUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'radiusUnit' stored property
  //····················································································································

  private var mObserversOf_radiusUnit = EBWeakEventSet ()

  //····················································································································

  var radiusUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.radiusUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_radiusUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_radiusUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.radiusUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_radiusUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_radiusUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.radiusUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_radiusUnit_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_radiusUnit.apply { (_ observer : EBEvent) in
        managedObject.radiusUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_radiusUnit_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_radiusUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.radiusUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'startTangentUnit' stored property
  //····················································································································

  private var mObserversOf_startTangentUnit = EBWeakEventSet ()

  //····················································································································

  var startTangentUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.startTangentUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_startTangentUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_startTangentUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.startTangentUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_startTangentUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_startTangentUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.startTangentUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_startTangentUnit_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_startTangentUnit.apply { (_ observer : EBEvent) in
        managedObject.startTangentUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_startTangentUnit_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_startTangentUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.startTangentUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'endTangentUnit' stored property
  //····················································································································

  private var mObserversOf_endTangentUnit = EBWeakEventSet ()

  //····················································································································

  var endTangentUnit_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.endTangentUnit_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_endTangentUnit (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_endTangentUnit.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.endTangentUnit_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_endTangentUnit (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_endTangentUnit.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.endTangentUnit_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_endTangentUnit_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_endTangentUnit.apply { (_ observer : EBEvent) in
        managedObject.endTangentUnit_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_endTangentUnit_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_endTangentUnit.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.endTangentUnit_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'xCenter' stored property
  //····················································································································

  private var mObserversOf_xCenter = EBWeakEventSet ()

  //····················································································································

  var xCenter_property_selection : EBSelection <Int?> {
    if let model = self.propval {
      switch (model.xCenter_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_xCenter.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
       v?.xCenter_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_xCenter (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_xCenter.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.xCenter_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_xCenter_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_xCenter.apply { (_ observer : EBEvent) in
        managedObject.xCenter_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_xCenter_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    self.mObserversOf_xCenter.apply { (_ observer : EBEvent) in
      observer.postEvent ()
      for managedObject in inSet {
        managedObject.xCenter_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'strokeBezierPath' transient property
  //····················································································································

  private var mObserversOf_strokeBezierPath = EBWeakEventSet ()

  //····················································································································

  var strokeBezierPath_property_selection : EBSelection <NSBezierPath?> {
    if let model = self.propval {
      switch (model.strokeBezierPath_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_strokeBezierPath (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_strokeBezierPath.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.strokeBezierPath_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_strokeBezierPath (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_strokeBezierPath.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.strokeBezierPath_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_strokeBezierPath_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_strokeBezierPath.apply { (_ observer : EBEvent) in
        managedObject.strokeBezierPath_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_strokeBezierPath_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_strokeBezierPath.apply { (_ observer : EBEvent) in
        managedObject.strokeBezierPath_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'objectDisplay' transient property
  //····················································································································

  private var mObserversOf_objectDisplay = EBWeakEventSet ()

  //····················································································································

  var objectDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.objectDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_objectDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_objectDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_objectDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.objectDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_objectDisplay_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_objectDisplay_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_objectDisplay.apply { (_ observer : EBEvent) in
        managedObject.objectDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'selectionDisplay' transient property
  //····················································································································

  private var mObserversOf_selectionDisplay = EBWeakEventSet ()

  //····················································································································

  var selectionDisplay_property_selection : EBSelection <EBShape?> {
    if let model = self.propval {
      switch (model.selectionDisplay_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_selectionDisplay (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_selectionDisplay.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.selectionDisplay_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_selectionDisplay_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_selectionDisplay_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_selectionDisplay.apply { (_ observer : EBEvent) in
        managedObject.selectionDisplay_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································
  //   Observers of 'issues' transient property
  //····················································································································

  private var mObserversOf_issues = EBWeakEventSet ()

  //····················································································································

  var issues_property_selection : EBSelection <CanariIssueArray?> {
    if let model = self.propval {
      switch (model.issues_property_selection) {
      case .empty :
        return .empty
      case .multiple :
        return .multiple
      case .single (let v) :
        return .single (v)
      }
    }else{
      return .single (nil)
    }
  }

  //····················································································································

  final func addEBObserverOf_issues (_ inObserver : EBEvent) {
    self.addEBObserver (inObserver)
    self.mObserversOf_issues.insert (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.addEBObserver (inObserver)
    }
  }

  //····················································································································

  final func removeEBObserverOf_issues (_ inObserver : EBEvent) {
    self.removeEBObserver (inObserver)
    self.mObserversOf_issues.remove (inObserver)
    switch prop {
    case .empty, .multiple :
      break
    case .single (let v) :
      v?.issues_property.removeEBObserver (inObserver)
    }
  }

  //····················································································································

  final func addEBObserversOf_issues_toElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.addEBObserver (observer)
      }
    }
  }

  //····················································································································

  final func removeEBObserversOf_issues_fromElementsOfSet (_ inSet : Set<PackageArc>) {
    for managedObject in inSet {
      self.mObserversOf_issues.apply { (_ observer : EBEvent) in
        managedObject.issues_property.removeEBObserver (observer)
      }
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    TransientObject PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class TransientObject_PackageArc : ReadOnlyObject_PackageArc {

  //····················································································································
  //   Data provider
  //····················································································································

  private var mDataProvider : ReadOnlyObject_PackageArc? = nil
  private var mTransientKind : PropertyKind = .empty

  //····················································································································

  func setDataProvider (_ inProvider : ReadOnlyObject_PackageArc?) {
    if self.mDataProvider !== inProvider {
      self.mDataProvider?.detachClient (self)
      self.mDataProvider = inProvider
      self.mDataProvider?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newObject : PackageArc? 
    if let dataProvider = self.mDataProvider {
      switch dataProvider.prop {
      case .empty :
        newObject = nil
        self.mTransientKind = .empty
      case .single (let v) :
        newObject = v
        self.mTransientKind = .single
       case .multiple :
        newObject = nil
        self.mTransientKind = .empty
      }
    }else{
      newObject = nil
      self.mTransientKind = .empty
    }
    self.mInternalValue = newObject
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < PackageArc? > {
    switch self.mTransientKind {
    case .empty :
      return .empty
    case .single :
      if let internalValue = self.mInternalValue {
        return .single (internalValue)
      }else{
        return .empty
      }
    case .multiple :
      return .multiple
    }
  }

  //····················································································································

  override var propval : PackageArc? { return self.mInternalValue }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    ReadWriteObject_PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class ReadWriteObject_PackageArc : ReadOnlyObject_PackageArc {

  //····················································································································
 
  func setProp (_ inValue : PackageArc?) { } // Abstract method
  
  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    Proxy: ProxyObject_PackageArc
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class ProxyObject_PackageArc : ReadWriteObject_PackageArc {

  //····················································································································

  private var mModel : ReadWriteObject_PackageArc? = nil

  //····················································································································

  func setModel (_ inModel : ReadWriteObject_PackageArc?) {
    if self.mModel !== inModel {
      self.mModel?.detachClient (self)
      self.mModel = inModel
      self.mModel?.attachClient (self)
    }
  }

  //····················································································································

  override func notifyModelDidChange () {
    let newModel : PackageArc?
    if let model = self.mModel {
      switch model.prop {
      case .empty :
        newModel = nil
      case .single (let v) :
        newModel = v
       case .multiple :
        newModel = nil
      }
    }else{
      newModel = nil
    }
    self.mInternalValue = newModel
    super.notifyModelDidChange ()
  }

  //····················································································································

  override func setProp (_ inValue : PackageArc?) {
    self.mModel?.setProp (inValue)
  }

  //····················································································································

  override var prop : EBSelection < PackageArc? > {
    if let model = self.mModel {
      return model.prop
    }else{
      return .empty
    }
  }

  //····················································································································

  override var propval : PackageArc? {
    if let model = self.mModel {
      switch model.prop {
      case .empty, .multiple :
        return nil
      case .single (let v) :
        return v
      }
    }else{
      return nil
    }
  }

  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    StoredObject_PackageArc 
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class StoredObject_PackageArc : ReadWriteObject_PackageArc, EBSignatureObserverProtocol {

  //····················································································································
  //   Opposite relationship management
  //····················································································································

  private var mSetOppositeRelationship : Optional < (_ inManagedObject : PackageArc) -> Void > = nil
  private var mResetOppositeRelationship : Optional < (_ inManagedObject : PackageArc) -> Void > = nil

  //····················································································································

  func setOppositeRelationShipFunctions (setter inSetter : @escaping (_ inManagedObject : PackageArc) -> Void,
                                         resetter inResetter : @escaping (_ inManagedObject : PackageArc) -> Void) {
    self.mSetOppositeRelationship = inSetter
    self.mResetOppositeRelationship = inResetter
  }
  
  //····················································································································

  var mValueExplorer : NSButton? {
    didSet {
      if let unwrappedExplorer = self.mValueExplorer {
        switch self.prop {
        case .empty, .multiple :
          break ;
        case .single (let v) :
          updateManagedObjectToOneRelationshipDisplay (object: v, button: unwrappedExplorer)
        }
      }
    }
  }

 //····················································································································
  // Model will change 
  //····················································································································

  override func notifyModelDidChangeFrom (oldValue inOldValue : PackageArc?) {
  //--- Register old value in undo manager
    self.ebUndoManager?.registerUndo (withTarget: self, selector:#selector(performUndo(_:)), object: inOldValue)
  //---
    if let object = inOldValue {
      object.setSignatureObserver (observer: nil)
      self.mResetOppositeRelationship? (object)
    }
  //---
    if let object = self.mInternalValue {
      object.setSignatureObserver (observer: self)
      self.mSetOppositeRelationship? (object)
    }
  //---
    super.notifyModelDidChangeFrom (oldValue: inOldValue)
  }
 
  //····················································································································

  @objc func performUndo (_ oldValue : PackageArc?) {
    self.mInternalValue = oldValue
  }
 
  //····················································································································
  // Model did change 
  //····················································································································

  override func notifyModelDidChange () {
  //--- Update explorer
    if let valueExplorer = self.mValueExplorer {
      updateManagedObjectToOneRelationshipDisplay (object: self.mInternalValue, button: valueExplorer)
    }
  //--- Notify observers
    self.postEvent ()
    self.clearSignatureCache ()
  //---
    super.notifyModelDidChange ()
  }

  //····················································································································

  override var prop : EBSelection < PackageArc? > {
    if let object = self.mInternalValue {
      return .single (object)
    }else{
      return .empty
    }
  }

  //····················································································································

  override func setProp (_ inValue : PackageArc?) { self.mInternalValue = inValue }

  //····················································································································

  override var propval : PackageArc? { return self.mInternalValue }

  //····················································································································

  func remove (_ object : PackageArc) {
    if object === self.mInternalValue {
      self.mInternalValue = nil
    }
  }
  
  //····················································································································

  func add (_ object : PackageArc) {
    if object !== self.mInternalValue {
      self.mInternalValue = object
    }
  }
  
  //····················································································································
  //   signature
  //····················································································································

  private weak var mSignatureObserver : EBSignatureObserverProtocol? = nil // SOULD BE WEAK

  //····················································································································

  private var mSignatureCache : UInt32? = nil

  //····················································································································

  final func setSignatureObserver (observer : EBSignatureObserverProtocol?) {
    self.mSignatureObserver = observer
    self.mInternalValue?.setSignatureObserver (observer: observer)
  }

  //····················································································································

  final func signature () -> UInt32 {
    let computedSignature : UInt32
    if let s = self.mSignatureCache {
      computedSignature = s
    }else{
      computedSignature = computeSignature ()
      self.mSignatureCache = computedSignature
    }
    return computedSignature
  }
  
  //····················································································································

  final func computeSignature () -> UInt32 {
    var crc : UInt32 = 0
    if let object = self.mInternalValue {
      crc.accumulateUInt32 (object.signature ())
    }
    return crc
  }

  //····················································································································

  final func clearSignatureCache () {
    if self.mSignatureCache != nil {
      self.mSignatureCache = nil
      self.mSignatureObserver?.clearSignatureCache ()
    }
  }

  //····················································································································
 
}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

