//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    SelectionController_PackageDocument_mPackageSegmentSelectionController                                           *
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

@objc(SelectionController_PackageDocument_mPackageSegmentSelectionController)
final class SelectionController_PackageDocument_mPackageSegmentSelectionController : EBObject {

  //····················································································································
  //   Selection observable property: issues
  //····················································································································

  var issues_property = EBTransientProperty_CanariIssueArray ()

  var issues_property_selection : EBSelection <CanariIssueArray> {
    get {
      return self.issues_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: lengthInCanariUnit
  //····················································································································

  var lengthInCanariUnit_property = EBTransientProperty_Int ()

  var lengthInCanariUnit_property_selection : EBSelection <Int> {
    get {
      return self.lengthInCanariUnit_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: lengthUnit
  //····················································································································

  var lengthUnit_property = EBPropertyProxy_Int ()

  var lengthUnit_property_selection : EBSelection <Int> {
    get {
      return self.lengthUnit_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: objectDisplay
  //····················································································································

  var objectDisplay_property = EBTransientProperty_EBShape ()

  var objectDisplay_property_selection : EBSelection <EBShape> {
    get {
      return self.objectDisplay_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: selectionDisplay
  //····················································································································

  var selectionDisplay_property = EBTransientProperty_EBShape ()

  var selectionDisplay_property_selection : EBSelection <EBShape> {
    get {
      return self.selectionDisplay_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: x1
  //····················································································································

  var x1_property = EBPropertyProxy_Int ()

  var x1_property_selection : EBSelection <Int> {
    get {
      return self.x1_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: x1Unit
  //····················································································································

  var x1Unit_property = EBPropertyProxy_Int ()

  var x1Unit_property_selection : EBSelection <Int> {
    get {
      return self.x1Unit_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: x2
  //····················································································································

  var x2_property = EBPropertyProxy_Int ()

  var x2_property_selection : EBSelection <Int> {
    get {
      return self.x2_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: x2Unit
  //····················································································································

  var x2Unit_property = EBPropertyProxy_Int ()

  var x2Unit_property_selection : EBSelection <Int> {
    get {
      return self.x2Unit_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: y1
  //····················································································································

  var y1_property = EBPropertyProxy_Int ()

  var y1_property_selection : EBSelection <Int> {
    get {
      return self.y1_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: y1Unit
  //····················································································································

  var y1Unit_property = EBPropertyProxy_Int ()

  var y1Unit_property_selection : EBSelection <Int> {
    get {
      return self.y1Unit_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: y2
  //····················································································································

  var y2_property = EBPropertyProxy_Int ()

  var y2_property_selection : EBSelection <Int> {
    get {
      return self.y2_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: y2Unit
  //····················································································································

  var y2Unit_property = EBPropertyProxy_Int ()

  var y2Unit_property_selection : EBSelection <Int> {
    get {
      return self.y2Unit_property.prop
    }
  }

  //····················································································································
  //   BIND SELECTION
  //····················································································································

   private var mModel : ReadOnlyArrayOf_PackageObject? = nil
   private var mActualModel = TransientArrayOf_PackageSegment ()

  //····················································································································

  func bind_selection (model : ReadOnlyArrayOf_PackageObject, file : String, line : Int) {
    self.mModel = model
    self.mActualModel.readModelFunction = { [weak self] () -> EBSelection < [PackageSegment] > in
      if let model = self?.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = [PackageSegment] ()
          for baseObject in v {
            if let object = baseObject as? PackageSegment {
              s.append (object)
            }
          }
          return .single (s)
        }
      }else{
        return .empty
      }
    }
    model.addEBObserver (self.mActualModel)
    self.bind_property_issues (model: self.mActualModel)
    self.bind_property_lengthInCanariUnit (model: self.mActualModel)
    self.bind_property_lengthUnit (model: self.mActualModel)
    self.bind_property_objectDisplay (model: self.mActualModel)
    self.bind_property_selectionDisplay (model: self.mActualModel)
    self.bind_property_x1 (model: self.mActualModel)
    self.bind_property_x1Unit (model: self.mActualModel)
    self.bind_property_x2 (model: self.mActualModel)
    self.bind_property_x2Unit (model: self.mActualModel)
    self.bind_property_y1 (model: self.mActualModel)
    self.bind_property_y1Unit (model: self.mActualModel)
    self.bind_property_y2 (model: self.mActualModel)
    self.bind_property_y2Unit (model: self.mActualModel)
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  func unbind_selection () {
    self.mModel?.removeEBObserver (self.mActualModel)
    self.mActualModel.readModelFunction = nil
  //--- issues
    self.issues_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_issues (self.issues_property)
  //--- lengthInCanariUnit
    self.lengthInCanariUnit_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_lengthInCanariUnit (self.lengthInCanariUnit_property)
  //--- lengthUnit
    self.lengthUnit_property.readModelFunction = nil 
    self.lengthUnit_property.writeModelFunction = nil 
    self.lengthUnit_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_lengthUnit (self.lengthUnit_property)
  //--- objectDisplay
    self.objectDisplay_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_objectDisplay (self.objectDisplay_property)
  //--- selectionDisplay
    self.selectionDisplay_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_selectionDisplay (self.selectionDisplay_property)
  //--- x1
    self.x1_property.readModelFunction = nil 
    self.x1_property.writeModelFunction = nil 
    self.x1_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_x1 (self.x1_property)
  //--- x1Unit
    self.x1Unit_property.readModelFunction = nil 
    self.x1Unit_property.writeModelFunction = nil 
    self.x1Unit_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_x1Unit (self.x1Unit_property)
  //--- x2
    self.x2_property.readModelFunction = nil 
    self.x2_property.writeModelFunction = nil 
    self.x2_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_x2 (self.x2_property)
  //--- x2Unit
    self.x2Unit_property.readModelFunction = nil 
    self.x2Unit_property.writeModelFunction = nil 
    self.x2Unit_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_x2Unit (self.x2Unit_property)
  //--- y1
    self.y1_property.readModelFunction = nil 
    self.y1_property.writeModelFunction = nil 
    self.y1_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_y1 (self.y1_property)
  //--- y1Unit
    self.y1Unit_property.readModelFunction = nil 
    self.y1Unit_property.writeModelFunction = nil 
    self.y1Unit_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_y1Unit (self.y1Unit_property)
  //--- y2
    self.y2_property.readModelFunction = nil 
    self.y2_property.writeModelFunction = nil 
    self.y2_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_y2 (self.y2_property)
  //--- y2Unit
    self.y2Unit_property.readModelFunction = nil 
    self.y2Unit_property.writeModelFunction = nil 
    self.y2Unit_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_y2Unit (self.y2Unit_property)
  //---
    self.mModel = nil    
  }

  //····················································································································
  //    Explorer
  //····················································································································

  private var mValueExplorer : NSButton?
  private var mExplorerWindow : NSWindow?

  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
    let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
    let tf = NSTextField (frame:secondColumn (y))
    tf.isEnabled = true
    tf.isEditable = false
    tf.stringValue = name
    tf.font = font
    view.addSubview (tf)
    let valueExplorer = NSButton (frame:thirdColumn (y))
    valueExplorer.font = font
    valueExplorer.title = explorerIndexString (mEasyBindingsObjectIndex) + className
    valueExplorer.target = self
    valueExplorer.action = #selector(SelectionController_PackageDocument_mPackageSegmentSelectionController.showObjectWindowFromExplorerButton(_:))
    view.addSubview (valueExplorer)
    self.mValueExplorer = valueExplorer
    y += EXPLORER_ROW_HEIGHT
  }
  
  //····················································································································

  func buildExplorerWindow () {
  //-------------------------------------------------- Create Window
    let r = NSRect (x:20.0, y:20.0, width:10.0, height:10.0)
    self.mExplorerWindow = NSWindow (contentRect: r, styleMask: [.titled, .closable], backing: .buffered, defer: true, screen: nil)
  //-------------------------------------------------- Adding properties
    let view = NSView (frame:r)
    var y : CGFloat = 0.0
    createEntryForPropertyNamed (
      "lengthUnit",
      idx:self.lengthUnit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.lengthUnit_property.mObserverExplorer,
      valueExplorer:&self.lengthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x1",
      idx:self.x1_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x1_property.mObserverExplorer,
      valueExplorer:&self.x1_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x1Unit",
      idx:self.x1Unit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x1Unit_property.mObserverExplorer,
      valueExplorer:&self.x1Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x2",
      idx:self.x2_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x2_property.mObserverExplorer,
      valueExplorer:&self.x2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "x2Unit",
      idx:self.x2Unit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.x2Unit_property.mObserverExplorer,
      valueExplorer:&self.x2Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y1",
      idx:self.y1_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y1_property.mObserverExplorer,
      valueExplorer:&self.y1_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y1Unit",
      idx:self.y1Unit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y1Unit_property.mObserverExplorer,
      valueExplorer:&self.y1Unit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y2",
      idx:self.y2_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y2_property.mObserverExplorer,
      valueExplorer:&self.y2_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "y2Unit",
      idx:self.y2Unit_property.mEasyBindingsObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.y2Unit_property.mObserverExplorer,
      valueExplorer:&self.y2Unit_property.mValueExplorer
    )
  //-------------------------------------------------- Finish Window construction
  //--- Resize View
    let viewFrame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    view.frame = viewFrame
  //--- Set content size
    self.mExplorerWindow?.setContentSize (NSSize (width:EXPLORER_ROW_WIDTH + 16.0, height:fmin (600.0, y)))
  //--- Set close button as 'remove window' button
    let closeButton : NSButton? = self.mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton?.target = self
    closeButton?.action = #selector(SelectionController_PackageDocument_mPackageSegmentSelectionController.deleteSelectionControllerWindowAction(_:))
  //--- Set window title
    let windowTitle = explorerIndexString (mEasyBindingsObjectIndex) + className
    self.mExplorerWindow!.title = windowTitle
  //--- Add Scroll view
    let frame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    let sw = NSScrollView (frame:frame)
    sw.hasVerticalScroller = true
    sw.documentView = view
    self.mExplorerWindow!.contentView = sw
  }

  //····················································································································
  //   showObjectWindowFromExplorerButton
  //····················································································································

  @objc func showObjectWindowFromExplorerButton (_ : Any) {
    if self.mExplorerWindow == nil {
      self.buildExplorerWindow ()
    }
    self.mExplorerWindow?.makeKeyAndOrderFront(nil)
  }
  
  //····················································································································
  //   deleteSelectionControllerWindowAction
  //····················································································································

  @objc func deleteSelectionControllerWindowAction (_ : Any) {
    self.clearObjectExplorer ()
  }

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  func clearObjectExplorer () {
    if let closeButton = self.mExplorerWindow?.standardWindowButton (.closeButton) {
      closeButton.target = nil
    }
    self.mExplorerWindow?.orderOut (nil)
    self.mExplorerWindow = nil
  }

  //···················································································································*

  private final func bind_property_issues (model : ReadOnlyArrayOf_PackageSegment) {
    model.addEBObserverOf_issues (self.issues_property)
    self.issues_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CanariIssueArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.issues_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_lengthInCanariUnit (model : ReadOnlyArrayOf_PackageSegment) {
    model.addEBObserverOf_lengthInCanariUnit (self.lengthInCanariUnit_property)
    self.lengthInCanariUnit_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.lengthInCanariUnit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_lengthUnit (model : ReadOnlyArrayOf_PackageSegment) {
    model.addEBObserverOf_lengthUnit (self.lengthUnit_property)
    self.lengthUnit_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.lengthUnit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.lengthUnit_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.lengthUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.lengthUnit_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.lengthUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_objectDisplay (model : ReadOnlyArrayOf_PackageSegment) {
    model.addEBObserverOf_objectDisplay (self.objectDisplay_property)
    self.objectDisplay_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_selectionDisplay (model : ReadOnlyArrayOf_PackageSegment) {
    model.addEBObserverOf_selectionDisplay (self.selectionDisplay_property)
    self.selectionDisplay_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_x1 (model : ReadOnlyArrayOf_PackageSegment) {
    model.addEBObserverOf_x1 (self.x1_property)
    self.x1_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.x1_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.x1_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.x1_property.setProp (inValue)
          }
        }
      }
    }
    self.x1_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.x1_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_x1Unit (model : ReadOnlyArrayOf_PackageSegment) {
    model.addEBObserverOf_x1Unit (self.x1Unit_property)
    self.x1Unit_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.x1Unit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.x1Unit_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.x1Unit_property.setProp (inValue)
          }
        }
      }
    }
    self.x1Unit_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.x1Unit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_x2 (model : ReadOnlyArrayOf_PackageSegment) {
    model.addEBObserverOf_x2 (self.x2_property)
    self.x2_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.x2_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.x2_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.x2_property.setProp (inValue)
          }
        }
      }
    }
    self.x2_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.x2_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_x2Unit (model : ReadOnlyArrayOf_PackageSegment) {
    model.addEBObserverOf_x2Unit (self.x2Unit_property)
    self.x2Unit_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.x2Unit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.x2Unit_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.x2Unit_property.setProp (inValue)
          }
        }
      }
    }
    self.x2Unit_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.x2Unit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_y1 (model : ReadOnlyArrayOf_PackageSegment) {
    model.addEBObserverOf_y1 (self.y1_property)
    self.y1_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.y1_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.y1_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.y1_property.setProp (inValue)
          }
        }
      }
    }
    self.y1_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.y1_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_y1Unit (model : ReadOnlyArrayOf_PackageSegment) {
    model.addEBObserverOf_y1Unit (self.y1Unit_property)
    self.y1Unit_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.y1Unit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.y1Unit_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.y1Unit_property.setProp (inValue)
          }
        }
      }
    }
    self.y1Unit_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.y1Unit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_y2 (model : ReadOnlyArrayOf_PackageSegment) {
    model.addEBObserverOf_y2 (self.y2_property)
    self.y2_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.y2_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.y2_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.y2_property.setProp (inValue)
          }
        }
      }
    }
    self.y2_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.y2_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_y2Unit (model : ReadOnlyArrayOf_PackageSegment) {
    model.addEBObserverOf_y2Unit (self.y2Unit_property)
    self.y2Unit_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.y2Unit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.y2Unit_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.y2Unit_property.setProp (inValue)
          }
        }
      }
    }
    self.y2Unit_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.y2Unit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }



  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

