//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//  THIS FILE IS GENERATED BY EASY BINDINGS, DO NOT MODIFY IT
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

import Cocoa

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
//    SelectionController_PackageDocument_mPackagePadSelectionController                                               *
//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

final class SelectionController_PackageDocument_mPackagePadSelectionController : EBObject {

  //····················································································································
  //   Selection observable property: annularRing
  //····················································································································

  var annularRing_property = EBTransientProperty_Int ()

  var annularRing_property_selection : EBSelection <Int> {
    get {
      return self.annularRing_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: annularRingUnit
  //····················································································································

  var annularRingUnit_property = EBPropertyProxy_Int ()

  var annularRingUnit_property_selection : EBSelection <Int> {
    get {
      return self.annularRingUnit_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: backSideFilledBezierPath
  //····················································································································

  var backSideFilledBezierPath_property = EBTransientProperty_NSBezierPath ()

  var backSideFilledBezierPath_property_selection : EBSelection <NSBezierPath> {
    get {
      return self.backSideFilledBezierPath_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: frontSideFilledBezierPath
  //····················································································································

  var frontSideFilledBezierPath_property = EBTransientProperty_NSBezierPath ()

  var frontSideFilledBezierPath_property_selection : EBSelection <NSBezierPath> {
    get {
      return self.frontSideFilledBezierPath_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: height
  //····················································································································

  var height_property = EBPropertyProxy_Int ()

  var height_property_selection : EBSelection <Int> {
    get {
      return self.height_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: heightUnit
  //····················································································································

  var heightUnit_property = EBPropertyProxy_Int ()

  var heightUnit_property_selection : EBSelection <Int> {
    get {
      return self.heightUnit_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: holeDiameter
  //····················································································································

  var holeDiameter_property = EBPropertyProxy_Int ()

  var holeDiameter_property_selection : EBSelection <Int> {
    get {
      return self.holeDiameter_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: holeDiameterUnit
  //····················································································································

  var holeDiameterUnit_property = EBPropertyProxy_Int ()

  var holeDiameterUnit_property_selection : EBSelection <Int> {
    get {
      return self.holeDiameterUnit_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: issues
  //····················································································································

  var issues_property = EBTransientProperty_CanariIssueArray ()

  var issues_property_selection : EBSelection <CanariIssueArray> {
    get {
      return self.issues_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: noZone
  //····················································································································

  var noZone_property = EBTransientProperty_Bool ()

  var noZone_property_selection : EBSelection <Bool> {
    get {
      return self.noZone_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: objectDisplay
  //····················································································································

  var objectDisplay_property = EBTransientProperty_EBShape ()

  var objectDisplay_property_selection : EBSelection <EBShape> {
    get {
      return self.objectDisplay_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: padIsTraversing
  //····················································································································

  var padIsTraversing_property = EBTransientProperty_Bool ()

  var padIsTraversing_property_selection : EBSelection <Bool> {
    get {
      return self.padIsTraversing_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: padName
  //····················································································································

  var padName_property = EBTransientProperty_String ()

  var padName_property_selection : EBSelection <String> {
    get {
      return self.padName_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: padNumber
  //····················································································································

  var padNumber_property = EBPropertyProxy_Int ()

  var padNumber_property_selection : EBSelection <Int> {
    get {
      return self.padNumber_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: padNumberDisplay
  //····················································································································

  var padNumberDisplay_property = EBTransientProperty_EBShape ()

  var padNumberDisplay_property_selection : EBSelection <EBShape> {
    get {
      return self.padNumberDisplay_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: padShape
  //····················································································································

  var padShape_property = EBPropertyProxy_PadShape ()

  var padShape_property_selection : EBSelection <PadShape> {
    get {
      return self.padShape_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: padStyle
  //····················································································································

  var padStyle_property = EBPropertyProxy_PadStyle ()

  var padStyle_property_selection : EBSelection <PadStyle> {
    get {
      return self.padStyle_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: selectionDisplay
  //····················································································································

  var selectionDisplay_property = EBTransientProperty_EBShape ()

  var selectionDisplay_property_selection : EBSelection <EBShape> {
    get {
      return self.selectionDisplay_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: slavePadCount
  //····················································································································

  var slavePadCount_property = EBTransientProperty_Int ()

  var slavePadCount_property_selection : EBSelection <Int> {
    get {
      return self.slavePadCount_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: slaves
  //····················································································································

  //····················································································································
  //   Selection observable property: width
  //····················································································································

  var width_property = EBPropertyProxy_Int ()

  var width_property_selection : EBSelection <Int> {
    get {
      return self.width_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: widthUnit
  //····················································································································

  var widthUnit_property = EBPropertyProxy_Int ()

  var widthUnit_property_selection : EBSelection <Int> {
    get {
      return self.widthUnit_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: xCenter
  //····················································································································

  var xCenter_property = EBPropertyProxy_Int ()

  var xCenter_property_selection : EBSelection <Int> {
    get {
      return self.xCenter_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: xCenterUnit
  //····················································································································

  var xCenterUnit_property = EBPropertyProxy_Int ()

  var xCenterUnit_property_selection : EBSelection <Int> {
    get {
      return self.xCenterUnit_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: yCenter
  //····················································································································

  var yCenter_property = EBPropertyProxy_Int ()

  var yCenter_property_selection : EBSelection <Int> {
    get {
      return self.yCenter_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: yCenterUnit
  //····················································································································

  var yCenterUnit_property = EBPropertyProxy_Int ()

  var yCenterUnit_property_selection : EBSelection <Int> {
    get {
      return self.yCenterUnit_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: zone
  //····················································································································

  //····················································································································
  //   Selection observable property: zoneAllowsManualRenumbering
  //····················································································································

  var zoneAllowsManualRenumbering_property = EBTransientProperty_Bool ()

  var zoneAllowsManualRenumbering_property_selection : EBSelection <Bool> {
    get {
      return self.zoneAllowsManualRenumbering_property.prop
    }
  }

  //····················································································································
  //   Selection observable property: zoneName
  //····················································································································

  var zoneName_property = EBTransientProperty_String ()

  var zoneName_property_selection : EBSelection <String> {
    get {
      return self.zoneName_property.prop
    }
  }

  //····················································································································
  //   BIND SELECTION
  //····················································································································

   private var mModel : ReadOnlyArrayOf_PackageObject? = nil
   private var mActualModel = TransientArrayOf_PackagePad ()

  //····················································································································

  func bind_selection (model : ReadOnlyArrayOf_PackageObject, file : String, line : Int) {
    self.mModel = model
    self.mActualModel.readModelFunction = { [weak self] () -> EBSelection < [PackagePad] > in
      if let model = self?.mModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = [PackagePad] ()
          for baseObject in v {
            if let object = baseObject as? PackagePad {
              s.append (object)
            }
          }
          return .single (s)
        }
      }else{
        return .empty
      }
    }
    model.addEBObserver (self.mActualModel)
    self.bind_property_annularRing (model: self.mActualModel)
    self.bind_property_annularRingUnit (model: self.mActualModel)
    self.bind_property_backSideFilledBezierPath (model: self.mActualModel)
    self.bind_property_frontSideFilledBezierPath (model: self.mActualModel)
    self.bind_property_height (model: self.mActualModel)
    self.bind_property_heightUnit (model: self.mActualModel)
    self.bind_property_holeDiameter (model: self.mActualModel)
    self.bind_property_holeDiameterUnit (model: self.mActualModel)
    self.bind_property_issues (model: self.mActualModel)
    self.bind_property_noZone (model: self.mActualModel)
    self.bind_property_objectDisplay (model: self.mActualModel)
    self.bind_property_padIsTraversing (model: self.mActualModel)
    self.bind_property_padName (model: self.mActualModel)
    self.bind_property_padNumber (model: self.mActualModel)
    self.bind_property_padNumberDisplay (model: self.mActualModel)
    self.bind_property_padShape (model: self.mActualModel)
    self.bind_property_padStyle (model: self.mActualModel)
    self.bind_property_selectionDisplay (model: self.mActualModel)
    self.bind_property_slavePadCount (model: self.mActualModel)
    self.bind_property_width (model: self.mActualModel)
    self.bind_property_widthUnit (model: self.mActualModel)
    self.bind_property_xCenter (model: self.mActualModel)
    self.bind_property_xCenterUnit (model: self.mActualModel)
    self.bind_property_yCenter (model: self.mActualModel)
    self.bind_property_yCenterUnit (model: self.mActualModel)
    self.bind_property_zoneAllowsManualRenumbering (model: self.mActualModel)
    self.bind_property_zoneName (model: self.mActualModel)
  }

  //····················································································································
  //   UNBIND SELECTION
  //····················································································································

  func unbind_selection () {
    self.mModel?.removeEBObserver (self.mActualModel)
    self.mActualModel.readModelFunction = nil
  //--- annularRing
    self.annularRing_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_annularRing (self.annularRing_property)
  //--- annularRingUnit
    self.annularRingUnit_property.readModelFunction = nil 
    self.annularRingUnit_property.writeModelFunction = nil 
    self.annularRingUnit_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_annularRingUnit (self.annularRingUnit_property)
  //--- backSideFilledBezierPath
    self.backSideFilledBezierPath_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_backSideFilledBezierPath (self.backSideFilledBezierPath_property)
  //--- frontSideFilledBezierPath
    self.frontSideFilledBezierPath_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_frontSideFilledBezierPath (self.frontSideFilledBezierPath_property)
  //--- height
    self.height_property.readModelFunction = nil 
    self.height_property.writeModelFunction = nil 
    self.height_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_height (self.height_property)
  //--- heightUnit
    self.heightUnit_property.readModelFunction = nil 
    self.heightUnit_property.writeModelFunction = nil 
    self.heightUnit_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_heightUnit (self.heightUnit_property)
  //--- holeDiameter
    self.holeDiameter_property.readModelFunction = nil 
    self.holeDiameter_property.writeModelFunction = nil 
    self.holeDiameter_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_holeDiameter (self.holeDiameter_property)
  //--- holeDiameterUnit
    self.holeDiameterUnit_property.readModelFunction = nil 
    self.holeDiameterUnit_property.writeModelFunction = nil 
    self.holeDiameterUnit_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_holeDiameterUnit (self.holeDiameterUnit_property)
  //--- issues
    self.issues_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_issues (self.issues_property)
  //--- noZone
    self.noZone_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_noZone (self.noZone_property)
  //--- objectDisplay
    self.objectDisplay_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_objectDisplay (self.objectDisplay_property)
  //--- padIsTraversing
    self.padIsTraversing_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_padIsTraversing (self.padIsTraversing_property)
  //--- padName
    self.padName_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_padName (self.padName_property)
  //--- padNumber
    self.padNumber_property.readModelFunction = nil 
    self.padNumber_property.writeModelFunction = nil 
    self.padNumber_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_padNumber (self.padNumber_property)
  //--- padNumberDisplay
    self.padNumberDisplay_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_padNumberDisplay (self.padNumberDisplay_property)
  //--- padShape
    self.padShape_property.readModelFunction = nil 
    self.padShape_property.writeModelFunction = nil 
    self.padShape_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_padShape (self.padShape_property)
  //--- padStyle
    self.padStyle_property.readModelFunction = nil 
    self.padStyle_property.writeModelFunction = nil 
    self.padStyle_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_padStyle (self.padStyle_property)
  //--- selectionDisplay
    self.selectionDisplay_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_selectionDisplay (self.selectionDisplay_property)
  //--- slavePadCount
    self.slavePadCount_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_slavePadCount (self.slavePadCount_property)
  //--- width
    self.width_property.readModelFunction = nil 
    self.width_property.writeModelFunction = nil 
    self.width_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_width (self.width_property)
  //--- widthUnit
    self.widthUnit_property.readModelFunction = nil 
    self.widthUnit_property.writeModelFunction = nil 
    self.widthUnit_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_widthUnit (self.widthUnit_property)
  //--- xCenter
    self.xCenter_property.readModelFunction = nil 
    self.xCenter_property.writeModelFunction = nil 
    self.xCenter_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_xCenter (self.xCenter_property)
  //--- xCenterUnit
    self.xCenterUnit_property.readModelFunction = nil 
    self.xCenterUnit_property.writeModelFunction = nil 
    self.xCenterUnit_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_xCenterUnit (self.xCenterUnit_property)
  //--- yCenter
    self.yCenter_property.readModelFunction = nil 
    self.yCenter_property.writeModelFunction = nil 
    self.yCenter_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_yCenter (self.yCenter_property)
  //--- yCenterUnit
    self.yCenterUnit_property.readModelFunction = nil 
    self.yCenterUnit_property.writeModelFunction = nil 
    self.yCenterUnit_property.validateAndWriteModelFunction = nil 
    self.mActualModel.removeEBObserverOf_yCenterUnit (self.yCenterUnit_property)
  //--- zoneAllowsManualRenumbering
    self.zoneAllowsManualRenumbering_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_zoneAllowsManualRenumbering (self.zoneAllowsManualRenumbering_property)
  //--- zoneName
    self.zoneName_property.readModelFunction = nil 
    self.mActualModel.removeEBObserverOf_zoneName (self.zoneName_property)
  //---
    self.mModel = nil    
  }

  //····················································································································
  //    Explorer
  //····················································································································

  private var mValueExplorer : NSButton?
  private var mExplorerWindow : NSWindow?

  //····················································································································

  final func addExplorer (name : String, y : inout CGFloat, view : NSView) {
    let font = NSFont.boldSystemFont (ofSize: NSFont.smallSystemFontSize)
    let tf = NSTextField (frame:secondColumn (y))
    tf.isEnabled = true
    tf.isEditable = false
    tf.stringValue = name
    tf.font = font
    view.addSubview (tf)
    let valueExplorer = NSButton (frame:thirdColumn (y))
    valueExplorer.font = font
    valueExplorer.title = explorerIndexString (ebObjectIndex) + className
    valueExplorer.target = self
    valueExplorer.action = #selector(SelectionController_PackageDocument_mPackagePadSelectionController.showObjectWindowFromExplorerButton(_:))
    view.addSubview (valueExplorer)
    self.mValueExplorer = valueExplorer
    y += EXPLORER_ROW_HEIGHT
  }
  
  //····················································································································

  func buildExplorerWindow () {
  //-------------------------------------------------- Create Window
    let r = NSRect (x:20.0, y:20.0, width:10.0, height:10.0)
    self.mExplorerWindow = NSWindow (contentRect: r, styleMask: [.titled, .closable], backing: .buffered, defer: true, screen: nil)
  //-------------------------------------------------- Adding properties
    let view = NSView (frame:r)
    var y : CGFloat = 0.0
    createEntryForPropertyNamed (
      "annularRingUnit",
      idx:self.annularRingUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.annularRingUnit_property.mObserverExplorer,
      valueExplorer:&self.annularRingUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "height",
      idx:self.height_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.height_property.mObserverExplorer,
      valueExplorer:&self.height_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "heightUnit",
      idx:self.heightUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.heightUnit_property.mObserverExplorer,
      valueExplorer:&self.heightUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holeDiameter",
      idx:self.holeDiameter_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.holeDiameter_property.mObserverExplorer,
      valueExplorer:&self.holeDiameter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "holeDiameterUnit",
      idx:self.holeDiameterUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.holeDiameterUnit_property.mObserverExplorer,
      valueExplorer:&self.holeDiameterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padNumber",
      idx:self.padNumber_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padNumber_property.mObserverExplorer,
      valueExplorer:&self.padNumber_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padShape",
      idx:self.padShape_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padShape_property.mObserverExplorer,
      valueExplorer:&self.padShape_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "padStyle",
      idx:self.padStyle_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.padStyle_property.mObserverExplorer,
      valueExplorer:&self.padStyle_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "width",
      idx:self.width_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.width_property.mObserverExplorer,
      valueExplorer:&self.width_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "widthUnit",
      idx:self.widthUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.widthUnit_property.mObserverExplorer,
      valueExplorer:&self.widthUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xCenter",
      idx:self.xCenter_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xCenter_property.mObserverExplorer,
      valueExplorer:&self.xCenter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "xCenterUnit",
      idx:self.xCenterUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.xCenterUnit_property.mObserverExplorer,
      valueExplorer:&self.xCenterUnit_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yCenter",
      idx:self.yCenter_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yCenter_property.mObserverExplorer,
      valueExplorer:&self.yCenter_property.mValueExplorer
    )
    createEntryForPropertyNamed (
      "yCenterUnit",
      idx:self.yCenterUnit_property.ebObjectIndex,
      y:&y,
      view:view,
      observerExplorer:&self.yCenterUnit_property.mObserverExplorer,
      valueExplorer:&self.yCenterUnit_property.mValueExplorer
    )
  //-------------------------------------------------- Finish Window construction
  //--- Resize View
    let viewFrame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    view.frame = viewFrame
  //--- Set content size
    self.mExplorerWindow?.setContentSize (NSSize (width:EXPLORER_ROW_WIDTH + 16.0, height:fmin (600.0, y)))
  //--- Set close button as 'remove window' button
    let closeButton : NSButton? = self.mExplorerWindow?.standardWindowButton (.closeButton)
    closeButton?.target = self
    closeButton?.action = #selector(SelectionController_PackageDocument_mPackagePadSelectionController.deleteSelectionControllerWindowAction(_:))
  //--- Set window title
    let windowTitle = explorerIndexString (ebObjectIndex) + className
    self.mExplorerWindow!.title = windowTitle
  //--- Add Scroll view
    let frame = NSRect (x:0.0, y:0.0, width:EXPLORER_ROW_WIDTH, height:y)
    let sw = NSScrollView (frame:frame)
    sw.hasVerticalScroller = true
    sw.documentView = view
    self.mExplorerWindow!.contentView = sw
  }

  //····················································································································
  //   showObjectWindowFromExplorerButton
  //····················································································································

  @objc func showObjectWindowFromExplorerButton (_ : Any) {
    if self.mExplorerWindow == nil {
      self.buildExplorerWindow ()
    }
    self.mExplorerWindow?.makeKeyAndOrderFront(nil)
  }
  
  //····················································································································
  //   deleteSelectionControllerWindowAction
  //····················································································································

  @objc func deleteSelectionControllerWindowAction (_ : Any) {
    self.clearObjectExplorer ()
  }

  //····················································································································
  //   clearObjectExplorer
  //····················································································································

  func clearObjectExplorer () {
    if let closeButton = self.mExplorerWindow?.standardWindowButton (.closeButton) {
      closeButton.target = nil
    }
    self.mExplorerWindow?.orderOut (nil)
    self.mExplorerWindow = nil
  }

  //···················································································································*

  private final func bind_property_annularRing (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_annularRing (self.annularRing_property)
    self.annularRing_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.annularRing_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_annularRingUnit (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_annularRingUnit (self.annularRingUnit_property)
    self.annularRingUnit_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.annularRingUnit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.annularRingUnit_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.annularRingUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.annularRingUnit_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.annularRingUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_backSideFilledBezierPath (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_backSideFilledBezierPath (self.backSideFilledBezierPath_property)
    self.backSideFilledBezierPath_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <NSBezierPath> ()
          var isMultipleSelection = false
          for object in v {
            switch object.backSideFilledBezierPath_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_frontSideFilledBezierPath (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_frontSideFilledBezierPath (self.frontSideFilledBezierPath_property)
    self.frontSideFilledBezierPath_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <NSBezierPath> ()
          var isMultipleSelection = false
          for object in v {
            switch object.frontSideFilledBezierPath_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_height (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_height (self.height_property)
    self.height_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.height_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.height_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.height_property.setProp (inValue)
          }
        }
      }
    }
    self.height_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.height_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_heightUnit (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_heightUnit (self.heightUnit_property)
    self.heightUnit_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.heightUnit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.heightUnit_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.heightUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.heightUnit_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.heightUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_holeDiameter (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_holeDiameter (self.holeDiameter_property)
    self.holeDiameter_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.holeDiameter_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.holeDiameter_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.holeDiameter_property.setProp (inValue)
          }
        }
      }
    }
    self.holeDiameter_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.holeDiameter_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_holeDiameterUnit (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_holeDiameterUnit (self.holeDiameterUnit_property)
    self.holeDiameterUnit_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.holeDiameterUnit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.holeDiameterUnit_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.holeDiameterUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.holeDiameterUnit_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.holeDiameterUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_issues (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_issues (self.issues_property)
    self.issues_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <CanariIssueArray> ()
          var isMultipleSelection = false
          for object in v {
            switch object.issues_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_noZone (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_noZone (self.noZone_property)
    self.noZone_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.noZone_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_objectDisplay (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_objectDisplay (self.objectDisplay_property)
    self.objectDisplay_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.objectDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_padIsTraversing (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_padIsTraversing (self.padIsTraversing_property)
    self.padIsTraversing_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.padIsTraversing_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_padName (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_padName (self.padName_property)
    self.padName_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.padName_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_padNumber (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_padNumber (self.padNumber_property)
    self.padNumber_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.padNumber_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.padNumber_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.padNumber_property.setProp (inValue)
          }
        }
      }
    }
    self.padNumber_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.padNumber_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_padNumberDisplay (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_padNumberDisplay (self.padNumberDisplay_property)
    self.padNumberDisplay_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.padNumberDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_padShape (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_padShape (self.padShape_property)
    self.padShape_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <PadShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.padShape_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.padShape_property.writeModelFunction = { [weak self] (inValue : PadShape) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.padShape_property.setProp (inValue)
          }
        }
      }
    }
    self.padShape_property.validateAndWriteModelFunction = { [weak self] (candidateValue : PadShape, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.padShape_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_padStyle (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_padStyle (self.padStyle_property)
    self.padStyle_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <PadStyle> ()
          var isMultipleSelection = false
          for object in v {
            switch object.padStyle_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.padStyle_property.writeModelFunction = { [weak self] (inValue : PadStyle) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.padStyle_property.setProp (inValue)
          }
        }
      }
    }
    self.padStyle_property.validateAndWriteModelFunction = { [weak self] (candidateValue : PadStyle, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.padStyle_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_selectionDisplay (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_selectionDisplay (self.selectionDisplay_property)
    self.selectionDisplay_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <EBShape> ()
          var isMultipleSelection = false
          for object in v {
            switch object.selectionDisplay_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_slavePadCount (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_slavePadCount (self.slavePadCount_property)
    self.slavePadCount_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.slavePadCount_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_width (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_width (self.width_property)
    self.width_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.width_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.width_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.width_property.setProp (inValue)
          }
        }
      }
    }
    self.width_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.width_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_widthUnit (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_widthUnit (self.widthUnit_property)
    self.widthUnit_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.widthUnit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.widthUnit_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.widthUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.widthUnit_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.widthUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_xCenter (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_xCenter (self.xCenter_property)
    self.xCenter_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xCenter_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenter_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xCenter_property.setProp (inValue)
          }
        }
      }
    }
    self.xCenter_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.xCenter_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_xCenterUnit (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_xCenterUnit (self.xCenterUnit_property)
    self.xCenterUnit_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.xCenterUnit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.xCenterUnit_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.xCenterUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.xCenterUnit_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.xCenterUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_yCenter (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_yCenter (self.yCenter_property)
    self.yCenter_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yCenter_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yCenter_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yCenter_property.setProp (inValue)
          }
        }
      }
    }
    self.yCenter_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.yCenter_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_yCenterUnit (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_yCenterUnit (self.yCenterUnit_property)
    self.yCenterUnit_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Int> ()
          var isMultipleSelection = false
          for object in v {
            switch object.yCenterUnit_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
    self.yCenterUnit_property.writeModelFunction = { [weak self] (inValue : Int) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          break
        case .single (let v) :
          for object in v {
            object.yCenterUnit_property.setProp (inValue)
          }
        }
      }
    }
    self.yCenterUnit_property.validateAndWriteModelFunction = { [weak self] (candidateValue : Int, windowForSheet : NSWindow?) in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty, .multiple :
          return false
        case .single (let v) :
          for object in v {
            let result = object.yCenterUnit_property.validateAndSetProp (candidateValue, windowForSheet:windowForSheet)
            if !result {
              return false
            }
          }
          return true
        }
      }else{
        return false
      }
    }
  }

  //···················································································································*

  private final func bind_property_zoneAllowsManualRenumbering (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_zoneAllowsManualRenumbering (self.zoneAllowsManualRenumbering_property)
    self.zoneAllowsManualRenumbering_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <Bool> ()
          var isMultipleSelection = false
          for object in v {
            switch object.zoneAllowsManualRenumbering_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }

  //···················································································································*

  private final func bind_property_zoneName (model : ReadOnlyArrayOf_PackagePad) {
    model.addEBObserverOf_zoneName (self.zoneName_property)
    self.zoneName_property.readModelFunction = { [weak self] in
      if let model = self?.mActualModel {
        switch model.prop {
        case .empty :
          return .empty
        case .multiple :
          return .multiple
        case .single (let v) :
          var s = Set <String> ()
          var isMultipleSelection = false
          for object in v {
            switch object.zoneName_property_selection {
            case .empty :
              return .empty
            case .multiple :
              isMultipleSelection = true
            case .single (let vProp) :
              s.insert (vProp)
            }
          }
          if isMultipleSelection {
            return .multiple
          }else if s.count == 0 {
            return .empty
          }else if s.count == 1 {
            return .single (s.first!)
          }else{
            return .multiple
          }
        }
      }else{
        return .empty
      }
    }
  }



  //····················································································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

